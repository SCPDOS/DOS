     1                                  [map all ./lst/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=INT 49 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233                              <1>     ;The following byte is reserved outside of sysinit
   234 0000000D ??                  <1>     .subSysMark resb 1  ;Marks the optional DOS subsystem of the MCB
   235 0000000E ????                <1>     .reserved   resb 2  
   236                              <1>     .program:
   237                              <1> endstruc
   238                              <1> ;MCB equates
   239                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   240                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   241                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   242                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   243                              <1> mcbMarkCtn      equ "M"
   244                              <1> mcbMarkEnd      equ "Z"
   245                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   246                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   247                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   248                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   249                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   250                              <1> mcbSubIFS       equ "I" ;Unused for now
   251                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   252                              <1> mcbSubFCBS      equ "X" ;Unused for now
   253                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   254                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   255                              <1> mcbSubStacks    equ "S" ;Unused for now
   256                              <1> 
   257                              <1> 
   258                              <1> memFirstFit     equ 0   ;First free block goes to application
   259                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   260                              <1> memLastFit      equ 2   ;Last free block goes to application
   261                              <1> 
   262                              <1> ;Owner = Para aligned address => Owning application PSP
   263                              <1> ;...To consider...
   264                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   265                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   266                              <1> ;------------------------------------------------------------------------;
   267                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   268                              <1> ; following order, thus allowing for return values to be placed in the 
   269                              <1> ; registers by accessing the caller register stack frame.
   270                              <1> ;------------------------------------------------------------------------;
   271                              <1> struc callerFrame
   272 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   273 00000008 ????????????????    <1>     .rbx    resq 1    
   274 00000010 ????????????????    <1>     .rcx    resq 1
   275 00000018 ????????????????    <1>     .rdx    resq 1
   276 00000020 ????????????????    <1>     .rsi    resq 1
   277 00000028 ????????????????    <1>     .rdi    resq 1
   278 00000030 ????????????????    <1>     .rbp    resq 1
   279 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   280 00000040 ????????????????    <1>     .r9     resq 1
   281                              <1> ;Pushed by Processor when invoked via Interrupt
   282 00000048 ????????????????    <1>     .rip    resq 1
   283 00000050 ????????????????    <1>     .cs     resq 1
   284 00000058 ????????????????    <1>     .flags  resq 1
   285                              <1> endstruc
   286                              <1> 
   287                              <1> struc dpl
   288                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   289                              <1> ; server calls
   290 00000000 ????????????????    <1>     .rax    resq 1
   291 00000008 ????????????????    <1>     .rbx    resq 1
   292 00000010 ????????????????    <1>     .rcx    resq 1
   293 00000018 ????????????????    <1>     .rdx    resq 1
   294 00000020 ????????????????    <1>     .rsi    resq 1
   295 00000028 ????????????????    <1>     .rdi    resq 1
   296 00000030 ????????????????    <1>     .r8     resq 1
   297 00000038 ????????????????    <1>     .r9     resq 1
   298 00000040 ????????????????    <1>     .align  resq 1
   299 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   300 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   304 00000000 ????????????????    <1>     .oldRBP         resq 1  ;Ptr to DOSSEG
   305 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   306 00000010 ????????????????    <1>     .newSFTVal      resq 1
   307 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   308 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   309 00000028 ????????????????    <1>     .newLastdrive   resq 1
   310 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   311 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   312 00000040 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   313 00000048 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   314 00000050 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line buffer of line being processed
   315 00000058 ????????????????    <1>     .driverBreak    resq 1  ;Ptr to the pathname terminator 
   316 00000060 ????????????????    <1>     .breakChar      resq 1  ;Char that was replaced by null for terminator
   317                              <1> endstruc
   318                              <1> 
   319                              <1> struc filename
   320                              <1> ;8.3 File name struct
   321 00000000 ????????????????    <1>     .fName  resb 8
   322 00000008 ??????              <1>     .fExt   resb 3
   323                              <1> endstruc
   324                              <1> 
   325                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   326 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   327 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   328 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   329 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   330 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   331 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   332 00000016 ????                <1>     .fileTime   resw 1  ;File time
   333 00000018 ????                <1>     .fileDate   resw 1  ;File date
   334 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   335 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc psp
   339 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   340 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   341 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   342 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   343 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   344 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   345 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   346                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   347 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   348 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   349 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   350 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   351 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   352 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   353 0000005B ??                  <1>                 resb 1  ;Reserved byte
   354                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   355                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   356                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   357                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   358                              <1> ; always used and xtraHdlSz.
   359                              <1> ;Will need to add two SYSCALLS for future expansion:
   360                              <1> ;       1) Get Program Environment Pointer
   361                              <1> ;       2) Get Command Line arguments pointer
   362                              <1> ;The below are in the same place as in DOS.
   363                              <1>     .cmdLineArgPtr: ;Symbol for future use
   364 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   365 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   366                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   367 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   368 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   369                              <1> endstruc
   370                              <1> 
   371                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   372                              <1> 
   373                              <1> struc clkStruc
   374 00000000 ????                <1>     .dateWord   resw 1
   375 00000002 ??                  <1>     .minutes    resb 1
   376 00000003 ??                  <1>     .hours      resb 1
   377 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   378 00000005 ??                  <1>     .seconds    resb 1
   379                              <1> endstruc
   380                              <1> 
   381                              <1> 
   382                              <1> struc extCtryStruc
   383 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   384 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   385 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   386 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   387 00000007 ????                <1>     .dtfmt      resw 1  ;Date time format (2 bytes)
   388                              <1>                         ;0 = month day year hh:mm:ss
   389                              <1>                         ;1 = day month year hh:mm:ss
   390                              <1>                         ;2 = year month day hh:mm:ss
   391 00000009 ??????????          <1>     .curr       resb 5   ;ASCIIZ Currency symbol (5 chars)
   392 0000000E ????                <1>     .thouSep    resb 2   ;ASCIIZ Thousands separator
   393 00000010 ????                <1>     .dcmlSep    resb 2   ;ASCIIZ Decimal separator
   394 00000012 ????                <1>     .dateSep    resb 2   ;ASCIIZ Date separator
   395 00000014 ????                <1>     .timeSep    resb 2   ;ASCIIZ Time separator
   396 00000016 ??                  <1>     .currFmt    resb 1   ;Currency Format
   397                              <1>                         ;0 = Symbol leads, without space
   398                              <1>                         ;1 = Symbol follows, without space
   399                              <1>                         ;2 = Symbol leads, one space
   400                              <1>                         ;3 = Symbol follows, one space
   401                              <1>                         ;4 = Symbol replace decimal separator
   402 00000017 ??                  <1>     .digtdpt    resb 1   ;Number of digits after the decimal point
   403 00000018 ??                  <1>     .timefmt    resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   404 00000019 ????????????????    <1>     .mapptr     resb 8   ;Case map address (0 is nulptr), needs fixing up
   405 00000021 ????                <1>     .dataSep    resb 2   ;Data list separator
   406 00000023 <res Ah>            <1>     .resv       resb 10  ;Reserve 10 bytes
   407                              <1> endstruc
   408                              <1> 
   409                              <1> struc countryStruc
   410 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   411                              <1>                         ;0 = month day year hh:mm:ss
   412                              <1>                         ;1 = day month year hh:mm:ss
   413                              <1>                         ;2 = year month day hh:mm:ss
   414 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   415 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   416 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   417 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   418 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   419 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   420                              <1>                         ;0 = Symbol leads, without space
   421                              <1>                         ;1 = Symbol follows, without space
   422                              <1>                         ;2 = Symbol leads, one space
   423                              <1>                         ;3 = Symbol follows, one space
   424                              <1>                         ;4 = Symbol replace decimal separator
   425 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   426 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   427 00000012 ????????????????    <1>     .mapptr    resb 8   ;Case map address (0 is nulptr), needs fixing up
   428 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   429 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   430                              <1> endstruc
   431                              <1> 
   432                              <1> ;Critical Error AH bitfield equates
   433                              <1> critRead    equ 0h
   434                              <1> critWrite   equ 1h
   435                              <1> critDOS     equ 0h
   436                              <1> critFAT     equ 2h
   437                              <1> critDir     equ 4h
   438                              <1> critData    equ 6h
   439                              <1> critFailOK  equ 8h
   440                              <1> critRetryOK equ 10h
   441                              <1> critIgnorOK equ 20h
   442                              <1> critCharDev equ 80h
   443                              <1> 
   444                              <1> critIgnore  equ 0
   445                              <1> critRetry   equ 1
   446                              <1> critAbort   equ 2
   447                              <1> critFail    equ 3
   448                              <1> 
   449                              <1> ;MISC ASCII control chars
   450                              <1> NUL equ 00h ;^@         | ASCII Null
   451                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   452                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   453                              <1> BEL equ 07h ;^G         | ASCII Bell
   454                              <1> BSP equ 08h ;^H         | ASCII Backspace
   455                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   456                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   457                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   458                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   459                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   460                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   461                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   462                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   463                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   464                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   465                              <1> SPC equ 20h ;Printable  | ASCII Space
   466                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   467                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   468                              <1> 
   469                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   470                              <1> ;Extended Ascii Codes
   471                              <1> eF1     equ 3Bh ;F1 second byte
   472                              <1> eF2     equ 3Ch ;F2 second byte
   473                              <1> eF3     equ 3Dh ;F3 second byte
   474                              <1> eF4     equ 3Eh ;F4 second byte
   475                              <1> eF5     equ 3Fh ;F5 second byte
   476                              <1> eF6     equ 40h ;F6 second byte
   477                              <1> eF7     equ 41h ;F7 second byte
   478                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   479                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   480                              <1> eIns    equ 52h ;Insert second byte
   481                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   482                              <1> 
   483                              <1> ;Default Configuration for the system
   484                              <1> 
   485                              <1> buffersDefault  equ 30
   486                              <1> filesDefault    equ 20
   487                              <1> fcbsDefault     equ 4
   488                              <1> safeFcbsDeflt   equ 0
   489                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./src/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI44     equ 83  ;Fail on INT 44h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
     3                              <1> 
     4                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./src/Sysinit/oemreloc.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    38 0000007B 909090909090909090- <1>
    38 00000084 909090909090909090- <1>
    38 0000008D 909090909090909090- <1>
    38 00000096 909090909090909090- <1>
    38 0000009F 909090909090909090- <1>
    38 000000A8 909090909090909090- <1>
    38 000000B1 909090909090909090- <1>
    38 000000BA 909090909090909090- <1>
    38 000000C3 909090909090909090- <1>
    38 000000CC 909090909090909090- <1>
    38 000000D5 909090909090909090- <1>
    38 000000DE 909090909090909090- <1>
    38 000000E7 909090909090909090- <1>
    38 000000F0 909090909090909090- <1>
    38 000000F9 909090909090909090- <1>
    38 00000102 909090909090909090- <1>
    38 0000010B 909090909090909090- <1>
    38 00000114 909090909090909090- <1>
    38 0000011D 909090909090909090- <1>
    38 00000126 909090909090909090- <1>
    38 0000012F 909090909090909090- <1>
    38 00000138 909090909090909090- <1>
    38 00000141 909090909090909090- <1>
    38 0000014A 909090909090909090- <1>
    38 00000153 909090909090909090- <1>
    38 0000015C 909090909090909090- <1>
    38 00000165 909090909090909090- <1>
    38 0000016E 909090909090909090- <1>
    38 00000177 909090909090909090- <1>
    38 00000180 909090909090909090- <1>
    38 00000189 909090909090909090- <1>
    38 00000192 909090909090909090- <1>
    38 0000019B 909090909090909090- <1>
    38 000001A4 909090909090909090- <1>
    38 000001AD 909090909090909090- <1>
    38 000001B6 909090909090909090- <1>
    38 000001BF 909090909090909090- <1>
    38 000001C8 909090909090909090- <1>
    38 000001D1 909090909090909090- <1>
    38 000001DA 909090909090909090- <1>
    38 000001E3 909090909090909090- <1>
    38 000001EC 909090909090909090- <1>
    38 000001F5 909090909090909090- <1>
    38 000001FE 9090                <1>
    39                              <1> ;END OF FIRST SECTOR!!
    40                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    41                              <1> initBegin:
    42 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    43 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    44 00000206 0F32                <1>     rdmsr
    45 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    46 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    47 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    48 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    49 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    50 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    51 00000221 E900000000          <1>     jmp sysinit
    52                              <1> ;Jump with rsi -> BIOS userbase
    53                              <1> ;          rdi -> APT load area (page aligned)
    54                              <1> ;          r15 -> Boot drive
    16                                  %include "./src/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> sysinit:    ;Control is passed here from OEMINIT
     3 00000226 E8FE140000          <1>     call OEMINIT    ;First we call OEMINIT
     4 0000022B 0F827E180000        <1>     jc OEMHALT      ;If it returns CF=CY, assume halt boot
     5                              <1> ;First move the OEMINIT into fs 
     6 00000231 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     7 00000236 488B3D9C130000      <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     8 0000023D 89F8                <1>     mov eax, edi
     9 0000023F 4889FA              <1>     mov rdx, rdi
    10 00000242 48C1EA20            <1>     shr rdx, 20h
    11 00000246 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    12 00000248 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    13                              <1> ;------------------------------------------------;
    14                              <1> ;      Copy DOS to it's final resting ground     ;
    15                              <1> ;------------------------------------------------;  
    16                              <1> dosReloc:
    17 0000024B 488D35(00000000)    <1>     lea rsi, section.resSeg.start   ;Get pointer to the start of resSeg
    18 00000252 488B3D80130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    19 00000259 4881C7[2E1B0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of resSeg
    20 00000260 4839F7              <1>     cmp rdi, rsi 
    21 00000263 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    22 00000265 B943110000          <1>     mov ecx, (dosLen + 7)/8
    23 0000026A F348A5              <1>     rep movsq
    24                              <1> skipDOSReloc:
    25                              <1> ;------------------------------------------------;
    26                              <1> ;              Connect Debugger                  ;
    27                              <1> ;------------------------------------------------;
    28                              <1> %if DEBUG
    29                              <1> ;Only connect if in debug mode
    30                              <1>     mov eax, 0C501h ;Connect debugger
    31                              <1>     int 35h
    32                              <1> %endif
    33                              <1> ;------------------------------------------------;
    34                              <1> ;           Sanitise the data area               ;
    35                              <1> ;------------------------------------------------;
    36                              <1> ; This call initialises ALL fields in the DOS    ;
    37                              <1> ; data area with 0's. Thus any fields, which     ;
    38                              <1> ; need to be initialised with a 0 value, are     ;
    39                              <1> ; initialised for free.                          ;
    40                              <1> ;------------------------------------------------;
    41 0000026D 488B3D65130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    42 00000274 B9[2E1B0000]        <1>     mov ecx, dSegLen
    43 00000279 30C0                <1>     xor al, al
    44 0000027B F3AA                <1>     rep stosb   ;and sanitise away!
    45                              <1> ;------------------------------------------------;
    46                              <1> ;          Kernel inits and adjustments          ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ;Adjust Interrupt Entries Int 00h-15h
    49                              <1> ;Assumes rbp points to DOSSEG
    50 0000027D 0F010D4B130000      <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    51                              <1> adjExceptions:
    52 00000284 488D3D660F0000      <1>     lea rdi, exceptData
    53 0000028B 31C0                <1>     xor eax, eax            ;Start with interrupt 0
    54 0000028D B915000000          <1>     mov ecx, 21
    55 00000292 E8F2120000          <1>     call setupInterruptBlock
    56                              <1> ;Adjust Interrupt Entries Int 40h-49h
    57                              <1> adjInts:
    58 00000297 488D3D03100000      <1>     lea rdi, intData
    59 0000029E B840000000          <1>     mov eax, 40h            ;Start with interrupt 40h
    60 000002A3 B950000000          <1>     mov ecx, 50h
    61 000002A8 E8DC120000          <1>     call setupInterruptBlock
    62                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    63                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    64                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    65                              <1> ;Now adjust int 42h and 44h correctly using DOS to get them low
    66 000002AD 488D15FB170000      <1>     lea rdx, OEMHALT ;Get segment start address
    67 000002B4 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
    68 000002B9 CD41                <1>     int 41h
    69 000002BB 488D15ED170000      <1>     lea rdx, OEMHALT ;Get segment start address
    70 000002C2 B844250000          <1>     mov eax, 2544h
    71 000002C7 CD41                <1>     int 41h
    72                              <1> ;------------------------------------------------;
    73                              <1> ;          Driver Adjustments and inits          ;
    74                              <1> ;------------------------------------------------;
    75                              <1> ;Modify the pointers in nData before putting them in the data area
    76 000002C9 48012D5B100000      <1>     add qword [nData + drvHdr.strPtr], rbp
    77 000002D0 48012D5C100000      <1>     add qword [nData + drvHdr.intPtr], rbp
    78                              <1> ;Copy the Null driver header to its location in Sysvars
    79 000002D7 B922000000          <1>     mov ecx, drvHdr_size
    80 000002DC 488D353E100000      <1>     lea rsi, qword [nData]
    81 000002E3 488DBD[7A000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    82 000002EA F3A4                <1>     rep movsb   
    83                              <1> 
    84                              <1> ;Adjust the addresses in the other driver headers 
    85 000002EC 488B3503130000      <1>     mov rsi, qword [OEMDRVCHAIN]
    86 000002F3 4889B5[7A000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    87                              <1> adjDrivers:
    88                              <1> ;Input: rsi = Effective address of driver in DOS segment
    89                              <1> ;       rbp = Ptr to the start of the DOS segment
    90                              <1> ;Output: rsi = EA of next header in DOS segment
    91 000002FA 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    92 000002FE 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    93 00000302 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    94 00000309 7408                <1>     je short .exit
    95 0000030B 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    96 0000030E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    97                              <1>     ;add rsi, drvHdr_size   ;... but definitely suggest it for kernel drivers
    98 00000311 EBE7                <1>     jmp short adjDrivers
    99                              <1> .exit:
   100                              <1> ;------------------------------------------------;
   101                              <1> ;                   MCB inits                    ;
   102                              <1> ;------------------------------------------------;
   103                              <1> makeMCBChain:
   104                              <1> ;Fill in Anchor MCB first
   105 00000313 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
   106 0000031A 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
   107 00000321 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
   108 00000324 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
   109 0000032A C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   110 0000032D 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
   111 00000333 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
   111 0000033B 000000              <1>
   112 0000033E C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
   113                              <1> 
   114 00000345 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
   115 0000034C 48890596120000      <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
   116 00000353 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
   116 00000358 [33000000]          <1>
   117                              <1> 
   118 0000035C 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   119 0000035D E89F140000          <1>     call OEMMCBINIT ;Build MCB chain
   120 00000362 5D                  <1>     pop rbp
   121 00000363 0F8246170000        <1>     jc OEMHALT
   122                              <1> ;------------------------------------------------;
   123                              <1> ;              Kernel Driver inits               ;
   124                              <1> ;------------------------------------------------;
   125                              <1> kernDrvInit:
   126                              <1>     ;rbp and fs point to DOSSEG
   127                              <1>     ;Set the CON pointer and the CLOCK pointers.
   128                              <1>     ;The standard defines that kernel drivers are such that the 
   129                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   130                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   131                              <1>     ;GET/SET TIME and GET/SET DATE
   132 00000369 488B3586120000      <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   133 00000370 4889F3              <1>     mov rbx, rsi
   134 00000373 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   135 0000037A 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   136 0000037D 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   137 00000380 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   138 00000383 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   139 0000038A 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   140 0000038D 488D1D76120000      <1>     lea rbx, initDrvBlk
   141                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   142 00000394 48C785[1F040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   142 0000039C 000000              <1>
   143                              <1> .init:
   144 0000039F E832110000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   145 000003A4 0F8205170000        <1>     jc OEMHALT
   146 000003AA E8F10F0000          <1>     call addDriverMarkers   ;Preserves all registers
   147 000003AF 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   148 000003B5 750B                <1>     jnz short .notMSD
   149 000003B7 E888110000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   150 000003BC 0F82ED160000        <1>     jc OEMHALT
   151                              <1> .notMSD:
   152 000003C2 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   153 000003C5 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   154 000003CC 75D1                <1>     jne short .init ;If not, goto next driver
   155                              <1> ;Finally, Eject the init routine if so desired by the implementers
   156 000003CE 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   157 000003D5 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   158 000003DC E8A4100000          <1>     call ejectKernelInit
   159 000003E1 0F82C8160000        <1>     jc OEMHALT
   160                              <1> ;----------------------------------------:
   161                              <1> ;           End of driver inits.         :
   162                              <1> ;----------------------------------------:
   163                              <1> ;
   164                              <1> ;----------------------------------------:
   165                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   166                              <1> ;      So called the OEM BIOS INIT       :
   167                              <1> ;----------------------------------------:
   168                              <1> ;
   169                              <1> ;----------------------------------------:
   170                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   171                              <1> ;----------------------------------------:
   172                              <1> ;
   173                              <1> ;Setup internal DOS vars from OEM passed arguments.
   174 000003E7 0FB60507120000      <1>     movzx eax, byte [OEMBIOS]
   175 000003EE 85C0                <1>     test eax, eax
   176 000003F0 741B                <1>     jz short skipOEMName
   177 000003F2 488DB5[02000000]    <1>     lea rsi, qword [rbp + dosBIOSName]
   178 000003F9 48B8494F0000000000- <1>     mov rax, "IO"
   178 00000402 00                  <1>
   179 00000403 488906              <1>     mov qword [rsi], rax
   180 00000406 C746082E535953      <1>     mov dword [rsi + 8], ".SYS"
   181                              <1> skipOEMName:
   182 0000040D 8B05F3110000        <1>     mov eax, dword [OEMVERSION]
   183 00000413 8985[11000000]      <1>     mov dword [rbp + biosVers], eax
   184                              <1> 
   185 00000419 488B05DE110000      <1>     mov rax, qword [OEMPTR]
   186 00000420 488985[15000000]    <1>     mov qword [rbp + biosPtr], rax
   187                              <1> 
   188 00000427 0FB605C5110000      <1>     movzx eax, byte [DFLTDRIVE]
   189 0000042E 31DB                <1>     xor ebx, ebx
   190 00000430 3D19000000          <1>     cmp eax, 25
   191 00000435 0F47C3              <1>     cmova eax, ebx
   192 00000438 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   193                              <1> 
   194 0000043E 0FB605AC110000      <1>     movzx eax, byte [FILES]
   195 00000445 BB14000000          <1>     mov ebx, filesDefault
   196 0000044A 3D05000000          <1>     cmp eax, 5
   197 0000044F 0F42C3              <1>     cmovb eax, ebx
   198 00000452 3DFE000000          <1>     cmp eax, 254
   199 00000457 0F47C3              <1>     cmova eax, ebx
   200 0000045A 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   201                              <1> 
   202 00000460 0FB6058B110000      <1>     movzx eax, byte [BUFFERS]
   203 00000467 BB1E000000          <1>     mov ebx, buffersDefault
   204 0000046C 85C0                <1>     test eax, eax
   205 0000046E 0F44C3              <1>     cmovz eax, ebx
   206 00000471 3D63000000          <1>     cmp eax, 99
   207 00000476 0F47C3              <1>     cmova eax, ebx
   208 00000479 880573110000        <1>     mov byte [BUFFERS], al
   209                              <1> 
   210 0000047F 0FB6056E110000      <1>     movzx eax, byte [LASTDRIVE]
   211 00000486 BB05000000          <1>     mov ebx, lastDriveDeflt
   212 0000048B 39D8                <1>     cmp eax, ebx
   213 0000048D 0F42C3              <1>     cmovb eax, ebx
   214 00000490 3D19000000          <1>     cmp eax, 25
   215 00000495 0F47C3              <1>     cmova eax, ebx
   216 00000498 880556110000        <1>     mov byte [LASTDRIVE], al
   217 0000049E 8885[78000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   218                              <1> 
   219 000004A4 66C785[1F000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   219 000004AC 00                  <1>
   220 000004AD 66C785[21000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   220 000004B5 00                  <1>
   221                              <1> ;------------------------------------------------;
   222                              <1> ;          Find largest sector size              ;
   223                              <1> ;------------------------------------------------;
   224                              <1> sectorSizeSearch:
   225                              <1> ;Done by reading DPB's for each drive
   226 000004B6 31C0                <1>     xor eax, eax
   227 000004B8 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   227 000004BD [3B000000]          <1>
   228                              <1>     ;Go thru each block individually
   229                              <1> .findLargest:
   230 000004C1 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   231 000004C5 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   232 000004CA 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   233 000004CE 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   234 000004D5 75EA                <1>     jne short .findLargest  ;If not, keep checking
   235 000004D7 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   235 000004DC [5B000000]          <1>
   236                              <1> ;------------------------------------------------;
   237                              <1> ;                CDS array inits                 ;
   238                              <1> ;------------------------------------------------;
   239 000004E0 0FB68D[78000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   240 000004E7 E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   241 000004EC E995000000          <1>     jmp initialCDSWritten ;Go past the function
   242                              <1> makeCDSArray:
   243                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   244                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   245                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   246 000004F1 B85B000000          <1>     mov eax, cds_size
   247 000004F6 F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   248 000004F8 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   249 000004FD C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   250 00000500 31DB                <1>     xor ebx, ebx
   251 00000502 89C3                <1>     mov ebx, eax
   252 00000504 B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   253 00000509 CD41                <1>     int 41h
   254                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 0000050B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000050D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   255 0000050E 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   256 00000511 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   257 00000517 C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   258 0000051B 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   259                              <1> 
   260 00000523 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   260 00000528 [65000000]          <1>
   261 0000052C 57                  <1>     push rdi
   262 0000052D 51                  <1>     push rcx
   263 0000052E 89C8                <1>     mov eax, ecx
   264 00000530 B95B000000          <1>     mov ecx, cds_size
   265 00000535 F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   266 00000537 89C1                <1>     mov ecx, eax
   267 00000539 31C0                <1>     xor eax, eax
   268 0000053B F3AA                <1>     rep stosb
   269 0000053D 59                  <1>     pop rcx
   270 0000053E 5F                  <1>     pop rdi
   271 0000053F 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   271 00000544 [3B000000]          <1>
   272 00000548 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   273                              <1> .tempCDS:
   274 0000054D 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   275 0000054F 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   276 00000553 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   277 0000055A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   278 00000560 31D2                <1>     xor edx, edx    ;Use edx for flags
   279 00000562 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   280 00000569 7409                <1>     je .skipValidCDS
   281 0000056B BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   282 00000570 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   283                              <1> .skipValidCDS:
   284 00000574 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   285 00000578 FFC0                <1>     inc eax ;Increment the drive letter
   286 0000057A 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   287 00000581 FFC9                <1>     dec ecx
   288 00000583 75C8                <1>     jnz .tempCDS
   289 00000585 C3                  <1>     ret
   290                              <1> initialCDSWritten:
   291                              <1> ;------------------------------------------------;
   292                              <1> ;     Set up general PSP areas and DOS vars      ;
   293                              <1> ;------------------------------------------------;
   294                              <1> ;Ensure to link the default DOS vCON edit key
   295                              <1> ; controller routines before proceeding
   296 00000586 488D85[DB280000]    <1>     lea rax, qword [rbp + editKeys]
   297 0000058D 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   297 00000592 [32000000]          <1>
   298                              <1> 
   299                              <1> ;Additional DOS Vars init and fixups
   300 00000596 64C60425[09040000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   300 0000059E FF                  <1>
   301 0000059F 64C60425[D1030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   301 000005A7 2F                  <1>
   302 000005A8 488DBD[CA610000]    <1>     lea rdi, qword [rbp + caseMapFunc]  ;Get the function pointer
   303 000005AF 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapptr], rdi ;Store in country table
   303 000005B4 [02020000]          <1>
   304 000005B8 4801AD[C6010000]    <1>     add qword [rbp + charTableArray.ucTable + 1], rbp ;Fixup stored address
   305 000005BF 4801AD[CF010000]    <1>     add qword [rbp + charTableArray.filenameUCTable + 1], rbp 
   306 000005C6 4801AD[D8010000]    <1>     add qword [rbp + charTableArray.filenameTerminatingTable + 1], rbp 
   307 000005CD 4801AD[E1010000]    <1>     add qword [rbp + charTableArray.collatingTable + 1], rbp 
   308                              <1> 
   309                              <1> ;Server Table setup
   310 000005D4 488DBD[7F060000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   311 000005DB 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   311 000005E0 [8B1A0000]          <1>
   312                              <1> 
   313                              <1> ;Set network machine name to... nothing!
   314 000005E4 488DBD[D6030000]    <1>     lea rdi, qword [rbp + machineName]
   315 000005EB B910000000          <1>     mov ecx, 10h    ;16 chars long
   316 000005F0 B020                <1>     mov al, SPC ;Space char
   317 000005F2 F3AA                <1>     rep stosb   ;Fill with space chars
   318                              <1> 
   319                              <1> ;Patch Data Table init
   320 000005F4 488DBD[E6030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   321 000005FB 488D85[7F700000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   322 00000602 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   323 00000604 488D85[89700000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   324 0000060B 48AB                <1>     stosq
   325 0000060D 488D85[93700000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   326 00000614 48AB                <1>     stosq
   327 00000616 488D85[9D700000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   328 0000061D 48AB                <1>     stosq
   329                              <1> 
   330                              <1> ;Initial PSP pointer fields
   331 0000061F 488D1D03100000      <1>     lea rbx, qword [tempPSP]
   332 00000626 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   332 0000062B [1F040000]          <1>
   333 0000062F 53                  <1>     push rbx
   334 00000630 4881C380000000      <1>     add rbx, psp.dta
   335 00000637 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   335 0000063C [17040000]          <1>
   336 00000640 5B                  <1>     pop rbx
   337 00000641 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   338 00000645 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   339 00000649 4889DA              <1>     mov rdx, rbx
   340 0000064C B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   341 00000651 CD41                <1>     int 41h
   342 00000653 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   343 00000657 B843350000          <1>     mov eax, 3543h
   344 0000065C CD41                <1>     int 41h
   345 0000065E 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   346 00000662 B844350000          <1>     mov eax, 3544h
   347 00000667 CD41                <1>     int 41h
   348 00000669 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   349                              <1> ;------------------------------------------------;
   350                              <1> ;              Setup DOSMGR Hooks                ;
   351                              <1> ;------------------------------------------------;   
   352 0000066D 488DBD[9F000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   353 00000674 488D85[3F780000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   354 0000067B 48AB                <1>     stosq   ;Store ptr for LaunchTask
   355 0000067D 48AB                <1>     stosq   ;Store ptr for TerminateTask
   356                              <1> ;------------------------------------------------;
   357                              <1> ;              Setup DLLMGR Hooks                ;
   358                              <1> ;------------------------------------------------;   
   359 0000067F 488DBD[AF000000]    <1>     lea rdi, qword [rbp + dllHooks]
   360 00000686 488D85[3F780000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   361 0000068D 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   362 0000068F 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   363                              <1> ;------------------------------------------------;
   364                              <1> ;               Setup Share Hooks                ;
   365                              <1> ;------------------------------------------------;
   366 00000691 488DBD[BF000000]    <1>     lea rdi, qword [rbp + shareHooks]
   367 00000698 488D9D[3F780000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   368 0000069F 488D85[39780000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   369 000006A6 48AB                <1>     stosq   ;Store bad for openFileCheck
   370 000006A8 4893                <1>     xchg rax, rbx
   371 000006AA 48AB                <1>     stosq   ;Store good for open
   372 000006AC 48AB                <1>     stosq   ;Store good for close
   373 000006AE 4893                <1>     xchg rax, rbx
   374                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   375 000006B0 B905000000          <1>     mov ecx, 5
   376 000006B5 F348AB              <1>     rep stosq
   377 000006B8 4893                <1>     xchg rax, rbx
   378 000006BA 48AB                <1>     stosq   ;Store good for check file lock exists
   379 000006BC 4893                <1>     xchg rax, rbx
   380                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   381 000006BE B903000000          <1>     mov ecx, 3
   382 000006C3 F348AB              <1>     rep stosq
   383 000006C6 4893                <1>     xchg rax, rbx
   384 000006C8 48AB                <1>     stosq   ;Store good for close dup file share
   385 000006CA 4893                <1>     xchg rax, rbx
   386 000006CC 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   387 000006CE 48AB                <1>     stosq   ;Store bad for update dir information
   388                              <1> ;------------------------------------------------;
   389                              <1> ;        Create a Default Temporary Buffer       ;
   390                              <1> ;------------------------------------------------;
   391 000006D0 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   391 000006D5 [5B000000]          <1>
   392 000006D9 81C330000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   393 000006DF 81C30F000000        <1>     add ebx, 0Fh
   394 000006E5 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   395 000006E8 B800480000          <1>     mov eax, 4800h
   396 000006ED CD41                <1>     int 41h
   397 000006EF 0F82BA130000        <1>     jc OEMHALT
   398 000006F5 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   398 000006FA [5D000000]          <1>
   399 000006FE 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   400 00000705 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   401 0000070B 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   402 00000711 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   403 00000719 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   404                              <1> ;------------------------------------------------;
   405                              <1> ;          Default File Handle Creation          ;
   406                              <1> ;                                                ;
   407                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   408                              <1> ;------------------------------------------------;
   409                              <1> defaultFileHandles:
   410 0000071D 488D95[37010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   411 00000724 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   411 00000729 [43000000]          <1>
   412 0000072D 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   413 00000734 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   414                              <1> 
   415 0000073A E8040C0000          <1>     call openStreams
   416 0000073F 0F826A130000        <1>     jc OEMHALT
   417                              <1> ;------------------------------------------------;
   418                              <1> ;             Print Welcome Message              ;
   419                              <1> ;------------------------------------------------;
   420 00000745 488D15240A0000      <1>     lea rdx, strtmsg
   421 0000074C B409                <1>     mov ah, 09h
   422 0000074E CD41                <1>     int 41h    
   423                              <1> ;------------------------------------------------;
   424                              <1> ;               Load CONFIG.SYS                  ;
   425                              <1> ;------------------------------------------------;
   426                              <1> ;Setup stackframe, workout base 
   427                              <1> setupFrame:
   428 00000750 55                  <1>     push rbp
   429 00000751 4889E5              <1>     mov rbp, rsp
   430 00000754 4881EC68000000      <1>     sub rsp, cfgFrame_size
   431 0000075B 0FB605900E0000      <1>     movzx eax, byte [BUFFERS]
   432 00000762 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   433 00000766 0FB605840E0000      <1>     movzx eax, byte [FILES]
   434 0000076D 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   435 00000771 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   436 00000779 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   437 00000781 0FB6056C0E0000      <1>     movzx eax, byte [LASTDRIVE]
   438 00000788 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   439                              <1> 
   440 0000078C 0FB615600E0000      <1>     movzx edx, byte [DFLTDRIVE]    ;Get the default drive
   441 00000793 B40E                <1>     mov ah, 0Eh ;Select drive
   442 00000795 CD41                <1>     int 41h
   443 00000797 488D15190A0000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   444 0000079E B43D                <1>     mov ah, 3Dh ;Open file for reading
   445 000007A0 B000                <1>     mov al, ReadAccess
   446 000007A2 CD41                <1>     int 41h
   447 000007A4 0F8259070000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   448                              <1> ;------------------------------------------------;
   449                              <1> ;              Process CONFIG.SYS                ;
   450                              <1> ;------------------------------------------------;
   451                              <1> ;Create a stack frame with the following order.
   452                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   453                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   454                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   455                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   456                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   457                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   458                              <1> ;
   459                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   460                              <1> ;-------------------------------------------------------------------------;
   461                              <1> ; CONFIG.SYS processing pseudocode:-
   462                              <1> ;
   463                              <1> ; _START:
   464                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   465                              <1> ; If (EOF encountered)
   466                              <1> ;   Insert a terminating ^Z to the end of the line. 
   467                              <1> ;   Close handle.
   468                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   469                              <1> ;   If (CR or EOF encoutered before terminating char)
   470                              <1> ;       Bad line error msg. 
   471                              <1> ;       If (CR encountered)
   472                              <1> ;           Goto _START
   473                              <1> ;       Else
   474                              <1> ;           Goto _EXIT
   475                              <1> ;   Else 
   476                              <1> ;       If (Keyword AND not DEVICE) 
   477                              <1> ;           Store it's value on stack or change internal variable value
   478                              <1> ;       If (DEVICE)
   479                              <1> ;           Move endPtr after end of line and try load the driver.
   480                              <1> ;           If (driver doesn't exist or fails to init)
   481                              <1> ;               print bad driver error msg.
   482                              <1> ;       Else 
   483                              <1> ;           Bad line error msg
   484                              <1> ;       If (line terminated by CR)
   485                              <1> ;           Goto _START
   486                              <1> ; _EXIT:
   487                              <1> ;-------------------------------------------------------------------------;
   488                              <1> ; Note:
   489                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   490                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   491                              <1> ;   adjust the memory pointer and start loading next line.
   492                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   493                              <1> ;   data structures according to the values on the stack frame.
   494                              <1> ;-------------------------------------------------------------------------;
   495                              <1> ;Start CONFIG.SYS parsing here
   496                              <1> configParse:
   497 000007AA 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   498 000007AE 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   499 000007B6 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
   500 000007BE B800480000          <1>     mov eax, 4800h
   501 000007C3 BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
   502 000007C8 CD41                <1>     int 41h
   503 000007CA 0F8238010000        <1>     jc .stopProcessError
   504 000007D0 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
   505 000007D4 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
   506 000007D7 482D10000000        <1>     sub rax, mcb_size 
   507 000007DD 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
   508 000007E5 31C0                <1>     xor eax, eax
   509                              <1> .nextChar:
   510 000007E7 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   511 000007EB 6681FBFFFF          <1>     cmp bx, -1
   512 000007F0 0F8412010000        <1>     je .stopProcessError
   513 000007F6 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   514 000007FB B901000000          <1>     mov ecx, 1  ;Read one byte
   515 00000800 CD41                <1>     int 41h
   516 00000802 0F8200010000        <1>     jc .stopProcessError
   517 00000808 85C0                <1>     test eax, eax	;If this is zero, EOF reached
   518 0000080A 0F84DD060000        <1>     jz .cfgExit
   519                              <1> .notEOF:
   520 00000810 0FB602              <1>     movzx eax, byte [rdx]
   521 00000813 3C0D                <1>     cmp al, CR
   522 00000815 7420                <1>     je short .endOfLine
   523 00000817 3C0A                <1>     cmp al, LF
   524 00000819 741C                <1>     je short .endOfLine
   525 0000081B 3C1A                <1>     cmp al, EOF
   526 0000081D 7410                <1>     je short .endOfFileChar
   527 0000081F 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   528 00000820 B813120000          <1>     mov eax, 1213h  ;Uppercase the char if it is uppercasable
   529 00000825 CD4F                <1>     int 4fh
   530 00000827 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   531 00000829 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   532                              <1> .notChar:
   533 0000082A 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   534 0000082D EBB8                <1>     jmp short .nextChar
   535                              <1> .endOfFileChar:
   536 0000082F 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
   537                              <1> .endOfLine:
   538                              <1> ;rdx points to terminating char
   539                              <1> ;First find the length of the instruction word
   540 00000837 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   541 0000083B 31C9                <1>     xor ecx, ecx
   542                              <1> .cmdNameLenGet:
   543 0000083D AC                  <1>     lodsb
   544 0000083E E8B5000000          <1>     call .isCharTerminal
   545 00000843 740A                <1>     jz short .endOfCommandFound
   546 00000845 FFC1                <1>     inc ecx
   547 00000847 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   548 0000084D 72EE                <1>     jb short .cmdNameLenGet
   549                              <1> ;Else, fall through in error
   550                              <1> .endOfCommandFound:
   551                              <1> ;ecx has the length of the command
   552 0000084F 81F90A000000        <1>     cmp ecx, 10
   553 00000855 0F84AD000000        <1>     je .stopProcessError
   554 0000085B 488D3D1B010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   555                              <1> .cmdSearch:
   556 00000862 803FFF              <1>     cmp byte [rdi], -1
   557 00000865 0F849D000000        <1>     je .stopProcessError
   558 0000086B 380F                <1>     cmp byte [rdi], cl
   559 0000086D 7579                <1>     jne short .gotoNextCmd
   560                              <1>     ;Candidate command found, check said command is the command we want
   561 0000086F 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   562 00000873 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   563 0000087A 0F8488000000        <1>     je .stopProcessError
   564 00000880 57                  <1>     push rdi
   565 00000881 51                  <1>     push rcx
   566 00000882 48FFC7              <1>     inc rdi ;Go to next char
   567 00000885 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   568 00000887 59                  <1>     pop rcx
   569 00000888 5F                  <1>     pop rdi
   570 00000889 755D                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   571                              <1>     ;Else, rdi points to the table entry from the head of the table
   572                              <1>     ;      rcx has the length of the name field
   573                              <1>     ;rdx points to the terminating char of the line 
   574 0000088B 488D35EB000000      <1>     lea rsi, .keyTbl
   575 00000892 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   576 00000895 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   577 0000089B 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   578 0000089E F8                  <1>     clc ;Ensure flags are happy before entering
   579 0000089F 55                  <1>     push rbp
   580 000008A0 FFD6                <1>     call rsi    ;Call this function
   581 000008A2 5D                  <1>     pop rbp
   582 000008A3 7263                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   583 000008A5 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   584 000008AD 0F853A060000        <1>     jnz .cfgExit
   585 000008B3 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   586                              <1>     ;Read the next char. 
   587                              <1>     ;If EOF, exit.
   588                              <1>     ;Else if, LF, proceed to read line routine.
   589                              <1>     ;Else, advance ptr by one and proceed to process char
   590                              <1> .endCommandClear:
   591 000008B7 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   592 000008BB B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   593 000008C0 B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   594 000008C5 CD41                <1>     int 41h
   595 000008C7 723F                <1>     jc .stopProcessError
   596 000008C9 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   597 000008CB 0F841C060000        <1>     jz .cfgExit
   598                              <1>     ;Do a trash check
   599 000008D1 8A02                <1>     mov al, byte [rdx]
   600 000008D3 3C1A                <1>     cmp al, EOF
   601 000008D5 0F8412060000        <1>     je .cfgExit
   602 000008DB 3C0A                <1>     cmp al, LF
   603 000008DD 0F8404FFFFFF        <1>     je .nextChar
   604 000008E3 E928FFFFFF          <1>     jmp .notEOF
   605                              <1> ;CONFIG.SYS utility functions
   606                              <1> .gotoNextCmd:
   607 000008E8 0FB607              <1>     movzx eax, byte [rdi]
   608 000008EB 0503000000          <1>     add eax, 3
   609 000008F0 4801C7              <1>     add rdi, rax
   610 000008F3 E96AFFFFFF          <1>     jmp .cmdSearch
   611                              <1> .isCharTerminal:
   612                              <1> ;Input: AL = Char to check
   613                              <1> ;Output: ZF=ZE -> Char terminal
   614                              <1> ;        ZF=NZ -> Char not terminal
   615 000008F8 3C3D                <1>     cmp al, "="
   616                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000008FA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000008FC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   617 000008FD 3C20                <1>     cmp al, SPC
   618                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000008FF 74(FC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   619 00000901 3C09                <1>     cmp al, TAB
   620                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000903 74(FC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   621 00000905 3C3B                <1>     cmp al, ";"
   622                              <1>     return
    13                              <2> %%_ret:
    14 00000907 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .stopProcessError:
   624 00000908 E836000000          <1>     call .badLineErrorMsg
   625                              <1>     ;Reset all values to OEM defaults
   626 0000090D 0FB605DE0C0000      <1>     movzx eax, byte [BUFFERS]
   627 00000914 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   628 00000918 0FB605D20C0000      <1>     movzx eax, byte [FILES]
   629 0000091F 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   630 00000923 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   631 0000092B 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   632 00000933 0FB605BA0C0000      <1>     movzx eax, byte [LASTDRIVE]
   633 0000093A 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   634 0000093E E9AA050000          <1>     jmp .cfgExit
   635                              <1>     
   636                              <1> .badLineErrorMsg:
   637                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   638 00000943 50                  <1>     push rax
   639 00000944 52                  <1>     push rdx
   640 00000945 488D150A000000      <1>     lea rdx, .speLine
   641 0000094C B800090000          <1>     mov eax, 0900h
   642 00000951 CD41                <1>     int 41h
   643 00000953 5A                  <1>     pop rdx
   644 00000954 58                  <1>     pop rax
   645                              <1>     return
    13                              <2> %%_ret:
    14 00000955 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646 00000956 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   646 0000095F 6E6973656420636F6D- <1>
   646 00000968 6D616E6420696E2043- <1>
   646 00000971 4F4E4649472E535953- <1>
   646 0000097A 0D0A24              <1>
   647                              <1> .keyTbl: 
   648 0000097D 05425245414B        <1>     db 5, "BREAK"           ;DONE
   649 00000983 7800                <1> 	dw .breakHandler - .keyTbl
   650 00000985 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   651 0000098D AE00                <1> 	dw .bufHandler - .keyTbl
   652 0000098F 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   653 00000997 6F05                <1> 	dw .countryScan - .keyTbl
   654 00000999 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   655 000009A0 2B01                <1> 	dw .drvLoader - .keyTbl
   656 000009A2 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   657 000009A7 6F05                <1> 	dw .fcbHandler - .keyTbl
   658 000009A9 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   659 000009AF 6804                <1> 	dw .sftHandler - .keyTbl
   660 000009B1 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   660 000009BA 45                  <1>
   661 000009BB 1D05                <1> 	dw .lastdriveHandler - .keyTbl
   662 000009BD 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   663 000009C3 6F05                <1> 	dw .shellHandler - .keyTbl
   664 000009C5 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   665 000009CC 6F05                <1> 	dw .stacksHandler - .keyTbl
   666 000009CE 08445249565041524D  <1>     db 8, "DRIVPARM"
   667 000009D7 6F05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   668 000009D9 FF                  <1> 	db -1	;End of table marker
   669                              <1> .cfgSkipLeadingSpaces:
   670                              <1> ;Input: rsi -> Start of string to skip spaces of
   671                              <1> ;Output: rsi -> First non-space char in string
   672 000009DA 50                  <1>     push rax
   673 000009DB 51                  <1>     push rcx
   674 000009DC 57                  <1>     push rdi
   675 000009DD 4889F7              <1>     mov rdi, rsi
   676 000009E0 B820000000          <1>     mov eax, SPC
   677 000009E5 31C9                <1>     xor ecx, ecx
   678 000009E7 FFC9                <1>     dec ecx
   679 000009E9 F3AE                <1>     repe scasb  ;
   680 000009EB 4889FE              <1>     mov rsi, rdi
   681 000009EE 5F                  <1>     pop rdi
   682 000009EF 59                  <1>     pop rcx
   683 000009F0 58                  <1>     pop rax
   684 000009F1 48FFCE              <1>     dec rsi
   685                              <1>     return
    13                              <2> %%_ret:
    14 000009F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   686                              <1> 
   687                              <1> .breakHandler:
   688 000009F5 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   689 000009F9 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
   690                              <1>     ;This must be the word ON or OFF 
   691 00000A00 E8D5FFFFFF          <1>     call .cfgSkipLeadingSpaces
   692 00000A05 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   693 00000A07 66813E4F4E          <1>     cmp word [rsi], "ON"
   694 00000A0C 7413                <1>     je .breakOn
   695 00000A0E 66813E4F46          <1>     cmp word [rsi], "OF"
   696 00000A13 7506                <1>     jne .breakBad
   697 00000A15 807E0246            <1>     cmp byte [rsi + 2], "F"
   698 00000A19 7408                <1>     je .breakCommon
   699                              <1> .breakBad:
   700 00000A1B E823FFFFFF          <1>     call .badLineErrorMsg
   701                              <1>     return
    13                              <2> %%_ret:
    14 00000A20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   702                              <1> .breakOn:
   703 00000A21 FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   704                              <1> .breakCommon:
   705 00000A23 B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   706 00000A28 CD41                <1>     int 41h
   707                              <1>     return
    13                              <2> %%_ret:
    14 00000A2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   708                              <1> 
   709                              <1> .bufHandler:
   710 00000A2B 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   711 00000A2F 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
   712                              <1>     ;This must be at most three digits, anything else is a failure
   713 00000A36 E89FFFFFFF          <1>     call .cfgSkipLeadingSpaces
   714 00000A3B 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   715 00000A3E 31C9                <1>     xor ecx, ecx
   716 00000A40 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   717 00000A41 3C30                <1>     cmp al, "0"
   718 00000A43 724C                <1>     jb .bufHandlerErr
   719 00000A45 3C39                <1>     cmp al, "9"
   720 00000A47 7748                <1>     ja .bufHandlerErr
   721 00000A49 FFC1                <1>     inc ecx ;Increment char counter
   722 00000A4B AC                  <1>     lodsb   ;Get second char
   723 00000A4C E846000000          <1>     call .bufHandlerTermCheck
   724 00000A51 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   725 00000A53 3C30                <1>     cmp al, "0"
   726 00000A55 723A                <1>     jb .bufHandlerErr
   727 00000A57 3C39                <1>     cmp al, "9"
   728 00000A59 7736                <1>     ja .bufHandlerErr
   729 00000A5B AC                  <1>     lodsb   ;Check no more chars!
   730 00000A5C E836000000          <1>     call .bufHandlerTermCheck
   731 00000A61 752E                <1>     jne .bufHandlerErr
   732                              <1> .bufHandlerProcess:
   733 00000A63 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   734 00000A65 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   735                              <1> .bufHandlerLp:
   736 00000A68 AC                  <1>     lodsb   ;Get the digit
   737 00000A69 E819000000          <1>     call .bufHandlerMul
   738 00000A6E 67E304              <1>     jecxz .bufHandlerPrepExit
   739 00000A71 FFC9                <1>     dec ecx
   740 00000A73 EBF3                <1>     jmp short .bufHandlerLp 
   741                              <1> .bufHandlerPrepExit:
   742                              <1> ;edx has the value now, so place it in stack
   743 00000A75 0FB60D760B0000      <1>     movzx ecx, byte [BUFFERS]
   744 00000A7C 85D2                <1>     test edx, edx
   745 00000A7E 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
   746 00000A81 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
   747 00000A85 F8                  <1>     clc
   748                              <1>     return
    13                              <2> %%_ret:
    14 00000A86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> .bufHandlerMul:
   750 00000A87 2C30                <1>     sub al, "0" ;Convert to a binary value
   751 00000A89 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   752 00000A8B 0FB7C0              <1>     movzx eax, ax
   753 00000A8E 01C2                <1>     add edx, eax
   754                              <1>     return
    13                              <2> %%_ret:
    14 00000A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> .bufHandlerErr:
   756 00000A91 E8ADFEFFFF          <1>     call .badLineErrorMsg
   757                              <1>     return
    13                              <2> %%_ret:
    14 00000A96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> .bufHandlerTermCheck:
   759 00000A97 3C20                <1>     cmp al, SPC
   760                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A99 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   761 00000A9B 3C09                <1>     cmp al, TAB
   762                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A9D 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   763 00000A9F 3C0D                <1>     cmp al, CR
   764                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA1 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 00000AA3 3C0A                <1>     cmp al, LF
   766                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA5 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767                              <1>     return
    13                              <2> %%_ret:
    14 00000AA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   768                              <1> 
   769                              <1> ;===============================
   770                              <1> ;   Device Driver Loader here  :
   771                              <1> ;===============================
   772                              <1> .drvLoader:
   773                              <1> ;    mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
   774 00000AA8 488B7DB0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
   775 00000AAC 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
   776 00000AB3 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   777 00000AB6 B820000000          <1>     mov eax, SPC
   778 00000ABB 51                  <1>     push rcx
   779 00000ABC 31C9                <1>     xor ecx, ecx
   780 00000ABE FFC9                <1>     dec ecx
   781 00000AC0 F3AE                <1>     repe scasb      ;Skip leading spaces for name (between = and first char)
   782 00000AC2 59                  <1>     pop rcx
   783                              <1> ;Now search for the first char after pathname. 
   784 00000AC3 4889FE              <1>     mov rsi, rdi
   785                              <1> .drvFindEndOfFileName:
   786 00000AC6 AC                  <1>     lodsb ;Get char from string name
   787                              <1>     ;Was the char a primitive string terminator?
   788 00000AC7 3C20                <1>     cmp al, SPC
   789 00000AC9 740C                <1>     je short .fileNameFound
   790 00000ACB 3C1A                <1>     cmp al, EOF
   791 00000ACD 7408                <1>     je short .fileNameFound
   792 00000ACF 3C0D                <1>     cmp al, CR
   793 00000AD1 7404                <1>     je short .fileNameFound
   794 00000AD3 3C0A                <1>     cmp al, LF
   795 00000AD5 75EF                <1>     jne short .drvFindEndOfFileName
   796                              <1> .fileNameFound:
   797 00000AD7 48FFCE              <1>     dec rsi ;Point rdi to the space itself
   798 00000ADA 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   799 00000ADE 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   800 00000AE1 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   801 00000AE5 C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   802                              <1>     ;rdx -> Filename
   803                              <1>     ;Here open the file to attempt to see how much space to 
   804                              <1>     ; allocate to the file for loading. 
   805                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   806                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   807                              <1>     ; which would allow for opening of files independently of calling programs'
   808                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   809 00000AE8 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   810 00000AED CD41                <1>     int 41h
   811 00000AEF 0F82B4020000        <1>     jc .drvBad
   812 00000AF5 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   813 00000AF8 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   814 00000AFA B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   815 00000AFF CD41                <1>     int 41h
   816 00000B01 89C6                <1>     mov esi, eax    ;Save the file size in esi
   817 00000B03 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   818 00000B05 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   819 00000B0A CD41                <1>     int 41h
   820 00000B0C 53                  <1>     push rbx        ;Push the file handle on the stack
   821 00000B0D BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   822 00000B12 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   823 00000B17 CD41                <1>     int 41h
   824 00000B19 5B                  <1>     pop rbx         ;Get the handle back in rbx
   825 00000B1A 0F8299020000        <1>     jc .drvMemClose
   826 00000B20 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   827 00000B23 B940000000          <1>     mov ecx, imageDosHdr_size
   828 00000B28 B8003F0000          <1>     mov eax, 3F00h  ;READ
   829 00000B2D CD41                <1>     int 41h
   830 00000B2F 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   831 00000B32 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   832 00000B35 730C                <1>     jnc short .headerReadOK
   833                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   834                              <1>     ;r8 must point to the block to free
   835 00000B37 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   836 00000B3C CD41                <1>     int 41h
   837 00000B3E E95F020000          <1>     jmp .drvBadClose
   838                              <1> .headerReadOK:
   839                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   840 00000B43 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   841                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   842 00000B46 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   843 00000B4B 7430                <1>     je short .exeDrivers
   844 00000B4D 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   845 00000B52 7429                <1>     je short .exeDrivers
   846                              <1> ;.COM drivers come down here
   847                              <1>     ;Get File Image Allocation Size in ecx here.
   848                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   849 00000B54 31C9                <1>     xor ecx, ecx
   850 00000B56 31D2                <1>     xor edx, edx
   851 00000B58 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   852 00000B5D CD41                <1>     int 41h
   853                              <1>     ;eax now has the filesize. 
   854 00000B5F 89C1                <1>     mov ecx, eax
   855 00000B61 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   856 00000B67 81C101000000        <1>     add ecx, 1h     ;... and round up!
   857 00000B6D C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   858 00000B70 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   859 00000B76 73BF                <1>     jae .drvFreeMemAndHdl
   860 00000B78 E97C000000          <1>     jmp .loadCont
   861                              <1> .exeDrivers:
   862                              <1>     ;Get the file pointer for file header
   863 00000B7D 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   864 00000B80 31C9                <1>     xor ecx, ecx
   865 00000B82 B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   866 00000B87 CD41                <1>     int 41h
   867                              <1>     ;Now read in imageFileHeader here
   868 00000B89 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   869 00000B8C B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   870 00000B91 B8003F0000          <1>     mov eax, 3F00h  ;READ
   871 00000B96 CD41                <1>     int 41h
   872 00000B98 729D                <1>     jc short .drvFreeMemAndHdl
   873 00000B9A 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   874 00000B9F 7296                <1>     jb short .drvFreeMemAndHdl
   875 00000BA1 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   876 00000BA7 758E                <1>     jne .drvFreeMemAndHdl
   877 00000BA9 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   878 00000BAF 7586                <1>     jne .drvFreeMemAndHdl
   879 00000BB1 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   880 00000BB7 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   881                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   882 00000BBD B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   883 00000BC2 B8003F0000          <1>     mov eax, 3F00h  ;READ
   884 00000BC7 CD41                <1>     int 41h
   885 00000BC9 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   886 00000BCF 3D38000000          <1>     cmp eax, 56
   887 00000BD4 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   888                              <1>     ;Round up size requirement.
   889                              <1>     ;If .EXE, round up to nearest section alignment
   890 00000BDA 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   891 00000BDD 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   892 00000BE0 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   893 00000BE2 FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   894 00000BE4 F7D0                <1>     not eax         ;Flip the set and clear bits
   895 00000BE6 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   896 00000BE8 01F1                <1>     add ecx, esi    ;Now round upwards!
   897 00000BEA C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   898 00000BED 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   899 00000BF3 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   900                              <1> .loadCont:
   901 00000BF9 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   902 00000BFE CD41                <1>     int 41h ;r8 has the pointer to the block for freeing
   903                              <1>     ;Now close the file
   904 00000C00 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   905 00000C05 CD41                <1>     int 41h
   906 00000C07 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   907 00000C09 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   908 00000C0E CD41                <1>     int 41h         ;rax gets the pointer to load the program into
   909 00000C10 0F82A3010000        <1>     jc .drvMemClose
   910                              <1>     ;Now set the subsystem marker and the owner to DOS
   911 00000C16 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   912 00000C1A 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   913                              <1>     ;Build the overlay command block
   914 00000C22 488D1DA8050000      <1>     lea rbx, cmdBlock
   915 00000C29 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   916 00000C2C 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   917 00000C30 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   918 00000C34 4881C207000000      <1>     add rdx, 7  ;Go past DEVICE= to the null terminated pathname
   919 00000C3B B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   920 00000C40 CD41                <1>     int 41h
   921 00000C42 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   922                              <1> .badDriverLoad:
   923 00000C44 4C8B0586050000      <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   924 00000C4B B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   925 00000C50 CD41                <1>     int 41h
   926 00000C52 488D1508000000      <1>     lea rdx, .drvMemMsg
   927 00000C59 B800090000          <1>     mov eax, 0900h
   928 00000C5E CD41                <1>     int 41h
   929                              <1>     return
    13                              <2> %%_ret:
    14 00000C60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   930 00000C61 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   930 00000C6A 756768206D656D6F72- <1>
   930 00000C73 7920666F7220647269- <1>
   930 00000C7C 7665720D0A24        <1>
   931                              <1> .loadOk:
   932                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   933 00000C82 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   934 00000C85 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   935                              <1>     ;Reset the command line to have a space at the null terminator
   936 00000C88 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   937 00000C8C 53                  <1>     push rbx
   938 00000C8D 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   939 00000C90 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   940 00000C92 5B                  <1>     pop rbx
   941                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   942                              <1>     ;Hence, rsi points to that byte!
   943                              <1>     ;Pointers of each header need adjustment relative to their load address,
   944                              <1>     ; and linking into the main driver chain after NUL.
   945                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   946                              <1>     ;                 Else, free using kernel eject routine.
   947 00000C93 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   948                              <1> .driverPtrAdjustment:
   949 00000C94 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   950 00000C98 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   951 00000C9C 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   952 00000CA3 7408                <1>     je short .driverPtrAdjustmentDone
   953 00000CA5 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   954 00000CA8 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   955 00000CAB EBE7                <1>     jmp short .driverPtrAdjustment
   956                              <1> .driverPtrAdjustmentDone:
   957 00000CAD 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   958                              <1>     ;Prepare for initialising the drivers in the arena
   959                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   960 00000CAE 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   961 00000CB1 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   961 00000CBA 00                  <1>
   962 00000CBB 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   962 00000CC0 [1F040000]          <1>
   963 00000CC4 488D1D3F090000      <1>     lea rbx, initDrvBlk
   964 00000CCB 488B45B0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   965 00000CCF 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax ;and pass to driver!
   966 00000CD3 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   967                              <1> .driverInit:
   968 00000CD7 4C87E5              <1>     xchg r12, rbp
   969 00000CDA E8F7070000          <1>     call initDriver
   970 00000CDF 725E                <1>     jc short .driverBadRbpAdjust
   971 00000CE1 E8BA060000          <1>     call addDriverMarkers
   972 00000CE6 4C87E5              <1>     xchg r12, rbp
   973 00000CE9 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   974 00000CEF 7507                <1>     jnz short .driverInitialised
   975 00000CF1 E84E080000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   976 00000CF6 724A                <1>     jc short .driverBad
   977                              <1> .driverInitialised:
   978 00000CF8 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   979 00000CFF 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   980 00000D03 75D2                <1>     jne short .driverInit ;If not, goto next driver
   981                              <1> ;Now we eject the init routines for the driver
   982                              <1> ;r8 points to the MCB data area already
   983 00000D05 31DB                <1>     xor ebx, ebx
   984 00000D07 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   985 00000D0B 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   986 00000D0F 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   987 00000D16 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   988 00000D1B E865070000          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   989                              <1>     ;Link into main driver chain, 
   990                              <1>     ;r9 points to first driver in block
   991                              <1>     ;rsi points to last driver in block
   992 00000D20 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   993 00000D24 488DBF[7A000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   994 00000D2B 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   995 00000D2E 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   996 00000D31 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   997                              <1> .driverExit:
   998                              <1> ;Exit the init routine if it all works out, WOO!
   999                              <1> ;Return values to original registers/memory locations
  1000 00000D34 644C891C25-         <1>     mov qword fs:[currentPSP], r11
  1000 00000D39 [1F040000]          <1>
  1001 00000D3D F8                  <1>     clc
  1002                              <1>     return
    13                              <2> %%_ret:
    14 00000D3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1003                              <1> .driverBadRbpAdjust:
  1004 00000D3F 4C89E5              <1>     mov rbp, r12
  1005                              <1> .driverBad:
  1006                              <1>     ;Form the string to print
  1007 00000D42 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
  1008 00000D49 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
  1009 00000D4F 750C                <1>     jnz short .driverCharBad    ;If not, exit
  1010                              <1>     ;MSD devices need to have something placed in there
  1011 00000D51 48B84D534420646576- <1>     mov rax, "MSD dev "
  1011 00000D5A 20                  <1>
  1012 00000D5B 48AB                <1>     stosq   ;Store the 8 chars here
  1013                              <1> .driverCharBad:
  1014 00000D5D 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
  1015 00000D61 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
  1016                              <1> .driverBadPrint:
  1017 00000D63 488D1510000000      <1>     lea rdx, .driverBad1
  1018 00000D6A B800090000          <1>     mov eax, 0900h  ;Print the string!
  1019 00000D6F CD41                <1>     int 41h
  1020 00000D71 B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
  1021 00000D76 CD41                <1>     int 41h
  1022 00000D78 EBBA                <1>     jmp short .driverExit
  1023 00000D7A 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
  1023 00000D83 6E697469616C697369- <1>
  1023 00000D8C 6E6720647269766572- <1>
  1023 00000D95 3A20                <1>
  1024 00000D97 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
  1024 00000DA0 0A24                <1>
  1025                              <1> ;------------------
  1026                              <1> ;Bad exit cases
  1027                              <1> ;------------------
  1028                              <1> .drvBadClose:
  1029 00000DA2 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1030 00000DA7 CD41                <1>     int 41h
  1031                              <1> .drvBad:
  1032 00000DA9 488D1519000000      <1>     lea rdx, .drvBadMsg
  1033                              <1> .drvBad2:
  1034 00000DB0 B800090000          <1>     mov eax, 0900h
  1035 00000DB5 CD41                <1>     int 41h
  1036 00000DB7 F8                  <1>     clc ;Never return with CF=CY
  1037                              <1>     return
    13                              <2> %%_ret:
    14 00000DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> .drvMemClose:
  1039 00000DB9 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1040 00000DBE CD41                <1>     int 41h
  1041 00000DC0 488D159AFEFFFF      <1>     lea rdx, .drvMemMsg
  1042 00000DC7 EBE7                <1>     jmp short .drvBad2
  1043                              <1> 
  1044 00000DC9 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
  1044 00000DD2 6D697373696E672066- <1>
  1044 00000DDB 696C656E616D650D0A- <1>
  1044 00000DE4 24                  <1>
  1045                              <1> 
  1046                              <1> .sftHandler:
  1047                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1048 00000DE5 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1049 00000DE9 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1050 00000DF0 E8E5FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1051                              <1>     ;This must be at most three digits, anything else is a failure
  1052 00000DF5 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1053 00000DF8 31C9                <1>     xor ecx, ecx
  1054 00000DFA AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1055 00000DFB 3C30                <1>     cmp al, "0"
  1056 00000DFD 0F8280000000        <1>     jb .sftHandlerErr
  1057 00000E03 3C39                <1>     cmp al, "9"
  1058 00000E05 777C                <1>     ja .sftHandlerErr
  1059 00000E07 FFC1                <1>     inc ecx ;Increment char counter
  1060 00000E09 AC                  <1>     lodsb   ;Get second char
  1061 00000E0A E87A000000          <1>     call .sftHandlerTermCheck
  1062 00000E0F 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1063 00000E11 3C30                <1>     cmp al, "0"
  1064 00000E13 726E                <1>     jb .sftHandlerErr
  1065 00000E15 3C39                <1>     cmp al, "9"
  1066 00000E17 776A                <1>     ja .sftHandlerErr
  1067 00000E19 FFC1                <1>     inc ecx ;Increment char counter
  1068 00000E1B AC                  <1>     lodsb   ;Get third char
  1069 00000E1C E868000000          <1>     call .sftHandlerTermCheck
  1070 00000E21 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1071 00000E23 3C30                <1>     cmp al, "0"
  1072 00000E25 725C                <1>     jb .sftHandlerErr
  1073 00000E27 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1074 00000E29 7758                <1>     ja .sftHandlerErr
  1075 00000E2B AC                  <1>     lodsb   ;Check no more chars!
  1076 00000E2C E858000000          <1>     call .sftHandlerTermCheck
  1077 00000E31 7550                <1>     jne .sftHandlerErr
  1078 00000E33 FFC1                <1>     inc ecx ;Increment char counter
  1079                              <1> .sftHandlerProcess:
  1080 00000E35 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1081 00000E37 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1082                              <1> .sftHandlerLp:
  1083 00000E3A FFC9                <1>     dec ecx
  1084 00000E3C AC                  <1>     lodsb   ;Get the digit
  1085 00000E3D E819000000          <1>     call .sftHandlerMul
  1086 00000E42 67E302              <1>     jecxz .sftHandlerPrepExit
  1087 00000E45 EBF3                <1>     jmp short .sftHandlerLp 
  1088                              <1> .sftHandlerPrepExit:
  1089                              <1> ;edx has the value now, so place it in stack
  1090 00000E47 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1091 00000E4C 81FA08000000        <1>     cmp edx, 8
  1092 00000E52 0F42D1              <1>     cmovb edx, ecx
  1093 00000E55 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1094 00000E59 F8                  <1>     clc
  1095                              <1>     return
    13                              <2> %%_ret:
    14 00000E5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> .sftHandlerMul:
  1097                              <1> ;Input:
  1098                              <1> ;al = digit to add to result (ASCII digit)
  1099                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
  1100                              <1> ;rdx = Accumulated sum
  1101                              <1> ;Output:
  1102                              <1> ;rdx = Accumulated sum with al added
  1103                              <1> ;eax is destroyed
  1104                              <1> ;All other registers preserved
  1105 00000E5B 51                  <1>     push rcx
  1106 00000E5C 52                  <1>     push rdx
  1107 00000E5D 0FB6C0              <1>     movzx eax, al
  1108 00000E60 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
  1109 00000E65 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
  1110 00000E6A 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
  1111 00000E6C BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
  1112 00000E71 B964000000          <1>     mov ecx, 100
  1113 00000E76 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
  1114 00000E79 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
  1115 00000E7C F7E3                <1>     mul ebx    ;Multiply the base offset to eax
  1116 00000E7E 5A                  <1>     pop rdx ;Get the accumulated value back
  1117 00000E7F 01C2                <1>     add edx, eax    ;Add this result over
  1118 00000E81 59                  <1>     pop rcx
  1119                              <1>     return
    13                              <2> %%_ret:
    14 00000E82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1120                              <1> .sftHandlerErr:
  1121 00000E83 E8BBFAFFFF          <1>     call .badLineErrorMsg
  1122                              <1>     return
    13                              <2> %%_ret:
    14 00000E88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1123                              <1> .sftHandlerTermCheck:
  1124 00000E89 3C20                <1>     cmp al, SPC
  1125                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E8B 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1126 00000E8D 3C09                <1>     cmp al, TAB
  1127                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E8F 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1128 00000E91 3C0D                <1>     cmp al, CR
  1129                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E93 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1130 00000E95 3C0A                <1>     cmp al, LF
  1131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E97 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1132                              <1>     return
    13                              <2> %%_ret:
    14 00000E99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1133                              <1> 
  1134                              <1> .lastdriveHandler:
  1135 00000E9A 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1136 00000E9E 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1137 00000EA5 E830FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1138 00000EAA AC                  <1>     lodsb   ;Get this char
  1139 00000EAB 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1140 00000EAE 50                  <1>     push rax    ;Push on stack
  1141 00000EAF B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1142 00000EB4 CD4F                <1>     int 4Fh
  1143 00000EB6 5B                  <1>     pop rbx
  1144 00000EB7 3C5A                <1>     cmp al, "Z"
  1145 00000EB9 77C8                <1>     ja .sftHandlerErr
  1146 00000EBB 3C41                <1>     cmp al, "A"
  1147 00000EBD 72C4                <1>     jb .sftHandlerErr
  1148 00000EBF 803E0D              <1>     cmp byte [rsi], CR
  1149 00000EC2 740F                <1>     je .ldProceed
  1150 00000EC4 803E0A              <1>     cmp byte [rsi], LF
  1151 00000EC7 740A                <1>     je .ldProceed
  1152 00000EC9 803E09              <1>     cmp byte [rsi], TAB
  1153 00000ECC 7405                <1>     je .ldProceed
  1154 00000ECE 803E20              <1>     cmp byte [rsi], SPC
  1155 00000ED1 75B0                <1>     jne .sftHandlerErr
  1156                              <1> .ldProceed:
  1157 00000ED3 2C41                <1>     sub al, "A" ;Convert into a number
  1158 00000ED5 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1159 00000ED8 BA05000000          <1>     mov edx, lastDriveDeflt
  1160 00000EDD 3D05000000          <1>     cmp eax, lastDriveDeflt
  1161 00000EE2 0F42C2              <1>     cmovb eax, edx
  1162 00000EE5 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1163 00000EE9 F8                  <1>     clc
  1164                              <1>     return
    13                              <2> %%_ret:
    14 00000EEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> .ldBad:
  1166 00000EEB F9                  <1>     stc
  1167                              <1> .countryScan:
  1168                              <1> .fcbHandler:
  1169                              <1> .shellHandler:
  1170                              <1> .stacksHandler:
  1171                              <1> .drivParm:
  1172                              <1>     return
    13                              <2> %%_ret:
    14 00000EEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1173                              <1> 
  1174                              <1> .cfgExit:
  1175 00000EED 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1176 00000EF1 B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
  1177 00000EF6 CD41                <1>     int 41h ;bx already has the handle
  1178 00000EF8 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
  1179 00000EFC B800490000          <1>     mov eax, 4900h  ;FREE
  1180 00000F01 CD41                <1>     int 41h
  1181                              <1> ;------------------------------------------------;
  1182                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1183                              <1> ;                  CONFIG.SYS                    ;
  1184                              <1> ;------------------------------------------------;
  1185                              <1> ;Add additional buffers.
  1186                              <1> ;Add additional SFT entries.
  1187                              <1> ;Add additional FCBS.
  1188                              <1> ;Create a larger CDS if needed.
  1189                              <1> noCfg:
  1190                              <1> ;Start with buffers:
  1191 00000F03 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
  1192 00000F07 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
  1193 00000F0D 0F84A5000000        <1>     je .skipBuffers
  1194 00000F13 FFC9                <1>     dec ecx  ;Minus one now
  1195 00000F15 64880C25[79000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1196                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1197 00000F1D 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
  1197 00000F22 [5B000000]          <1>
  1198 00000F26 0530000000          <1>     add eax, bufferHdr_size ;eax has the size to add
  1199 00000F2B 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
  1200 00000F2C F7E1                <1>     mul ecx ;Get total size to allocate in eax
  1201 00000F2E 5A                  <1>     pop rdx     ;and get the total value back in rdx
  1202 00000F2F 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
  1203 00000F31 81C30F000000        <1>     add ebx, 0Fh
  1204 00000F37 C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
  1205 00000F3A B800480000          <1>     mov eax, 4800h  ;ALLOC
  1206 00000F3F CD41                <1>     int 41h
  1207 00000F41 7275                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
  1208                              <1>     ;Each buffer has no flags, drive number must be -1
  1209 00000F43 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
  1210 00000F46 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
  1211 00000F49 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
  1212 00000F4F 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
  1213 00000F57 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
  1214 00000F5B 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
  1214 00000F60 [5D000000]          <1>
  1215 00000F64 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
  1216 00000F67 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1217 00000F6A 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1218 00000F6C FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
  1219 00000F6E 67E325              <1>     jecxz .lastBuffer
  1220                              <1> .bufferLoop:
  1221 00000F71 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1222 00000F74 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1223 00000F77 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1224 00000F7D 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1225 00000F81 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1226 00000F84 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1227 00000F87 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1228 00000F8B 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1229 00000F8F 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1230 00000F92 FFC9                <1>     dec ecx
  1231 00000F94 75DB                <1>     jnz .bufferLoop
  1232                              <1> .lastBuffer:
  1233 00000F96 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1234 00000F99 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1235 00000FA0 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1236 00000FA6 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1237 00000FAA 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1238 00000FAD 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1239 00000FB0 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1240 00000FB4 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1241                              <1> .skipBuffers:
  1242                              <1> ;Now build a new SFT header for the number of files specified by user
  1243 00000FB8 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1244 00000FBC 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1245 00000FC2 764F                <1>     jbe short .skipSFT
  1246                              <1>     ;First compute how big this new arena needs to be
  1247 00000FC4 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
  1248 00000FCA B84F000000          <1>     mov eax, sft_size
  1249 00000FCF F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1250 00000FD1 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1251 00000FD6 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1252 00000FD8 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1253 00000FDE C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1254 00000FE1 B800480000          <1>     mov eax, 4800h
  1255 00000FE6 CD41                <1>     int 41h
  1256 00000FE8 7229                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
  1257 00000FEA 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
  1257 00000FEF [43000000]          <1>
  1258 00000FF3 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
  1259 00000FF6 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
  1260 00000FFA 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
  1261 00001001 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1262 00001007 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1263 0000100F C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
  1264                              <1> .skipSFT:
  1265                              <1> ;FCBS now
  1266 00001013 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1267 00001017 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
  1268 0000101A B84F000000          <1>     mov eax, sft_size
  1269 0000101F F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1270 00001021 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1271 00001026 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1272 00001028 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1273 0000102E C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1274 00001031 B800480000          <1>     mov eax, 4800h
  1275 00001036 CD41                <1>     int 41h
  1276 00001038 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
  1277 0000103A 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
  1277 0000103F [6D000000]          <1>
  1278 00001043 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
  1279 00001047 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
  1280 0000104E 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1281 00001054 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1282 0000105C C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
  1283                              <1> .skipFCBS:
  1284                              <1> ;And CDS now
  1285 00001060 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1286 00001064 64380C25[78000000]  <1>     cmp byte fs:[lastdrvNum], cl
  1287 0000106C 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
  1288                              <1>     ;Else, we first free the old CDS and then reallocate
  1289 0000106E 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
  1289 00001073 [65000000]          <1>
  1290 00001077 B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
  1291 0000107C CD41                <1>     int 41h
  1292 0000107E 720D                <1>     jc short .skipCDS
  1293 00001080 64880C25[78000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1294 00001088 E864F4FFFF          <1>     call makeCDSArray
  1295                              <1> .skipCDS:
  1296 0000108D 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1297 00001090 5D                  <1>     pop rbp ;Stack frame no longer needed
  1298                              <1> ;Now we close all five default handles and open AUX, CON and PRN
  1299                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
  1300 00001091 31DB                <1>     xor ebx, ebx
  1301                              <1> closeHandlesLoop:
  1302 00001093 B8003E0000          <1>     mov eax, 3e00h  ;Close
  1303 00001098 CD41                <1>     int 41h
  1304 0000109A FFC3                <1>     inc ebx ;Goto next handle
  1305 0000109C 81FB06000000        <1>     cmp ebx, 6
  1306 000010A2 75EF                <1>     jne closeHandlesLoop
  1307 000010A4 E89A020000          <1>     call openStreams
  1308                              <1> l1:
  1309 000010A9 BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
  1310 000010AE B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
  1311 000010B3 CD41                <1>     int 41h         ;Malloc and get pointer in rbx
  1312 000010B5 0F828F000000        <1>     jc badMem
  1313 000010BB 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
  1314 000010BE 4881EB10000000      <1>     sub rbx, mcb_size
  1315 000010C5 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
  1316 000010CD 48890522050000      <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
  1317 000010D4 4C8D054E050000      <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
  1318 000010DB 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
  1319                              <1>     ;Input: r8 = PSP
  1320                              <1>     ;       r9 = Memory Arena Pointer
  1321                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
  1322 000010DE E8100A0000          <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
  1323 000010E3 720E                <1>     jc short l2 
  1324 000010E5 4C8B050A050000      <1>     mov r8, qword [OEMMEMPTR]
  1325 000010EC B800490000          <1>     mov eax, 4900h  ;Free the memory block
  1326 000010F1 CD41                <1>     int 41h
  1327                              <1> l2:
  1328                              <1>     ;Load COMMAND.COM
  1329                              <1>     ;Get currentPSP ptr
  1330 000010F3 B462                <1>     mov ah, 62h ;Get current PSP ptr in rbx
  1331 000010F5 CD41                <1>     int 41h
  1332 000010F7 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1333 000010F9 CD41                <1>     int 41h
  1334 000010FB 0441                <1>     add al, "A"
  1335 000010FD 8805BF000000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1336                              <1> 
  1337 00001103 488D1DC7000000      <1>     lea rbx, cmdBlock
  1338 0000110A 488D3518050000      <1>     lea rsi, tempPSP
  1339 00001111 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
  1340 00001115 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1341 00001119 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
  1342 0000111D 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1343 00001121 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
  1344 00001128 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
  1345 0000112C 488D158F000000      <1>     lea rdx, cmdLine
  1346 00001133 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1347 00001138 CD41                <1>     int 41h
  1348 0000113A 488D1545000000      <1>     lea rdx, badCom
  1349 00001141 B409                <1>     mov ah, 09h ;Print message
  1350 00001143 CD41                <1>     int 41h
  1351                              <1> hltLbl:
  1352 00001145 F4                  <1>     hlt
  1353 00001146 F390                <1>     pause
  1354 00001148 EBFB                <1>     jmp short hltLbl
  1355                              <1> badMem:
  1356 0000114A 488D1509000000      <1>     lea rdx, memErr
  1357 00001151 B800090000          <1>     mov eax, 0900h
  1358 00001156 CD41                <1>     int 41h
  1359 00001158 EBEB                <1>     jmp short hltLbl
  1360 0000115A 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
  1360 00001163 6D6F7279204572726F- <1>
  1360 0000116C 720A0D24            <1>
  1361                              <1> ;--------------------------------
  1362                              <1> ;       DATA FOR SYSINIT        :
  1363                              <1> ;--------------------------------
  1364 00001170 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1364 00001179 5343502F444F532E2E- <1>
  1364 00001182 2E0A0D24            <1>
  1365 00001186 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1365 0000118F 7373696E6720436F6D- <1>
  1365 00001198 6D616E6420696E7465- <1>
  1365 000011A1 727072657465720A0D- <1>
  1365 000011AA 24                  <1>
  1366 000011AB 434F4E00            <1> conName db "CON",0
  1367 000011AF 41555800            <1> auxName db "AUX",0
  1368 000011B3 50524E00            <1> prnName db "PRN",0
  1369                              <1> 
  1370 000011B7 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1370 000011C0 5300                <1>
  1371 000011C2 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0   ;ASCIIZ FOR COMMAND.COM
  1371 000011CB 442E434F4D00        <1>
  1372                              <1> 
  1373                              <1> cmdBlock:   ;Used also for overlay block
  1374                              <1>     istruc execProg
  1375 000011D1 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
  1376 000011D9 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
  1377 000011E1 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1378 000011E9 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1379                              <1>     iend
  1380                              <1> exceptData:
  1381 000011F1 [8563000000000000]  <1>     dq i0
  1382 000011F9 [8C63000000000000]  <1>     dq i1
  1383 00001201 [9663000000000000]  <1>     dq i2
  1384 00001209 [A063000000000000]  <1>     dq i3
  1385 00001211 [AA63000000000000]  <1>     dq i4
  1386 00001219 [B463000000000000]  <1>     dq i5
  1387 00001221 [BB63000000000000]  <1>     dq i6
  1388 00001229 [C263000000000000]  <1>     dq i7
  1389 00001231 [C963000000000000]  <1>     dq i8
  1390 00001239 [D063000000000000]  <1>     dq i9
  1391 00001241 [D763000000000000]  <1>     dq i10
  1392 00001249 [DE63000000000000]  <1>     dq i11
  1393 00001251 [E563000000000000]  <1>     dq i12
  1394 00001259 [EC63000000000000]  <1>     dq i13
  1395 00001261 [F363000000000000]  <1>     dq i14
  1396 00001269 [FA63000000000000]  <1>     dq i15
  1397 00001271 [0164000000000000]  <1>     dq i16
  1398 00001279 [0864000000000000]  <1>     dq i17
  1399 00001281 [0F64000000000000]  <1>     dq i18
  1400 00001289 [1664000000000000]  <1>     dq i19
  1401 00001291 [1D64000000000000]  <1>     dq i20
  1402 00001299 [2464000000000000]  <1>     dq i21
  1403                              <1> 
  1404                              <1> intData:
  1405 000012A1 [1656000000000000]  <1>     dq terminateProcess ;Int 40h
  1406 000012A9 [F76E000000000000]  <1>     dq functionDispatch ;Int 41h
  1407 000012B1 [AF1A000000000000]  <1>     dq OEMHALT          ;Int 42h, If sysinit terminates, halt system
  1408 000012B9 [4F70000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1409 000012C1 [B967000000000000]  <1>     dq dosDefCritErrHdlr 
  1410 000012C9 [9268000000000000]  <1>     dq absDiskRead      ;Int 45h
  1411 000012D1 [7368000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1412 000012D9 [1D56000000000000]  <1>     dq terminateRes     ;Int 47h
  1413 000012E1 [4F70000000000000]  <1>     dq defaultIretq     ;Int 48h
  1414 000012E9 [4F70000000000000]  <1>     dq defaultIretq     ;Int 49h
  1415 000012F1 [4F70000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1416 000012F9 [4F70000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1417 00001301 [4F70000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1418 00001309 [4F70000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1419 00001311 [4F70000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1420 00001319 [5E77000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1421                              <1> nData:
  1422 00001321 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
  1423 00001329 0480                <1>     dw 08004h
  1424 0000132B [D267000000000000]  <1>     dq nulStrat
  1425 00001333 [D867000000000000]  <1>     dq nulIntr
  1426 0000133B 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1427                              <1> 
  1428                              <1> openStreams:
  1429                              <1> ;If this returns with CF=CY, an error occured. Halt boot if initial set of streams
  1430 00001343 488D1565FEFFFF      <1>     lea rdx, auxName
  1431 0000134A B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1432 0000134F CD41                <1>     int 41h
  1433                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001351 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001353 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1434 00001354 89C3                <1>     mov ebx, eax
  1435 00001356 B903000000          <1>     mov ecx, 3  ;
  1436 0000135B B800460000          <1>     mov eax, 4600h  ;DUP2
  1437 00001360 CD41                <1>     int 41h
  1438                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001362 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1439 00001364 B8003E0000          <1>     mov eax, 3e00h
  1440 00001369 CD41                <1>     int 41h ;Close the original handle
  1441                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000136B 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1442 0000136D B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1443 00001372 488D1532FEFFFF      <1>     lea rdx, conName
  1444 00001379 CD41                <1>     int 41h
  1445                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000137B 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 0000137D 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1447 0000137F B800450000          <1>     mov eax, 4500h  ;DUP
  1448 00001384 CD41                <1>     int 41h
  1449                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001386 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1450 00001388 B800450000          <1>     mov eax, 4500h  ;DUP
  1451 0000138D CD41                <1>     int 41h
  1452                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000138F 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1453 00001391 488D151BFEFFFF      <1>     lea rdx, prnName
  1454 00001398 B8023D0000          <1>     mov eax, 3D02h
  1455 0000139D CD41                <1>     int 41h       ;Open file
  1456                              <1>     return
    13                              <2> %%_ret:
    14 0000139F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1457                              <1> 
  1458                              <1> addDriverMarkers:
  1459                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
  1460                              <1> ; information and owner to each memory block. Used for drivers that allocate
  1461                              <1> ; their own memory using ALLOC.
  1462                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
  1463                              <1> ;       fs -> Dos Data Area
  1464                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
  1465                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
  1466                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
  1467 000013A0 50                  <1>     push rax
  1468 000013A1 53                  <1>     push rbx
  1469 000013A2 51                  <1>     push rcx
  1470 000013A3 56                  <1>     push rsi
  1471 000013A4 57                  <1>     push rdi
  1472 000013A5 488BBD[1F040000]    <1>     mov rdi, qword [rbp + currentPSP]
  1473 000013AC 488BB5[33000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
  1474 000013B3 B844000000          <1>     mov eax, mcbSubDriver
  1475 000013B8 BB4C000000          <1>     mov ebx, mcbSubDrvExtra
  1476 000013BD 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
  1477 000013C4 0F44C3              <1>     cmove eax, ebx
  1478 000013C7 EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
  1479                              <1> .checkSubsystem:
  1480 000013C9 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
  1481 000013CD 7512                <1>     jne short .gotoNextBlock
  1482 000013CF 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
  1483 000013D2 39D8                <1>     cmp eax, ebx
  1484 000013D4 0F45C3              <1>     cmovne eax, ebx
  1485 000013D7 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
  1486 000013DB 7504                <1>     jne short .gotoNextBlock
  1487 000013DD C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
  1488                              <1> .gotoNextBlock:
  1489 000013E1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
  1490 000013E4 7415                <1>     je short .exit
  1491 000013E6 31C9                <1>     xor ecx, ecx
  1492 000013E8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
  1493 000013EB 48C1E104            <1>     shl rcx, 4
  1494 000013EF 4881C610000000      <1>     add rsi, mcb.program    
  1495 000013F6 4801CE              <1>     add rsi, rcx
  1496 000013F9 EBCE                <1>     jmp short .checkSubsystem
  1497                              <1> .exit:
  1498 000013FB 5F                  <1>     pop rdi
  1499 000013FC 5E                  <1>     pop rsi
  1500 000013FD 59                  <1>     pop rcx
  1501 000013FE 5B                  <1>     pop rbx
  1502 000013FF 58                  <1>     pop rax
  1503                              <1>     return
    13                              <2> %%_ret:
    14 00001400 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1504                              <1> 
  1505                              <1> 
  1506                              <1> convertBPBArray:
  1507                              <1> ;rsi -> BPB array
  1508                              <1> ;rbp -> Space for cl consecutive DPB's
  1509                              <1> ;rdi -> Driver header
  1510                              <1> ;cl = Number of BPBs to process
  1511                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
  1512 00001401 E852000000          <1>     call .findLastDPB
  1513 00001406 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
  1514                              <1> .buildNext:
  1515 00001409 56                  <1>     push rsi
  1516 0000140A 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
  1517 0000140D B453                <1>     mov ah, 53h ;Build DPB
  1518 0000140F CD41                <1>     int 41h
  1519 00001411 5E                  <1>     pop rsi
  1520 00001412 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
  1520 00001417 [77000000]          <1>
  1521 0000141B 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
  1522 0000141E 64FE0425[77000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
  1523 00001426 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
  1524 00001429 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
  1525 0000142D FEC5                <1>     inc ch  ;Goto next unit number
  1526 0000142F 38E9                <1>     cmp cl, ch  ;When equal, exit!
  1527 00001431 7414                <1>     jz short .exit
  1528 00001433 488D4535            <1>     lea rax, qword [rbp + dpb_size]
  1529 00001437 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1530 0000143B 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
  1531 0000143E 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
  1532 00001445 EBC2                <1>     jmp short .buildNext
  1533                              <1> .exit:
  1534                              <1>     ;Now set next DPB as -1 i.e end of chain!
  1535 00001447 31C0                <1>     xor eax, eax
  1536 00001449 48FFC8              <1>     dec rax
  1537 0000144C 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1538 00001450 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
  1539 00001457 C3                  <1>     ret
  1540                              <1> .findLastDPB:
  1541                              <1> ;Finds the last DPB and links the next DPB to it
  1542 00001458 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
  1542 0000145D [3B000000]          <1>
  1543 00001461 4885C0              <1>     test rax, rax
  1544 00001464 7415                <1>     jz short .first 
  1545                              <1> .lp:
  1546 00001466 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
  1547 0000146E 7406                <1>     je short .lastFound
  1548 00001470 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
  1549 00001474 EBF0                <1>     jmp short .lp   ;And go again
  1550                              <1> .lastFound:
  1551 00001476 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
  1552 0000147A C3                  <1>     ret
  1553                              <1> .first:
  1554                              <1> ;If this is the first DPB array, set the dpbHeadPtr
  1555 0000147B 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
  1555 00001480 [3B000000]          <1>
  1556 00001484 C3                  <1>     ret
  1557                              <1> 
  1558                              <1> ejectKernelInit:
  1559                              <1> ;Reallocates the space allocated to the driver file after 
  1560                              <1> ; init was called.
  1561                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
  1562                              <1> ;       r8 -> Points to the mcb header for reallocation
  1563                              <1> ;Uses the sysinit init drive block. 
  1564                              <1> ;rax, rbx, rflags trashed
  1565                              <1> ;If returns CF=CY, error in reallocation.
  1566 00001485 53                  <1>     push rbx
  1567 00001486 488D1D7D010000      <1>     lea rbx, initDrvBlk
  1568 0000148D 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
  1569 00001491 5B                  <1>     pop rbx
  1570                              <1>     ;If this endptr is zero or -1 ignore it. 
  1571                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
  1572 00001492 4885C0              <1>     test rax, rax
  1573                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001495 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001497 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1574 00001498 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
  1575                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000149B 74(97)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1576 0000149D 48FFC8              <1>     dec rax ;Return to original value
  1577 000014A0 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
  1578 000014A6 48C1E804            <1>     shr rax, 4
  1579 000014AA 48C1E004            <1>     shl rax, 4
  1580 000014AE 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
  1581 000014B1 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
  1582 000014B3 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
  1583 000014BA 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
  1584 000014BC 4981C010000000      <1>     add r8, mcb.program ;Goto program
  1585 000014C3 C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
  1586 000014C6 29D8                <1>     sub eax, ebx
  1587 000014C8 89C3                <1>     mov ebx, eax
  1588 000014CA B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
  1589 000014CF CD41                <1>     int 41h
  1590 000014D1 4158                <1>     pop r8
  1591                              <1>     return
    13                              <2> %%_ret:
    14 000014D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1592                              <1> .exit:
  1593 000014D4 F8                  <1>     clc ;Make sure to clear the CF flag before returning
  1594                              <1>     return
    13                              <2> %%_ret:
    14 000014D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1595                              <1> 
  1596                              <1> initDriver:
  1597                              <1> ;Initialises one driver and adjusts the DOS data appropriately
  1598                              <1> ;If on return CF=CY then the driver didnt want to be loaded
  1599                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
  1600                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
  1601                              <1> ; arguments are to be passed to the driver
  1602                              <1> ;Input: rsi -> driver pointer
  1603                              <1> ;       rbx -> sysinit request pointer
  1604                              <1> ;       rbp -> DOSSEG pointer
  1605 000014D6 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1606 000014D9 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1607 000014DD 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1608 000014E3 8A85[77000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
  1609 000014E9 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1610                              <1>     ;Protect the important registers. All others trashable
  1611 000014EC 53                  <1>     push rbx
  1612 000014ED 56                  <1>     push rsi
  1613 000014EE 55                  <1>     push rbp
  1614 000014EF FF560A              <1>     call qword [rsi + drvHdr.strPtr]
  1615 000014F2 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1616 000014F5 5D                  <1>     pop rbp
  1617 000014F6 5E                  <1>     pop rsi
  1618 000014F7 5B                  <1>     pop rbx
  1619                              <1>     ;Check if a driver wants to not load.
  1620                              <1>     ;If a kernel driver wants to stop, halt boot.
  1621 000014F8 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1622 000014FE 750C                <1>     jnz short .errExit
  1623 00001500 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1624 00001504 7508                <1>     jne short .notHalt
  1625 00001506 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
  1626 0000150A 7502                <1>     jne short .notHalt
  1627                              <1> .errExit:
  1628 0000150C F9                  <1>     stc
  1629 0000150D C3                  <1>     ret
  1630                              <1> .notHalt:
  1631                              <1>     ;Now check if the drivers were con/clock before exiting
  1632 0000150E 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
  1633 00001512 66250300            <1>     and ax, devDrvConIn | devDrvConOut
  1634 00001516 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
  1635 00001518 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
  1636 0000151C 7507                <1>     jne short .checkClock
  1637 0000151E 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
  1638                              <1> .checkClock:
  1639 00001525 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1640 0000152B 7407                <1>     jz short .notClock
  1641 0000152D 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi
  1642                              <1> .notClock:
  1643                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
  1644 00001534 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1645                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000153A 75(D5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1646                              <1>     ;Else, store the number of units as reported live by driver
  1647 0000153C 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
  1648 00001540 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
  1649 00001543 C3                  <1>     ret
  1650                              <1> 
  1651                              <1> buildDPBs:
  1652                              <1>     ;Here we specially handle MSD drivers, building DPBs
  1653                              <1>     ;If return with CF=CY, fail. Else, all done and setup
  1654                              <1>     ;Input: rbx -> Points to sysinit request packet
  1655                              <1>     ;       rsi -> Driver header
  1656                              <1>     ;       rbp -> DOSSEG pointer
  1657                              <1>     ;Preserves those registers
  1658 00001544 53                  <1>     push rbx
  1659 00001545 55                  <1>     push rbp
  1660 00001546 56                  <1>     push rsi
  1661 00001547 57                  <1>     push rdi
  1662 00001548 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
  1663 0000154B 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
  1664 0000154F 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
  1665 00001553 B835000000          <1>     mov eax, dpb_size
  1666 00001558 F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
  1667 0000155A 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
  1668 0000155F C1E804              <1>     shr eax, 4      ;Convert to paragraphs
  1669 00001562 89C3                <1>     mov ebx, eax
  1670 00001564 B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
  1671 00001569 CD41                <1>     int 41h
  1672 0000156B 7219                <1>     jc short .badExit
  1673 0000156D 4889C5              <1>     mov rbp, rax    
  1674 00001570 C6400D50            <1>     mov byte [rax + mcb.subSysMark], mcbSubDrvDPB  ;Set DPB marker here
  1675 00001574 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS owner here
  1676                              <1>     ;rsi -> Ptr to BPB
  1677                              <1> 	;rbp -> Ptr to buffer to hold first DPB
  1678                              <1>     ;rdi -> Ptr to the driver header
  1679 0000157C E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
  1680                              <1> .exit:
  1681 00001581 5F                  <1>     pop rdi
  1682 00001582 5E                  <1>     pop rsi
  1683 00001583 5D                  <1>     pop rbp
  1684 00001584 5B                  <1>     pop rbx
  1685                              <1>     return
    13                              <2> %%_ret:
    14 00001585 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1686                              <1> .badExit:
  1687 00001586 F9                  <1>     stc
  1688 00001587 EBF8                <1>     jmp short .exit
  1689                              <1> 
  1690                              <1> setupInterruptBlock:
  1691                              <1> ;Sets up a block of interrupts with pointers provided in a table
  1692                              <1> ;Input:
  1693                              <1> ; al = Start interrupt
  1694                              <1> ; rdi -> Start of pointer table
  1695                              <1> ; cl = Last interrupt + 1
  1696                              <1> ;Assumes rbp points to DOSSEG
  1697 00001589 0FB6C0              <1>     movzx eax, al
  1698 0000158C 0FB6C9              <1>     movzx ecx, cl
  1699                              <1> .lp:
  1700 0000158F 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
  1701 00001592 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
  1702 00001595 E80E000000          <1>     call writeIDTEntry
  1703 0000159A 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
  1704 000015A1 FFC0                <1>     inc eax     ;Goto next interrupt number
  1705 000015A3 39C8                <1>     cmp eax, ecx
  1706 000015A5 75E8                <1>     jne .lp
  1707                              <1>     return
    13                              <2> %%_ret:
    14 000015A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1708                              <1> 
  1709                              <1> writeIDTEntry:
  1710                              <1> ;Writes the interrupt in the right place in the table
  1711                              <1>     ;al = Interrupt number
  1712                              <1>     ;rbx -> Handler to install
  1713 000015A8 50                  <1>     push rax
  1714 000015A9 53                  <1>     push rbx
  1715 000015AA 0FB6C0              <1>     movzx eax, al
  1716 000015AD 4893                <1>     xchg rbx, rax
  1717 000015AF 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
  1718 000015B3 48031D17000000      <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
  1719 000015BA 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
  1720 000015BD 48C1E810            <1>     shr rax, 10h    ;Bring next word low
  1721 000015C1 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
  1722 000015C5 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
  1723 000015C9 894308              <1>     mov dword [rbx + 8], eax
  1724 000015CC 5B                  <1>     pop rbx
  1725 000015CD 58                  <1>     pop rax
  1726 000015CE C3                  <1>     ret
  1727                              <1> 
  1728                              <1> ; DATA AREA
  1729                              <1> localIDTpointer: ;Local IDT pointer
  1730 000015CF 0000                <1>     .Limit  dw 0
  1731 000015D1 0000000000000000    <1>     .Base   dq 0
  1732                              <1> 
  1733 000015D9 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
  1734 000015E1 0000000000000000    <1> DOSENDPTR   dq 0    ;Pointer to the first free byte AFTER DOS
  1735 000015E9 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
  1736                              <1> 
  1737                              <1> ;DOS Data given by OEM
  1738 000015F1 00                  <1> FILES       db 0    ;Default number of FILES
  1739 000015F2 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
  1740 000015F3 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
  1741 000015F4 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
  1742 000015F5 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
  1743                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
  1744 000015F6 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
  1745 000015FE 0000000000000000    <1> OEMPTR      dq 0    ;Pointer to store at biosPtr
  1746 00001606 00000000            <1> OEMVERSION  dd 0    ;BIOS number, to be used by drivers for id-ing
  1747                              <1> 
  1748 0000160A 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
  1748 00001613 000000000000000000- <1>
  1748 0000161C 000000000000000000- <1>
  1748 00001625 00000000            <1>
  1749                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
  1750                              <1>     istruc psp
  1751 00001629 CD40                <1>     at psp.return,      db 0CDh, 40h
  1752 0000162B 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
  1753 00001633 0000000000000000    <1>     at psp.oldInt42h,   dq 0
  1754 0000163B 0000000000000000    <1>     at psp.oldInt43h,   dq 0
  1755 00001643 0000000000000000    <1>     at psp.oldInt44h,   dq 0
  1756 0000164B 0000000000000000    <1>     at psp.parentPtr,   dq 0
  1757 00001653 FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
  1757 0000165C FFFFFFFFFFFFFFFFFF- <1>
  1757 00001665 FFFF                <1>
  1758 00001667 0000000000000000    <1>     at psp.envPtr,      dq 0
  1759 0000166F 0000000000000000    <1>     at psp.rspPtr,      dq 0
  1760 00001677 1400                <1>     at psp.jftSize,     dw 20 
  1761 00001679 CD41C3              <1>     at psp.unixEntry,   db 0CDh, 41h, 0C3h
  1762 0000167C 0000000000000000    <1>     at psp.prevPSP,     dq 0
  1763 00001684 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
  1763 0000168D 0000000000000000    <1>
  1764 00001695 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
  1764 0000169E 000000000000000000- <1>
  1764 000016A7 0000                <1>
  1765 000016A9 000D00000000000000- <1>     at psp.dta,         db 0, CR, 126 dup (0)   ;Dummy empty command line
  1765 000016B2 000000000000000000- <1>
  1765 000016BB 000000000000000000- <1>
  1765 000016C4 000000000000000000- <1>
  1765 000016CD 000000000000000000- <1>
  1765 000016D6 000000000000000000- <1>
  1765 000016DF 000000000000000000- <1>
  1765 000016E8 000000000000000000- <1>
  1765 000016F1 000000000000000000- <1>
  1765 000016FA 000000000000000000- <1>
  1765 00001703 000000000000000000- <1>
  1765 0000170C 000000000000000000- <1>
  1765 00001715 000000000000000000- <1>
  1765 0000171E 000000000000000000- <1>
  1765 00001727 0000                <1>
  1766                              <1>     iend
    17                                  %include "./src/Sysinit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> 
     3                              <1> OEMINIT PROC NEAR
     4                              <1> ;Sets the Statistical data and adds any page tables that are needed
     5                              <1> ;Entered with:
     6                              <1> ;           rsi -> BIOS userbase
     7                              <1> ;           rdi -> APT load area (page aligned)
     8                              <1> ;           r15 -> Boot drive
     9                              <1> ;------------------------------------------------;
    10                              <1> ;      Start saving basic DOS data to the        ; 
    11                              <1> ;                OEM Variables                   ;
    12                              <1> ;------------------------------------------------;
    13 00001729 31C0                <1>     xor eax, eax    ;Drive A:
    14 0000172B BB02000000          <1>     mov ebx, 2      ;Drive C:
    15 00001730 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
    16 00001734 0F45C3              <1>     cmovnz eax, ebx
    17 00001737 8805B6FEFFFF        <1>     mov byte [DFLTDRIVE], al    ;Set default drive
    18                              <1> ;Copy DOS to its final resting place
    19 0000173D 488935B0030000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
    20 00001744 C605A6FEFFFF08      <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
    21 0000174B C605A0FEFFFF1E      <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
    22 00001752 C6059BFEFFFF05      <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
    23 00001759 C705A3FEFFFF000000- <1>     mov dword [OEMVERSION], 0   ;CSM BIOS
    23 00001762 00                  <1>
    24 00001763 48C70590FEFFFF0000- <1>     mov qword [OEMPTR], 0       ;No pointer
    24 0000176C 0000                <1>
    25 0000176E C60580FEFFFF00      <1>     mov byte [OEMBIOS], 0       ;Use SCPBIOS/SCPDOS kernel names
    26                              <1>    ;If no detected Int 33h devices, halt 
    27 00001775 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    28 00001777 49C1E818            <1>     shr r8, 3*8
    29 0000177B 4584C0              <1>     test r8b, r8b
    30 0000177E 0F842B030000        <1>     jz OEMHALT
    31 00001784 4889F7              <1>     mov rdi, rsi
    32 00001787 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
    33 0000178E 4881C700100000      <1>     add rdi, 1000h
    34                              <1> ;------------------------------------------------;
    35                              <1> ;      Add additional page tables before the     ;
    36                              <1> ;                   data area.                   ;
    37                              <1> ;------------------------------------------------;
    38                              <1> ;This will allow for up to 64Gb of addressible space
    39                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    40 00001795 B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
    41 0000179A 57                  <1>     push rdi        ;rdi points to the APT space
    42 0000179B 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    42 000017A4 00                  <1>
    43                              <1> pdtLoop:
    44 000017A5 48AB                <1>     stosq
    45 000017A7 480500002000        <1>     add rax, 200000h
    46 000017AD FFC9                <1>     dec ecx
    47 000017AF 75F4                <1>     jnz pdtLoop
    48 000017B1 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    49                              <1> ;Now we add every 4kb page to the page directory pointer table
    50                              <1> ;15 4kb pages to consider
    51 000017B2 48893D20FEFFFF      <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
    52 000017B9 57                  <1>     push rdi
    53 000017BA 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    54 000017BD 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    55 000017C0 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    56 000017C7 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    57 000017CE B93C000000          <1>     mov ecx, 60
    58 000017D3 480D03000000        <1>     or rax, 3h      ;present and r/w
    59                              <1> pdptLoop:
    60 000017D9 48AB                <1>     stosq
    61 000017DB 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    62 000017E1 FFC9                <1>     dec ecx
    63 000017E3 75F4                <1>     jnz pdptLoop
    64                              <1> 
    65 000017E5 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
    66 000017E8 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
    67                              <1> ;------------------------------------------------;
    68                              <1> ;       Set Device Driver Chain and Exit         ;
    69                              <1> ;------------------------------------------------;  
    70                              <1> ;Before we exit, set the device driver chain
    71 000017EB 48B8-               <1>     mov rax, driverChain
    71 000017ED [7C79000000000000]  <1>
    72 000017F5 5F                  <1>     pop rdi
    73 000017F6 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
    74 000017F9 488905F6FDFFFF      <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
    75 00001800 C3                  <1>     ret
    76                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
    77                              <1> OEMINIT ENDP
    78                              <1> 
    79                              <1> OEMMCBINIT PROC NEAR
    80 00001801 B820E80000          <1>     mov eax, 0E820h ;Get memory map
    81 00001806 CD35                <1>     int 35h ; rsi has pointer to memory map
    82 00001808 488B05E5020000      <1>     mov rax, qword [biosUBase]
    83 0000180F E8F6000000          <1>     call .mcbFindAddress
    84 00001814 7341                <1>     jnc .mcbi1  ;If found, proceed
    85                              <1>     ;Here, we try use E801h
    86 00001816 B801E80000          <1>     mov eax, 0E801h
    87 0000181B CD35                <1>     int 35h
    88 0000181D 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
    89 00001820 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
    90 00001823 85C0                <1>     test eax, eax
    91 00001825 7417                <1>     jz .worst
    92 00001827 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
    93 0000182A C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
    94 0000182D 8905C9020000        <1>     mov dword [loProtMem], eax
    95 00001833 891DC7020000        <1>     mov dword [hiProtMem], ebx
    96 00001839 E919010000          <1>     jmp mcbBuild
    97                              <1> .worst:
    98                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
    99 0000183E B800002000          <1>     mov eax, 200000h
   100 00001843 488B1DAA020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
   101 0000184A 29D8                <1>     sub eax, ebx
   102 0000184C 8905AA020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   103 00001852 E900010000          <1>     jmp mcbBuild 
   104                              <1> .mcbi1:
   105 00001857 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   106 0000185A 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   106 00001863 00                  <1>
   107 00001864 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   108 00001868 0F85BC000000        <1>     jne .mcbFail
   109 0000186E 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   110                              <1>     ;PCI hole always exists so this value will always be a dword
   111 00001872 890584020000        <1>     mov dword [loProtMem], eax
   112 00001878 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   113 0000187B 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   114 0000187E 4881FB00000001      <1>     cmp rbx, 1000000h  
   115 00001885 773A                <1>     ja .skipISA
   116                              <1> ;Here we deal with ISA hole issues
   117 00001887 B820E80000          <1>     mov eax, 0E820h
   118 0000188C CD35                <1>     int 35h
   119 0000188E 48B800000001000000- <1>     mov rax, 1000000h
   119 00001897 00                  <1>
   120 00001898 E86D000000          <1>     call .mcbFindAddress
   121 0000189D 0F82B4000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   122 000018A3 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   122 000018AC 00                  <1>
   123 000018AD 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   124 000018B1 0F85A0000000        <1>     jne mcbBuild  
   125 000018B7 488B5808            <1>     mov rbx, qword [rax + 8]
   126 000018BB 891D3F020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   127                              <1> .skipISA:
   128 000018C1 B820E80000          <1>     mov eax, 0E820h
   129 000018C6 CD35                <1>     int 35h
   130 000018C8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   130 000018D1 00                  <1>
   131 000018D2 E833000000          <1>     call .mcbFindAddress
   132 000018D7 727E                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   133 000018D9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   133 000018E2 00                  <1>
   134 000018E3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   135 000018E7 756E                <1>     jne mcbBuild   
   136 000018E9 488B5808            <1>     mov rbx, qword [rax + 8]
   137                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   138 000018ED 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   138 000018F6 00                  <1>
   139 000018F7 4839CB              <1>     cmp rbx, rcx
   140 000018FA 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   141 000018FE 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   142 00001905 E94D000000          <1>     jmp mcbBuild
   143                              <1> .mcbFindAddress:
   144                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   145                              <1> ;Entry: rax = Address of arena to search for
   146                              <1> ;       rsi = Pointer to memory map
   147                              <1> ;       ecx = Number of 24 byte entries
   148                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   149                              <1> ;       CF=CY : value in rax not found
   150 0000190A 56                  <1>     push rsi
   151 0000190B 51                  <1>     push rcx
   152 0000190C 50                  <1>     push rax
   153                              <1> .mfa0:
   154 0000190D 483B06              <1>     cmp rax, qword [rsi]
   155 00001910 7410                <1>     je .mcbAddressFound
   156 00001912 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   157 00001919 FFC9                <1>     dec ecx
   158 0000191B 79F0                <1>     jns .mfa0
   159                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   160 0000191D 58                  <1>     pop rax
   161 0000191E 59                  <1>     pop rcx
   162 0000191F 5E                  <1>     pop rsi
   163 00001920 F9                  <1>     stc
   164 00001921 C3                  <1>     ret
   165                              <1> .mcbAddressFound:
   166 00001922 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   167 00001925 59                  <1>     pop rcx ;Pop old rax value off
   168 00001926 59                  <1>     pop rcx
   169 00001927 5E                  <1>     pop rsi
   170 00001928 F8                  <1>     clc
   171 00001929 C3                  <1>     ret
   172                              <1> .mcbFail:
   173 0000192A 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   174 00001931 B804130000          <1>     mov eax, 1304h
   175 00001936 CD30                <1>     int 30h
   176 00001938 E972010000          <1>     jmp OEMHALT
   177 0000193D 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   177 00001946 6C6F636174696F6E20- <1>
   177 0000194F 4572726F720A0D00    <1>
   178                              <1> 
   179                              <1> mcbBuild:
   180                              <1> ;Actually build the MCB chain here
   181                              <1> ;Start by computing the difference between userbase and DOS area
   182 00001957 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   183 0000195E 488B3584FCFFFF      <1>     mov rsi, qword [MCBANCHOR]  
   184 00001965 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   185 00001968 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   186 0000196C 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   187 00001972 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   188 00001975 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   189 00001978 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   190 0000197B 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   191 00001981 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   192 00001987 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   192 00001990 00                  <1>
   193 00001991 0F8218010000        <1>     jb OEMHALT
   194 00001997 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   195 0000199A 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   196 0000199D C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   197 000019A0 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   198 000019A8 31F6                <1>     xor esi, esi
   199 000019AA 8B354C010000        <1>     mov esi, dword [loProtMem]
   200 000019B0 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   201 000019B6 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   202 000019B9 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   203                              <1> 
   204                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   205 000019BC 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   205 000019C5 00                  <1>
   206 000019C6 746C                <1>     jz .skipISA
   207                              <1>     ;Here if an ISA hole exists, place a MCB around it
   208 000019C8 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   209                              <1>     ;Remove one MCB worth of space from alloc
   210 000019CF 31C9                <1>     xor ecx, ecx
   211 000019D1 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   212 000019D4 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   213 000019DA C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   214 000019DD C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   215 000019E0 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   216 000019E3 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   217 000019E6 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   218 000019EE 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   218 000019F7 00                  <1>
   219 000019F8 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   220 000019FB 480510000000        <1>     add rax, mcb_size
   221 00001A01 4829C1              <1>     sub rcx, rax    ;Take their difference
   222 00001A04 C1E904              <1>     shr ecx, 4
   223 00001A07 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   224 00001A0A C1E104              <1>     shl ecx, 4  ;Get bytes again
   225 00001A0D 4881C310000000      <1>     add rbx, mcb_size
   226 00001A14 4801CB              <1>     add rbx, rcx
   227                              <1>     ;RBX should now be at 16Mb
   228 00001A17 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   229 00001A1A 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   230 00001A22 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   231 00001A28 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   232 00001A2B 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   233 00001A31 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   234                              <1> .skipISA:
   235                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   236                              <1>     ;rbx points to a block with "Z" marker
   237 00001A34 813DC6000000000000- <1>     cmp dword [longMem], 0
   237 00001A3D 00                  <1>
   238 00001A3E 746E                <1>     jz .exit
   239                              <1>     ;Add PCI hole MCB
   240 00001A40 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   241                              <1>     ;Remove one MCB worth of space from alloc
   242 00001A47 31C9                <1>     xor ecx, ecx
   243 00001A49 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   244 00001A4C 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   245 00001A52 C1E104              <1>     shl ecx, 4  ;Get bytes
   246 00001A55 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   247 00001A58 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   248 00001A5B C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   249 00001A5E 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   250 00001A66 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   250 00001A6F 00                  <1>
   251 00001A70 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   252 00001A73 480510000000        <1>     add rax, mcb_size
   253 00001A79 4829C1              <1>     sub rcx, rax    ;Take their difference
   254 00001A7C C1E904              <1>     shr ecx, 4
   255 00001A7F 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   256 00001A82 C1E104              <1>     shl ecx, 4  ;Get bytes again
   257 00001A85 4881C310000000      <1>     add rbx, mcb_size
   258 00001A8C 4801CB              <1>     add rbx, rcx
   259                              <1>     ;RBX should now be at 4Gb
   260 00001A8F C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   261 00001A92 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   262 00001A9A 488B0D63000000      <1>     mov rcx, qword [longMem]
   263 00001AA1 48C1E904            <1>     shr rcx, 4
   264 00001AA5 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   265 00001AAB 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   266                              <1> .exit:
   267 00001AAE C3                  <1>     ret
   268                              <1> OEMMCBINIT ENDP
   269                              <1> 
   270                              <1> OEMHALT PROC    NEAR
   271                              <1> ;If a critical error occurs during sysinit, fail through here
   272                              <1> ;Int 42h, 43h and 44h point here during sysinit
   273 00001AAF 488D2D0C000000      <1>     lea rbp, hltmsg
   274 00001AB6 B804130000          <1>     mov eax, 1304h
   275 00001ABB CD30                <1>     int 30h
   276                              <1> .ei0:
   277 00001ABD F4                  <1>     hlt
   278 00001ABE F390                <1>     pause
   279 00001AC0 EBFB                <1>     jmp short .ei0
   280 00001AC2 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   280 00001ACB 7469616C6973696E67- <1>
   280 00001AD4 20534350444F532E53- <1>
   280 00001ADD 59532E205379737465- <1>
   280 00001AE6 6D2068616C74696E67- <1>
   280 00001AEF 2E2E2E00            <1>
   281                              <1> OEMHALT ENDP
   282                              <1> 
   283                              <1> OEMCALLBK PROC NEAR
   284 00001AF3 C3                  <1>     ret
   285                              <1> OEMCALLBK ENDP
   286                              <1> 
   287                              <1> ;OEM Only variables are permitted in this file. They are not 
   288                              <1> ; visible to SYSINIT
   289 00001AF4 0000000000000000    <1> biosUBase   dq 0
   290 00001AFC 00000000            <1> loProtMem   dd 0
   291 00001B00 00000000            <1> hiProtMem   dd 0
   292 00001B04 0000000000000000    <1> longMem     dq 0
    18                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    19                                  %include "./src/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   resb mcb_size   ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   resb 1    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    resd 1    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     resq 1    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    10 0000001D ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33 0000009C ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     resq 1  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   resq 1  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare resq 1  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  resb sfth_size
   149 00000141 <res 4Fh>           <1>     firstSft    resb sft_size
   150 00000190 <res 4Fh>           <1>     secondSft   resb sft_size
   151 000001DF <res 4Fh>           <1>     thirdSft    resb sft_size
   152 0000022E <res 4Fh>           <1>     fourthSft   resb sft_size
   153 0000027D <res 4Fh>           <1>     fifthSft    resb sft_size
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 resb 1  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   182 00000408 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  resw 1  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction resb 1  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  resb 1  ;Error Class
   188 0000040F ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   189 00000417 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   193 0000042F ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  resb 1  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   201 0000043B ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   207 0000045F ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   208 00000467 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   209 00000468 ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   210 00000469 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   211                              <1> 
   212 0000046A ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   213 00000472 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   214 0000047A ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   215 00000482 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   216 0000048A ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   217                              <1> ;The below flag tells DOS to print ^C in the termination function
   218 0000048B ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   219 0000048C ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   220                              <1> ;Time stuff
   221                              <1> ;Read the below two as a word
   222 0000048D ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   223 0000048E ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   224 0000048F ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   225 00000490 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   226 00000492 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   227                              <1> 
   228 00000493 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   229 00000494 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   230 00000495 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   231                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   232                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   233                              <1> ; without forcing to re-build the whole primary request block.
   234                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   235                              <1> ; with secondary char output going through the secondary header
   236                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   237                              <1> ; for output)
   238                              <1> ;ioReqPkt is the largest possible packet
   239 00000496 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   240 000004C0 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   241                              <1>     altRet: ;Accessed as a qword
   242 000004EA <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   243 00000514 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   244                              <1> ;Swappable Buffers
   245 00000515 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   246                              <1>     ;We add an additional byte to save ah too
   247 0000051B ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   248 0000051D <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   249 0000059D <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   250 0000061D ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   251 00000625 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   252 0000062D ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   253                              <1> ;Misc bookkeeping flags and vars
   254 0000062E <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   255 00000659 <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   256 00000679 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   257 000006D4 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   258 000006E0 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   259 000006EC ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   260                              <1> 
   261 000006F4 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   262 000006F5 ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   263 000006F6 ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   264 000006F7 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   265 000006F8 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   266 000006F9 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   267 000006FA ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   268 000006FB ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   269 000006FC ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   270 000006FD ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   271                              <1> 
   272 000006FE ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   273 000006FF ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   274 00000700 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   275 00000701 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   276 00000702 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   277 00000703 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   278 00000704 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   279                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   280                              <1> workingDD:  ;Create a symbol for the working device driver too
   281 00000705 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   282 0000070D ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   283 00000715 ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   284                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   285                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   286 0000071D ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   287 00000725 ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   288 0000072D ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   289 00000735 ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   290 00000737 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   291 00000739 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   292                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   293                              <1> ; and 32 byte offset into the sector for directory
   294 00000741 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   295                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   296                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   297 00000749 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   298                              <1> ;***************************************************|
   299                              <1> ; Needs to be set up before any file access         |
   300                              <1> ; These vars keep track of file access properties   |
   301                              <1> ;   and must be used only for such purposes.        |
   302                              <1> ;***************************************************|
   303 0000074B ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   304 0000074F ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   305                              <1> 
   306 00000753 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   307 00000757 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   308 00000758 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   309                              <1> 
   310 00000760 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   311 00000762 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   312                              <1> ;***************************************************|
   313 00000766 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   314 0000076A ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   315 0000076E ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   316 0000076F ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   317 00000773 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   318 00000777 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   319                              <1> ;Directory stuff
   320 0000077B ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   321 0000077F ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   322 00000783 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   323 00000785 ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   324                              <1> ;Error DPB 
   325 00000789 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   326 00000791 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   327                              <1>     
   328 00000792 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   329 000007BD <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   330                              <1> ;Stacks and scratch SFT
   331 000007DD ??????              <1>     alignb  8
   332 000007E0 <res 528h>          <1>     critStack   resq 165
   333 00000D08 ????????????????    <1>     critStakTop resq 1
   334                              <1> 
   335 00000D10 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   336                              <1>     
   337 00000D5F ??                  <1>     alignb  8
   338 00000D60 <res 638h>          <1>     AuxStack    resq 199
   339 00001398 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   340 000013A0 <res 638h>          <1>     DiskStack   resq 199
   341 000019D8 ????????????????    <1>     DiskStakTop resq 1
   342                              <1> 
   343 000019E0 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   344 000019E1 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   345                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   346 000019E2 <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   347 00001A52 <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   348                              <1> ;Exception handler vars in SDA now 
   349 00001A7A <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   350 00001A8A ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   351                              <1>     sdaLen      equ     $ - sda 
   352                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   353                              <1> 
   354                              <1> ;Additional variables NOT in the SDA
   355 00001A8B ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   356 00001A93 ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   357 00001A94 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   358                              <1>     ;for saving the current header when quickly doing a second request
   359                              <1> 
   360 00001ABE ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   361 00001ABF ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   362                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   363                              <1> inExtASCII:
   364 00001AC1 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   365 00001AC2 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   366                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   367                              <1>     ; copy of the date/time record
   368                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   369                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   370                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   371                              <1>     ; to the read IDT routine".
   372                              <1>     dosIdtPtr:          ;41h/25h will always read a new copy of IDT here
   373 00001AC4 ????                <1>         .limit  dw ?
   374 00001AC6 ????????????????    <1>         .base   dq ?
   375                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   376                              <1>     ; stack. In Int 4Fh, this could overwrite user data if the functions
   377                              <1>     ; were allowed to write to original callers register stack. 
   378                              <1>     ; So we have this structure below that is used by these functions to 
   379                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   380                              <1>     ; through the multiplexer we never will read this structure. 
   381                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   382 00001ACE <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
   383                              <1>     dSegLen     equ     $
    20                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    21                                  %define currSegVBase section.resSeg.vstart
    22                                  %include "./src/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5 00000000 00                  <1> dosMajor    db 00h      ;Version 0
     6 00000001 60                  <1> dosMinor    db 96       ;.96
     7 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
     7 0000000B 535953              <1>
     8 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
     8 00000017 535953              <1>
     9                              <1> ;-----------------------------------:
    10                              <1> ;        Static Data Tables         :
    11                              <1> ;-----------------------------------:
    12                              <1> ;IO Char table
    13                              <1> ;This table has Request header length, command code and error flags
    14                              <1> ; as a packed DWORD entry
    15                              <1> ioRqCmdErrTbl:
    16                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    17                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    18 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    19 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    20 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    21 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    22 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    23 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    28                              <1> ; wish to install their own custom logic.
    29 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    30 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    31 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    32                              <1> ;Extended ASCII keys with special meanings
    33 0000003C 3B                  <1> extKeyTbl   db eF1
    34 0000003D EB27                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    35 0000003F 3C                  <1>             db eF2
    36 00000040 DD27                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    37 00000042 3D                  <1>             db eF3
    38 00000043 E427                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    39 00000045 3E                  <1>             db eF4
    40 00000046 1928                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    41 00000048 3F                  <1>             db eF5
    42 00000049 5E28                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    43 0000004B 40                  <1>             db eF6
    44 0000004C 7428                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    45 0000004E 41                  <1>             db eF7
    46 0000004F 7B28                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    47 00000051 4B                  <1>             db eCursL
    48 00000052 4227                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    49 00000054 4D                  <1>             db eCursR
    50 00000055 EB27                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    51 00000057 52                  <1>             db eIns
    52 00000058 8628                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    53 0000005A 53                  <1>             db eDel
    54 0000005B 8D28                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    55                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    56                              <1> 
    57                              <1> ;When counting the number of days, first compute the number of years since
    58                              <1> ; 1980 and your year. 
    59                              <1> ;Then, using the table below, find the number of leap years between 1980
    60                              <1> ; and (YourYear - 1). 
    61                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    62                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    63                              <1> ;
    64                              <1> ;Use the months table to get the number of days in a normal month as leap 
    65                              <1> ; years are added using the previous comment.
    66                              <1> 
    67                              <1> ;This table is the number of days in the month
    68                              <1> ;The function which updates the days in Feb writes the number to this table
    69                              <1> monthsTbl:  
    70 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    70 00000066 1F1E1F              <1>
    71                              <1> 
    72                              <1> ;Error tables
    73                              <1> errXlatTbl:
    74                              <1> ;Each entry is n bytes long, defined as
    75                              <1> ; Byte 0      : DOS function number for which translation will occur
    76                              <1> ; Byte 1      : Length of the table entry - 2
    77                              <1> ; Bytes n - 3 : Acceptable Error codes
    78                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
    79                              <1> ;The table is terminated with a single -1 byte
    80                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
    81                              <1> ; only on entry to a disk function
    82 00000069 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
    83 0000006D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
    84 00000072 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
    85 00000078 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
    86 0000007C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
    87 00000082 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
    88 00000089 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
    89 0000008C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
    90 00000090 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
    91 00000094 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
    92 00000099 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
    93 0000009D 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
    94 000000A3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
    95 000000AA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
    96 000000AE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
    97 000000B2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
    98 000000B5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
    99 000000B9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   100 000000BD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   101 000000C2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   102 000000CA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   103 000000CC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   104 000000D1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   105 000000D4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   106 000000DA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   107 000000DE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   108 000000E1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   109 000000E7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   110 000000EE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   111 000000F4 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   112 000000F8 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   113 000000FC 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   114 00000101 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   115 00000104 FF                  <1>     db -1   ;End Of Table marker
   116                              <1> 
   117                              <1> 
   118                              <1> extErrTbl:
   119                              <1> ;This table contains the default values for how to respond
   120                              <1> ; to particular errors. Fields with -1 need to be filled in before
   121                              <1> ; setting variables using this table.
   122                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   123                              <1> ; Byte 0: Extended Error Code as a byte
   124                              <1> ; Byte 1: Error Class
   125                              <1> ; Byte 2: Error Suggested Action
   126                              <1> ; Byte 3: Error Locus
   127                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   128                              <1> ;
   129                              <1> ;Error 01: Invalid function number
   130 00000105 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   131                              <1> ;Error 02: File not found
   132 00000109 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   133                              <1> ;Error 03: Path not found
   134 0000010D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   135                              <1> ;Error 04: Too many open handles, and no handles are left
   136 00000111 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   137                              <1> ;Error 05: Access being denied
   138 00000115 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   139                              <1> ;Error 06: Invalid File handle being provided
   140 00000119 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   141                              <1> ;Error 07: MCB chain destroyed
   142 0000011D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   143                              <1> ;Error 08: No Memory remaining
   144 00000121 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   145                              <1> ;Error 09: Invalid MCB block Address
   146 00000125 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   147                              <1> ;Error 0A: Bad Environment block
   148 00000129 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   149                              <1> ;Error 0B: Data provided in a bad format
   150 0000012D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   151                              <1> ;Error 0C: Access Code Invalid
   152 00000131 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   153                              <1> ;Error 0D: Error due to Invalid Data provided
   154 00000135 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   155                              <1> ;Error 0F: Error due to a bad drive letter being provided
   156 00000139 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   157                              <1> ;Error 10: Error due to attempting to delete the CWD
   158 0000013D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   159                              <1> ;Error 11: Error due to a unknown device being used
   160 00000141 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   161                              <1> ;Error 12: No more file handles available
   162 00000145 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   163                              <1> ;Error 50: Network request not supported
   164 00000149 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   165                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   166 0000014D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   167                              <1> ;Error 21: File Locking Violation
   168 00000151 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   169                              <1> ;Error 54: Too many levels of redirection error
   170 00000155 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   171                              <1> ;Error 56: Bad resource password provided
   172 00000159 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   173                              <1> ;Error 52: Directory already exists
   174 0000015D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   175                              <1> ;Error 32: Network request not supported by DOS
   176 00000161 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   177                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   178 00000165 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   179                              <1> ;Error 57: Bad parameter in request
   180 00000169 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   181                              <1> ;Error 53: Fail was returned from Int 44h
   182 0000016D 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   183                              <1> ;Error 24: Sharing Buffer Full
   184 00000171 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   185 00000175 FFFFFFFF            <1>     dd -1   ;End of table signature
   186                              <1> 
   187                              <1> ;Nationalisation stuff
   188                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   189 00000179 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   190 00000181 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   190 0000018A 535953000000000000- <1>
   190 00000193 000000000000000000- <1>
   190 0000019C 000000000000000000- <1>
   190 000001A5 000000000000000000- <1>
   190 000001AE 000000000000000000- <1>
   190 000001B7 000000000000000000- <1>
   190 000001C0 00                  <1>
   191 000001C1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   192 000001C3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   193                              <1> charTableArray: ;All the qwords need fixing up here
   194                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   195 000001C5 02                  <1>     db 2
   196 000001C6 [1602000000000000]  <1>     dq ucTblExt
   197                              <1> .filenameUCTable:
   198 000001CE 04                  <1>     db 4
   199 000001CF [9802000000000000]  <1>     dq fileUCTblExt
   200                              <1> .filenameTerminatingTable:
   201 000001D7 05                  <1>     db 5
   202 000001D8 [1A03000000000000]  <1>     dq fileTermTblExt
   203                              <1> .collatingTable:
   204 000001E0 06                  <1>     db 6
   205 000001E1 [4A03000000000000]  <1>     dq collTblExt
   206                              <1> ;Extended country table
   207                              <1> extCtryTbl:
   208 000001E9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   209                              <1>     ;Below: Length of structure (not including this word and above byte)
   210 000001EA 2A00                <1>     dw extCtryTblL
   211                              <1> .countryCode:
   212 000001EC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   213                              <1> .activeCP:
   214 000001EE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   215                              <1> ;Regular country table
   216                              <1> ctryTbl:
   217                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   218 000001F0 0100                <1>     dw 1    ;Date format, UK style
   219 000001F2 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   220 000001F7 2C00                <1>     db ",",0    ;Thousand separator
   221 000001F9 2E00                <1>     db ".",0    ;Decimal separator
   222 000001FB 2D00                <1>     db "-",0    ;Date separator
   223 000001FD 3A00                <1>     db ":",0    ;Time separator
   224 000001FF 00                  <1>     db 0        ;Currency format, symbol leads with no space
   225 00000200 02                  <1>     db 2        ;Number of digits after decimal point
   226 00000201 00                  <1>     db 0        ;Time format, 12hr clock
   227 00000202 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   228 0000020A 2C00                <1>     db ",",0    ;Data list separator
   229 0000020C 000000000000000000- <1>     db 10 dup (0)
   229 00000215 00                  <1>
   230                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   231                              <1> 
   232                              <1> ucTblExt:   ;External pointer to the uppercase table
   233 00000216 8000                <1>     dw 80h
   234                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   235 00000218 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   236 00000220 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   237 00000228 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   238 00000230 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   239 00000238 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   240 00000240 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   241 00000248 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   242 00000250 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   243 00000258 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   244 00000260 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   245 00000268 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   246 00000270 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   247 00000278 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   248 00000280 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   249 00000288 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   250 00000290 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   251                              <1> 
   252                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   253 00000298 8000                <1>     dw 80h
   254                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   255 0000029A 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   256 000002A2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   257 000002AA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   258 000002B2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   259 000002BA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   260 000002C2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   261 000002CA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   262 000002D2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   263 000002DA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   264 000002E2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   265 000002EA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   266 000002F2 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   267 000002FA E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   268 00000302 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   269 0000030A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   270 00000312 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   271                              <1> 
   272                              <1> fileTermTblExt:
   273 0000031A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   274 0000031C 01                  <1>     db 1    ;Signature byte for the table (1)
   275 0000031D 00                  <1>     db 0    ;Lowest permissible char value for filename
   276 0000031E FF                  <1>     db -1   ;Highest permissible char value for filename
   277 0000031F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   278                              <1> .startBadRange:
   279 00000320 00                  <1>     db 0    ;Start of the illegal range of filename chars
   280                              <1> .endBadRange:
   281 00000321 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   282 00000322 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   283                              <1> fileTermTbl:
   284 00000323 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   285 00000324 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   286 0000032A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   287                              <1>     fileTermTbl_len equ $ - fileTermTbl
   288                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   289                              <1>     ;Buffer space
   290 00000332 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   290 0000033B 000000000000000000- <1>
   290 00000344 000000000000        <1>
   291                              <1> 
   292                              <1> collTblExt:  ;Collating sequence table, for sorting
   293 0000034A 0001                <1>     dw 0100h
   294                              <1> collTbl:
   295 0000034C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   296 00000354 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   297 0000035C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   298 00000364 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   299 0000036C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   300 00000374 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   301 0000037C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   302 00000384 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   303 0000038C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   304 00000394 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   305 0000039C 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   306 000003A4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   307 000003AC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   308 000003B4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   309 000003BC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   310 000003C4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   311 000003CC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   312 000003D4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   313 000003DC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   314 000003E4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   315 000003EC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   316 000003F4 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   317 000003FC B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   318 00000404 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   319 0000040C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   320 00000414 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   321 0000041C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   322 00000424 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   323 0000042C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   324 00000434 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   325 0000043C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   326 00000444 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   327                              <1> 
   328                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   329                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   330                              <1> ;Bit[1]=Clear if the char of a terminating type.
   331                              <1> ;Bit[2]=Clear if the char is of space/tab type.
   332                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   333                              <1> ;Bit[4-7]=Unused.    
   334                              <1> 
   335 0000044C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   336 00000454 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   337 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   338 00000464 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   339 0000046C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   340 00000474 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   341 0000047C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   342 00000484 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   343 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   344 00000494 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   345 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   346 000004A4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   347 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   348 000004B4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   349 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   350 000004C4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   351 000004CC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   351 000004D5 FFFFFFFFFFFFFFFFFF- <1>
   351 000004DE FFFFFFFFFFFFFFFFFF- <1>
   351 000004E7 FFFFFFFFFFFFFFFFFF- <1>
   351 000004F0 FFFFFFFFFFFFFFFFFF- <1>
   351 000004F9 FFFFFFFFFFFFFFFFFF- <1>
   351 00000502 FFFFFFFFFFFFFFFFFF- <1>
   351 0000050B FFFFFFFFFFFFFFFFFF- <1>
   351 00000514 FFFFFFFFFFFFFFFFFF- <1>
   351 0000051D FFFFFFFFFFFFFFFFFF- <1>
   351 00000526 FFFFFFFFFFFFFFFFFF- <1>
   351 0000052F FFFFFFFFFFFFFFFFFF- <1>
   351 00000538 FFFFFFFFFFFFFFFFFF- <1>
   351 00000541 FFFFFFFFFFFFFFFFFF- <1>
   351 0000054A FFFF                <1>
   352                              <1> 
   353                              <1> ;!!!NOTE!!!:
   354                              <1> ;This table is being commented out, and checkCharValid has been replaced
   355                              <1> ; with a version using the codepage table now, properly.
   356                              <1> ;This is being left commented in FOR NOW, in case of any instabilities.
   357                              <1> ;Should not be the case ever
   358                              <1> ;!!!NOTE!!!:
   359                              <1> ;badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   360                              <1> ;    db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   361                              <1> ;    db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   362                              <1> ;    db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   363                              <1> ;badDirNameCharL equ $ - badDirNameChar
   364                              <1> ;The chars * ? . \ / need to always be handled separately
   365                              <1> 
   366                              <1> 
   367                              <1> hardErrorStack:
   368 0000054C 13                  <1>     db errWpd
   369 0000054D 0B                  <1>     db eClsMedia
   370 0000054E 07                  <1>     db eActRetUsr
   371 0000054F 02                  <1>     db eLocDsk
    23                                  %include "./src/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 00000550 EE51                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 00000552 B31C                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000554 C01C                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000556 941D                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000558 BD1D                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 0000055A C51D                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 0000055C DD1D                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000055E 101E                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 00000560 351E                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 00000562 941E                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000564 4721                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000566 A31E                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000568 AF1E                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 0000056A F36C                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 0000056C 256D                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000056E 1129                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 00000570 1129                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 00000572 8626                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000574 3F27                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000576 C627                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000578 1129                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 0000057A 1129                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 0000057C E828                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000057E F527                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 00000580 A76F                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 00000582 3E6D                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000584 B328                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000586 456D                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000588 476D                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 0000058A A76F                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 0000058C A76F                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000058E DD6D                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 00000590 A76F                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 00000592 1129                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 00000594 1129                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 00000596 6028                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 00000598 1129                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 0000059A 906D                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 0000059C F350                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 0000059E 1129                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005A0 1129                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005A2 D928                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005A4 C023                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005A6 E723                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005A8 ED23                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005AA 0E24                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005AC BA6D                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005AE C628                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005B0 C86D                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005B2 C051                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005B4 DF6D                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005B6 396C                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005B8 176E                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005BA 286E                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005BC 376E                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005BE 725A                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005C0 9B5A                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005C2 9513                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005C4 C515                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005C6 9E17                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005C8 062B                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005CA 172B                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005CC 412C                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005CE 802C                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005D0 BB2C                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005D2 C72C                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005D4 2C2D                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005D6 9B2D                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005D8 4546                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005DA B32E                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005DC EE2E                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005DE 6618                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005E0 8B4B                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005E2 8F4D                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005E4 974E                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005E6 3A53                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005E8 F051                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005EA 7B6E                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005EC 032F                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005EE 6E2F                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005F0 676C                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005F2 706C                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 000005F4 896E                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 000005F6 9A6E                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 000005F8 786F                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 000005FA E050                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 000005FC 9E2F                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 000005FE 2A30                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 00000600 3F50                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 00000602 7F6F                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000604 7230                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000606 3A31                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000608 4E31                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 0000060A A86F                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 0000060C 6C71                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000060E D271                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 00000610 E118                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 00000612 8A6C                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000614 796C                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000616 A76F                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000618 826C                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 0000061A 335B                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 0000061C F75B                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000061E BA31                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 00000620 F732                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 00000622 2E                  <1>     db mDispTblL/2  ;Number of entries in table
   114 00000623 B271                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000625 1C3B                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000627 A765                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000629 B571                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 0000062B EF66                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 0000062D F01B                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000062F 4D5C                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 00000631 7400                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 00000633 0445                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000635 A600                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000637 E472                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000639 6C72                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 0000063B DE37                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 0000063D A125                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000063F B400                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 00000641 CE00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 00000643 DC00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000645 4B67                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000647 2D67                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000649 FB66                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 0000064B 9168                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 0000064D EF00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   136 0000064F 1C44                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 00000651 BD66                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 00000653 D565                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000655 6266                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000657 0C0C                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000659 3425                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 0000065B D56E                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   143 0000065D D56E                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   144 0000065F 6467                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 00000661 1366                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 00000663 5144                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000665 0518                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000667 016B                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000669 3012                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 0000066B 4972                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 0000066D 2267                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000066F BD71                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 00000671 6F2B                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 00000673 C571                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000675 AE2B                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000677 D56E                <1>     dw noOp - mDispTbl          ;AX=122Ah, Noop, Set FASTOPEN EP (reserved)
   158 00000679 E771                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 0000067B C268                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 0000067D CD68                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161                              <1> mDispTblL   equ     $ - mDispTbl
   162                              <1> 
   163                              <1> serverDispTbl:  ;Server Dispatch functions
   164 0000067F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   165 00000680 C06E                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   166 00000682 126F                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   167 00000684 6B6F                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   168 00000686 7C6F                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   169 00000688 846F                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   170 0000068A 8C6F                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   171 0000068C A76F                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   172 0000068E D16F                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   173 00000690 D16F                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   174 00000692 D16F                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   175 00000694 DE6F                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   176                              <1> serverDispTblL   equ     $ - serverDispTbl
    24                                  %if DEBUG
    25                                  %include "./src/Debug/debug.asm"
    26                                  %endif
    27                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 00000696 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 0000069D 7428                <1>     je .exit
    13 0000069F 56                  <1>     push rsi
    14 000006A0 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006A7 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006AA 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006AC 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006AF EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006B1 57                  <1>     push rdi
    22 000006B2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006B5 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006B8 5F                  <1>     pop rdi ;Get original buf back
    25 000006B9 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006BC 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006C3 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006C6 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 000006C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    33                              <1> ;1 External reference
    34                              <1> ;Input: rdi = Buffer header to flush and free
    35 000006C8 E844000000          <1>     call flushBuffer
    36 000006CD 7206                <1>     jc .exit
    37                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    38 000006CF 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    39                              <1> .exit:
    40                              <1>     return
    13                              <2> %%_ret:
    14 000006D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    43                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    44                              <1> ;Output: rdi = First disk buffer
    45 000006D6 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    46 000006DD 57                  <1>     push rdi
    47                              <1> .lp:
    48 000006DE 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    49 000006E2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    50 000006E5 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    51 000006EC 75F0                <1>     jne .lp
    52 000006EE 5F                  <1>     pop rdi
    53                              <1>     return
    13                              <2> %%_ret:
    14 000006EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    56                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    57                              <1> ; second buffer in the chain in rdi
    58                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    59                              <1> ;Output: rdi = Second buffer in the chain
    60 000006F0 52                  <1>     push rdx
    61 000006F1 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    62 000006F4 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    63 000006F9 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    64 000006FC 5A                  <1>     pop rdx
    65                              <1>     return
    13                              <2> %%_ret:
    14 000006FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    68                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    69                              <1> ;Input: rdi = Buffer header to start searching at
    70                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    71                              <1> ;        ZF=ZE => No unreferenced buffer found
    72 000006FE F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    73 00000702 750C                <1>     jnz .exit
    74 00000704 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    75 00000707 4881FFFFFFFFFF      <1>     cmp rdi, -1
    76 0000070E 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    77                              <1> .exit:
    78                              <1>     return
    13                              <2> %%_ret:
    14 00000710 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    81                              <1> ;Flushes the data in a sector buffer to disk!
    82                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    83                              <1> ;Exit:  CF=NC : Success
    84                              <1> ;       CF=CY : Fail, terminate the request
    85                              <1> ;First make request to device driver
    86 00000711 50                  <1>     push rax
    87 00000712 53                  <1>     push rbx
    88 00000713 51                  <1>     push rcx
    89 00000714 52                  <1>     push rdx
    90 00000715 56                  <1>     push rsi
    91 00000716 55                  <1>     push rbp
    92                              <1> ;If the buffer is freed, skip flushing to avoid issues
    93 00000717 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
    94 0000071B 7454                <1>     je .fbFreeExit  ;If it is free exit
    95 0000071D F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
    96 00000721 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
    97                              <1> .fbRequest0:
    98 00000723 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    99 00000728 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   100 0000072C 7406                <1>     jz .fbRequest1
   101 0000072E 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   102                              <1> .fbRequest1:
   103 00000734 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   104 00000737 B901000000          <1>     mov ecx, 1  ;One sector to copy
   105 0000073C 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   106 00000740 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   107 00000744 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   108 00000748 E828630000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   109 0000074D E8BB610000          <1>     call absDiskDriverCall    ;Make Driver Request
   110 00000752 7525                <1>     jnz .fbFail
   111                              <1> ;Now check if the buffer was a FAT, to write additional copies
   112 00000754 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   113 00000758 7417                <1>     jz .fbFreeExit  ;If not, exit
   114 0000075A FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   115 0000075D 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   116 0000075F 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   117 00000762 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   118 00000766 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   119                              <1> .fbFreeExit1:
   120 0000076B 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   121 0000076E 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   122                              <1> .fbFreeExit:
   123 00000771 F8                  <1>     clc
   124                              <1> .fbExitFail:
   125 00000772 5D                  <1>     pop rbp
   126 00000773 5E                  <1>     pop rsi
   127 00000774 5A                  <1>     pop rdx
   128 00000775 59                  <1>     pop rcx
   129 00000776 5B                  <1>     pop rbx
   130 00000777 58                  <1>     pop rax
   131                              <1>     return
    13                              <2> %%_ret:
    14 00000778 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   132                              <1> .fbFail:
   133                              <1> ;Enter here only if the request failed
   134 00000779 FFCE                <1>     dec esi
   135 0000077B 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   136                              <1> ;Request failed thrice, critical error call
   137 0000077D C605(67040000)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   138 00000784 E87D5A0000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   139 00000789 3C01                <1>     cmp al, critRetry
   140 0000078B 7496                <1>     je .fbRequest0
   141                              <1>     ;Else we fail (Ignore=Fail here)
   142 0000078D F9                  <1>     stc ;Set error flag to indicate fail
   143 0000078E E9DFFFFFFF          <1>     jmp .fbExitFail
   144                              <1> 
   145                              <1> testDirtyBufferForDrive:    ;External linkage
   146                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   147                              <1> ;Input: al = Drive number (0 based)
   148                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   149                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   150 00000793 53                  <1>     push rbx
   151 00000794 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   152                              <1> .tdbfdCheckBuffer:
   153 0000079B 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   154 0000079E 7509                <1>     jne .tdbfdGotoNextBuffer
   155 000007A0 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   156 000007A4 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   157 000007A6 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   158                              <1> .tdbfdExit:
   159 000007A7 5B                  <1>     pop rbx
   160                              <1>     return
    13                              <2> %%_ret:
    14 000007A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   161                              <1> .tdbfdGotoNextBuffer:
   162 000007A9 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   163 000007AC 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   164 000007B3 74F2                <1>     je .tdbfdExit
   165 000007B5 EBE4                <1>     jmp short .tdbfdCheckBuffer
   166                              <1> 
   167                              <1> 
   168                              <1> cancelWriteThroughBuffers:  ;External linkage
   169                              <1> ; Frees all buffers for the workingDPB
   170                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   171                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   172                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   173                              <1> ; to have a drive number of -1, thus freeing it
   174                              <1> ;Given DPB is in rbp
   175 000007B7 53                  <1>     push rbx
   176 000007B8 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   177                              <1> .i0:
   178 000007BF 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   179 000007C3 7506                <1>     jne .i1 ;If no, skip freeing
   180 000007C5 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   181                              <1> .i1:
   182 000007CB 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   183 000007CE 4881FBFFFFFFFF      <1>     cmp rbx, -1
   184 000007D5 75E8                <1>     jne .i0
   185                              <1> .exit:
   186 000007D7 5B                  <1>     pop rbx
   187                              <1>     return
    13                              <2> %%_ret:
    14 000007D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> 
   189                              <1> ;******* NEW BUFFER HANDLING *******
   190                              <1> writeThroughBuffer: ;External linkage
   191                              <1> ; Flushes the current disk buffer to disk.
   192                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   193                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return 
   194 000007D9 57                  <1>     push rdi
   195 000007DA 488B3D(39070000)    <1>     mov rdi, qword [currBuff]
   196 000007E1 E82BFFFFFF          <1>     call flushBuffer
   197 000007E6 7204                <1>     jc short .exit
   198 000007E8 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   199                              <1> .exit:
   200 000007EC 5F                  <1>     pop rdi
   201                              <1>     return
    13                              <2> %%_ret:
    14 000007ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> ;******* NEW BUFFER HANDLING *******
   203                              <1> 
   204                              <1> writeThroughBuffers:    ;External linkage
   205                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   206                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   207                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   208 000007EE 50                  <1>     push rax
   209 000007EF 57                  <1>     push rdi
   210 000007F0 488B05(05070000)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   211 000007F7 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   212                              <1> .mainLp:
   213 000007FE 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   214 00000805 7416                <1>     je .exit   
   215 00000807 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   216 0000080B 750B                <1>     jne .nextBuffer
   217 0000080D E8FFFEFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   218 00000812 7209                <1>     jc .exit  ;If something went wrong, exit
   219 00000814 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   220                              <1> .nextBuffer:
   221 00000818 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   222 0000081B EBE1                <1>     jmp short .mainLp
   223                              <1> .exit:
   224 0000081D 5F                  <1>     pop rdi
   225 0000081E 58                  <1>     pop rax
   226                              <1>     return
    13                              <2> %%_ret:
    14 0000081F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> markBufferDirty:
   229 00000820 55                  <1>     push rbp
   230 00000821 9C                  <1>     pushfq
   231 00000822 488B2D(39070000)    <1>     mov rbp, qword [currBuff]
   232 00000829 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   233 0000082D 9D                  <1>     popfq
   234 0000082E 5D                  <1>     pop rbp
   235                              <1>     return
    13                              <2> %%_ret:
    14 0000082F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> 
   237                              <1> 
   238                              <1> getBuffer: ;Internal Linkage ONLY
   239                              <1> ;
   240                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   241                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   242                              <1> ;Flushes if not in disk change mode. 
   243                              <1> ;If in disk change mode, will check to see if the selected buffer 
   244                              <1> ; has data referring a device using the same DPB as we are changing.
   245                              <1> ; If it is, skip flushing, if not, flush first!
   246                              <1> ;
   247                              <1> ;This function will return a pointer to the desired data sector OR 
   248                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   249                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   250                              <1> ;Entry: rax = Sector to read
   251                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   252                              <1> ;       rsi = DPB to use for transaction
   253                              <1> ;Exit:  CF=NC => 
   254                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   255                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   256 00000830 51                  <1>     push rcx
   257 00000831 52                  <1>     push rdx
   258 00000832 56                  <1>     push rsi
   259 00000833 57                  <1>     push rdi
   260 00000834 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   261 00000836 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   262 0000083B 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   263 00000842 7418                <1>     je .rbReadNewSector
   264 00000844 48893D(39070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   265 0000084B 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   266                              <1> .rbExit:
   267 0000084F F8                  <1>     clc
   268                              <1> .rbExitNoFlag:
   269 00000850 5F                  <1>     pop rdi
   270 00000851 5E                  <1>     pop rsi
   271 00000852 5A                  <1>     pop rdx
   272 00000853 59                  <1>     pop rcx
   273 00000854 488B1D(39070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   274                              <1>     return
    13                              <2> %%_ret:
    14 0000085B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> .rbReadNewSector:
   276 0000085C E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   277 00000861 803D(E0190000)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   278 00000868 7506                <1>     jne .flush  ;We are not, flush buffer
   279 0000086A 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   280 0000086E 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   281                              <1> .flush:
   282 00000870 E853FEFFFF          <1>     call flushAndFreeBuffer
   283 00000875 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   284                              <1> .skipFlush:
   285                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   286                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   287                              <1>     ; is no longer owned by that File so we mark the owner as none
   288 00000877 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   289 0000087F 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   290 00000882 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   291 00000885 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   292 00000889 80F902              <1>     cmp cl, fatBuffer
   293 0000088C B201                <1>     mov dl, 1   ;Default values if not fat buffer
   294 0000088E 7503                <1>     jne .rbNonFATbuffer
   295 00000890 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   296                              <1> .rbNonFATbuffer:
   297 00000893 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   298 00000896 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   299 00000899 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   300 0000089C 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   301 000008A0 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   302 000008A4 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   303 000008A9 72A5                <1>     jc .rbExitNoFlag
   304 000008AB EBA2                <1>     jmp short .rbExit
   305                              <1> 
   306                              <1> readSectorBuffer:   ;Internal Linkage
   307                              <1> ;Reads a sector into a built sector buffer
   308                              <1> ;Entry: rdi = Pointer to buffer header
   309                              <1> ;Exit:  CF=NC : Success
   310                              <1> ;       CF=CY : Fail, terminate the request
   311                              <1> ;       rbx pointing to buffer header
   312                              <1> ;First make request to device driver
   313 000008AD 50                  <1>     push rax
   314 000008AE 53                  <1>     push rbx
   315 000008AF 51                  <1>     push rcx
   316 000008B0 52                  <1>     push rdx
   317 000008B1 56                  <1>     push rsi
   318 000008B2 55                  <1>     push rbp
   319                              <1> .rsRequest0:
   320 000008B3 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   321 000008B8 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   322 000008BC 7406                <1>     jz .rsRequest1
   323 000008BE 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   324                              <1> .rsRequest1:
   325 000008C4 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   326 000008C7 B901000000          <1>     mov ecx, 1  ;One sector to copy
   327 000008CC 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   328 000008D0 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   329 000008D4 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   330 000008D8 E8A3610000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   331 000008DD E82B600000          <1>     call absDiskDriverCall    ;Make Driver Request
   332 000008E2 7508                <1>     jnz .rsFail
   333                              <1> .rsExit:
   334 000008E4 F8                  <1>     clc
   335                              <1> .rsExitFail:
   336 000008E5 5D                  <1>     pop rbp
   337 000008E6 5E                  <1>     pop rsi
   338 000008E7 5A                  <1>     pop rdx
   339 000008E8 59                  <1>     pop rcx
   340 000008E9 5B                  <1>     pop rbx
   341 000008EA 58                  <1>     pop rax
   342                              <1>     return
    13                              <2> %%_ret:
    14 000008EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> .rsFail:
   344                              <1> ;Enter here only if the request failed
   345 000008EC FFCE                <1>     dec esi
   346 000008EE 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   347                              <1> ;Request failed thrice, critical error call
   348                              <1> ;First free the buffer if we failed to read data into it 
   349 000008F0 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   350 000008F4 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   351 000008FA C605(67040000)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   352 00000901 E800590000          <1>     call diskDevErr
   353 00000906 3C01                <1>     cmp al, critRetry
   354 00000908 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   355 0000090A 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   356 0000090E EBA3                <1>     jmp short .rsRequest0
   357                              <1> .fail:
   358 00000910 F9                  <1>     stc ;Set error flag to indicate fail
   359 00000911 E9CFFFFFFF          <1>     jmp .rsExitFail
   360                              <1>     
   361                              <1> findLRUBuffer: ;Internal Linkage
   362                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   363                              <1> ; in rbx and the currBuff variable
   364                              <1> ;Input: Nothing
   365                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   366                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   367 00000916 52                  <1>     push rdx
   368 00000917 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   369 0000091E 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   370 00000922 7436                <1>     je .flbExit 
   371 00000924 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   372 0000092B 742D                <1>     je .flbExit
   373                              <1> .flbWalk:
   374 0000092D 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   375 00000930 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   376 00000933 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   377 00000937 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   378 00000939 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   379 00000940 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   380 00000942 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   381                              <1> .flbHeadLink:
   382 00000949 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   383 00000950 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   384 00000957 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   385                              <1> .flbExit:
   386 0000095A 5A                  <1>     pop rdx
   387 0000095B 48893D(39070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   388                              <1>     return
    13                              <2> %%_ret:
    14 00000962 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .flbFreeLink:
   390 00000963 51                  <1>     push rcx
   391 00000964 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   392 00000967 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   393 0000096A 59                  <1>     pop rcx
   394 0000096B EBDC                <1>     jmp short .flbHeadLink
   395                              <1> 
   396                              <1> findSectorInBuffer:     ;Internal linkage
   397                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   398                              <1> ;If the sector is not in a buffer, returns with a -1
   399                              <1> ;Input: rax = Sector number
   400                              <1> ;       dl = Drive number
   401                              <1> ;Output: rdi = Buffer hdr pointer or -1
   402 0000096D 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   403                              <1> .fsiCheckBuffer:
   404 00000974 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   405 00000977 7507                <1>     jne .fsiGotoNextBuffer
   406 00000979 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   407 0000097D 7501                <1>     jne .fsiGotoNextBuffer
   408                              <1> .fsiExit:
   409                              <1>     return
    13                              <2> %%_ret:
    14 0000097F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .fsiGotoNextBuffer:
   411 00000980 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 00000983 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 0000098A 74F3                <1>     je .fsiExit
   414 0000098C EBE6                <1>     jmp short .fsiCheckBuffer
   415                              <1> 
   416                              <1> ;-----------------------------------------------------------------------------
   417                              <1> ;SPECIAL BUFFER FUNCTIONS
   418                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   419                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   420                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   421                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   422                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   423                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   424                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   425                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   426                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   427                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   428                              <1> ;-----------------------------------------------------------------------------
   429                              <1> getBufForDataNoFile:
   430                              <1> ;Returns a buffer to use for disk data in rbx
   431                              <1> ;Requires a File Handle.
   432                              <1> ;Input: [workingDPB] = DPB to transact on
   433                              <1> ;       rax = Sector to transfer
   434                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   435 0000098E 51                  <1>     push rcx
   436 0000098F B108                <1>     mov cl, dataBuffer
   437 00000991 56                  <1>     push rsi
   438 00000992 57                  <1>     push rdi
   439 00000993 488B35(05070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   440 0000099A E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   441 0000099F 725F                <1>     jc getBufCommon.exit
   442 000009A1 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   443 000009A9 EB55                <1>     jmp short getBufCommon.exit
   444                              <1> getBufForDirNoFile:
   445                              <1> ;Returns a buffer to use for disk dir data in rbx
   446                              <1> ;Requires a File Handle.
   447                              <1> ;Input: [workingDPB] = DPB to transact on
   448                              <1> ;       rax = Sector to transfer
   449                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   450 000009AB 51                  <1>     push rcx
   451 000009AC B104                <1>     mov cl, dirBuffer
   452 000009AE 56                  <1>     push rsi
   453 000009AF 57                  <1>     push rdi
   454 000009B0 488B35(05070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   455 000009B7 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   456 000009BC 7242                <1>     jc getBufCommon.exit
   457 000009BE 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   458 000009C6 EB38                <1>     jmp short getBufCommon.exit
   459                              <1> getBufForFat:
   460                              <1> ;Returns a buffer to use for fat data in rbx
   461                              <1> ;Input: [workingDPB] = DPB to transact on
   462                              <1> ;       rax = Sector to transfer
   463                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   464 000009C8 51                  <1>     push rcx
   465 000009C9 B102                <1>     mov cl, fatBuffer
   466 000009CB EB03                <1>     jmp short getBufCommon2
   467                              <1> getBufForDOS:
   468                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 000009CD 51                  <1>     push rcx
   473 000009CE B101                <1>     mov cl, dosBuffer
   474                              <1> getBufCommon2:
   475 000009D0 56                  <1>     push rsi
   476 000009D1 57                  <1>     push rdi    ;Push rdi to preserve it
   477 000009D2 488B35(05070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   478 000009D9 EB15                <1>     jmp short getBufCommon.makeReq
   479                              <1> getBufForDir:
   480                              <1> ;Returns a buffer to use for disk directory data in rbx
   481                              <1> ;Input: [currentSFT] = File to manipulate
   482                              <1> ;       rax = Sector to transfer
   483                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   484 000009DB 51                  <1>     push rcx
   485 000009DC B104                <1>     mov cl, dirBuffer
   486 000009DE EB03                <1>     jmp short getBufCommon
   487                              <1> getBufForData:
   488                              <1> ;Returns a buffer to use for disk data in rbx
   489                              <1> ;Requires a File Handle.
   490                              <1> ;Input: [currentSFT] = File to manipulate
   491                              <1> ;       rax = Sector to transfer
   492                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   493 000009E0 51                  <1>     push rcx
   494 000009E1 B108                <1>     mov cl, dataBuffer
   495                              <1> getBufCommon:
   496 000009E3 56                  <1>     push rsi
   497 000009E4 57                  <1>     push rdi
   498 000009E5 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
   499 000009EC 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   500                              <1> .makeReq:
   501 000009F0 E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   502 000009F5 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   503                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   504                              <1>     ; flushed to the file!
   505                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   506                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   507                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   508 000009F7 F6C103              <1>     test cl, dosBuffer | fatBuffer
   509 000009FA 7504                <1>     jnz .exit
   510 000009FC 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   511                              <1> .exit:
   512 00000A00 5F                  <1>     pop rdi
   513 00000A01 5E                  <1>     pop rsi
   514 00000A02 59                  <1>     pop rcx
   515                              <1>     return
    13                              <2> %%_ret:
    14 00000A03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> flushFile:
   518                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   519                              <1> ; FAT/DOS buffers to flush
   520                              <1> ; We flush and free, and set to head of chain before continuing to search
   521                              <1> ;Input: rdi = is the file (sft) we wish to flush
   522                              <1> ;Output: CF=NC => All ok
   523                              <1> ;        CF=CY => A sector failed, exit. 
   524 00000A04 57                  <1>     push rdi
   525 00000A05 56                  <1>     push rsi
   526                              <1>     ;First check if the file has been written to?
   527 00000A06 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   528 00000A0C 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   529 00000A0E 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   530 00000A11 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   531                              <1> .ffLoop:
   532 00000A18 4881FFFFFFFFFF      <1>     cmp rdi, -1
   533 00000A1F 741B                <1>     je .exit
   534 00000A21 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   535 00000A25 751E                <1>     jnz .found  ;Flush if either bit is set
   536 00000A27 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   537 00000A2F 7414                <1>     je .found
   538 00000A31 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   539 00000A35 740E                <1>     je .found
   540 00000A37 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   541 00000A3A EBDC                <1>     jmp short .ffLoop
   542                              <1> .exit:
   543                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   544 00000A3C 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   545                              <1> .exitNoFlush:
   546 00000A42 5E                  <1>     pop rsi
   547 00000A43 5F                  <1>     pop rdi
   548                              <1>     return
    13                              <2> %%_ret:
    14 00000A44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .found:
   550                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   551                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   552 00000A45 E87EFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   553 00000A4A 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   554                              <1>     ;If the sector has been successfully flushed, then it
   555                              <1>     ; is no longer owned by that File so we mark the owner as none
   556 00000A4C 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   557 00000A54 E897FCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   558 00000A59 EBBD                <1>     jmp short .ffLoop
    28                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A5B 53                  <1>     push rbx
     9 00000A5C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 00000A5F B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A64 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A6A 730C                <1>     jae .exit
    13 00000A6C FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A6E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A74 7302                <1>     jae .exit
    16 00000A76 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A78 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A7A 53                  <1>     push rbx
    29 00000A7B 55                  <1>     push rbp
    30 00000A7C 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A83 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000A86 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A8C 731E                <1>     jae .fat32
    34 00000A8E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A94 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A96 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A98 6801000000          <1>     push qword 1
    39 00000A9D EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A9F 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000AA1 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000AA3 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000AA5 6800000000          <1>     push qword 0
    45 00000AAA EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000AAC 6802000000          <1>     push qword 2
    48 00000AB1 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000AB4 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000AB8 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000ABA F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000ABC 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000AC0 01D8                <1>     add eax, ebx
    56 00000AC2 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000AC3 5D                  <1>     pop rbp
    58 00000AC4 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000AC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000AC6 51                  <1>     push rcx
    68 00000AC7 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000AC9 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000ACB 482D02000000        <1>     sub rax, 2
    72 00000AD1 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000AD4 48D3E0              <1>     shl rax, cl
    74 00000AD7 31C9                <1>     xor ecx, ecx
    75 00000AD9 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000ADC 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000ADF 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000AE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000AE1 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000AE4 E872FFFFFF          <1>     call getFATtype
    83 00000AE9 81F902000000        <1>     cmp ecx, 2
    84 00000AEF 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AF1 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AF3 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AF5 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000AF7 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AF8 89C3                <1>     mov ebx, eax
   100 00000AFA E8C9010000          <1>     call readFAT
   101 00000AFF 7209                <1>     jc .exit
   102 00000B01 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000B06 75F0                <1>     jne .lp
   104 00000B08 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000B0A 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000B0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000B0C 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000B0E 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000B10 51                  <1>     push rcx
   117 00000B11 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000B13 FFC1                <1>     inc ecx
   120 00000B15 E8AE010000          <1>     call readFAT
   121 00000B1A 7209                <1>     jc .exit
   122 00000B1C 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000B21 75F0                <1>     jne .lp
   124 00000B23 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000B25 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000B26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000B27 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000B29 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 00000B2B 53                  <1>     push rbx
   140 00000B2C 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000B2F 89C3                <1>     mov ebx, eax
   143 00000B31 E892010000          <1>     call readFAT
   144 00000B36 7206                <1>     jc .exit
   145 00000B38 FFC9                <1>     dec ecx
   146 00000B3A 75F3                <1>     jnz .lp
   147 00000B3C 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000B3E 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000B3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000B40 53                  <1>     push rbx
   157 00000B41 56                  <1>     push rsi
   158 00000B42 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000B47 721A                <1>     jc .exit    ;Disk read error?
   160 00000B49 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000B4E 7413                <1>     je .exit
   162 00000B50 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B55 89C3                <1>     mov ebx, eax
   164 00000B57 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 00000B5C 89D8                <1>     mov eax, ebx
   166 00000B5E E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 00000B63 5E                  <1>     pop rsi
   169 00000B64 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 00000B65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 00000B66 F8                  <1>     clc ;Always clear the flags before starting
   182 00000B67 53                  <1>     push rbx
   183 00000B68 56                  <1>     push rsi
   184 00000B69 51                  <1>     push rcx    ;Save tfr count on stack
   185 00000B6A 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 00000B6D E837000000          <1>     call findFreeCluster
   188 00000B72 722B                <1>     jc .exit
   189 00000B74 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 00000B79 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 00000B7B BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 00000B80 50                  <1>     push rax
   195 00000B81 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 00000B86 58                  <1>     pop rax
   197 00000B87 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 00000B89 E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000B8E 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000B90 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000B92 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 00000B97 7206                <1>     jc .exit
   205 00000B99 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 00000B9B FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000B9D 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000B9F 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000BA0 9C                  <1>     pushfq
   211 00000BA1 F7D9                <1>     neg ecx
   212 00000BA3 01F1                <1>     add ecx, esi
   213 00000BA5 9D                  <1>     popfq
   214 00000BA6 5E                  <1>     pop rsi
   215 00000BA7 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00000BA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 00000BA9 53                  <1>     push rbx
   224 00000BAA 52                  <1>     push rdx
   225 00000BAB 55                  <1>     push rbp
   226 00000BAC 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000BB3 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 00000BB8 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 00000BBA E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000BBF 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000BC1 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000BC3 7409                <1>     jz .exit    ;If yes, exit
   237 00000BC5 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 00000BC9 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000BCC 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000BCE 89D8                <1>     mov eax, ebx
   242 00000BD0 F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000BD1 5D                  <1>     pop rbp
   245 00000BD2 5A                  <1>     pop rdx
   246 00000BD3 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000BD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000BD5 53                  <1>     push rbx
   257 00000BD6 52                  <1>     push rdx
   258 00000BD7 55                  <1>     push rbp
   259 00000BD8 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   260 00000BDF 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000BE3 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 00000BEA B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000BEF 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000BF2 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000BF4 E8CF000000          <1>     call readFAT
   271 00000BF9 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 00000BFB 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000BFD 750C                <1>     jne .fatProceed
   274 00000BFF 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 00000C06 7413                <1>     je .fatFirst
   276 00000C08 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 00000C0B 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000C0F 39D0                <1>     cmp eax, edx
   280 00000C11 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000C13 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 00000C16 F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 00000C17 5D                  <1>     pop rbp
   286 00000C18 5A                  <1>     pop rdx
   287 00000C19 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 00000C1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 00000C1B 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000C1E 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000C25 74E4                <1>     je .fatProceed
   294 00000C27 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 00000C29 8A05(57070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 00000C2F 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 00000C32 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 00000C34 FE05(57070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 00000C3A 48FF05(58070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 00000C41 488B05(58070000)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 00000C48 F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 00000C49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 00000C4A 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 00000C50 E873000000          <1>     call readFAT
   323 00000C55 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 00000C57 3DFFFFFFFF          <1>     cmp eax, -1
   326 00000C5C 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 00000C5E 8905(4F070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 00000C64 FF05(4B070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 00000C6A E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 00000C6F 488905(58070000)    <1>     mov qword [currSectD], rax  ;Save it
   332 00000C76 C605(57070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 00000C7D EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 00000C7F 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 00000C80 56                  <1>     push rsi
   348 00000C81 E813000000          <1>     call truncateFAT    ;Preserved eax
   349 00000C86 720E                <1>     jc .exit
   350 00000C88 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 00000C8A E8DA000000          <1>     call writeFAT
   352 00000C8F 7205                <1>     jc .exit
   353 00000C91 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000C96 5E                  <1>     pop rsi
   356 00000C97 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000C98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000C99 50                  <1>     push rax
   370 00000C9A 53                  <1>     push rbx
   371 00000C9B 51                  <1>     push rcx
   372 00000C9C 56                  <1>     push rsi
   373 00000C9D 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000C9F E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000CA4 721D                <1>     jc .exit    ;Error exit
   377 00000CA6 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000CA8 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000CA9 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000CAB E8B9000000          <1>     call writeFAT
   381 00000CB0 7211                <1>     jc .exit    ;Error exit
   382 00000CB2 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000CB7 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000CBD 7404                <1>     je .exit
   385 00000CBF 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000CC1 EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000CC3 5E                  <1>     pop rsi
   389 00000CC4 59                  <1>     pop rcx
   390 00000CC5 5B                  <1>     pop rbx
   391 00000CC6 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000CC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000CC8 53                  <1>     push rbx
   401 00000CC9 51                  <1>     push rcx
   402 00000CCA 52                  <1>     push rdx
   403 00000CCB 57                  <1>     push rdi
   404 00000CCC 55                  <1>     push rbp
   405 00000CCD 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000CCF E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000CD4 E8EFFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000CD9 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000CDB 85C9                <1>     test ecx, ecx
   412 00000CDD 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000CDF F7C101000000        <1>     test ecx, 1
   414 00000CE5 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000CE7 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000CEC 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000CF1 721E                <1>     jb .exit
   419 00000CF3 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000CF8 EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000CFA 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000CFE 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000D03 7207                <1>     jb .validCluster32   
   425 00000D05 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000D0A EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000D0C 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000D11 F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000D12 5D                  <1>     pop rbp
   433 00000D13 5F                  <1>     pop rdi
   434 00000D14 5A                  <1>     pop rdx
   435 00000D15 59                  <1>     pop rcx
   436 00000D16 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000D17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000D18 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000D1E 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000D20 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000D24 29D1                <1>     sub ecx, edx
   449 00000D26 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000D28 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000D2A 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000D2F FFC0                <1>     inc eax ;Get next FAT sector
   454 00000D31 53                  <1>     push rbx
   455 00000D32 E891FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000D37 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000D38 72D8                <1>     jc .exitFail
   458 00000D3A 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000D3C 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000D3F C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000D42 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000D44 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000D49 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000D4C EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000D4E 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000D53 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000D58 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000D5D 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000D5F B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000D64 E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000D69 53                  <1>     push rbx
   483 00000D6A 51                  <1>     push rcx
   484 00000D6B 52                  <1>     push rdx
   485 00000D6C 56                  <1>     push rsi
   486 00000D6D 57                  <1>     push rdi
   487 00000D6E 55                  <1>     push rbp
   488 00000D6F 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000D71 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000D76 E84DFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000D7B 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000D7D 85C9                <1>     test ecx, ecx
   495 00000D7F 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000D81 F7C101000000        <1>     test ecx, 1
   497 00000D87 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000D89 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000D8E EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000D90 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000D96 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000D9A E881FAFFFF          <1>     call markBufferDirty
   506 00000D9F F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000DA0 5D                  <1>     pop rbp
   509 00000DA1 5F                  <1>     pop rdi
   510 00000DA2 5E                  <1>     pop rsi
   511 00000DA3 5A                  <1>     pop rdx
   512 00000DA4 59                  <1>     pop rcx
   513 00000DA5 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000DA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000DA7 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000DAD F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000DB3 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000DB5 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000DB9 29D1                <1>     sub ecx, edx
   527 00000DBB FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000DBD 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531                              <1>     ;breakpoint
   532 00000DBF 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   533 00000DC4 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   534 00000DCA C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   535 00000DCD 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   536 00000DCF C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   537 00000DD2 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   538 00000DD6 E845FAFFFF          <1>     call markBufferDirty
   539 00000DDB FFC0                <1>     inc eax ;Get next FAT sector
   540 00000DDD E8E6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   541 00000DE2 72BC                <1>     jc .exitFail
   542 00000DE4 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   543 00000DE6 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   544 00000DE9 EBAF                <1>     jmp short .exit
   545                              <1> .gotoNextClusterFat12NoCross:
   546 00000DEB 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   547 00000DF0 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   548 00000DF5 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   549 00000DF8 EB0A                <1>     jmp short .fat12common
   550                              <1> .gotoNextClusterFat12Even:
   551                              <1>     ;Here the cluster is even and can't cross a sector boundary
   552 00000DFA 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000DFF 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   554                              <1> .fat12common:
   555 00000E04 09F0                <1>     or eax, esi     ;Add the new entry bits
   556 00000E06 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   557 00000E0B E98AFFFFFF          <1>     jmp .exit
   558                              <1> 
   559                              <1> incrementFreeClusterCount:
   560                              <1> ;Cluster Deallocated Function
   561 00000E10 9C                  <1>     pushfq
   562 00000E11 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   563 00000E18 7403                <1>     je .exit
   564 00000E1A FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   565                              <1> .exit:
   566 00000E1D 9D                  <1>     popfq
   567                              <1>     return
    13                              <2> %%_ret:
    14 00000E1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> decrementFreeClusterCount:
   569                              <1> ;Cluster Allocated Function
   570 00000E1F 9C                  <1>     pushfq
   571 00000E20 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   572 00000E27 7403                <1>     je .exit
   573 00000E29 FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   574                              <1> .exit:
   575 00000E2C 9D                  <1>     popfq
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000E2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000E2E 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000E35 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000E38 7408                <1>     jz .notNet
     6 00000E3A B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
     7 00000E3F CD4F                <1>     int 4Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000E41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000E42 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000E44 FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000E46 E834620000          <1>     call dosCrit1Enter
    13 00000E4B E8345E0000          <1>     call getCDS     ;Set CDS and current drive vars
    14 00000E50 720C                <1>     jc .critError   ;Return error if this fails
    15 00000E52 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] 
    16 00000E59 E8D45A0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000E5E E826620000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E63 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000E65 E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000E6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000E6B 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000E72 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    30 00000E79 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000E7C 8805(F7060000)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000E82 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000E85 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000E8B 8905(7B070000)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000E91 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000E94 8905(85070000)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000E9A C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000E9D 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000E9F 813D(7F070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000EA7 0000                <1>
    43 00000EA9 0F8496000000        <1>     je .oldFat
    44 00000EAF 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000EB3 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000EB7 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000EB9 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000EBB 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000EBD 31D2                <1>     xor edx, edx
    50 00000EBF F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000EC1 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000EC3 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000EC7 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000EC9 31D2                <1>     xor edx, edx
    58 00000ECB F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000ECD 668905(83070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000ED4 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000EDA 89D9                <1>     mov ecx, ebx
    65 00000EDC 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000EDF E8E4FDFFFF          <1>     call readFAT
    68 00000EE4 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000EE9 7477                <1>     je .errorExit
    70 00000EEB FFC9                <1>     dec ecx
    71 00000EED 75F0                <1>     jnz .fatlp
    72 00000EEF 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000EF5 488D05AA000000      <1>     lea rax, searchDir.nextEp
    75 00000EFC 50                  <1>     push rax    ;Push the return address onto stack
    76 00000EFD 8B05(7F070000)      <1>     mov eax, dword [dirClustA]
    77 00000F03 E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000F08 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000F0F 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000F12 E8B6FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    82 00000F17 0F8224010000        <1>     jc searchDir.hardError
    83 00000F1D E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
    84 00000F22 E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000F27 8B05(85070000)      <1>     mov eax, dword [dirEntry]
    86 00000F2D 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000F32 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000F34 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000F37 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000F3A 8A05(F7060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000F40 E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000F45 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
    99 00000F4C 50                  <1>     push rax    ;Push return address onto the stack
   100 00000F4D 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000F51 31D2                <1>     xor edx, edx
   102 00000F53 96                  <1>     xchg esi, eax
   103 00000F54 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000F56 668905(83070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000F5D 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000F60 EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000F62 F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000F63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000F64 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000F6B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000F71 7408                <1>     jz .notNet
   125 00000F73 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000F78 CD4F                <1>     int 4fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000F7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129 00000F7B 488B2D(05070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   130 00000F82 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   131 00000F88 85C0                <1>     test eax, eax
   132 00000F8A 747E                <1>     jz .oldRoot
   133 00000F8C E835FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   134                              <1> .sectorLoop:
   135 00000F91 E837FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   136 00000F96 0F82A5000000        <1>     jc .hardError
   137 00000F9C E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   138                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   139 00000FA1 E8B2000000          <1>     call findInBuffer
   140                              <1> .nextEp:
   141                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FA6 73D2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   142 00000FA8 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   143                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   144                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   145                              <1>     ;IF however, the next cluster is -1, then we return fail
   146 00000FAE 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   147 00000FB4 8905(4F070000)      <1>     mov dword [currClustD], eax
   148 00000FBA 668B05(83070000)    <1>     mov ax, word [dirSect]
   149 00000FC1 8805(57070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   150 00000FC7 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   151 00000FCB 488905(58070000)    <1>     mov qword [currSectD], rax  
   152 00000FD2 C705(4B070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   152 00000FDA 0000                <1>
   153 00000FDC E848FCFFFF          <1>     call getNextSectorOfFile
   154 00000FE1 725E                <1>     jc .hardError
   155 00000FE3 3DFFFFFFFF          <1>     cmp eax, -1
   156 00000FE8 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   157 00000FEA 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector
   158 00000FF1 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   159 00000FF7 3B05(4F070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   160 00000FFD 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   161 00000FFF 66C705(83070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   161 00001007 00                  <1>
   162 00001008 EB87                <1>     jmp short .sectorLoop 
   163                              <1> 
   164                              <1> .oldRoot:
   165                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   166                              <1> ; one large contiguous cluster.
   167                              <1> .oldSectorLp:
   168 0000100A 0FB705(83070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   169 00001011 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   170 00001014 E8B4F9FFFF          <1>     call getBufForDOS
   171 00001019 7226                <1>     jc .hardError
   172 0000101B E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   173 00001020 E833000000          <1>     call findInBuffer
   174                              <1> .oldNextEP:
   175                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001025 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001027 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00001028 7413                <1>     jz .fnfError
   177 0000102A 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   178 00001031 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   179 00001035 3905(85070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   180 0000103B 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   181                              <1> .fnfError:
   182 0000103D B012                <1>     mov al, errNoFil
   183 0000103F F9                  <1>     stc
   184                              <1>     return
    13                              <2> %%_ret:
    14 00001040 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> .hardError:
   186 00001041 B0FF                <1>     mov al, -1
   187                              <1>     return
    13                              <2> %%_ret:
    14 00001043 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> adjustDosDirBuffer:
   189 00001044 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   190 00001048 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   191 0000104C 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   192 00001050 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   193 00001054 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   194                              <1>     return
    13                              <2> %%_ret:
    14 00001057 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   195                              <1> 
   196                              <1> findInBuffer:
   197                              <1> ;Input:  rsi = Sector buffer data area
   198                              <1> ;Output: CF=CY => No entries found
   199                              <1> ;        ZF=NE => Keep searching in subsequent directories
   200                              <1> ;        ZF=ZE => End of directory reached early, stop
   201                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   202                              <1> ;        rsi = Points to start of the disk buffer directory entry
   203 00001058 E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   204 0000105D 8A05(F7060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   205 00001063 E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   206                              <1> .searchMainLp:
   207                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   208 00001068 8A25(03070000)      <1>     mov ah, byte [delChar]
   209 0000106E 803E00              <1>     cmp byte [rsi], 00h
   210 00001071 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   211 00001073 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   212 00001075 750F                <1>     jne .notLookingForEmpty
   213                              <1> .emptySlot:
   214                              <1> ;Here we check if we are looking for an empty directory entry or
   215                              <1> ; we have reached the end of the file (if the first byte is 00h)
   216                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   217 00001077 3A25(D4060000)      <1>     cmp ah, byte [fcbName] 
   218                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000107D 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   219                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   220 0000107F 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   221 00001082 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   222 00001084 F9                  <1>     stc
   223                              <1>     return
    13                              <2> %%_ret:
    14 00001085 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .notLookingForEmpty:
   225 00001086 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   226 00001089 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   227 0000108C 803D(68040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   228 00001093 7434                <1>     je .exclusiveDir
   229 00001095 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   230 00001097 7437                <1>     je .volFile ;If so, go here
   231 00001099 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   232 0000109C 7414                <1>     je .nextEntry
   233 0000109E 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   234 000010A0 7710                <1>     ja .nextEntry
   235                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   236                              <1> .scanName:
   237 000010A2 56                  <1>     push rsi
   238 000010A3 488D3D(D4060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   239 000010AA E83E000000          <1>     call .nameCompare
   240 000010AF 5E                  <1>     pop rsi
   241 000010B0 7424                <1>     je .searchEntryFound
   242                              <1> .nextEntry:
   243                              <1> ;Go to next entry
   244 000010B2 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   245 000010B9 FF05(85070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   246 000010BF FFC9                <1>     dec ecx
   247 000010C1 75A5                <1>     jnz .searchMainLp
   248                              <1> .badExit:
   249 000010C3 31C0                <1>     xor eax, eax
   250 000010C5 FFC0                <1>     inc eax ;Clear ZF
   251 000010C7 F9                  <1>     stc
   252                              <1>     return
    13                              <2> %%_ret:
    14 000010C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .exclusiveDir:
   254                              <1> ;Used when going down a path, dir bit simply need be set
   255 000010C9 F6C410              <1>     test ah, dirDirectory
   256 000010CC 75D4                <1>     jnz .scanName
   257 000010CE EBE2                <1>     jmp short .nextEntry
   258                              <1> 
   259                              <1> .volFile:
   260 000010D0 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   261 000010D2 74CE                <1>     je .scanName       ;If so, scan the name agrees
   262 000010D4 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   263                              <1> 
   264                              <1> .searchEntryFound:
   265                              <1> ;Here a good entry was found!
   266 000010D6 56                  <1>     push rsi
   267 000010D7 57                  <1>     push rdi
   268 000010D8 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   269 000010DA 488D3D(59060000)    <1>     lea rdi, curDirCopy
   270 000010E1 B904000000          <1>     mov ecx, 32/8
   271 000010E6 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   272 000010E9 5F                  <1>     pop rdi
   273 000010EA 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   274 000010EB F8                  <1>     clc
   275                              <1>     return
    13                              <2> %%_ret:
    14 000010EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> .nameCompare:
   278                              <1> ;Input: rsi = source string
   279                              <1> ;       rdi = string template to compare against
   280                              <1> ;Output: ZF=ZE => Strings are ok
   281                              <1> ;        ZF=NZ => Strings not ok
   282                              <1> ;Accepts wildcards. Trashes al
   283 000010ED 51                  <1>     push rcx
   284 000010EE 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   285                              <1> .ncLp:
   286 000010F0 81F90B000000        <1>     cmp ecx, 11
   287 000010F6 740B                <1>     je .ncExit
   288 000010F8 FFC1                <1>     inc ecx
   289 000010FA A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   290 000010FB 74F3                <1>     je .ncLp    ;If equal, keep going
   291 000010FD 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   292 00001101 74ED                <1>     je .ncLp
   293                              <1> .ncExit:
   294 00001103 59                  <1>     pop rcx
   295                              <1>     return
    13                              <2> %%_ret:
    14 00001104 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .getNumberOfEntries:
   297 00001105 55                  <1>     push rbp
   298 00001106 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   299 0000110D 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   300 00001111 C1E905              <1>     shr ecx, 5  ;Divide by 32
   301 00001114 5D                  <1>     pop rbp
   302                              <1>     return
    13                              <2> %%_ret:
    14 00001115 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> adjustSearchAttr:
   304                              <1> ;Converts the byte to a system only if the bit is set
   305                              <1> ;Input: eax = User selected search mask
   306                              <1> ;Output: eax = Modified search mask
   307 00001116 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   308 0000111B A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   309                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001120 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   310 00001122 B808000000          <1>     mov eax, dirVolumeID
   311                              <1>     return
    13                              <2> %%_ret:
    14 00001127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   317                              <1> ;Name is space padded.
   318                              <1> ;Input: rsi = ASCII string buffer
   319                              <1> ;       rdi = FCB name buffer
   320                              <1> ;Output: al = Char that terminated the source string 
   321 00001128 53                  <1>     push rbx    
   322 00001129 57                  <1>     push rdi
   323 0000112A B90B000000          <1>     mov ecx, 11
   324 0000112F B020                <1>     mov al, " "
   325 00001131 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   326 00001133 5F                  <1>     pop rdi
   327 00001134 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   328                              <1> .processName:
   329 00001137 AC                  <1>     lodsb   ;Get the char in al
   330 00001138 E8E05B0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   331 0000113D 84C0                <1>     test al, al
   332 0000113F 742D                <1>     jz .exit
   333 00001141 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   334 00001143 740E                <1>     je .extSpace
   335 00001145 3C2E                <1>     cmp al, "."
   336 00001147 7413                <1>     je .ext
   337                              <1>     ;Test if the char is valid
   338 00001149 E8125D0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   339 0000114E 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   340 00001150 AA                  <1>     stosb   ;Store the char
   341 00001151 EBE4                <1>     jmp short .processName
   342                              <1> .extSpace:
   343                              <1> ;Now we scan for a period in the name
   344 00001153 AC                  <1>     lodsb   ;Get a char and increase rsi
   345 00001154 84C0                <1>     test al, al
   346 00001156 7416                <1>     jz .exit
   347 00001158 3C2E                <1>     cmp al, "."     ;If al is not a period...
   348 0000115A 75F7                <1>     jne .extSpace   ; keep searching
   349                              <1> .ext:
   350 0000115C 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   351                              <1> .processExt:
   352 00001160 AC                  <1>     lodsb
   353 00001161 84C0                <1>     test al, al
   354 00001163 7409                <1>     jz .exit
   355 00001165 3C20                <1>     cmp al, " "
   356 00001167 7405                <1>     je .exit
   357 00001169 AA                  <1>     stosb
   358 0000116A EBF4                <1>     jmp short .processExt
   359                              <1> .exitBadChar:
   360 0000116C 30C0                <1>     xor al, al  ;Return a null terminator
   361                              <1> .exit:
   362 0000116E 5B                  <1>     pop rbx
   363                              <1>     return
    13                              <2> %%_ret:
    14 0000116F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> FCBToAsciiz:
   366                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   367                              <1> ;Name is space padded too
   368                              <1> ;Input: rsi = FCB name buffer
   369                              <1> ;       rdi = ASCIIZ string buffer
   370 00001170 B908000000          <1>     mov ecx, 8
   371 00001175 F3A4                <1>     rep movsb   ;Move the name over
   372                              <1> .scanNameSpace:
   373 00001177 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   374 0000117B 750D                <1>     jne .ext
   375 0000117D 48FFCF              <1>     dec rdi
   376 00001180 FFC1                <1>     inc ecx
   377 00001182 81F908000000        <1>     cmp ecx, 8
   378 00001188 72ED                <1>     jb .scanNameSpace
   379                              <1> .ext:
   380 0000118A 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   381 0000118F 7506                <1>     jne .validExt
   382 00001191 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   383 00001195 7415                <1>     je .exit
   384                              <1> .validExt:
   385 00001197 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   386 00001199 AA                  <1>     stosb
   387 0000119A B903000000          <1>     mov ecx, 3
   388 0000119F F3A4                <1>     rep movsb   ;Move the three extension chars over
   389                              <1> .scanExtSpace:
   390 000011A1 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   391 000011A5 7505                <1>     jne .exit
   392 000011A7 48FFCF              <1>     dec rdi
   393 000011AA EBF5                <1>     jmp short .scanExtSpace
   394                              <1> .exit:
   395 000011AC 31C0                <1>     xor eax, eax
   396 000011AE AA                  <1>     stosb   ;Store a null at the end
   397                              <1>     return
    13                              <2> %%_ret:
    14 000011AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> setupFFBlock:
   400                              <1> ;Sets up the find first block for the search
   401                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   402 000011B0 50                  <1>     push rax
   403 000011B1 53                  <1>     push rbx
   404 000011B2 56                  <1>     push rsi
   405 000011B3 57                  <1>     push rdi
   406 000011B4 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   407 000011B7 8A05(F7060000)      <1>     mov al, byte [searchAttr]
   408 000011BD 243F                <1>     and al, 3Fh ;Clear upper two bits
   409 000011BF 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   410 000011C2 0FB605(04070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   411 000011C9 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   412 000011CB 488D35(D4060000)    <1>     lea rsi, fcbName
   413 000011D2 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   414 000011D6 57                  <1>     push rdi
   415 000011D7 48B820202020202020- <1>     mov rax, "        "
   415 000011E0 20                  <1>
   416 000011E1 48AB                <1>     stosq
   417 000011E3 66AB                <1>     stosw
   418 000011E5 AA                  <1>     stosb
   419 000011E6 5F                  <1>     pop rdi
   420 000011E7 48A5                <1>     movsq   ;Move 8 chars
   421 000011E9 66A5                <1>     movsw   ;Move 2 chars
   422 000011EB A4                  <1>     movsb   ;Move the final char
   423                              <1> 
   424 000011EC 8B05(85070000)      <1>     mov eax, dword [dirEntry]
   425 000011F2 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   426 000011F5 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
   427 000011FB 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   428 000011FE 8A05(64060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   429 00001204 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   430 00001207 8B05(6F060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   431 0000120D 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   432 00001210 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   433 00001216 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   434 00001219 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   435 0000121D 488D35(59060000)    <1>     lea rsi, curDirCopy
   436 00001224 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   437                              <1> 
   438 00001229 5F                  <1>     pop rdi
   439 0000122A 5E                  <1>     pop rsi
   440 0000122B 5B                  <1>     pop rbx
   441 0000122C 58                  <1>     pop rax
   442                              <1>     return
    13                              <2> %%_ret:
    14 0000122D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   445                              <1> ;Gets the drive letter for the path in al
   446                              <1> ;Input: rsi = Buffer to process
   447                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   448                              <1> ;       ZF=ZE and al = 0 => Null path
   449                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   450                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   451                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   452 0000122E 30C0                <1>     xor al, al
   453 00001230 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   454                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001233 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455 00001235 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   456                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001239 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 0000123B 66AD                <1>     lodsw   ;Get first word, rsi += 2
   458                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   459 0000123D 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   460 0000123F 2C60                <1>     sub al, 60h
   461                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001241 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 00001243 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   463                              <1>     return
    13                              <2> %%_ret:
    14 00001245 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> canonicaliseFileName:
   466                              <1> ;Always trying to build and qualify a full pathname
   467                              <1> ;Does getPath without hitting the disk
   468 00001246 B0FF                <1>     mov al, -1
   469 00001248 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   470 0000124E 8805(FC060000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   471 00001254 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   472 0000125B FEC0                <1>     inc al  ;make al = 0
   473 0000125D 8805(2D060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   474 00001263 E83E000000          <1>     call getPath.epAlt
   475                              <1>     return
    13                              <2> %%_ret:
    14 00001268 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> getDirPathNoCanon:
   478 00001269 31C0                <1>     xor eax, eax
   479 0000126B 4889FE              <1>     mov rsi, rdi
   480 0000126E EB1B                <1>     jmp short getPath.noCanon
   481                              <1> getFilePathNoCanon:
   482                              <1> ;Used when the path is constructed internally (as for FCB functions)
   483                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   484 00001270 B0FF                <1>     mov al, -1
   485 00001272 4889FE              <1>     mov rsi, rdi
   486 00001275 EB14                <1>     jmp short getPath.noCanon
   487                              <1> getDirPath:
   488 00001277 30C0                <1>     xor al, al   ;Set to Directory
   489 00001279 EB02                <1>     jmp short getPath
   490                              <1> getFilePath:
   491 0000127B B0FF                <1>     mov al, -1  ;Set to File
   492                              <1> getPath:
   493                              <1> ;Determines whether the path is spliced or not and transfers the chars
   494                              <1> ; from the user buffer into an internal buffer, normalising them.
   495                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   496                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   497                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   498                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   499                              <1> ; we let it do its thing and return.
   500                              <1> ;If the user requests data from a remote server (i.e. UNC pathnames) 
   501                              <1> ; then wildcards, the colon and dots are forbidden.
   502                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   503                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   504                              <1> ; (converted from using machine name by the net client program).
   505                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   506                              <1> ; was good.
   507                              <1> ;Called with:
   508                              <1> ; rdi = SDA Buffer for filename
   509                              <1> ; rsi = Potentially unqualified filename
   510                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   511 0000127D 50                  <1>     push rax
   512 0000127E 57                  <1>     push rdi
   513 0000127F E8C2FFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   514 00001284 5F                  <1>     pop rdi
   515 00001285 58                  <1>     pop rax
   516 00001286 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   517                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001289 72DD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   518                              <1> .noCanon:
   519 0000128B 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   520 00001291 B0FF                <1>     mov al, -1
   521 00001293 8805(FC060000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   522 00001299 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   523 000012A0 8805(2D060000)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   524                              <1> .epAlt:
   525 000012A6 C605(00070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   526 000012AD C605(FF060000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   527 000012B4 F605(FD060000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   528 000012BB 7428                <1>     jz .notServer
   529                              <1>     ;In this case, the client network program will have correctly
   530                              <1>     ; substituted the drive letter for the path before making the request.
   531                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   532 000012BD E86CFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   534                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   535                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE "\\" AND IS 0 TERMINATED.
   536                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   537                              <1>     ; these requirements.
   538                              <1>     ;When a server request is made, the request can ONLY be for a file on
   539                              <1>     ; a CDS drive to avoid multiple server hops.
   540 000012C2 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   541 000012C4 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   542 000012CB 50                  <1>     push rax
   543 000012CC E8AE5D0000          <1>     call dosCrit1Enter
   544 000012D1 E85C560000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   545 000012D6 E8AE5D0000          <1>     call dosCrit1Exit
   546 000012DB 58                  <1>     pop rax
   547 000012DC 0F8387000000        <1>     jnc .driveOk
   548                              <1> .serverExit:
   549 000012E2 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   550                              <1>     return
    13                              <2> %%_ret:
    14 000012E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .notServer:
   552                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   553 000012E5 48C705(0D070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   553 000012ED FFFFFF              <1>
   554 000012F0 B823110000          <1>     mov eax, 1123h
   555 000012F5 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   556                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012F7 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 000012F9 E830FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   558 000012FE 9C                  <1>     pushfq  ;Save the flag state on stack
   559 000012FF 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   560 00001300 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   561 00001303 E8095A0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   562 00001308 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   563 0000130A E8025A0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   564 0000130F 7548                <1>     jnz .notNet
   565 00001311 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   566 00001313 7544                <1>     jne .notNet
   567 00001315 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   568 00001316 9D                  <1>     popfq
   569 00001317 66AD                <1>     lodsw
   570 00001319 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   571 0000131D 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   572                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   573                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   574                              <1> ; redirector Find First Without CDS
   575                              <1> 
   576 0000131F 8A1D(2D060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   577 00001325 C605(2D060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   578 0000132C 53                  <1>     push rbx
   579                              <1> .moveNetChars:
   580 0000132D AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   581 0000132E E8EA590000          <1>     call uppercaseChar  ;Make char in al uppercase
   582 00001333 84C0                <1>     test al, al
   583 00001335 7412                <1>     jz .netEnd
   584 00001337 E8D5590000          <1>     call swapPathSeparator  ;If path sep, swap it
   585 0000133C AA                  <1>     stosb
   586 0000133D 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   587 0000133F 48FFCF              <1>     dec rdi ;Point at the backslash here
   588 00001342 E85E000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   589 00001347 73E4                <1>     jnc short .moveNetChars ;If this returns CF=CY, error out!
   590                              <1> .netEnd:
   591 00001349 5B                  <1>     pop rbx
   592                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000134A 7298                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   593 0000134C AA                  <1>     stosb
   594 0000134D 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   595                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000134F 7493                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   596 00001351 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   597 00001356 CD4F                <1>     int 4Fh
   598                              <1>     return
    13                              <2> %%_ret:
    14 00001358 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1> .notNet:
   600                              <1> ;This is the normal case; paths can be relative, or absolute.
   601 00001359 58                  <1>     pop rax ;Get the drive letter back
   602 0000135A 9D                  <1>     popfq   ;Get the flag state back
   603 0000135B 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   604                              <1> .pnfErr:
   605 0000135D B003                <1>     mov al, errPnf  ;Null path error
   606 0000135F F9                  <1>     stc
   607                              <1>     return
    13                              <2> %%_ret:
    14 00001360 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   608                              <1> .notNull:
   609 00001361 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   610 00001363 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   611 00001365 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   612 00001367 F9                  <1>     stc
   613                              <1>     return
    13                              <2> %%_ret:
    14 00001368 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   614                              <1> .driveOk:
   615 00001369 84C0                <1>     test al, al
   616 0000136B 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   617                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   618 0000136D 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   619 00001370 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   620 00001372 50                  <1>     push rax    ;Save the drive letter
   621 00001373 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   622 00001374 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   623 00001377 E895590000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   624                              <1>     ;If al is a path separator, then this path is absolute.
   625 0000137C 58                  <1>     pop rax ;Get back the drive letter
   626 0000137D 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   627                              <1> .absoPath:
   628                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   629 0000137F 48FFC6              <1>     inc rsi
   630 00001382 EB1A                <1>     jmp short .commonDir
   631                              <1> .curPath:
   632                              <1> ;This is only jumped to if we are relative the current drive
   633                              <1> ;rsi points to first char in path
   634                              <1> ;If this char is \ or /, then it is an absolute path.
   635 00001384 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   636 0000138A FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   637 0000138C 50                  <1>     push rax    ;Save the current drive number
   638 0000138D 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   639 0000138F E87D590000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   640 00001394 58                  <1>     pop rax ;Get back the current drive number
   641 00001395 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   642                              <1> .relMain:
   643 00001397 C605(FC060000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   644                              <1> .commonDir:
   645                              <1> ;rsi points to the start of the string we will be appending
   646                              <1> ;Fall through now
   647                              <1> pathWalk:
   648                              <1> ;Input: rsi must point to source buffer for path to expand
   649                              <1> ;       rdi must point to a destination buffer
   650                              <1> ;       al must contain the drive 1 based number
   651 0000139E E8B7000000          <1>     call prepareDir    ;Prepare the start of the path
   652 000013A3 727E                <1>     jc .badDriveExit
   653                              <1> .netEp: 
   654                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   655                              <1> ;For subst, resolution cannot go past backslash offset.
   656                              <1> ;For join, it is transparent.
   657 000013A5 4889FB              <1>     mov rbx, rdi
   658                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   659 000013A8 803E00              <1>     cmp byte [rsi], 0
   660 000013AB 7512                <1>     jnz .mainlp
   661                              <1>     ;Setup dummy dir data for Root directory
   662 000013AD 31C0                <1>     xor eax, eax
   663 000013AF 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   664 000013B6 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   665 000013BD EB6A                <1>     jmp short .exitGood
   666                              <1> .mainlp:
   667                              <1>     ;rbx must remain constant in this portion,
   668                              <1>     ; and is used to signify the first writable byte in the path
   669 000013BF 53                  <1>     push rbx
   670 000013C0 E840010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   671 000013C5 5B                  <1>     pop rbx
   672 000013C6 84C0                <1>     test al, al
   673 000013C8 7507                <1>     jnz .notFile
   674 000013CA C605(00070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   675                              <1> .notFile:
   676 000013D1 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   677 000013D2 E84D040000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   678 000013D7 58                  <1>     pop rax
   679 000013D8 736B                <1>     jnc .deviceFound
   680 000013DA E8F6010000          <1>     call searchForPathspec  ;and search the directory
   681 000013DF 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   682 000013E1 E845020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   683 000013E6 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   684 000013E8 84C0                <1>     test al, al ;Exit if this pathspec was a file
   685 000013EA 743D                <1>     jz .exitGood
   686                              <1>     ;Here I have to take the cluster data from the found directory entry
   687                              <1>     ; and setup the search for the next pathspec portion
   688                              <1>     ;Copy necessary data from the current directory copy
   689 000013EC 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   690 000013F3 74CA                <1>     jz .mainlp
   691 000013F5 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   692 000013FC C1E010              <1>     shl eax, 10h    ;Shift it high
   693 000013FF 668B05(73060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   694                              <1>     ;eax now has the cluster number of the search
   695 00001406 8905(7F070000)      <1>     mov dword [dirClustA], eax
   696 0000140C 8905(7B070000)      <1>     mov dword [dirClustPar], eax
   697 00001412 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   698 00001414 8905(85070000)      <1>     mov dword [dirEntry], eax
   699 0000141A 668905(83070000)    <1>     mov word [dirSect], ax
   700 00001421 EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   701                              <1> .badDriveExit:
   702 00001423 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   703                              <1>     return
    13                              <2> %%_ret:
    14 00001428 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   704                              <1> .exitGood:
   705 00001429 C605(FF060000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   706                              <1> .exit:
   707                              <1>     return
    13                              <2> %%_ret:
    14 00001430 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   708                              <1> .checkDev:
   709                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   710                              <1> ; we are in \DEV pseudo dir
   711 00001431 F605(69040000)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   712 00001438 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   713                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   714 0000143A 56                  <1>     push rsi
   715 0000143B 57                  <1>     push rdi
   716 0000143C E871030000          <1>     call checkDevPath
   717 00001441 5F                  <1>     pop rdi
   718 00001442 5E                  <1>     pop rsi
   719 00001443 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   720                              <1> .deviceFound:
   721 00001445 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   722 00001447 C605(00070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   723 0000144E C605(FF060000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   724 00001455 EBD9                <1>     jmp short .exit   
   725                              <1> .nodev:
   726 00001457 F9                  <1>     stc
   727 00001458 EBD6                <1>     jmp short .exit
   728                              <1> 
   729                              <1> prepareDir:
   730                              <1> ;Used to transfer the current directory if it is necessary.
   731                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   732                              <1> ; a relative path is specified.
   733                              <1> ;Input: al = 1-based drive letter
   734                              <1> ;Output: rdi = Pointing at where to place chars from source string
   735                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   736 0000145A 56                  <1>     push rsi    ;Push ptr to source string
   737 0000145B E81F5C0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   738                              <1>     ;Here we prevent going from a join to a join. 
   739 00001460 E8B6570000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   740 00001465 720D                <1>     jc .critExit    ;If the drive number in al is too great or a join drive specified.
   741 00001467 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] 
   742 0000146E 57                  <1>     push rdi    ;Push CDS pointer on stack...
   743 0000146F E8BE540000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   744                              <1>     ;RBP = DPB ptr now
   745                              <1> .critExit:
   746 00001474 E8105C0000          <1>     call dosCrit1Exit
   747 00001479 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   748 0000147A 7242                <1>     jc .badDriveExit 
   749 0000147C 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   750                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   751                              <1>     ;If this CDS is a join drive... it can't be!
   752                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   753                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   754 00001483 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   755 00001489 7535                <1>     jnz .prepDirSubst
   756                              <1> .prepMain:
   757                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   758 0000148B F605(FC060000)FF    <1>     test byte [spliceFlag], -1
   759 00001492 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   760                              <1>     ;Else we copy the first two chars only (X:)
   761 00001494 66A5                <1>     movsw  
   762 00001496 B05C                <1>     mov al, "\"
   763 00001498 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   764 00001499 31C0                <1>     xor eax, eax    ;Get cluster 0
   765 0000149B EB1B                <1>     jmp short .prepDirExitSkip
   766                              <1> .prepLoop:
   767 0000149D AC                  <1>     lodsb
   768 0000149E 84C0                <1>     test al, al ;If al was null, then we stop
   769 000014A0 7403                <1>     jz .prepDirExit
   770 000014A2 AA                  <1>     stosb
   771 000014A3 EBF8                <1>     jmp short .prepLoop
   772                              <1> .prepDirExit:
   773 000014A5 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   774 000014A9 7403                <1>     je .prepDirExitSkipPathsep
   775 000014AB B05C                <1>     mov al, "\"
   776 000014AD AA                  <1>     stosb   ;Store the path separator and increment rdi
   777                              <1> .prepDirExitSkipPathsep:
   778 000014AE 488B35(0D070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   779 000014B5 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   780                              <1> .prepDirExitSkip:
   781 000014B8 E816000000          <1>     call .prepSetupDirSearchVars
   782 000014BD F8                  <1>     clc ;Clear carry before exiting
   783                              <1> .badDriveExit:
   784 000014BE 5E                  <1>     pop rsi
   785                              <1>     return
    13                              <2> %%_ret:
    14 000014BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   786                              <1> .prepDirSubst:
   787 000014C0 51                  <1>     push rcx
   788 000014C1 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   789                              <1> .prepDirCopy1:
   790 000014C5 F3A4                <1>     rep movsb   ;Copy the string over
   791 000014C7 59                  <1>     pop rcx
   792 000014C8 F605(FC060000)FF    <1>     test byte [spliceFlag], -1
   793 000014CF 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   794 000014D1 EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   795                              <1> .prepSetupDirSearchVars:
   796                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   797                              <1> ;       rbp = DPB pointer for the device which will do transaction
   798 000014D3 51                  <1>     push rcx
   799 000014D4 31C9                <1>     xor ecx, ecx
   800 000014D6 66890D(83070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   801 000014DD 890D(85070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   802 000014E3 E873F5FFFF          <1>     call getFATtype ;Get type of fat
   803 000014E8 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   804 000014EE 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   805                              <1>     ;FAT 32 here
   806 000014F0 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   807 000014F2 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   808 000014F4 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   809                              <1> .psdsvExit:
   810 000014F7 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   811 000014FD 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   812 00001503 59                  <1>     pop rcx
   813                              <1>     return 
    13                              <2> %%_ret:
    14 00001504 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   814                              <1> 
   815                              <1> copyPathspec:
   816                              <1> ;1) Copies a path portion from the source buffer to the destination
   817                              <1> ;2) Advances rsi to the next null, \ or /
   818                              <1> ;3) Expands all * to ?'s
   819                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   820                              <1> ;    next path separator and rdi pointing to the previous pathsep
   821                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   822                              <1> ;    with rsi moving to path separator
   823                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   824                              <1> ;
   825                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   826                              <1> ;           rdi = Points to where to store it
   827                              <1> ;
   828                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   829                              <1> ;           rdi = First char of next space to store next pathspec
   830                              <1> ;           al = Last char stored (either \ or NULL)
   831                              <1> ;           CF=NC = OK path
   832                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   833                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   834 00001505 57                  <1>     push rdi    ;Save the pointer into the user buffer
   835 00001506 C605(8C040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   836 0000150D 488D3D(D4060000)    <1>     lea rdi, fcbName
   837 00001514 57                  <1>     push rdi
   838 00001515 B903000000          <1>     mov ecx, 3
   839 0000151A B820202020          <1>     mov eax, "    " ;Four spaces
   840 0000151F F3AB                <1>     rep stosd   ;Store 12 spaces
   841 00001521 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   842                              <1> 
   843 00001522 488D1D(DF060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   844 00001529 AC                  <1>     lodsb   ;Get first char from user path in al
   845 0000152A 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   846 0000152C 7463                <1>     je .cpsDots
   847 0000152E 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   848                              <1> ;First char is not a dot, so now check if starts with E5h? 
   849                              <1> ;If so, store 05h in its place!
   850 00001531 3CE5                <1>     cmp al, 0E5h
   851 00001533 7506                <1>     jne .cpsMainLoop
   852 00001535 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   853 00001538 B005                <1>     mov al, 05h
   854 0000153A AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   855                              <1> .cpsMainLoop:
   856 0000153B AC                  <1>     lodsb   ;Get the char in al and advance rsi
   857 0000153C 84C0                <1>     test al, al ;Is it the null char?
   858 0000153E 7479                <1>     jz .cpsStore  ;If so, terminate immediately
   859 00001540 E8CC570000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   860 00001545 747F                <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   861 00001547 3C2E                <1>     cmp al, "." ;Filename extension separator
   862 00001549 7420                <1>     je .cpsExtension
   863                              <1>     ;If we have space in the filename, we check to see if the next char is *
   864 0000154B 3C2A                <1>     cmp al, "*" ;Wildcard?
   865 0000154D 7430                <1>     je .cpsWildcard
   866 0000154F 3C3F                <1>     cmp al, "?" ;Good wildcard?
   867 00001551 740C                <1>     je .store
   868 00001553 E8C5570000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   869 00001558 E803590000          <1>     call checkCharValid ; and check it is a valid char
   870 0000155D 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   871                              <1> .store:
   872 0000155F 4839DF              <1>     cmp rdi, rbx
   873 00001562 7435                <1>     je .cpsProcessName ;Skip any non-terminating chars
   874 00001564 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   875 00001565 EBD4                <1>     jmp short .cpsMainLoop
   876                              <1> .cpsInvalidChar:
   877 00001567 30C0                <1>     xor al, al
   878 00001569 EB2E                <1>     jmp short .cpsProcessName
   879                              <1> .cpsExtension:
   880                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   881 0000156B B903000000          <1>     mov ecx, 3 
   882 00001570 488D3D(DC060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   883 00001577 57                  <1>     push rdi
   884 00001578 B020                <1>     mov al, " "
   885 0000157A F3AA                <1>     rep stosb
   886 0000157C 5F                  <1>     pop rdi
   887 0000157D EBBC                <1>     jmp short .cpsMainLoop
   888                              <1> .cpsWildcard:
   889                              <1> ;Fill the entire FCB filespec with ?'s.
   890                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
   891                              <1> ; *'s from crashing DOS :)
   892 0000157F AC                  <1>     lodsb   ;Get char, inc rsi
   893 00001580 3C2A                <1>     cmp al, "*"
   894 00001582 74FB                <1>     je short .cpsWildcard
   895 00001584 48FFCE              <1>     dec rsi ;Go back to the first non-star char
   896 00001587 B03F                <1>     mov al, "?"
   897                              <1> .cpsWildcardLp:
   898 00001589 AA                  <1>     stosb
   899 0000158A 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
   900 0000158D 75FA                <1>     jne short .cpsWildcardLp
   901 0000158F EBAA                <1>     jmp short .cpsMainLoop
   902                              <1> 
   903                              <1> .cpsDots:
   904 00001591 AA                  <1>     stosb   ;Store the first dot
   905 00001592 8A06                <1>     mov al, byte [rsi]
   906 00001594 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   907 00001596 7521                <1>     jne .cpsStore
   908 00001598 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   909                              <1> 
   910                              <1> .cpsProcessName:
   911                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   912 00001599 84C0                <1>     test al, al 
   913 0000159B 741C                <1>     jz .cpsStore
   914 0000159D E86F570000          <1>     call swapPathSeparator
   915 000015A2 7415                <1>     jz .cpsStore
   916                              <1> .cpsFindTerminator:
   917 000015A4 AC                  <1>     lodsb
   918 000015A5 84C0                <1>     test al, al 
   919 000015A7 7410                <1>     jz .cpsStore
   920 000015A9 E863570000          <1>     call swapPathSeparator
   921 000015AE 7409                <1>     jz .cpsStore
   922 000015B0 E8AB580000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   923 000015B5 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   924                              <1>     ;If we encounter a terminator, convert to 0
   925 000015B7 30C0                <1>     xor al, al
   926                              <1> .cpsStore:
   927 000015B9 488D3D(DF060000)    <1>     lea rdi, fcbName+11
   928 000015C0 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   929 000015C1 5F                  <1>     pop rdi
   930                              <1>     return
    13                              <2> %%_ret:
    14 000015C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> .cpsBadChar:
   932 000015C3 30C0                <1>     xor al, al  ;Convert the char to a terminator
   933                              <1>     return
    13                              <2> %%_ret:
    14 000015C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   934                              <1> .cpsSkipPathseps:
   935 000015C6 AC                  <1>     lodsb
   936 000015C7 E845570000          <1>     call swapPathSeparator
   937 000015CC 74F8                <1>     jz .cpsSkipPathseps
   938 000015CE 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
   939 000015D1 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
   940 000015D3 EBE4                <1>     jmp short .cpsStore
   941                              <1> 
   942                              <1> searchForPathspec:
   943                              <1>     ;Now search the current directory for this filename
   944                              <1>     ;Find first using SDA ffBlock
   945                              <1>     ;If al = 0, we have final file name or directory name
   946                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   947                              <1>     ;Output: CF=CY => Error occured
   948                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   949                              <1>     ;                 FF block somewhat setup
   950                              <1>     ;Preserves rax, rbx, rsi,  rdi
   951 000015D5 50                  <1>     push rax
   952 000015D6 53                  <1>     push rbx
   953 000015D7 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   954 000015D8 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   955 000015D9 0FB61D(68040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   956 000015E0 53                  <1>     push rbx    ;and push it onto the stack
   957                              <1> ;Evaluate whether we are searching for a file for a directory
   958 000015E1 84C0                <1>     test al, al
   959 000015E3 741D                <1>     jz .sfpPNfile
   960                              <1>     ;Fall if subdir
   961 000015E5 488D3D(D4060000)    <1>     lea rdi, fcbName
   962 000015EC B03F                <1>     mov al, "?" ;Search for wildcard
   963 000015EE B90B000000          <1>     mov ecx, 11
   964 000015F3 F2AE                <1>     repne scasb
   965 000015F5 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   966 000015F7 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   967 000015F9 C605(68040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   968 00001600 EB07                <1>     jmp short .sfpPNMain
   969                              <1> .sfpPNfile:
   970                              <1>     ;Here if we are searching for a file or directory as setup by search init
   971 00001602 0FB605(F7060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   972                              <1> .sfpPNMain:
   973 00001609 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   974 00001610 7405                <1>     je .sfpPNNoDisk
   975 00001612 E84DF9FFFF          <1>     call searchDir
   976                              <1> .sfpPNNoDisk:
   977 00001617 5B                  <1>     pop rbx
   978 00001618 881D(68040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   979 0000161E 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   980 0000161F 5E                  <1>     pop rsi
   981 00001620 5B                  <1>     pop rbx
   982 00001621 58                  <1>     pop rax
   983                              <1>     return
    13                              <2> %%_ret:
    14 00001622 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   984                              <1> .sfpPnf:
   985 00001623 B803000000          <1>     mov eax, errPnf
   986                              <1> .sfpErrExit:
   987 00001628 F9                  <1>     stc ;Set carry
   988 00001629 EBEC                <1>     jmp short .sfpPNNoDisk
   989                              <1> 
   990                              <1> addPathspecToBuffer:
   991                              <1> ;Input: fcbName = Qualified pathname portion
   992                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   993                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   994                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   995                              <1> ;rbx points to the "head of the path"
   996 0000162B F605(2D060000)FF    <1>     test byte [skipDisk], -1
   997                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001632 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   998 00001634 803D(D4060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   999 0000163B 7462                <1>     je .aptbPNDots
  1000                              <1>     ;Copy filename over to internal buffer
  1001 0000163D 56                  <1>     push rsi    ;Save source pointer position
  1002 0000163E 488D35(D4060000)    <1>     lea rsi, fcbName
  1003 00001645 E826FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1004 0000164A 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1005 0000164D 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1006 0000164E E8C6000000          <1>     call .aptbHandleJoin
  1007                              <1> .aptbOkExit:
  1008 00001653 8A05(DF060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1009 00001659 84C0                <1>     test al, al ;If this is a null char, exit
  1010 0000165B 740F                <1>     jz .aptbPNexitNull  ;by readvancing rdi past terminator
  1011 0000165D E8AF560000          <1>     call swapPathSeparator
  1012 00001662 7522                <1>     jnz .aptbPNexitBad  ;If the terminator is not null or pathsep, fail
  1013                              <1>     ;Here if a pathsep.
  1014 00001664 3807                <1>     cmp byte [rdi], al ;Is the char before us a pathsep?
  1015 00001666 751B                <1>     jne .aptbPNexit ;If not, store a pathsep and exit
  1016 00001668 48FFC7              <1>     inc rdi ;Else, just advance rdi to point to the in situ null
  1017                              <1>     return  ;CF is always clear here since ZF=ZE and inc doesnt touch CF
    13                              <2> %%_ret:
    14 0000166B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1018                              <1> .aptbPNexitNull:
  1019                              <1> ;Before storing and advancing, check if the previous char is a pathsep
  1020                              <1> ; and if so, overwrite *it* with a null, ensuring that the previous 
  1021                              <1> ; pathsep is not the starter pathsep
  1022 0000166C 4839DF              <1>     cmp rdi, rbx    ;If equal, store null at rdi directly
  1023 0000166F 7412                <1>     je .aptbPNexit
  1024 00001671 48FFCF              <1>     dec rdi
  1025 00001674 0FB607              <1>     movzx eax, byte [rdi]  ;Get the char in front of the terminating null
  1026 00001677 E895560000          <1>     call swapPathSeparator  ;If it is a pathsep, null it
  1027 0000167C 88E0                <1>     mov al, ah  ;Rezero al
  1028 0000167E 7403                <1>     jz .aptbPNexit  ;If this was a pathsep, simply write the null on it
  1029 00001680 48FFC7              <1>     inc rdi ;Else go forwards before storing the null
  1030                              <1> .aptbPNexit:
  1031 00001683 AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1032 00001684 F8                  <1>     clc     ;Ensure the carry flag is clear
  1033                              <1>     return
    13                              <2> %%_ret:
    14 00001685 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> .aptbPNexitBad:
  1035 00001686 B002                <1>     mov al, errFnf
  1036 00001688 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1037 0000168F C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1038 00001696 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1039 0000169D F9                  <1>     stc
  1040                              <1>     return
    13                              <2> %%_ret:
    14 0000169E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1041                              <1> .aptbPNDots:
  1042                              <1> ;For one dot, we leave rdi where it is
  1043                              <1> ;For two dots, we search backwards for the previous "\"
  1044 0000169F 803D(D5060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1045 000016A6 741B                <1>     je .aptbPNTwoDots
  1046                              <1>     ;Handle being in the root directory differently.
  1047 000016A8 4839FB              <1>     cmp rbx, rdi    ;If rdi points at the first permissible char, skip dec
  1048 000016AB 7403                <1>     jz .aptbPNDotslp
  1049 000016AD 48FFCF              <1>     dec rdi ;Rewind one, point to the separator char itself
  1050                              <1>     ;Skip any backslash chars if pathsep or exit if al = 0, storing it.
  1051                              <1> .aptbPNDotslp:
  1052 000016B0 AC                  <1>     lodsb
  1053 000016B1 84C0                <1>     test al, al
  1054 000016B3 74CE                <1>     jz .aptbPNexit  ;If we pick up a null, exit at this point
  1055 000016B5 E857560000          <1>     call swapPathSeparator
  1056 000016BA 74F4                <1>     jz .aptbPNDotslp
  1057 000016BC 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1058 000016BF B05C                <1>     mov al, "\" ;Store a path separator
  1059 000016C1 EBC0                <1>     jmp short .aptbPNexit
  1060                              <1> 
  1061                              <1> .aptbPNTwoDots:
  1062                              <1>     ;Here we have two dots
  1063                              <1>     ;Walk rdi backwards until a \ is found
  1064 000016C3 4839FB              <1>     cmp rbx, rdi    ;Check we can even move the pointer backwards
  1065 000016C6 750A                <1>     jne .aptbPNDotsLp0   ;If we can, peel back the chars
  1066 000016C8 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" ;IF the char preceeding \ is :, then join check
  1067 000016CE 741F                <1>     je .startOfPath
  1068 000016D0 EB40                <1>     jmp short .aptbPnf
  1069                              <1> .aptbPNDotsLp0:
  1070 000016D2 48FFCF              <1>     dec rdi ;Point to the current pathsep in anticipation for unpeel
  1071                              <1> .aptbPNDotsLp:
  1072 000016D5 48FFCF              <1>     dec rdi
  1073 000016D8 803F5C              <1>     cmp byte [rdi], "\"
  1074 000016DB 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1075 000016DD 4839DF              <1>     cmp rdi, rbx
  1076 000016E0 0F836DFFFFFF        <1>     jae .aptbOkExit
  1077 000016E6 4889DF              <1>     mov rdi, rbx    ;If we passed the start of the path
  1078 000016E9 F8                  <1>     clc ; we are in the root dir,
  1079 000016EA E964FFFFFF          <1>     jmp .aptbOkExit ;Go back to it.
  1080                              <1> .startOfPath:
  1081                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1082 000016EF 488B2D(0D070000)    <1>     mov rbp, qword [workingCDS]
  1083 000016F6 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1084 000016FC 7514                <1>     jne .aptbPnf    ;If it is not, we error return (filenotfound)
  1085                              <1>     ;Now we change the drive letter and return
  1086 000016FE 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1087 00001701 8847FE              <1>     mov byte [rdi - 2], al  ;Replace the char in destination buffer
  1088 00001704 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1089 00001706 E810550000          <1>     call getCDSNotJoin
  1090                              <1>     retc    ;If this errors for some reason, something is really wrong.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000170B 7291                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1091 0000170D E941FFFFFF          <1>     jmp .aptbOkExit
  1092                              <1> .aptbPnf:
  1093 00001712 B803000000          <1>     mov eax, errPnf
  1094                              <1> .aptbErrExit:
  1095 00001717 F9                  <1>     stc
  1096                              <1>     return
    13                              <2> %%_ret:
    14 00001718 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1097                              <1> .aptbHandleJoin:
  1098                              <1> ;Handles join paths.
  1099 00001719 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1100 0000171A 4889DE              <1>     mov rsi, rbx    ;Move the start of the buffer to rsi
  1101 0000171D E802000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1102 00001722 5E                  <1>     pop rsi
  1103                              <1>     return
    13                              <2> %%_ret:
    14 00001723 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1104                              <1> 
  1105                              <1> handleJoin:
  1106                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1107                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1108                              <1> ;Input:
  1109                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1110                              <1> ;Output:
  1111                              <1> ;If no match, no effect.
  1112                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1113                              <1> ; join drive. rsi is advanced to the next path componant.
  1114                              <1> ;If CF=CY => Disk detection error
  1115 00001724 51                  <1>     push rcx
  1116 00001725 55                  <1>     push rbp
  1117 00001726 488B2D(0D070000)    <1>     mov rbp, qword [workingCDS]
  1118 0000172D 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1119 00001731 F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1120 00001737 7408                <1>     jz .okToGo
  1121 00001739 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1122 0000173F 746E                <1>     jz .exitNoCrit
  1123                              <1> .okToGo:
  1124 00001741 E839590000          <1>     call dosCrit1Enter
  1125 00001746 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1126 0000174D 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1127                              <1> .checkCDS:
  1128 0000174F 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1129 00001755 7542                <1>     jne .gotoNextCDS
  1130                              <1> .scanCDSName:
  1131                              <1> ;Get the length of the CDS path componant to check
  1132 00001757 51                  <1>     push rcx
  1133 00001758 57                  <1>     push rdi
  1134 00001759 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1135 0000175A 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1136 0000175D 0FB74559            <1>     movzx eax, word [rbp + cds.wBackslashOffset]
  1137 00001761 FFC0                <1>     inc eax ;Add one to push it past the backslash
  1138 00001763 4801C7              <1>     add rdi, rax    ;Add this offset to rdi
  1139 00001766 E8E4550000          <1>     call strlen     ;Get length of the path componant in ecx
  1140 0000176B FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1141 0000176D F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1142 0000176F 7525                <1>     jnz .notString
  1143                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1144 00001771 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1145 00001772 E89A550000          <1>     call swapPathSeparator
  1146 00001777 7407                <1>     jz .goodString
  1147 00001779 84C0                <1>     test al, al
  1148 0000177B 7519                <1>     jnz .notString
  1149 0000177D 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1150                              <1> .goodString:
  1151                              <1>     ;Here we know we have the right string.
  1152 00001780 59                  <1>     pop rcx ;Trash original rsi
  1153 00001781 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1154 00001782 59                  <1>     pop rcx 
  1155 00001783 48892D(0D070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1156 0000178A 57                  <1>     push rdi
  1157 0000178B 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1158 0000178E E89F510000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1159 00001793 5F                  <1>     pop rdi
  1160 00001794 EB14                <1>     jmp short .exit ;If return with CF=CY, this failed. Error exit
  1161                              <1> .notString:
  1162 00001796 5E                  <1>     pop rsi
  1163 00001797 5F                  <1>     pop rdi
  1164 00001798 59                  <1>     pop rcx
  1165                              <1> .gotoNextCDS:
  1166 00001799 4881C55B000000      <1>     add rbp, cds_size
  1167 000017A0 FFC1                <1>     inc ecx 
  1168 000017A2 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1169 000017A8 75A5                <1>     jnz .checkCDS
  1170                              <1> .exit:
  1171 000017AA E8DA580000          <1>     call dosCrit1Exit
  1172                              <1> .exitNoCrit:
  1173 000017AF 5D                  <1>     pop rbp
  1174 000017B0 59                  <1>     pop rcx
  1175                              <1>     return
    13                              <2> %%_ret:
    14 000017B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1176                              <1> 
  1177                              <1> checkDevPath:
  1178                              <1> ;Called only if the file/directory was not found on disk.
  1179                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1180                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1181                              <1> ; and check to see if it is a char device. If it is, build a directory
  1182                              <1> ; If it is not, proceed with the request fail.
  1183                              <1> ;
  1184                              <1> ;Input: rsi = Pointer to the next path spec
  1185                              <1> ;Output: CF=NC => Char device found, directory built
  1186                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1187 000017B2 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1188                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017B9 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1189 000017BB 803D(DF060000)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1190 000017C2 7459                <1>     je .notOk                      
  1191                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1192 000017C4 50                  <1>     push rax
  1193 000017C5 48B844455620202020- <1>     mov rax, "DEV     "
  1193 000017CE 20                  <1>
  1194 000017CF 483905(D4060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1195 000017D6 58                  <1>     pop rax
  1196 000017D7 7544                <1>     jne .notOk
  1197 000017D9 813D(DC060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1197 000017E1 205C                <1>
  1198 000017E3 7538                <1>     jne .notOk
  1199                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1200                              <1>     ; looking for a device driver
  1201                              <1>     ;First append it to rdi 
  1202 000017E5 B84445565C          <1>     mov eax, "DEV\" 
  1203 000017EA AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1204 000017EB 57                  <1>     push rdi
  1205 000017EC 488D3D(D4060000)    <1>     lea rdi, fcbName
  1206 000017F3 E830F9FFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1207                              <1>     ;Returns in al the terminating char of the source string
  1208 000017F8 5F                  <1>     pop rdi
  1209                              <1>     ;If al is a pathsep, fail
  1210 000017F9 E813550000          <1>     call swapPathSeparator
  1211 000017FE 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1212 00001800 30C0                <1>     xor al, al
  1213 00001802 8805(DF060000)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1214 00001808 53                  <1>     push rbx
  1215 00001809 E844000000          <1>     call checkIfCharDevice
  1216 0000180E 5B                  <1>     pop rbx ;Don't need bh yet
  1217 0000180F 720C                <1>     jc .notOk
  1218 00001811 E873000000          <1>     call buildCharDir
  1219                              <1>     ;Here the device was determined to be a char device.
  1220                              <1>     ;A dummy directory entry was built for it.
  1221                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1222                              <1>     ; Do not Find Next!
  1223                              <1> .copyName:
  1224 00001816 E855F9FFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1225 0000181B F8                  <1>     clc
  1226                              <1>     return
    13                              <2> %%_ret:
    14 0000181C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1227                              <1> .notOk:
  1228 0000181D B802000000          <1>     mov eax, errFnf
  1229 00001822 F9                  <1>     stc
  1230                              <1>     return
    13                              <2> %%_ret:
    14 00001823 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1231                              <1> .charDevSearch:
  1232 00001824 53                  <1>     push rbx
  1233 00001825 E828000000          <1>     call checkIfCharDevice
  1234 0000182A 5B                  <1>     pop rbx ;Dont need bh yet
  1235 0000182B 72F0                <1>     jc .notOk
  1236 0000182D E857000000          <1>     call buildCharDir
  1237 00001832 803D(DF060000)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1238 00001839 750C                <1>     jne .cds2
  1239 0000183B 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1240 0000183F 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1241 00001841 48FFCF              <1>     dec rdi
  1242 00001844 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1243 00001846 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1244                              <1> .cds2:
  1245 00001847 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1246 0000184E 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1247 00001850 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1248                              <1>     return
    13                              <2> %%_ret:
    14 00001851 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1251                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1252                              <1> ; device driver chain. 
  1253                              <1> ;Output: CF=CY if not found
  1254                              <1> ;        CF=NC if found
  1255                              <1> ;           BH = Low byte of the device attribute word
  1256 00001852 50                  <1>     push rax
  1257 00001853 57                  <1>     push rdi
  1258 00001854 488B05(D4060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1259 0000185B 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1260                              <1> .checkName:
  1261 00001862 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1262 00001866 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1263 00001868 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1264 0000186B 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1265 0000186D 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1266 00001870 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1267 00001873 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1268 00001877 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1269                              <1> .walkList:
  1270 00001879 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1271 0000187C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1272 00001883 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1273 00001885 F9                  <1>     stc
  1274                              <1> .exit:
  1275 00001886 5F                  <1>     pop rdi
  1276 00001887 58                  <1>     pop rax
  1277                              <1>     return
    13                              <2> %%_ret:
    14 00001888 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1278                              <1> 
  1279                              <1> buildCharDir:
  1280                              <1> ;Build a dummy directory entry for the char device in FCBName
  1281                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1282 00001889 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1283                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001890 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1284 00001892 50                  <1>     push rax
  1285 00001893 57                  <1>     push rdi
  1286 00001894 C605(DF060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1287 0000189B 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1288                              <1>     ;Zero the directory copy (32 bytes)
  1289 000018A2 50                  <1>     push rax
  1290 000018A3 51                  <1>     push rcx
  1291 000018A4 57                  <1>     push rdi
  1292 000018A5 31C0                <1>     xor eax, eax    ;Zero rax
  1293 000018A7 B904000000          <1>     mov ecx, 4
  1294 000018AC F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1295 000018AF 5F                  <1>     pop rdi
  1296 000018B0 59                  <1>     pop rcx
  1297 000018B1 58                  <1>     pop rax
  1298 000018B2 488B05(D4060000)    <1>     mov rax, qword [fcbName]
  1299 000018B9 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1300 000018BC B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1301 000018C1 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1302 000018C4 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1303                              <1>     ;Get date and time and set the write time in the directory entry
  1304 000018C8 E8C1110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1305 000018CD E8A7120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1306 000018D2 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1307 000018D5 31C0                <1>     xor eax, eax
  1308 000018D7 5F                  <1>     pop rdi
  1309 000018D8 58                  <1>     pop rax
  1310                              <1>     return
    13                              <2> %%_ret:
    14 000018D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1311                              <1> 
  1312                              <1> checkFailingComp:
  1313                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1314                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1315                              <1> ;Returns: ZF=ZE => Last path componant
  1316                              <1> ;         ZF=NZ => Not last path componant
  1317 000018DA 50                  <1>     push rax
  1318 000018DB 8A05(DF060000)      <1>     mov al, byte [fcbName + 11]
  1319 000018E1 84C0                <1>     test al, al
  1320 000018E3 58                  <1>     pop rax
  1321                              <1>     return
    13                              <2> %%_ret:
    14 000018E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 000018E5 4889D7              <1>     mov rdi, rdx
     8 000018E8 E862540000          <1>     call strlen
     9 000018ED 81F940000000        <1>     cmp ecx, 64
    10 000018F3 7607                <1>     jbe .okLength
    11                              <1> .badPath:
    12 000018F5 B003                <1>     mov al, errPnf
    13 000018F7 E9CE570000          <1>     jmp extErrExit
    14                              <1> .okLength:
    15 000018FC 4889D6              <1>     mov rsi, rdx
    16 000018FF E8B5540000          <1>     call checkPathspecOK
    17 00001904 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    18                              <1> .pathOk:
    19 00001906 E842550000          <1>     call scanPathWC
    20 0000190B 72E8                <1>     jc .badPath ;Dont allow wildcards
    21                              <1>     ;Path is ok, now proceed
    22 0000190D 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    23 00001914 E862F9FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    24                              <1>     ;If the path exists, exit error
    25 00001919 0F83AB570000        <1>     jnc extErrExit
    26                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    27 0000191F E8B6FFFFFF          <1>     call checkFailingComp
    28 00001924 0F85A0570000        <1>     jnz extErrExit
    29                              <1>     ;So all is well, the new subdirectories name is in fcbName
    30                              <1>     ;The parent dir's directory entry is in the curDirCopy
    31 0000192A E83B520000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    32                              <1>     ;returns in rdi the working cds ptr
    33 0000192F 7312                <1>     jnc .notNet
    34 00001931 B803110000          <1>     mov eax, 1103h
    35 00001936 CD4F                <1>     int 4fh
    36 00001938 0F828C570000        <1>     jc extErrExit
    37 0000193E E979570000          <1>     jmp extGoodExit
    38                              <1> .notNet:
    39 00001943 E837570000          <1>     call dosCrit1Enter
    40                              <1>     ;Current dpb ptr is already set
    41                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    42                              <1>     ;First we make a dummy dir in curDirCopy
    43 00001948 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
    44 0000194F 488D35(D4060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    45 00001956 488D3D(59060000)    <1>     lea rdi, curDirCopy
    46 0000195D 48A5                <1>     movsq   ;Copy the name over
    47 0000195F A5                  <1>     movsd
    48 00001960 E829110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    49 00001965 E80F120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    50 0000196A 8905(67060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    51 00001970 8905(6F060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    52 00001976 31C0                <1>     xor eax, eax
    53 00001978 8905(75060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    54 0000197E C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    55 00001985 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
    56                              <1> .searchForDirSpace:
    57 0000198B 8905(7F070000)      <1>     mov dword [dirClustA], eax
    58 00001991 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    59 00001993 668905(83070000)    <1>     mov word [dirSect], ax
    60 0000199A 8905(85070000)      <1>     mov dword [dirEntry], eax
    61 000019A0 E8C6040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    62 000019A5 7328                <1>     jnc .dirEntryFnd
    63 000019A7 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    63 000019AF 0000                <1>
    64 000019B1 0F844A010000        <1>     je .bad ;Set CF and exit
    65 000019B7 E8F9050000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    66 000019BC 0F823F010000        <1>     jc .bad
    67 000019C2 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    68 000019C7 0F8434010000        <1>     je .bad
    69                              <1>     ;Else eax = Newly allocated cluster
    70 000019CD EBBC                <1>     jmp short .searchForDirSpace
    71                              <1> .dirEntryFnd:
    72                              <1> ;rdi points to current directory copy
    73                              <1> ;rsi now points to offset in the buffer to write the entry to
    74                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    75 000019CF 488B1D(39070000)    <1>     mov rbx, qword [currBuff]
    76 000019D6 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    77                              <1>      
    78 000019DA 488905(41070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    79 000019E1 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
    80 000019E8 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
    81 000019EB 668935(49070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
    82                              <1> ;Must now request a cluster and sanitise it
    83 000019F2 E849F1FFFF          <1>     call startNewChain  ;Get cluster number in eax
    84 000019F7 0F8209010000        <1>     jc .badExit
    85 000019FD E8E6050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
    86 00001A02 0F82FE000000        <1>     jc .badExit
    87                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
    88 00001A08 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
    89 00001A0F C1E810              <1>     shr eax, 10h    ;Get high word low
    90 00001A12 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
    91 00001A19 488B05(41070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
    92 00001A20 E886EFFFFF          <1>     call getBufForDirNoFile
    93 00001A25 0F82DB000000        <1>     jc .badExit
    94 00001A2B 0FB705(49070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
    95 00001A32 488D35(59060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
    96 00001A39 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
    97 00001A3E B904000000          <1>     mov ecx, 4
    98 00001A43 F348A5              <1>     rep movsq   ;Copy over the buffered directory
    99 00001A46 E8D5EDFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   100                              <1>     ;Now need to read in data sector and make two entries . and ..
   101 00001A4B 57                  <1>     push rdi
   102 00001A4C 51                  <1>     push rcx
   103 00001A4D B90B000000          <1>     mov ecx, 11
   104 00001A52 488D3D(59060000)    <1>     lea rdi, curDirCopy
   105 00001A59 B020                <1>     mov al, " "
   106 00001A5B F3AA                <1>     rep stosb
   107 00001A5D 59                  <1>     pop rcx
   108 00001A5E 5F                  <1>     pop rdi
   109 00001A5F 48B82E000000000000- <1>     mov rax, "."
   109 00001A68 00                  <1>
   110 00001A69 8805(59060000)      <1>     mov byte [curDirCopy], al
   111 00001A6F 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   112 00001A76 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   113 00001A7D C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   114 00001A84 C1E210              <1>     shl edx, 10h
   115 00001A87 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   116 00001A89 E838F0FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   117 00001A8E E818EFFFFF          <1>     call getBufForDirNoFile
   118 00001A93 7271                <1>     jc .badExit
   119                              <1>     ;rbx has buffer pointer now
   120 00001A95 488D35(59060000)    <1>     lea rsi, curDirCopy
   121 00001A9C 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   122 00001AA0 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   123 00001AA5 F348A5              <1>     rep movsq
   124                              <1>     ;Now create .. entry
   125 00001AA8 C605(5A060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   126 00001AAF 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   127 00001AB5 E8A1EFFFFF          <1>     call getFATtype
   128 00001ABA 81F902000000        <1>     cmp ecx, 2
   129 00001AC0 7207                <1>     jb .notFAT32
   130 00001AC2 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   131 00001AC5 7502                <1>     jne .notFAT32
   132 00001AC7 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   133                              <1> .notFAT32:
   134 00001AC9 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   135 00001AD0 C1E810              <1>     shr eax, 10h
   136 00001AD3 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   137 00001ADA 488D35(59060000)    <1>     lea rsi, curDirCopy
   138 00001AE1 B904000000          <1>     mov ecx, 4
   139 00001AE6 F348A5              <1>     rep movsq
   140 00001AE9 E832EDFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   141 00001AEE E8FBECFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   142 00001AF3 7211                <1>     jc .badExit
   143                              <1> .okExit:
   144                              <1>     ;AND WE ARE DONE!
   145 00001AF5 E88F550000          <1>     call dosCrit1Exit
   146 00001AFA 31C0                <1>     xor eax, eax
   147 00001AFC E9BB550000          <1>     jmp extGoodExit
   148                              <1> .bad:
   149 00001B01 B805000000          <1>     mov eax, errAccDen
   150                              <1> .badExit:
   151 00001B06 E8ACECFFFF          <1>     call cancelWriteThroughBuffers
   152 00001B0B E879550000          <1>     call dosCrit1Exit
   153 00001B10 E9B5550000          <1>     jmp extErrExit
   154                              <1> 
   155                              <1> removeDIR:         ;ah = 3Ah
   156 00001B15 4889D7              <1>     mov rdi, rdx
   157 00001B18 E832520000          <1>     call strlen
   158 00001B1D 81F940000000        <1>     cmp ecx, 64
   159 00001B23 7607                <1>     jbe .okLength
   160                              <1> .badPath:
   161 00001B25 B003                <1>     mov al, errPnf
   162 00001B27 E99E550000          <1>     jmp extErrExit
   163                              <1> .okLength:
   164 00001B2C 4889D6              <1>     mov rsi, rdx
   165 00001B2F E885520000          <1>     call checkPathspecOK
   166 00001B34 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   167                              <1> .pathOk:
   168 00001B36 E812530000          <1>     call scanPathWC
   169 00001B3B 72E8                <1>     jc .badPath ;Dont allow wildcards
   170                              <1>     ;Path is ok, now proceed
   171 00001B3D 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   172 00001B44 E82EF7FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   173 00001B49 72DA                <1>     jc .badPath    ;Path Doesn't exist
   174 00001B4B E81A500000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   175 00001B50 7312                <1>     jnc .notNet
   176 00001B52 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   177 00001B57 CD4F                <1>     int 4fh
   178 00001B59 0F826B550000        <1>     jc extErrExit
   179 00001B5F E958550000          <1>     jmp extGoodExit
   180                              <1> .notNet:
   181 00001B64 E816550000          <1>     call dosCrit1Enter
   182 00001B69 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   183                              <1>     ;Now let use check that our directory is not the CDS currentdir
   184 00001B70 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
   185 00001B77 488D3D(1D050000)    <1>     lea rdi, buffer1
   186 00001B7E E8CC510000          <1>     call strlen ;Get the length of the full qualified name in ecx
   187 00001B83 66890D(49070000)    <1>     mov word [pathLen], cx
   188 00001B8A E8D7510000          <1>     call strcmp ;Then compare rdi to CDS string
   189 00001B8F 750F                <1>     jnz .notEqual
   190 00001B91 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   191 00001B96 E8EE540000          <1>     call dosCrit1Exit
   192 00001B9B E92A550000          <1>     jmp extErrExit
   193                              <1> .notEqual:
   194 00001BA0 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   195                              <1>     ;If the given path length is one more than the backslash offset
   196                              <1>     ; due to the terminating null, then the user is trying to delete the 
   197                              <1>     ; root dir. Fail this.
   198 00001BA3 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   199 00001BA7 FFC1                <1>     inc ecx
   200 00001BA9 663B0D(49070000)    <1>     cmp cx, word [pathLen]
   201 00001BB0 0F8423010000        <1>     je .accessDenied
   202 00001BB6 E8C3020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   203                              <1>     ;for the entry in the sector we are hoping to delete
   204 00001BBB 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   205 00001BC2 C1E010              <1>     shl eax, 10h
   206 00001BC5 0FB71D(73060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   207 00001BCC 09D8                <1>     or eax, ebx
   208 00001BCE 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   209 00001BD4 E8EDEEFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   210 00001BD9 E8CDEDFFFF          <1>     call getBufForDirNoFile
   211 00001BDE 0F82FA000000        <1>     jc .exitBad
   212                              <1>     ;rbx points to buffer
   213 00001BE4 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   214 00001BE8 48B82E202020202020- <1>     mov rax, ".       "
   214 00001BF1 20                  <1>
   215 00001BF2 483906              <1>     cmp qword [rsi], rax
   216 00001BF5 0F85DE000000        <1>     jne .accessDenied
   217 00001BFB B42E                <1>     mov ah, "." ;Screw the partial stall
   218 00001BFD 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   219 00001C01 0F85D2000000        <1>     jne .accessDenied
   220 00001C07 4881C620000000      <1>     add rsi, fatDirEntry_size
   221 00001C0E 488D3D(59060000)    <1>     lea rdi, curDirCopy
   222 00001C15 B904000000          <1>     mov ecx, 4
   223 00001C1A F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   224                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   225                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   226 00001C1D 488D3D(D4060000)    <1>     lea rdi, fcbName
   227 00001C24 B03F                <1>     mov al, "?"
   228 00001C26 B90B000000          <1>     mov ecx, 11
   229 00001C2B F3AA                <1>     rep stosb   ;Store the pattern to search for
   230 00001C2D 30C0                <1>     xor al, al  ;Store a terminating zero
   231 00001C2F AA                  <1>     stosb
   232 00001C30 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   233 00001C36 50                  <1>     push rax    ;Save on stack temporarily
   234 00001C37 8905(7F070000)      <1>     mov dword [dirClustA], eax
   235 00001C3D 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   236 00001C3F 668905(83070000)    <1>     mov word [dirSect], ax
   237 00001C46 C705(85070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   237 00001C4E 0000                <1>
   238 00001C50 C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   239 00001C57 58                  <1>     pop rax
   240 00001C58 E869EEFFFF          <1>     call getStartSectorOfCluster
   241 00001C5D E86BEDFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   242 00001C62 727A                <1>     jc .exitBad
   243 00001C64 E8DBF3FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   244 00001C69 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   245 00001C70 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   246 00001C76 C605(68040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   247 00001C7D E81FF3FFFF          <1>     call searchDir.rmdirEP
   248 00001C82 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   249                              <1>     ;Else, this is a empty dir, we can remove it
   250                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   251 00001C84 488B05(41070000)    <1>     mov rax, qword [tempSect]
   252 00001C8B E83DEDFFFF          <1>     call getBufForDOS
   253 00001C90 724C                <1>     jc .exitBad
   254 00001C92 E8ADF3FFFF          <1>     call adjustDosDirBuffer
   255 00001C97 0FB705(49070000)    <1>     movzx eax, word [entry]
   256 00001C9E 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 00001CA2 4801C6              <1>     add rsi, rax    
   258 00001CA5 8A05(03070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   259 00001CAB 8806                <1>     mov byte [rsi], al  ;Store delchar there
   260 00001CAD 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   261 00001CB1 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   262 00001CB5 E866EBFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   263 00001CBA C1E210              <1>     shl edx, 10h
   264 00001CBD 09D0                <1>     or eax, edx
   265                              <1>     ;Now remove the FAT chain
   266 00001CBF E8BBEFFFFF          <1>     call unlinkFAT
   267 00001CC4 7218                <1>     jc .exitBad
   268 00001CC6 E823EBFFFF          <1>     call writeThroughBuffers
   269 00001CCB 7211                <1>     jc .exitBad
   270 00001CCD E8B7530000          <1>     call dosCrit1Exit
   271 00001CD2 31C0                <1>     xor eax, eax
   272 00001CD4 E9E3530000          <1>     jmp extGoodExit
   273                              <1> .accessDenied:
   274 00001CD9 B805000000          <1>     mov eax, errAccDen
   275                              <1> .exitBad:
   276 00001CDE E8D4EAFFFF          <1>     call cancelWriteThroughBuffers
   277 00001CE3 F9                  <1>     stc
   278 00001CE4 E8A0530000          <1>     call dosCrit1Exit
   279 00001CE9 E9DC530000          <1>     jmp extErrExit
   280                              <1> 
   281                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   282                              <1> ;Input: rdx = Pointer to ASCIIZ string
   283 00001CEE 4889D7              <1>     mov rdi, rdx
   284 00001CF1 E859500000          <1>     call strlen
   285 00001CF6 81F940000000        <1>     cmp ecx, 64
   286 00001CFC 7607                <1>     jbe .okLength
   287                              <1> .badPath:
   288 00001CFE B003                <1>     mov al, errPnf
   289 00001D00 E9C5530000          <1>     jmp extErrExit
   290                              <1> .okLength:
   291 00001D05 4889D6              <1>     mov rsi, rdx
   292 00001D08 E8AC500000          <1>     call checkPathspecOK
   293 00001D0D 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   294 00001D0F E8A3510000          <1>     call checkPathNet
   295 00001D14 74E8                <1>     jz .badPath ;Or Net paths
   296                              <1>     ;Path is ok, now proceed
   297 00001D16 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   298 00001D1D E855F5FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   299 00001D22 0F82A2530000        <1>     jc extErrExit   ;Exit with error code in eax
   300                              <1>     ;The path must've been ok, so now copy the path into the CDS
   301                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   302 00001D28 488B35(0D070000)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   303 00001D2F 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   304 00001D35 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   305 00001D37 488D3D(79060000)    <1>     lea rdi, tmpCDS
   306 00001D3E B95B000000          <1>     mov ecx, cds_size
   307 00001D43 F3A4                <1>     rep movsb
   308                              <1>     ;If the path is longer than 67, call it an invalid path
   309 00001D45 488D3D(1D050000)    <1>     lea rdi, buffer1
   310 00001D4C E8FE4F0000          <1>     call strlen ;Get the length of this path
   311 00001D51 81F943000000        <1>     cmp ecx, 67
   312 00001D57 77A5                <1>     ja .badPath
   313 00001D59 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   314 00001D5C 488D3D(79060000)    <1>     lea rdi, tmpCDS
   315 00001D63 F3A4                <1>     rep movsb   ;Copy the path over
   316                              <1>     ;Now get the start cluster from the directory copy
   317 00001D65 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   318 00001D6C 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   319 00001D73 C1E010              <1>     shl eax, 10h
   320 00001D76 09D0                <1>     or eax, edx ;Add low bits to eax
   321 00001D78 8905(C6060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   322 00001D7E 488D35(79060000)    <1>     lea rsi, tmpCDS
   323 00001D85 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   324 00001D8C B95B000000          <1>     mov ecx, cds_size
   325 00001D91 E8E9520000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   326 00001D96 F3A4                <1>     rep movsb
   327 00001D98 E8EC520000          <1>     call dosCrit1Exit
   328 00001D9D 31C0                <1>     xor eax, eax
   329 00001D9F E918530000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   330                              <1> .net:
   331                              <1> ;SDA Vars are setup for this request
   332 00001DA4 B805110000          <1>     mov eax, 1105h
   333 00001DA9 CD4F                <1>     int 4fh
   334 00001DAB 0F8219530000        <1>     jc extErrExit
   335 00001DB1 E906530000          <1>     jmp extGoodExit
   336                              <1> getCurrentDIR:     ;ah = 47h
   337                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   338                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   339 00001DB6 E8C4520000          <1>     call dosCrit1Enter
   340 00001DBB 88D0                <1>     mov al, dl  ;Move drive number into al
   341 00001DBD E8594E0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   342 00001DC2 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   343                              <1> .badExit:
   344 00001DC4 E8C0520000          <1>     call dosCrit1Exit
   345 00001DC9 B80F000000          <1>     mov eax, errBadDrv
   346 00001DCE E9F7520000          <1>     jmp extErrExit
   347                              <1> .okDrive:
   348                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   349 00001DD3 56                  <1>     push rsi
   350 00001DD4 57                  <1>     push rdi
   351 00001DD5 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   352 00001DDC E8514B0000          <1>     call getDiskDPB
   353 00001DE1 5F                  <1>     pop rdi
   354 00001DE2 5E                  <1>     pop rsi
   355 00001DE3 0F82E1520000        <1>     jc extErrExit
   356                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   357 00001DE9 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   358 00001DEC 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   359 00001DF3 31C0                <1>     xor eax, eax
   360 00001DF5 FFC8                <1>     dec eax
   361 00001DF7 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   362 00001DFA 750E                <1>     jne .writePathInBuffer
   363 00001DFC FFC0                <1>     inc eax
   364 00001DFE 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   365                              <1>     ;Here we now add a terminating null at wBackslashOffset
   366 00001E01 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   367 00001E05 C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   368                              <1> .writePathInBuffer:
   369 00001E0A 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   370 00001E0E FFC0                <1>     inc eax ;Go past the backslash
   371 00001E10 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   372 00001E13 E8464F0000          <1>     call strcpy
   373 00001E18 E86C520000          <1>     call dosCrit1Exit
   374 00001E1D B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   375 00001E22 E995520000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   376                              <1> 
   377                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   378 00001E27 50                  <1>     push rax
   379 00001E28 B800600000          <1>     mov eax, 6000h
   380 00001E2D CD41                <1>     int 41h
   381 00001E2F 58                  <1>     pop rax
   382                              <1>     return
    13                              <2> %%_ret:
    14 00001E30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1>     
   384                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   385                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   386 00001E31 E8834F0000          <1>     call checkPathspecOK    ;This preserves rsi
   387 00001E36 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   388 00001E38 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   389                              <1> .badPath:
   390 00001E3A B803000000          <1>     mov eax, errPnf
   391 00001E3F E986520000          <1>     jmp extErrExit
   392                              <1> .pathspecOk:
   393 00001E44 57                  <1>     push rdi    ;Save the destination
   394 00001E45 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   395 00001E4C E8F5F3FFFF          <1>     call canonicaliseFileName
   396 00001E51 5F                  <1>     pop rdi
   397 00001E52 0F8272520000        <1>     jc extErrExit
   398 00001E58 488D35(1D050000)    <1>     lea rsi, buffer1
   399 00001E5F E8FA4E0000          <1>     call strcpy
   400 00001E64 31C0                <1>     xor eax, eax
   401 00001E66 E951520000          <1>     jmp extGoodExit
   402                              <1> 
   403                              <1> ;-----------------------------------
   404                              <1> ;    General Directory Routines    :
   405                              <1> ;-----------------------------------
   406                              <1> 
   407                              <1> findFreeDiskDirEntry:
   408                              <1> ;Find a space in the directory we are searching for a directory entry
   409                              <1> ;Accept first entry starting with a 0E5h or 00h
   410                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   411                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   412                              <1> ; be called for CDS's that are NOT net CDS's).
   413                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   414                              <1> ;       Directory vars must be set up for the directory we are searching in
   415                              <1> ;Output: CF=CY => Error, eax has error code
   416                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   417 00001E6B 8A05(03070000)      <1>     mov al, byte [delChar]
   418 00001E71 8805(D4060000)      <1>     mov byte [fcbName], al
   419 00001E77 E8E8F0FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   420                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001E7C 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421                              <1> ;Free entry found, dir variables are set for the free entry. 
   422                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   423                              <1> getDiskDirectoryEntry:
   424                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   425                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   426                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   427                              <1> ;        qword [tempSect] = Disk sector number of directory
   428                              <1> ;        word [entry] = 32 byte offset into sector
   429                              <1> ;        CF=CY => Error, exit 
   430 00001E7E 53                  <1>     push rbx
   431 00001E7F 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  
   432                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   433                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   434 00001E85 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]
   435 00001E8C 85C0                <1>     test eax, eax
   436 00001E8E 7407                <1>     jz .skipCluster
   437 00001E90 E831ECFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   438 00001E95 EB1B                <1>     jmp short .skipOldFat
   439                              <1> .skipCluster:
   440 00001E97 55                  <1>     push rbp
   441 00001E98 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   442 00001E9F 0FB705(83070000)    <1>     movzx eax, word [dirSect]
   443 00001EA6 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   444                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   445 00001EA9 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   446 00001EAD 5D                  <1>     pop rbp
   447 00001EAE 7202                <1>     jb .skipOldFat
   448 00001EB0 F9                  <1>     stc
   449                              <1>     return
    13                              <2> %%_ret:
    14 00001EB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   450                              <1> .skipOldFat:
   451 00001EB2 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   452 00001EB5 488905(41070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   453 00001EBC E80CEBFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   454 00001EC1 5B                  <1>     pop rbx
   455                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001EC2 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   456 00001EC4 53                  <1>     push rbx
   457 00001EC5 488B1D(39070000)    <1>     mov rbx, qword [currBuff]
   458 00001ECC E873F1FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   459                              <1>     ;Above function gets data buffer ptr in rsi
   460 00001ED1 0FB705(83070000)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   461 00001ED8 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   462 00001EDC F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   463                              <1>     ; the current sector
   464 00001EDE C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   465 00001EE1 8B1D(85070000)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   466 00001EE7 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   467 00001EE9 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   468 00001EEC 66891D(49070000)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   469 00001EF3 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   470 00001EF6 5B                  <1>     pop rbx
   471                              <1>     return
    13                              <2> %%_ret:
    14 00001EF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> 
   474                              <1> updateDirectoryEntryForFile:    
   475                              <1> ;Updates the directory entry for disk files
   476                              <1> ;Called with:
   477                              <1> ;   [workingDPB] = DPB pointer for the disk device
   478                              <1> ;   [currentSFT] = Current SFT pointer
   479 00001EF8 50                  <1>     push rax
   480 00001EF9 53                  <1>     push rbx
   481 00001EFA 57                  <1>     push rdi
   482 00001EFB 55                  <1>     push rbp
   483                              <1> 
   484 00001EFC E87E510000          <1>     call dosCrit1Enter
   485 00001F01 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
   486 00001F08 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   487 00001F0F 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   488 00001F15 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   489 00001F1B 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   490 00001F21 751B                <1>     jnz .skipDT
   491                              <1>     ;Get date and time words and add them to the directory entry
   492 00001F23 E8660B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   493                              <1>     ;Build date and time words
   494 00001F28 E84C0C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   495                              <1>     ;Update SFT fields
   496 00001F2D 66894713            <1>     mov word [rdi + sft.wTime], ax
   497 00001F31 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   498 00001F34 66894715            <1>     mov word [rdi + sft.wDate], ax
   499 00001F38 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   500                              <1> .skipDT:
   501                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   502                              <1> ; we skip all of this
   503 00001F3E 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   504 00001F44 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   505 00001F46 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   506 00001F4A E88CEAFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   507 00001F4F 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   508                              <1>     ;Now we write the changes to the sector
   509                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   510 00001F51 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   511 00001F55 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   512 00001F59 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   513 00001F5C 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   514 00001F5F 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   515 00001F62 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   516 00001F65 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   517 00001F69 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   518 00001F6D 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   519 00001F71 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   520 00001F75 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   521 00001F79 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   522 00001F7C 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   523 00001F80 C1E810              <1>     shr eax, 10h
   524 00001F83 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   525                              <1>     ;Directory sector updated and marked to be flushed to disk!
   526 00001F87 31C0                <1>     xor eax, eax
   527 00001F89 FF15(2F010000)      <1>     call qword [updateDirShare]
   528 00001F8F F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   529 00001F90 E88BE8FFFF          <1>     call markBufferDirty
   530 00001F95 E854E8FFFF          <1>     call writeThroughBuffers
   531 00001F9A 720A                <1>     jc .exitBad
   532                              <1> .exit:
   533 00001F9C E8E8500000          <1>     call dosCrit1Exit
   534 00001FA1 5D                  <1>     pop rbp
   535 00001FA2 5F                  <1>     pop rdi
   536 00001FA3 5B                  <1>     pop rbx
   537 00001FA4 58                  <1>     pop rax
   538                              <1>     return
    13                              <2> %%_ret:
    14 00001FA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   539                              <1> .exitBad:
   540 00001FA6 E80CE8FFFF          <1>     call cancelWriteThroughBuffers
   541 00001FAB 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   542 00001FAC 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   543 00001FB2 9D                  <1>     popfq
   544 00001FB3 EBE7                <1>     jmp short .exit
   545                              <1>     
   546                              <1> growDirectory:
   547                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   548                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   549                              <1> ;                 eax = New Cluster number
   550                              <1> ;               TWO NON CF ERROR CASES.
   551                              <1> ;               If eax = -1 => disk full!
   552                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   553                              <1> ;        CF=CY => Something went wrong. Rip. 
   554 00001FB5 53                  <1>     push rbx
   555 00001FB6 51                  <1>     push rcx
   556 00001FB7 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   557 00001FBD 85C0                <1>     test eax, eax
   558 00001FBF 7424                <1>     jz .exit
   559 00001FC1 E82DEBFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   560 00001FC6 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   561 00001FC8 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   562 00001FCD E894EBFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   563 00001FD2 7211                <1>     jc .exit
   564 00001FD4 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   565 00001FD6 E8EDECFFFF          <1>     call readFAT
   566 00001FDB 7208                <1>     jc .exit
   567 00001FDD E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   568 00001FE2 7201                <1>     jc .exit
   569 00001FE4 F8                  <1>     clc
   570                              <1> .exit:
   571 00001FE5 59                  <1>     pop rcx
   572 00001FE6 5B                  <1>     pop rbx
   573                              <1>     return   
    13                              <2> %%_ret:
    14 00001FE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   574                              <1> sanitiseCluster:
   575                              <1> ;Sanitises the cluster in eax to all zeros
   576                              <1> ;Does not move file pointers
   577                              <1> ;Currently, is only called to sanitise subdirectory clusters
   578                              <1> ;Input: eax = Cluster number
   579                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   580                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   581                              <1> ;        If CF=CY => Error, exit
   582 00001FE8 50                  <1>     push rax
   583 00001FE9 53                  <1>     push rbx
   584 00001FEA 51                  <1>     push rcx
   585 00001FEB 52                  <1>     push rdx
   586 00001FEC 56                  <1>     push rsi
   587 00001FED 55                  <1>     push rbp
   588 00001FEE 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   589 00001FF5 E8CCEAFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   590 00001FFA 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   591 00001FFE FFC2                <1>     inc edx ;Make it a count of sectors
   592                              <1> .getSectorInCluster:
   593 00002000 E889E9FFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   594 00002005 721E                <1>     jc .exitBad
   595 00002007 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   596 0000200B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   597 0000200F 31C0                <1>     xor eax, eax
   598 00002011 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   599 00002013 E808E8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   600                              <1> 
   601 00002018 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   602 0000201A 740A                <1>     jz .exit    ;Jump if we done
   603 0000201C 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   604 00002020 48FFC0              <1>     inc rax ;Goto next sector in cluster
   605 00002023 EBDB                <1>     jmp short .getSectorInCluster
   606                              <1> .exitBad:
   607 00002025 F9                  <1>     stc
   608                              <1> .exit:
   609 00002026 5D                  <1>     pop rbp
   610 00002027 5E                  <1>     pop rsi
   611 00002028 5A                  <1>     pop rdx
   612 00002029 59                  <1>     pop rcx
   613 0000202A 5B                  <1>     pop rbx
   614 0000202B 58                  <1>     pop rax
   615                              <1>     return
    13                              <2> %%_ret:
    14 0000202C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 0000202D 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 0000202E 488D1D(1B050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00002035 48891D(A4040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 0000203C 5B                  <1>     pop rbx
    60 0000203D C705(AC040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00002045 0000                <1>
    61 00002047 668905(1B050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 0000204E 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00002054 0F85A1000000        <1>     jnz .notChar
    64 0000205A 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00002060 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00002066 E8FD4F0000          <1>     call dosPushRegs    ;Save context here
    68 0000206B 488D1DA8DFFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00002072 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00002075 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00002078 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 0000207B 890D(96040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00002081 31C9                <1>     xor ecx, ecx
    75 00002083 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00002086 7506                <1>     jne .skipBsySet
    77 00002088 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 0000208E 66870D(99040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00002095 488D1D(96040000)    <1>     lea rbx, secdReqHdr
    82 0000209C E81C470000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 000020A1 668B3D(99040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 000020A8 F7C700800000        <1>     test edi, drvErrStatus
    85 000020AE 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 000020B0 803D(98040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 000020B7 750C                <1>     jne .notNDRead
    89 000020B9 8A05(A3040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 000020BF 8805(1B050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 000020C5 8A25(9A040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 000020CB F6D4                <1>     not ah
    94 000020CD 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 000020D0 E87C4F0000          <1>     call dosPopRegs ;Get back the context
    96 000020D5 668B05(1B050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 000020DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 000020DD 88CC                <1>     mov ah, cl
   101 000020DF E875410000          <1>     call charDevErr
   102 000020E4 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 000020E6 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 000020E8 E8644F0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 000020ED E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 000020F2 8025(9A040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 000020F9 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 000020FB 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 000020FD 7409                <1>     jz .makeDiskNetReadReq
   115 000020FF FECC                <1>     dec ah
   116 00002101 7421                <1>     jz .makeDiskNetNonDestReq
   117 00002103 FECC                <1>     dec ah
   118 00002105 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00002107 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00002108 E833000000          <1>     call .prepDiskNetIO
   123 0000210D E8A9200000          <1>     call readBytes
   124 00002112 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00002114 E850000000          <1>     call .cleanDiskNetIO
   126 00002119 8A05(1B050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000211F 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 00002121 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00002123 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00002124 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00002127 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 0000212C 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 0000212F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00002130 E80B000000          <1>     call .prepDiskNetIO
   138 00002135 E8C0230000          <1>     call writeBytes
   139 0000213A E82A000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000213F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00002140 8F05(EA040000)      <1>     pop qword [altRet]
   145 00002146 E81D4F0000          <1>     call dosPushRegs
   146 0000214B FF35(17040000)      <1>     push qword [currentDTA]
   147 00002151 488D0D(1B050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 00002158 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 0000215F 31C9                <1>     xor ecx, ecx
   150 00002161 FFC1                <1>     inc ecx ;IO 1 byte only
   151                              <1> .cleanDNIOReturn:
   152 00002163 FF25(EA040000)      <1>     jmp qword [altRet]
   153                              <1> .cleanDiskNetIO:
   154 00002169 8F05(EA040000)      <1>     pop qword [altRet]
   155 0000216F 8F05(17040000)      <1>     pop qword [currentDTA]
   156 00002175 E8D74E0000          <1>     call dosPopRegs
   157 0000217A EBE7                <1>     jmp short .cleanDNIOReturn
   158                              <1> 
   159                              <1> openSFT:
   160                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   161                              <1> ;Input: rdi = SFT pointer
   162 0000217C E8E74E0000          <1>     call dosPushRegs
   163 00002181 B00D                <1>     mov al, drvOPEN
   164 00002183 EB07                <1>     jmp short openCloseCommon
   165                              <1> closeSFT:
   166                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   167 00002185 E8DE4E0000          <1>     call dosPushRegs
   168 0000218A B00E                <1>     mov al, drvCLOSE
   169                              <1> openCloseCommon:
   170                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   171 0000218C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   172 00002192 7469                <1>     jz .exit    ;Exit if so
   173 00002194 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   174 00002198 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   175 0000219C 7512                <1>     jnz .charDev
   176                              <1>     ;Here a disk drive, rdi is a DPB ptr
   177 0000219E 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   178 000021A5 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   179 000021A7 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   180 000021AA 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   181 000021AC 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   182                              <1> .charDev:
   183 000021B0 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   184 000021B6 7445                <1>     jz .exit    ;No, exit!
   185 000021B8 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   186 000021BB 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   187 000021C2 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   188                              <1> .retryEP:
   189 000021C5 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   190 000021C8 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   191 000021CB 50                  <1>     push rax    ;Save the dword
   192 000021CC E8F0450000          <1>     call goDriver
   193 000021D1 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   194 000021D8 F7C700800000        <1>     test edi, drvErrStatus
   195 000021DE 741C                <1>     jz .exitPop
   196                              <1>     ;Error here, check if char or block drive
   197 000021E0 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   198 000021E6 7404                <1>     jz .blockError
   199                              <1>     ;Char error here
   200 000021E8 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   201 000021EA EB04                <1>     jmp short .errorCmn
   202                              <1> .blockError:
   203 000021EC 88C8                <1>     mov al, cl  ;Move drive number into al
   204 000021EE B406                <1>     mov ah, critData    ;Data on block dev error
   205                              <1> .errorCmn:
   206                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   207 000021F0 E864400000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   208 000021F5 B001                <1>     mov al, critRetry   ;al returns user response
   209 000021F7 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   210 000021F9 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   211 000021FA EBC9                <1>     jmp short .retryEP  ;Reset
   212                              <1> .exitPop:
   213 000021FC 58                  <1>     pop rax    
   214                              <1> .exit:
   215 000021FD E84F4E0000          <1>     call dosPopRegs
   216                              <1>     return
    13                              <2> %%_ret:
    14 00002202 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 00002203 E87D010000          <1>     call charIn_B
    17 00002208 50                  <1>     push rax
    18 00002209 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 0000220E 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 0000220F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 00002210 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    26 00002212 3C20                <1>     cmp al, asciiCaret
    27 00002214 0F8286000000        <1>     jb .control
    28 0000221A 3C7F                <1>     cmp al, DEL ;DEL char?
    29 0000221C 7406                <1>     je .skipCurs
    30 0000221E FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 00002224 FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    33 0000222A 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 00002231 56                  <1>     push rsi
    35 00002232 7507                <1>     jnz .skipErrorCheck
    36 00002234 50                  <1>     push rax
    37 00002235 E897020000          <1>     call vConCtrlCheck
    38 0000223A 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 0000223B E81F020000          <1>     call outputOnStdout
    41 00002240 5E                  <1>     pop rsi
    42 00002241 F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002248 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 0000224A 53                  <1>     push rbx
    45 0000224B 56                  <1>     push rsi
    46 0000224C BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 00002251 E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00002256 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 0000225C 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 00002260 F7C300800000        <1>     test ebx, devRedirDev
    52 00002266 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 0000226C F7C380000000        <1>     test ebx, devCharDev
    54 00002272 0F84B2000000        <1>     jz auxOutCmn.exit
    55 00002278 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 0000227D E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00002282 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00002288 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 0000228E 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 00002294 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 0000229B E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 000022A0 3C0D                <1>     cmp al, CR
    64 000022A2 7429                <1>     je .newline
    65 000022A4 3C08                <1>     cmp al, BSP
    66 000022A6 7431                <1>     je .back
    67 000022A8 3C09                <1>     cmp al, TAB
    68 000022AA 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 000022B0 51                  <1>     push rcx
    72 000022B1 0FB60D(CC020000)    <1>     movzx ecx, byte [vConCursPos]
    73 000022B8 80C9F8              <1>     or cl, ~7
    74 000022BB F6D9                <1>     neg cl
    75 000022BD 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 000022C0 B020                <1>     mov al, SPC
    78 000022C2 E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 000022C7 FEC9                <1>     dec cl
    80 000022C9 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 000022CB 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 000022CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 000022CD C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 000022D4 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 000022D9 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    89 000022DF E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 000022E4 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 000022E9 BB03000000          <1>     mov ebx, 3
    94 000022EE E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000022F3 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 000022F5 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 000022F7 E831FDFFFF          <1>     call mainCharIO
    99 000022FC 7408                <1>     jz .signalLoop
   100 000022FE 30E4                <1>     xor ah, ah  ;Read the char in
   101 00002300 E828FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 00002305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00002306 E8A3010000          <1>     call callInt48h
   105 0000230B EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 0000230D 53                  <1>     push rbx
   109 0000230E BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 00002313 EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 00002315 53                  <1>     push rbx
   113 00002316 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 0000231B 88D0                <1>     mov al, dl  ;Get the char into al
   116 0000231D 50                  <1>     push rax
   117 0000231E E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 00002323 58                  <1>     pop rax
   119 00002324 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 00002325 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 0000232A 5E                  <1>     pop rsi
   125 0000232B 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 0000232C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 0000232D 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 0000232F 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 00002331 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 00002337 31DB                <1>     xor ebx, ebx    
   134 00002339 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000233E 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 00002340 488B2D(7A040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 00002347 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 00002349 E8DFFCFFFF          <1>     call mainCharIO
   139 0000234E E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   140 00002353 7507                <1>     jnz .readChar
   141 00002355 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 00002359 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 0000235B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 0000235C 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 00002360 31DB                <1>     xor ebx, ebx
   150 00002362 E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002367 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 00002369 B401                <1>     mov ah, 01  ;ND read for char
   153 0000236B E8BDFCFFFF          <1>     call mainCharIO
   154 00002370 750B                <1>     jnz .getChar
   155 00002372 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 00002374 CD4A                <1>     int 4Ah
   157 00002376 E833010000          <1>     call callInt48h
   158 0000237B EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 0000237D 30E4                <1>     xor ah, ah
   162 0000237F E8A9FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 00002384 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 00002385 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 00002386 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 0000238B 7543                <1>     jnz .pullChar
   171 0000238D 803D(E1190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 00002394 7507                <1>     jne .skiplookahead
   173 00002396 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 00002398 E890FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 0000239D B484                <1>     mov ah, 84h
   177 0000239F CD4A                <1>     int 4ah ;Multitasking keyboard loop
   178 000023A1 66813D(C21A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 000023A9 FF                  <1>
   179 000023AA 751B                <1>     jne .skipClockRead
   180 000023AC E8B74C0000          <1>     call dosPushRegs
   181 000023B1 F8                  <1>     clc ;Clear CF, write primary header to backup
   182 000023B2 E882000000          <1>     call swapPrimaryHeader
   183 000023B7 E8D2060000          <1>     call readDateTimeRecord
   184 000023BC F9                  <1>     stc ;Set CF, write backup to primary header
   185 000023BD E877000000          <1>     call swapPrimaryHeader
   186 000023C2 E88A4C0000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 000023C7 66FF05(C21A0000)    <1>     inc word [keybTicks]
   189 000023CE EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 000023D0 30E4                <1>     xor ah, ah
   192 000023D2 E856FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 000023D7 5E                  <1>     pop rsi
   194 000023D8 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 000023DA 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 000023DC C605(C11A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 000023E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 000023E4 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 000023E7 AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 000023E8 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000023EA 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 000023EC E821FEFFFF          <1>     call charOut_B.in
   208 000023F1 EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 000023F3 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 000023F8 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000023FA 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 000023FC FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 000023FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 000023FF 50                  <1>     push rax
   221 00002400 52                  <1>     push rdx
   222 00002401 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 00002403 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 00002408 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 0000240A B404                <1>     mov ah, 04h ;Flush input buffers
   226 0000240C E81CFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 00002411 5A                  <1>     pop rdx
   229 00002412 58                  <1>     pop rax
   230 00002413 88C4                <1>     mov ah, al  ;Move function number into ah
   231 00002415 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 00002417 7507                <1>     jne .others
   233 00002419 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 0000241C 7412                <1>     jz .bad ;Yes, exit
   235 0000241E EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 00002420 3C01                <1>     cmp al, 01h
   238 00002422 740F                <1>     je .callFunction
   239 00002424 3C07                <1>     cmp al, 07h
   240 00002426 740B                <1>     je .callFunction
   241 00002428 3C08                <1>     cmp al, 08h
   242 0000242A 7407                <1>     je .callFunction
   243 0000242C 3C0A                <1>     cmp al, 0Ah
   244 0000242E 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 00002430 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 00002432 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 00002433 FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 00002434 E9474B0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 00002439 56                  <1>     push rsi
   261 0000243A 57                  <1>     push rdi
   262 0000243B 51                  <1>     push rcx
   263 0000243C 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 00002445 00                  <1>
   264 00002446 488D35(C0040000)    <1>     lea rsi, primReqHdr
   265 0000244D 488D3D(941A0000)    <1>     lea rdi, bkupReqHdr
   266 00002454 7303                <1>     jnc .read
   267 00002456 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 00002459 F3A4                <1>     rep movsb   ;Swap
   270 0000245B 59                  <1>     pop rcx
   271 0000245C 5F                  <1>     pop rdi
   272 0000245D 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 0000245E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 0000245F 53                  <1>     push rbx
   278 00002460 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 00002465 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 0000246A 7217                <1>     jc .exit
   281 0000246C 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 00002472 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 00002474 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 00002478 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   285 0000247E 7405                <1>     jz .notCharDevOrFast
   286 00002480 CD49                <1>     int 49h ;Fast output
   287                              <1> .exitOk:
   288 00002482 F8                  <1>     clc
   289                              <1> .exit:
   290 00002483 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 00002484 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 00002485 E809000000          <1>     call outputOnSFT
   294 0000248A 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 0000248B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 0000248C E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002491 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 48h if device busy
   305 00002493 50                  <1>     push rax
   306 00002494 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 00002496 E892FBFFFF          <1>     call mainCharIO
   308 0000249B 58                  <1>     pop rax
   309 0000249C 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 0000249E B402                <1>     mov ah, 02h ;Output char in al
   311 000024A0 E888FBFFFF          <1>     call mainCharIO
   312 000024A5 F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 000024A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 000024A7 E802000000          <1>     call callInt48h
   316 000024AC EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt48h:
   319                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   320 000024AE 9C                  <1>     pushfq
   321 000024AF F605(94040000)FF    <1>     test byte [int48Flag], -1
   322 000024B6 7417                <1>     jz .exit    ;If zero, not safe
   323 000024B8 F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 000024BF 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   326 000024C1 FF35(94040000)      <1>     push qword [int48Flag] 
   327 000024C7 CD48                <1>     int 48h
   328 000024C9 8F05(94040000)      <1>     pop qword [int48Flag]    ;Return original value
   329                              <1> .exit:
   330 000024CF 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 000024D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 000024D1 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 000024D6 53                  <1>     push rbx
   354 000024D7 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 000024D9 E8BA000000          <1>     call getCharDevSFT
   356 000024DE 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000024DF 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 000024E1 B401                <1>     mov ah, 01  ;Non destructively read CON
   359 000024E3 E845FBFFFF          <1>     call mainCharIO
   360 000024E8 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 000024EA 3C13                <1>     cmp al, DC3 ;^S ?
   363 000024EC 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 000024EE 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 000024F0 E838FBFFFF          <1>     call mainCharIO
   366 000024F5 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 000024FA 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 000024FC 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 000024FE 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 00002500 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 00002502 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 00002503 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 00002509 53                  <1>     push rbx
   377 0000250A BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 0000250F E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 00002514 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002515 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 00002517 57                  <1>     push rdi
   382 00002518 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 0000251B 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 00002521 741D                <1>     jz .notNet
   385 00002523 50                  <1>     push rax
   386 00002524 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 00002529 CD4F                <1>     int 4Fh
   388 0000252B 58                  <1>     pop rax
   389 0000252C 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 0000252E C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 00002535 50                  <1>     push rax
   393 00002536 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 0000253B CD4F                <1>     int 4Fh
   395 0000253D 58                  <1>     pop rax
   396 0000253E EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 00002540 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   401 00002547 7507                <1>     jnz .echoOn
   402 00002549 E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 0000254E EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 00002550 E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 00002555 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 00002556 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   410 00002557 E852FFFFFF          <1>     call callInt48h
   411                              <1> .waitNextChar:   ;Here get next char
   412 0000255C B401                <1>     mov ah, 01h ;ND read
   413 0000255E E8CAFAFFFF          <1>     call mainCharIO
   414 00002563 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 00002565 53                  <1>     push rbx
   417 00002566 31DB                <1>     xor ebx, ebx
   418 00002568 E82B000000          <1>     call getCharDevSFT
   419 0000256D 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000256E 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 00002570 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 00002572 E8B6FAFFFF          <1>     call mainCharIO
   423 00002577 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 00002579 7514                <1>     jnz .checkBreak2
   425 0000257B 803D(C11A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 00002582 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 00002588 C605(C11A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 0000258F 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002591 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 00002593 E97A3D0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 00002598 F605(93040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 0000259F 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 000025A1 57                  <1>     push rdi
   443 000025A2 E831250000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 000025A7 4889FE              <1>     mov rsi, rdi
   445 000025AA 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 000025AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 000025AC 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 000025B2 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 000025B4 488B35(1D070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 000025BB F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 000025BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 000025BD 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 000025BF 0F834DFCFFFF        <1>     jae charOut_B.in
   464 000025C5 3C09                <1>     cmp al, TAB
   465 000025C7 0F8445FCFFFF        <1>     je charOut_B.in
   466 000025CD 3C15                <1>     cmp al, NAK
   467 000025CF 0F843DFCFFFF        <1>     je charOut_B.in
   468 000025D5 3C14                <1>     cmp al, DC4
   469 000025D7 0F8435FCFFFF        <1>     je charOut_B.in
   470 000025DD 50                  <1>     push rax
   471 000025DE B05E                <1>     mov al, "^" ;Get caret in place
   472 000025E0 E82DFCFFFF          <1>     call charOut_B.in
   473 000025E5 58                  <1>     pop rax
   474 000025E6 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 000025E8 E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 000025ED B00D                <1>     mov al, CR
   478 000025EF E81EFCFFFF          <1>     call charOut_B.in
   479 000025F4 B00A                <1>     mov al, LF
   480 000025F6 E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   485 000025FB 803D(08040000)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002602 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 00002604 53                  <1>     push rbx
   490 00002605 56                  <1>     push rsi
   491 00002606 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 0000260D C705(EC040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 00002615 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 00002617 C605(EA040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 0000261E 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   497 00002625 E897410000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 0000262A 66F705(ED040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 00002632 02                  <1>
   500 00002633 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 00002635 30C0                <1>     xor al, al
   503 00002637 5E                  <1>     pop rsi
   504 00002638 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 00002639 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 0000263A 8A05(F7040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 00002640 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 00002642 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 00002644 C705(EC040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 0000264C 0000                <1>
   513 0000264E C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 00002655 C705(00050000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 0000265D 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 0000265F 488D05(F7040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 00002666 488905(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 0000266D E84F410000          <1>     call goDriver   ;RSI and RBX as before
   520 00002672 E99B3C0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 00002677 57                  <1>     push rdi
   525 00002678 C605(93040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 0000267F 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 00002686 48893D(1D070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 0000268D 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 0000268E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 0000268F C605(93040000)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 00002696 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 00002697 4889D6              <1>     mov rsi, rdx
   553 0000269A 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 0000269C 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000269E 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 000026A0 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 000026A3 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 000026A5 7606                <1>     jbe .avoidcheck
   559 000026A7 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 000026AB 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 000026AD 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 000026AF 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 000026B2 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 000026B4 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 000026BA 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   569 000026C0 56                  <1>     push rsi    ;Push user buffer address
   570 000026C1 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   571 000026C8 C605(FE060000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 000026CF E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   574 000026D4 3C0A                <1>     cmp al, LF
   575 000026D6 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 000026D8 E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 000026DD 3C06                <1>     cmp al, ACK
   580 000026DF 74F7                <1>     je .mainLoop2   ;Get another char
   581 000026E1 3A0553D9FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 000026E7 0F8426010000        <1>     je .escape
   583 000026ED 3C7F                <1>     cmp al, DEL
   584 000026EF 0F8489000000        <1>     je .delete
   585 000026F5 3C08                <1>     cmp al, BSP
   586 000026F7 0F8481000000        <1>     je .delete
   587 000026FD 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 000026FF 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 00002704 3C15                <1>     cmp al, NAK
   591 00002706 9090909090          <1>     db 5 dup (90h)
   592 0000270B 3C0D                <1>     cmp al, CR
   593 0000270D 744C                <1>     je .carriageReturn
   594 0000270F 3C0A                <1>     cmp al, LF
   595 00002711 7461                <1>     je .lineFeed
   596 00002713 3A0522D9FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 00002719 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 0000271B 38D6                <1>     cmp dh, dl
   600 0000271D 731C                <1>     jae .bufOflw
   601 0000271F AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 00002720 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 00002722 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 00002727 803D(FE060000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 0000272E 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 00002730 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 00002732 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 00002734 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 00002737 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 00002739 EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 0000273B B007                <1>     mov al, BEL ;Sound the bell
   617 0000273D E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 00002742 EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 00002744 B05C                <1>     mov al, "\"
   622 00002746 E8C7FAFFFF          <1>     call charOut_B.in
   623 0000274B 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 0000274C E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 00002751 E85AFBFFFF          <1>     call charOut_B.tab
   628 00002756 E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 0000275B AA                  <1>     stosb
   631 0000275C E8B1FAFFFF          <1>     call charOut_B.in
   632 00002761 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 00002762 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 00002765 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 00002767 488D35(CE020000)    <1>     lea rsi, vConBuffer
   637 0000276E 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 00002771 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 00002773 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 00002774 E874FEFFFF          <1>     call printCRLF
   642 00002779 E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 0000277E E805000000          <1>     call .removeChar
   645 00002783 E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 00002788 84F6                <1>     test dh, dh ;Is char count 0?
   648 0000278A 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 0000278C E868000000          <1>     call .vConErase
   650 00002791 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 00002793 3C20                <1>     cmp al, SPC
   652 00002795 7311                <1>     jae .normalChar
   653 00002797 3C09                <1>     cmp al, TAB
   654 00002799 7420                <1>     je .eraTab
   655 0000279B 3C15                <1>     cmp al, NAK
   656 0000279D 7409                <1>     je .normalChar
   657 0000279F 3C14                <1>     cmp al, DC4
   658 000027A1 7405                <1>     je .normalChar
   659 000027A3 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 000027A8 803D(FE060000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000027AF 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 000027B1 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000027B3 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 000027B5 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 000027B8 FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 000027BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 000027BB 57                  <1>     push rdi
   672 000027BC 48FFCF              <1>     dec rdi
   673 000027BF FD                  <1>     std ;Go backwards
   674 000027C0 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 000027C3 B020                <1>     mov al, SPC
   676 000027C5 53                  <1>     push rbx
   677 000027C6 BB07000000          <1>     mov ebx, 7
   678 000027CB 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 000027CE AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 000027CF 7608                <1>     jbe .notChar    ;No, skip handling
   682 000027D1 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 000027D5 740A                <1>     je .tabChar
   684 000027D7 FECB                <1>     dec bl
   685                              <1> .notChar:
   686 000027D9 E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 000027DB 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 000027E1 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 000027E3 00D9                <1>     add cl, bl
   692 000027E5 80E107              <1>     and cl, 7
   693 000027E8 5B                  <1>     pop rbx
   694 000027E9 5F                  <1>     pop rdi
   695 000027EA FC                  <1>     cld
   696 000027EB 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 000027ED E80C000000          <1>     call .vConEraseNoDec
   700 000027F2 E2F9                <1>     loop .vConDelTab
   701 000027F4 E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 000027F9 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 000027FC FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 000027FE B008                <1>     mov al, BSP ;Move cursor back
   709 00002800 E80DFAFFFF          <1>     call charOut_B.in
   710 00002805 B020                <1>     mov al, SPC ;Replace with a space
   711 00002807 E806FAFFFF          <1>     call charOut_B.in
   712 0000280C B008                <1>     mov al, BSP ;Move cursor back again
   713 0000280E E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 00002813 FF2519D8FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 00002819 E846000000          <1>     call .fCommon2
   721 0000281E EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 00002820 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 00002823 28F9                <1>     sub cl, bh  ;Sub our current position
   725 00002825 EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 00002827 B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 0000282C C605(FE060000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 00002833 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 00002835 0F849DFEFFFF        <1>     je .mainLoop2
   732 0000283B 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 0000283D 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 00002843 AC                  <1>     lodsb
   736 00002844 AA                  <1>     stosb
   737 00002845 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 0000284A FEC7                <1>     inc bh
   739 0000284C FEC6                <1>     inc dh
   740 0000284E E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 00002850 E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 00002855 E80A000000          <1>     call .fCommon2
   744 0000285A 4801CE              <1>     add rsi, rcx
   745 0000285D 00CF                <1>     add bh, cl
   746 0000285F E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 00002864 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 00002869 3A05CBD7FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 0000286F 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 00002871 E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 00002876 59                  <1>     pop rcx ;Get original return address from stack
   756 00002877 E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 0000287C 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 0000287F 28F9                <1>     sub cl, bh
   760 00002881 74F3                <1>     jz .fforceExit
   761 00002883 FFC9                <1>     dec ecx
   762 00002885 74EF                <1>     jz .fforceExit
   763 00002887 57                  <1>     push rdi
   764 00002888 4889F7              <1>     mov rdi, rsi
   765 0000288B 48FFC7              <1>     inc rdi
   766 0000288E F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 00002890 5F                  <1>     pop rdi
   768 00002891 75E3                <1>     jne .fforceExit ;If char not found, return
   769 00002893 F6D1                <1>     not cl
   770 00002895 00D9                <1>     add cl, bl
   771 00002897 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 00002899 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 0000289A B040                <1>     mov al, "@"
   775 0000289C E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 000028A1 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 000028A2 57                  <1>     push rdi
   778 000028A3 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 000028A8 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 000028A9 88F3                <1>     mov bl, dh
   781 000028AB E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 000028B0 B01A                <1>     mov al, EOF
   785 000028B2 E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 000028B7 8A057DD7FFFF        <1>     mov al, byte [extESC]
   789 000028BD E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 000028C2 F615(FE060000)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 000028C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 000028C9 38DF                <1>     cmp bh, bl
   795 000028CB 0F8407FEFFFF        <1>     je .mainLoop2
   796 000028D1 FEC7                <1>     inc bh
   797 000028D3 48FFC6              <1>     inc rsi
   798 000028D6 E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 000028DB E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 000028E0 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 000028E5 57                  <1>     push rdi    ;Preserve rdi
   805 000028E6 488D3D4FD7FFFF      <1>     lea rdi, extKeyTbl
   806 000028ED 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 000028EE AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 000028EF 740D                <1>     je .charFound
   812 000028F1 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 000028F3 7414                <1>     jz .notInTable
   814 000028F5 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 000028FC EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 000028FE 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 000028FF 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 00002903 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 00002906 5F                  <1>     pop rdi
   821 00002907 FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 00002909 59                  <1>     pop rcx ;Realign stack
   824 0000290A 59                  <1>     pop rcx
   825 0000290B E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    33                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002910 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002915 E8DD420000          <1>     call getUserRegs
     6 0000291A 668B15(8D040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002921 0FB60D(8F040000)    <1>     movzx ecx, byte [years]
     9 00002928 8A05(92040000)      <1>     mov al, byte [dayOfWeek]
    10 0000292E 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 00002932 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002936 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 00002937 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 0000293C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 0000293D E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 00002942 E8B0420000          <1>     call getUserRegs
    22 00002947 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 0000294E 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 00002955 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 00002959 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 0000295D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 0000295E 80FD17              <1>     cmp ch, 23
    33 00002961 7749                <1>     ja .exitBad
    34 00002963 80F93B              <1>     cmp cl, 59
    35 00002966 7744                <1>     ja .exitBad
    36 00002968 80FE3B              <1>     cmp dh, 59
    37 0000296B 773F                <1>     ja .exitBad
    38 0000296D 80FA63              <1>     cmp dl, 99
    39 00002970 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 00002972 E817010000          <1>     call readDateTimeRecord
    42 00002977 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 0000297E 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 00002985 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 00002988 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 0000298C 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 00002990 B906000000          <1>     mov ecx, 6
    48 00002995 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 00002998 E8D8400000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 0000299D 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 000029A4 E8183E0000          <1>     call goDriver
    52 000029A9 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 000029AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 000029AC B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 000029AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 000029AF 6681F97800          <1>     cmp cx, 120
    62 000029B4 0F83D1000000        <1>     jae .exitBad
    63 000029BA 80FE0C              <1>     cmp dh, 12
    64 000029BD 0F87C8000000        <1>     ja .exitBad
    65 000029C3 80FA1F              <1>     cmp dl, 31
    66 000029C6 0F87BF000000        <1>     ja .exitBad
    67 000029CC 668915(8D040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 000029D3 880D(8F040000)      <1>     mov byte [years], cl    ;Save the years count
    70 000029D9 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 000029DE 88CD                <1>     mov ch, cl ;Get years count in ch
    72 000029E0 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 000029E3 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 000029E6 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 000029E9 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 000029EE F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 000029F0 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 000029F3 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 000029F6 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 000029FB FFC9                <1>     dec ecx
    83 000029FD 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 00002A00 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 00002A05 EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 00002A07 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 00002A0C 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 00002A0E 0FB60D(8E040000)    <1>     movzx ecx, byte [monthOfYear]
    92 00002A15 488D3541D6FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 00002A1C FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 00002A1E 67E308              <1>     jecxz .addMonthOffset
    96 00002A21 AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 00002A22 0FB6C0              <1>     movzx eax, al
    98 00002A25 01C2                <1>     add edx, eax
    99 00002A27 EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 00002A29 0FB60D(8D040000)    <1>     movzx ecx, byte [dayOfMonth]
   102 00002A30 FFC9                <1>     dec ecx
   103 00002A32 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 00002A34 668915(90040000)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 00002A3B 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 00002A42 B906000000          <1>     mov ecx, 6
   109 00002A47 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 00002A4A E831400000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 00002A4F 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 00002A56 E8663D0000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 00002A5B 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 00002A62 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 00002A69 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 00002A6C B906000000          <1>     mov ecx, 6
   118 00002A71 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 00002A74 E8FC3F0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 00002A79 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 00002A80 E83C3D0000          <1>     call goDriver
   122 00002A85 E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 00002A8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 00002A8B B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 00002A8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 00002A8E 53                  <1>     push rbx
   132 00002A8F 51                  <1>     push rcx
   133 00002A90 52                  <1>     push rdx
   134 00002A91 56                  <1>     push rsi
   135 00002A92 55                  <1>     push rbp
   136                              <1> 
   137 00002A93 66C705(C21A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 00002A9B 00                  <1>
   138 00002A9C 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 00002AA3 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   140 00002AA8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 00002AAB E8D03F0000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 00002AB0 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00002AB7 E8053D0000          <1>     call goDriver
   148 00002ABC 0FB705(15050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 00002AC3 663B05(90040000)    <1>     cmp ax, word [daysOffset]
   155 00002ACA 7466                <1>     je .exit    ;Return if equal
   156 00002ACC 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 00002AD1 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 00002AD3 668905(90040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 00002ADA BBB5050000          <1>     mov ebx, 365*4 + 1
   163 00002ADF 31D2                <1>     xor edx, edx
   164 00002AE1 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 00002AE3 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 00002AE5 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 00002AEA 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 00002AEC 7210                <1>     jb .foundBunch
   171 00002AEE 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 00002AF0 FFC1                <1>     inc ecx
   173 00002AF2 FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 00002AF4 39DA                <1>     cmp edx, ebx
   176 00002AF6 7206                <1>     jb .foundBunch
   177 00002AF8 29DA                <1>     sub edx, ebx
   178 00002AFA FFC1                <1>     inc ecx
   179 00002AFC EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 00002AFE C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 00002B01 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 00002B03 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 00002B08 488D354ED5FFFF      <1>     lea rsi, monthsTbl
   190 00002B0F 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 00002B11 FFC1                <1>     inc ecx ;Start from 1
   193 00002B13 AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 00002B14 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 00002B17 39C2                <1>     cmp edx, eax
   196 00002B19 7204                <1>     jb .monthFound
   197 00002B1B 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 00002B1D EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 00002B1F FFC2                <1>     inc edx
   203 00002B21 880D(8E040000)      <1>     mov byte [monthOfYear], cl
   204 00002B27 8815(8D040000)      <1>     mov byte [dayOfMonth], dl
   205 00002B2D E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 00002B32 5D                  <1>     pop rbp
   208 00002B33 5E                  <1>     pop rsi
   209 00002B34 5A                  <1>     pop rdx
   210 00002B35 59                  <1>     pop rcx
   211 00002B36 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00002B37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 00002B38 0FB705(90040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 00002B3F 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 00002B44 31D2                <1>     xor edx, edx
   220 00002B46 B907000000          <1>     mov ecx, 7   
   221 00002B4B F7F1                <1>     div ecx  ;Get remainder in dl
   222 00002B4D 8815(92040000)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 00002B53 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002B55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 00002B56 880D(8F040000)      <1>     mov byte [years], cl    ;Save this figure
   232 00002B5C F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 00002B5F 51                  <1>     push rcx
   234 00002B60 57                  <1>     push rdi
   235 00002B61 B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 00002B66 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 00002B6B 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 00002B6E 488D3DE9D4FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 00002B75 AA                  <1>     stosb   ;Store the word in rdi
   240 00002B76 5F                  <1>     pop rdi
   241 00002B77 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 00002B78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 00002B79 53                  <1>     push rbx
   257 00002B7A 0FB61D(1A050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 00002B81 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 00002B83 89D8                <1>     mov eax, ebx
   260 00002B85 0FB61D(17050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 00002B8C C1E305              <1>     shl ebx, 5
   262 00002B8F 09D8                <1>     or eax, ebx
   263 00002B91 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 00002B98 C1E30B              <1>     shl ebx, 11
   265 00002B9B 09D8                <1>     or eax, ebx
   266 00002B9D 0FB61D(8D040000)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002BA4 C1E310              <1>     shl ebx, 16
   268 00002BA7 09D8                <1>     or eax, ebx
   269 00002BA9 0FB61D(8E040000)    <1>     movzx ebx, byte [monthOfYear]
   270 00002BB0 C1E315              <1>     shl ebx, 21
   271 00002BB3 09D8                <1>     or eax, ebx
   272 00002BB5 0FB61D(8F040000)    <1>     movzx ebx, byte [years]
   273 00002BBC C1E319              <1>     shl ebx, 25
   274 00002BBF 09D8                <1>     or eax, ebx
   275 00002BC1 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 00002BC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002BC3 E8C6FEFFFF          <1>     call readDateTimeRecord
   282 00002BC8 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 00002BCD 31D2                <1>     xor edx, edx
   284 00002BCF 6689C2              <1>     mov dx, ax  ;Save time
   285 00002BD2 C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002BD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
     3                              <1> ;On FAT 32 volumes things are a bit more restricted.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported for general FAT 32 files:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    14                              <1> ;   openFCB
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    24                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    25                              <1> 
    26                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    27                              <1> ;Reading and Writing to the Volume label will silently return ok.
    28                              <1> ;Volume labels will be editable by being created/opened/closed.
    29                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    30                              <1> ; root directory always.
    31                              <1> 
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> ;Input: rdx -> FCB
    34 00002BD6 488915(15070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    35 00002BDD 4889D6              <1>     mov rsi, rdx
    36 00002BE0 803EFF              <1>     cmp byte [rsi], -1
    37 00002BE3 7407                <1>     je .notExt1
    38 00002BE5 4881C607000000      <1>     add rsi, exFcb.driveNum
    39                              <1> .notExt1:
    40 00002BEC 0FB606              <1>     movzx eax, byte [rsi]
    41 00002BEF 50                  <1>     push rax    ;Push on stack the drive number
    42 00002BF0 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    43 00002BF7 E8D3020000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    44 00002BFC 7306                <1>     jnc .fcbOk
    45 00002BFE 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    46 00002BFF E9A6440000          <1>     jmp fcbErrExit
    47                              <1> .fcbOk:
    48 00002C04 488D3D(1D050000)    <1>     lea rdi, buffer1
    49 00002C0B E860E6FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    50 00002C10 7306                <1>     jnc .fileFound
    51 00002C12 5B                  <1>     pop rbx
    52 00002C13 E992440000          <1>     jmp fcbErrExit
    53                              <1> .fileFound:
    54                              <1> ;Now we build an FFBlock internally
    55 00002C18 488D3D(2E060000)    <1>     lea rdi, dosffblock
    56 00002C1F 57                  <1>     push rdi
    57 00002C20 E88BE5FFFF          <1>     call setupFFBlock
    58 00002C25 5E                  <1>     pop rsi
    59                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    60 00002C26 488B3D(15070000)    <1>     mov rdi, qword [workingFCB]
    61 00002C2D F605(F6060000)FF    <1>     test byte [extFCBFlag], -1
    62 00002C34 7407                <1>     jz .notExt2
    63 00002C36 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    64                              <1> .notExt2:
    65 00002C3D 5B                  <1>     pop rbx ;Get back the drive number in bl
    66 00002C3E 85DB                <1>     test ebx, ebx
    67 00002C40 7509                <1>     jnz .notCurrentDrive
    68 00002C42 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    69 00002C49 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    70                              <1> .notCurrentDrive:
    71 00002C4B AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    72 00002C4C 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    73 00002C4F B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    74 00002C54 A5                  <1>     movsd
    75 00002C55 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    76 00002C56 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    77 00002C5D 488D35(59060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    78 00002C64 F605(F6060000)FF    <1>     test byte [extFCBFlag], -1
    79 00002C6B 7412                <1>     jz .notExt3
    80 00002C6D B8FFFFFFFF          <1>     mov eax, -1
    81 00002C72 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    82 00002C73 FFC0                <1>     inc eax ;Make it zero
    83 00002C75 AB                  <1>     stosd
    84 00002C76 AA                  <1>     stosb   ;Store 5 bytes of zero
    85 00002C77 0FB605(F7060000)    <1>     movzx eax, byte [searchAttr]
    86 00002C7E AA                  <1>     stosb   ;Store the search attributes
    87                              <1> .notExt3:
    88 00002C7F 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    89 00002C81 AA                  <1>     stosb
    90 00002C82 B904000000          <1>     mov ecx, fatDirEntry_size/8
    91 00002C87 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    92 00002C8A E918440000          <1>     jmp fcbGoodExit
    93                              <1>     
    94                              <1> findNextFileFCB:   ;ah = 12h
    95 00002C8F 488915(15070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    96 00002C96 C605(F6060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    97 00002C9D C605(F7060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    98 00002CA4 4889D6              <1>     mov rsi, rdx
    99                              <1> 
   100 00002CA7 803EFF              <1>     cmp byte [rsi], -1
   101 00002CAA 7514                <1>     jne .notExt
   102 00002CAC FE0D(F6060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   103 00002CB2 4881C606000000      <1>     add rsi, exFcb.attribute
   104 00002CB9 AC                  <1>     lodsb   ;Get search attr in al
   105 00002CBA 8805(F7060000)      <1>     mov byte [searchAttr], al
   106                              <1> .notExt:
   107                              <1>     ;rsi points to drive letter
   108 00002CC0 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   109 00002CC7 31C0                <1>     xor eax, eax
   110 00002CC9 AC                  <1>     lodsb   ;Get the FCB drive letter
   111 00002CCA 50                  <1>     push rax    ;Push drive letter on the stack
   112 00002CCB 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   113 00002CCE AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   114 00002CCF B905000000          <1>     mov ecx, 5
   115 00002CD4 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   116 00002CD6 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   117 00002CDC 488D3D(2E060000)    <1>     lea rdi, dosffblock
   118 00002CE3 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   119 00002CE4 8F05(17040000)      <1>     pop qword [currentDTA]
   120 00002CEA E83FE1FFFF          <1>     call findNextMain
   121 00002CEF 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   122 00002CF5 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   123 00002CFB 488B3D(15070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   124 00002D02 F607FF              <1>     test byte [rdi], -1
   125 00002D05 7407                <1>     jz .notExt2
   126 00002D07 4881C707000000      <1>     add rdi, exFcb.driveNum
   127                              <1> .notExt2:
   128 00002D0E 5B                  <1>     pop rbx ;Get the drive letter back into bl
   129 00002D0F 881F                <1>     mov byte [rdi], bl
   130 00002D11 E994430000          <1>     jmp fcbErrExit  ;And exit bad
   131                              <1> 
   132                              <1> deleteFileFCB:     ;ah = 13h
   133 00002D16 488D3D(1D050000)    <1>     lea rdi, buffer1
   134 00002D1D 57                  <1>     push rdi
   135 00002D1E E8AC010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   136 00002D23 5F                  <1>     pop rdi ;Point rdi to the canonised path
   137 00002D24 0F8280430000        <1>     jc fcbErrExit
   138 00002D2A E841E5FFFF          <1>     call getFilePathNoCanon ;Get the file
   139 00002D2F 0F8275430000        <1>     jc fcbErrExit
   140 00002D35 E86F0F0000          <1>     call outerDeleteMain
   141 00002D3A 0F826A430000        <1>     jc fcbErrExit
   142 00002D40 E962430000          <1>     jmp fcbGoodExit
   143                              <1> 
   144                              <1> renameFileFCB:     ;ah = 17h
   145                              <1> ;Input: rdx -> User FCB
   146 00002D45 488915(15070000)    <1>     mov qword [workingFCB], rdx
   147                              <1>     ;First we get the drive letter 
   148 00002D4C 4889D6              <1>     mov rsi, rdx
   149 00002D4F 803EFF              <1>     cmp byte [rsi], -1
   150 00002D52 7507                <1>     jne .notExt
   151 00002D54 4881C607000000      <1>     add rsi, exFcb.driveNum
   152                              <1> .notExt:
   153 00002D5B 31C0                <1>     xor eax, eax
   154 00002D5D AC                  <1>     lodsb
   155 00002D5E 50                  <1>     push rax    ;Push the drive letter on the stack for now
   156 00002D5F 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   157 00002D66 E864010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   158 00002D6B 723D                <1>     jc .badPop
   159 00002D6D FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   160 00002D73 8F05(25060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   161 00002D79 58                  <1>     pop rax ;Get drive letter back
   162 00002D7A 488D3D(9D050000)    <1>     lea rdi, buffer2
   163 00002D81 E81D010000          <1>     call fcbInitName2
   164 00002D86 7223                <1>     jc short .bad
   165 00002D88 488B05(25060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   166 00002D8F 488705(1D060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   167 00002D96 488905(25060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   168 00002D9D E8090B0000          <1>     call renameMain
   169 00002DA2 0F83FF420000        <1>     jnc fcbGoodExit
   170 00002DA8 EB01                <1>     jmp short .bad
   171                              <1> .badPop:
   172 00002DAA 5B                  <1>     pop rbx ;Pop drive number off stack
   173                              <1> .bad:
   174 00002DAB E9FA420000          <1>     jmp fcbErrExit
   175                              <1> 
   176                              <1> getFileSizeFCB:    ;ah = 23h
   177                              <1> ;This function which can be used to test existance of file without opening it 
   178                              <1> ;Input: rdx -> FCB
   179 00002DB0 488915(15070000)    <1>     mov qword [workingFCB], rdx
   180 00002DB7 488D3D(1D050000)    <1>     lea rdi, buffer1
   181 00002DBE 57                  <1>     push rdi
   182 00002DBF E80B010000          <1>     call fcbInitRoutine
   183 00002DC4 5F                  <1>     pop rdi
   184 00002DC5 0F82DF420000        <1>     jc fcbErrExit
   185 00002DCB E8A0E4FFFF          <1>     call getFilePathNoCanon
   186 00002DD0 0F82D4420000        <1>     jc fcbErrExit
   187 00002DD6 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   188                              <1>     ;Now we gotta set up FCB randRecrd Field
   189 00002DDC 488B35(15070000)    <1>     mov rsi, qword [workingFCB]
   190 00002DE3 803EFF              <1>     cmp byte [rsi], -1
   191 00002DE6 7507                <1>     jne .notExtended
   192 00002DE8 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   193                              <1> .notExtended:
   194                              <1> ;rsi points to the drive number now
   195 00002DEF 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   196 00002DF3 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   197 00002DF5 85D2                <1>     test edx, edx
   198 00002DF7 7402                <1>     jz .noRemainder
   199 00002DF9 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   200                              <1> .noRemainder:
   201 00002DFB 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   202 00002DFE E9A4420000          <1>     jmp fcbGoodExit
   203                              <1> 
   204                              <1> setDTA:            ;ah = 1Ah, Always can be used
   205                              <1> ;Called with:
   206                              <1> ;   rdx = Pointer to the new default DTA
   207 00002E03 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   208 00002E0A 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   209 00002E0E 488915(17040000)    <1>     mov qword [currentDTA], rdx
   210 00002E15 C3                  <1>     ret
   211                              <1> 
   212                              <1> getDTA:            ;ah = 2Fh, Always can be used
   213 00002E16 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   214 00002E1D 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   215 00002E24 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00002E28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1>     
   218                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   219                              <1> ;Input:
   220                              <1> ;rsi points to a command line to parse
   221                              <1> ;rdi points to a future unopened FCB
   222                              <1> ;al = parsing control bits. 
   223                              <1> ; al[0] = If set, leading filename separators are scanned off
   224                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   225                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   226                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   227                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   228                              <1> ;        al = 1 => Wildcards found
   229                              <1> ;        al = -1 => Drive specifier invalid
   230                              <1> ;rsi -> to the first char past the parsed filename
   231                              <1> ;rdi -> First byte of the FCB 
   232                              <1> 
   233 00002E29 E841010000          <1>     call parseNameToFCB
   234 00002E2E 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   235 00002E2F E8C33D0000          <1>     call getUserRegs
   236 00002E34 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   237                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00002E37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> createFileFCB:     ;ah = 16h
   240                              <1> ;rdx -> Extended FCB
   241                              <1> ;   MUST BE EXTENDED. 
   242                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail, for now
   243                              <1> ; Using FCB's, one can only create a volume label on a volume.
   244                              <1> ;Deleting a file label totally can be done using delete file 
   245                              <1> ;   (both FCB and hdl).
   246 00002E38 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   247 00002E3B 751A                <1>     jne .exit
   248 00002E3D 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   249 00002E41 7514                <1>     jne .exit
   250 00002E43 488D3D(1D050000)    <1>     lea rdi, buffer1
   251 00002E4A 57                  <1>     push rdi
   252 00002E4B E87F000000          <1>     call fcbInitRoutine ;Build path and find file to delete
   253 00002E50 5F                  <1>     pop rdi ;Point rdi to the canonised path
   254 00002E51 0F8253420000        <1>     jc fcbErrExit
   255                              <1>     ;Here we search for a volume ID in the root directory.
   256                              <1>     ; If one exists, we replace the dir entry name field,
   257                              <1>     ; Else, we build a dir entry for it.
   258                              <1> .exit:
   259 00002E57 B805000000          <1>     mov eax, errAccDen
   260 00002E5C E949420000          <1>     jmp fcbErrExit
   261                              <1> 
   262                              <1> ;=================================================================
   263                              <1> ;=================================================================
   264                              <1> ;These functions will be marked as reserved for future expansion.
   265                              <1> ; One idea will be to create a handle based record IO interface.
   266                              <1> ; We will be able to do IO on records of predefined length 
   267                              <1> ; on a file handle, thus removing the need for an FCB but still
   268                              <1> ; maintaining the usefulness of record based IO.
   269                              <1> ;=================================================================
   270                              <1> ;=================================================================
   271                              <1> openFileFCB:       ;ah = 0Fh
   272                              <1> closeFileFCB:      ;ah = 10h
   273                              <1> sequentialReadFCB: ;ah = 14h
   274                              <1> sequentialWriteFCB:;ah = 15h
   275                              <1> randomReadFCB:     ;ah = 21h
   276                              <1> randomWriteFCB:    ;ah = 22h
   277                              <1> setRelRecordFCB:   ;ah = 24h
   278                              <1> randBlockReadFCB:  ;ah = 27h
   279                              <1> randBlockWriteFCB: ;ah = 28h
   280 00002E61 B805000000          <1>     mov eax, errAccDen
   281 00002E66 E93F420000          <1>     jmp fcbErrExit
   282                              <1> 
   283                              <1> 
   284                              <1> ;--------------------------------
   285                              <1> ;  Common FCB related Routines  :
   286                              <1> ;--------------------------------
   287                              <1> fcbCheckDriveType:
   288                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   289                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   290                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   291                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   292                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   293                              <1> ;If a net CDS, automatic fail (for now).
   294 00002E6B C605(F4060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   295 00002E72 51                  <1>     push rcx
   296 00002E73 57                  <1>     push rdi
   297 00002E74 55                  <1>     push rbp
   298 00002E75 9C                  <1>     pushfq
   299 00002E76 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   300 00002E7D 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   301 00002E7F E8E63C0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   302 00002E84 7218                <1>     jc .exit
   303                              <1>     ;rdi has cds ptr now
   304 00002E86 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   305 00002E8A E8CCDBFFFF          <1>     call getFATtype
   306 00002E8F 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   307 00002E95 7707                <1>     ja .exit
   308                              <1> .okToGo:
   309 00002E97 C605(F4060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   310                              <1> .exit:
   311 00002E9E 9D                  <1>     popfq
   312 00002E9F 5D                  <1>     pop rbp
   313 00002EA0 5F                  <1>     pop rdi
   314 00002EA1 59                  <1>     pop rcx
   315                              <1>     return
    13                              <2> %%_ret:
    14 00002EA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> fcbInitName2:
   317                              <1> ;Must be called after fcbInitRoutine has been run once
   318                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   319                              <1> ;       rdx -> UserFCB
   320                              <1> ;       eax[0] = Drive number (0 based)
   321 00002EA3 55                  <1>     push rbp
   322 00002EA4 4889E5              <1>     mov rbp, rsp
   323 00002EA7 4881EC0F000000      <1>     sub rsp, 15
   324 00002EAE 57                  <1>     push rdi
   325 00002EAF 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   326 00002EB3 4889D6              <1>     mov rsi, rdx
   327 00002EB6 F605(F6060000)FF    <1>     test byte [extFCBFlag], -1
   328 00002EBD 7407                <1>     jz .notExtended
   329 00002EBF 4881C607000000      <1>     add rsi, exFcb.driveNum
   330                              <1> .notExtended:
   331                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   332 00002EC6 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   333 00002ECD EB36                <1>     jmp short fcbInitRoutine.rename2EP
   334                              <1> fcbInitRoutine:
   335                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   336                              <1> ;Input: rdx -> User FCB
   337                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   338 00002ECF 55                  <1>     push rbp
   339 00002ED0 4889E5              <1>     mov rbp, rsp
   340 00002ED3 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   341                              <1>     ;This space is used to store X:FILENAME.EXT,0
   342 00002EDA 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   343 00002EDB 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   344 00002EDF C605(F6060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   345 00002EE6 C605(F7060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   346 00002EED E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   347 00002EF2 7410                <1>     jz .notExtended
   348 00002EF4 C605(F6060000)FF    <1>     mov byte [extFCBFlag], -1
   349 00002EFB 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   350 00002EFE 8805(F7060000)      <1>     mov byte [searchAttr], al
   351                              <1> .notExtended:
   352 00002F04 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   353                              <1> .rename2EP:
   354 00002F05 E87A3D0000          <1>     call getCDS ;Get the CDS (preserves rdi)
   355 00002F0A 723F                <1>     jc .badDisk
   356 00002F0C E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   357 00002F11 488D1D34D5FFFF      <1>     lea rbx, asciiCharProperties
   358 00002F18 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   359 00002F1D 56                  <1>     push rsi    ;rsi -> fcb.filename
   360                              <1> .nameCharCheck:
   361 00002F1E AC                  <1>     lodsb   ;Get the char in al
   362 00002F1F D7                  <1>     xlatb   ;Get the char signature in al
   363 00002F20 A808                <1>     test al, 8  ;Make sure it is a valid FCB filename char
   364 00002F22 7427                <1>     jz .badDisk
   365 00002F24 FFC9                <1>     dec ecx
   366 00002F26 75F6                <1>     jnz .nameCharCheck
   367 00002F28 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   368 00002F29 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   369 00002F2C E83FE2FFFF          <1>     call FCBToAsciiz
   370 00002F31 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   371 00002F32 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   372 00002F35 7414                <1>     je .badDisk
   373 00002F37 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   374 00002F3B 55                  <1>     push rbp
   375 00002F3C E805E3FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir)
   376 00002F41 5D                  <1>     pop rbp
   377 00002F42 7207                <1>     jc .badDisk
   378 00002F44 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   379 00002F49 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   380                              <1> .badDisk:
   381 00002F4B B003                <1>     mov al, errPnf  ;DOS does this... so will I
   382 00002F4D F9                  <1>     stc
   383                              <1> .jiggleStack:
   384 00002F4E 4889EC              <1>     mov rsp, rbp
   385 00002F51 5D                  <1>     pop rbp
   386                              <1> .exit:
   387                              <1>     return
    13                              <2> %%_ret:
    14 00002F52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> storeZeroBasedDriveNumber:
   390                              <1> ;Input: al => 0 based drive letter
   391                              <1> ;       rdi -> Points to buffer to store the X: in
   392 00002F53 FEC0                <1>     inc al
   393                              <1> storeOneBasedDriveNumber:
   394                              <1> ;Input: al => 1 based drive letter
   395                              <1> ;       rdi -> Points to buffer to store the X: in
   396 00002F55 0440                <1>     add al, "@"
   397 00002F57 B43A                <1>     mov ah, ":"
   398 00002F59 66AB                <1>     stosw
   399                              <1>     return
    13                              <2> %%_ret:
    14 00002F5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   400                              <1> 
   401                              <1> isFCBExtended:
   402                              <1> ;Input: rdx = FCB ptr
   403                              <1> ;Output: rsi -> Drive letter of FCB
   404                              <1> ;        rdx -> FCB first byte
   405                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   406 00002F5C 4889D6              <1>     mov rsi, rdx
   407 00002F5F 803EFF              <1>     cmp byte [rsi], -1
   408 00002F62 7507                <1>     jne .notExtended
   409 00002F64 4881C607000000      <1>     add rsi, exFcb.driveNum
   410                              <1> .notExtended:
   411 00002F6B 4839F2              <1>     cmp rdx, rsi
   412                              <1>     return
    13                              <2> %%_ret:
    14 00002F6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   413                              <1> 
   414                              <1> parseNameToFCB:
   415                              <1> ;rsi points to a command line to parse
   416                              <1> ;rdi points to a future unopened FCB
   417                              <1> ;al = parsing control bits. 
   418                              <1> ; al[0] = If set, leading filename separators are scanned off
   419                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   420                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   421                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   422                              <1> ;
   423                              <1> ;Separators include : . ; , = + TAB SPACE
   424                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   425                              <1> 
   426 00002F6F C605(8C040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   427 00002F76 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   428 00002F78 A802                <1>     test al, 2  ;Set drive letter>
   429 00002F7A 7402                <1>     jz .skipDriveLetter
   430 00002F7C 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   431                              <1> .skipDriveLetter:
   432 00002F7E 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   433 00002F81 B908000000          <1>     mov ecx, 8  ;Copy Filename
   434 00002F86 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   435 00002F88 93                  <1>     xchg eax, ebx
   436 00002F89 B020                <1>     mov al, " " ;Clear the field
   437 00002F8B 7405                <1>     jz .clearFilenameField
   438 00002F8D 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   439 00002F90 31C9                <1>     xor ecx, ecx
   440                              <1> .clearFilenameField:
   441 00002F92 F3AA                <1>     rep stosb
   442 00002F94 B903000000          <1>     mov ecx, 3
   443 00002F99 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   444 00002F9C 7405                <1>     jz .clearExtensionField
   445 00002F9E 4801CF              <1>     add rdi, rcx
   446 00002FA1 31C9                <1>     xor ecx, ecx
   447                              <1> .clearExtensionField:
   448 00002FA3 F3AA                <1>     rep stosb
   449 00002FA5 91                  <1>     xchg eax, ecx
   450 00002FA6 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   451 00002FA7 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   452 00002FAE F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   453 00002FB1 740F                <1>     jz .dontScanOff
   454 00002FB3 E8D13E0000          <1>     call skipSpacesAndTabs
   455 00002FB8 E8D83E0000          <1>     call isCharDelimType
   456 00002FBD 7508                <1>     jnz .skipIfDelim
   457 00002FBF 48FFC6              <1>     inc rsi
   458                              <1> .dontScanOff:
   459 00002FC2 E8C23E0000          <1>     call skipSpacesAndTabs  ;Skip a char
   460                              <1> .skipIfDelim:
   461 00002FC7 E8503D0000          <1>     call uppercaseCharAtPtr 
   462 00002FCC 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   463 00002FCE 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   464 00002FD1 7519                <1>     jne .skipSettingDriveLetter
   465 00002FD3 48FFC6              <1>     inc rsi ;Goto next char
   466 00002FD6 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   467 00002FD8 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   468 00002FDA 50                  <1>     push rax    ;Save the 1 based drive letter
   469 00002FDB E83B3C0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   470 00002FE0 58                  <1>     pop rax
   471 00002FE1 7302                <1>     jnc .validDriveLetter
   472                              <1> .invalidDriveLetter:
   473 00002FE3 B2FF                <1>     mov dl, -1
   474                              <1> .validDriveLetter:
   475 00002FE5 AA                  <1>     stosb
   476 00002FE6 48FFC6              <1>     inc rsi ;Align pointers...
   477 00002FE9 48FFCF              <1>     dec rdi 
   478                              <1> .skipSettingDriveLetter:
   479 00002FEC 48FFCE              <1>     dec rsi
   480 00002FEF 48FFC7              <1>     inc rdi
   481                              <1>     
   482                              <1> getFCBFilename:
   483                              <1> ;Input: rsi points to first char of filename
   484                              <1> ;       rdi points to storage buffer for filename
   485                              <1> ;       dl contains the signature if drive invalid
   486                              <1> ;Output:
   487                              <1> ;       Fields filled
   488                              <1> ;       al = Return signature
   489 00002FF2 B908000000          <1>     mov ecx, 8
   490 00002FF7 E815000000          <1>     call getFCBNameField
   491 00002FFC 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   492 00002FFF 750D                <1>     jne .noExt
   493 00003001 B903000000          <1>     mov ecx, 3
   494 00003006 48FFC6              <1>     inc rsi ;Skip this char
   495 00003009 E814000000          <1>     call forceFCBNameField
   496                              <1> .noExt:
   497 0000300E 88D0                <1>     mov al, dl  ;Store the return signature
   498                              <1>     return
    13                              <2> %%_ret:
    14 00003010 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> getFCBNameField:
   501                              <1> ;Checks if the field is appropriate before copying it
   502 00003011 E8063D0000          <1>     call uppercaseCharAtPtr
   503 00003016 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   504 00003018 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   505 0000301B 48FFCE              <1>     dec rsi ;Point to previous char
   506                              <1>     return
    13                              <2> %%_ret:
    14 0000301E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .okName:
   508 0000301F 48FFCE              <1>     dec rsi ;Go back now a char
   509                              <1> forceFCBNameField:
   510                              <1> ;Forcefully copies the name from rsi to rdi
   511 00003022 E8F53C0000          <1>     call uppercaseCharAtPtr
   512 00003027 7226                <1>     jc .terminatingSpace
   513 00003029 750D                <1>     jnz .notSep
   514 0000302B F605(8C040000)FF    <1>     test byte [fcbSpaceOk], -1
   515 00003032 741B                <1>     jz .terminatingSpace
   516 00003034 3C20                <1>     cmp al, " "
   517 00003036 7517                <1>     jne .terminatingSpace
   518                              <1> .notSep:
   519 00003038 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   520 0000303B FFC9                <1>     dec ecx
   521 0000303D 3C2A                <1>     cmp al, "*" ;Big wildcard?
   522 0000303F 7504                <1>     jne .notBigWildcard
   523 00003041 B03F                <1>     mov al, "?"
   524 00003043 F3AA                <1>     rep stosb
   525                              <1> .notBigWildcard:
   526 00003045 AA                  <1>     stosb   ;Stores the uppercased char
   527 00003046 3C3F                <1>     cmp al, "?"
   528 00003048 75D8                <1>     jne forceFCBNameField
   529 0000304A 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   530 0000304D EBD3                <1>     jmp short forceFCBNameField
   531                              <1> .terminatingSpace:
   532 0000304F B020                <1>     mov al, " "
   533 00003051 AA                  <1>     stosb
   534 00003052 48FFCE              <1>     dec rsi ;Point to this trailing space
   535                              <1>     return
    13                              <2> %%_ret:
    14 00003055 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00003056 51                  <1>     push rcx    ;Save file attributes on stack
    11 00003057 488D0D0C0E0000      <1>     lea rcx, createMain
    12 0000305E C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    13 00003065 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003067 BB16000000          <1>     mov ebx, dirInclusive
    21 0000306C F605(FD060000)FF    <1>     test byte [dosInvoke], -1
    22 00003073 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00003076 880D(F7060000)      <1>     mov byte [searchAttr], cl
    24 0000307C 488D0DEB0C0000      <1>     lea rcx, openMain  
    25 00003083 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00003084 4889D6              <1>     mov rsi, rdx
    28 00003087 E82D3D0000          <1>     call checkPathspecOK
    29 0000308C 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 0000308E 58                  <1>     pop rax
    32 0000308F B803000000          <1>     mov eax, errPnf
    33 00003094 E931400000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00003099 E8E13F0000          <1>     call dosCrit1Enter
    36 0000309E E83C190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 000030A3 E8E13F0000          <1>     call dosCrit1Exit
    38 000030A8 0F82AF000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 000030AE E864180000          <1>     call setCurrentSFT
    41 000030B3 66891D(35070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 000030BA E8E9190000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 000030BF 0F8298000000        <1>     jc .exitBad
    44 000030C5 66891D(37070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 000030CC 48893D(25070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 000030D3 0FB71D(35070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 000030DA 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 000030DC 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 000030DF 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 000030E6 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 000030E7 E88FE1FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 000030EC 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 000030ED 488D057A0C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 000030F4 488B35(2D070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 000030FB 7319                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 000030FD 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 00003100 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    64 00003102 F605(00070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00003109 750B                <1>     jnz .proceedCall    ;If so, proceed.
    66                              <1> .badPathspec:
    67 0000310B 58                  <1>     pop rax
    68 0000310C B802000000          <1>     mov eax, errFnf
    69 00003111 E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    70                              <1> .proceedCall:
    71                              <1> ;If the pathspec exists, recall that for create, we truncate.
    72 00003116 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    73 00003118 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    74 0000311B 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    75 0000311C 750B                <1>     jne .callProc   ;Jump if we are creating
    76                              <1>     ;al means openmode here
    77 0000311E A880                <1>     test al, 80h    ;No Inherit bit set?
    78 00003120 7407                <1>     jz .callProc
    79 00003122 247F                <1>     and al, 7Fh     ;Clear this bit
    80 00003124 B900100000          <1>     mov ecx, devNoInherit
    81                              <1> .callProc:
    82 00003129 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    83 0000312F 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    84 00003135 51                  <1>     push rcx    ;Save the device word 
    85 00003136 FFD3                <1>     call rbx    ;Enter with open mode in 
    86 00003138 59                  <1>     pop rcx
    87 00003139 488B35(2D070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    88 00003140 722B                <1>     jc .exitBad2
    89 00003142 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    90 00003147 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
    91 0000314B 0FB705(37070000)    <1>     movzx eax, word [currentHdl]
    92 00003152 FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
    93 00003158 E95F3F0000          <1>     jmp extGoodExit ;Save ax and return OK
    94                              <1> .exitBad:
    95 0000315D FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
    96 0000315E 5B                  <1>     pop rbx ;Pop the word from the stack
    97 0000315F 66C705(35070000)FF- <1>     mov word [currentNdx], -1
    97 00003167 FF                  <1>
    98 00003168 E95D3F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
    99                              <1> .exitBad2:
   100                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   101 0000316D 488B35(25070000)    <1>     mov rsi, qword [curHdlPtr]
   102 00003174 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   103 00003177 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
   104 0000317E 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   105 00003183 66C705(35070000)FF- <1>     mov word [currentNdx], -1
   105 0000318B FF                  <1>
   106 0000318C E9393F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   107                              <1> 
   108                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   109                              <1> ;Input: bx = file handle to close
   110 00003191 E828190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   111 00003196 0F822E3F0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   112 0000319C E876170000          <1>     call setCurrentSFT  ;Set this as the current SFT
   113                              <1>     ;Check count to see if we need to check share mode
   114 000031A1 31C0                <1>     xor eax, eax    ;Preset ax to 0
   115 000031A3 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   116 000031A8 7406                <1>     je .skipShareCheck
   117                              <1>     ;Now check sharing mode
   118 000031AA 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   119 000031AE 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   120                              <1> .skipShareCheck:
   121 000031B0 50                  <1>     push rax    ;Save the share mode on stack
   122 000031B1 E8880F0000          <1>     call closeMain  ;Call close main!
   123 000031B6 58                  <1>     pop rax 
   124 000031B7 0F820D3F0000        <1>     jc extErrExit   ;If an error, exit through error exit
   125 000031BD 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   126 000031BF 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   127 000031C1 E8AD180000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   128 000031C6 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   129                              <1> .exitOk:
   130 000031C9 31C0                <1>     xor eax, eax    ;Return value
   131 000031CB E9EC3E0000          <1>     jmp extGoodExit
   132                              <1> 
   133                              <1> readFileHdl:       ;ah = 3Fh, handle function
   134 000031D0 488D35E40F0000      <1>     lea rsi, readBytes
   135                              <1> .common:
   136 000031D7 E8E2180000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   137 000031DC 0F82E83E0000        <1>     jc extErrExit   ;Error code in al and exit
   138 000031E2 E830170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   139 000031E7 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   140 000031E9 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   141 000031EF 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   142 000031F6 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   143 000031F8 8F05(17040000)      <1>     pop qword [currentDTA]
   144 000031FE 0F82C63E0000        <1>     jc extErrExit   ;Error code in al and exit
   145 00003204 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   146 00003206 E9A83E0000          <1>     jmp extGoodExit2    ;and exit!
   147                              <1> 
   148                              <1> writeFileHdl:      ;ah = 40h, handle function
   149 0000320B 488D35E8120000      <1>     lea rsi, writeBytes
   150 00003212 E9C0FFFFFF          <1>     jmp readFileHdl.common
   151                              <1> 
   152                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   153                              <1> ;Here don't allow malformed chars unless it is a network CDS
   154                              <1> ;Allows deleting volume labels.
   155 00003217 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   156 0000321C F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   157 00003223 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   158 00003226 880D(F7060000)      <1>     mov byte [searchAttr], cl
   159 0000322C 4889D6              <1>     mov rsi, rdx
   160 0000322F E8853B0000          <1>     call checkPathspecOK
   161 00003234 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   162 00003236 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   163                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   164 00003238 F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   165 0000323F 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   166                              <1> .badPath:
   167 00003241 B803000000          <1>     mov eax, errPnf
   168 00003246 E97F3E0000          <1>     jmp extErrExit
   169                              <1> .pathOk:
   170 0000324B 488D3D(1D050000)    <1>     lea rdi, buffer1
   171 00003252 52                  <1>     push rdx
   172 00003253 E823E0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   173 00003258 5A                  <1>     pop rdx
   174 00003259 0F826B3E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   175                              <1>     ;In the case of a wildcard, recall this will return the first file
   176 0000325F 803D(FF060000)FF    <1>     cmp byte [fileExist], -1
   177 00003266 0F855E3E0000        <1>     jnz extErrExit
   178 0000326C E8380A0000          <1>     call outerDeleteMain
   179 00003271 0F82533E0000        <1>     jc extErrExit
   180 00003277 E9403E0000          <1>     jmp extGoodExit
   181                              <1> 
   182                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   183                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   184 0000327C E83D180000          <1>     call getSFTPtr
   185 00003281 0F82433E0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   186 00003287 3C03                <1>     cmp al, 3
   187 00003289 720A                <1>     jb .validFunction
   188 0000328B B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   189 00003290 E9353E0000          <1>     jmp extErrExit
   190                              <1> .validFunction:
   191 00003295 3C01                <1>     cmp al, 1
   192 00003297 7718                <1>     ja .seekend
   193 00003299 7203                <1>     jb .seekset
   194                              <1> ;Here we are at seekcur, seek from current (signed)
   195 0000329B 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   196                              <1> .seekset:
   197                              <1> ;Seek from the start (unsigned)
   198 0000329E 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   199 000032A1 E851390000          <1>     call getUserRegs    ;Get user regs in rsi
   200 000032A6 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   201                              <1> .seekExit:
   202 000032A9 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   203 000032AC E9023E0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   204                              <1> .seekend:
   205                              <1> ;Here we are at seekend, seek from end (signed)
   206 000032B1 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   207 000032B7 7505                <1>     jnz .netCheck
   208                              <1> .proceedDisk:
   209 000032B9 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   210 000032BC EBE0                <1>     jmp short .seekset
   211                              <1> .netCheck:
   212 000032BE 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   213 000032C4 75F3                <1>     jnz .proceedDisk
   214 000032C6 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   215                              <1>     ;Check it's share mode
   216 000032CA 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   217 000032CF 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   218 000032D4 7407                <1>     je .netSeek
   219 000032D6 3D30000000          <1>     cmp eax, denyReadShare
   220 000032DB 75DC                <1>     jne .proceedDisk
   221                              <1> .netSeek:
   222 000032DD B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   223 000032E2 CD4F                <1>     int 4Fh
   224 000032E4 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   225 000032E6 E9DF3D0000          <1>     jmp extErrExit
   226                              <1> 
   227                              <1> 
   228                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   229 000032EB 3C01                <1>     cmp al, 1
   230 000032ED 761F                <1>     jbe .subFuncOk
   231 000032EF B801000000          <1>     mov eax, errInvFnc
   232                              <1> .chmodError:
   233                              <1> ;Call with ax = errorcode
   234 000032F4 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   235 000032FB C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   236 00003302 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   237 00003309 E9BC3D0000          <1>     jmp extErrExit
   238                              <1> .subFuncOk:
   239 0000330E 4889D6              <1>     mov rsi, rdx
   240 00003311 89C3                <1>     mov ebx, eax    ;Store function code in bl
   241 00003313 53                  <1>     push rbx
   242 00003314 51                  <1>     push rcx
   243 00003315 E89F3A0000          <1>     call checkPathspecOK
   244 0000331A 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   245                              <1> .badPath:
   246 0000331C 59                  <1>     pop rcx
   247 0000331D 5B                  <1>     pop rbx
   248 0000331E B803000000          <1>     mov eax, errPnf
   249 00003323 EBCF                <1>     jmp short .chmodError
   250                              <1> .pathOk:
   251 00003325 E88D3B0000          <1>     call checkPathNet 
   252 0000332A 74F0                <1>     jz .badPath ;Or Net paths
   253 0000332C E81C3B0000          <1>     call scanPathWC
   254 00003331 72E9                <1>     jc .badPath ;Dont allow wildcards
   255 00003333 488D3D(1D050000)    <1>     lea rdi, buffer1
   256 0000333A 52                  <1>     push rdx
   257 0000333B C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   258 00003342 E834DFFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   259 00003347 5A                  <1>     pop rdx
   260 00003348 59                  <1>     pop rcx
   261 00003349 5B                  <1>     pop rbx
   262 0000334A 0F827A3D0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   263                              <1>     ;In the case of a wildcard, recall this will return the first file
   264 00003350 803D(FF060000)FF    <1>     cmp byte [fileExist], -1
   265 00003357 759B                <1>     jnz .chmodError
   266                              <1> 
   267 00003359 E80C380000          <1>     call testCDSNet
   268 0000335E 730C                <1>     jnc .notNet
   269 00003360 750A                <1>     jnz .notNet ;This type of net ok
   270 00003362 B805000000          <1>     mov eax, errAccDen
   271 00003367 E95E3D0000          <1>     jmp extErrExit
   272                              <1> .notNet:
   273 0000336C 84DB                <1>     test bl, bl
   274 0000336E 7526                <1>     jnz .setAttribs
   275                              <1>     ;Get attribs here
   276 00003370 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   277 00003376 7412                <1>     jz .getDiskAttribs
   278 00003378 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   279 0000337D CD4F                <1>     int 4Fh
   280 0000337F 0F82453D0000        <1>     jc extErrExit
   281 00003385 E9323D0000          <1>     jmp extGoodExit
   282                              <1> .getDiskAttribs:
   283 0000338A 0FB605(64060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   284 00003391 E9263D0000          <1>     jmp extGoodExit
   285                              <1> 
   286                              <1> .setAttribs:
   287                              <1>     ;Set attribs here
   288 00003396 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   289 0000339C 7417                <1>     jz .setDiskAttribs
   290 0000339E 0FB7C9              <1>     movzx ecx, cx
   291 000033A1 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   292 000033A2 B80E110000          <1>     mov eax, 110Eh
   293 000033A7 CD4F                <1>     int 4Fh
   294 000033A9 59                  <1>     pop rcx
   295 000033AA 0F821A3D0000        <1>     jc extErrExit
   296 000033B0 E9073D0000          <1>     jmp extGoodExit
   297                              <1> .setDiskAttribs:
   298 000033B5 E87B080000          <1>     call checkNoOpenHandlesForShareAction
   299 000033BA 730A                <1>     jnc .okToSet
   300 000033BC B820000000          <1>     mov eax, errShrVio
   301 000033C1 E9043D0000          <1>     jmp extErrExit
   302                              <1> .okToSet:
   303 000033C6 E8B3EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   304 000033CB 0F82F93C0000        <1>     jc extErrExit
   305 000033D1 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   306 000033D4 740A                <1>     jz .set
   307 000033D6 B805000000          <1>     mov eax, errAccDen
   308 000033DB E9EA3C0000          <1>     jmp extErrExit
   309                              <1> .set:
   310 000033E0 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   311 000033E3 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   312 000033E6 08E9                <1>     or cl, ch
   313 000033E8 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   314 000033EB E8FED3FFFF          <1>     call writeThroughBuffers
   315 000033F0 7207                <1>     jc .setError
   316 000033F2 31C0                <1>     xor eax, eax
   317 000033F4 E9C33C0000          <1>     jmp extGoodExit
   318                              <1> .setError:
   319 000033F9 E8B9D3FFFF          <1>     call cancelWriteThroughBuffers
   320 000033FE E9C73C0000          <1>     jmp extErrExit
   321                              <1> 
   322                              <1> duplicateHandle:   ;ah = 45h, handle function
   323                              <1> ;Input: bx = Handle to duplicate
   324                              <1> ;Output: If ok then ax = New handle
   325 00003403 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   326 00003406 E89D160000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   327                              <1> .duplicateCommon:
   328 0000340B 0F82B93C0000        <1>     jc extErrExit   ;Exit if no space
   329 00003411 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   330 00003414 93                  <1>     xchg eax, ebx
   331 00003415 E8A4160000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   332 0000341A 0F82AA3C0000        <1>     jc extErrExit
   333 00003420 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   334 00003423 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   335 00003429 7505                <1>     jnz .netFile
   336 0000342B E8D0090000          <1>     call openDriverMux
   337                              <1> .netFile:
   338 00003430 E83E160000          <1>     call getJFTPtr
   339 00003435 8A1F                <1>     mov bl, byte [rdi]
   340 00003437 881E                <1>     mov byte [rsi], bl
   341 00003439 E97E3C0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   342                              <1> 
   343                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   344                              <1> ;Input: bx = Handle to duplicate
   345                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   346                              <1>     ;First we close cx if it exists
   347 0000343E 0FB7C9              <1>     movzx ecx, cx
   348 00003441 53                  <1>     push rbx
   349 00003442 51                  <1>     push rcx
   350 00003443 89CB                <1>     mov ebx, ecx
   351 00003445 E847FDFFFF          <1>     call closeFileHdl   ;Close handle 
   352 0000344A 5B                  <1>     pop rbx
   353 0000344B 58                  <1>     pop rax
   354 0000344C E822160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   355 00003451 EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   356                              <1> 
   357                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   358                              <1> ;Input: cx = Search Attributes, cl only used
   359                              <1> ;       rdx = Ptr to path to file to look for
   360                              <1> ;       al = Document as needing to be 0 for now
   361                              <1> ;Return:
   362                              <1> ;Data in the DTA or error through AX with CF=CY
   363                              <1> ;CAVEATS!
   364                              <1> ;DTA:attribFnd = 40h => Char dev
   365                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   366 00003453 880D(F7060000)      <1>     mov byte [searchAttr], cl
   367 00003459 4889D6              <1>     mov rsi, rdx
   368 0000345C E858390000          <1>     call checkPathspecOK
   369 00003461 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   370 00003463 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   371                              <1> .badPath:
   372 00003465 B803000000          <1>     mov eax, errPnf
   373 0000346A E95B3C0000          <1>     jmp extErrExit
   374                              <1> .pathspecOk:
   375 0000346F FF35(17040000)      <1>     push qword [currentDTA]
   376 00003475 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   377 0000347C 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   378 00003483 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   379 0000348A E8ECDDFFFF          <1>     call getFilePath
   380                              <1> .findfileExit:
   381 0000348F 8F05(17040000)      <1>     pop qword [currentDTA]
   382 00003495 0F822F3C0000        <1>     jc extErrExit
   383 0000349B 488D3D(2E060000)    <1>     lea rdi, dosffblock
   384 000034A2 57                  <1>     push rdi
   385 000034A3 E808DDFFFF          <1>     call setupFFBlock
   386 000034A8 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   387 000034A9 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   388 000034B0 B92B000000          <1>     mov ecx, ffBlock_size
   389 000034B5 F3A4                <1>     rep movsb   ;Copy the whole block. 
   390                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   391 000034B7 31C0                <1>     xor eax, eax    ;Return value
   392 000034B9 E9FE3B0000          <1>     jmp extGoodExit ;Exit well
   393                              <1> 
   394                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   395                              <1> ;Input: DTA has the find first block from the previous search
   396 000034BE 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   397 000034C5 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   398 000034CC B92B000000          <1>     mov ecx, ffBlock_size
   399 000034D1 F3A4                <1>     rep movsb
   400 000034D3 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   401 000034D9 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   402 000034E0 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   403 000034E7 E842D9FFFF          <1>     call findNextMain
   404 000034EC EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   405                              <1> 
   406                              <1> renameFile:        ;ah = 56h
   407                              <1> ;Input: rdx -> Filespec to rename
   408                              <1> ;       rdi -> New filespec
   409                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   410 000034EE 4889D6              <1>     mov rsi, rdx
   411 000034F1 BB16000000          <1>     mov ebx, dirInclusive
   412 000034F6 F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   413 000034FD 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   414 00003500 880D(F7060000)      <1>     mov byte [searchAttr], cl
   415                              <1>     ;Step 0, verify both paths provided are valid
   416 00003506 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   417 0000350B 7249                <1>     jc .pnfError
   418 0000350D 56                  <1>     push rsi
   419 0000350E 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   420 00003511 E84A000000          <1>     call .renamePathCheck
   421 00003516 5E                  <1>     pop rsi
   422 00003517 723D                <1>     jc .pnfError
   423                              <1>     ;Now we canonicalise the filenames to make life easy
   424 00003519 56                  <1>     push rsi
   425 0000351A 4889FE              <1>     mov rsi, rdi
   426 0000351D 488D3D(9D050000)    <1>     lea rdi, buffer2
   427 00003524 E81DDDFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   428 00003529 5E                  <1>     pop rsi
   429 0000352A 722A                <1>     jc .pnfError
   430                              <1>     ;Now test if first file exists.
   431 0000352C FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   432 00003532 8F05(25060000)      <1>     pop qword [fname2Ptr]
   433 00003538 488D3D(1D050000)    <1>     lea rdi, buffer1
   434 0000353F E802DDFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   435 00003544 7210                <1>     jc .pnfError  
   436 00003546 E860030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   437 0000354B 0F82793B0000        <1>     jc extErrExit
   438 00003551 E9663B0000          <1>     jmp extGoodExit
   439                              <1> .pnfError:
   440 00003556 B803000000          <1>     mov eax, errPnf
   441 0000355B E96A3B0000          <1>     jmp extErrExit
   442                              <1> .renamePathCheck:
   443                              <1> ;Checks if the pathspec in rsi is OK
   444 00003560 56                  <1>     push rsi
   445 00003561 57                  <1>     push rdi
   446 00003562 E852380000          <1>     call checkPathspecOK
   447 00003567 5F                  <1>     pop rdi
   448 00003568 5E                  <1>     pop rsi
   449 00003569 730D                <1>     jnc .pathOk     ;Path ok 
   450 0000356B 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   451                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   452 0000356D F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   453 00003574 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   454                              <1> .badPath:
   455 00003576 F9                  <1>     stc
   456                              <1>     return
    13                              <2> %%_ret:
    14 00003577 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   457                              <1> .pathOk:
   458 00003578 F8                  <1>     clc
   459                              <1>     return
    13                              <2> %%_ret:
    14 00003579 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> getSetFileDateTime:;ah = 57h
   462 0000357A 3C01                <1>     cmp al, 1
   463 0000357C 760A                <1>     jbe .oksubfun
   464 0000357E B801000000          <1>     mov eax, errInvFnc
   465 00003583 E9423B0000          <1>     jmp extErrExit
   466                              <1> .oksubfun:
   467 00003588 E831150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   468 0000358D 0F82373B0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   469 00003593 3C01                <1>     cmp al, 1
   470 00003595 741C                <1>     je .setTimeDate
   471                              <1>     ;Here we get the Time/Date
   472 00003597 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   473 0000359B 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   474 0000359F E853360000          <1>     call getUserRegs
   475 000035A4 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   476 000035A8 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   477 000035AC 31C0                <1>     xor eax, eax
   478 000035AE E9093B0000          <1>     jmp extGoodExit
   479                              <1> .setTimeDate:
   480                              <1>     ;Here we set the Time/Date
   481 000035B3 66894F13            <1>     mov word [rdi + sft.wTime], cx
   482 000035B7 66895715            <1>     mov word [rdi + sft.wDate], dx
   483 000035BB 31C0                <1>     xor eax, eax
   484 000035BD E9FA3A0000          <1>     jmp extGoodExit
   485                              <1> 
   486                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   487                              <1> ;Uses the clock to do it's bidding
   488                              <1> ;cx = file attribute 
   489                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   490                              <1> ;       filename
   491 000035C2 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   492 000035C7 740A                <1>     jz .validAttribs
   493 000035C9 B805000000          <1>     mov eax, errAccDen
   494 000035CE E9F73A0000          <1>     jmp extErrExit
   495                              <1> .validAttribs:
   496 000035D3 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   497 000035D7 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   498 000035DA B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   499 000035DF 31C0                <1>     xor eax, eax
   500 000035E1 4889D7              <1>     mov rdi, rdx
   501 000035E4 F2AE                <1>     repne scasb
   502 000035E6 85C9                <1>     test ecx, ecx
   503 000035E8 750A                <1>     jnz .nullFnd
   504                              <1>     ;Bad path
   505 000035EA B803000000          <1>     mov eax, errPnf
   506 000035EF E9D63A0000          <1>     jmp extErrExit
   507                              <1> .nullFnd:
   508 000035F4 48FFCF              <1>     dec rdi
   509 000035F7 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   510 000035FB E811370000          <1>     call swapPathSeparator
   511 00003600 7403                <1>     jz .pathsepFnd
   512                              <1>     ;If no pathsep found, force one at rdi
   513 00003602 B05C                <1>     mov al, "\"
   514 00003604 AA                  <1>     stosb
   515                              <1> .pathsepFnd:
   516 00003605 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   517                              <1> .fileCreateLoop:
   518 00003608 55                  <1>     push rbp
   519 00003609 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   520 0000360E 5D                  <1>     pop rbp
   521 0000360F 0FB7C1              <1>     movzx eax, cx
   522 00003612 0FB7D2              <1>     movzx edx, dx
   523 00003615 C1E010              <1>     shl eax, 10h
   524 00003618 09D0                <1>     or eax, edx  ;Add the bits of dx too
   525 0000361A E831000000          <1>     call .writeNybbles
   526 0000361F 31C0                <1>     xor eax, eax
   527 00003621 AA                  <1>     stosb   ;Store terminating null
   528 00003622 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   529 00003625 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   530 00003628 55                  <1>     push rbp
   531 00003629 E85C000000          <1>     call createNewFile
   532 0000362E 5D                  <1>     pop rbp
   533 0000362F 0F83873A0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   534 00003635 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   535 0000363C 3D05000000          <1>     cmp eax, errAccDen
   536 00003641 74C5                <1>     je .fileCreateLoop
   537 00003643 3D50000000          <1>     cmp eax, errFilExist
   538 00003648 74BE                <1>     je .fileCreateLoop
   539 0000364A F9                  <1>     stc
   540 0000364B E97A3A0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   541                              <1> .writeNybbles:
   542                              <1> ;Write the nybbles of eax at rdi
   543 00003650 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   544                              <1> .wnLp:
   545 00003655 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   546 00003658 50                  <1>     push rax
   547 00003659 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   548 0000365E 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   549 00003663 3D39000000          <1>     cmp eax, '9'
   550 00003668 7605                <1>     jbe .notExtDigit
   551 0000366A 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   552                              <1> .notExtDigit:
   553 0000366F AA                  <1>     stosb   ;Store the digit
   554 00003670 58                  <1>     pop rax
   555 00003671 FFC9                <1>     dec ecx
   556 00003673 75E0                <1>     jnz .wnLp
   557                              <1>     return
    13                              <2> %%_ret:
    14 00003675 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> .uniqueTimeGet:
   560 00003676 E813F4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   561 0000367B 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   562 00003682 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   563                              <1>     return
    13                              <2> %%_ret:
    14 00003689 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> 
   565                              <1> createNewFile:     ;ah = 5Bh
   566 0000368A 51                  <1>     push rcx    ;Save file attributes on stack
   567 0000368B 488D0DC3070000      <1>     lea rcx, createNewMain
   568 00003692 C605(F7060000)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   569 00003699 E9E6F9FFFF          <1>     jmp openFileHdl.openCommon
   570                              <1> 
   571                              <1> lockUnlockFile:    ;ah = 5Ch
   572                              <1> ;ah = 5Ch
   573                              <1> ;al = subfunction
   574                              <1> ;       00h lock region of file
   575                              <1> ;       01h unlock region of file
   576                              <1> ;ebx = file handle
   577                              <1> ;ecx = start offset of region within file
   578                              <1> ;edi = length of region in bytes
   579 0000369E 3C01                <1>     cmp al, 1
   580 000036A0 7757                <1>     ja .badFunction
   581 000036A2 57                  <1>     push rdi
   582 000036A3 E830140000          <1>     call derefSFTPtr
   583 000036A8 730B                <1>     jnc .validHdl
   584 000036AA 58                  <1>     pop rax ;Discard the qword on the stack
   585 000036AB B806000000          <1>     mov eax, errBadHdl
   586 000036B0 E9153A0000          <1>     jmp extErrExit
   587                              <1> .validHdl:
   588 000036B5 84C0                <1>     test al, al ;Check if al = 0
   589 000036B7 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   590 000036B8 7424                <1>     jz .lockFileRegion
   591 000036BA 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   592 000036C0 740B                <1>     jz .unlockShare ;Jump if a local file only
   593 000036C2 50                  <1>     push rax
   594 000036C3 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   595 000036C8 CD4F                <1>     int 4Fh
   596 000036CA 5B                  <1>     pop rbx
   597 000036CB EB06                <1>     jmp short .exitSelect
   598                              <1> .unlockShare:
   599 000036CD FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   600                              <1> .exitSelect:
   601 000036D3 0F82F1390000        <1>     jc extErrExit
   602 000036D9 E9DE390000          <1>     jmp extGoodExit
   603                              <1> .lockFileRegion:
   604 000036DE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   605 000036E4 740B                <1>     jz .lockShare   ;Jump if a local file only
   606 000036E6 50                  <1>     push rax
   607 000036E7 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   608 000036EC CD4F                <1>     int 4Fh
   609 000036EE 5B                  <1>     pop rbx
   610 000036EF EBE2                <1>     jmp short .exitSelect
   611                              <1> .lockShare:
   612 000036F1 FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   613 000036F7 EBDA                <1>     jmp short .exitSelect
   614                              <1> .badFunction:
   615 000036F9 B801000000          <1>     mov eax, errInvFnc
   616 000036FE 668905(0B040000)    <1>     mov word [errorExCde], ax
   617 00003705 E9C0390000          <1>     jmp extErrExit
   618                              <1> 
   619                              <1> setHandleCount:    ;ah = 67h
   620                              <1> ;Input: bx = Size of new file handle table for process
   621                              <1> ;Output: CF=NC -> Ok to make more handles
   622                              <1> ;        CF=CY -> ax = Error code
   623                              <1> ;Five cases to consider:
   624                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   625                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   626                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   627                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   628                              <1> ;   Special case below, cannot be enacted directly by caller.
   629                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   630 0000370A 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   631 0000370D 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   632 00003714 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   633 00003718 7765                <1>     ja short .moreHdlsReq
   634 0000371A 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   635 0000371F 771A                <1>     ja short .reduceExternal
   636                              <1>     ;Here if 20 handles or less requested
   637 00003721 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   638 00003727 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   639 00003729 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   640 0000372B 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   641                              <1> .exitGood:
   642 00003731 E986390000          <1>     jmp extGoodExit
   643                              <1> .exitBad:
   644 00003736 E98F390000          <1>     jmp extErrExit
   645                              <1> .reduceExternal:
   646                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   647                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   648                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   649                              <1> ; and failing that, it will free it and then allocate a new block.
   650 0000373B 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   651 0000373F E8E8000000          <1>     call .checkOpenHandles
   652 00003744 72F0                <1>     jc short .exitBad
   653                              <1>     ;Recall ebx has the numebr of handles here
   654 00003746 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   655 0000374B 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   656 0000374F EBE0                <1>     jmp short .exitGood
   657                              <1> .reduceFree:
   658                              <1> ;Entered once we know that we have an external block
   659                              <1> ;Now we close all handles above JFT size
   660 00003751 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   661 00003755 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   662 00003758 E8CF000000          <1>     call .checkOpenHandles
   663 0000375D 72D7                <1>     jc short .exitBad
   664 0000375F BB14000000          <1>     mov ebx, dfltJFTsize
   665 00003764 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   666                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   667 00003766 E8B8000000          <1>     call .copyBlock
   668                              <1>     ;Now we can free the old block
   669 0000376B 4989F0              <1>     mov r8, rsi
   670 0000376E 53                  <1>     push rbx
   671 0000376F E86B1B0000          <1>     call freeMemory
   672 00003774 5B                  <1>     pop rbx
   673 00003775 72BF                <1>     jc short .exitBad
   674 00003777 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   675 0000377B 31C0                <1>     xor eax, eax
   676                              <1> .exitGood2:
   677 0000377D EBB2                <1>     jmp short .exitGood
   678                              <1> .moreHdlsReq:
   679 0000377F 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   680 00003785 7507                <1>     jne short .okToExpand
   681 00003787 B801000000          <1>     mov eax, errInvFnc
   682                              <1> .exitBad2:
   683 0000378C EBA8                <1>     jmp short .exitBad
   684                              <1> .okToExpand:
   685                              <1> ;Need to check if we are external and reallocating. 
   686                              <1> ;   If we are, can we realloc or do we need to free and save?
   687 0000378E 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   688 00003794 762E                <1>     jbe short .moreFromJFT
   689 00003796 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   690 0000379A E83C000000          <1>     call .reallocBlock
   691 0000379F 7390                <1>     jnc short .exitGood
   692 000037A1 E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   693 000037A6 728E                <1>     jc short .exitBad
   694 000037A8 4989F0              <1>     mov r8, rsi ;Free the source block
   695 000037AB 53                  <1>     push rbx
   696 000037AC 57                  <1>     push rdi    ;Save the new pointer here
   697 000037AD 55                  <1>     push rbp
   698 000037AE E82C1B0000          <1>     call freeMemory
   699 000037B3 5D                  <1>     pop rbp
   700 000037B4 5F                  <1>     pop rdi
   701 000037B5 5B                  <1>     pop rbx
   702 000037B6 7317                <1>     jnc short .freeOk ;Free'd the original block
   703 000037B8 50                  <1>     push rax    ;Save error code on stack
   704 000037B9 4989F8              <1>     mov r8, rdi ;Free the new block
   705 000037BC E81E1B0000          <1>     call freeMemory
   706 000037C1 58                  <1>     pop rax
   707 000037C2 EBC8                <1>     jmp short .exitBad2
   708                              <1> .moreFromJFT:
   709 000037C4 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   710 000037C8 E826000000          <1>     call .getBlock
   711 000037CD 72BD                <1>     jc short .exitBad2
   712                              <1> .freeOk:
   713 000037CF 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   714 000037D3 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   715 000037D7 31C0                <1>     xor eax, eax
   716 000037D9 EBA2                <1>     jmp short .exitGood2
   717                              <1> .reallocBlock:
   718                              <1> ;Input:
   719                              <1> ;   rsi -> Source block to reallocate
   720                              <1> ;   ebx = Number of handles
   721                              <1> ;   rbp -> Current PSP
   722                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   723                              <1> ;                 ebx = Number of handles
   724                              <1> ;        CF=CY => Error, EAX has error code
   725 000037DB 56                  <1>     push rsi ;Save external pointer on stack
   726 000037DC 53                  <1>     push rbx    ;Save number of handles on stack
   727 000037DD 55                  <1>     push rbp
   728 000037DE 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   729 000037E4 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   730 000037E7 4989F0              <1>     mov r8, rsi
   731 000037EA E8F81B0000          <1>     call reallocMemory
   732 000037EF 5D                  <1>     pop rbp
   733 000037F0 5B                  <1>     pop rbx
   734 000037F1 5E                  <1>     pop rsi ;Get external pointer back in rsi
   735                              <1>     return
    13                              <2> %%_ret:
    14 000037F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   736                              <1> .getBlock:
   737                              <1> ;rsi -> Source block for copy 
   738                              <1> ;ebx = Number of new handles
   739                              <1> ;Output: rsi and ebx as before
   740                              <1> ;        rdi -> New block
   741                              <1> ;IF CF=CY, bad exit
   742 000037F3 53                  <1>     push rbx    ;bx has the number of handles we want
   743 000037F4 56                  <1>     push rsi
   744 000037F5 55                  <1>     push rbp
   745 000037F6 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   746 000037FC C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   747 000037FF 89D9                <1>     mov ecx, ebx
   748 00003801 C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   749 00003804 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   750 00003805 E8D1180000          <1>     call allocateMemory ;Allocate memory 
   751 0000380A 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   752 0000380B 5D                  <1>     pop rbp ;Get the PSP pointer back
   753 0000380C 5E                  <1>     pop rsi ;Get the source pointer back
   754 0000380D 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   755                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000380E 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   756 00003810 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   757 00003813 57                  <1>     push rdi
   758 00003814 31C0                <1>     xor eax, eax
   759 00003816 FFC8                <1>     dec eax
   760 00003818 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   761 0000381A 5F                  <1>     pop rdi
   762 0000381B 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   763 0000381D E801000000          <1>     call .copyBlock ;Copy all the handles over
   764                              <1>     return
    13                              <2> %%_ret:
    14 00003822 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   765                              <1> .copyBlock:
   766                              <1> ;Input: rsi -> Source block
   767                              <1> ;       rdi -> Destination block
   768                              <1> ;       ecx = Number of handles to copy
   769 00003823 56                  <1>     push rsi
   770 00003824 57                  <1>     push rdi
   771 00003825 51                  <1>     push rcx
   772 00003826 F3A4                <1>     rep movsb
   773 00003828 59                  <1>     pop rcx
   774 00003829 5F                  <1>     pop rdi
   775 0000382A 5E                  <1>     pop rsi
   776                              <1>     return
    13                              <2> %%_ret:
    14 0000382B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   777                              <1> .checkOpenHandles:
   778                              <1> ;Checks for open handles in the range that is to be freed.
   779                              <1> ;If any found, error exit
   780                              <1> ;Input: rsi -> Where to start searching
   781 0000382C 56                  <1>     push rsi
   782 0000382D 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   783                              <1> .cohLoop:
   784 00003831 803EFF              <1>     cmp byte [rsi], -1
   785 00003834 7509                <1>     jne .checkOpenHandlesBadExit
   786 00003836 48FFC6              <1>     inc rsi
   787 00003839 FFC9                <1>     dec ecx
   788 0000383B 75F4                <1>     jnz .cohLoop
   789 0000383D 5E                  <1>     pop rsi
   790                              <1>     return
    13                              <2> %%_ret:
    14 0000383E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   791                              <1> .checkOpenHandlesBadExit:
   792 0000383F B804000000          <1>     mov eax, errNhl
   793 00003844 F9                  <1>     stc
   794 00003845 5E                  <1>     pop rsi
   795                              <1>     return
    13                              <2> %%_ret:
    14 00003846 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> 
   797                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   798                              <1>     ;Input: bx = File to flush
   799 00003847 E872120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   800 0000384C 0F8278380000        <1>     jc extErrExit
   801 00003852 E8C0100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   802                              <1>     ;Now we check if the device is a char, disk or net file and commit
   803 00003857 E811000000          <1>     call commitMain
   804 0000385C 0F8268380000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   805                              <1> .exitOk:
   806 00003862 30C0                <1>     xor al, al
   807 00003864 E88E330000          <1>     call getUserRegs
   808 00003869 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   809                              <1>     return
    13                              <2> %%_ret:
    14 0000386C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   810                              <1> 
   811                              <1> ;-----------------------------------:
   812                              <1> ;       Main File IO Routines       :
   813                              <1> ;-----------------------------------:
   814                              <1> commitMain:
   815                              <1> ;Commits the current SFT 
   816 0000386D E8AD100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   817 00003872 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   818 00003876 A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   819                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000387B 75EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   820 0000387D 66A90080            <1>     test ax, devRedirDev
   821 00003881 7508                <1>     jnz .notNet
   822                              <1>     ;Commit file net redir call and exit
   823 00003883 B807110000          <1>     mov eax, 1107h
   824 00003888 CD4F                <1>     int 4Fh
   825                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 0000388A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   826                              <1> .notNet:
   827 0000388B E8EF370000          <1>     call dosCrit1Enter
   828 00003890 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   829 00003894 E8C9320000          <1>     call setWorkingDPB
   830 00003899 E85AE6FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   831 0000389E 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   832 000038A0 E85FD1FFFF          <1>     call flushFile  ;Now the file gets flushed
   833                              <1> .exit:
   834                              <1> ;Propagate CF and AL if needed due to error
   835 000038A5 E8DF370000          <1>     call dosCrit1Exit
   836                              <1>     return
    13                              <2> %%_ret:
    14 000038AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   837                              <1> renameMain:
   838                              <1> ;Now, creates a special find first block for the source file
   839                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   840                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   841                              <1> ; block. 
   842                              <1> ;Then we search for that file name specifically (again), replacing 
   843                              <1> ; the filename portion of the destination buffer. If it exists or the 
   844                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   845                              <1> ; the new directory entry and delete the original file. 
   846                              <1> ;Input:
   847                              <1> ; filenamePtr1 -> Source path + filename pattern
   848                              <1> ; filenamePtr2 -> New path + filename pattern
   849                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   850 000038AB 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   851 000038B2 E8B3320000          <1>     call testCDSNet ;CF=NC => Not net
   852 000038B7 7308                <1>     jnc .notNet
   853 000038B9 B811110000          <1>     mov eax, 1111h
   854 000038BE CD4F                <1>     int 4Fh
   855                              <1>     return
    13                              <2> %%_ret:
    14 000038C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   856                              <1> .notNet:
   857                              <1> ;First check if both drives are on the same disk
   858 000038C1 8A05(1D050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   859 000038C7 8A25(9D050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   860 000038CD 38E0                <1>     cmp al, ah
   861 000038CF 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   862 000038D1 B811000000          <1>     mov eax, errDevUnk
   863 000038D6 F9                  <1>     stc
   864                              <1>     return
    13                              <2> %%_ret:
    14 000038D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   865                              <1> .sameDrive:
   866                              <1> ;Now we check if either pathsepc is simply X:\,0
   867                              <1> ; If they are, return fail as we cannot rename the root dir
   868 000038D8 E8A2370000          <1>     call dosCrit1Enter
   869 000038DD 8B05(1D050000)      <1>     mov eax, dword [buffer1]
   870 000038E3 30C0                <1>     xor al, al
   871 000038E5 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   872 000038EA 750B                <1>     jne .checkpath2
   873                              <1> .accDen:
   874 000038EC B805000000          <1>     mov eax, errAccDen
   875                              <1> .errorExit:
   876 000038F1 F9                  <1>     stc
   877 000038F2 E9EE020000          <1>     jmp .exit2
   878                              <1> .checkpath2:
   879 000038F7 8B05(9D050000)      <1>     mov eax, dword [buffer2]
   880 000038FD 30C0                <1>     xor al, al
   881 000038FF 3D003A5C00          <1>     cmp eax, 005C3A00h
   882 00003904 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   883                              <1> ;Now we find first the source file
   884 00003906 488B35(1D060000)    <1>     mov rsi, qword [fname1Ptr]
   885 0000390D 4889F7              <1>     mov rdi, rsi
   886 00003910 C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   887 00003917 E854D9FFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   888 0000391C 0F82C3020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   889 00003922 488D35(59060000)    <1>     lea rsi, curDirCopy
   890 00003929 488D3D(BD070000)    <1>     lea rdi, renameDir
   891 00003930 B904000000          <1>     mov ecx, fatDirEntry_size/8
   892 00003935 F348A5              <1>     rep movsq   ;Copy directory over
   893 00003938 488D3D(92070000)    <1>     lea rdi, renameFFBlk
   894 0000393F E86CD8FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   895                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   896                              <1>     ; dir for any CDS.
   897 00003944 F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   898 0000394B 7543                <1>     jnz .notDirCheck
   899 0000394D 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   900 00003954 57                  <1>     push rdi
   901 00003955 E8F5330000          <1>     call strlen ;Get asciiz length in ecx
   902 0000395A 5B                  <1>     pop rbx
   903 0000395B FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   904 0000395D 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   905 00003964 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   906                              <1> .dirCheck:
   907 0000396B 4889DF              <1>     mov rdi, rbx
   908 0000396E 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   909 0000396F F3A6                <1>     repe cmpsb  ;Compare while they are equal
   910 00003971 AC                  <1>     lodsb   ;Get the last char to check in al
   911 00003972 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   912 00003973 7510                <1>     jne .neqDir
   913 00003975 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   914 00003977 0F846FFFFFFF        <1>     je .accDen
   915 0000397D 84C0                <1>     test al, al
   916 0000397F 0F8467FFFFFF        <1>     je .accDen
   917                              <1> .neqDir:
   918 00003985 4881C65B000000      <1>     add rsi, cds_size   ;Goto next CDS
   919 0000398C FFCA                <1>     dec edx
   920 0000398E 75DB                <1>     jnz .dirCheck
   921                              <1> .notDirCheck:
   922                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   923 00003990 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   924 00003995 31C0                <1>     xor eax, eax
   925 00003997 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   926 0000399E F2AE                <1>     repne scasb   ;Search for terminating null
   927 000039A0 FD                  <1>     std ;Go backwards now, to find the path sep
   928 000039A1 B05C                <1>     mov al, "\"
   929 000039A3 F2AE                <1>     repne scasb   ;Now rsi points one before
   930 000039A5 FC                  <1>     cld ;Go normal ways now
   931 000039A6 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   932 000039AD 57                  <1>     push rdi
   933 000039AE 4889FE              <1>     mov rsi, rdi
   934 000039B1 488D3D(E0060000)    <1>     lea rdi, wcdFcbName
   935 000039B8 E86BD7FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   936 000039BD 5F                  <1>     pop rdi
   937 000039BE 57                  <1>     push rdi    ;Save rdi on stack again
   938 000039BF 488D35(B0070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   939                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   940 000039C6 48A5                <1>     movsq
   941 000039C8 A5                  <1>     movsd
   942 000039C9 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   943 000039CA 5F                  <1>     pop rdi ;rdi points to first char position
   944 000039CB E865020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   945 000039D0 0F821BFFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   946                              <1>     ;Else return the pattern back to its original position
   947 000039D6 488D35(E0060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   948 000039DD E88ED7FFFF          <1>     call FCBToAsciiz
   949                              <1>     ;Delete the original directory entry
   950 000039E2 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   951 000039E6 FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   952 000039E8 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   953 000039EC F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   954 000039EE 8B0D(9F070000)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   955 000039F4 C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   956 000039F7 91                  <1>     xchg ecx, eax
   957 000039F8 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   958 000039FA 89C3                <1>     mov ebx, eax
   959 000039FC 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   960 00003A02 E8BFD0FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   961 00003A07 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   962 00003A0A E89CCFFFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   963 00003A0F 0F82DB010000        <1>     jc .badExit
   964 00003A15 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   965                              <1>     ;rsi points to the file entry
   966 00003A1A 8A05(03070000)      <1>     mov al, byte [delChar]
   967 00003A20 8806                <1>     mov byte [rsi], al
   968 00003A22 E8F9CDFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   969                              <1> 
   970                              <1>     ;Now we use the destination filename pattern to build the new filename
   971 00003A27 488B3D(25060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   972 00003A2E 31C0                <1>     xor eax, eax
   973 00003A30 B943000000          <1>     mov ecx, 67
   974 00003A35 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   975                              <1> .findPattern:
   976 00003A37 48FFCF              <1>     dec rdi
   977 00003A3A 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   978 00003A3D 75F8                <1>     jne .findPattern
   979                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   980 00003A3F C605(F9060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   981 00003A46 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   982 00003A4A 750D                <1>     jne .notRoot
   983                              <1>     ;The root dir always exists on a volume so can skip the check.
   984 00003A4C 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   985 00003A4F 57                  <1>     push rdi
   986 00003A50 800D(F9060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   987 00003A57 EB29                <1>     jmp short .skipCheck
   988                              <1> .notRoot:
   989 00003A59 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   990 00003A5A 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   991                              <1>     ;Now check if the parent directory exists for the destination
   992 00003A5B 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   993 00003A5C FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   994 00003A62 488D35(9D050000)    <1>     lea rsi, buffer2
   995 00003A69 4889F7              <1>     mov rdi, rsi
   996 00003A6C E8F8D7FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   997 00003A71 8F05(1D060000)      <1>     pop qword [fname1Ptr]
   998 00003A77 5F                  <1>     pop rdi
   999 00003A78 0F8272010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
  1000 00003A7E C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1001                              <1> .skipCheck:
  1002                              <1>     ;rdi now points to the first char of the pattern
  1003 00003A82 4889FE              <1>     mov rsi, rdi
  1004 00003A85 488D3D(E0060000)    <1>     lea rdi, wcdFcbName
  1005 00003A8C E897D6FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1006                              <1>     ;Ensure the destination pattern is not all question marks
  1007 00003A91 813D(E0060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1007 00003A99 3F3F                <1>
  1008 00003A9B 7524                <1>     jne .validRenPattern
  1009 00003A9D 813D(E4060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1009 00003AA5 3F3F                <1>
  1010 00003AA7 7518                <1>     jne .validRenPattern
  1011 00003AA9 66813D(E8060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1011 00003AB1 3F                  <1>
  1012 00003AB2 750D                <1>     jne .validRenPattern
  1013 00003AB4 803D(EA060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1014 00003ABB 0F842A010000        <1>     je .bad ;Access denied buddy ol' pal
  1015                              <1> .validRenPattern:
  1016                              <1>     ;curDirCopy has information for the destination directory file we will 
  1017                              <1>     ; write to. The cluster points to the directory file itself to search in
  1018                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1019                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1020 00003AC1 488D35(BD070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1021 00003AC8 488D3D(D4060000)    <1>     lea rdi, fcbName
  1022 00003ACF 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1023 00003AD0 B90B000000          <1>     mov ecx, 11
  1024 00003AD5 F3A4                <1>     rep movsb
  1025 00003AD7 5F                  <1>     pop rdi
  1026 00003AD8 488D35(E0060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1027                              <1> .mnnLp:
  1028 00003ADF AC                  <1>     lodsb
  1029 00003AE0 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1030 00003AE2 7404                <1>     je .mnnWC   ;Skip overriding this char
  1031 00003AE4 AA                  <1>     stosb   ;Store new char and go forwards by one
  1032 00003AE5 48FFCF              <1>     dec rdi ;Now go back by one
  1033                              <1> .mnnWC:
  1034 00003AE8 48FFC7              <1>     inc rdi ;Goto next letter
  1035 00003AEB FFC1                <1>     inc ecx
  1036 00003AED 81F90B000000        <1>     cmp ecx, 11
  1037 00003AF3 75EA                <1>     jne .mnnLp
  1038 00003AF5 488D35(D4060000)    <1>     lea rsi, fcbName
  1039 00003AFC 488D3D(BD070000)    <1>     lea rdi, renameDir
  1040 00003B03 B90B000000          <1>     mov ecx, 11
  1041 00003B08 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1042 00003B0A 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1043 00003B0B 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1044 00003B0C 488D35(D4060000)    <1>     lea rsi, fcbName
  1045 00003B13 E858D6FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1046 00003B18 488B35(25060000)    <1>     mov rsi, qword [fname2Ptr]
  1047 00003B1F 4889F7              <1>     mov rdi, rsi
  1048 00003B22 E849D7FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1049 00003B27 0F83C3000000        <1>     jnc .badExit   ;If the file exists, then error
  1050 00003B2D 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
  1051 00003B32 0F85B8000000        <1>     jne .badExit
  1052                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1053                              <1>     ;If the parent is root, deal with special case
  1054 00003B38 488D1D(59060000)    <1>     lea rbx, curDirCopy
  1055 00003B3F F605(F9060000)02    <1>     test byte [fileFDflg], 2
  1056 00003B46 C605(F9060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1057 00003B4D 7416                <1>     jz .notRoot2
  1058 00003B4F 488D35(D4060000)    <1>     lea rsi, fcbName
  1059 00003B56 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1060 00003B5D 48A5                <1>     movsq
  1061 00003B5F A5                  <1>     movsd
  1062 00003B60 A4                  <1>     movsb
  1063 00003B61 31C0                <1>     xor eax, eax    ;Dir to search
  1064 00003B63 EB13                <1>     jmp short .getSpace
  1065                              <1> .notRoot2:
  1066 00003B65 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1067 00003B6C 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1068 00003B73 C1E210              <1>     shl edx, 10h
  1069 00003B76 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1070                              <1> .getSpace:
  1071 00003B78 E87C000000          <1>     call .searchForDirSpace
  1072 00003B7D 726C                <1>     jc .bad
  1073                              <1> ;dir Entry found, rsi points to space in buffer
  1074 00003B7F 4889F7              <1>     mov rdi, rsi
  1075 00003B82 488D35(BD070000)    <1>     lea rsi, renameDir
  1076 00003B89 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1077 00003B8E F348A5              <1>     rep movsq   ;Copy dir over
  1078 00003B91 E88ACCFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1079                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1080                              <1>     ;If it does, we find next. If not, we exit
  1081 00003B96 B03F                <1>     mov al, "?"
  1082 00003B98 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1083 00003B9F E8AB310000          <1>     call strlen ;Get in rcx to get the length of the string
  1084 00003BA4 F2AE                <1>     repne scasb
  1085 00003BA6 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1086 00003BA8 B90B000000          <1>     mov ecx, 11
  1087 00003BAD 488D3D(E0060000)    <1>     lea rdi, wcdFcbName
  1088 00003BB4 F2AE                <1>     repne scasb
  1089 00003BB6 7525                <1>     jne .exit
  1090                              <1>     ;Here we gotta do a find next now!
  1091 00003BB8 FF35(17040000)      <1>     push qword [currentDTA]
  1092 00003BBE 488D3D(92070000)    <1>     lea rdi, renameFFBlk
  1093 00003BC5 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1094 00003BCC E85DD2FFFF          <1>     call findNextMain
  1095 00003BD1 8F05(17040000)      <1>     pop qword [currentDTA]
  1096 00003BD7 0F83E4FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1097                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1098                              <1> .exit:
  1099 00003BDD 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1100 00003BDE E80BCCFFFF          <1>     call writeThroughBuffers
  1101 00003BE3 720B                <1>     jc .badExit
  1102                              <1> .exit2: ;Bad exit before we push qword on stack 
  1103 00003BE5 E89F340000          <1>     call dosCrit1Exit
  1104                              <1>     return
    13                              <2> %%_ret:
    14 00003BEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1105                              <1> .bad:
  1106 00003BEB B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1107                              <1> .badExit:
  1108 00003BF0 E8C2CBFFFF          <1>     call cancelWriteThroughBuffers
  1109 00003BF5 F9                  <1>     stc
  1110 00003BF6 5F                  <1>     pop rdi
  1111 00003BF7 EBEC                <1>     jmp short .exit2
  1112                              <1> 
  1113                              <1> .searchForDirSpace:
  1114                              <1> ;Input: eax = First directory to search 
  1115 00003BF9 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1116 00003BFF 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1117 00003C01 668905(83070000)    <1>     mov word [dirSect], ax
  1118 00003C08 8905(85070000)      <1>     mov dword [dirEntry], eax
  1119 00003C0E E858E2FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1120 00003C13 731C                <1>     jnc .dirEntryFnd
  1121 00003C15 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1121 00003C1D 0000                <1>
  1122 00003C1F 7412                <1>     je .searchBad ;Set CF and exit
  1123 00003C21 E88FE3FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1124 00003C26 720B                <1>     jc .searchBad
  1125 00003C28 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1126 00003C2D 7404                <1>     je .searchBad
  1127                              <1>     ;Else eax = Newly allocated cluster
  1128 00003C2F EBC8                <1>     jmp short .searchForDirSpace
  1129                              <1> .dirEntryFnd:
  1130 00003C31 F8                  <1>     clc
  1131                              <1>     return
    13                              <2> %%_ret:
    14 00003C32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1132                              <1> .searchBad:
  1133 00003C33 F9                  <1>     stc
  1134                              <1>     return
    13                              <2> %%_ret:
    14 00003C34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1135                              <1> 
  1136                              <1> 
  1137                              <1> checkNoOpenHandlesForShareAction:
  1138                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1139                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1140                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1141                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1142                              <1> ; proceeding.
  1143                              <1> ;
  1144                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1145                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1146                              <1> ;       currDirCopy = Directory entry for the file
  1147 00003C35 E82E340000          <1>     call dosPushRegs    ;Save the context completely
  1148 00003C3A 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1149 00003C41 740C                <1>     jz .noOpenFileCheckHandler
  1150 00003C43 FF15(BF000000)      <1>     call qword [openFileCheck]
  1151 00003C49 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1152 00003C4B 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1153 00003C4D EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1154                              <1> .noOpenFileCheckHandler:
  1155                              <1>     ;The following closes most recent shared handles referencing it
  1156                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1157                              <1>     ; mode and if there is precisely 1  
  1158 00003C4F FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1159                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1160 00003C55 488D3D(100D0000)    <1>     lea rdi, scratchSFT
  1161 00003C5C 48893D(2D070000)    <1>     mov qword [currentSFT], rdi
  1162 00003C63 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1163 00003C68 C605(02070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1164                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1165 00003C6F 57                  <1>     push rdi
  1166 00003C70 E884020000          <1>     call buildSFTEntry
  1167 00003C75 5F                  <1>     pop rdi
  1168 00003C76 7225                <1>     jc .errorMain
  1169 00003C78 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1170 00003C7D 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1171 00003C83 57                  <1>     push rdi
  1172 00003C84 E8283C0000          <1>     call shareFile
  1173 00003C89 5F                  <1>     pop rdi
  1174 00003C8A 7211                <1>     jc .errorMain
  1175 00003C8C 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1176 00003C91 E8B23B0000          <1>     call closeShareCallWrapper
  1177                              <1> .exit:
  1178 00003C96 E8B6330000          <1>     call dosPopRegs
  1179 00003C9B F8                  <1>     clc
  1180                              <1>     return
    13                              <2> %%_ret:
    14 00003C9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1181                              <1> .errorMain:
  1182 00003C9D E8AF330000          <1>     call dosPopRegs
  1183 00003CA2 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1184 00003CA7 F9                  <1>     stc
  1185                              <1>     return
    13                              <2> %%_ret:
    14 00003CA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1186                              <1> 
  1187                              <1> outerDeleteMain:
  1188                              <1> ;Internal current dir must be populated with dir entry
  1189                              <1> ; and internal DOS directory variables now point to this entry.
  1190                              <1> ;Checks if the file is a char device or read only.
  1191                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1192                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1193                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1194                              <1> ;         CF=NC => File deleted
  1195 00003CA9 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
  1196 00003CB0 E8B52E0000          <1>     call testCDSNet ;CF=NC => Not net
  1197 00003CB5 7308                <1>     jnc .notNet
  1198 00003CB7 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1199 00003CBC CD4F                <1>     int 4Fh
  1200                              <1>     return
    13                              <2> %%_ret:
    14 00003CBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1201                              <1> .notNet:
  1202 00003CBF B805000000          <1>     mov eax, errAccDen  
  1203 00003CC4 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1204 00003CCB 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1205 00003CCD F605(64060000)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1206 00003CD4 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1207 00003CD6 E843000000          <1>     call deleteMain
  1208 00003CDB 723F                <1>     jc .exitBad
  1209                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1210 00003CDD B03F                <1>     mov al, "?"
  1211 00003CDF 488D3D(D4060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1212 00003CE6 B90B000000          <1>     mov ecx, 11
  1213 00003CEB F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1214 00003CED 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1215 00003CEF F8                  <1>     clc
  1216                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00003CF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> .serverWCloop:
  1218 00003CF1 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1219 00003CF7 488D3D(2E060000)    <1>     lea rdi, dosffblock
  1220 00003CFE 57                  <1>     push rdi    ;Push this address onto the stack
  1221 00003CFF E8ACD4FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1222 00003D04 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1223 00003D0A E81FD1FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1224 00003D0F 8F05(17040000)      <1>     pop qword [currentDTA]
  1225 00003D15 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1226 00003D1A 73D5                <1>     jnc .serverWCloop     
  1227                              <1> ;Stop as soon as an error occurs
  1228                              <1> .exitBad:
  1229 00003D1C F9                  <1>     stc
  1230                              <1>     return
    13                              <2> %%_ret:
    14 00003D1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1231                              <1> 
  1232                              <1> deleteMain:
  1233                              <1> ;Now unlink FAT chain and then clear directory entry
  1234                              <1> ;Get the start cluster of this file
  1235                              <1> ;Input:
  1236                              <1> ; The file must have NOT be read-only.
  1237                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1238                              <1> ;     - curDirCopy must be filled with the file directory information
  1239                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1240                              <1> ;Output: CF=NC => Success, 
  1241                              <1> ; If not net CDS:
  1242                              <1> ;   rsi keeps pointing to directory entry.
  1243                              <1> ;   al = First char of the file that was deleted.
  1244                              <1> ;        CF=CY => Error
  1245                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1246 00003D1E E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1247                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003D23 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1248 00003D25 52                  <1>     push rdx
  1249 00003D26 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1250 00003D2D 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1251 00003D34 C1E010              <1>     shl eax, 10h
  1252 00003D37 09D0                <1>     or eax, edx ;Add low bits to eax
  1253 00003D39 5A                  <1>     pop rdx
  1254 00003D3A 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1255 00003D3C 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1256 00003D3E 488B2D(05070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1257 00003D45 E835CFFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1258 00003D4A 721B                <1>     jc .exitBad
  1259                              <1> .skipUnlink:
  1260                              <1>     ;Now replace the first char of the directory to 0E5h
  1261                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1262 00003D4C E82DE1FFFF          <1>     call getDiskDirectoryEntry
  1263 00003D51 7214                <1>     jc .exitBad
  1264 00003D53 8A05(03070000)      <1>     mov al, byte [delChar]
  1265 00003D59 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1266 00003D5B E8C0CAFFFF          <1>     call markBufferDirty
  1267                              <1>     ;CF must be clear
  1268 00003D60 E889CAFFFF          <1>     call writeThroughBuffers
  1269                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003D65 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1270                              <1> .exitBad:
  1271 00003D67 E84BCAFFFF          <1>     call cancelWriteThroughBuffers
  1272 00003D6C F9                  <1>     stc
  1273                              <1>     return
    13                              <2> %%_ret:
    14 00003D6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1274                              <1> 
  1275                              <1> openMain:
  1276                              <1> ;Input: ax (formally al) = Open mode
  1277                              <1> ;       [currentSFT] = SFT we are building
  1278                              <1> ;       [workingCDS] = CDS of drive to access
  1279                              <1> ;       [workingDPB] = DPB of drive to access
  1280                              <1> ;Ouput: CF=CY => Error, eax has error code
  1281 00003D6E E8AE000000          <1>     call setOpenMode
  1282                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003D73 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1283 00003D75 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1284 00003D7C 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
  1285 00003D83 30E4                <1>     xor ah, ah  ;al has the access mode
  1286 00003D85 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1287 00003D89 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1288 00003D90 750A                <1>     jne .notNet
  1289                              <1> .redirOpen:
  1290 00003D92 50                  <1>     push rax    ;Push open mode onto stack
  1291 00003D93 B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1292 00003D98 CD4F                <1>     int 4Fh
  1293 00003D9A 58                  <1>     pop rax
  1294                              <1>     return
    13                              <2> %%_ret:
    14 00003D9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1295                              <1> .notNet:
  1296 00003D9C 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1297 00003DA2 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1298 00003DA4 E8D6320000          <1>     call dosCrit1Enter
  1299 00003DA9 C605(02070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1300 00003DB0 C605(03070000)E5    <1>     mov byte [delChar], 0E5h
  1301 00003DB7 E83D010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1302 00003DBC 7227                <1>     jc .errorExit
  1303                              <1> .openShareLoop:
  1304                              <1> ;Now we attempt to register the file with SHARE
  1305 00003DBE 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount]    
  1306                              <1> .openShareTryAgain: 
  1307 00003DC5 51                  <1>     push rcx
  1308 00003DC6 E8763A0000          <1>     call openShareCallWrapper
  1309 00003DCB 59                  <1>     pop rcx
  1310 00003DCC 731D                <1>     jnc .fileSharedOk
  1311 00003DCE E8983A0000          <1>     call shareRetryCountdown
  1312 00003DD3 FFC9                <1>     dec ecx
  1313 00003DD5 75EE                <1>     jnz .openShareTryAgain
  1314 00003DD7 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1315 00003DDE E8AB3A0000          <1>     call shareCheckOpenViolation
  1316 00003DE3 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1317                              <1> .errorExit:
  1318 00003DE5 E89F320000          <1>     call dosCrit1Exit   ;Else we error out
  1319                              <1>     return
    13                              <2> %%_ret:
    14 00003DEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1320                              <1> .fileSharedOk:
  1321 00003DEB B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1322 00003DF0 E82A0B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1323 00003DF5 FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1324 00003DFB E889320000          <1>     call dosCrit1Exit
  1325                              <1> openDriverMux:  ;Int 4Fh, AX=120Ch, jumped to by Create
  1326 00003E00 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1327 00003E07 E870E3FFFF          <1>     call openSFT
  1328 00003E0C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1329 00003E12 7501                <1>     jnz .netOpen
  1330                              <1>     return
    13                              <2> %%_ret:
    14 00003E14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1331                              <1> .netOpen:
  1332 00003E15 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1333 00003E1C 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1334                              <1>     return
    13                              <2> %%_ret:
    14 00003E20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1335                              <1> 
  1336                              <1> setOpenMode:
  1337                              <1> ;Input: al = Open mode for the file open
  1338 00003E21 8805(F8060000)      <1>     mov byte [fileOpenMd], al
  1339 00003E27 53                  <1>     push rbx
  1340                              <1> ;Check we are not opening a directory.
  1341                              <1> ;NOTE SUPERCEEDED IN BUILDSFTENTRY
  1342                              <1> ;    test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1343                              <1> ;    jnz .somBad    ;Directories are not allowed to be opened
  1344 00003E28 88C3                <1>     mov bl, al
  1345 00003E2A 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1346 00003E2D 803D(FD060000)FF    <1>     cmp byte [dosInvoke], -1    
  1347 00003E34 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1348 00003E36 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1349 00003E39 7405                <1>     je .s2
  1350                              <1> .s1:
  1351 00003E3B 80FB40              <1>     cmp bl, denyNoneShare
  1352 00003E3E 770D                <1>     ja .somBad
  1353                              <1> .s2:
  1354 00003E40 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1355 00003E42 80E30F              <1>     and bl, 0Fh
  1356 00003E45 80FB02              <1>     cmp bl, RWAccess
  1357 00003E48 7703                <1>     ja .somBad
  1358 00003E4A 5B                  <1>     pop rbx
  1359 00003E4B F8                  <1>     clc
  1360                              <1>     return
    13                              <2> %%_ret:
    14 00003E4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1361                              <1> .somBad:
  1362 00003E4D 5B                  <1>     pop rbx
  1363 00003E4E B80C000000          <1>     mov eax, errAccCde
  1364 00003E53 F9                  <1>     stc
  1365                              <1>     return
    13                              <2> %%_ret:
    14 00003E54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1366                              <1> 
  1367                              <1> createNewMain:
  1368                              <1> ;Input: ax (formally al) = File attributes
  1369                              <1> ;       [currentSFT] = SFT we are building
  1370                              <1> ;       [workingCDS] = CDS of drive to access
  1371                              <1> ;       [workingDPB] = DPB of drive to access
  1372 00003E55 0FB6C0              <1>     movzx eax, al
  1373 00003E58 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1374 00003E5A F605(FF060000)FF    <1>     test byte [fileExist], -1
  1375 00003E61 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1376 00003E63 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1377 00003E68 F9                  <1>     stc
  1378                              <1>     return
    13                              <2> %%_ret:
    14 00003E69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1379                              <1> createMain:
  1380                              <1> ;Input: ax (formally al) = File attributes
  1381                              <1> ;       [currentSFT] = SFT we are building
  1382                              <1> ;       [workingCDS] = CDS of drive to access
  1383                              <1> ;       [workingDPB] = DPB of drive to access
  1384 00003E6A 0FB6C0              <1>     movzx eax, al
  1385                              <1> .createNewEP:
  1386 00003E6D A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1387 00003E6F 750A                <1>     jnz .invalidAttrib
  1388 00003E71 A808                <1>     test al, dirVolumeID
  1389 00003E73 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1390 00003E75 0C20                <1>     or al, dirArchive   ;Set archive bit
  1391 00003E77 A810                <1>     test al, dirDirectory   
  1392 00003E79 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1393                              <1> .invalidAttrib:
  1394 00003E7B B805000000          <1>     mov eax, errAccDen
  1395 00003E80 F9                  <1>     stc
  1396                              <1>     return
    13                              <2> %%_ret:
    14 00003E81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> .validAttr:
  1398                              <1> ;Check we are not creating a directory.
  1399                              <1> ;NOTE SUPERCEEDED IN BUILDSFTENTRY
  1400                              <1> ;    test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1401                              <1> ;    jnz .bad    ;Directories are not allowed to be created
  1402 00003E82 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1403 00003E89 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
  1404 00003E90 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1405 00003E97 750A                <1>     jne .diskFile
  1406 00003E99 50                  <1>     push rax    ;Save the new attributes
  1407 00003E9A B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1408 00003E9F CD4F                <1>     int 4Fh
  1409 00003EA1 5B                  <1>     pop rbx
  1410                              <1>     return
    13                              <2> %%_ret:
    14 00003EA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1411                              <1> .diskFile:
  1412 00003EA3 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1413 00003EA9 740A                <1>     jz .hardFile
  1414 00003EAB 50                  <1>     push rax    ;Save the new attributes
  1415 00003EAC B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1416 00003EB1 CD4F                <1>     int 4Fh
  1417 00003EB3 5B                  <1>     pop rbx
  1418                              <1>     return
    13                              <2> %%_ret:
    14 00003EB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1419                              <1> .hardFile:
  1420 00003EB5 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1421 00003EBB C605(02070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1422 00003EC2 C605(03070000)E5    <1>     mov byte [delChar], 0E5h
  1423 00003EC9 E8B1310000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1424 00003ECE 57                  <1>     push rdi
  1425 00003ECF 50                  <1>     push rax    ;Save the file attributes on stack
  1426 00003ED0 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1427 00003ED5 E81F000000          <1>     call buildSFTEntry
  1428 00003EDA 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1429 00003EDB 5F                  <1>     pop rdi
  1430 00003EDC 7215                <1>     jc .errorExit
  1431 00003EDE B802000000          <1>     mov eax, 2
  1432 00003EE3 FF15(2F010000)      <1>     call qword [updateDirShare]
  1433 00003EE9 E89B310000          <1>     call dosCrit1Exit
  1434 00003EEE E90DFFFFFF          <1>     jmp openDriverMux
  1435                              <1> .errorExit:
  1436 00003EF3 E891310000          <1>     call dosCrit1Exit
  1437                              <1>     return
    13                              <2> %%_ret:
    14 00003EF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1438                              <1> buildSFTEntry:
  1439                              <1> ;Called in a critical section.
  1440                              <1> ;Input: al = Open mode
  1441                              <1> ;       STACK: File attributes if creating a file
  1442                              <1> ;       [currentSFT] = SFT we are building
  1443                              <1> ;       [workingCDS] = CDS of drive to access
  1444                              <1> ;       [workingDPB] = DPB of drive to access
  1445                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1446                              <1> ;
  1447                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1448                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1449                              <1> ;        If CF=CY: - Return fail
  1450                              <1> ;
  1451                              <1> ;
  1452                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1453                              <1> ;   If not, create disk entry.
  1454                              <1> ;Check if the device was a char device by checking curDirCopy.
  1455                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1456                              <1> 
  1457                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1458                              <1> ; to start of file fields of the SFT
  1459 00003EF9 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1460 00003EFA 4889E5              <1>     mov rbp, rsp
  1461 00003EFD 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  1462                              <1> ;Set the open mode
  1463 00003F04 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1464                              <1> ;Get current time
  1465 00003F08 E881EBFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1466 00003F0D E867ECFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1467 00003F12 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1468                              <1> ;Set current Owner
  1469 00003F15 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1470 00003F1C 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1471                              <1> ;Set file pointer to first byte
  1472 00003F20 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1473                              <1> ;Common fields set
  1474 00003F27 F605(02070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1475 00003F2E 0F849D010000        <1>     jz .openProc
  1476                              <1>     ;Here if Creating a file.
  1477 00003F34 F605(FF060000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1478 00003F3B 0F84D9000000        <1>     jz .createFile
  1479 00003F41 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1480 00003F48 0F8595010000        <1>     jnz .charDev
  1481 00003F4E F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1482 00003F55 0F85D6010000        <1>     jnz .bad    ;Directories are not allowed to be created/opened
  1483                              <1>     ;Here disk file exists, so recreating the file.
  1484 00003F5B 55                  <1>     push rbp
  1485 00003F5C FF35(2D070000)      <1>     push qword [currentSFT]
  1486 00003F62 E8B7FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1487 00003F67 8F05(2D070000)      <1>     pop qword [currentSFT]
  1488 00003F6D 5D                  <1>     pop rbp
  1489 00003F6E 0F82BD010000        <1>     jc .bad
  1490                              <1>     ;al has the char for the filename
  1491                              <1>     ;Sets vars for the sector/offset into the sector
  1492 00003F74 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1493 00003F7B 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1494 00003F7D 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1495                              <1>     ;al has file attributes.
  1496 00003F81 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1497 00003F83 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1498 00003F86 31C0                <1>     xor eax, eax
  1499                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1500 00003F88 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1501 00003F8C 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1502 00003F90 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1503 00003F93 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1504 00003F96 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1505 00003F99 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1506 00003F9C 57                  <1>     push rdi    ;Save SFT pointer
  1507 00003F9D 488D3D(59060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1508 00003FA4 B920000000          <1>     mov ecx, fatDirEntry_size
  1509 00003FA9 F3A4                <1>     rep movsb
  1510 00003FAB E870C8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1511 00003FB0 5F                  <1>     pop rdi
  1512                              <1> .createCommon:  ;rdi must point to the current SFT 
  1513                              <1>     ;Now populate the remaining SFT fields 
  1514 00003FB1 488D35(59060000)    <1>     lea rsi, curDirCopy
  1515 00003FB8 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1516 00003FBB 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1517 00003FBE 488B05(41070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1518 00003FC5 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1519 00003FC9 0FB705(49070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1520 00003FD0 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1521 00003FD3 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1522 00003FD6 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1523 00003FD9 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1524 00003FDC 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1525 00003FE0 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1526 00003FE4 C1E210              <1>     shl edx, 10h
  1527 00003FE7 09D0                <1>     or eax, edx
  1528 00003FE9 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1529                              <1> 
  1530 00003FEC 31C0                <1>     xor eax, eax
  1531                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1532 00003FEE 8A05(04070000)      <1>     mov al, byte [workingDrv]
  1533 00003FF4 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1534 00003FF6 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1535 00003FFA 488B05(05070000)    <1>     mov rax, qword [workingDPB]
  1536 00004001 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1537                              <1>     ;Last thing, copy the filename over
  1538                              <1>     ;Now save the name
  1539                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1540 00004005 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1541 00004009 488D35(59060000)    <1>     lea rsi, curDirCopy
  1542 00004010 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1543 00004012 66A5                <1>     movsw
  1544 00004014 A4                  <1>     movsb
  1545                              <1>     ;SFT filled
  1546 00004015 E90E010000          <1>     jmp .exit
  1547                              <1> .createFile:
  1548                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1549                              <1>     ;rsi points to current sda entry
  1550 0000401A 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1551                              <1>     ;Clear out the dir entry
  1552 00004021 57                  <1>     push rdi
  1553 00004022 B904000000          <1>     mov ecx, 4
  1554 00004027 31C0                <1>     xor eax, eax
  1555 00004029 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1556 0000402C 5F                  <1>     pop rdi
  1557                              <1>     ;Copy the FCB name over    
  1558 0000402D 56                  <1>     push rsi
  1559 0000402E 57                  <1>     push rdi
  1560 0000402F B90B000000          <1>     mov ecx, 11
  1561 00004034 488D35(D4060000)    <1>     lea rsi, fcbName
  1562 0000403B F3A4                <1>     rep movsb   ;Move over the FCB name
  1563 0000403D 5F                  <1>     pop rdi
  1564 0000403E 5E                  <1>     pop rsi
  1565                              <1> 
  1566 0000403F 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1567                              <1>     ;al has file attributes.
  1568 00004043 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1569 00004045 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1570 00004048 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1571 0000404B 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1572 0000404E 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1573 00004051 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1574                              <1> .searchForDirSpace:
  1575 00004057 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1576 0000405D 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1577 0000405F 668905(83070000)    <1>     mov word [dirSect], ax
  1578 00004066 8905(85070000)      <1>     mov dword [dirEntry], eax
  1579 0000406C 57                  <1>     push rdi
  1580 0000406D E8F9DDFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1581 00004072 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1582 00004073 7328                <1>     jnc .dirEntryFnd
  1583 00004075 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1583 0000407D 0000                <1>
  1584 0000407F 0F84AC000000        <1>     je .bad ;Set CF and exit
  1585 00004085 E82BDFFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1586 0000408A 0F8298000000        <1>     jc .exit
  1587 00004090 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1588 00004095 0F8496000000        <1>     je .bad
  1589                              <1>     ;Else eax = Newly allocated cluster
  1590 0000409B EBBA                <1>     jmp short .searchForDirSpace
  1591                              <1> .dirEntryFnd:
  1592 0000409D 4887FE              <1>     xchg rdi, rsi
  1593 000040A0 B904000000          <1>     mov ecx, 4
  1594 000040A5 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1595 000040A8 E873C7FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1596 000040AD 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1597 000040B4 E9F8FEFFFF          <1>     jmp .createCommon
  1598                              <1> .open:
  1599                              <1> ;curdircopy has a copy of the disk file directory
  1600                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1601 000040B9 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1602 000040C0 488B2D(05070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1603                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1604 000040C7 E8B2DDFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1605 000040CC E9E0FEFFFF          <1>     jmp .createCommon
  1606                              <1> .openProc:
  1607                              <1>     ;Here if Opening a file.
  1608 000040D1 F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1609 000040D8 7557                <1>     jnz .bad    ;Directories are not allowed to be created/opened
  1610 000040DA F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute],dirCharDev
  1611 000040E1 74D6                <1>     jz .open
  1612                              <1> .charDev:
  1613 000040E3 488B05(59060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1614 000040EA E8DA2D0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1615 000040EF 7307                <1>     jnc .notBadCharDevName
  1616 000040F1 B805000000          <1>     mov eax, errAccDen
  1617 000040F6 EB30                <1>     jmp short .exit ;CF already set
  1618                              <1> .notBadCharDevName:
  1619 000040F8 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  1620 000040FF 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1621 00004103 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1622 00004107 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1623 0000410A 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1624 0000410D 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1625 00004111 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1626 00004118 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1627 0000411C B820202020          <1>     mov eax, "    "
  1628 00004121 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1629 00004125 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1630                              <1> .exit:
  1631 00004128 E8080A0000          <1>     call writeThroughBuffersForHandle
  1632 0000412D 7207                <1>     jc .bad2
  1633 0000412F 5D                  <1>     pop rbp
  1634                              <1>     return
    13                              <2> %%_ret:
    14 00004130 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1635                              <1> .bad:   ;Set Access Denied
  1636 00004131 B805000000          <1>     mov eax, errAccDen
  1637                              <1> .bad2:  ;Error propagating error code
  1638 00004136 E82A0A0000          <1>     call cancelWriteThroughBuffersForHandle
  1639 0000413B F9                  <1>     stc
  1640 0000413C 5D                  <1>     pop rbp
  1641                              <1>     return
    13                              <2> %%_ret:
    14 0000413D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1642                              <1> 
  1643                              <1> closeMain: ;Int 4Fh AX=1201h
  1644                              <1> ;Gets the directory entry for a file
  1645                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1646                              <1> ;If CF=CY on return: Error, return error with al = error code
  1647                              <1> ;Preserve all regs except eax and rdi
  1648                              <1> ; If CF=NC on return: eax = Unknown
  1649                              <1> ;                     rdi = current SFT ptr
  1650 0000413E 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1651 00004145 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1652 0000414B 7408                <1>     jz .physical
  1653                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1654 0000414D B806110000          <1>     mov eax, 1106h  ;Make request
  1655 00004152 CD4F                <1>     int 4Fh ;Beep!
  1656                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004154 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1657                              <1> .physical:  
  1658                              <1> ; We make a request to the dev dir to close the device
  1659                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1660 00004155 E8252F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1661 0000415A 53                  <1>     push rbx
  1662 0000415B 56                  <1>     push rsi
  1663 0000415C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1664 00004160 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1665 00004166 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1666                              <1>     ;rsi has DPB pointer here
  1667                              <1>     ;rdi has the SFT pointer
  1668 00004168 55                  <1>     push rbp
  1669 00004169 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1670 0000416C E8F1290000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1671 00004171 E882DDFFFF          <1>     call updateDirectoryEntryForFile
  1672 00004176 5D                  <1>     pop rbp
  1673                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1674 00004177 7234                <1>     jc .exit
  1675 00004179 E886C8FFFF          <1>     call flushFile
  1676 0000417E 722D                <1>     jc .exit    ;If something went wrong, exit
  1677 00004180 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1678 00004184 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1679                              <1> .charClose:
  1680                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1681                              <1>     ;We now decrement handle count in SFT structure
  1682 00004188 E899090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1683 0000418D 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1684 00004190 7503                <1>     jnz .driverClose
  1685 00004192 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1686                              <1> .driverClose:
  1687 00004195 50                  <1>     push rax
  1688 00004196 51                  <1>     push rcx
  1689 00004197 E8AC360000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1690 0000419C 59                  <1>     pop rcx
  1691 0000419D 58                  <1>     pop rax
  1692 0000419E 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1693                              <1>     ;and if the device is a disk device, cl will have the unit number
  1694 0000419F 9C                  <1>     pushfq
  1695 000041A0 E8E0DFFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1696 000041A5 9D                  <1>     popfq
  1697 000041A6 E88A090000          <1>     call writeThroughBuffersForHandle
  1698 000041AB 7306                <1>     jnc short .exitOk
  1699                              <1> .exit:
  1700 000041AD E8B3090000          <1>     call cancelWriteThroughBuffersForHandle
  1701 000041B2 F9                  <1>     stc
  1702                              <1> .exitOk:
  1703 000041B3 5E                  <1>     pop rsi
  1704 000041B4 5B                  <1>     pop rbx
  1705 000041B5 E8CF2E0000          <1>     call dosCrit1Exit
  1706                              <1>     return
    13                              <2> %%_ret:
    14 000041BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1707                              <1> 
  1708                              <1> readBytes:
  1709                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1710                              <1> ;Input: ecx = Number of bytes to read
  1711                              <1> ;Output: ecx = Number of bytes read
  1712                              <1> ;Number of bytes read 
  1713                              <1> ;If CF=CY, return with error code in ax
  1714 000041BB E85F070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1715 000041C0 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1716 000041C4 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1717 000041C6 3C01                <1>     cmp al, WriteAccess
  1718 000041C8 7509                <1>     jne .readable
  1719 000041CA B805000000          <1>     mov eax, errAccDen
  1720 000041CF 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1721 000041D1 F9                  <1>     stc
  1722                              <1>     return
    13                              <2> %%_ret:
    14 000041D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1723                              <1> .readable:
  1724 000041D3 E889070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1725 000041D8 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1726 000041DB 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1727 000041E1 740A                <1>     jz .notRedir
  1728 000041E3 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1729 000041E8 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1730                              <1>     return 
    13                              <2> %%_ret:
    14 000041EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1731                              <1> .exitOk:
  1732 000041EB F8                  <1>     clc
  1733                              <1>     return 
    13                              <2> %%_ret:
    14 000041EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1734                              <1> .notRedir:
  1735 000041ED 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1736 000041F3 7510                <1>     jnz readCharDev
  1737 000041F5 E8852E0000          <1>     call dosCrit1Enter
  1738 000041FA E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1739 000041FF E8852E0000          <1>     call dosCrit1Exit
  1740                              <1>     return 
    13                              <2> %%_ret:
    14 00004204 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1741                              <1> readCharDev:
  1742                              <1> ;rdi points to sft for char dev to read
  1743                              <1> ;ecx has the number of bytes to transfer
  1744                              <1> ;Vars have been set up and DTA has the transfer address
  1745                              <1> ;Returns in ecx, the actual bytes transferred
  1746                              <1> ;If CF=CY, return with error code in ax
  1747 00004205 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1748 0000420C 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1749 00004210 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1750 00004217 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1751 0000421A 0F84CE020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1752 00004220 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1753 00004223 7407                <1>     jz .notNul
  1754                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1755                              <1>     ;NUL never transfers bytes 
  1756 00004225 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1757 00004227 E9C2020000          <1>     jmp readExitOk    ;Goto exit
  1758                              <1> .notNul:
  1759 0000422C F6C320              <1>     test bl, charDevBinary
  1760 0000422F 0F857F000000        <1>     jnz .binary
  1761                              <1>     ;Here if the device is in ASCII mode
  1762 00004235 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1763 00004238 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1764                              <1> .consoleInput:
  1765                              <1>     ;Console input here
  1766 0000423E E834E4FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1767                              <1>     ;Get current offset into buffer (if one exists)
  1768 00004243 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1769 0000424A 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1770 0000424D 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1771 0000424F 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1772 00004256 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1773                              <1>     ;Else, reset the buffer
  1774 00004258 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1774 00004260 FF                  <1>
  1775                              <1> .oldBuf:
  1776                              <1> ;Preserve the dta and number of chars to tfr
  1777 00004261 51                  <1>     push rcx
  1778 00004262 57                  <1>     push rdi
  1779 00004263 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1780 0000426A E828E4FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1781 0000426F 5F                  <1>     pop rdi
  1782 00004270 59                  <1>     pop rcx
  1783 00004271 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1784 00004278 803E1A              <1>     cmp byte [rsi], EOF
  1785 0000427B 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1786 0000427D C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1787 00004280 B00A                <1>     mov al, LF
  1788 00004282 E88BDFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1789 00004287 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1790 00004289 EB18                <1>     jmp short .exit
  1791                              <1> .tfrBuf:
  1792 0000428B AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1793 0000428C AA                  <1>     stosb
  1794 0000428D 3C0D                <1>     cmp al, CR 
  1795 0000428F 7503                <1>     jne .noCRLF
  1796 00004291 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1797                              <1> .noCRLF:
  1798 00004294 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1799 00004296 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1800 00004298 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1801                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1802 0000429A E873DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1803 0000429F 31F6                <1>     xor esi, esi
  1804 000042A1 0C01                <1>     or al, 1    ;Set ZF = NZ
  1805                              <1> .exit:
  1806 000042A3 E8E7E3FFFF          <1>     call vConRetDriver
  1807 000042A8 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1808 000042AF E93A020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1809                              <1> 
  1810                              <1> .binary:
  1811                              <1>     ;Setup registers for transfer
  1812 000042B4 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1813 000042B7 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1814                              <1>     ;ecx has the number of bytes to transfer directly
  1815 000042BA E8C1270000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1816 000042BF 488B35(05070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1817 000042C6 E8F6240000          <1>     call goDriver   ;Make the request
  1818 000042CB 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1819 000042CE 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1820 000042D5 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1821 000042DB 7422                <1>     jz .binNoError
  1822                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1823 000042DD B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1824 000042DF E8751F0000          <1>     call charDevErr   ;ah = has part of the error 
  1825                              <1>     ;al now has the response
  1826 000042E4 3C00                <1>     cmp al, critIgnore
  1827 000042E6 7417                <1>     je .binNoError ;Simply proceed as normal
  1828 000042E8 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1829 000042EB 3C03                <1>     cmp al, critFail
  1830 000042ED 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1831                              <1>     ;Fallthrough here for fail!
  1832                              <1> .failExit:
  1833 000042EF 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1834 000042F6 31C9                <1>     xor ecx, ecx
  1835 000042F8 B805000000          <1>     mov eax, errAccDen
  1836 000042FD F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1837                              <1>     return
    13                              <2> %%_ret:
    14 000042FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1838                              <1> .binNoError:
  1839                              <1>     ;Get number of bytes transferred into 
  1840 000042FF 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1841 00004305 F7D8                <1>     neg eax ;make it into -eax
  1842 00004307 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1843                              <1>     ;ecx now has bytes left to transfer
  1844 0000430B 50                  <1>     push rax    ;Save value on stack
  1845 0000430C 31C0                <1>     xor eax, eax ;Set ZF
  1846 0000430E FFC0                <1>     inc eax ;Clear ZF
  1847 00004310 58                  <1>     pop rax ;Get back the original value
  1848 00004311 E9D8010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1849                              <1> .generalASCII:
  1850                              <1>     ;ecx has bytes to transfer here
  1851                              <1>     ;Setup registers for transfer
  1852 00004316 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1853 00004319 51                  <1>     push rcx
  1854 0000431A B901000000          <1>     mov ecx, 1  ;Get one char
  1855 0000431F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1856 00004322 E859270000          <1>     call primReqReadSetup   ;Setup request
  1857 00004327 59                  <1>     pop rcx
  1858                              <1>     ;rbx now has request header ptr
  1859 00004328 488B35(05070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1860                              <1> .asciiReadChar:
  1861 0000432F 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1862 00004332 E8C4E2FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1863 00004337 E885240000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1864 0000433C 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1865 00004343 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1866 00004349 741E                <1>     jz .asciiNoError
  1867 0000434B E8091F0000          <1>     call charDevErr    ;Call Int 44h
  1868                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1869 00004350 C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1869 00004358 0000                <1>
  1870 0000435A 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1871 0000435D 3C03                <1>     cmp al, critFail
  1872 0000435F 748E                <1>     je .failExit
  1873 00004361 3C01                <1>     cmp al, critRetry
  1874 00004363 74CA                <1>     je .asciiReadChar
  1875                              <1>     ;Ignore here, pretend NULL CHAR was read
  1876 00004365 30C0                <1>     xor al, al
  1877 00004367 EB15                <1>     jmp short .asciiIgnoreEP
  1878                              <1> .asciiNoError:
  1879                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1880                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1881                              <1> ;Preserve RBX, RSI
  1882                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1883 00004369 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1884 0000436C 813D(D6040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1884 00004374 0000                <1>
  1885 00004376 0F8572010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1886 0000437C 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1887                              <1> .asciiIgnoreEP:
  1888 0000437E 48FF05(CE040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1889 00004385 48FFC7              <1>     inc rdi ;Also advance register pointer
  1890 00004388 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1891 0000438A 0F845E010000        <1>     je readExitOk
  1892 00004390 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1893 00004392 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1894                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1895 00004394 FEC0                <1>     inc al  ;make ZF=NZ
  1896 00004396 E953010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1897                              <1> 
  1898                              <1> readDiskFile:
  1899                              <1> ;rdi = Current SFT
  1900                              <1> ;rbp = WorkingDPB
  1901                              <1> ;ecx = Bytes to transfer
  1902 0000439B C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1903 000043A2 C605(FB060000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1904                              <1>     ;We have the following vars setup:
  1905                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1906                              <1>     ;currClustF
  1907                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1908                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1909 000043A9 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1910 000043AC 85D2                <1>     test edx, edx
  1911 000043AE 0F843A010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1912 000043B4 8B15(4B070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1913 000043BA 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1914 000043BD 8905(4F070000)      <1>     mov dword [currClustD], eax
  1915 000043C3 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1916 000043C5 0F8423010000        <1>     jz readExitOk
  1917 000043CB 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1918 000043D0 0F8418010000        <1>     jz readExitOk   
  1919 000043D6 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1920                              <1>     ;Check if we have opened a volume label (should never happen)
  1921 000043DC 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1922 000043E2 7407                <1>     jz .shareCheck
  1923 000043E4 B805000000          <1>     mov eax, errAccDen
  1924 000043E9 F9                  <1>     stc
  1925                              <1>     return
    13                              <2> %%_ret:
    14 000043EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1926                              <1> .shareCheck:
  1927                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1928 000043EB E85F340000          <1>     call retryShareIODelay
  1929 000043F0 7308                <1>     jnc .shareOk
  1930 000043F2 E859350000          <1>     call shareCheckReadLockViolation
  1931 000043F7 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1932                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 000043F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1933                              <1> .shareOk:
  1934 000043FA 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1935 000043FC 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1936 000043FE 7426                <1>     jz .skipWalk
  1937                              <1> .goToCurrentCluster:
  1938 00004400 E8C3C8FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1939 00004405 0F82D4000000        <1>     jc .badExit   ;This can only return Fail
  1940 0000440B 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1941 00004410 0F84D8000000        <1>     je readExitOk ;Exit with no bytes transferred
  1942 00004416 8905(4F070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1943 0000441C FFCA                <1>     dec edx ;Decrement counter
  1944 0000441E 75E0                <1>     jnz .goToCurrentCluster
  1945                              <1> ;Now we fall out with ebx = Current cluster
  1946 00004420 8B05(4F070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1947                              <1>     ;mov eax, ebx
  1948                              <1> .skipWalk:
  1949 00004426 E89BC6FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1950                              <1>     ;Now we add the offset to this
  1951 0000442B 0FB61D(57070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1952 00004432 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1953 00004435 488905(58070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1954                              <1> ;Main
  1955                              <1> .mainRead:
  1956 0000443C F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1957 00004443 7407                <1>     jz .mainReadNoBreak
  1958 00004445 50                  <1>     push rax
  1959 00004446 E8B0E1FFFF          <1>     call checkBreak
  1960 0000444B 58                  <1>     pop rax
  1961                              <1> .mainReadNoBreak:
  1962 0000444C E88FC5FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  1963 00004451 0F8288000000        <1>     jc .badExit
  1964 00004457 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1965 0000445B 0FB71D(60070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1966 00004462 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1967                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1968                              <1>     ; 1) Sector size, 2) Bytes left in File, 
  1969                              <1>     ; 3) Bytes left to read from Request, 4) Bytes left in sector
  1970                              <1> 
  1971 00004465 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1972 00004468 2B0D(62070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  1973 0000446E 8B1D(77070000)      <1>     mov ebx, dword [tfrCntr]
  1974 00004474 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1975 00004476 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1976 00004479 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1977 0000447D 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1978 0000447F 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1979                              <1>     
  1980 00004482 57                  <1>     push rdi
  1981 00004483 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  1982 0000448A 51                  <1>     push rcx
  1983 0000448B F3A4                <1>     rep movsb
  1984 0000448D 59                  <1>     pop rcx
  1985 0000448E 010D(62070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1986 00004494 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1987 0000449A 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1988 000044A1 8B05(62070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1989 000044A7 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1990 000044AB 31D2                <1>     xor edx, edx    ;Zero rdx
  1991 000044AD F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1992 000044AF 668915(60070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1993 000044B6 5F                  <1>     pop rdi
  1994 000044B7 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1995 000044BD 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1996 000044BF 742D                <1>     jz readExitOk ;Exit if so!
  1997 000044C1 E863C7FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1998 000044C6 7217                <1>     jc .badExit
  1999                              <1>     ;If ZF=ZE then currClustF has last cluster
  2000 000044C8 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2001                              <1>     ;Else repeat
  2002                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2003 000044CA 66C705(60070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2003 000044D2 00                  <1>
  2004 000044D3 488B05(58070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2005 000044DA E95DFFFFFF          <1>     jmp .mainRead
  2006                              <1> .badExit:
  2007                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2008                              <1>     ; we need to update the SFT before returning
  2009 000044DF 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2010 000044E5 30C0                <1>     xor al, al  ;Set ZF flag
  2011 000044E7 E802000000          <1>     call readExitOk   ;We call this
  2012 000044EC F9                  <1>     stc ;All calls which end up here return Fail!
  2013 000044ED C3                  <1>     ret
  2014                              <1> 
  2015                              <1> readExitOk:
  2016                              <1> ;Input: ecx = Number of bytes left to transfer!
  2017                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  2018 000044EE 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2019                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  2020                              <1>     ;jnz .skipbitClear
  2021                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  2022                              <1>     ;The disk transfer must've flushed by now. 
  2023                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2024                              <1> .skipbitClear:  ;Or skip that entirely
  2025 000044F4 E82E040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2026                              <1>     return 
    13                              <2> %%_ret:
    14 000044F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2027                              <1> 
  2028                              <1> writeBytes:
  2029                              <1> ;Writes the bytes from the user buffer
  2030                              <1> ;Input: ecx = Bytes to xfr
  2031                              <1> ;Returns number of bytes written in ecx
  2032 000044FA E820040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2033 000044FF 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2034 00004503 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2035 00004505 3C00                <1>     cmp al, ReadAccess
  2036 00004507 7509                <1>     jne .writeable
  2037                              <1> .noWrite:
  2038 00004509 B805000000          <1>     mov eax, errAccDen
  2039 0000450E 31C9                <1>     xor ecx, ecx
  2040 00004510 F9                  <1>     stc
  2041 00004511 C3                  <1>     ret
  2042                              <1> .writeable:
  2043 00004512 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2044 00004518 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2045 0000451A 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2046 0000451E 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2047                              <1> .skipAttribCheck:
  2048 00004520 E83C040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2049 00004525 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2050 0000452B 7408                <1>     jz .notRedir
  2051 0000452D B809110000          <1>     mov eax, 1109h  ;Write to redir
  2052 00004532 CD4F                <1>     int 4Fh
  2053                              <1>     return
    13                              <2> %%_ret:
    14 00004534 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2054                              <1> .notRedir:
  2055 00004535 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2056 0000453B 7510                <1>     jnz writeCharDev
  2057 0000453D E83D2B0000          <1>     call dosCrit1Enter
  2058 00004542 E84C010000          <1>     call writeDiskFile
  2059 00004547 E83D2B0000          <1>     call dosCrit1Exit
  2060                              <1>     return
    13                              <2> %%_ret:
    14 0000454C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2061                              <1> writeCharDev:
  2062 0000454D C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2063                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2064 00004554 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2065 0000455A 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2066                              <1>     ;If ecx = 0, we exit
  2067 0000455E 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2068 00004560 85C9                <1>     test ecx, ecx
  2069 00004562 0F849F030000        <1>     jz writeExitChar
  2070 00004568 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2071 0000456F 4889DF              <1>     mov rdi, rbx
  2072 00004572 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2073 00004574 A820                <1>     test al, charDevBinary
  2074 00004576 744A                <1>     jz .asciiDev
  2075                              <1> ;Write binary transfer here
  2076                              <1> .binaryLp:
  2077 00004578 31C0                <1>     xor eax, eax
  2078 0000457A 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2079 0000457D E8F3240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2080 00004582 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  2081 00004589 E82F220000          <1>     call goDriverChar
  2082 0000458E 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2083 00004591 B487                <1>     mov ah, critCharDev | critData | critWrite
  2084 00004593 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2085 0000459A F7C700800000        <1>     test edi, drvErrStatus
  2086 000045A0 7415                <1>     jz .binXfrOk
  2087 000045A2 E8B21C0000          <1>     call charDevErr ;Invoke Int 44h
  2088 000045A7 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2089 000045AA 3C00                <1>     cmp al, critIgnore
  2090 000045AC 7409                <1>     je .binXfrOk
  2091 000045AE 3C01                <1>     cmp al, critRetry
  2092 000045B0 74C6                <1>     je .binaryLp
  2093 000045B2 E9D5000000          <1>     jmp .exitFail
  2094                              <1> .binXfrOk:
  2095 000045B7 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2096 000045BD E945030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2097                              <1> .asciiDev:
  2098 000045C2 A802                <1>     test al, charDevConOut
  2099 000045C4 0F859E000000        <1>     jnz .conDev
  2100 000045CA A804                <1>     test al, charDevNulDev
  2101 000045CC 0F858F000000        <1>     jnz .nulDev
  2102                              <1>     ;Here we transfer for a generic character device in ascii mode
  2103 000045D2 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2104 000045D4 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2105 000045D7 0F842A030000        <1>     je writeExitChar
  2106 000045DD 51                  <1>     push rcx
  2107 000045DE B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2108 000045E3 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2109 000045E6 E88A240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2110 000045EB 59                  <1>     pop rcx
  2111 000045EC 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  2112 000045F3 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2113                              <1> .asciiLp:
  2114 000045F7 E8FFDFFFFF          <1>     call checkBreak
  2115 000045FC E8C0210000          <1>     call goDriver
  2116 00004601 57                  <1>     push rdi
  2117 00004602 B487                <1>     mov ah, critCharDev | critData | critWrite
  2118 00004604 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2119 0000460B F7C700800000        <1>     test edi, drvErrStatus
  2120 00004611 741D                <1>     jz .asciiNoError
  2121 00004613 E8411C0000          <1>     call charDevErr ;Invoke Int 44h
  2122 00004618 5F                  <1>     pop rdi
  2123 00004619 C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2123 00004621 0000                <1>
  2124 00004623 3C01                <1>     cmp al, critRetry
  2125 00004625 74D0                <1>     je .asciiLp
  2126 00004627 3C00                <1>     cmp al, critIgnore
  2127 00004629 7412                <1>     je .ignoreEp
  2128 0000462B E95C000000          <1>     jmp .exitFail
  2129                              <1> .asciiNoError:
  2130 00004630 5F                  <1>     pop rdi
  2131 00004631 813D(D6040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2131 00004639 0000                <1>
  2132 0000463B 741D                <1>     je .bytesXfrdOk
  2133                              <1> .ignoreEp:
  2134 0000463D FFC2                <1>     inc edx ;One more char has been xfrd
  2135 0000463F FF05(CE040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2136 00004645 48FFC7              <1>     inc rdi ;And our copy... 
  2137 00004648 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2138 0000464B 740D                <1>     je .bytesXfrdOk
  2139 0000464D 66C705(C3040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2139 00004655 00                  <1>
  2140 00004656 FFC9                <1>     dec ecx
  2141 00004658 759D                <1>     jnz .asciiLp
  2142                              <1> .bytesXfrdOk:
  2143 0000465A 89D0                <1>     mov eax, edx
  2144 0000465C E9A6020000          <1>     jmp writeExitChar
  2145                              <1> .nulDev:
  2146 00004661 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2147 00004663 E99F020000          <1>     jmp writeExitChar
  2148                              <1> .conDev:
  2149 00004668 E80AE0FFFF          <1>     call vConSwapDriver
  2150 0000466D 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2151 00004670 51                  <1>     push rcx
  2152                              <1> .conDevLp:
  2153 00004671 AC                  <1>     lodsb
  2154 00004672 3C1A                <1>     cmp al, EOF
  2155 00004674 7409                <1>     je .conDevExit
  2156 00004676 E897DBFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2157 0000467B FFC9                <1>     dec ecx
  2158 0000467D 75F2                <1>     jnz .conDevLp
  2159                              <1> .conDevExit:
  2160 0000467F 58                  <1>     pop rax ;Get initial ecx back into eax
  2161 00004680 29C8                <1>     sub eax, ecx
  2162 00004682 E808E0FFFF          <1>     call vConRetDriver
  2163 00004687 E97B020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2164                              <1> .exitFail:
  2165 0000468C B805000000          <1>     mov eax, errAccDen
  2166 00004691 F9                  <1>     stc
  2167                              <1>     return
    13                              <2> %%_ret:
    14 00004692 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2168                              <1> writeDiskFile:
  2169                              <1>     ;rdi has SFT ptr
  2170 00004693 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2171 00004699 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2172 000046A0 C605(FB060000)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  2173 000046A7 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2174 000046AD 0F850B020000        <1>     jnz .badExit
  2175 000046B3 85C9                <1>     test ecx, ecx
  2176 000046B5 7505                <1>     jnz .nonZeroWrite
  2177 000046B7 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2178                              <1> .nonZeroWrite:
  2179                              <1>     ;Now do share check here
  2180 000046BC E88E310000          <1>     call retryShareIODelay
  2181 000046C1 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2182 000046C3 E87F320000          <1>     call shareCheckWriteLockViolation
  2183 000046C8 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2184                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 000046CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2185                              <1> .proceedWithWrite:
  2186 000046CB 31DB                <1>     xor ebx, ebx
  2187 000046CD 891D(6F070000)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2188 000046D3 881D(6E070000)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2189 000046D9 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2190                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2191 000046DC 85C0                <1>     test eax, eax
  2192 000046DE 7520                <1>     jnz .notStart
  2193 000046E0 E85BC4FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2194 000046E5 0F82BA010000        <1>     jc .exitPrepHardErr
  2195 000046EB 3DFFFFFFFF          <1>     cmp eax, -1
  2196 000046F0 0F84DA010000        <1>     je writeExit
  2197                              <1>     ;Now eax has the first cluster of chain
  2198 000046F6 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2199 000046F9 C605(6E070000)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2200                              <1> .notStart:
  2201                              <1> ;eax has the start cluster of the file
  2202                              <1> ;Now we go to CurntOff
  2203 00004700 8905(4F070000)      <1>     mov dword [currClustD], eax ;Store in var
  2204 00004706 31DB                <1>     xor ebx, ebx
  2205 00004708 8B15(4B070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2206 0000470E 85D2                <1>     test edx, edx
  2207 00004710 7458                <1>     jz .skipWalk
  2208                              <1> .goToCurrentCluster:
  2209 00004712 E8B1C5FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2210 00004717 0F8288010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2211 0000471D 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2212 00004722 7536                <1>     jne .stillInFile
  2213                              <1> .addCluster:
  2214                              <1>     ;Here we extend by one cluster
  2215 00004724 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2216 0000472A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2217 0000472C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2218 00004731 E830C4FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2219 00004736 0F8269010000        <1>     jc .exitPrepHardErr
  2220 0000473C 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2221 0000473E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2222 00004742 010D(6F070000)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2223 00004748 C605(6E070000)FF    <1>     mov byte [fileGrowing], -1
  2224 0000474F E874C5FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2225 00004754 0F824B010000        <1>     jc .exitPrepHardErr
  2226                              <1> .stillInFile:
  2227 0000475A 8905(4F070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2228 00004760 FFCA                <1>     dec edx ;Decrement counter
  2229 00004762 75AE                <1>     jnz .goToCurrentCluster
  2230                              <1> ;Now we fall out
  2231 00004764 8B05(4F070000)      <1>     mov eax, dword [currClustD]
  2232                              <1> .skipWalk:
  2233 0000476A E857C3FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2234                              <1>     ;Now we add the offset to this
  2235 0000476F 0FB61D(57070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2236 00004776 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2237 00004779 488905(58070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2238 00004780 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2239 00004786 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2240 00004788 751F                <1>     jnz .mainWrite  
  2241                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2242 0000478A F605(6E070000)FF    <1>     test byte [fileGrowing], -1
  2243 00004791 750B                <1>     jnz .extend
  2244                              <1> ;Here we truncate where needed
  2245 00004793 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2246 00004799 E8FBC4FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2247                              <1> .extend:
  2248 0000479E 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2249 000047A1 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2250 000047A4 E91C010000          <1>     jmp .noByteExit ;Exit ok!
  2251                              <1> .mainWrite:
  2252 000047A9 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2253 000047B0 7407                <1>     jz .mainWriteNoBreak
  2254 000047B2 50                  <1>     push rax
  2255 000047B3 E843DEFFFF          <1>     call checkBreak
  2256 000047B8 58                  <1>     pop rax
  2257                              <1> .mainWriteNoBreak:
  2258 000047B9 E822C2FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2259 000047BE 0F82FA000000        <1>     jc .badExit
  2260 000047C4 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2261 000047C8 0FB71D(60070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2262 000047CF 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2263                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2264                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2265                              <1>     ; 3) Number of bytes left free in the sector
  2266 000047D2 31C0                <1>     xor eax, eax
  2267 000047D4 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2268 000047D8 89D8                <1>     mov eax, ebx
  2269 000047DA 662B05(60070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2270 000047E1 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]
  2271                              <1> 
  2272 000047E7 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2273 000047E9 0F47CB              <1>     cmova ecx, ebx
  2274 000047EC 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2275 000047EE 0F47C8              <1>     cmova ecx, eax
  2276                              <1> 
  2277 000047F1 56                  <1>     push rsi
  2278 000047F2 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2279 000047F9 51                  <1>     push rcx
  2280 000047FA F3A4                <1>     rep movsb
  2281 000047FC 59                  <1>     pop rcx
  2282 000047FD E81EC0FFFF          <1>     call markBufferDirty   ;Preserves all CPU state 
  2283                              <1> 
  2284 00004802 010D(62070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2285 00004808 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2286 0000480E 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2287                              <1> 
  2288 00004815 488B35(39070000)    <1>     mov rsi, qword [currBuff]    ;Get current disk buffer
  2289 0000481C 488D7630            <1>     lea rsi, qword [rsi + bufferHdr.dataarea]   ;Shift the ptr to the first data byte
  2290 00004820 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] 
  2291 00004824 4801DE              <1>     add rsi, rbx    ;Point rsi to the end of the disk buffer
  2292 00004827 4839F7              <1>     cmp rdi, rsi    ;If current pos - end < 0, jump
  2293 0000482A 5E                  <1>     pop rsi
  2294 0000482B 7207                <1>     jb short .skipWritethrough
  2295 0000482D E8A7BFFFFF          <1>     call writeThroughBuffer ;Write thru this disk buffer now it is full
  2296 00004832 7271                <1>     jc .exitPrepHardErr
  2297                              <1> .skipWritethrough:
  2298 00004834 8B05(73070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2299 0000483A 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2300 00004840 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2301 00004842 0F8488000000        <1>     jz writeExit
  2302 00004848 E8DCC3FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2303 0000484D 7256                <1>     jc .exitPrepHardErr
  2304 0000484F 3DFFFFFFFF          <1>     cmp eax, -1
  2305 00004854 753A                <1>     jne .noExtend
  2306                              <1>     ;Here we need to extend by a cluster
  2307 00004856 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2308 0000485C 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2309 0000485E B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2310 00004863 E8FEC2FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2311 00004868 723B                <1>     jc .exitPrepHardErr
  2312 0000486A 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2313 0000486C 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2314 00004870 011D(6F070000)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2315 00004876 C605(6E070000)FF    <1>     mov byte [fileGrowing], -1
  2316 0000487D E8A7C3FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2317 00004882 7221                <1>     jc .exitPrepHardErr
  2318 00004884 3DFFFFFFFF          <1>     cmp eax, -1
  2319 00004889 B805000000          <1>     mov eax, errAccDen
  2320 0000488E 7415                <1>     je .exitPrepHardErr
  2321                              <1> .noExtend:
  2322 00004890 66C705(60070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2322 00004898 00                  <1>
  2323 00004899 488B05(58070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2324 000048A0 E904FFFFFF          <1>     jmp .mainWrite
  2325                              <1> .exitPrepHardErr:
  2326 000048A5 50                  <1>     push rax    ;Save error code
  2327 000048A6 E825000000          <1>     call writeExit
  2328 000048AB 58                  <1>     pop rax
  2329                              <1> .badExitHard:    ;AL has error code already
  2330 000048AC E806BFFFFF          <1>     call cancelWriteThroughBuffers
  2331 000048B1 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2332 000048B6 FF15(2F010000)      <1>     call qword [updateDirShare]
  2333 000048BC F9                  <1>     stc
  2334                              <1>     return
    13                              <2> %%_ret:
    14 000048BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2335                              <1> .badExit:
  2336                              <1> ;Might need to do some weird stuff later. Leave for now
  2337 000048BE B805000000          <1>     mov eax, errAccDen
  2338 000048C3 EBE7                <1>     jmp short .badExitHard
  2339                              <1> 
  2340                              <1> .noByteExit:
  2341 000048C5 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2342 000048CA FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2343                              <1> writeExit:
  2344                              <1> ;Advances the bytes on the file pointer
  2345                              <1> ;Return: ecx = Number of bytes transferred
  2346 000048D0 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2347 000048D7 E84B000000          <1>     call updateCurrentSFT
  2348 000048DC 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2349 000048DE 7404                <1>     jz .noFlush
  2350 000048E0 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2351                              <1> .noFlush:
  2352 000048E4 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2353 000048EA 750E                <1>     jnz .exit
  2354 000048EC 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2355 000048EF 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2356 000048F2 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2357 000048F4 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2358 000048F7 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2359                              <1> .exit:
  2360 000048FA B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2361 000048FF FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2362 00004905 F8                  <1>     clc
  2363                              <1>     return
    13                              <2> %%_ret:
    14 00004906 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2364                              <1> writeExitChar:
  2365                              <1> ;Input: eax = Number of chars transferred
  2366 00004907 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2367 0000490D 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2368 0000490F 890D(77070000)      <1>     mov dword [tfrCntr], ecx
  2369 00004915 EBB9                <1>     jmp short writeExit
  2370                              <1> ;-----------------------------------:
  2371                              <1> ;        File Handle routines       :
  2372                              <1> ;-----------------------------------:
  2373                              <1> 
  2374                              <1> setCurrentSFT:
  2375                              <1> ;Set the pointer in rdi as current SFT 
  2376 00004917 48893D(2D070000)    <1>     mov qword [currentSFT], rdi
  2377                              <1>     return 
    13                              <2> %%_ret:
    14 0000491E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2378                              <1> getCurrentSFT:
  2379                              <1> ;Get the current SFT pointer in rdi
  2380 0000491F 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2381                              <1>     return 
    13                              <2> %%_ret:
    14 00004926 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2382                              <1> updateCurrentSFT:
  2383                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2384                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2385 00004927 57                  <1>     push rdi
  2386 00004928 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2387 0000492F E8BF010000          <1>     call getBytesTransferred
  2388 00004934 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2389                              <1>     ;ecx has bytes transferred
  2390 00004937 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2391 0000493D 751F                <1>     jnz .exit
  2392 0000493F 50                  <1>     push rax
  2393 00004940 8B05(4F070000)      <1>     mov eax, dword [currClustD]
  2394 00004946 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2395 00004949 8B05(4B070000)      <1>     mov eax, dword [currClustF]
  2396 0000494F 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2397 00004952 58                  <1>     pop rax
  2398 00004953 51                  <1>     push rcx
  2399 00004954 8B0D(62070000)      <1>     mov ecx, dword [currByteF]
  2400 0000495A 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2401 0000495D 59                  <1>     pop rcx
  2402                              <1> .exit:
  2403 0000495E 5F                  <1>     pop rdi
  2404 0000495F F8                  <1>     clc
  2405                              <1>     return 
    13                              <2> %%_ret:
    14 00004960 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2406                              <1> 
  2407                              <1> setupVarsForTransfer:
  2408                              <1> ;Computes the actual bytes to be transferred and 
  2409                              <1> ; sets up internal variables for the transfer. 
  2410                              <1> ;Works for both reading and writing
  2411                              <1> ;Input: ecx = User desired Bytes to transfer
  2412                              <1> ;       rdi = SFT pointer for the file
  2413                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2414                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2415                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2416                              <1> ;
  2417                              <1> ;Note: Does not account for a FULL disk. When writing,
  2418                              <1> ; if the disk will get full as a result of the write,
  2419                              <1> ; stop at the last byte before the transfer. If the 
  2420                              <1> ; file pointer is past the last free byte, write 0
  2421 00004961 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2422 00004965 488935(05070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2423 0000496C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2424 0000496F 8905(62070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2425 00004975 890D(73070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2426 0000497B 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2427 00004981 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2428 00004987 7402                <1>     jz setupVarsForDiskTransfer
  2429 00004989 F8                  <1>     clc
  2430                              <1>     return
    13                              <2> %%_ret:
    14 0000498A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2431                              <1> setupVarsForDiskTransfer:
  2432                              <1> ;Extension of the above, but for Disk files only
  2433                              <1> ;Input: ecx = User desired Bytes to transfer
  2434                              <1> ;       rdi = SFT pointer for the file
  2435                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2436                              <1> ;        CF=CY: Error exit
  2437 0000498B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2438 0000498E 8905(62070000)      <1>     mov dword [currByteF], eax
  2439 00004994 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2440                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2441 00004998 48892D(05070000)    <1>     mov qword [workingDPB], rbp
  2442 0000499F 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2443 000049A2 881D(04070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2444 000049A8 8B05(62070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2445 000049AE 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2446 000049B2 31D2                <1>     xor edx, edx    ;Zero rdx
  2447 000049B4 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2448                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2449                              <1>     ;edx has the offset into that sector
  2450 000049B6 8905(53070000)      <1>     mov dword [currSectF], eax
  2451 000049BC 668915(60070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2452 000049C3 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2453 000049C5 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2454 000049C8 8805(57070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2455 000049CE 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2456 000049D0 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2457 000049D3 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2458 000049D5 8915(4B070000)      <1>     mov dword [currClustF], edx ;Save in var
  2459 000049DB 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2460                              <1> .exit:
  2461 000049DD F8                  <1>     clc
  2462                              <1>     return 
    13                              <2> %%_ret:
    14 000049DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2463                              <1> findFreeSFT:
  2464                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2465                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2466                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2467                              <1> ;        CF=CY => eax = errNhl, error exit
  2468 000049DF 31DB                <1>     xor ebx, ebx
  2469                              <1> .mainLp:
  2470 000049E1 53                  <1>     push rbx    ;Save the sft ndx
  2471 000049E2 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2472 000049E7 5B                  <1>     pop rbx
  2473 000049E8 7307                <1>     jnc .sftExists
  2474 000049EA B804000000          <1>     mov eax, errNhl
  2475 000049EF F9                  <1>     stc
  2476                              <1>     return
    13                              <2> %%_ret:
    14 000049F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2477                              <1> .sftExists:
  2478 000049F1 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2479 000049F6 7427                <1>     je .sftFound
  2480 000049F8 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2481 000049FD 751C                <1>     jne .gotoNextNdx
  2482                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2483 000049FF 53                  <1>     push rbx
  2484 00004A00 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2485 00004A07 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2486 00004A0B 750B                <1>     jne .netGoToNextNdx
  2487 00004A0D 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2488 00004A14 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2489                              <1> .netGoToNextNdx:
  2490 00004A18 5B                  <1>     pop rbx
  2491 00004A19 7404                <1>     je .sftFound
  2492                              <1> .gotoNextNdx:
  2493 00004A1B FFC3                <1>     inc ebx
  2494 00004A1D EBC2                <1>     jmp short .mainLp
  2495                              <1> .sftFound:
  2496 00004A1F 53                  <1>     push rbx
  2497 00004A20 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2498 00004A25 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2499 00004A2C 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2500 00004A30 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2501 00004A37 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2502 00004A3B 5B                  <1>     pop rbx
  2503 00004A3C F8                  <1>     clc
  2504                              <1>     return
    13                              <2> %%_ret:
    14 00004A3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2505                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2506                              <1> ;Return a pointer to the SFT entry in rdi
  2507                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2508                              <1> ;Output: rdi = SFT pointer
  2509 00004A3E 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2510                              <1> .walk:
  2511 00004A45 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2512 00004A49 7212                <1>     jb .thisTable
  2513 00004A4B 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2514 00004A4F 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2515 00004A52 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2516 00004A59 75EA                <1>     jne .walk
  2517 00004A5B F9                  <1>     stc
  2518                              <1>     return
    13                              <2> %%_ret:
    14 00004A5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2519                              <1> .thisTable:
  2520 00004A5D 50                  <1>     push rax
  2521 00004A5E 52                  <1>     push rdx
  2522 00004A5F B84F000000          <1>     mov eax, sft_size
  2523 00004A64 F7E3                <1>     mul ebx
  2524 00004A66 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2525 00004A69 5A                  <1>     pop rdx
  2526 00004A6A 58                  <1>     pop rax
  2527 00004A6B 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2528                              <1>     return
    13                              <2> %%_ret:
    14 00004A72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2529                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2530                              <1> ;Return a zero extended value in rdi for the SFT entry
  2531                              <1> ;Input: bx = JFT handle (we zero extend)
  2532                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2533                              <1> ;        CF=CY => al = Error code, Fail
  2534 00004A73 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2535 00004A76 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2536 00004A7D 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2537 00004A81 7204                <1>     jb .ok
  2538 00004A83 B006                <1>     mov al, errBadHdl
  2539 00004A85 F9                  <1>     stc
  2540                              <1>     return
    13                              <2> %%_ret:
    14 00004A86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2541                              <1> .ok:
  2542 00004A87 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2543 00004A8D 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2544 00004A8F 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2545 00004A91 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2546 00004A95 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2547 00004A99 EB0B                <1>     jmp short .pspOkExit
  2548                              <1> .pspJftBelow:
  2549 00004A9B 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2550                              <1> .pspJftOk:
  2551 00004AA1 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2552                              <1> .pspOkExit:
  2553 00004AA6 F8                  <1>     clc
  2554                              <1>     return
    13                              <2> %%_ret:
    14 00004AA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2555                              <1> findFreeJFTEntry:
  2556                              <1> ;Finds a free JFT entry in the currentPSP.
  2557                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2558                              <1> ;        CF=CY => al=errNhl
  2559 00004AA8 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2560                              <1> .searchLp:
  2561 00004AAA E8C4FFFFFF          <1>     call getJFTPtr
  2562 00004AAF 7209                <1>     jc .badExit
  2563 00004AB1 803FFF              <1>     cmp byte [rdi], -1
  2564                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004AB4 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2565 00004AB6 FFC3                <1>     inc ebx
  2566 00004AB8 EBF0                <1>     jmp short .searchLp
  2567                              <1> .badExit:
  2568 00004ABA B004                <1>     mov al, errNhl
  2569 00004ABC F9                  <1>     stc
  2570                              <1>     return
    13                              <2> %%_ret:
    14 00004ABD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2571                              <1> getSFTPtr:
  2572                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2573                              <1> ;Input: bx = JFT handle
  2574                              <1> ;Output: CF=NC: rdi = SFT pointer
  2575                              <1> ;        CF=CY: Error, ax=Error code
  2576 00004ABE E815000000          <1>     call derefSFTPtr
  2577                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004AC3 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2578 00004AC5 50                  <1>     push rax
  2579 00004AC6 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2580 00004ACD 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2581 00004AD1 58                  <1>     pop rax
  2582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004AD2 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2583 00004AD4 B006                <1>     mov al, errBadHdl   ;Error code
  2584 00004AD6 F9                  <1>     stc         ;Reset CF
  2585                              <1>     return
    13                              <2> %%_ret:
    14 00004AD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2586                              <1> 
  2587                              <1> derefSFTPtr:
  2588                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2589                              <1> ;Input: bx = File handle (gets zero extended)
  2590                              <1> ;Output: CF=NC: rdi = SFT pointer
  2591                              <1> ;        CF=CY: Error, ax=Error code
  2592 00004AD8 E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2593 00004ADD 7205                <1>     jb .fail
  2594 00004ADF 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2595 00004AE2 7504                <1>     jne .ok
  2596                              <1> .fail:
  2597 00004AE4 B006                <1>     mov al, errBadHdl
  2598 00004AE6 F9                  <1>     stc
  2599                              <1>     return
    13                              <2> %%_ret:
    14 00004AE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2600                              <1> .ok:
  2601 00004AE8 53                  <1>     push rbx    ;Preserve the JFT handle
  2602 00004AE9 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2603 00004AEC E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2604 00004AF1 5B                  <1>     pop rbx 
  2605                              <1>     return
    13                              <2> %%_ret:
    14 00004AF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2606                              <1> 
  2607                              <1> getBytesTransferred:
  2608 00004AF3 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2609 00004AF9 F7D9                <1>     neg ecx ;Multiply by -1
  2610 00004AFB 030D(73070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2611                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 00004B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2612                              <1> 
  2613                              <1> getSFTndxInheritable:
  2614                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2615                              <1> ;Input: ebx = SFTndx (word)
  2616                              <1> ;Output: 
  2617                              <1> ;   ZF=ZE => Inheritable
  2618                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2619 00004B02 57                  <1>     push rdi
  2620 00004B03 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2621 00004B08 7208                <1>     jc .badNdx
  2622 00004B0A 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2623 00004B10 5F                  <1>     pop rdi
  2624                              <1>     return
    13                              <2> %%_ret:
    14 00004B11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2625                              <1> .badNdx:
  2626 00004B12 31FF                <1>     xor edi, edi
  2627 00004B14 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2628 00004B16 F8                  <1>     clc
  2629 00004B17 5F                  <1>     pop rdi
  2630                              <1>     return
    13                              <2> %%_ret:
    14 00004B18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2631                              <1> 
  2632                              <1> incrementOpenCount:
  2633                              <1> ;Given a SFTndx, this function will increment it's open count
  2634                              <1> ;Output:
  2635                              <1> ;   CF=NC => sftndx ok, count incremented
  2636                              <1> ;   CF=CY => Bad ndx
  2637 00004B19 57                  <1>     push rdi
  2638 00004B1A E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2639 00004B1F 7203                <1>     jc .exit
  2640 00004B21 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2641                              <1> .exit:
  2642 00004B24 5F                  <1>     pop rdi
  2643                              <1>     return
    13                              <2> %%_ret:
    14 00004B25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2644                              <1> 
  2645                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2646                              <1> ;Input: rdi = SFT pointer
  2647                              <1> ;Output: ax = Original wNumHandles count
  2648 00004B26 9C                  <1>     pushfq
  2649 00004B27 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2650 00004B2A FFC8                <1>     dec eax     ;Decrement count
  2651 00004B2C 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2652 00004B2E FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2653                              <1> .exit:
  2654 00004B30 9D                  <1>     popfq
  2655 00004B31 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2656                              <1>     return
    13                              <2> %%_ret:
    14 00004B34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2657                              <1> 
  2658                              <1> ;Buffer Wrappers
  2659                              <1> writeThroughBuffersForHandle:
  2660                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2661 00004B35 57                  <1>     push rdi
  2662 00004B36 55                  <1>     push rbp
  2663 00004B37 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2664 00004B3E 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2665 00004B44 751C                <1>     jnz .exit
  2666 00004B46 FF35(05070000)      <1>     push qword [workingDPB]
  2667 00004B4C 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2668 00004B50 48892D(05070000)    <1>     mov qword [workingDPB], rbp
  2669 00004B57 E892BCFFFF          <1>     call writeThroughBuffers
  2670 00004B5C 8F05(05070000)      <1>     pop qword [workingDPB]
  2671                              <1> .exit:
  2672 00004B62 5D                  <1>     pop rbp
  2673 00004B63 5F                  <1>     pop rdi
  2674                              <1>     return
    13                              <2> %%_ret:
    14 00004B64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2675                              <1> 
  2676                              <1> cancelWriteThroughBuffersForHandle:
  2677                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2678 00004B65 57                  <1>     push rdi
  2679 00004B66 55                  <1>     push rbp
  2680 00004B67 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2681 00004B6E 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2682 00004B74 751C                <1>     jnz .exit
  2683 00004B76 FF35(05070000)      <1>     push qword [workingDPB]
  2684 00004B7C 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2685 00004B80 48892D(05070000)    <1>     mov qword [workingDPB], rbp
  2686 00004B87 E82BBCFFFF          <1>     call cancelWriteThroughBuffers
  2687 00004B8C 8F05(05070000)      <1>     pop qword [workingDPB]
  2688                              <1> .exit:
  2689 00004B92 5D                  <1>     pop rbp
  2690 00004B93 5F                  <1>     pop rdi
  2691                              <1>     return
    13                              <2> %%_ret:
    14 00004B94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00004B95 3C0F                <1>     cmp al, 15
    36 00004B97 7747                <1>     ja .invalidFunction
    37 00004B99 84C0                <1>     test al, al
    38 00004B9B 745B                <1>     jz .getDevWord
    39 00004B9D 3C01                <1>     cmp al, 1
    40 00004B9F 746E                <1>     je .setDevWord
    41 00004BA1 2C02                <1>     sub al, 2
    42 00004BA3 3C03                <1>     cmp al, 3
    43 00004BA5 7673                <1>     jbe .ioctlStringFunctions
    44 00004BA7 2C04                <1>     sub al, 4
    45 00004BA9 3C01                <1>     cmp al, 1
    46 00004BAB 0F8681010000        <1>     jbe .ioStatusFunctions
    47 00004BB1 2C02                <1>     sub al, 2
    48 00004BB3 3C02                <1>     cmp al, 2
    49 00004BB5 0F8644020000        <1>     jbe .devControl
    50 00004BBB 2C03                <1>     sub al, 3
    51 00004BBD 0F840F030000        <1>     jz .setSharingCount
    52 00004BC3 FEC8                <1>     dec al
    53 00004BC5 0F8425030000        <1>     jz .genericCharDevIOCTL
    54 00004BCB FEC8                <1>     dec al
    55 00004BCD 0F844B030000        <1>     jz .genericBlokDevIOCTL
    56 00004BD3 FEC8                <1>     dec al
    57 00004BD5 0F840A040000        <1>     jz .getDrvLogicalDevice
    58 00004BDB E981040000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004BE0 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004BE5 E9E0240000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004BEA B805000000          <1>     mov eax, errAccDen
    65 00004BEF EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004BF1 B806000000          <1>     mov eax, errBadHdl
    68 00004BF6 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00004BF8 E8DBFEFFFF          <1>     call derefSFTPtr
    74 00004BFD 72F2                <1>     jc .badHandle
    75 00004BFF 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00004C03 30C0                <1>     xor al, al
    77 00004C05 E8ED1F0000          <1>     call getUserRegs
    78 00004C0A 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00004C0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00004C0F E8C4FEFFFF          <1>     call derefSFTPtr
    84 00004C14 72DB                <1>     jc .badHandle 
    85 00004C16 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00004C19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00004C1A 0FB6F3              <1>     movzx esi, bl
    96 00004C1D 488D1D(C0040000)    <1>     lea rbx, primReqHdr
    97 00004C24 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 00004C2B C605(67040000)00    <1>     mov byte [Int44bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00004C32 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00004C35 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00004C38 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 00004C3C 51                  <1>     push rcx
   105 00004C3D 52                  <1>     push rdx
   106 00004C3E B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00004C43 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00004C48 A801                <1>     test al, 1  ;If set, this is a write operation
   109 00004C4A 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 00004C4D 7507                <1>     jnz .notWrite
   111 00004C4F 800D(67040000)01    <1>     or byte [Int44bitfld], critWrite
   112                              <1> .notWrite:
   113 00004C56 5A                  <1>     pop rdx
   114 00004C57 59                  <1>     pop rcx
   115 00004C58 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 00004C5B 3C01                <1>     cmp al, 1
   117 00004C5D 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00004C5F 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00004C62 E871FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00004C67 7288                <1>     jc .badHandle 
   122 00004C69 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00004C70 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00004C76 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 00004C7C 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00004C80 800D(67040000)80    <1>     or byte [Int44bitfld], critCharDev
   128 00004C87 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00004C8A 31C0                <1>     xor eax, eax
   130 00004C8C EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00004C8E C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 00004C95 89F0                <1>     mov eax, esi
   136 00004C97 53                  <1>     push rbx
   137 00004C98 E8E71F0000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 00004C9D 5B                  <1>     pop rbx
   139 00004C9E 730A                <1>     jnc .okDrive
   140 00004CA0 B80F000000          <1>     mov eax, errBadDrv
   141 00004CA5 E920240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 00004CAA 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
   144 00004CB1 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 00004CB5 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 00004CB8 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 00004CBB 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 00004CBF 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 00004CC2 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 00004CC6 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 00004CC9 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 00004CCF 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158                              <1> .ioctlStringCommonRetry:
   159 00004CD5 51                  <1>     push rcx    ;Push xfrctr
   160 00004CD6 52                  <1>     push rdx    ;Buffer Ptr
   161 00004CD7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   162 00004CDD E8DF1A0000          <1>     call goDriver
   163 00004CE2 5A                  <1>     pop rdx
   164 00004CE3 59                  <1>     pop rcx
   165                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   166 00004CE4 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   167 00004CEA 0F84CC230000        <1>     jz extGoodExit
   168 00004CF0 800D(67040000)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   169 00004CF7 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   170 00004CFA 8A25(67040000)      <1>     mov ah, byte [Int44bitfld]
   171 00004D00 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi
   172 00004D07 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   173 00004D0C E85E150000          <1>     call criticalDOSError
   174 00004D11 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]
   175 00004D18 3C00                <1>     cmp al, critIgnore
   176 00004D1A 0F849C230000        <1>     je extGoodExit 
   177 00004D20 3C01                <1>     cmp al, critRetry
   178 00004D22 74B1                <1>     je .ioctlStringCommonRetry
   179 00004D24 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   180 00004D28 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   181 00004D2D E998230000          <1>     jmp extErrExit
   182                              <1> 
   183                              <1> 
   184                              <1> .ioStatusFunctions:
   185                              <1> ;al = 0 -> Get input status 
   186                              <1> ;al = 1 -> Get output status
   187 00004D32 E8A1FDFFFF          <1>     call derefSFTPtr
   188 00004D37 0F82B4FEFFFF        <1>     jc .badHandle 
   189 00004D3D 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   190 00004D44 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   191 00004D47 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   192 00004D4E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   193 00004D54 0F8586FEFFFF        <1>     jnz .invalidFunction
   194 00004D5A C605(67040000)00    <1>     mov byte [Int44bitfld], 0
   195 00004D61 B906000000          <1>     mov ecx, drvINSTATUS
   196 00004D66 BA0A000000          <1>     mov edx, drvOUTSTATUS
   197 00004D6B 84C0                <1>     test al, al
   198 00004D6D 0F45CA              <1>     cmovnz ecx, edx
   199 00004D70 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   200 00004D73 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   201 00004D79 7416                <1>     jz .ioStatDisk
   202 00004D7B C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   203 00004D82 800D(67040000)80    <1>     or byte [Int44bitfld], critCharDev
   204 00004D89 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   205 00004D8D 30C0                <1>     xor al, al
   206 00004D8F EB15                <1>     jmp short .ioStatCommon
   207                              <1> .ioStatDisk:
   208 00004D91 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   209 00004D98 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   210 00004D9C 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   211 00004D9F 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   212 00004DA2 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   213                              <1> .ioStatCommon:
   214 00004DA6 E8161A0000          <1>     call goDriver
   215 00004DAB 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   216 00004DB1 743E                <1>     jz .ioStatOk
   217                              <1>     ;Error handling here
   218                              <1> 
   219 00004DB3 800D(67040000)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   220 00004DBA 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   221 00004DBD 8A25(67040000)      <1>     mov ah, byte [Int44bitfld]
   222 00004DC3 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi
   223 00004DCA 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   224 00004DCF E89B140000          <1>     call criticalDOSError
   225 00004DD4 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]
   226 00004DDB 3C00                <1>     cmp al, critIgnore
   227 00004DDD 7412                <1>     je .ioStatOk 
   228 00004DDF 3C01                <1>     cmp al, critRetry
   229 00004DE1 74C3                <1>     je .ioStatCommon
   230 00004DE3 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   231 00004DE7 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   232 00004DEC E9D9220000          <1>     jmp extErrExit
   233                              <1> 
   234                              <1> .ioStatOk:
   235 00004DF1 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   236 00004DF7 7403                <1>     jz .notBusyExit
   237 00004DF9 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   238                              <1>     return 
    13                              <2> %%_ret:
    14 00004DFB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> .notBusyExit:
   240                              <1> ;Device ready/NotEOF
   241 00004DFC 31C0                <1>     xor eax, eax
   242                              <1>     return
    13                              <2> %%_ret:
    14 00004DFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> .devControl:
   245                              <1> ;al = 0 -> Is media removable?
   246                              <1> ;al = 1 -> Is device local or remote?
   247                              <1> ;al = 2 -> Is handle local or remote?
   248 00004DFF 84C0                <1>     test al, al
   249 00004E01 746D                <1>     jz .remTest
   250 00004E03 A801                <1>     test al, 1
   251 00004E05 751B                <1>     jnz .deviceTest
   252                              <1> ;Handle Local or Remote
   253 00004E07 E8CCFCFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   254 00004E0C 0F82DFFDFFFF        <1>     jc .badHandle 
   255 00004E12 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   256                              <1> .devControlExit:
   257 00004E16 E8DC1D0000          <1>     call getUserRegs
   258 00004E1B 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   259 00004E1F 31C0                <1>     xor eax, eax
   260                              <1>     return 
    13                              <2> %%_ret:
    14 00004E21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> .deviceTest:
   262                              <1> ;Drive Local or Remote
   263                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   264                              <1> ;Else, just get the CDS word and swap subst and net
   265 00004E22 88D8                <1>     mov al, bl
   266 00004E24 E85B1E0000          <1>     call getCDS
   267 00004E29 730A                <1>     jnc .devTestOkDrive
   268 00004E2B B80F000000          <1>     mov eax, errBadDrv
   269 00004E30 E995220000          <1>     jmp extErrExit
   270                              <1> .devTestOkDrive:
   271 00004E35 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   272 00004E3C 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   273 00004E40 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   274 00004E45 7513                <1>     jnz .remoteDrive
   275 00004E47 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   276 00004E4B 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   277 00004E4F 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   278 00004E53 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   279 00004E58 EBBC                <1>     jmp short .devControlExit
   280                              <1> .remoteDrive:
   281 00004E5A 6689D3              <1>     mov bx, dx
   282 00004E5D 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   283 00004E62 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   284 00004E67 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   285 00004E69 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   286 00004E6E EBA6                <1>     jmp short .devControlExit   ;Store it
   287                              <1> 
   288                              <1> .remTest:
   289                              <1> ;Drive letter in bl
   290 00004E70 88D8                <1>     mov al, bl
   291 00004E72 E80D1E0000          <1>     call getCDS
   292 00004E77 730A                <1>     jnc .remTestOkDrive
   293                              <1> .remTestBadDrv:
   294 00004E79 B80F000000          <1>     mov eax, errBadDrv
   295 00004E7E E947220000          <1>     jmp extErrExit
   296                              <1> .remTestOkDrive:
   297 00004E83 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   298 00004E8A 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   299 00004E90 75E7                <1>     jnz .remTestBadDrv
   300 00004E92 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   301 00004E99 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   302 00004E9D 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   303 00004EA0 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   304 00004EA4 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   305 00004EAA 0F8430FDFFFF        <1>     jz .invalidFunction
   306 00004EB0 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   307 00004EB3 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   308 00004EB7 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   309 00004EBD 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   310 00004EC0 E8FC180000          <1>     call goDriver
   311 00004EC5 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   312 00004EC9 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   313 00004ECE C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   314                              <1>     return
    13                              <2> %%_ret:
    14 00004ED1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> 
   316                              <1> .setSharingCount:
   317                              <1> ;Input: cx = Share Count
   318                              <1> ;       dx = Share Retry
   319 00004ED2 66890D(1F000000)    <1>     mov word [shareCount], cx
   320 00004ED9 6685D2              <1>     test dx, dx
   321 00004EDC 0F84FEFCFFFF        <1>     jz .invalidFunction
   322 00004EE2 668915(21000000)    <1>     mov word [shareDelay], dx
   323 00004EE9 31C0                <1>     xor eax, eax
   324 00004EEB E9CC210000          <1>     jmp extGoodExit
   325                              <1> 
   326                              <1> .genericCharDevIOCTL:
   327 00004EF0 E8C9FBFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   328 00004EF5 7311                <1>     jnc .okHandle
   329                              <1> .ioctrlBadHandle:
   330 00004EF7 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   331 00004EFE B806000000          <1>     mov eax, errBadHdl
   332 00004F03 E9C2210000          <1>     jmp extErrExit
   333                              <1> .okHandle:
   334 00004F08 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   335 00004F0E 75E7                <1>     jnz .ioctrlBadHandle
   336 00004F10 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   337 00004F16 74DF                <1>     jz .ioctrlBadHandle
   338 00004F18 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   339 00004F1C EB49                <1>     jmp short .ioctlReqMake
   340                              <1> .genericBlokDevIOCTL:
   341 00004F1E 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   342 00004F20 51                  <1>     push rcx
   343 00004F21 52                  <1>     push rdx
   344 00004F22 E85D1D0000          <1>     call getCDS ;Sets the current CDS
   345 00004F27 5A                  <1>     pop rdx
   346 00004F28 59                  <1>     pop rcx
   347 00004F29 7217                <1>     jc .badDrv
   348                              <1>     ;Check the CDS not net, subst or join
   349 00004F2B 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
   350 00004F32 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   351 00004F36 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   352 00004F3A 7406                <1>     jz .badDrv
   353 00004F3C 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   354 00004F40 7411                <1>     jz .goodDrive
   355                              <1> .badDrv:
   356 00004F42 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   357 00004F49 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   358 00004F4E E977210000          <1>     jmp extErrExit
   359                              <1> .goodDrive:
   360                              <1>     ;CDS is good,now get the DPB
   361 00004F53 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   362 00004F57 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   363 00004F5B 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   364 00004F5E 8805(C1040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   365 00004F64 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   366                              <1> .ioctlReqMake:
   367                              <1> ;rsi must point to the driver header here
   368 00004F67 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   369 00004F6D 7511                <1>     jnz .supportsIOCTL
   370                              <1> .badFunction:
   371 00004F6F C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   372 00004F76 B801000000          <1>     mov eax, errInvFnc
   373 00004F7B E94A210000          <1>     jmp extErrExit
   374                              <1> .supportsIOCTL:
   375                              <1>     ;Setup the request header
   376 00004F80 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   377 00004F87 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   378 00004F8A C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   379 00004F8E 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   380 00004F94 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   381 00004F98 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   382 00004F9C 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   383 00004F9F E8531C0000          <1>     call getUserRegs
   384 00004FA4 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   385 00004FA8 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   386 00004FAC 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   387 00004FB0 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   388 00004FB4 4889FE              <1>     mov rsi, rdi
   389 00004FB7 E805180000          <1>     call goDriver
   390 00004FBC 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   391 00004FC2 0F84F4200000        <1>     jz extGoodExit
   392 00004FC8 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   393 00004FCC 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   394 00004FD2 89F8                <1>     mov eax, edi
   395 00004FD4 E80A120000          <1>     call xlatHardError
   396 00004FD9 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   397 00004FE0 E9E5200000          <1>     jmp extErrExit
   398                              <1> 
   399                              <1> .getDrvLogicalDevice:
   400 00004FE5 88D8                <1>     mov al, bl
   401 00004FE7 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   402 00004FEE C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   403 00004FF2 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   404 00004FF5 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   405 00004FFB 53                  <1>     push rbx
   406 00004FFC E8831C0000          <1>     call getCDS
   407 00005001 8805(04070000)      <1>     mov byte [workingDrv], al
   408 00005007 5B                  <1>     pop rbx
   409 00005008 0F826BFEFFFF        <1>     jc .remTestBadDrv
   410 0000500E 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   411 00005015 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   412 00005019 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   413 0000501D 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   414 00005020 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   415                              <1> 
   416 00005023 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   417 00005029 0F84B1FBFFFF        <1>     jz .invalidFunction
   418 0000502F E88D170000          <1>     call goDriver
   419 00005034 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   420 0000503A 7421                <1>     jz .getDrvOk
   421                              <1>     ;Can only Fail, Ignore and Abort.
   422 0000503C 0FB605(04070000)    <1>     movzx eax, byte [workingDrv]  
   423 00005043 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   424 00005046 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   425 0000504A E820120000          <1>     call criticalDOSError
   426 0000504F 3C00                <1>     cmp al, critIgnore
   427 00005051 740A                <1>     je .getDrvOk
   428 00005053 B801000000          <1>     mov eax, errInvFnc
   429 00005058 E96D200000          <1>     jmp extErrExit
   430                              <1> .getDrvOk:
   431 0000505D 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   432                              <1>     return
    13                              <2> %%_ret:
    14 00005060 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .setDrvLogicalDevice:
   434 00005061 88D8                <1>     mov al, bl
   435 00005063 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   436 0000506A C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   437 0000506E C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   438 00005071 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   439 00005077 53                  <1>     push rbx
   440 00005078 E8071C0000          <1>     call getCDS
   441 0000507D 8805(04070000)      <1>     mov byte [workingDrv], al
   442 00005083 5B                  <1>     pop rbx
   443 00005084 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   444 0000508A 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   445 00005091 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   446 00005095 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   447 00005099 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   448 0000509C 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   449 0000509F 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   450 000050A5 0F8435FBFFFF        <1>     jz .invalidFunction
   451 000050AB E811170000          <1>     call goDriver
   452 000050B0 30C0                <1>     xor al, al
   453 000050B2 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   454                              <1>     retz    ;Return if OK
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000050B8 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455                              <1>     ;Can only Fail, Ignore and Abort.
   456 000050BA 0FB605(04070000)    <1>     movzx eax, byte [workingDrv]  
   457 000050C1 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   458 000050C4 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   459 000050C8 E8A2110000          <1>     call criticalDOSError
   460 000050CD 3C00                <1>     cmp al, critIgnore
   461                              <1>     rete    ;Return if Ignore
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000050CF 748F                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 000050D1 B801000000          <1>     mov eax, errInvFnc
   463 000050D6 E9EF1F0000          <1>     jmp extErrExit
   464                              <1> 
    37                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 000050DB E89F1F0000          <1>     call dosCrit1Enter
    15 000050E0 B806000000          <1>     mov eax, 6
    16 000050E5 39C3                <1>     cmp ebx, eax
    17 000050E7 0F42D8              <1>     cmovb ebx, eax
    18 000050EA 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 000050EC 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 000050F3 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 000050FA 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005101 31ED                <1>     xor ebp, ebp    
    24 00005103 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00005105 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 0000510C 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 0000510F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00005112 7409                <1>     je .walk1
    30 00005114 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00005117 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 0000511D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00005125 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 0000512B 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 0000512E 744A                <1>     je .det0    ;Determine if this block is useful
    41 00005130 31C9                <1>     xor ecx, ecx
    42 00005132 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 00005135 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 0000513C 48C1E104            <1>     shl rcx, 4
    46 00005140 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 00005143 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 00005146 7409                <1>     je .cons1
    49 00005148 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 0000514B 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 00005151 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 00005159 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 0000515B 31C9                <1>     xor ecx, ecx
    56 0000515D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 00005160 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 00005166 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 00005169 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 0000516B 31D2                <1>     xor edx, edx
    61 0000516D 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 00005170 48895608            <1>     mov qword [rsi + 8], rdx
    63 00005174 3C5A                <1>     cmp al, mcbMarkEnd
    64 00005176 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 00005178 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 0000517A 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 0000517D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 00005180 39D9                <1>     cmp ecx, ebx
    72 00005182 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 00005184 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 0000518B 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 00005192 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 00005195 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00005197 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 0000519E 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 000051A0 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 000051A2 7209                <1>     jb .walk2
    83 000051A4 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 000051A6 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 000051AD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 000051B0 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 000051B2 31C9                <1>     xor ecx, ecx
    89 000051B4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 000051B7 48C1E104            <1>     shl rcx, 4
    91 000051BB 4881C610000000      <1>     add rsi, mcb.program
    92 000051C2 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 000051C5 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 000051CA 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 000051D1 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 000051D3 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 000051DA 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 000051DD 0F84A8000000        <1>     jz .allocFail
   102 000051E3 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 000051E5 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 000051E8 31C9                <1>     xor ecx, ecx
   105 000051EA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 000051ED 29D9                <1>     sub ecx, ebx
   107 000051EF 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 000051F5 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 000051F8 48C1E104            <1>     shl rcx, 4
   110 000051FC 4881C610000000      <1>     add rsi, mcb.program
   111 00005203 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005206 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005208 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 0000520B EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 0000520D 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 00005214 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 0000521B 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005223 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005226 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005228 31C9                <1>     xor ecx, ecx
   123 0000522A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 0000522D 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 0000522F 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00005231 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00005237 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 0000523A 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 0000523C C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 0000523F 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 00005242 4881C710000000      <1>     add rdi, mcb.program
   133 00005249 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 0000524F 48C1E304            <1>     shl rbx, 4
   135 00005253 4801DF              <1>     add rdi, rbx
   136 00005256 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 00005258 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 00005260 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 00005263 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 0000526A 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 0000526E 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   144 00005275 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 00005279 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 0000527C 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 00005280 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 00005285 E8FF1D0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 0000528A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 0000528B 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 00005292 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 00005294 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 00005297 7409                <1>     je .af1
   157 00005299 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 0000529C 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 000052A2 31C9                <1>     xor ecx, ecx
   161 000052A4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 000052A7 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 000052AF 7505                <1>     jne .af2
   164 000052B1 39D9                <1>     cmp ecx, ebx
   165 000052B3 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 000052B6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 000052B9 7410                <1>     je .afExit
   169 000052BB 48C1E104            <1>     shl rcx, 4
   170 000052BF 4881C610000000      <1>     add rsi, mcb.program
   171 000052C6 4801CE              <1>     add rsi, rcx
   172 000052C9 EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 000052CB B808000000          <1>     mov eax, errNoMem
   175 000052D0 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   176 000052D7 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 000052DA E925030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 000052DF E89B1D0000          <1>     call dosCrit1Enter
   183 000052E4 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 000052EB 31C9                <1>     xor ecx, ecx
   185 000052ED 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 000052F4 4889F7              <1>     mov rdi, rsi
   187 000052F7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 000052FA 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 000052FE 4881C610000000      <1>     add rsi, mcb.program
   190 00005305 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005308 31C9                <1>     xor ecx, ecx
   193 0000530A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 0000530D 7409                <1>     je .valid
   195 0000530F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005312 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005318 4939F0              <1>     cmp r8, rsi
   199 0000531B 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 0000531D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00005320 0F84A5000000        <1>     je .blockError
   203 00005326 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00005329 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 0000532D 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00005334 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005337 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 00005339 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 00005341 0F8484000000        <1>     je .blockError
   213 00005347 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 0000534F 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 00005357 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 00005359 31C9                <1>     xor ecx, ecx
   218 0000535B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 0000535E 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 00005364 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 00005367 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 00005369 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 0000536B 31C9                <1>     xor ecx, ecx
   225 0000536D 48890E              <1>     mov qword [rsi], rcx
   226 00005370 48894E08            <1>     mov qword [rsi + 8], rcx
   227 00005374 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 00005377 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 0000537A 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 0000537C 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 0000537F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00005382 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00005386 4881C110000000      <1>     add rcx, mcb.program
   236 0000538D 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00005390 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 00005398 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 0000539A 31C9                <1>     xor ecx, ecx
   241 0000539C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 0000539F 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 000053A5 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 000053A8 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 000053AA 8807                <1>     mov byte [rdi + mcb.marker], al
   247 000053AC 31C9                <1>     xor ecx, ecx
   248 000053AE 48890E              <1>     mov qword [rsi], rcx
   249 000053B1 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 000053B5 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 000053BA E8CA1C0000          <1>     call dosCrit1Exit
   253 000053BF 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   254 000053C6 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 000053CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 000053CB C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 000053D2 B809000000          <1>     mov eax, errMemAddr
   259 000053D7 E8EE1C0000          <1>     call extErrExit ;Error thru the unified error handler
   260 000053DC E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 000053E1 E8A31C0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 000053E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 000053E7 E8931C0000          <1>     call dosCrit1Enter
   268 000053EC 85DB                <1>     test ebx, ebx
   269 000053EE 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 000053F4 B806000000          <1>     mov eax, 6
   271 000053F9 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 000053FB 0F42D8              <1>     cmovb ebx, eax
   273 000053FE 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005405 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005408 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 0000540B 7409                <1>     je .ctn
   277 0000540D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005410 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005416 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 0000541E 74AB                <1>     je freeMemory.blockError
   284 00005420 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005423 31C9                <1>     xor ecx, ecx
   286 00005425 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005428 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 0000542A 0F8791000000        <1>     ja .growth
   289 00005430 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005436 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005438 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 0000543E 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 00005441 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 00005447 48C1E304            <1>     shl rbx, 4
   296 0000544B 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 00005452 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 00005455 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 00005457 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 0000545A 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 0000545C 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 00005464 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 00005467 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 00005469 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 0000546F 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 00005472 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 00005476 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 0000547D 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 00005480 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 00005483 7409                <1>     je .shrinkAbsorb
   312 00005485 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 00005488 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 0000548E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 00005496 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 0000549C 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 0000549E 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 000054A0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 000054A3 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 000054A6 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 000054A9 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 000054AC 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 000054B0 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 000054B3 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 000054B5 48890E              <1>     mov qword [rsi], rcx
   329 000054B8 48894E08            <1>     mov qword [rsi + 8], rcx
   330 000054BC E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 000054C1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 000054C4 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 000054CA 31C9                <1>     xor ecx, ecx
   337 000054CC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 000054CF 48C1E104            <1>     shl rcx, 4
   339 000054D3 4889F7              <1>     mov rdi, rsi    
   340 000054D6 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 000054DD 4801CE              <1>     add rsi, rcx
   342 000054E0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 000054E3 7409                <1>     je .growthOK
   344 000054E5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 000054E8 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 000054EE 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 000054F6 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 000054F8 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 000054FA 31C9                <1>     xor ecx, ecx
   353 000054FC 31D2                <1>     xor edx, edx
   354 000054FE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005501 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005507 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 0000550A 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 0000550C 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 0000550E 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005511 775E                <1>     ja .notEnuffMem1
   361 00005513 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005515 81FA01000000        <1>     cmp edx, 1
   363 0000551B 744E                <1>     je .notEnuffMem2
   364 0000551D 31C9                <1>     xor ecx, ecx
   365 0000551F 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005522 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005526 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005529 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 0000552C 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005533 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005537 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 0000553A 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 0000553E 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005540 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 00005542 7411                <1>     jz .exit
   378 00005544 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 0000554A 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 0000554D 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 00005555 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 0000555A E82A1B0000          <1>     call dosCrit1Exit
   384 0000555F 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   385 00005566 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 0000556A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 0000556B FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 0000556D EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 0000556F 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 00005571 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 00005576 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   395 0000557D 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005580 E97F000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 00005585 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 0000558A E975000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 0000558F 84C0                <1>     test al, al
   402 00005591 741F                <1>     jz .get
   403 00005593 3C02                <1>     cmp al, 2
   404 00005595 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005597 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   407 0000559E 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 000055A2 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 000055A8 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 000055AC E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 000055B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 000055B2 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   414 000055B9 31C0                <1>     xor eax, eax
   415 000055BB 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 000055C1 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 000055C4 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 000055C8 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 000055CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 000055CE B801000000          <1>     mov eax, errInvFnc
   422 000055D3 EB2F                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 000055D5 50                  <1>     push rax
   428 000055D6 53                  <1>     push rbx
   429 000055D7 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 000055DE 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 000055E1 7408                <1>     je .ok1
   433 000055E3 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 000055E6 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 000055E8 5B                  <1>     pop rbx
   437 000055E9 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 000055EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 000055EB 31C0                <1>     xor eax, eax
   441 000055ED 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 000055F0 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 000055F4 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 000055FB 4801C3              <1>     add rbx, rax
   445 000055FE EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005600 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005601 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005602 B007                <1>     mov al, errMCBbad   ;Yikes!
   451                              <1> mcbErrHdlr:
   452                              <1>     ;Jumped to with eax = error code
   453 00005604 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   454 0000560B E8BA1A0000          <1>     call extErrExit ;Error thru the unified error handler
   455 00005610 3C07                <1>     cmp al, errMCBbad
   456                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005612 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00005614 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    38                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 40h
     7 00005616 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005618 E9DA180000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 47h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 0000561D 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005623 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005626 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    14 0000562B E9C7180000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 00005630 C605(14050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005637 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 0000563E 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 00005640 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 00005641 EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 00005643 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 0000564A 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 0000564E 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 0000564F 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 00005656 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 0000565A 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 0000565E 4C89C6              <1>     mov rsi, r8
    52 00005661 4889D7              <1>     mov rdi, rdx
    53 00005664 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 00005669 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 0000566C 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 00005674 F605(14050000)FF    <1>     test byte [pspCopyFlg], -1
    57 0000567B 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 0000567D 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 00005685 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 00005689 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 0000568D 31C9                <1>     xor ecx, ecx
    64 0000568F B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005694 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005698 B0FF                <1>     mov al, -1
    67 0000569A F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 0000569C 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 0000569E E8D0F3FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 000056A3 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 000056A6 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 000056AA 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 000056AE 67E31C              <1>     jecxz .copy
    77 000056B1 FFC9                <1>     dec ecx
    78 000056B3 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 000056B4 0FB6D8              <1>     movzx ebx, al
    80 000056B7 53                  <1>     push rbx
    81 000056B8 E845F4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 000056BD 58                  <1>     pop rax
    83 000056BE 7508                <1>     jnz .badJFT
    84 000056C0 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 000056C1 E853F4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 000056C6 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 000056C8 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 000056CB EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 000056CD C605(14050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 000056D4 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 000056D5 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 000056D8 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    96 000056DC B042                <1>     mov al, 42h
    97 000056DE E8E6140000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 000056E3 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 000056E6 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 000056E8 B043                <1>     mov al, 43h
   101 000056EA E8DA140000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 000056EF 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 000056F2 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 000056F4 B044                <1>     mov al, 44h
   105 000056F6 E8CE140000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 000056FB 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 000056FE 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005700 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   110 00005705 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   111 0000570B C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 0000570F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005710 C605(01070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005717 81FA06000000        <1>     cmp edx, 6
   120 0000571D 7305                <1>     jae .aboveMinimum
   121 0000571F BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005724 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 0000572B 89D3                <1>     mov ebx, edx
   129 0000572D 50                  <1>     push rax    ;Preserve errorlevel across call
   130 0000572E 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 0000572F E8B3FCFFFF          <1>     call reallocMemory
   132 00005734 5B                  <1>     pop rbx
   133 00005735 58                  <1>     pop rax
   134 00005736 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005738 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 0000573C EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 0000573E 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;Here we must:
   143                              <1> ;0) Build errorlevel and adjust variables accordingly
   144                              <1> ;1) Call Network Termination hook.
   145                              <1> ;2) Check if the program is it's own parent. If so, return.
   146                              <1> ;3) Swap the console back to the original driver if it is swapped.
   147                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   148                              <1> ;4) Free all file handles associated to the current process.
   149                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   150                              <1> ;5) Free all memory blocks that have the signature of current PSP
   151                              <1> ;6) Set current PSP to parent PSP
   152                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   153                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   154                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   155                              <1> ;10) Exit all critical sections.
   156                              <1> ;
   157                              <1> ; Step 0
   158                              <1> ;For now, just adjust error level in var
   159 00005740 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   160 00005742 8625(01070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   161 00005748 F605(8B040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   162 0000574F 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   163 00005751 8625(8B040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   164 00005757 C605(01070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   165                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   166 0000575E 8A25(01070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   167                              <1> .storeELvl:
   168 00005764 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   169                              <1>     
   170                              <1> ; Step 1 Tell network a process is terminating
   171 0000576B B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   172 00005770 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   173 00005777 CD4F                <1>     int 4Fh
   174                              <1> ; Step 2
   175                              <1> .step1:
   176 00005779 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   177 00005780 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   178 00005783 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   179 00005787 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   180 0000578A 0F84BC000000        <1>     je .exit
   181                              <1> ; Step 3
   182 00005790 E8FACEFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   183                              <1> ; Step 3.5
   184 00005795 803D(01070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   185 0000579C 747A                <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   186                              <1> ; Step 4
   187 0000579E 803D(01070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   188 000057A5 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   189 000057A7 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   190 000057AC CD4F                <1>     int 4Fh
   191                              <1> .skipAbortNetClose:
   192 000057AE FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   193 000057B4 FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   194                              <1> 
   195 000057BA 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   196 000057C1 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   197 000057C5 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   198                              <1> .s4lp:
   199 000057C7 53                  <1>     push rbx
   200 000057C8 51                  <1>     push rcx
   201 000057C9 E8C3D9FFFF          <1>     call closeFileHdl
   202 000057CE 59                  <1>     pop rcx
   203 000057CF 5B                  <1>     pop rbx
   204 000057D0 FFC3                <1>     inc ebx ;Goto next handle to close
   205 000057D2 39CB                <1>     cmp ebx, ecx
   206 000057D4 75F1                <1>     jne .s4lp   ;Keep looping for all entries in the JFT 
   207                              <1> ;Step 5
   208                              <1> .step5:
   209 000057D6 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   210                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   211                              <1>     ; with the currentPSP signature and free them.
   212 000057DD 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   213                              <1> .s5lp:  ;And walk the chain
   214                              <1> ;First verify the address in rsi is a valid mcb
   215 000057E4 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   216 000057E6 80F94D              <1>     cmp cl, mcbMarkCtn
   217 000057E9 7405                <1>     je .checkToFree
   218 000057EB 80F95A              <1>     cmp cl, mcbMarkEnd
   219 000057EE 7528                <1>     jne .step6  ;Something wrong so stop freeing
   220                              <1> .checkToFree:
   221 000057F0 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   222 000057F4 750F                <1>     jne .noFree
   223 000057F6 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   224 000057FA 53                  <1>     push rbx
   225 000057FB 51                  <1>     push rcx
   226 000057FC 56                  <1>     push rsi
   227 000057FD E8DDFAFFFF          <1>     call freeMemory ;Free this memory block
   228 00005802 5E                  <1>     pop rsi
   229 00005803 59                  <1>     pop rcx
   230 00005804 5B                  <1>     pop rbx
   231                              <1>     ;If an error occured, the internal vars will be set.
   232                              <1> .noFree:
   233 00005805 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   234 00005808 740E                <1>     je .step6   ;Skip if we are
   235 0000580A 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   236 0000580D 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   237 00005811 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   238 00005816 EBCC                <1>     jmp short .s5lp
   239                              <1> ;Step 6
   240                              <1> .step6:
   241                              <1> 
   242 00005818 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   243                              <1> 
   244 0000581E 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   245 00005822 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   246                              <1> ;Step 7
   247                              <1>     ;rbx points to current PSP, the old parent task
   248                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   249 00005829 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   250 0000582D B044                <1>     mov al, 44h
   251 0000582F E8AC1A0000          <1>     call setIntVector
   252 00005834 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   253 00005838 B043                <1>     mov al, 43h
   254 0000583A E8A11A0000          <1>     call setIntVector
   255 0000583F 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   256 00005843 B042                <1>     mov al, 42h
   257 00005845 52                  <1>     push rdx
   258 00005846 E8951A0000          <1>     call setIntVector
   259 0000584B 5A                  <1>     pop rdx
   260                              <1> ;Step 8
   261                              <1> .exit:
   262 0000584C B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   263 0000584E CD4A                <1>     int 4ah
   264                              <1> 
   265 00005850 FA                  <1>     cli
   266 00005851 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   267 00005858 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   268                              <1>     ;Make the parent register frame the current one
   269                              <1>     ;Make RSP point to user stack from parent entry to exec
   270 0000585C 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   271                              <1> 
   272 00005860 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   273 00005865 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   274                              <1> 
   275 0000586E C605(95040000)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   276 00005875 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   277 0000587C C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset
   278 00005883 E8C9170000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   279 00005888 48CF                <1>     iretq   ;and return to address that was in rdx
    39                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 0000588A 55                  <1>     push rbp
   100 0000588B 4889E5              <1>     mov rbp, rsp
   101 0000588E 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005895 31C9                <1>     xor ecx, ecx
   104 00005897 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105                              <1>     ;These two are cleared
   106                              <1>     ;mov qword [rbp - execFrame.pEnvBase], rcx
   107                              <1>     ;mov qword [rbp - execFrame.pProgBase], rcx
   108 0000589B 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   109 0000589F 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   110                              <1> 
   111 000058A3 B403                <1>     mov ah, execOverlay
   112 000058A5 F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   113 000058AC 7402                <1>     jz short .noMulti
   114 000058AE B404                <1>     mov ah, execBkgrnd
   115                              <1> .noMulti:
   116 000058B0 38E0                <1>     cmp al, ah
   117 000058B2 7615                <1>     jbe .validSubfunction
   118                              <1> .badSubFunction:
   119 000058B4 B801000000          <1>     mov eax, errInvFnc
   120 000058B9 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   121                              <1> .badExit:
   122 000058C0 4889EC              <1>     mov rsp, rbp
   123 000058C3 5D                  <1>     pop rbp
   124 000058C4 E901180000          <1>     jmp extErrExit
   125                              <1> 
   126                              <1> .validSubfunction:
   127 000058C9 3C02                <1>     cmp al, execInvld
   128 000058CB 74E7                <1>     je .badSubFunction
   129                              <1>     ;Save registers for each function call
   130 000058CD 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   131 000058D1 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   132 000058D5 0FB6C0              <1>     movzx eax, al
   133 000058D8 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   134 000058DC 4889D7              <1>     mov rdi, rdx
   135 000058DF E86B140000          <1>     call strlen ;Get string length in cx
   136 000058E4 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   137                              <1>     ;Now open the file we wanna yeet to
   138 000058E8 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   139 000058EA 55                  <1>     push rbp    ;Preserve local frame ptr
   140 000058EB E877D7FFFF          <1>     call openFileHdl
   141 000058F0 5D                  <1>     pop rbp
   142 000058F1 72CD                <1>     jc .badExit ;Exit preserving error code in al
   143                              <1>     ;Now ax has the file handle
   144 000058F3 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   145 000058F7 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   146 000058FA E8D9F1FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   147 000058FF 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   148 00005903 F7C280000000        <1>     test edx, devCharDev
   149 00005909 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   150 0000590B B002                <1>     mov al, errFnf
   151 0000590D E932060000          <1>     jmp .cleanAndFail
   152                              <1> .validDiskFile:
   153 00005912 31C0                <1>     xor eax, eax
   154 00005914 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   155 00005918 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   156 0000591C 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   157 00005924 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   158 0000592A 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 0000592E 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 00005931 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   161 00005934 7514                <1>     jnz short .copyEnvironmentBlock
   162 00005936 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 0000593D 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   164 00005941 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   165 00005945 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   166 00005948 746D                <1>     jz short .loadProgram
   167                              <1> .copyEnvironmentBlock:
   168 0000594A 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   169                              <1>     ;Get the length of the environment
   170 0000594D B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   171 00005952 31C0                <1>     xor eax, eax
   172 00005954 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   173                              <1> .envVerifyLp:
   174 00005957 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   175 00005959 7531                <1>     jnz short .invalidEnvironmentError
   176 0000595B 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   177 0000595E FFC9                <1>     dec ecx
   178 00005960 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   179 00005961 75F4                <1>     jnz short .envVerifyLp
   180                              <1> 
   181 00005963 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   182 00005966 57                  <1>     push rdi     ;Save the length of the environment block
   183 00005967 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   184 0000596D 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   185 00005971 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   186 00005973 89FB                <1>     mov ebx, edi
   187 00005975 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   188 00005978 55                  <1>     push rbp
   189 00005979 E85DF7FFFF          <1>     call allocateMemory
   190 0000597E 5D                  <1>     pop rbp
   191 0000597F 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   192 00005980 7314                <1>     jnc short .copyEnvironment
   193                              <1>     ;Fall thru if not enuff memory
   194                              <1> .insufficientMemory:
   195 00005982 B808000000          <1>     mov eax, errNoMem
   196 00005987 E9B8050000          <1>     jmp .cleanAndFail
   197                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   198 0000598C B80A000000          <1>     mov eax, errBadEnv
   199 00005991 E9AE050000          <1>     jmp .cleanAndFail
   200                              <1> 
   201                              <1> .copyEnvironment:
   202                              <1>     ;rax has the ptr to allocated memory block
   203                              <1>     ;rcx has the number of chars to copy from the source env block
   204 00005996 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   205 00005999 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   206 0000599D 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   207 000059A1 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   208 000059A4 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   209 000059A6 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   210 000059AB 66AB                <1>     stosw       ;Away you go!
   211 000059AD 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   212 000059B1 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   213 000059B5 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   214                              <1> ;Done with the environment... more or less
   215                              <1> .loadProgram:
   216 000059B7 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   217 000059BC 488D15(E2190000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   218 000059C3 E898050000          <1>     call .readDataFromHdl
   219 000059C8 0F8271050000        <1>     jc .badFmtErr
   220 000059CE 85C0                <1>     test eax, eax   ;Were zero bytes read?
   221 000059D0 0F8469050000        <1>     jz .badFmtErr
   222 000059D6 3D40000000          <1>     cmp eax, imageDosHdr_size
   223 000059DB 0F826F030000        <1>     jb .loadCom
   224                              <1> 
   225 000059E1 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   226 000059E6 740B                <1>     je .proceedEXE
   227 000059E8 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   228 000059ED 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   229                              <1> .proceedEXE:
   230                              <1>     ;Now we need to read e_lfanew
   231 000059F3 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   232 000059F4 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   233 000059F7 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   234 000059FA 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   235 000059FC 30C0                <1>     xor al, al  ;Set file pointer from start of file
   236 000059FE 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   237 00005A02 E875D8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   238 00005A07 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   239 00005A08 B918000000          <1>     mov ecx, imageFileHeader_size
   240 00005A0D E84E050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   241 00005A12 85C0                <1>     test eax, eax   ;Were zero bytes read?
   242 00005A14 0F8425050000        <1>     jz .badFmtErr
   243 00005A1A 3D18000000          <1>     cmp eax, imageFileHeader_size
   244 00005A1F 0F821A050000        <1>     jb .badFmtErr
   245                              <1>     ;So now rdx points to the imageFileHeader
   246 00005A25 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   247 00005A2B 0F850E050000        <1>     jne .badFmtErr
   248 00005A31 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   249 00005A37 0F8502050000        <1>     jne .badFmtErr
   250                              <1>     ;Check the binary is executable
   251 00005A3D 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   252 00005A41 66A90200            <1>     test ax, imageFileExecutable
   253 00005A45 0F84F4040000        <1>     jz .badFmtErr
   254 00005A4B 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   255                              <1> 
   256 00005A4F 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   257 00005A55 0F82E4040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   258                              <1>     ;Now save the number of sections in the the file
   259 00005A5B 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   260 00005A5F 85C0                <1>     test eax, eax   ;If this is 0, what?
   261 00005A61 0F84D8040000        <1>     jz .badFmtErr
   262 00005A67 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   263                              <1>     ;Now load Optional header, file ptr points to it so all good!
   264 00005A6B B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   265                              <1>     ;rdx points to exeHdrSpace
   266 00005A70 E8EB040000          <1>     call .readDataFromHdl
   267 00005A75 85C0                <1>     test eax, eax   ;Were zero bytes read?
   268 00005A77 0F84C2040000        <1>     jz .badFmtErr
   269 00005A7D 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   270 00005A82 0F82B7040000        <1>     jb .badFmtErr
   271                              <1>     ;Now File Ptr points to data dirs, not an issue
   272 00005A88 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   273                              <1>     ;We load the program in, one section at a time, reading section headers in
   274                              <1>     ; one at a time to the section header internal buffer.
   275 00005A8F 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   276 00005A97 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   277 00005A99 8B1D(1A1A0000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   278 00005A9F 488B05(2A1A0000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   279 00005AA6 4885C0              <1>     test rax, rax
   280 00005AA9 750A                <1>     jnz .notDefaultStackAlloc
   281 00005AAB 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   281 00005AB4 00                  <1>
   282                              <1> .notDefaultStackAlloc:
   283 00005AB5 01C3                <1>     add ebx, eax    ;Add stack allocation
   284 00005AB7 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   285                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   286                              <1>     ; section aligned and so we will need to align before reading, to 
   287                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   288 00005ABD 031D(021A0000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   289 00005AC3 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   290 00005AC6 81C311000000        <1>     add ebx, 11h
   291 00005ACC C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   292 00005ACF 55                  <1>     push rbp
   293 00005AD0 E806F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   294 00005AD5 5D                  <1>     pop rbp
   295 00005AD6 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   296 00005ADC 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   297 00005AE0 480500010000        <1>     add rax, psp_size
   298 00005AE6 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   299                              <1>     ;Finally, just check that we have some code to execute. 
   300                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   301 00005AEA 813D(E6190000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   301 00005AF2 0000                <1>
   302 00005AF4 0F8445040000        <1>     je .badFmtErr   ;If no bytes, exit error
   303 00005AFA EB0B                <1>     jmp short .exeProceed1
   304                              <1> .exeOvlySkipAlloc:
   305 00005AFC 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   306 00005B00 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   307 00005B03 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   308                              <1> .exeProceed1:
   309                              <1> ;===========================================================================
   310                              <1>     ;The below blocks are being kept because they can be turned on later
   311                              <1>     ; to change this exe loader to force section alignment of the 
   312                              <1>     ; base load address. It appears there is no need to enforce that the 
   313                              <1>     ; base load address be section aligned, but individual sections need
   314                              <1>     ; to adhere to the section alignment requirements thereafter. 
   315                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   316                              <1>     ; first section gets places at the load address and not at some
   317                              <1>     ; offset from it (as is usually the case, offset 1000h).
   318                              <1> ;===========================================================================
   319                              <1>     ;=======================================================================
   320                              <1>     ;Now we align the progBase to full header size aligned to the next page
   321                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   322                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   323                              <1>     ;=======================================================================
   324                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   325                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   326                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   327                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   328                              <1>     ;push rax
   329                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   330                              <1>     ;dec ecx ;Turn into a mask
   331                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   332                              <1>     ;inc ecx
   333                              <1>     ;sub rcx, rax
   334                              <1>     ;pop rdi
   335                              <1>     ;xor eax, eax
   336                              <1>     ;rep stosb
   337                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   338                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   339                              <1> 
   340                              <1>     ;So now copy one section at a time, read section header in
   341                              <1>     ;File pointer points to the directory table, so skip that
   342 00005B07 8B15(4E1A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   343                              <1>     ;Load however many directories we have into place
   344                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   345 00005B0D C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   346 00005B10 31C9                <1>     xor ecx, ecx
   347 00005B12 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   348 00005B16 B001                <1>     mov al, 1   ;Move handle forwards from current position
   349 00005B18 E85FD7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   350                              <1>     ;eax has pointer location after adjustment
   351 00005B1D 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   352                              <1>     ;File now points to start of Section headers. Read first header in.
   353                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   354 00005B20 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   355 00005B24 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   356 00005B28 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   357 00005B2A 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   358                              <1> .loadLp:
   359 00005B2E 51                  <1>     push rcx    ;Save # of segments left on stack
   360 00005B2F 57                  <1>     push rdi    ;Save the current buffer ptr here
   361 00005B30 B928000000          <1>     mov ecx, imageSectionHdr_size
   362 00005B35 488D15(521A0000)    <1>     lea rdx, sectHdr    ;Read section headers here
   363 00005B3C E81F040000          <1>     call .readDataFromHdl
   364 00005B41 5F                  <1>     pop rdi
   365 00005B42 59                  <1>     pop rcx
   366 00005B43 85C0                <1>     test eax, eax
   367 00005B45 0F84F4030000        <1>     jz .badFmtErr
   368 00005B4B 3D28000000          <1>     cmp eax, imageSectionHdr_size
   369 00005B50 0F85E9030000        <1>     jne .badFmtErr
   370                              <1>     ;File ptr moved forwards to next section header
   371 00005B56 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   372                              <1>     ;Section header read, now we load section into memory
   373                              <1>     ;Move file ptr to data location
   374 00005B5D 8B15(661A0000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   375 00005B63 85D2                <1>     test edx, edx
   376 00005B65 744B                <1>     jz short .skipRawPtrMove
   377 00005B67 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   378 00005B6B 31C0                <1>     xor eax, eax    ;Seek from start of file
   379 00005B6D 51                  <1>     push rcx
   380 00005B6E 57                  <1>     push rdi
   381 00005B6F E808D7FFFF          <1>     call lseekHdl
   382 00005B74 5F                  <1>     pop rdi
   383 00005B75 59                  <1>     pop rcx
   384                              <1>     ;Is this a overlay load?
   385 00005B76 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   386 00005B7E 7532                <1>     jne short .skipRawPtrMove
   387                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   388                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   389                              <1>     ;Is this is the first segment with data being read into memory?
   390 00005B80 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   391 00005B84 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   392 00005B8C 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   393                              <1>     ;Now rebase the program to point the first byte of the first
   394                              <1>     ; section at the ProgBase.
   395 00005B8E 51                  <1>     push rcx
   396 00005B8F 57                  <1>     push rdi
   397 00005B90 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   398 00005B94 8B0D(5E1A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   399 00005B9A 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   400 00005B9D 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   401 00005BA1 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   402 00005BA5 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   403 00005BA9 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   404 00005BAC 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   405 00005BB0 5F                  <1>     pop rdi
   406 00005BB1 59                  <1>     pop rcx
   407                              <1> .skipRawPtrMove:
   408 00005BB2 51                  <1>     push rcx
   409 00005BB3 31FF                <1>     xor edi, edi
   410 00005BB5 8B3D(5E1A0000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   411 00005BBB 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   412                              <1>     ;If a section has a virtual address outside of the allocation arena
   413                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   414                              <1>     ; next section.
   415 00005BBF 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   416 00005BC3 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   417 00005BC6 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   418 00005BC8 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   419 00005BCF 31C9                <1>     xor ecx, ecx
   420 00005BD1 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   421 00005BD4 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   422 00005BD8 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   423 00005BDF 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   424 00005BE2 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   425 00005BE5 7713                <1>     ja short .okToLoad
   426                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   427                              <1> 
   428                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   429 00005BE7 F705(761A0000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   429 00005BEF 0000                <1>
   430 00005BF1 0F8548030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   431                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   432                              <1> 
   433                              <1>     ;Else, just skip this section, goto next section
   434 00005BF7 59                  <1>     pop rcx
   435 00005BF8 EB3F                <1>     jmp short .gotoNextSection
   436                              <1> .okToLoad:
   437 00005BFA 8B0D(5A1A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   438 00005C00 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   439 00005C03 57                  <1>     push rdi    ;Save section in memory locally
   440 00005C04 E857030000          <1>     call .readDataFromHdl
   441 00005C09 5F                  <1>     pop rdi
   442 00005C0A 59                  <1>     pop rcx
   443 00005C0B 0F822E030000        <1>     jc .badFmtErr
   444                              <1>     ;Don't check for a zero section read as empty sections may be present!
   445 00005C11 3B05(5A1A0000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   446 00005C17 0F8522030000        <1>     jne .badFmtErr
   447                              <1>     ;Data read ok, now fill in any zeros needed
   448 00005C1D 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   449                              <1> 
   450 00005C20 51                  <1>     push rcx
   451                              <1>     ;Here do section padding
   452 00005C21 4889F8              <1>     mov rax, rdi    ;Get the current address
   453 00005C24 8B0D(021A0000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   454 00005C2A FFC9                <1>     dec ecx ;Turn into a mask
   455 00005C2C 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   456 00005C2F FFC1                <1>     inc ecx
   457 00005C31 4829C1              <1>     sub rcx, rax
   458 00005C34 31C0                <1>     xor eax, eax
   459 00005C36 F3AA                <1>     rep stosb
   460 00005C38 59                  <1>     pop rcx
   461                              <1> .gotoNextSection:
   462 00005C39 FFC9                <1>     dec ecx ;Decrement our section counter
   463 00005C3B 7419                <1>     jz short .doExeFixups
   464                              <1>     ;Read next section header in here
   465 00005C3D 51                  <1>     push rcx
   466 00005C3E 57                  <1>     push rdi
   467 00005C3F 30C0                <1>     xor al, al  ;Move rel start of file
   468 00005C41 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   469 00005C44 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   470 00005C48 31C9                <1>     xor ecx, ecx
   471 00005C4A E82DD6FFFF          <1>     call lseekHdl
   472 00005C4F 5F                  <1>     pop rdi
   473 00005C50 59                  <1>     pop rcx
   474 00005C51 E9D8FEFFFF          <1>     jmp .loadLp
   475                              <1> .doExeFixups:
   476                              <1> ;Here we fixup addresses if needed
   477                              <1> ;If the program is loaded at its desired location never need to relocate.
   478                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   479                              <1> ;   If the program has had it's .reloc section stripped by the linker
   480                              <1> ;       or has no .reloc directory, we fail
   481                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   482                              <1> ;       relocations anyway.
   483                              <1> 
   484                              <1> ;If program base = desired load, skip relocs
   485 00005C56 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   486 00005C5A 483B15(FA190000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   487 00005C61 0F84CA000000        <1>     je .exeComplete
   488                              <1> ;If program has had relocs stripped, fail
   489 00005C67 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   490 00005C6B 66A90100            <1>     test ax, imageFileRelocsStripped
   491 00005C6F 0F85CA020000        <1>     jnz .badFmtErr
   492                              <1> ;If program has no .reloc section, fail
   493 00005C75 8B15(4E1A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   494 00005C7B 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   495 00005C81 0F82B8020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   496                              <1> ;Now we get the reloc section
   497 00005C87 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   498 00005C8A 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   499                              <1>     ;eax now points to position in file of directory entry for reloc
   500 00005C90 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   501 00005C94 31C0                <1>     xor eax, eax
   502 00005C96 E8E1D5FFFF          <1>     call lseekHdl   ;Move handle there in file
   503 00005C9B 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   504 00005C9E B908000000          <1>     mov ecx, imageDataDirectory_size
   505                              <1>     ;Read 8 bytes into sectHdr space
   506 00005CA3 488D15(521A0000)    <1>     lea rdx, sectHdr
   507 00005CAA E8B1020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   508 00005CAF 85C0                <1>     test eax, eax
   509 00005CB1 0F8488020000        <1>     jz .badFmtErr
   510 00005CB7 39C8                <1>     cmp eax, ecx
   511 00005CB9 0F8580020000        <1>     jne .badFmtErr
   512                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   513 00005CBF 8B35(521A0000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   514 00005CC5 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   515 00005CC7 7468                <1>     jz .exeComplete   ;... including if overlay
   516 00005CC9 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   517                              <1>     ;Now rsi points to where in memory the relocation data table is
   518                              <1>     ;Now compute the relocation factor =
   519                              <1>     ;   Difference from the load address and prefered
   520 00005CCD 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   521 00005CD1 482B05(FA190000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   522 00005CD8 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   523 00005CE0 750F                <1>     jne short .notOverlayReloc
   524                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   525                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   526                              <1>     ;This should be the same as ProgBase anyway for overlays.
   527 00005CE2 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   528 00005CE6 482B05(FA190000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   529                              <1>     ;Store this as the overlay program base
   530 00005CED 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   531                              <1> .notOverlayReloc:
   532 00005CF1 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   533                              <1>     ;rsi points to relocation data table in memory
   534 00005CF4 8B0D(561A0000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   535 00005CFA 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   536 00005CFC 7433                <1>     jz .exeComplete
   537                              <1>     ;rsi points to the first base relocation block. The relocations begin
   538                              <1>     ; after the first block
   539                              <1>     ;ecx has the number of base relocation blocks to process.
   540                              <1> .nextBlock:
   541 00005CFE 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   542 00005CFF 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   543 00005D01 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   544 00005D05 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   545 00005D08 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   546 00005D0B 67E31E              <1>     jecxz .blockDone    
   547 00005D0E 81E908000000        <1>     sub ecx, 8
   548 00005D14 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   549 00005D1B D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   550                              <1> .blockNotDone:
   551 00005D1D 66AD                <1>     lodsw   ;Get the next page offset word
   552 00005D1F 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   553                              <1>     ;rdi points to base, rax give offset into 4Kb page
   554 00005D24 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   555 00005D28 FFC9                <1>     dec ecx
   556 00005D2A 75F1                <1>     jnz .blockNotDone
   557                              <1> .blockDone:
   558 00005D2C 59                  <1>     pop rcx
   559 00005D2D FFC9                <1>     dec ecx
   560 00005D2F 75CD                <1>     jnz .nextBlock
   561                              <1> .exeComplete:
   562 00005D31 8B05(F2190000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   563                              <1>     ;Now get EP relative to the (rescaled) load address.
   564 00005D37 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   565 00005D3B 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   566 00005D3F FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   567 00005D45 0F82F4010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   568 00005D4B E9A5000000          <1>     jmp .buildChildPSP
   569                              <1> .loadCom:
   570                              <1>     ;File is open here, so just read the file into memory. 
   571                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   572                              <1>     ;Allocate 64Kb of memory, or as much as we can
   573 00005D50 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   574 00005D58 7450                <1>     je .comOverlay
   575 00005D5A BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   576 00005D5F 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   577 00005D62 55                  <1>     push rbp
   578 00005D63 E873F3FFFF          <1>     call allocateMemory
   579 00005D68 5D                  <1>     pop rbp
   580 00005D69 734C                <1>     jnc .comallocOk
   581 00005D6B 3C08                <1>     cmp al, errNoMem
   582 00005D6D 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available
   584                              <1>     ;We check if this value is psp_size more than filesize
   585 00005D73 53                  <1>     push rbx    ;Save new minimum size
   586 00005D74 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   587 00005D79 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   588 00005D7D 31D2                <1>     xor edx, edx    ;Go to end of file
   589 00005D7F E8F8D4FFFF          <1>     call lseekHdl
   590                              <1>     ;eax has file size
   591 00005D84 5B                  <1>     pop rbx ;Get back max alloc size
   592 00005D85 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   593 00005D87 29C2                <1>     sub edx, eax
   594 00005D89 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   595 00005D8F 0F82EDFBFFFF        <1>     jb .insufficientMemory   ;Fail
   596 00005D95 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   597 00005D98 55                  <1>     push rbp
   598 00005D99 E83DF3FFFF          <1>     call allocateMemory
   599 00005D9E 5D                  <1>     pop rbp
   600 00005D9F 0F829F010000        <1>     jc .cleanAndFail
   601 00005DA5 E90D000000          <1>     jmp .comallocOk
   602                              <1> .comOverlay:
   603                              <1>     ;Here we simply read the file into the buffer provided
   604 00005DAA 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   605 00005DAE 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   606 00005DB1 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   607 00005DB5 EB0A                <1>     jmp short .comRead
   608                              <1> .comallocOk:
   609                              <1>     ;rax should point to the first byte
   610 00005DB7 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   611 00005DBB 480500010000        <1>     add rax, psp_size
   612                              <1> .comRead:
   613 00005DC1 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   614                              <1> 
   615 00005DC5 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   616 00005DCA 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00005DCE 31D2                <1>     xor edx, edx    ;Go to end of file
   618 00005DD0 E8A7D4FFFF          <1>     call lseekHdl
   619                              <1>     ;eax has filesize now
   620 00005DD5 50                  <1>     push rax    ;Save filesize
   621 00005DD6 31C0                <1>     xor eax, eax    ;Reposition to start of file
   622 00005DD8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   623 00005DDC 31D2                <1>     xor edx, edx    ;Go to start of file
   624 00005DDE E899D4FFFF          <1>     call lseekHdl
   625 00005DE3 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   626 00005DE4 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   627 00005DE8 E873010000          <1>     call .readDataFromHdl   ;Read from the file handle
   628 00005DED 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   629 00005DF1 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   630                              <1> .buildChildPSP:
   631                              <1>     ;We can close handle now
   632 00005DF5 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   633 00005DF9 55                  <1>     push rbp
   634 00005DFA E892D3FFFF          <1>     call closeFileHdl   ;Close the file
   635 00005DFF 5D                  <1>     pop rbp
   636                              <1> 
   637                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   638 00005E00 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   639 00005E08 0F840E010000        <1>     je .overlayExit
   640                              <1>     ;Now build the PSP
   641 00005E0E 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   642 00005E11 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   643 00005E15 52                  <1>     push rdx
   644 00005E16 55                  <1>     push rbp
   645 00005E17 E814F8FFFF          <1>     call createPSP
   646 00005E1C 5D                  <1>     pop rbp
   647 00005E1D 5A                  <1>     pop rdx
   648                              <1> 
   649                              <1>     ;Now copy the environment block over if rax != 0
   650 00005E1E 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   651 00005E22 4885DB              <1>     test rbx, rbx
   652 00005E25 7404                <1>     jz short .skipEnvCopy
   653 00005E27 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   654                              <1> .skipEnvCopy:
   655                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   656 00005E2B 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   657 00005E32 E848120000          <1>     call dosCrit1Enter
   658 00005E37 E84B010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   659                              <1> 
   660 00005E3C 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   661 00005E43 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   662                              <1> 
   663                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   664                              <1>     ; and set FS to point to the PSP
   665 00005E4A 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   666                              <1> 
   667 00005E4E 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   668 00005E52 B925000000          <1>     mov ecx, fcb_size
   669 00005E57 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   670 00005E5B 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   671 00005E5D F3A4                <1>     rep movsb   ;Copy fcb 1 over
   672 00005E5F 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   673 00005E63 B925000000          <1>     mov ecx, fcb_size
   674 00005E68 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   675 00005E6C 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   676 00005E6E F3A4                <1>     rep movsb   ;Copy fcb 2 over
   677 00005E70 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   678 00005E74 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   679 00005E7B B980000000          <1>     mov ecx, 80h
   680 00005E80 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   681                              <1> 
   682 00005E82 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   683 00005E84 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   684                              <1> 
   685                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   686 00005E87 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   687 00005E8C 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   688 00005E8E 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   689 00005E92 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   690                              <1> 
   691 00005E94 E85E0D0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   692 00005E99 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   693 00005E9D 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   694 00005EA1 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   695 00005EA4 B042                <1>     mov al, 42h
   696 00005EA6 E835140000          <1>     call setIntVector   ;bx preserved by this call
   697                              <1> 
   698                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   699 00005EAB 88D8                <1>     mov al, bl
   700 00005EAD 30DB                <1>     xor bl, bl
   701 00005EAF E8670D0000          <1>     call getCDSNotJoin
   702 00005EB4 7302                <1>     jnc .drive1Ok
   703 00005EB6 B3FF                <1>     mov bl, -1
   704                              <1> .drive1Ok:
   705 00005EB8 88F8                <1>     mov al, bh
   706 00005EBA 30FF                <1>     xor bh, bh
   707 00005EBC E85A0D0000          <1>     call getCDSNotJoin
   708 00005EC1 7302                <1>     jnc .drive2Ok
   709 00005EC3 B7FF                <1>     mov bh, -1
   710                              <1> .drive2Ok:
   711                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   712                              <1>     ;rdi has pointer to psp
   713 00005EC5 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   714                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   715 00005EC8 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   716 00005ECD 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   716 00005ED6 FF                  <1>
   717 00005ED7 4821C6              <1>     and rsi, rax    ;To align downwards
   718                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   719                              <1>     ;That is the job of the runtime to handle.
   720                              <1> ;Registers carrying data at this point:
   721                              <1> ;bx = FCB drive statuses
   722                              <1> ;rsi = Stack Base
   723                              <1> ;rbp = execFrame
   724 00005EDA 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   725 00005EDE 750B                <1>     jne short .noBg
   726                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   727 00005EE0 56                  <1>     push rsi
   728 00005EE1 E8110D0000          <1>     call getUserRegs
   729 00005EE6 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   730 00005EEA 5E                  <1>     pop rsi
   731                              <1> .noBg:
   732 00005EEB FF15(9F000000)      <1>     call qword [launchTask]
   733 00005EF1 7251                <1>     jc short .cleanAndFail
   734                              <1> ;Final step: Transfer control
   735 00005EF3 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   736 00005EF7 742C                <1>     je .xfrProgram
   737 00005EF9 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   738 00005EFD 741D                <1>     je .overlayExit ;Skip the below for background tasks
   739 00005EFF 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   740 00005F03 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   741 00005F07 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   742 00005F0B 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   743 00005F0E 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   744 00005F11 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 00005F18 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   746                              <1> .overlayExit:
   747 00005F1C 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   748 00005F1F 5D                  <1>     pop rbp ;Point rsp to the return address
   749 00005F20 E997110000          <1>     jmp extGoodExit ;And return!
   750                              <1> .xfrProgram:
   751 00005F25 FA                  <1>     cli
   752 00005F26 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   753 00005F29 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   754 00005F30 FB                  <1>     sti
   755                              <1> 
   756 00005F31 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   757 00005F32 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   758 00005F35 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   759 00005F38 4989F9              <1>     mov r9, rdi
   760 00005F3B 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   761                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 00005F3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> ;r8 is guaranteed to have a copy of the PSP.
   763                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   764                              <1> ;Everything else is optional and potentially changable at a later stage
   765                              <1> 
   766                              <1> .badFmtErr:
   767 00005F3F B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   768                              <1> .cleanAndFail:
   769                              <1> ;Close the open file and any open resources and fail
   770 00005F44 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   771 00005F49 E83B110000          <1>     call dosCrit1Exit
   772 00005F4E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   773 00005F52 50                  <1>     push rax    ;Save error code
   774 00005F53 55                  <1>     push rbp
   775 00005F54 E838D2FFFF          <1>     call closeFileHdl
   776 00005F59 5D                  <1>     pop rbp
   777 00005F5A 58                  <1>     pop rax
   778 00005F5B E960F9FFFF          <1>     jmp .badExit
   779                              <1> 
   780                              <1> .readDataFromHdl:
   781                              <1> ;Input: ecx = Number of bytes to transfer
   782                              <1> ;       rdx = Ptr to the buffer to use
   783 00005F60 52                  <1>     push rdx
   784 00005F61 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   785 00005F66 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   786 00005F6A 55                  <1>     push rbp
   787 00005F6B E860D2FFFF          <1>     call readFileHdl
   788 00005F70 5D                  <1>     pop rbp
   789 00005F71 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   790 00005F76 5A                  <1>     pop rdx
   791                              <1>     return
    13                              <2> %%_ret:
    14 00005F77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .clearArenaOwner:
   793 00005F78 53                  <1>     push rbx
   794 00005F79 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   795 00005F7B E8FF100000          <1>     call dosCrit1Enter
   796 00005F80 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   797 00005F85 5B                  <1>     pop rbx
   798                              <1>     return
    13                              <2> %%_ret:
    14 00005F86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> .setPSPArenaOwner:
   800                              <1> ;Sets the current PSP as the arena owner
   801 00005F87 53                  <1>     push rbx
   802 00005F88 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   803 00005F8F E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   804 00005F94 E8F0100000          <1>     call dosCrit1Exit
   805 00005F99 5B                  <1>     pop rbx
   806                              <1>     return
    13                              <2> %%_ret:
    14 00005F9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   807                              <1> .setProgOrEnvArenaOwnerToRBX:
   808                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   809 00005F9B 9C                  <1>     pushfq
   810 00005F9C 50                  <1>     push rax
   811                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   812                              <1>     ;This is because they are set up at separate points in the routine!
   813 00005F9D 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   814 00005FA1 E80C000000          <1>     call .writeArenaHeaderOwner
   815 00005FA6 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   816 00005FAA E803000000          <1>     call .writeArenaHeaderOwner
   817 00005FAF 58                  <1>     pop rax
   818 00005FB0 9D                  <1>     popfq
   819                              <1>     return
    13                              <2> %%_ret:
    14 00005FB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> .writeArenaHeaderOwner:
   821                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   822                              <1> ;       rbx = Owner ID
   823 00005FB2 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   824                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005FB5 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825 00005FB7 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   826 00005FBD 48895801            <1>     mov qword [rax + 1], rbx
   827                              <1>     return
    13                              <2> %%_ret:
    14 00005FC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    40                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00005FC2 3C01                <1>     cmp al, 01
    12 00005FC4 740B                <1>     je .setSC
    13 00005FC6 7210                <1>     jb .getSC
    14 00005FC8 3C03                <1>     cmp al, 03
    15 00005FCA 7214                <1>     jb .getDev
    16 00005FCC 741C                <1>     je .setDev
    17 00005FCE B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00005FD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00005FD1 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00005FD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00005FD8 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00005FDE EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00005FE0 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00005FE2 E8100C0000          <1>     call getUserRegs
    29 00005FE7 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00005FEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 00005FEB 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00005FEE 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 00005FF1 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 00005FF3 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00005FF6 31ED                <1>     xor ebp, ebp    ;Get country table
    57 00005FF8 B901000000          <1>     mov ecx, 1      ;Set country table
    58 00005FFD 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 00006004 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006006 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 00006008 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 0000600A 488D35DFA1FFFF      <1>     lea rsi, ctryTbl
    65 00006011 B926000000          <1>     mov ecx, countryStruc_size
    66 00006016 F3A4                <1>     rep movsb
    67 00006018 0FB71DCDA1FFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 0000601F E8D30B0000          <1>     call getUserRegs
    70 00006024 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 00006028 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 0000602A E98D100000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 0000602F 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 00006031 E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 00006036 0F828E100000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 0000603C 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 0000603E 75E8                <1>     jnz .exitNoCountryCode 
    81 00006040 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 00006042 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 00006044 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 00006046 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 00006048 663B1D9DA1FFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000604F 7499                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   101 00006051 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 00006053 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 00006055 B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 0000605A CD4F                <1>     int 4fh
   105 0000605C 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 0000605E 751F                <1>     jne .errNotInstalled
   107 00006060 488D3512A1FFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 00006067 B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 0000606C B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 00006071 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 00006073 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 00006076 CD4F                <1>     int 4fh
   113 00006078 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000607A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000607C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 0000607D F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 0000607E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 0000607F B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 00006081 EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 00006083 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 00006089 7250                <1>     jb .invFuncExit
   143 0000608B 488D35E7A0FFFF      <1>     lea rsi, dosNLSPtr
   144 00006092 6681FAFFFF          <1>     cmp dx, -1
   145 00006097 660F44154DA1FFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 0000609F 6681FBFFFF          <1>     cmp bx, -1
   147 000060A4 660F441D42A1FFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 000060AC 663B1539A1FFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 000060B3 7569                <1>     jne .nlsReq
   150 000060B5 663B1D32A1FFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 000060BC 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 000060BE 488D3500A1FFFF      <1>     lea rsi, charTableArray
   155 000060C5 0FB72DF7A0FFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 000060CC 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 000060CE 7515                <1>     jne .tblFound
   159 000060D0 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 000060D7 FFCD                <1>     dec ebp
   161 000060D9 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 000060DB B801000000          <1>     mov eax, 1
   165 000060E0 E9E50F0000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 000060E5 A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 000060E6 3C01                <1>     cmp al, 1
   169 000060E8 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 000060EA B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 000060EF B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 000060F4 F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 000060F6 E8FC0A0000          <1>     call getUserRegs
   177 000060FB 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 000060FE 89D8                <1>     mov eax, ebx    
   181 00006100 E9B70F0000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 00006105 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 0000610B 31C0                <1>     xor eax, eax    ;Clear eax
   186 0000610D 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 0000610F 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 00006111 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 00006114 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 00006116 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 00006118 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 0000611C EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 0000611E 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 00006121 B800140000          <1>     mov eax, 1400h  ;Install check!
   199 00006126 CD4F                <1>     int 4fh
   200 00006128 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 0000612A 75AF                <1>     jne .invFuncExit    
   202 0000612C B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 00006131 CD4F                <1>     int 4fh
   204 00006133 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 00006135 0F858F0F0000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 0000613B 0FB7057FA0FFFF      <1>     movzx eax, word [defaultCP]
   210 00006142 E9750F0000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 00006147 3C01                <1>     cmp al, 1
   220 00006149 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 0000614B E8A70A0000          <1>     call getUserRegs
   223 00006150 0FB71D97A0FFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 00006157 0FB71563A0FFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 0000615E 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 00006161 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 00006164 E9530F0000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 00006169 B801000000          <1>     mov eax, errInvFnc
   230 0000616E E9570F0000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 00006173 3C02                <1>     cmp al, 2
   233 00006175 75F2                <1>     jne .exitBadFunc
   234 00006177 0FB71503A0FFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 0000617E B800140000          <1>     mov eax, 1400h
   236 00006183 CD4F                <1>     int 4Fh
   237 00006185 3CFF                <1>     cmp al, -1
   238 00006187 75E0                <1>     jne .exitBadFunc
   239 00006189 488D35E99FFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 00006190 B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 00006195 CD4F                <1>     int 4Fh
   242 00006197 84C0                <1>     test al, al
   243 00006199 0F841D0F0000        <1>     jz extGoodExit
   244 0000619F 3C41                <1>     cmp al, errNLSAcDen
   245 000061A1 0F85230F0000        <1>     jne extErrExit
   246 000061A7 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 000061A9 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 000061B0 C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 000061B7 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 000061BE C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 000061C5 E90D0F0000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 000061CA 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000061CC 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000061CE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 000061CF 53                  <1>     push rbx
   259 000061D0 488D1D41A0FFFF      <1>     lea rbx, ucTbl
   260 000061D7 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 000061D9 D7                  <1>     xlatb
   262 000061DA 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 000061DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> fullcriticalErrorInvoke:
     3 000061DC B803000000          <1>     mov eax, 03 ;Always fail for now
     4 000061E1 F9                  <1>     stc
     5                              <1>     return
    13                              <2> %%_ret:
    14 000061E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     6                              <1> xlatHardError:
     7                              <1> ;Translates a hard error code to a generic DOS error
     8                              <1> ;Input: edi = eax = Hard Error Code
     9 000061E3 50                  <1>     push rax
    10 000061E4 3D13000000          <1>     cmp eax, drvErrShft
    11 000061E9 7205                <1>     jb .skipXlat
    12 000061EB 0513000000          <1>     add eax, drvErrShft
    13                              <1> .skipXlat:
    14 000061F0 880556A3FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    15 000061F6 58                  <1>     pop rax
    16 000061F7 56                  <1>     push rsi
    17 000061F8 488D35069FFFFF      <1>     lea rsi, extErrTbl
    18 000061FF E81F0F0000          <1>     call setErrorVars
    19 00006204 5E                  <1>     pop rsi
    20                              <1>     return
    13                              <2> %%_ret:
    14 00006205 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> diskDevErr:
    23                              <1> ;Called, NOT Jumped to. 
    24                              <1> ;Input: rdi = Disk Buffer pointer
    25                              <1> ;       eax = Status word (Zero Extended)
    26                              <1> ;       rbp = Disk DPB pointer
    27                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    28                              <1> ;Output: al = Int 44h response (0-3)
    29                              <1> ; All other registers preserved
    30 00006206 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    31 0000620D 89C7                <1>     mov edi, eax    ;Store status word in rdi
    32 0000620F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    33 00006212 8A25(67040000)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    34 00006218 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    35                              <1>     ;Test for correct buffer data type
    36 0000621B 53                  <1>     push rbx    ;Save rbx temporarily
    37 0000621C 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    38 0000621F F6C301              <1>     test bl, dosBuffer
    39 00006222 7505                <1>     jnz .df0
    40 00006224 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    41 00006227 EB17                <1>     jmp short .df3
    42                              <1> .df0:
    43 00006229 F6C302              <1>     test bl, fatBuffer
    44 0000622C 7505                <1>     jnz .df1
    45 0000622E 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    46 00006231 EB0D                <1>     jmp short .df3
    47                              <1> .df1:
    48 00006233 F6C304              <1>     test bl, dirBuffer
    49 00006236 7505                <1>     jnz .df2
    50 00006238 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    51 0000623B EB03                <1>     jmp short .df3
    52                              <1> .df2:
    53 0000623D 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    54                              <1> .df3:
    55 00006240 5B                  <1>     pop rbx
    56 00006241 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    57 00006245 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    58 0000624A 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    59 00006251 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    60                              <1>     return
    13                              <2> %%_ret:
    14 00006258 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> charDevErr:
    63                              <1> ;Called with ah with additional bits
    64 00006259 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    65                              <1> criticalErrorSetup:
    66 0000625C 8825(67040000)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    67 00006262 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    68 00006269 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    69                              <1>     ;For now, fall through, but need much work to change it later! 
    70                              <1> 
    71                              <1> 
    72                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    73                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    74                              <1> ; to the critical error handler.
    75                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    76                              <1> ; and with Int44Bitfield set
    77                              <1> ;               AH = Critical Error Bitfield
    78                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    79                              <1> ;               Bit 6 - Reserved
    80                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    81                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    82                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    83                              <1> ;               Bits [2-1] = Affected Disk Error
    84                              <1> ;                     0 0   DOS area
    85                              <1> ;                     0 1   FAT area
    86                              <1> ;                     1 0   Directory area
    87                              <1> ;                     1 1   Data area
    88                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    89                              <1> ;               AL  = Failing drive number if AH[7] = 0
    90                              <1> ;               DIL = Error code for errorMsg
    91                              <1> ;               RSI = EA of Device Header for which device the error occured
    92                              <1> ;Return:
    93                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    94                              <1> ;                  = 1 - Retry the Operation    (Retry)
    95                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    96                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    97                              <1> ; Return response from int 44h in al
    98                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    99                              <1> ; This function will terminate the program if an abort was requested!
   100                              <1> ; This function also destroys RBP
   101 0000626F 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   102 00006276 7204                <1>     jb .noIntError  ;If not 0, enter
   103 00006278 B003                <1>     mov al, critFail    ;Else, return Fail always
   104 0000627A EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   105                              <1> .noIntError:
   106 0000627C FA                  <1>     cli ;Disable Interrupts
   107 0000627D FE05(07040000)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   108 00006283 FE0D(08040000)      <1>     dec byte [inDOS]    ;Exiting DOS
   109 00006289 488925(5F040000)    <1>     mov qword [xInt44hRSP], rsp
   110 00006290 488B25(7A040000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   111 00006297 31ED                <1>     xor ebp, ebp    ;Always zeroed
   112 00006299 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   113 0000629B 488B25(5F040000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   114 000062A2 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   115 000062A9 FE05(08040000)      <1>     inc byte [inDOS]    ;Reenter DOS
   116 000062AF FB                  <1>     sti ;Reenable Interrupts
   117                              <1>     ;Now we check that the response given was allowed, and translate if needed
   118                              <1> .checkResponse:
   119 000062B0 3C00                <1>     cmp al, critIgnore
   120 000062B2 7421                <1>     je .checkIgnore
   121 000062B4 3C01                <1>     cmp al, critRetry
   122 000062B6 7428                <1>     je .checkRetry
   123 000062B8 3C03                <1>     cmp al, critFail
   124 000062BA 752F                <1>     jne .abort   ;Must be abort
   125                              <1> .setFail:   ;Here is for fail
   126 000062BC B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   127 000062BE FE05(69040000)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   128 000062C4 F605(67040000)08    <1>     test byte [Int44bitfld], critFailOK
   129 000062CB 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   130                              <1> .exit:
   131 000062CD C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   132                              <1>     return
    13                              <2> %%_ret:
    14 000062D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   133                              <1> .checkIgnore:
   134 000062D5 F605(67040000)20    <1>     test byte [Int44bitfld], critIgnorOK
   135 000062DC 75EF                <1>     jnz .exit
   136 000062DE EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   137                              <1> .checkRetry:
   138 000062E0 F605(67040000)10    <1>     test byte [Int44bitfld], critRetryOK
   139 000062E7 75E4                <1>     jnz .exit   
   140 000062E9 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   141                              <1> .abort:
   142                              <1> ;Prepare to abort. We abort from within!
   143                              <1> ;If a network request requests abort, translate to fail
   144 000062EB 803D(FD060000)FF    <1>     cmp byte [dosInvoke], -1
   145 000062F2 7509                <1>     jne .kill   ;If this is zero, local invokation
   146 000062F4 C605(95040000)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   147 000062FB EBD0                <1>     jmp short .exit
   148                              <1> .kill:
   149 000062FD 66893D(0B040000)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   150 00006304 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   151 00006306 C605(01070000)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   152 0000630D E94CF4FFFF          <1>     jmp terminateClean.altEP
   153                              <1> 
   154                              <1> ctrlBreakHdlr:
   155 00006312 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   156 00006314 E8A4C2FFFF          <1>     call printCaretASCII
   157 00006319 E8CFC2FFFF          <1>     call printCRLF
   158                              <1>     ;Reset the console back to 0
   159 0000631E C605(93040000)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   160                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   161                              <1> .exceptEP:
   162                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   163                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   164                              <1> ;   interrupted DOS call is restarted
   165 00006325 FA                  <1> 	cli
   166 00006326 488B25(7A040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   167 0000632D E81F0D0000          <1> 	call dosPopRegs ;Get user state back
   168 00006332 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   169 00006339 C605(07040000)00    <1>     mov byte [critErrFlag], 0
   170 00006340 488925(27040000)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   171 00006347 F8                  <1>     clc
   172 00006348 CD43                <1>     int 43h ;Call critical error handler
   173 0000634A FA                  <1>     cli ;Clear interrupts again
   174 0000634B 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   175 00006352 9C                  <1>     pushfq  ;Get flags in rax
   176 00006353 58                  <1>     pop rax 
   177 00006354 483B25(27040000)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   178 0000635B 750C                <1>     jne .checkCF
   179                              <1> .returnToDOS:
   180 0000635D 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   181 00006364 E98E0B0000          <1>     jmp functionDispatch    ;Goto int 41h
   182                              <1> .checkCF:
   183 00006369 488B25(27040000)    <1>     mov rsp, qword [xInt43hRSP]  ;Account for the flags and SS:RSP left on stack
   184 00006370 A801                <1>     test al, 1  ;CF set?
   185 00006372 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   186 00006374 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   187 00006379 C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   188 00006380 E9720B0000          <1>     jmp functionDispatch
   189                              <1> 
   190                              <1> ;CPU Exception handlers
   191                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   192                              <1> ; CTRL+C exit.
   193                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   194                              <1> ; system.
   195                              <1> ; Also halt if the application is it's own parent.
   196                              <1> ;An application should hook these interupts if they wish to not 
   197                              <1> ; CTRL+C exit, and instead return to DOS.
   198                              <1> i0:
   199 00006385 31C0                <1>     xor eax, eax
   200 00006387 E9AB000000          <1>     jmp cpu_2args
   201                              <1> i1:
   202 0000638C B801000000          <1>     mov eax, 1
   203 00006391 E9A1000000          <1>     jmp cpu_2args
   204                              <1> i2:
   205 00006396 B802000000          <1>     mov eax, 2
   206 0000639B E997000000          <1>     jmp cpu_2args
   207                              <1> i3:
   208 000063A0 B803000000          <1>     mov eax, 3
   209 000063A5 E98D000000          <1>     jmp cpu_2args
   210                              <1> i4:
   211 000063AA B804000000          <1>     mov eax, 4
   212 000063AF E983000000          <1>     jmp cpu_2args
   213                              <1> i5:
   214 000063B4 B805000000          <1>     mov eax, 5
   215 000063B9 EB7C                <1>     jmp short cpu_2args
   216                              <1> i6:
   217 000063BB B806000000          <1>     mov eax, 6
   218 000063C0 EB75                <1>     jmp short cpu_2args
   219                              <1> i7:
   220 000063C2 B807000000          <1>     mov eax, 7
   221 000063C7 EB6E                <1>     jmp short cpu_2args
   222                              <1> i8:
   223 000063C9 B808000000          <1>     mov eax, 8
   224 000063CE EB60                <1>     jmp short cpu_3args
   225                              <1> i9:
   226 000063D0 B809000000          <1>     mov eax, 9
   227 000063D5 EB60                <1>     jmp short cpu_2args
   228                              <1> i10:
   229 000063D7 B80A000000          <1>     mov eax, 0Ah
   230 000063DC EB52                <1>     jmp short cpu_3args
   231                              <1> i11:
   232 000063DE B80B000000          <1>     mov eax, 0Bh
   233 000063E3 EB4B                <1>     jmp short cpu_3args
   234                              <1> i12:
   235 000063E5 B80C000000          <1>     mov eax, 0Ch
   236 000063EA EB44                <1>     jmp short cpu_3args
   237                              <1> i13:
   238 000063EC B80D000000          <1>     mov eax, 0Dh
   239 000063F1 EB3D                <1>     jmp short cpu_3args
   240                              <1> i14:
   241 000063F3 B80E000000          <1>     mov eax, 0Eh
   242 000063F8 EB2F                <1>     jmp short cpu_4args
   243                              <1> i15:
   244 000063FA B80F000000          <1>     mov eax, 0Fh
   245 000063FF EB36                <1>     jmp short cpu_2args
   246                              <1> i16:
   247 00006401 B810000000          <1>     mov eax, 10h
   248 00006406 EB2F                <1>     jmp short cpu_2args
   249                              <1> i17:
   250 00006408 B811000000          <1>     mov eax, 11h
   251 0000640D EB21                <1>     jmp short cpu_3args
   252                              <1> i18:
   253 0000640F B812000000          <1>     mov eax, 12h
   254 00006414 EB21                <1>     jmp short cpu_2args
   255                              <1> i19:
   256 00006416 B813000000          <1>     mov eax, 13h
   257 0000641B EB1A                <1>     jmp short cpu_2args
   258                              <1> i20:
   259 0000641D B814000000          <1>     mov eax, 14h
   260 00006422 EB13                <1>     jmp short cpu_2args
   261                              <1> i21:
   262 00006424 B815000000          <1>     mov eax, 15h
   263                              <1> cpu_4args:
   264 00006429 B903000000          <1>     mov ecx, 3
   265 0000642E EB0C                <1>     jmp short cpu_exception
   266                              <1> cpu_3args:
   267 00006430 B902000000          <1>     mov ecx, 2
   268 00006435 EB05                <1>     jmp short cpu_exception
   269                              <1> cpu_2args:
   270 00006437 B901000000          <1>     mov ecx, 1
   271                              <1> cpu_exception:
   272                              <1> ;Enter with:
   273                              <1> ; eax = Exception number in binary
   274                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   275 0000643C 488D356D020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   276 00006443 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   277 00006448 E81B020000          <1>     call .writeExceptionMessage
   278                              <1> 
   279 0000644D 803D(08040000)01    <1>     cmp byte [inDOS], 1
   280 00006454 7327                <1>     jae .introStop
   281 00006456 3D02000000          <1>     cmp eax, 2
   282 0000645B 7420                <1>     je .introStop
   283                              <1> 
   284 0000645D 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   285 00006464 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   286 00006468 7413                <1>     je .introStop
   287                              <1> 
   288 0000646A 488D3568020000      <1>     lea rsi, .fatal1
   289 00006471 BBC1000000          <1>     mov ebx, fatal1L
   290 00006476 E8ED010000          <1>     call .writeExceptionMessage
   291 0000647B EB18                <1>     jmp short .introEnd
   292                              <1> .introStop:
   293 0000647D C605(8A1A0000)FF    <1>     mov byte [haltDOS], -1
   294 00006484 488D3512030000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   295 0000648B BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   296 00006490 E8D3010000          <1>     call .writeExceptionMessage
   297                              <1> .introEnd:
   298 00006495 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   299 0000649C E895010000          <1>     call .printbyte ;Store the error code in the byte buffer
   300 000064A1 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   301 000064A8 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   302 000064AD E8B6010000          <1>     call .writeExceptionMessage
   303                              <1> 
   304 000064B2 488D35E1020000      <1>     lea rsi, .fatal2
   305 000064B9 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   306 000064BE E8A5010000          <1>     call .writeExceptionMessage
   307                              <1> 
   308 000064C3 80F901              <1>     cmp cl, 1
   309 000064C6 0F87D0000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   310                              <1> .cpurollprint:
   311 000064CC 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   312 000064D3 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   313                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   314 000064D7 B108                <1>     mov cl, 8    ;8 bytes
   315                              <1> .cpurollprint1:
   316 000064D9 48C1C208            <1>     rol rdx, 8
   317 000064DD 88D0                <1>     mov al, dl
   318 000064DF 52                  <1>     push rdx
   319 000064E0 E851010000          <1>     call .printbyte
   320 000064E5 5A                  <1>     pop rdx
   321 000064E6 FEC9                <1>     dec cl
   322 000064E8 75EF                <1>     jnz .cpurollprint1
   323                              <1> 
   324 000064EA BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   325 000064EF 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   326 000064F6 E86D010000          <1>     call .writeExceptionMessage
   327                              <1> 
   328 000064FB BB03000000          <1>     mov ebx, crlfL
   329 00006500 488D35AF020000      <1>     lea rsi, .crlf
   330 00006507 E85C010000          <1>     call .writeExceptionMessage    
   331                              <1> 
   332 0000650C F605(8A1A0000)FF    <1>     test byte [haltDOS], -1
   333 00006513 7534                <1>     jnz .fatalStop
   334 00006515 E839010000          <1>     call .readInputChar
   335                              <1>     ;Set error code to General Failure
   336 0000651A 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   336 00006522 00                  <1>
   337 00006523 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   338 0000652A C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   339 00006531 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   340 00006538 B8FF4C0000          <1>     mov eax, 4cFFh
   341 0000653D C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1
   342                              <1>     ;If a -1 error code and ctrlC exit and the extended error
   343                              <1>     ; setup as above, chances are it was a CPU error
   344 00006544 E9AE090000          <1>     jmp functionDispatch    ;Call Int 41h politely, clean up resources
   345                              <1> .fatalStop:
   346                              <1> ;This is called if inDOS > 1 or NMI occured
   347                              <1> ;Waits 1 minute then reboots
   348 00006549 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   349 0000654E CD4A                <1>     int 4Ah
   350 00006550 E82A0B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   351 00006555 E8390B0000          <1>     call dosCrit2Enter  ;Get the lock to end all multitasking
   352 0000655A E864C6FFFF          <1>     call getDateAndTimeOld  ;Get time packed in edx (edx[0:4] = Seconds/2)
   353 0000655F 89D3                <1>     mov ebx, edx
   354 00006561 81E31F000000        <1>     and ebx, 1Fh    ;Save the relevent bits
   355                              <1> .loopForNextSecond:
   356 00006567 E820000000          <1>     call .getTimeDateCompare
   357 0000656C 74F9                <1>     je .loopForNextSecond
   358                              <1> .loopTillTimeElapsed:
   359 0000656E E819000000          <1>     call .getTimeDateCompare
   360 00006573 75F9                <1>     jne .loopTillTimeElapsed
   361                              <1>     ;Now we triple fault
   362 00006575 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   363 0000657C EB00                <1>     jmp short .toHell
   364                              <1> .toHell:
   365 0000657E CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   366 00006580 EBFC                <1>     jmp short .toHell
   367                              <1> .resetIDT:
   368 00006582 0000                <1>     dw 0
   369 00006584 0000000000000000    <1>     dq 0
   370                              <1> .getTimeDateCompare:
   371 0000658C 53                  <1>     push rbx
   372 0000658D E831C6FFFF          <1>     call getDateAndTimeOld
   373 00006592 5B                  <1>     pop rbx
   374 00006593 81E21F000000        <1>     and edx, 1Fh
   375 00006599 39DA                <1>     cmp edx, ebx
   376                              <1>     return
    13                              <2> %%_ret:
    14 0000659B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> .cpuextendederror:
   379 0000659C 5A                  <1>     pop rdx
   380 0000659D 48FFC9              <1>     dec rcx
   381 000065A0 51                  <1>     push rcx
   382 000065A1 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   383 000065A8 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   384 000065AA 86D6                <1>     xchg dl, dh   
   385                              <1> .pr1:
   386 000065AC 88D0                <1>     mov al, dl
   387 000065AE 52                  <1>     push rdx
   388 000065AF E882000000          <1>     call .printbyte
   389 000065B4 5A                  <1>     pop rdx
   390 000065B5 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   391 000065B8 FEC9                <1>     dec cl
   392 000065BA 75F0                <1>     jnz .pr1
   393                              <1> 
   394 000065BC 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   395 000065C3 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   396 000065C8 E89B000000          <1>     call .writeExceptionMessage
   397                              <1> 
   398 000065CD 488D35C6010000      <1>     lea rsi, .fatal2
   399 000065D4 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   400 000065D9 E88A000000          <1>     call .writeExceptionMessage
   401                              <1> 
   402 000065DE 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   403 000065DF 48FFC9              <1>     dec rcx
   404 000065E2 0F84E4FEFFFF        <1>     jz .cpurollprint
   405                              <1> 
   406 000065E8 B108                <1>     mov cl, 8   ;16 nybbles
   407 000065EA 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   408 000065ED 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   409                              <1> .pr2:
   410 000065F4 48C1C208            <1>     rol rdx, 8    ;Print rdx
   411 000065F8 88D0                <1>     mov al, dl
   412 000065FA 52                  <1>     push rdx
   413 000065FB E836000000          <1>     call .printbyte
   414 00006600 5A                  <1>     pop rdx
   415 00006601 FEC9                <1>     dec cl
   416 00006603 75EF                <1>     jnz .pr2
   417                              <1> 
   418 00006605 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   419 0000660C BB10000000          <1>     mov ebx, 16
   420 00006611 E852000000          <1>     call .writeExceptionMessage
   421                              <1> 
   422 00006616 488D357D010000      <1>     lea rsi, .fatal2
   423 0000661D BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   424 00006622 E841000000          <1>     call .writeExceptionMessage
   425                              <1> 
   426 00006627 E9A0FEFFFF          <1>     jmp .cpurollprint
   427                              <1> 
   428                              <1> 
   429                              <1> .char:    ;Print a single character
   430 0000662C 488D1D6D000000      <1>     lea rbx, .ascii
   431 00006633 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   432 00006634 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   433 00006635 C3                  <1>     ret
   434                              <1> .printbyte:
   435 00006636 88C2                <1>     mov dl, al            ;save byte in dl
   436 00006638 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   437 0000663C 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   438 00006641 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   439 00006645 E8E2FFFFFF          <1>     call .char
   440 0000664A 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   441 0000664D E8DAFFFFFF          <1>     call .char
   442 00006652 C3                  <1>     ret        
   443                              <1> 
   444                              <1> 
   445                              <1> .readInputChar:
   446 00006653 C605(EC040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   447 0000665A 488D35(1B050000)    <1>     lea rsi, singleIObyt
   448 00006661 BB01000000          <1>     mov ebx, 1  ;Read one char
   449 00006666 EB07                <1>     jmp short .ioException
   450                              <1> .writeExceptionMessage:
   451                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   452 00006668 C605(EC040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   453                              <1> .ioException:
   454 0000666F C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   455 00006676 66C705(ED040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   455 0000667E 00                  <1>
   456 0000667F 891D(00050000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   457 00006685 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   458 0000668C 488935(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   459 00006693 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   460 0000669A E822010000          <1>     call goDriver
   461                              <1>     return
    13                              <2> %%_ret:
    14 0000669F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> 
   463                              <1> 
   464                              <1> ;Error messages
   465 000066A0 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   465 000066A9 39414243444546      <1>
   466 000066B0 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   466 000066B9 20205343502F444F53- <1>
   466 000066C2 20455843455054494F- <1>
   466 000066CB 4E2044455445435445- <1>
   466 000066D4 44210D0A0A          <1>
   467                              <1> fatalt0L   equ $ - .fatalt0
   468                              <1> 
   469                              <1> .fatal1:   
   470 000066D9 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   470 000066E2 656E7469616C6C7920- <1>
   470 000066EB 666174616C20657272- <1>
   470 000066F4 6F7220686173206265- <1>
   470 000066FD 656E20646574656374- <1>
   470 00006706 65640D0A            <1>
   471 0000670A 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   471 00006713 68652063757272656E- <1>
   471 0000671C 74206170706C696361- <1>
   471 00006725 74696F6E206D757374- <1>
   471 0000672E 206265207465726D69- <1>
   471 00006737 6E617465642E0D0A0A  <1>
   472 00006740 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   472 00006749 20616E79206B657920- <1>
   472 00006752 746F20636F6E74696E- <1>
   472 0000675B 7565206F7220435452- <1>
   472 00006764 4C2B414C542B44454C- <1>
   472 0000676D 20746F207265737461- <1>
   472 00006776 727420746865206D61- <1>
   472 0000677F 6368696E652E        <1>
   473 00006785 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   473 0000678E 5354454D204552524F- <1>
   473 00006797 523A20              <1>
   474                              <1> fatal1L equ $ - .fatal1
   475                              <1> 
   476 0000679A 203A20              <1> .fatal2:   db " : "
   477                              <1> fatal2L    equ $ - .fatal2
   478                              <1> 
   479                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   480 0000679D 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   480 000067A6 4F532053595354454D- <1>
   480 000067AF 2053544F503A20      <1>
   481                              <1> fatalHaltL equ $ - .fatalHalt
   482 000067B6 0D0A0A              <1> .crlf:  db CR,LF,LF
   483                              <1> crlfL  equ $ - .crlf
    42                                  %include "./src/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 45h Int 46h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 000067B9 B003                <1>     mov al, critFail
     7 000067BB 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 000067BD 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 000067C1 E8CD080000          <1>     call dosCrit2Enter
    16 000067C6 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 000067C9 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 000067CC E8CC080000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 000067D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 000067D2 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 000067D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 000067D9 84C0                <1>     test al, al
    33 000067DB 723F                <1>     jc .diskError
    34 000067DD 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 000067E3 7337                <1>     jae .diskError
    36 000067E5 50                  <1>     push rax
    37 000067E6 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 000067E8 E897040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 000067ED 58                  <1>     pop rax
    40 000067EE 7235                <1>     jc .error
    41 000067F0 8805(04070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 000067F6 488B2D(0D070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 000067FD 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006805 750A                <1>     jnz .netError
    45 00006807 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 0000680B E852030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006810 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006811 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006819 00                  <1>
    50 0000681A EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 0000681C 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006824 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    54 00006825 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 0000682C C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006833 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 0000683A F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 0000683B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 0000683C FE05(08040000)      <1>     inc byte [inDOS]
    63 00006842 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006843 FC                  <1>     cld ;Set string ops in the right direction
    65 00006844 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006849 72F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    67 0000684B C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 00006852 56                  <1>     push rsi
    69 00006853 50                  <1>     push rax
    70 00006854 488D35(1D050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 0000685B 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 0000685D 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006860 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006866 F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006867 B800030000          <1>     mov eax, 0300h  
    79 0000686C CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 0000686E 58                  <1>     pop rax
    82 0000686F 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006870 729F                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006872 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 46h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006873 FA                  <1>     cli
    93 00006874 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 0000687B 488D25(D8190000)    <1>     lea rsp, DiskStakTop
    95 00006882 55                  <1>     push rbp
    96 00006883 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006884 E8B3FFFFFF          <1>     call setupAbsDiskEntry
    98 00006889 7252                <1>     jc absDiskExit
    99 0000688B E8E5010000          <1>     call primReqWriteSetup
   100 00006890 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 45h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006892 FA                  <1>     cli 
   107 00006893 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 0000689A 488D25(D8190000)    <1>     lea rsp, DiskStakTop
   109 000068A1 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 000068A2 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 000068A3 E894FFFFFF          <1>     call setupAbsDiskEntry
   112 000068A8 7233                <1>     jc absDiskExit
   113 000068AA E8D1010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 000068AF E859000000          <1>     call absDiskDriverCall
   118 000068B4 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 000068B6 8A05(C3040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 000068BC B480                <1>     mov ah, 80h ;Attachment failure
   123 000068BE 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 000068C0 741A                <1>     je .absExit
   125 000068C2 B440                <1>     mov ah, 40h ;Seek error
   126 000068C4 3C06                <1>     cmp al, 06h
   127 000068C6 7414                <1>     je .absExit
   128 000068C8 B408                <1>     mov ah, 08h ;Bad CRC
   129 000068CA 3C04                <1>     cmp al, 04h
   130 000068CC 740E                <1>     je .absExit
   131 000068CE B404                <1>     mov ah, 04h ;Sector not found
   132 000068D0 3C08                <1>     cmp al, 08h
   133 000068D2 7408                <1>     je .absExit
   134 000068D4 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 000068D6 84C0                <1>     test al, al
   136 000068D8 7402                <1>     je .absExit
   137 000068DA B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 000068DC F9                  <1>     stc
   140                              <1> absDiskExit:
   141 000068DD 5B                  <1>     pop rbx
   142 000068DE 5D                  <1>     pop rbp
   143 000068DF FA                  <1>     cli
   144 000068E0 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]
   145 000068E7 FB                  <1>     sti ;Reenable interrupts
   146 000068E8 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 000068EF 9C                  <1>     pushfq
   148 000068F0 5A                  <1>     pop rdx ;Get the current flags
   149 000068F1 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 000068F5 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 000068FA 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 000068FC FA                  <1>     cli
   154 000068FD 52                  <1>     push rdx    ;Push the flags on the stack
   155 000068FE 51                  <1>     push rcx    ;Push the return address on the stack
   156 000068FF 9C                  <1>     pushfq
   157 00006900 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006902 89CA                <1>     mov edx, ecx
   159 00006904 FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 0000690A 9D                  <1>     popfq
   161 0000690B FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 0000690C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 0000690D 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 0000690E 8B0D(D6040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006914 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006918 E8A4FEFFFF          <1>     call goDriver   ;Make request
   176 0000691D 5E                  <1>     pop rsi
   177 0000691E 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006924 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006926 0FB705(C3040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 0000692D 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006931 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 00006932 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 00006936 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 00006939 8805(04070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 0000693F E81E020000          <1>     call setWorkingDPB
   192 00006944 57                  <1>     push rdi    ;Save the CDS ptr
   193 00006945 E839000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 0000694A 5F                  <1>     pop rdi
   195 0000694B 7235                <1>     jc .exitBad ;Preserve CF
   196 0000694D 7532                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 0000694F 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006956 31C0                <1>     xor eax, eax
   200 00006958 FFC8                <1>     dec eax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 0000695A 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 0000695E 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006965 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 0000696B 7509                <1>     jnz .next
   207 0000696D 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 00006971 7503                <1>     jne .next   ;Else, goto next
   209 00006973 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006976 4881C75B000000      <1>     add rdi, cds_size
   212 0000697D FFC9                <1>     dec ecx
   213 0000697F 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006981 F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006982 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224                              <1> .medChk:
   225 00006983 E841010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   226                              <1> ;Return in rbx the req hdr address
   227 00006988 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   228 0000698C E830FEFFFF          <1>     call goDriver   ;Request!
   229 00006991 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   230 00006995 F7C700800000        <1>     test edi, drvErrStatus
   231 0000699B 7575                <1>     jnz .diskDrvCritErrMedChk
   232                              <1> .medChkIgnore:
   233 0000699D 8A05(04070000)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   234 000069A3 30E4                <1>     xor ah, ah
   235 000069A5 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   236 000069A8 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   237 000069AB 780B                <1>     js short .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   238                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000069AD 75D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   239 000069AF E8DF9DFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   240 000069B4 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   241 000069B5 7206                <1>     jc short .resetDPB   ;Exit ONLY if a dirty buffer found!
   242                              <1>     ;ZF=NZ from test for dirty buffers
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 000069B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   246 000069B8 E8FA9DFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   247                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   248 000069BD C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   249 000069C1 C605(E0190000)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   250                              <1>     ;Get a buffer to read BPB into in rdi
   251 000069C8 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   252 000069CA E8FE9FFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   253 000069CF 7239                <1>     jc short .exitBad    ;Immediately exit with the carry flag set
   254 000069D1 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   255                              <1> .repeatEP:
   256 000069D5 E81B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   257 000069DA 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   258 000069DE E8DEFDFFFF          <1>     call goDriver   ;Request!
   259 000069E3 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   260 000069E7 A900800000          <1>     test eax, drvErrStatus
   261 000069EC 7562                <1>     jnz .diskDrvCritErrBPB
   262                              <1>     ;Now rebuild the dpb fields for this drive
   263 000069EE 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   264 000069F2 53                  <1>     push rbx
   265 000069F3 E8F2090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   266 000069F8 5B                  <1>     pop rbx
   267                              <1>     ;Adjust the buffer header information
   268 000069F9 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   269 000069FC 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   270 000069FF 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   271 00006A02 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   272 00006A05 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   273 00006A07 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   274                              <1> .exitBad:
   275 00006A0A C605(E0190000)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag
   276                              <1>     return
    13                              <2> %%_ret:
    14 00006A11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .diskDrvCritErrMedChk:
   278                              <1> ;Critical Errors fall through here
   279                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   280 00006A12 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   281 00006A19 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   282 00006A20 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   283 00006A23 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   284 00006A25 8825(67040000)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   285 00006A2B E83FF8FFFF          <1>     call criticalDOSError
   286 00006A30 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]
   287 00006A37 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   288 00006A3E 3C01                <1>     cmp al, critRetry
   289 00006A40 0F843DFFFFFF        <1>     je .medChk
   290 00006A46 3C00                <1>     cmp al, critIgnore
   291 00006A48 0F844FFFFFFF        <1>     je .medChkIgnore
   292 00006A4E F9                  <1>     stc ;Set error flag to indicate fail
   293                              <1>     return ;And exit from function with CF set
    13                              <2> %%_ret:
    14 00006A4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .diskDrvCritErrBPB:
   296                              <1>     ;eax has status word, rbp has dpb ptr
   297                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   298 00006A50 C605(E0190000)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag (to prevent abort issues)
   299 00006A57 C605(67040000)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   300 00006A5E C605(E0190000)FF    <1>     mov byte [diskChange], -1  ;Set Disk Change flag again as we are back in
   301 00006A65 E89CF7FFFF          <1>     call diskDevErr
   302 00006A6A 3C01                <1>     cmp al, critRetry
   303 00006A6C 0F8463FFFFFF        <1>     je .repeatEP
   304                              <1>     ;Else we fail (Ignore=Fail here)
   305 00006A72 F9                  <1>     stc ;Set error flag to indicate fail
   306 00006A73 EB95                <1>     jmp short .exitBad ;And exit from function with CF set
   307                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   308                              <1> ;           Primitive Driver Requests
   309                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   310                              <1> ;First are Disk requests, then Char device requests
   311                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   312                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   313                              <1> 
   314                              <1> primReqWriteSetup:
   315 00006A75 50                  <1>     push rax
   316 00006A76 B408                <1>     mov ah, drvWRITE    ;Command code
   317 00006A78 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   318 00006A7E EB03                <1>     jmp short primReqRWCommon
   319                              <1> primReqReadSetup:
   320 00006A80 50                  <1>     push rax
   321 00006A81 B404                <1>     mov ah, drvREAD
   322                              <1> primReqRWCommon:
   323                              <1> ;Sets up the IO request packet with:
   324                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   325                              <1> ; rbx = Data storage buffer ptr
   326                              <1> ; ecx = Number of sectors to transfer
   327                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   328                              <1> ; ~~~~ Set by entry function ~~~~ 
   329                              <1> ; ah = Command code
   330                              <1> ; All regs preserved EXCEPT rbx.
   331                              <1> ; Return: rbx = Transfer Address
   332 00006A83 48891D(CE040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   333 00006A8A 890D(D6040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   334 00006A90 C605(C0040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   335 00006A97 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   336 00006A9C 8905(C1040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   337 00006AA2 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   338 00006AA5 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   339                              <1>     ;Disk operations only here!
   340 00006AA7 488915(DA040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   341 00006AAE 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   342 00006AB1 8805(CD040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   343 00006AB7 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   344 00006ABA 8805(C1040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   345                              <1> primReqCommonExit:
   346                              <1> ;Returns in rbx the primary request header as these functions
   347                              <1> ; setup the request in the primary request header space
   348 00006AC0 58                  <1>     pop rax
   349 00006AC1 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   350                              <1>     return
    13                              <2> %%_ret:
    14 00006AC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> primReqMedCheckSetup:
   353                              <1> ;Prepare the diskIO packet for mediacheck
   354                              <1> ;rbp has DPB pointer for device to check media on
   355 00006AC9 50                  <1>     push rax
   356 00006ACA C605(C0040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   357 00006AD1 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   358 00006AD4 8805(CD040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   359 00006ADA 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   360 00006ADD 8805(C1040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   361 00006AE3 C605(C2040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   362 00006AEA 66C705(C3040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   362 00006AF2 00                  <1>
   363 00006AF3 EBCB                <1>     jmp short primReqCommonExit
   364                              <1> 
   365                              <1> primReqGetBPBSetup:
   366                              <1> ;rbp has DPB pointer for device
   367                              <1> ;rdi has sector buffer header pointer for transfer
   368 00006AF5 50                  <1>     push rax
   369 00006AF6 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   370 00006AFA 48893D(CE040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   371 00006B01 C605(C0040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   372 00006B08 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   373 00006B0B 8805(CD040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   374 00006B11 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   375 00006B14 8805(C1040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   376 00006B1A C605(C2040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   377 00006B21 66C705(C3040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   377 00006B29 00                  <1>
   378 00006B2A EB94                <1>     jmp short primReqCommonExit
   379                              <1> 
   380                              <1> primReqOpenSetup:
   381                              <1> ;al = unit number if a disk device. Undefined otherwise
   382 00006B2C 50                  <1>     push rax
   383 00006B2D B40D                <1>     mov ah, drvOPEN
   384 00006B2F EB03                <1>     jmp short primReqOCcommon
   385                              <1> primReqCloseSetup:
   386                              <1> ;al = unit number if a disk device. Undefined otherwise
   387 00006B31 50                  <1>     push rax
   388 00006B32 B40E                <1>     mov ah, drvCLOSE
   389                              <1> primReqOCcommon:
   390 00006B34 C605(C0040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   391 00006B3B 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   392 00006B3C 8905(C1040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   393                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   394 00006B42 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   395                              <1> 
   396                              <1> secdReqCharIOReq:
   397                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   398                              <1> ;Input:
   399                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   400                              <1> ; ecx = Length of buffer
   401                              <1> ; rdi = Buffer pointer
   402                              <1> ;Output: 
   403                              <1> ; rbx = Transfer Address 
   404 00006B47 488D1D(96040000)    <1>     lea rbx, secdReqHdr
   405 00006B4E C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   406 00006B51 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   407 00006B54 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   408 00006B5A 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   409 00006B5E 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   410                              <1>     return
    13                              <2> %%_ret:
    14 00006B61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> ;If the device which will process this request is a disk device
   412                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   413                              <1> ;Then we will read the appropriate byte from that buffer to the 
   414                              <1> ; singleIOByt buffer.
   415                              <1> ;Such a request will require additional setup with the following fields:
   416                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    43                                  %include "./src/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006B62 48892D(05070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006B69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006B6A 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
    21 00006B71 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006B78 7409                <1>     je .net
    23 00006B7A 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00006B80 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006B82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006B83 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006B84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006B85 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006B8A 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00006B8C B80C110000          <1>     mov eax, 110Ch 
    43 00006B91 CD4F                <1>     int 4Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006B93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006B94 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006B9B E8DF040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00006BA0 E88DFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006BA5 721C                <1>     jc .exit
    51 00006BA7 E829A0FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00006BAC 7215                <1>     jc .exit
    53 00006BAE 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 00006BB1 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006BB3 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006BB6 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00006BB9 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00006BBB 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 00006BBF 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006BC2 F8                  <1>     clc
    61                              <1> .exit:
    62 00006BC3 E8C1040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00006BC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00006BC9 50                  <1>     push rax    ;Preserve rax
    69 00006BCA FA                  <1>     cli ;Halt interrupts
    70 00006BCB 0F010D(C41A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 00006BD2 0FB6C0              <1>     movzx eax, al
    72 00006BD5 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 00006BD9 480305(C61A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 00006BE0 31DB                <1>     xor ebx, ebx
    75 00006BE2 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 00006BE5 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 00006BE9 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 00006BED 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 00006BF1 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 00006BF4 FB                  <1>     sti
    81 00006BF5 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 00006BF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 00006BF7 488B35(7A040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 00006BFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 00006BFF 488B35(43000000)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 00006C06 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 00006C0D 740A                <1>     je .exitBad
    96 00006C0F 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 00006C11 7407                <1>     je .exit    ;Drive found
    98 00006C13 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 00006C17 EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 00006C19 F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 00006C1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> getCDSNotJoin:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   110                              <1> ;            set.
   111 00006C1B E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 00006C20 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 00006C22 56                  <1>     push rsi
   114 00006C23 488B35(0D070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 00006C2A 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 00006C30 5E                  <1>     pop rsi
   117 00006C31 7401                <1>     jz .exit
   118 00006C33 F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 00006C34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   123                              <1> ;Allows a redirector or subst/join to build a CDS
   124                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   125                              <1> ; volumes, that are made at system boot.
   126                              <1> ;Input: al = Drive Letter for drive
   127                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   128                              <1> ;Output: rdi = newly filled in workingCDS
   129                              <1> ;CF=NC => CDS valid and has a DPB
   130                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   131 00006C35 50                  <1>     push rax
   132 00006C36 2C40                <1>     sub al, "A"-1
   133 00006C38 3A05(77000000)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   134 00006C3E 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   135 00006C45 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   136 00006C4B 58                  <1>     pop rax
   137 00006C4C 7235                <1>     jb .exit    ;Exit with CF=CY
   138 00006C4E 50                  <1>     push rax
   139 00006C4F 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   140 00006C54 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   141 00006C56 58                  <1>     pop rax
   142 00006C57 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   143 00006C5D C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   144 00006C64 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   145 00006C6C 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   146                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   147 00006C72 50                  <1>     push rax
   148 00006C73 56                  <1>     push rsi
   149 00006C74 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   150 00006C76 E884FFFFFF          <1>     call walkDPBchain
   151 00006C7B 7204                <1>     jb .skipSettingDPB
   152 00006C7D 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   153                              <1> .skipSettingDPB:
   154 00006C81 5E                  <1>     pop rsi
   155 00006C82 58                  <1>     pop rax
   156                              <1> .exit:
   157                              <1>     return
    13                              <2> %%_ret:
    14 00006C83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> getCDS:     ;Int 4Fh AX=1219h
   160                              <1> ;Gets the device DPB and saves it in the DOS variable
   161                              <1> ;This can be called to get CDS for network drives too!
   162                              <1> ;Input: al = 1 based drive number
   163                              <1> ;Sets workingCDS var with the CDS for the device. 
   164                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   165 00006C84 84C0                <1>     test al, al
   166 00006C86 7508                <1>     jnz .skip
   167 00006C88 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   168 00006C8E FEC0                <1>     inc al
   169                              <1> .skip:
   170 00006C90 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   171 00006C92 56                  <1>     push rsi
   172 00006C93 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   173 00006C9A F605(FD060000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   174 00006CA1 7423                <1>     jz .localCall
   175                              <1>     ;Invokation via 21/5D00
   176 00006CA3 50                  <1>     push rax
   177 00006CA4 57                  <1>     push rdi
   178 00006CA5 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   179 00006CAC 48893D(0D070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   180 00006CB3 0441                <1>     add al, "A" ;Convert to a drive letter
   181 00006CB5 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   182 00006CBA 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   183 00006CC0 5F                  <1>     pop rdi
   184 00006CC1 58                  <1>     pop rax
   185 00006CC2 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   186 00006CC4 EB17                <1>     jmp short .exitOk   ;All oki
   187                              <1> .localCall:
   188 00006CC6 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   189 00006CCB 7208                <1>     jc .exitBad
   190 00006CCD 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   191 00006CD3 7508                <1>     jnz .exitOk ;Exit with flag cleared
   192                              <1>     ;Else Return to unknown error locus
   193                              <1> .exitBad:
   194 00006CD5 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   195                              <1> .exitBad1:
   196 00006CDC F9                  <1>     stc
   197                              <1> .exitOk:
   198 00006CDD 5E                  <1>     pop rsi
   199                              <1>     return
    13                              <2> %%_ret:
    14 00006CDE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   202                              <1>     ;Gets the CDS for the current drive in al
   203                              <1>     ;Input: al = Drive number, 0 = A ...
   204                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   205                              <1>     ;        CF=CY => al not valid
   206 00006CDF 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   207 00006CE5 7202                <1>     jb .ctn
   208 00006CE7 F9                  <1>     stc 
   209                              <1>     return
    13                              <2> %%_ret:
    14 00006CE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> .ctn:
   211 00006CE9 50                  <1>     push rax
   212 00006CEA 52                  <1>     push rdx
   213 00006CEB 0FB6C0              <1>     movzx eax, al
   214 00006CEE 48BE5B000000000000- <1>     mov rsi, cds_size
   214 00006CF7 00                  <1>
   215 00006CF8 31D2                <1>     xor edx, edx
   216 00006CFA F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   217 00006CFC 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   218 00006D03 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   219 00006D06 488935(0D070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   220 00006D0D 5A                  <1>     pop rdx
   221 00006D0E 58                  <1>     pop rax
   222 00006D0F F8                  <1>     clc
   223                              <1>     return
    13                              <2> %%_ret:
    14 00006D10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   227                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   228                              <1> ;Input: AL = Char to normalise.
   229                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   230                              <1> ;If path separator, set ZF=ZE
   231 00006D11 3C5C                <1>     cmp al, "\"
   232 00006D13 7406                <1>     je .exit
   233 00006D15 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   234 00006D17 7502                <1>     jne .exit
   235 00006D19 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   236                              <1> .exit:
   237                              <1>     return
    13                              <2> %%_ret:
    14 00006D1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> uppercaseCharAtPtr:
   240                              <1> ;Get the char pointed to by rsi and then fall
   241 00006D1C AC                  <1>     lodsb
   242                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   243                              <1> ;Convert a lowercase char to uppercase
   244                              <1> ; Leave alone uppercase chars and invalid chars
   245                              <1> ;Input: al = Char to convert to uppercase
   246                              <1> ;Output: al = Processed char
   247 00006D1D 53                  <1>     push rbx
   248 00006D1E 3C61                <1>     cmp al, "a"
   249 00006D20 7214                <1>     jb .exit
   250 00006D22 3C7A                <1>     cmp al, "z"
   251 00006D24 7702                <1>     ja .checkExt
   252 00006D26 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   253                              <1> .checkExt:
   254 00006D28 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   255 00006D2A 720A                <1>     jb .exit
   256 00006D2C 2C80                <1>     sub al, 80h ;Turn into table offset
   257 00006D2E 488D1D6595FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   258 00006D35 D7                  <1>     xlatb   ;Get converted extended byte into al
   259                              <1> .exit:
   260 00006D36 50                  <1>     push rax    ;Save al temporarily
   261 00006D37 488D1D0E97FFFF      <1>     lea rbx, asciiCharProperties
   262 00006D3E D7                  <1>     xlatb   ;Get the signature in al
   263 00006D3F A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   264 00006D41 58                  <1>     pop rax
   265 00006D42 5B                  <1>     pop rbx
   266                              <1>     return
    13                              <2> %%_ret:
    14 00006D43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   267                              <1> 
   268                              <1> strlen2:    ;Int 4Fh, AX=1212h
   269                              <1> ;Entry point for Multiplex
   270 00006D44 57                  <1>     push rdi
   271 00006D45 4889F7              <1>     mov rdi, rsi
   272 00006D48 E802000000          <1>     call strlen
   273 00006D4D 5F                  <1>     pop rdi
   274                              <1>     return
    13                              <2> %%_ret:
    14 00006D4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> strlen: 
   276                              <1> ;Gets the length of a ASCIIZ string
   277                              <1> ;Input: rdi = Source buffer
   278                              <1> ;Output: ecx = Length of string
   279 00006D4F 50                  <1>     push rax
   280 00006D50 57                  <1>     push rdi
   281 00006D51 30C0                <1>     xor al, al
   282 00006D53 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   283 00006D55 FFC9                <1>     dec ecx ;rcx = -1
   284 00006D57 F2AE                <1>     repne scasb
   285 00006D59 F7D1                <1>     not ecx
   286 00006D5B 5F                  <1>     pop rdi
   287 00006D5C 58                  <1>     pop rax
   288                              <1>     return
    13                              <2> %%_ret:
    14 00006D5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> 
   290                              <1> strcpy:
   291                              <1> ;Copies a null terminated string from rsi to rdi
   292 00006D5E AC                  <1>     lodsb
   293 00006D5F AA                  <1>     stosb
   294 00006D60 84C0                <1>     test al, al
   295                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006D62 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   296 00006D64 EBF8                <1>     jmp short strcpy
   297                              <1> 
   298                              <1> strcmp:
   299                              <1> ;Compares two ASCIIZ strings for equality.
   300                              <1> ;Input: rsi = First string
   301                              <1> ;       rdi = Second string
   302                              <1> ;       ecx = Number of bytes to compare
   303                              <1> ;Output: ZF=ZE => Equal
   304                              <1> ;        ZF=NZ => Not equal
   305 00006D66 56                  <1>     push rsi
   306 00006D67 57                  <1>     push rdi
   307 00006D68 F3A6                <1>     repe cmpsb
   308 00006D6A 5F                  <1>     pop rdi
   309 00006D6B 5E                  <1>     pop rsi
   310                              <1>     return
    13                              <2> %%_ret:
    14 00006D6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> 
   313                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   314                              <1> ;Converts lowercase to uppercase and / to "\"
   315                              <1> ;Input: rsi = Source buffer
   316                              <1> ;       rdi = Buffer to place normalised path
   317 00006D6D 50                  <1>     push rax
   318 00006D6E 56                  <1>     push rsi
   319 00006D6F 57                  <1>     push rdi
   320                              <1> .scan:
   321 00006D70 AC                  <1>     lodsb
   322 00006D71 84C0                <1>     test al, al
   323 00006D73 740D                <1>     jz .exit
   324 00006D75 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   325 00006D7A E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   326 00006D7F AA                  <1>     stosb
   327 00006D80 EBEE                <1>     jmp short .scan
   328                              <1> .exit:
   329 00006D82 5F                  <1>     pop rdi
   330 00006D83 5E                  <1>     pop rsi
   331 00006D84 58                  <1>     pop rax
   332                              <1>     return
    13                              <2> %%_ret:
    14 00006D85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   335                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   336                              <1> ;Input: rsi = One ASCIIZ pathname
   337                              <1> ;       rdi = Second ASCIIZ pathname
   338                              <1> ;Return:
   339                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   340 00006D86 50                  <1>     push rax
   341 00006D87 56                  <1>     push rsi
   342 00006D88 57                  <1>     push rdi
   343                              <1> .scan:
   344 00006D89 8A06                <1>     mov al, byte [rsi]
   345 00006D8B 84C0                <1>     test al, al
   346 00006D8D 7424                <1>     jz .endOfString
   347 00006D8F 8A27                <1>     mov ah, byte [rdi]
   348 00006D91 E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   349 00006D96 7410                <1>     jz .pathseps
   350 00006D98 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   351 00006D9C 38E0                <1>     cmp al, ah
   352 00006D9E 7515                <1>     jnz .exit
   353                              <1> .nextChar:
   354 00006DA0 48FFC6              <1>     inc rsi
   355 00006DA3 48FFC7              <1>     inc rdi
   356 00006DA6 EBE1                <1>     jmp short .scan
   357                              <1> .pathseps:
   358 00006DA8 86E0                <1>     xchg ah, al
   359 00006DAA E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   360 00006DAF 7504                <1>     jnz .exit
   361 00006DB1 EBED                <1>     jmp short .nextChar ;Else get the next chars
   362                              <1> .endOfString:
   363 00006DB3 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   364                              <1> .exit:
   365 00006DB5 5F                  <1>     pop rdi
   366 00006DB6 5E                  <1>     pop rsi
   367 00006DB7 58                  <1>     pop rax
   368                              <1>     return
    13                              <2> %%_ret:
    14 00006DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   369                              <1> checkPathspecOK:
   370                              <1> ;Input:
   371                              <1> ;rsi -> points to a path to verify if it is ok.
   372                              <1> ;Output:
   373                              <1> ;CF=NC => The path is totally clean and ok to use.
   374                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   375                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   376                              <1> ; and depending on method of invokation and caller, may be permissable.
   377                              <1> ;We accept lc and uc characters in this check function.
   378 00006DB9 50                  <1>     push rax
   379 00006DBA 53                  <1>     push rbx    ;Use rbx as the return flag status
   380 00006DBB 56                  <1>     push rsi
   381 00006DBC 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   382                              <1>     ;Start by getting the length of the ASCIIZ string.
   383 00006DBE 51                  <1>     push rcx
   384 00006DBF 57                  <1>     push rdi
   385 00006DC0 4889F7              <1>     mov rdi, rsi
   386 00006DC3 E887FFFFFF          <1>     call strlen
   387 00006DC8 81F940000000        <1>     cmp ecx, 64    ;Check
   388 00006DCE 5F                  <1>     pop rdi
   389 00006DCF 59                  <1>     pop rcx
   390 00006DD0 7770                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   391                              <1>     ;First we verify if our path is relative or canonical (absolute)
   392 00006DD2 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   393 00006DD5 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   394 00006DD9 7416                <1>     je .netName
   395 00006DDB 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   396 00006DDF 7410                <1>     je .netName
   397 00006DE1 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   398 00006DE4 7414                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   399                              <1>     ;Here if relative
   400 00006DE6 F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   401 00006DED 7553                <1>     jnz .badExit    ;If this is -1, server invoke.
   402 00006DEF EB21                <1>     jmp short .okToScan
   403                              <1> .netName:
   404 00006DF1 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   405 00006DF8 EB18                <1>     jmp short .okToScan
   406                              <1> .diskPath:
   407 00006DFA 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   408 00006E01 F605(FD060000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   409 00006E08 7408                <1>     jz .okToScan
   410 00006E0A AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   411 00006E0B E801FFFFFF          <1>     call swapPathSeparator
   412 00006E10 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   413                              <1> .okToScan:
   414 00006E12 AC                  <1>     lodsb   
   415 00006E13 84C0                <1>     test al, al ;End of path char?
   416 00006E15 7430                <1>     jz .exit
   417 00006E17 E8F5FEFFFF          <1>     call swapPathSeparator
   418 00006E1C 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   419 00006E1E 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   420 00006E20 7411                <1>     je .wcFound
   421 00006E22 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   422 00006E24 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   423                              <1>     ;Else we check that the char in al is an acceptable char
   424 00006E26 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   425 00006E28 74E8                <1>     je .okToScan
   426 00006E2A E831000000          <1>     call checkCharValid
   427 00006E2F 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   428 00006E31 EBDF                <1>     jmp short .okToScan
   429                              <1> .wcFound:
   430 00006E33 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   431 00006E38 EBD8                <1>     jmp short .okToScan
   432                              <1> .wcCheck:
   433                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   434 00006E3A F7C340000000        <1>     test ebx, 40h
   435 00006E40 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   436                              <1>     ;Else fall through in error
   437                              <1> .badExit:
   438 00006E42 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   439                              <1> .exit:
   440 00006E47 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   441 00006E48 9D                  <1>     popfq
   442 00006E49 5E                  <1>     pop rsi
   443 00006E4A 5B                  <1>     pop rbx
   444 00006E4B 58                  <1>     pop rax
   445                              <1>     return
    13                              <2> %%_ret:
    14 00006E4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> scanPathWC:
   448                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   449                              <1> ; even in the final path componant.
   450                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   451                              <1> ;Output: CF=NC => No wildcards present
   452                              <1> ;        CF=CY => Wildcards found
   453 00006E4D 50                  <1>     push rax
   454 00006E4E 56                  <1>     push rsi
   455                              <1> .scan:
   456 00006E4F AC                  <1>     lodsb
   457 00006E50 84C0                <1>     test al, al
   458 00006E52 7409                <1>     jz .exit
   459 00006E54 3C3F                <1>     cmp al, "?"
   460 00006E56 7404                <1>     je .wcFnd
   461 00006E58 3C2A                <1>     cmp al, "*"
   462 00006E5A 75F3                <1>     jne .scan
   463                              <1> .wcFnd:
   464 00006E5C F9                  <1>     stc
   465                              <1> .exit:
   466 00006E5D 5E                  <1>     pop rsi
   467 00006E5E 58                  <1>     pop rax
   468                              <1>     return
    13                              <2> %%_ret:
    14 00006E5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> 
   470                              <1> checkCharValid:
   471                              <1> ;If ZF=ZE => Invalid Char
   472                              <1> ;If ZF=NZ => Valid Char
   473 00006E60 51                  <1>     push rcx
   474 00006E61 57                  <1>     push rdi
   475 00006E62 3A05B894FFFF        <1>     cmp al, byte [fileTermTblExt.startBadRange]
   476 00006E68 721B                <1>     jb .setZeroFlag
   477 00006E6A 3A05B194FFFF        <1>     cmp al, byte [fileTermTblExt.endBadRange] 
   478 00006E70 7613                <1>     jbe .setZeroFlag
   479 00006E72 0FB60DAA94FFFF      <1>     movzx ecx, byte [fileTermTbl]
   480 00006E79 488D3DA494FFFF      <1>     lea rdi, fileTermTbl + 1
   481 00006E80 F2AE                <1>     repne scasb
   482                              <1> .exit:
   483 00006E82 5F                  <1>     pop rdi
   484 00006E83 59                  <1>     pop rcx
   485                              <1>     return
    13                              <2> %%_ret:
    14 00006E84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> .setZeroFlag:
   487 00006E85 31C9                <1>     xor ecx, ecx    ;Clear CF too
   488 00006E87 EBF9                <1>     jmp short .exit
   489                              <1> 
   490                              <1> ;checkCharValid:
   491                              <1> ;If ZF=ZE => Invalid Char
   492                              <1> ;If ZF=NZ => Valid Char
   493                              <1>     ;push rcx
   494                              <1>     ;push rdi
   495                              <1>     ;mov ecx, badDirNameCharL    ;Get table length
   496                              <1>     ;lea rdi, badDirNameChar ;Point to bad char table
   497                              <1>     ;repne scasb ;Scan. Stop when equal
   498                              <1>     ;pop rdi
   499                              <1>     ;pop rcx
   500                              <1>     ;return
   501                              <1> 
   502                              <1> 
   503                              <1> skipSpacesAndTabs:
   504                              <1> ;Input: rsi -> String 
   505                              <1> ;Output: rsi -> First non Space or Tab type char
   506 00006E89 AC                  <1>     lodsb
   507 00006E8A E815000000          <1>     call isCharSpaceType
   508 00006E8F 74F8                <1>     jz skipSpacesAndTabs
   509 00006E91 48FFCE              <1>     dec rsi
   510                              <1>     return
    13                              <2> %%_ret:
    14 00006E94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> isCharDelimType:
   513                              <1> ;Input: al = Char to check properties of
   514                              <1> ;Output:    ZF=NZ => Char not name delimiter
   515                              <1> ;           ZF=ZE => Char delimiter
   516 00006E95 50                  <1>     push rax
   517 00006E96 53                  <1>     push rbx
   518 00006E97 488D1DAE95FFFF      <1>     lea rbx, asciiCharProperties
   519 00006E9E D7                  <1>     xlatb
   520 00006E9F A802                <1>     test al, 2
   521 00006EA1 5B                  <1>     pop rbx
   522 00006EA2 58                  <1>     pop rax
   523                              <1>     return
    13                              <2> %%_ret:
    14 00006EA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> isCharSpaceType:
   526                              <1> ;Input: al = Char to check properties of
   527                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   528                              <1> ;           ZF=ZE => Char Space or Tab
   529 00006EA4 50                  <1>     push rax
   530 00006EA5 53                  <1>     push rbx
   531 00006EA6 488D1D9F95FFFF      <1>     lea rbx, asciiCharProperties
   532 00006EAD D7                  <1>     xlatb
   533 00006EAE A804                <1>     test al, 4
   534 00006EB0 5B                  <1>     pop rbx
   535 00006EB1 58                  <1>     pop rax
   536                              <1>     return
    13                              <2> %%_ret:
    14 00006EB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   539                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   540                              <1> ;Input: rsi = One pointer
   541                              <1> ;       rdi = Second pointer
   542                              <1> ;Output: ZF=ZE if equal
   543                              <1> ;        ZF=NZ if not
   544 00006EB3 4839FE              <1>     cmp rsi, rdi
   545                              <1>     return
    13                              <2> %%_ret:
    14 00006EB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1> 
   547                              <1> checkPathNet:
   548                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   549                              <1> ;Output: ZF=ZE => Path is a net path
   550                              <1> ;        ZF=NZ => Path is not a net path
   551 00006EB7 50                  <1>     push rax
   552 00006EB8 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   553 00006EBB E851FEFFFF          <1>     call swapPathSeparator
   554 00006EC0 7505                <1>     jnz .exit
   555 00006EC2 E84AFEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   556                              <1> .exit:
   557 00006EC7 58                  <1>     pop rax
   558                              <1>     return
    13                              <2> %%_ret:
    14 00006EC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> getCharDevDriverPtr:
   561                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   562                              <1> ;Input: rax = Device Driver name (space padded)
   563                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   564 00006EC9 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   565                              <1> .lp:
   566 00006ED0 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   567                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006ED4 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   568 00006ED6 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   569 00006ED9 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   570 00006EE0 75EE                <1>     jne .lp ;If not loop
   571 00006EE2 F9                  <1>     stc ;Else bad exit
   572                              <1>     return
    13                              <2> %%_ret:
    14 00006EE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> getDrvChain: ;Int 4Fh, AX=122Ch
   575                              <1> ;Pointer to the first non-null device driver in the chain.
   576                              <1> ;Returns the value in rax only
   577 00006EE4 488D05(7A000000)    <1>     lea rax, nulDevHdr
   578 00006EEB 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   579                              <1>     return
    13                              <2> %%_ret:
    14 00006EEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getExtErrCde:   ;Int 4Fh, AX=122Dh
   582                              <1> ;Gets the extended error code in ax and returns
   583 00006EEF 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   584                              <1>     return
    13                              <2> %%_ret:
    14 00006EF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                                  %include "./src/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 41h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 00006EF7 FA                  <1>     cli ;Halt external interrupts
    19 00006EF8 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 00006EF9 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 00006EFC 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 00006F02 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 00006F05 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 00006F07 0F847C020000        <1>     je ctrlBreakCheck
    26 00006F0D 80FC64              <1>     cmp ah, 64h
    27 00006F10 0F84BC020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    28 00006F16 7724                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    29 00006F18 80FC51              <1>     cmp ah, 51h
    30 00006F1B 0F849F020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 00006F21 80FC62              <1>     cmp ah, 62h
    32 00006F24 0F849F020000        <1>     je getPSPaddr          ;Calls the above function
    33 00006F2A 80FC50              <1>     cmp ah, 50h
    34 00006F2D 0F8484020000        <1>     je setCurrProcessID
    35 00006F33 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 00006F36 0F849E020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 00006F3C E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 00006F41 48891D(82040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 00006F48 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 00006F50 00                  <1>
    41 00006F51 488B05(7A040000)    <1>     mov rax, qword [oldRSP]
    42 00006F58 488905(6A040000)    <1>     mov qword [oldoldRSP], rax
    43 00006F5F FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 00006F65 488925(7A040000)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 00006F6C C605(FD060000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 00006F73 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 00006F7A 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 00006F7E 58                  <1>     pop rax     ;Get old rax back
    51 00006F7F 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .abortEP:
    53                              <1> .charFun0CEP:
    54                              <1> .serverEP:
    55 00006F80 488D25(080D0000)    <1>     lea rsp, critStakTop
    56 00006F87 FB                  <1>     sti         ;Reenable interrupts
    57                              <1> 
    58 00006F88 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    59 00006F8A 881D(93040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    60 00006F90 C605(94040000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    61 00006F97 881D(69040000)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    62 00006F9D 881D(8A040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    63                              <1> 
    64 00006FA3 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    65 00006FA4 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    66 00006FA6 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    67 00006FA8 488D05A195FFFF      <1>     lea rax, kDispTbl
    68 00006FAF 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    69 00006FB2 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    70 00006FB6 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    71 00006FB9 58                  <1>     pop rax
    72                              <1> 
    73 00006FBA 84E4                <1>     test ah, ah     ;Simple Terminate function?
    74 00006FBC 741C                <1>     jz .fddiskOp
    75 00006FBE 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    76 00006FC1 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    77 00006FC3 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    78 00006FC6 7712                <1>     ja .fddiskOp
    79                              <1> ;Char operations here
    80 00006FC8 F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    81 00006FCF 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    82 00006FD1 488D25(98130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    83 00006FD8 EB40                <1>     jmp short .fdGoToFunction
    84                              <1> .fddiskOp:
    85                              <1>     ;Disk operations go here
    86                              <1>     ;Save rax on entry to a disk funciton
    87 00006FDA 488905(33040000)    <1>     mov qword [oldRAX], rax
    88                              <1>     ;Clear up error info
    89 00006FE1 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    90 00006FE8 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    91 00006FEF C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    92                              <1> 
    93 00006FF6 50                  <1>     push rax
    94 00006FF7 B482                <1>     mov ah, 82h ;Cancel all critical section!
    95 00006FF9 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
    96 00006FFB 58                  <1>     pop rax
    97                              <1> 
    98 00006FFC C605(94040000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
    99 00007003 488D25(D8190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   100 0000700A F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   101 00007011 7407                <1>     jz .fdGoToFunction
   102                              <1> ; HANDLE CTRL+BREAK HERE!
   103 00007013 50                  <1>     push rax
   104 00007014 E8E2B5FFFF          <1>     call checkBreak   ; Check for a ^C
   105 00007019 58                  <1>     pop rax
   106                              <1> .fdGoToFunction:
   107 0000701A 48871D(82040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   108                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   109                              <1>     ;
   110                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   111                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   112                              <1>     ;
   113                              <1>     %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1>     %endif
   119 00007021 FF15(82040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1>     %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1>     %endif
   130                              <1>     %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1>     %endif
   136                              <1> .fdExit:
   137 00007027 FA                  <1>     cli     ;Redisable interrupts
   138 00007028 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 0000702E 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 00007035 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 00007038 488B05(6A040000)    <1>     mov rax, qword [oldoldRSP]
   142 0000703F 488905(7A040000)    <1>     mov qword [oldRSP], rax
   143 00007046 E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 0000704B 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 0000704D 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 0000704F 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 00007051 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 00007057 58                  <1>     pop rax
   152 00007058 5B                  <1>     pop rbx
   153 00007059 59                  <1>     pop rcx
   154 0000705A 5A                  <1>     pop rdx
   155 0000705B 5E                  <1>     pop rsi
   156 0000705C 5F                  <1>     pop rdi
   157 0000705D 5D                  <1>     pop rbp
   158 0000705E 4158                <1>     pop r8
   159 00007060 4159                <1>     pop r9
   160 00007062 FF25(72040000)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 00007068 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 0000706E 4151                <1>     push r9
   164 00007070 4150                <1>     push r8
   165 00007072 55                  <1>     push rbp
   166 00007073 57                  <1>     push rdi
   167 00007074 56                  <1>     push rsi
   168 00007075 52                  <1>     push rdx
   169 00007076 51                  <1>     push rcx
   170 00007077 53                  <1>     push rbx
   171 00007078 50                  <1>     push rax
   172 00007079 FF25(72040000)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 0000707F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 00007080 B801800000          <1>     mov eax, 8001h
   176 00007085 CD4A                <1>     int 4ah
   177 00007087 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 00007088 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 00007089 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 0000708A B801810000          <1>     mov eax, 8101h
   182 0000708F CD4A                <1>     int 4ah
   183 00007091 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00007092 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 00007093 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 00007094 B802800000          <1>     mov eax, 8002h
   188 00007099 CD4A                <1>     int 4ah
   189 0000709B 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 0000709C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 0000709D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 0000709E B802810000          <1>     mov eax, 8102h
   194 000070A3 CD4A                <1>     int 4ah
   195 000070A5 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 000070A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 000070A7 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 000070A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 000070AA E836000000          <1>     call xLatError
   207 000070AF B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 000070B1 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 000070B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 000070B3 E83FFBFFFF          <1>     call getUserRegs
   216 000070B8 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 000070BA EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 000070BC E836FBFFFF          <1>     call getUserRegs
   222 000070C1 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 000070C4 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 000070C8 F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 000070C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 000070CA 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 000070CD E813000000          <1>     call xLatError
   237 000070D2 E891000000          <1>     call checkFail
   238                              <1> .noXlat:
   239 000070D7 E81BFBFFFF          <1>     call getUserRegs
   240 000070DC 668906              <1>     mov word [rsi + callerFrame.rax], ax
   241 000070DF 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   242 000070E3 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   243                              <1>     return
    13                              <2> %%_ret:
    14 000070E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> xLatError:
   245                              <1> ;Translates the error code given in ax and sets error code in the var
   246                              <1> ; Input: ax = Extended Error Code
   247                              <1> ; Output: ax = Potentially translated Error Code
   248                              <1> ;         [errorExCde] = Original Error Code
   249                              <1> ;Preserves all registers except ax
   250                              <1> ;AH is always returned as 0
   251 000070E5 53                  <1>     push rbx
   252 000070E6 51                  <1>     push rcx
   253 000070E7 56                  <1>     push rsi
   254 000070E8 668905(0B040000)    <1>     mov word [errorExCde], ax
   255 000070EF 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   256 000070F1 488D35718FFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   257                              <1> .readEntry:
   258 000070F8 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   259 000070FA 3CFF                <1>     cmp al, -1
   260 000070FC 741F                <1>     je .skipXlat
   261 000070FE 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   262 00007104 7408                <1>     je .found
   263                              <1>     ;Here, entry not found, goto next entry
   264 00007106 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   265 00007109 4801C6              <1>     add rsi, rax    ;Goto next entry
   266 0000710C EBEA                <1>     jmp short .readEntry
   267                              <1> .found:
   268                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   269 0000710E 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   270                              <1> .mainSearch:
   271 00007111 AC                  <1>     lodsb   ;Get one byte into al
   272 00007112 38C3                <1>     cmp bl, al  ;Check against the error code
   273 00007114 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   274 00007116 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   275 00007118 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   276                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   277 0000711A 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   278                              <1> .skipXlat:
   279 0000711D 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   280 0000711F 5E                  <1>     pop rsi
   281 00007120 59                  <1>     pop rcx
   282 00007121 5B                  <1>     pop rbx
   283                              <1>     return
    13                              <2> %%_ret:
    14 00007122 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   285                              <1> ;Looks up the error code in the variable and sets the other error vars
   286                              <1> ;Called with the lookup table in rsi
   287                              <1> ;All regs preserved
   288 00007123 50                  <1>     push rax
   289 00007124 53                  <1>     push rbx
   290 00007125 51                  <1>     push rcx
   291 00007126 56                  <1>     push rsi
   292 00007127 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   293 0000712E B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   294                              <1> .readEntry:
   295 00007133 AD                  <1>     lodsd   ;Read the dword table entry into eax
   296 00007134 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   297 00007139 7428                <1>     je .exit    
   298 0000713B 38D8                <1>     cmp al, bl  ;Compare the error codes
   299 0000713D 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   300 0000713F D3E8                <1>     shr eax, cl
   301 00007141 3CFF                <1>     cmp al, -1
   302 00007143 7406                <1>     je .skipClass
   303 00007145 8805(0E040000)      <1>     mov byte [errorClass], al
   304                              <1> .skipClass:
   305 0000714B D3E8                <1>     shr eax, cl
   306 0000714D 3CFF                <1>     cmp al, -1
   307 0000714F 7406                <1>     je .skipAct
   308 00007151 8805(0D040000)      <1>     mov byte [errorAction], al
   309                              <1> .skipAct:
   310 00007157 D3E8                <1>     shr eax, cl
   311 00007159 3CFF                <1>     cmp al, -1
   312 0000715B 7406                <1>     je .exit
   313 0000715D 8805(0A040000)      <1>     mov byte [errorLocus], al
   314                              <1> .exit:
   315 00007163 5E                  <1>     pop rsi
   316 00007164 59                  <1>     pop rcx
   317 00007165 5B                  <1>     pop rbx
   318 00007166 58                  <1>     pop rax
   319                              <1>     return
    13                              <2> %%_ret:
    14 00007167 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> checkFail:
   321                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   322                              <1> ; and swaps the var error code if so
   323 00007168 803D(69040000)00    <1>     cmp byte [Int44Fail], 0
   324 0000716F 7509                <1>     jnz .skipFail
   325 00007171 66C705(0B040000)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   325 00007179 00                  <1>
   326                              <1> .skipFail:
   327 0000717A 56                  <1>     push rsi
   328 0000717B 488D35838FFFFF      <1>     lea rsi, extErrTbl
   329 00007182 E89CFFFFFF          <1>     call setErrorVars
   330 00007187 5E                  <1>     pop rsi
   331                              <1>     return
    13                              <2> %%_ret:
    14 00007188 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> ;========================================:
   333                              <1> ;      Reentrant Kernel Functions        :
   334                              <1> ;========================================:
   335                              <1> ctrlBreakCheck:    ;ah = 33h
   336 00007189 84C0                <1>     test al, al
   337 0000718B 7508                <1>     jnz .cbcget  ;Get the state or other functions
   338 0000718D 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   339 00007193 48CF                <1>     iretq
   340                              <1> .cbcget:
   341 00007195 3C02                <1>     cmp al, 02h
   342 00007197 771A                <1>     ja .cbcBad
   343 00007199 740D                <1>     jz .cbcxchg ;Function 2
   344 0000719B 52                  <1>     push rdx
   345 0000719C 80E201              <1>     and dl, 1   ;Get only the bottom bit
   346 0000719F 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   347 000071A5 5A                  <1>     pop rdx
   348 000071A6 48CF                <1>     iretq
   349                              <1> .cbcxchg:
   350 000071A8 80E201              <1>     and dl, 1
   351 000071AB 8615(32040000)      <1>     xchg byte [breakFlag], dl
   352 000071B1 48CF                <1>     iretq
   353                              <1> .cbcBad:
   354 000071B3 B0FF                <1>     mov al, -1
   355 000071B5 48CF                <1>     iretq
   356                              <1> 
   357                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   358 000071B7 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   359 000071BE 48CF                <1>     iretq
   360                              <1> 
   361                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   362 000071C0 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   363 000071C7 48CF                <1>     iretq
   364                              <1> 
   365                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   366 000071C9 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   367 000071D0 48CF                <1>     iretq
   368                              <1> 
   369                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   370 000071D2 8805(E1190000)      <1>     mov byte [lookahead], al    
   371 000071D8 48CF                <1>     iretq
   372                              <1> 
   373                              <1> systemServices: ;ah = 61h
   374                              <1> ;All pointers returned in rdx
   375                              <1> ;al = 0 -> Get Environment pointer in rdx
   376                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   377                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   378                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   379                              <1> ;                        Else, rdx -> Filename
   380 000071DA 3C01                <1>     cmp al, 1
   381 000071DC 7453                <1>     je short .getCmdLineArgs
   382 000071DE 3C02                <1>     cmp al, 2
   383 000071E0 760C                <1>     jbe .getEnvPtr
   384 000071E2 B801000000          <1>     mov eax, errInvFnc
   385                              <1> .exitBad:
   386 000071E7 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   387 000071EC 48CF                <1>     iretq
   388                              <1> .getEnvPtr:
   389                              <1>     ;Gets the environment pointer in rdx
   390 000071EE 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   391 000071F5 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   392 000071F9 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   393                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   394                              <1> ; pass the ptr to the word after.
   395 000071FB FA                  <1>     cli
   396 000071FC 51                  <1>     push rcx
   397 000071FD 31C9                <1>     xor ecx, ecx
   398 000071FF B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   399                              <1> .gep0:
   400 00007204 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   401 00007209 740D                <1>     je short .gep1
   402 0000720B 48FFC2              <1>     inc rdx         ;Go to the next byte
   403 0000720E FFC9                <1>     dec ecx
   404 00007210 75F2                <1>     jnz short .gep0
   405                              <1> .gep00:
   406                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   407 00007212 59                  <1>     pop rcx
   408 00007213 FB                  <1>     sti
   409 00007214 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   410 00007216 EBCF                <1>     jmp short .exitBad
   411                              <1> .gep1:
   412 00007218 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   413 0000721F 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   414 00007224 75EC                <1>     jne .gep00
   415 00007226 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   416 0000722D 59                  <1>     pop rcx
   417 0000722E FB                  <1>     sti
   418 0000722F EB0B                <1>     jmp short .exitOk
   419                              <1> .getCmdLineArgs:
   420 00007231 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   421 00007238 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   422                              <1> .exitOk:
   423 0000723C 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   424 00007241 48CF                <1>     iretq
   425                              <1> 
   426                              <1> 
   427                              <1> ;========================================:
   428                              <1> ;            Kernel Functions            :
   429                              <1> ;========================================:
   430                              <1> diskReset:         ;ah = 0Dh
   431                              <1> ;Flush all dirty buffers to disk
   432 00007243 E837FEFFFF          <1>     call dosCrit1Enter
   433 00007248 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   434                              <1> .drCheckBuffer:
   435 0000724F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   436 00007253 7407                <1>     jz .drGotoNextBuffer
   437                              <1> .drFlushBuffer:
   438 00007255 E86E94FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   439 0000725A 720C                <1>     jc .drExit
   440                              <1> .drGotoNextBuffer:
   441 0000725C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   442 0000725F 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   443 00007266 75E7                <1>     jne .drCheckBuffer
   444                              <1> .drExit:
   445 00007268 E81CFEFFFF          <1>     call dosCrit1Exit
   446 0000726D B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   447 00007272 CD4F                <1>     int 4fh
   448                              <1>     return
    13                              <2> %%_ret:
    14 00007274 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> selectDisk:        ;ah = 0Eh
   451                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   452 00007275 88D0                <1>     mov al, dl
   453 00007277 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   454 00007279 E89DF9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   455 0000727E 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   456 00007280 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   457                              <1> .skipSettingCurrent:
   458 00007286 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   459                              <1>     return
    13                              <2> %%_ret:
    14 0000728D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   462 0000728E 8A05(31040000)      <1>     mov al, byte [currentDrv]
   463                              <1>     return
    13                              <2> %%_ret:
    14 00007294 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> FATinfoDefault:    ;ah = 1Bh
   466 00007295 30D2                <1>     xor dl, dl
   467                              <1> FATinfoDevice:     ;ah = 1Ch
   468                              <1> ;Input: dl = 1 based drive number
   469                              <1> ;Output:
   470                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   471                              <1> ;cx = bytes per sector
   472                              <1> ;edx = total number of clusters
   473                              <1> ;rbx = Ptr to media ID byte
   474 00007297 88D0                <1>     mov al, dl  ;Move drive number into al
   475 00007299 E8E6F9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   476 0000729E 7307                <1>     jnc .fidCDSFound
   477 000072A0 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   478 000072A5 EB2E                <1>     jmp short .error 
   479                              <1> .fidCDSFound:
   480 000072A7 E8D9F8FFFF          <1>     call getDiskData
   481 000072AC 7227                <1>     jc .error
   482                              <1> ;Now we have that:
   483                              <1> ;al = sectors per cluster
   484                              <1> ;ah = media ID byte
   485                              <1> ;ebx = total clusters
   486                              <1> ;cx = bytes per sector
   487                              <1> ;edx = number of available clusters
   488 000072AE E844F9FFFF          <1>     call getUserRegs
   489 000072B3 8825(91070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   490 000072B9 30E4                <1>     xor ah, ah
   491 000072BB 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   492 000072BE 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   493 000072C2 488D1D(91070000)    <1>     lea rbx, mediaByte
   494 000072C9 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   495 000072CD 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   496                              <1> .badExit:
   497 000072D1 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   498                              <1>     return
    13                              <2> %%_ret:
    14 000072D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> .error:
   500 000072D5 E8F0FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   501 000072DA 66B8FFFF            <1>     mov ax, -1
   502 000072DE EBF1                <1>     jmp short .badExit
   503                              <1> 
   504                              <1> setIntVector:      ;ah = 25h
   505                              <1> ;Called with:
   506                              <1> ;   rdx = Pointer to interrupt handler
   507                              <1> ;   al = Interrupt number
   508 000072E0 FA                  <1>     cli ;Halt interrupts
   509 000072E1 0F010D(C41A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   510 000072E8 0FB6C0              <1>     movzx eax, al
   511 000072EB 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   512 000072EF 480305(C61A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   513 000072F6 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   514 000072F9 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   515 000072FD 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   516 00007301 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   517 00007305 895008              <1>     mov dword [rax + 8], edx
   518 00007308 FB                  <1>     sti
   519                              <1>     return
    13                              <2> %%_ret:
    14 00007309 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   522 0000730A 8805(D0030000)      <1>     mov byte [verifyFlag], al
   523 00007310 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   524                              <1>     return
    13                              <2> %%_ret:
    14 00007317 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> getDOSversion:     ;ah = 30h
   526 00007318 E8DAF8FFFF          <1>     call getUserRegs
   527 0000731D 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   528 0000731F 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   529 00007322 668B05D78CFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   530 00007329 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   531                              <1>     return
    13                              <2> %%_ret:
    14 0000732C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   534                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   535 0000732D 30D2                <1>     xor dl, dl
   536                              <1> getDeviceDPBptr:   ;ah = 32h
   537                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   538                              <1> ;On exit: rbx = DPB pointer
   539 0000732F 88D0                <1>     mov al, dl
   540 00007331 E84EF9FFFF          <1>     call getCDS
   541 00007336 722C                <1>     jc .bad
   542 00007338 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   543 0000733F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   544 00007345 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   545                              <1>     ;Here ONLY if accessing critical Disk data structures
   546 00007347 E833FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   547 0000734C E8E1F5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   548 00007351 E833FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   549 00007356 720C                <1>     jc .bad
   550 00007358 E89AF8FFFF          <1>     call getUserRegs
   551 0000735D 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   552 00007361 30C0                <1>     xor al, al
   553                              <1>     return
    13                              <2> %%_ret:
    14 00007363 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   554                              <1> .bad:
   555 00007364 B0FF                <1>     mov al, -1
   556                              <1>     return
    13                              <2> %%_ret:
    14 00007366 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> getInDOSflagPtr:   ;ah = 34h
   559 00007367 488D15(08040000)    <1>     lea rdx, inDOS
   560 0000736E E884F8FFFF          <1>     call getUserRegs
   561 00007373 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   562                              <1>     return
    13                              <2> %%_ret:
    14 00007377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> getIntVector:      ;ah = 35h
   565                              <1> ;Called with:
   566                              <1> ;   al = Interrupt Number
   567                              <1> ;Returns:
   568                              <1> ;   rbx = Pointer to interrupt handler
   569 00007378 E84CF8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   570 0000737D E875F8FFFF          <1>     call getUserRegs
   571 00007382 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   572                              <1>     return
    13                              <2> %%_ret:
    14 00007386 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> getDiskFreeSpace:  ;ah = 36h
   575                              <1> ;Input: Drive number in dl (0 = Current)
   576                              <1> ;Output:    ax = sectors per cluster
   577                              <1> ;           ebx = number of free clusters
   578                              <1> ;           cx = bytes per sector
   579                              <1> ;           edx = total clusters on drive
   580 00007387 88D0                <1>     mov al, dl
   581 00007389 E8F6F8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   582 0000738E 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   583                              <1> ;Else, we at an error.
   584                              <1> ;Simply return with CY set and error code in al with extended error info
   585 00007390 B80F000000          <1>     mov eax, errBadDrv
   586 00007395 E830FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   587                              <1>     ;extErrExit sets rsi to caller regs
   588 0000739A 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   589                              <1>     return
    13                              <2> %%_ret:
    14 0000739F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   590                              <1> .gdfsCDSFound:
   591 000073A0 E8E0F7FFFF          <1>     call getDiskData
   592 000073A5 7219                <1>     jc .error
   593                              <1> ;Now we have that:
   594                              <1> ;al = sectors per cluster
   595                              <1> ;ah = media ID byte
   596                              <1> ;ebx = total clusters
   597                              <1> ;cx = bytes per sector
   598                              <1> ;edx = number of available clusters
   599 000073A7 E84BF8FFFF          <1>     call getUserRegs
   600 000073AC 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   601 000073AE 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   602 000073B1 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   603 000073B5 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   604 000073B8 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   605                              <1> .badExit:
   606 000073BC 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   607                              <1>     return
    13                              <2> %%_ret:
    14 000073BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   608                              <1> .error:
   609 000073C0 E805FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   610 000073C5 66B8FFFF            <1>     mov ax, -1
   611 000073C9 EBF1                <1>     jmp short .badExit
   612                              <1> 
   613                              <1> 
   614                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   615 000073CB 31C0                <1>     xor eax, eax
   616 000073CD 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   617 000073D4 E9E3FCFFFF          <1>     jmp extGoodExit
   618                              <1> 
   619                              <1> getSysVarsPtr:     ;ah = 52h
   620 000073D9 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   621 000073E0 E812F8FFFF          <1>     call getUserRegs
   622 000073E5 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   623                              <1>     return
    13                              <2> %%_ret:
    14 000073E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   624                              <1> 
   625                              <1> 
   626                              <1> ;AH = 53h - CREATE DPB
   627                              <1> createDPB:         ;generates a DPB from a given BPB
   628                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   629                              <1> ;This is done so that the other fields of the DPB can be recycled
   630                              <1> ;Input: rsi = ptr to the BPB
   631                              <1> ;       rbp = ptr to the DPB
   632                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   633                              <1> ;bMediaDescriptor
   634 000073EA 8A4615              <1>     mov al, byte [rsi + bpb.media]
   635 000073ED 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   636                              <1> ;dFirstFreeCluster
   637 000073F0 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   638                              <1> ;dNumberOfFreeClusters
   639 000073F7 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   640                              <1> ;wBytesPerSector
   641 000073FE 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   642 00007402 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   643                              <1> ;bMaxSectorInCluster
   644 00007406 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   645 00007409 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   646 0000740B 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   647                              <1> ;bSectorsPerClusterShift
   648 0000740E FEC0                <1>     inc al
   649 00007410 30C9                <1>     xor cl, cl
   650                              <1> .cd2:
   651 00007412 D0E8                <1>     shr al, 1
   652 00007414 7404                <1>     jz .cd3
   653 00007416 FEC1                <1>     inc cl
   654 00007418 EBF8                <1>     jmp short .cd2
   655                              <1> .cd3:
   656 0000741A 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   657                              <1> ;wFAToffset, number of reserved sectors in partition
   658 0000741D 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   659 00007421 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   660                              <1> ;bNumberOfFATs
   661 00007425 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   662 00007428 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   663                              <1> ;wNumberRootDirEntries
   664                              <1> ;Gets the number of 32 byte entries in the root directory
   665                              <1> ;Only valid for FAT 12/16
   666 0000742B 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   667 0000742F 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   668                              <1> ;dFATlength, get the FAT length
   669 00007433 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   670 00007437 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   671 0000743A 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   672 0000743C 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   673 0000743F 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   674                              <1> ;Complex cases below...
   675                              <1> ;dClusterHeapOffset, start sector of the data area
   676 00007442 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   677 00007446 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   678 00007449 85C0                <1>     test eax, eax
   679 0000744B 0F44C3              <1>     cmovz eax, ebx
   680                              <1> ;eax = FATsz
   681 0000744E 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   682 00007452 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   683 00007455 85DB                <1>     test ebx, ebx
   684 00007457 0F44D9              <1>     cmovz ebx, ecx 
   685                              <1> ;ebx = TotSec
   686 0000745A 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   687 0000745D 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   688                              <1> .cd4:
   689 0000745F 01C2                <1>     add edx, eax
   690 00007461 FEC9                <1>     dec cl
   691 00007463 75FA                <1>     jnz .cd4
   692 00007465 89D0                <1>     mov eax, edx    ;Store product in eax
   693 00007467 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   694 0000746B 01D0                <1>     add eax, edx
   695                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   696 0000746D 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   697 00007471 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   698 00007474 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   699 00007478 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   700 00007479 89D0                <1>     mov eax, edx
   701 0000747B 31D2                <1>     xor edx, edx
   702 0000747D F7F1                <1>     div ecx
   703 0000747F 89C2                <1>     mov edx, eax
   704 00007481 58                  <1>     pop rax
   705 00007482 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   706                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   707                              <1>     ;aka eax = Start sector of the data area in volume
   708 00007484 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   709                              <1> ;dClusterCount
   710 00007487 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   711 00007489 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   712 0000748B 31D2                <1>     xor edx, edx
   713 0000748D BB01000000          <1>     mov ebx, 1
   714 00007492 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   715 00007495 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   716 00007497 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   717 00007499 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   718 0000749B 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   719                              <1> ;dFirstUnitOfRootDir
   720 0000749E 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   721 000074A3 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   722 000074A6 770F                <1>     ja .cd5
   723                              <1>     ;Else, we need to find the first sector of the root directory
   724                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   725 000074A8 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   726 000074AC 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   727                              <1> .cd51:
   728 000074B0 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   729 000074B3 FFC9                <1>     dec ecx
   730 000074B5 75F9                <1>     jnz .cd51
   731                              <1> .cd5:
   732 000074B7 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   733 000074BA C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   734                              <1> ;Exit epilogue
   735 000074BE 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   736 000074C5 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   737                              <1>     %if DEBUG && DPBINFO
   738                              <1>     ;Print DPB 
   739                              <1>     debugEnterM
   740                              <1>     push rbp
   741                              <1>     lea rbp, .l0000
   742                              <1>     call debPrintNullString
   743                              <1>     pop rbp
   744                              <1>     call debDPBBPBptr
   745                              <1>     call debMakeDebuggerRespond
   746                              <1>     jmp short .l0001
   747                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   748                              <1> .l0001:
   749                              <1>     debugExitM
   750                              <1>     %endif
   751                              <1>     return
    13                              <2> %%_ret:
    14 000074C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   752                              <1> 
   753                              <1> getVerifySetting:  ;ah = 54h
   754 000074C8 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   755                              <1>     return
    13                              <2> %%_ret:
    14 000074CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   756                              <1> 
   757                              <1> getExtendedError:  ;ah = 59h
   758 000074CF E823F7FFFF          <1>     call getUserRegs
   759 000074D4 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   760 000074DB 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   761 000074E1 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   762 000074E7 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   763 000074ED 668906              <1>     mov word [rsi + callerFrame.rax], ax
   764 000074F0 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   765 000074F4 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   766                              <1> noOp:
   767                              <1>     return
    13                              <2> %%_ret:
    14 000074F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   768                              <1> ;At some point we will implement the below function but that is
   769                              <1> ; a low priority as it is not a DOS 3.3 function. 
   770                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    45                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 000074F8 3C07                <1>     cmp al, 07h
     8 000074FA 7204                <1>     jb .skip
     9 000074FC 3C09                <1>     cmp al, 09h
    10 000074FE 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007500 4889D6              <1>     mov rsi, rdx
    13 00007503 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00007507 66891D(43040000)    <1>     mov word [machineNum], bx
    15 0000750E 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00007512 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00007519 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00007520 53                  <1>     push rbx
    20 00007521 488B1D(8B1A0000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00007528 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00007529 50                  <1>     push rax    ;Push al onto stack as a qword
    23 0000752A E856010000          <1>     call serverFunctionSelect
    24 0000752F B801000000          <1>     mov eax, eLocUnk
    25 00007534 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 0000753A E98BFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 0000753F 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00007540 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00007541 5F                  <1>     pop rdi
    33 00007542 E8B0F6FFFF          <1>     call getUserRegs
    34 00007547 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 0000754A 56                  <1>     push rsi
    36 0000754B B906000000          <1>     mov ecx, 6
    37 00007550 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00007553 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 0000755A 48A5                <1>     movsq   ;Transfer r8...
    40 0000755C 48A5                <1>     movsq   ;... and r9
    41 0000755E 5E                  <1>     pop rsi
    42 0000755F 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00007562 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007566 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 0000756A 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 0000756E 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007572 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007576 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 0000757A 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 0000757E 48891D(82040000)    <1>     mov qword [oldRBX], rbx
    51 00007585 C605(FD060000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 0000758C E9EFF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007591 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007598 66813BCD40          <1>     cmp word [rbx], 40CDh
    61 0000759D 740A                <1>     je .validTask
    62 0000759F B805000000          <1>     mov eax, errAccDen
    63 000075A4 E921FBFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 000075A9 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 000075AB E8CFFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 000075B0 53                  <1>     push rbx
    70 000075B1 E822D5FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 000075B6 7227                <1>     jc .exit
    72 000075B8 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 000075BD 741B                <1>     je .gotoNextFile
    74 000075BF 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 000075C4 7414                <1>     je .gotoNextFile
    76 000075C6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 000075CC 750C                <1>     jnz .gotoNextFile
    78 000075CE 48893D(2D070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 000075D5 E893C2FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 000075DA 5B                  <1>     pop rbx
    83 000075DB FFC3                <1>     inc ebx
    84 000075DD EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 000075DF E8A5FAFFFF          <1>     call dosCrit1Exit
    87 000075E4 5B                  <1>     pop rbx ;Align stack
    88 000075E5 E9D2FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 000075EA FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 000075F0 0F82D4FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 000075F6 E9C1FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 000075FB FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007601 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007603 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 00007609 EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 0000760B FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007611 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007613 E8DFF5FFFF          <1>     call getUserRegs
   110 00007618 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 0000761C 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007620 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007624 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007626 488D3D(07040000)    <1>     lea rdi, sda
   124 0000762D 48B984160000000000- <1>     mov rcx, sdaLen
   124 00007636 00                  <1>
   125 00007637 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007640 00                  <1>
   126 00007641 E8B1F5FFFF          <1>     call getUserRegs
   127 00007646 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 0000764A 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 0000764E EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007650 50                  <1>     push rax
   133 00007651 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007656 CD4F                <1>     int 4Fh
   135 00007658 5B                  <1>     pop rbx
   136 00007659 7295                <1>     jc short closeFilesByName.shareExitBad
   137 0000765B EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 0000765D 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 0000765F 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007666 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   145 0000766A 488905(0F040000)    <1>     mov qword [xInt44RDI], rax
   146 00007671 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007674 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 0000767B 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 0000767E 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007684 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007685 55                  <1>     push rbp
   156 00007686 4889E5              <1>     mov rbp, rsp
   157 00007689 53                  <1>     push rbx
   158 0000768A 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 0000768E 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007691 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007694 7621                <1>     jbe short .argumentTooBig
   162 00007696 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 0000769A D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 0000769C FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 0000769E 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 000076A2 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 000076A5 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 000076A9 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 000076AD 5B                  <1>     pop rbx
   170 000076AE 5D                  <1>     pop rbp
   171 000076AF 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 000076B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 000076B7 5B                  <1>     pop rbx
   175 000076B8 5D                  <1>     pop rbp
   176 000076B9 C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 000076BC 3C01                <1>     cmp al, 01
   181 000076BE 7214                <1>     jb .getName
   182 000076C0 7437                <1>     jz .setName
   183 000076C2 3C06                <1>     cmp al, 6
   184 000076C4 724C                <1>     jb .netRedir
   185 000076C6 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 000076CD B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 000076CF E9F6F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 000076D4 4889D7              <1>     mov rdi, rdx
   198 000076D7 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 000076DE E814F5FFFF          <1>     call getUserRegs
   200 000076E3 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 000076E7 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 000076EE 31C0                <1>     xor eax, eax
   204 000076F0 48A5                <1>     movsq
   205 000076F2 A5                  <1>     movsd
   206 000076F3 66A5                <1>     movsw
   207 000076F5 A4                  <1>     movsb
   208 000076F6 AA                  <1>     stosb   ;Store terminating null
   209 000076F7 EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 000076F9 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007700 4889D6              <1>     mov rsi, rdx
   217 00007703 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 00007709 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00007710 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007712 50                  <1>     push rax
   223 00007713 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 00007718 CD4F                <1>     int 4Fh
   225 0000771A 5A                  <1>     pop rdx
   226 0000771B 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 0000771D E99AF9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 00007722 80FC07              <1>     cmp ah, 07h
   233 00007725 7419                <1>     je .driveAction
   234 00007727 80FC08              <1>     cmp ah, 08h
   235 0000772A 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 0000772C 50                  <1>     push rax
   238 0000772D B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00007732 CD4F                <1>     int 4Fh
   240 00007734 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00007735 0F828FF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 0000773B E97CF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00007740 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00007742 E898F5FFFF          <1>     call getCDSforDrive
   249 00007747 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00007749 80EA07              <1>     sub dl, 7
   252 0000774C 7408                <1>     jz .enable
   253 0000774E 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00007754 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00007756 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 0000775C EBDD                <1>     jmp short .goodExit
    46                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    21 0000775E 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00007761 7411                <1>     je .installCheck
    23 00007763 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007766 740C                <1>     je .installCheck
    25 00007768 80FC12              <1>     cmp ah, 12h
    26 0000776B 741E                <1>     je .goMplx
    27 0000776D 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007770 7402                <1>     je .installCheck
    29 00007772 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007774 84C0                <1>     test al, al
    38 00007776 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007778 B801000000          <1>     mov eax, errInvFnc
    41 0000777D C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007784 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007789 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 0000778B 3C2E                <1>     cmp al, mDispTblL / 2
    48 0000778D 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50 0000778F 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    51 00007790 53                  <1>     push rbx    ;Storage for DOS function
    52 00007791 53                  <1>     push rbx    ;Stores rbx value
    53 00007792 488D1D30000000      <1>     lea rbx, .retAddr
    54 00007799 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    55                              <1> 
    56 0000779E 51                  <1>     push rcx
    57 0000779F 488D1D7C8EFFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    58 000077A6 53                  <1>     push rbx
    59 000077A7 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    60 000077AA 488B442450          <1>     mov rax, qword [rsp + 10*8]  ;Pick the word pushed on the stack before call 
    61 000077AF D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 000077B1 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 000077B4 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 000077B8 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 000077B9 4801CB              <1>     add rbx, rcx
    66 000077BC 59                  <1>     pop rcx
    67 000077BD 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 000077C2 5B                  <1>     pop rbx
    69 000077C3 488B442438          <1>     mov rax, qword [rsp + 7*8]  ;Get qword that may be passed on stack
    70                              <1>     return
    13                              <2> %%_ret:
    14 000077C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    71                              <1> 
    72                              <1> .retAddr:
    73 000077C9 53                  <1>     push rbx
    74 000077CA 9C                  <1>     pushfq
    75 000077CB 5B                  <1>     pop rbx
    76 000077CC 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    77 000077D1 5B                  <1>     pop rbx
    78 000077D2 48CF                <1>     iretq
    79                              <1> 
    80                              <1> multiplexTest:
    81 000077D4 B0FF                <1>     mov al, -1
    82 000077D6 C3                  <1>     ret
    83                              <1> 
    84                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    85                              <1> ;Return: r8 = Dos Data Segment Pointer
    86 000077D7 4C8D05(00000000)    <1>     lea r8, dosDataArea
    87                              <1>     return
    13                              <2> %%_ret:
    14 000077DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> mpxOpen:   ;Int 4Fh, AX=1226h, Open File
    90                              <1> ;Input: cl = open mode
    91                              <1> ;       rdx -> Ptr to filename to open
    92                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    93 000077DF 88C8                <1>     mov al, cl
    94 000077E1 E881B8FFFF          <1>     call openFileHdl
    95                              <1>     return
    13                              <2> %%_ret:
    14 000077E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    96                              <1> 
    97                              <1> mpxLseek:  ;Int 4Fh, AX=1228h, LSEEK
    98                              <1> ;Input:  
    99                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   100                              <1> ;   ebx = Handle to move (lower word only)
   101                              <1> ;   ecx = Number of bytes to move
   102                              <1> ;   edx = 0 (upper dword, reserved for now)
   103                              <1> ;Return:
   104                              <1> ;   eax = New pointer location
   105                              <1> ;   edx = 0
   106 000077E7 FF35(7A040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   107 000077ED 488D05(CE1A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   108 000077F4 488905(7A040000)    <1>     mov qword [oldRSP], rax
   109 000077FB 89E8                <1>     mov eax, ebp
   110 000077FD E87ABAFFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   111 00007802 8F05(7A040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   112                              <1>     return
    13                              <2> %%_ret:
    14 00007808 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> mpxIOCTL:  ;Int 4Fh, AX=122Bh
   115                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   116                              <1> ; low byte of bp.
   117 00007809 FF35(7A040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   118 0000780F 488D05(CE1A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   119 00007816 488905(7A040000)    <1>     mov qword [oldRSP], rax
   120 0000781D 89E8                <1>     mov eax, ebp
   121 0000781F E871D3FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   122 00007824 8F05(7A040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   123                              <1>     return  
    13                              <2> %%_ret:
    14 0000782A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    47                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 0000782B B801000000          <1>     mov eax, errInvFnc
     6 00007830 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007837 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007838 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007839 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 0000783E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 0000783F F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007840 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007841 FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007847 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007848 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 0000784E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 0000784F 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007856 53                  <1>     push rbx
    34 00007857 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 0000785D 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000785E 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007860 E806000000          <1>     call shareRetryCountdown
    38 00007865 FFCB                <1>     dec ebx
    39 00007867 75ED                <1>     jnz .mainLoop
    40 00007869 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 0000786A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 0000786B F605(FD060000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007872 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007874 51                  <1>     push rcx
    49 00007875 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 0000787C 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 0000787F 51                  <1>     push rcx
    53 00007880 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007882 66FFC9              <1>     dec cx
    56 00007885 75FB                <1>     jnz .mainLoop
    57 00007887 59                  <1>     pop rcx
    58 00007888 FFC9                <1>     dec ecx
    59 0000788A 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 0000788C 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 0000788D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 0000788E 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007894 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007896 50                  <1>     push rax
    69 00007897 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 0000789B 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 000078A0 58                  <1>     pop rax
    72 000078A1 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 000078A3 E83B000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000078A8 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 000078AA B820000000          <1>     mov eax, errShrVio
    78 000078AF F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 000078B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87 000078B1 51                  <1>     push rcx
    88                              <1> .reloadCounter:
    89 000078B2 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    90                              <1> .keepLooping:
    91 000078B9 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
    92 000078C0 31C0                <1>     xor eax, eax
    93 000078C2 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    94 000078C8 51                  <1>     push rcx
    95 000078C9 E873FFFFFF          <1>     call openShareCallWrapper
    96 000078CE 59                  <1>     pop rcx
    97 000078CF 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    98 000078D1 E895FFFFFF          <1>     call shareRetryCountdown
    99 000078D6 FFC9                <1>     dec ecx
   100 000078D8 75DF                <1>     jnz .keepLooping
   101 000078DA E827000000          <1>     call shareCriticalError
   102 000078DF 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   103                              <1> .exit:
   104 000078E1 59                  <1>     pop rcx
   105                              <1>     return
    13                              <2> %%_ret:
    14 000078E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareLockViolationCriticalError:
   108                              <1> ;This does NOT force rwFlag to 0.
   109 000078E3 57                  <1>     push rdi
   110 000078E4 C605(67040000)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   111 000078EB B821000000          <1>     mov eax, errLokVio
   112 000078F0 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   113                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   114 000078F7 E8E0E8FFFF          <1>     call fullcriticalErrorInvoke
   115 000078FC 5F                  <1>     pop rdi
   116 000078FD 3D01000000          <1>     cmp eax, critRetry
   117                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007902 74DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   118 00007904 F9                  <1>     stc
   119                              <1>     return
    13                              <2> %%_ret:
    14 00007905 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   122                              <1> ;Used for share Read/Write requests
   123 00007906 57                  <1>     push rdi
   124 00007907 C605(FB060000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   125 0000790E C605(67040000)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   126 00007915 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   127 0000791C BF01000000          <1>     mov edi, 1
   128                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   129 00007921 E8B6E8FFFF          <1>     call fullcriticalErrorInvoke
   130 00007926 5F                  <1>     pop rdi
   131 00007927 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007929 74DA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 0000792B F9                  <1>     stc
   134                              <1>     return
    13                              <2> %%_ret:
    14 0000792C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> shareReadWriteViolationError:
   137                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   138 0000792D 3C0F                <1>     cmp al, drvBadDskChnge
   139 0000792F 7510                <1>     jne .doReq
   140 00007931 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   141 00007932 488B05(E2040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   142 00007939 488905(0F040000)    <1>     mov qword [xInt44RDI], rax
   143 00007940 58                  <1>     pop rax
   144                              <1> .doReq:
   145 00007941 E896E8FFFF          <1>     call fullcriticalErrorInvoke
   146                              <1>     return
    13                              <2> %%_ret:
    14 00007946 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> shareCheckWriteLockViolation:
   149 00007947 C605(FB060000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   150 0000794E EB07                <1>     jmp short shareCheckReadLockViolation.common
   151                              <1> shareCheckReadLockViolation:
   152 00007950 C605(FB060000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   153                              <1> .common:
   154                              <1> ;Input:
   155                              <1> ;rdi -> SFT for the file we are reading
   156 00007957 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   157 0000795D 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   158 0000795F 50                  <1>     push rax
   159 00007960 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   160 00007964 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   161 00007969 58                  <1>     pop rax
   162 0000796A 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   163                              <1> .fcbQuirk:
   164 0000796C E872FFFFFF          <1>     call shareLockViolationCriticalError
   165                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007971 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   166                              <1> .notInCompatMode:
   167 00007973 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   168 00007975 B821000000          <1>     mov eax, errLokVio
   169 0000797A F9                  <1>     stc ;Set the flag for error
   170                              <1>     return
    13                              <2> %%_ret:
    14 0000797B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  ;These driver files are to be written by an OEM.
    49                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 0000797C [9E79000000000000]  <1>     dq auxHdr
     7 00007984 1380                <1>     dw 08013h
     8 00007986 [1C7B000000000000]  <1>     dq commonStrat
     9 0000798E [247B000000000000]  <1>     dq conDriver
    10 00007996 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 0000799E [C079000000000000]  <1>     dq prnHdr
    13 000079A6 0080                <1>     dw 08000h
    14 000079A8 [1C7B000000000000]  <1>     dq commonStrat
    15 000079B0 [197E000000000000]  <1>     dq com1Intr
    16 000079B8 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 000079C0 [E279000000000000]  <1>     dq clkHdr
    19 000079C8 40A0                <1>     dw 0A040h
    20 000079CA [D267000000000000]  <1>     dq nulStrat
    21 000079D2 [D867000000000000]  <1>     dq nulIntr
    22 000079DA 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 000079E2 [047A000000000000]  <1>     dq msdHdr
    25 000079EA 0880                <1>     dw 08008h
    26 000079EC [1C7B000000000000]  <1>     dq commonStrat
    27 000079F4 [8F7C000000000000]  <1>     dq clkDriver
    28 000079FC 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00007A04 [267A000000000000]  <1>     dq com1Hdr
    31 00007A0C 4008                <1>     dw 00840h   
    32 00007A0E [1C7B000000000000]  <1>     dq commonStrat
    33 00007A16 [A17F000000000000]  <1>     dq msdDriver
    34 00007A1E 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 00007A26 [487A000000000000]  <1>     dq com2Hdr
    37 00007A2E 0080                <1>     dw 08000h
    38 00007A30 [1C7B000000000000]  <1>     dq commonStrat
    39 00007A38 [197E000000000000]  <1>     dq com1Intr
    40 00007A40 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 00007A48 [6A7A000000000000]  <1>     dq com3Hdr
    43 00007A50 0080                <1>     dw 08000h
    44 00007A52 [1C7B000000000000]  <1>     dq commonStrat
    45 00007A5A [227E000000000000]  <1>     dq com2Intr
    46 00007A62 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 00007A6A [8C7A000000000000]  <1>     dq com4Hdr
    49 00007A72 0080                <1>     dw 08000h
    50 00007A74 [1C7B000000000000]  <1>     dq commonStrat
    51 00007A7C [2B7E000000000000]  <1>     dq com3Intr
    52 00007A84 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00007A8C [AE7A000000000000]  <1>     dq lpt1Hdr
    55 00007A94 0080                <1>     dw 08000h
    56 00007A96 [1C7B000000000000]  <1>     dq commonStrat
    57 00007A9E [347E000000000000]  <1>     dq com4Intr
    58 00007AA6 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00007AAE [D07A000000000000]  <1>     dq lpt2Hdr
    61 00007AB6 40A0                <1>     dw 0A040h
    62 00007AB8 [D267000000000000]  <1>     dq nulStrat
    63 00007AC0 [D867000000000000]  <1>     dq nulIntr
    64 00007AC8 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007AD0 [F27A000000000000]  <1>     dq lpt3Hdr
    67 00007AD8 40A0                <1>     dw 0A040h
    68 00007ADA [D267000000000000]  <1>     dq nulStrat
    69 00007AE2 [D867000000000000]  <1>     dq nulIntr
    70 00007AEA 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00007AF2 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 00007AFA 40A0                <1>     dw 0A040h
    74 00007AFC [D267000000000000]  <1>     dq nulStrat
    75 00007B04 [D867000000000000]  <1>     dq nulIntr
    76 00007B0C 4C50543320202020    <1>     dq "LPT3    "
    77 00007B14 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    50                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00007B1C 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 00007B23 C3                  <1>     ret
     5                              <1> conDriver:
     6 00007B24 50                  <1>     push rax
     7 00007B25 53                  <1>     push rbx
     8 00007B26 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 00007B2D B003                <1>     mov al, 03h ;Unknown Command
    10 00007B2F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 00007B33 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00007B35 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 00007B38 84C0                <1>     test al, al
    15 00007B3A 7445                <1>     jz .conInit
    16 00007B3C 3C04                <1>     cmp al, 4
    17 00007B3E 745B                <1>     jz .conRead
    18 00007B40 3C05                <1>     cmp al, 5
    19 00007B42 0F8499000000        <1>     jz .conNondestructiveRead
    20 00007B48 3C06                <1>     cmp al, 6
    21 00007B4A 0F84C2000000        <1>     jz .conInputStatus
    22 00007B50 3C07                <1>     cmp al, 7
    23 00007B52 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 00007B58 3C08                <1>     cmp al, 8
    25 00007B5A 0F84E4000000        <1>     jz .conWrite
    26 00007B60 3C09                <1>     cmp al, 9
    27 00007B62 0F84DC000000        <1>     jz .conWrite
    28 00007B68 3C0A                <1>     cmp al, 0Ah
    29 00007B6A 0F84FD000000        <1>     jz .conOutputStatus
    30 00007B70 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00007B72 B480                <1>     mov ah, 80h ;Set error bit
    33 00007B74 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 00007B78 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 00007B7E 5B                  <1>     pop rbx
    37 00007B7F 58                  <1>     pop rax
    38 00007B80 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00007B81 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00007B83 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 00007B8A 75EC                <1>     jnz short .conExit
    43 00007B8C E8F60B0000          <1>     call conInit
    44 00007B91 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 00007B98 EBDE                <1>     jmp short .conExit
    46 00007B9A 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 00007B9B B005                <1>     mov al, 05h ;Bad request structure length?
    50 00007B9D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 00007BA0 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00007BA2 57                  <1>     push rdi
    54 00007BA3 51                  <1>     push rcx
    55 00007BA4 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 00007BA8 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 00007BAA 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00007BAD 741C                <1>     je .cre2
    60 00007BAF 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 00007BB6 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 00007BB8 31C0                <1>     xor eax, eax
    63 00007BBA CD36                <1>     int 36h
    64                              <1> .cre11:
    65 00007BBC AA                  <1>     stosb
    66 00007BBD 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 00007BBF 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 00007BC1 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 00007BC7 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 00007BC9 EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 00007BCB 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 00007BCE 59                  <1>     pop rcx
    75 00007BCF 5F                  <1>     pop rdi
    76 00007BD0 EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 00007BD2 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 00007BD8 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00007BDF EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00007BE1 B005                <1>     mov al, 05h ;Bad request structure length?
    84 00007BE3 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 00007BE6 758A                <1>     jne .conWriteErrorCode
    86 00007BE8 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00007BEF 7519                <1>     jnz .cnr2
    88 00007BF1 B401                <1>     mov ah, 01h     ;Get key if exists
    89 00007BF3 CD36                <1>     int 36h
    90 00007BF5 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 00007BF7 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 00007BFA E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00007BFF 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 00007C05 E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 00007C0A 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00007C10 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 00007C12 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00007C14 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 00007C17 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 00007C1D E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 00007C22 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00007C24 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 00007C27 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00007C2D C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 00007C34 B401                <1>     mov ah, 01      ;Get buffer status
   115 00007C36 CD36                <1>     int 36h
   116 00007C38 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 00007C3E 30E4                <1>     xor ah, ah
   118 00007C40 CD36                <1>     int 36h ;Read key to flush from buffer
   119 00007C42 EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 00007C44 B005                <1>     mov al, 05h ;Bad request structure length?
   123 00007C46 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 00007C49 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 00007C4F 56                  <1>     push rsi
   127 00007C50 51                  <1>     push rcx
   128 00007C51 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 00007C55 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 00007C57 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 00007C5A 7407                <1>     je .cw2
   133 00007C5C AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 00007C5D CD49                <1>     int 49h ;Fast print char
   135 00007C5F FFC1                <1>     inc ecx
   136 00007C61 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 00007C63 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 00007C66 59                  <1>     pop rcx
   140 00007C67 5E                  <1>     pop rsi
   141 00007C68 E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 00007C6D B005                <1>     mov al, 05h ;Bad request structure length?
   144 00007C6F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 00007C72 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 00007C78 E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 00007C7D 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 49h
   150                              <1> ;Called with char to transfer in al
   151 00007C7E 50                  <1>     push rax
   152 00007C7F B40E                <1>     mov ah, 0Eh
   153 00007C81 CD30                <1>     int 30h
   154 00007C83 58                  <1>     pop rax
   155 00007C84 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 00007C86 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 00007C8D 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 00007C8F 50                  <1>     push rax
   163 00007C90 53                  <1>     push rbx
   164 00007C91 51                  <1>     push rcx
   165 00007C92 52                  <1>     push rdx
   166 00007C93 56                  <1>     push rsi
   167 00007C94 55                  <1>     push rbp
   168 00007C95 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 00007C9C B003                <1>     mov al, 03h ;Unknown Command
   170 00007C9E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 00007CA2 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 00007CA4 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 00007CA7 84C0                <1>     test al, al
   175 00007CA9 743B                <1>     jz .clkInit
   176 00007CAB 3C04                <1>     cmp al, 04h
   177 00007CAD 7451                <1>     jz .clkRead
   178 00007CAF 3C06                <1>     cmp al, 06h
   179 00007CB1 0F84AE000000        <1>     jz .clkInputStatus
   180 00007CB7 3C07                <1>     cmp al, 07h
   181 00007CB9 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 00007CBF 3C08                <1>     cmp al, 08h
   183 00007CC1 0F84BE000000        <1>     jz .clkWrite
   184 00007CC7 3C09                <1>     cmp al, 09h
   185 00007CC9 0F84B6000000        <1>     jz .clkWrite
   186 00007CCF EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 00007CD1 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 00007CD3 B480                <1>     mov ah, 80h ;Set error bit
   191 00007CD5 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 00007CD9 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00007CDF 5D                  <1>     pop rbp
   195 00007CE0 5E                  <1>     pop rsi
   196 00007CE1 5A                  <1>     pop rdx
   197 00007CE2 59                  <1>     pop rcx
   198 00007CE3 5B                  <1>     pop rbx
   199 00007CE4 58                  <1>     pop rax
   200 00007CE5 C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 00007CE6 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 00007CE8 F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00007CEF 75E8                <1>     jnz short .clkExit
   205 00007CF1 E8F20A0000          <1>     call clockInit
   206 00007CF6 C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00007CFD EBDA                <1>     jmp short .clkExit
   208 00007CFF 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00007D00 B005                <1>     mov al, 05h ;Bad request structure length?
   212 00007D02 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 00007D05 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 00007D07 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 00007D0A 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00007D0E 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 00007D15 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 00007D19 30E4                <1>     xor ah, ah
   220 00007D1B CD3A                <1>     int 3Ah         ;Read the system timer
   221 00007D1D 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 00007D1F 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00007D21 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 00007D23 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 00007D27 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 00007D2E 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00007D31 0FB7D2              <1>     movzx edx, dx
   230 00007D34 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 00007D36 89D0                <1>     mov eax, edx
   232 00007D38 31D2                <1>     xor edx, edx
   233 00007D3A 89D8                <1>     mov eax, ebx
   234 00007D3C B944040000          <1>     mov ecx, 1092   
   235 00007D41 F7F1                <1>     div ecx
   236 00007D43 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 00007D46 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 00007D48 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 00007D4C 31D2                <1>     xor edx, edx
   240 00007D4E B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 00007D53 F7F1                <1>     div ecx
   242 00007D55 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 00007D58 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 00007D5A 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 00007D5D 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 00007D60 E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 00007D65 B005                <1>     mov al, 05h ;Bad request structure length?
   253 00007D67 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 00007D6A 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 00007D70 E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 00007D75 B005                <1>     mov al, 05h ;Bad request structure length?
   259 00007D77 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 00007D7A 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 00007D80 E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 00007D85 B005                <1>     mov al, 05h ;Bad request structure length?
   265 00007D87 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 00007D8A 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 00007D90 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 00007D93 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 00007D97 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 00007D9B 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 00007DA2 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 00007DA4 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 00007DA8 B105                <1>     mov cl, 5
   276 00007DAA F6F1                <1>     div cl          ;Divide al by 5
   277 00007DAC 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 00007DAE 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 00007DB0 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 00007DB3 B912000000          <1>     mov ecx, 18
   283 00007DB8 F7E1                <1>     mul ecx  
   284 00007DBA 01C3                <1>     add ebx, eax
   285                              <1> 
   286 00007DBC 31D2                <1>     xor edx, edx
   287 00007DBE 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 00007DC2 B944040000          <1>     mov ecx, 1092
   289 00007DC7 F7E1                <1>     mul ecx
   290 00007DC9 01C3                <1>     add ebx, eax
   291 00007DCB 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 00007DCD 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 00007DD1 B401                <1>     mov ah, 01h     ;Set the system time
   294 00007DD3 CD3A                <1>     int 3Ah
   295                              <1> 
   296 00007DD5 4889F3              <1>     mov rbx, rsi
   297 00007DD8 E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00007DDD 51                  <1>     push rcx
   303 00007DDE 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00007DE1 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00007DE3 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 00007DE8 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00007DEE C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 00007DF1 050A000000          <1>     add eax, 10
   310 00007DF6 E2F9                <1>     loop .cbth0
   311 00007DF8 59                  <1>     pop rcx
   312 00007DF9 C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 00007DFA 51                  <1>     push rcx
   318 00007DFB 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00007DFE 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 00007E00 3D0A000000          <1>     cmp eax, 10
   322 00007E05 7209                <1>     jb .chtb1
   323 00007E07 2D0A000000          <1>     sub eax, 10
   324 00007E0C FFC1                <1>     inc ecx
   325 00007E0E EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 00007E10 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00007E13 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00007E15 59                  <1>     pop rcx
   330 00007E16 C3                  <1>     ret
   331 00007E17 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 00007E19 C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 00007E20 EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 00007E22 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 00007E29 EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 00007E2B C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 00007E32 EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 00007E34 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 00007E3B 50                  <1>     push rax
   347 00007E3C 53                  <1>     push rbx
   348 00007E3D 51                  <1>     push rcx
   349 00007E3E 52                  <1>     push rdx
   350 00007E3F 56                  <1>     push rsi
   351 00007E40 57                  <1>     push rdi
   352 00007E41 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 00007E48 B003                <1>     mov al, 03h ;Unknown Command
   354 00007E4A 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 00007E4E 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 00007E50 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 00007E53 84C0                <1>     test al, al
   359 00007E55 745B                <1>     jz short .comExit
   360 00007E57 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 00007E59 7464                <1>     jz .comRead
   362 00007E5B 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 00007E5D 0F849D000000        <1>     jz .comNondestructiveRead   
   364 00007E63 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 00007E65 0F8486000000        <1>     jz .comReadInputStatus
   366 00007E6B 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 00007E6D 0F849C000000        <1>     jz .comFlushInputBuffers
   368 00007E73 3C08                <1>     cmp al, 8
   369 00007E75 0F84BA000000        <1>     jz .comWrite
   370 00007E7B 3C09                <1>     cmp al, 9
   371 00007E7D 0F84B2000000        <1>     jz .comWrite
   372 00007E83 3C0A                <1>     cmp al, 0Ah
   373 00007E85 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 00007E8B EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 00007E8D B002                <1>     mov al, 02h ;Unknown device
   377 00007E8F EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 00007E91 BA0B000000          <1>     mov edx, 0Bh
   380 00007E96 EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 00007E98 BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 00007E9D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 00007EA0 B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 00007EA5 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 00007EA7 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 00007EAA 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 00007EAC B480                <1>     mov ah, 80h ;Set error bit
   391 00007EAE 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 00007EB2 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 00007EB8 5F                  <1>     pop rdi
   395 00007EB9 5E                  <1>     pop rsi
   396 00007EBA 5A                  <1>     pop rdx
   397 00007EBB 59                  <1>     pop rcx
   398 00007EBC 5B                  <1>     pop rbx
   399 00007EBD 58                  <1>     pop rax
   400 00007EBE C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 00007EBF B005                <1>     mov al, 05h ;Bad request structure length?
   404 00007EC1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 00007EC4 75E6                <1>     jne .comWriteErrorCode
   406 00007EC6 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 00007ECA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 00007ECC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 00007ECF 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 00007ED1 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 00007ED6 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 00007EDD F8                  <1>     clc
   415 00007EDE CD34                <1>     int 34h ;Recieve Char
   416 00007EE0 72BB                <1>     jc .comError
   417 00007EE2 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 00007EE5 74EA                <1>     je .cr11
   419 00007EE7 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 00007EE8 FFC1                <1>     inc ecx
   421 00007EEA EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 00007EEC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 00007EEF EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 00007EF1 B005                <1>     mov al, 05h ;Bad request structure length?
   428 00007EF3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 00007EF6 75B4                <1>     jne .comWriteErrorCode
   430 00007EF8 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 00007EFE EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 00007F00 B005                <1>     mov al, 05h ;Bad request structure length?
   436 00007F02 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 00007F05 75A5                <1>     jne .comWriteErrorCode
   438 00007F07 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 00007F0D EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 00007F0F B005                <1>     mov al, 05h ;Bad request structure length?
   443 00007F11 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 00007F14 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 00007F16 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 00007F1D B800020000          <1>     mov eax, 0200h    ;Recieve
   448 00007F22 F8                  <1>     clc
   449 00007F23 CD34                <1>     int 34h
   450 00007F25 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 00007F2B 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 00007F2E 75E6                <1>     jne .cfib0
   453 00007F30 E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 00007F35 B005                <1>     mov al, 05h ;Bad request structure length?
   457 00007F37 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 00007F3A 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 00007F40 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 00007F44 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 00007F46 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 00007F49 7417                <1>     je .cw2
   465 00007F4B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 00007F4C B401                <1>     mov ah, 01h ;Move function number into ah
   467 00007F4E 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 00007F55 F8                  <1>     clc
   469 00007F56 CD34                <1>     int 34h ;Transmit char
   470 00007F58 0F823FFFFFFF        <1>     jc .comError
   471 00007F5E FFC1                <1>     inc ecx
   472 00007F60 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 00007F62 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 00007F65 E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 00007F6A B005                <1>     mov al, 05h ;Bad request structure length?
   480 00007F6C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 00007F6F 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 00007F75 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 00007F7C B403                <1>     mov ah, 03h     ;Get status
   485 00007F7E F8                  <1>     clc
   486 00007F7F CD34                <1>     int 34h
   487 00007F81 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 00007F87 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 00007F8C C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 00007F8F F7D0                <1>     not eax      ;Bitwise inversion
   491 00007F91 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 00007F96 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 00007F9B E912FFFFFF          <1>     jmp .comExit
   494 00007FA0 00                  <1> .comDevice   db 0
    51                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 00007FA1 50                  <1>     push rax
     3 00007FA2 53                  <1>     push rbx
     4 00007FA3 51                  <1>     push rcx
     5 00007FA4 52                  <1>     push rdx
     6 00007FA5 56                  <1>     push rsi
     7 00007FA6 57                  <1>     push rdi
     8 00007FA7 55                  <1>     push rbp
     9 00007FA8 4150                <1>     push r8
    10 00007FAA 488B1D63FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 00007FB1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 00007FB5 B003                <1>     mov al, drvBadCmd
    13 00007FB7 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 00007FBD B001                <1>     mov al, drvBadUnit 
    15 00007FBF 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 00007FC3 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 00007FC9 488D358B040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 00007FD0 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 00007FD4 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 00007FD7 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 00007FDB 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00007FDF D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00007FE1 488D0DA1000000      <1>     lea rcx, .msdTable
    24 00007FE8 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 00007FEC 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 00007FEE 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 00007FF0 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 00007FF3 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 00007FF5 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 00007FFB 4158                <1>     pop r8
    32 00007FFD 5D                  <1>     pop rbp
    33 00007FFE 5F                  <1>     pop rdi
    34 00007FFF 5E                  <1>     pop rsi
    35 00008000 5A                  <1>     pop rdx
    36 00008001 59                  <1>     pop rcx
    37 00008002 5B                  <1>     pop rbx
    38 00008003 58                  <1>     pop rax
    39 00008004 C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 00008005 4889FB              <1>     mov rbx, rdi
    43 00008008 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 0000800B 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 0000800D 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 00008010 488B1DFDFAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 00008017 B401                <1>     mov ah, 01h
    50 00008019 CD33                <1>     int 33h ;Read status of last operation
    51 0000801B 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 0000801E B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 00008020 7460                <1>     je .msdWriteErrorCode 
    54 00008022 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 00008024 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 00008027 7459                <1>     je .msdWriteErrorCode 
    57 00008029 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 0000802C 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 0000802E B002                <1>     mov al, 02h  ;Device not ready code
    61 00008030 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 00008033 744D                <1>     je .msdWriteErrorCode
    63 00008035 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 00008039 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 0000803D 30C0                <1>     xor al, al
    67 0000803F 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 00008044 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 00008046 B004                <1>     mov al, 04h     ;CRC error code
    71 00008048 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 0000804D 7433                <1>     je .msdWriteErrorCode
    73 0000804F 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 00008054 742C                <1>     je .msdWriteErrorCode
    75 00008056 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 0000805B 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 0000805D B006                <1>     mov al, 06h     ;Seek error code
    79 0000805F 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 00008062 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 00008064 B007                <1>     mov al, 07h
    84 00008066 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 00008069 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 0000806B B008                <1>     mov al, 08h     ;Sector not found code
    88 0000806D 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 00008070 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 00008072 B00A                <1>     mov al, 0Ah     ;Write fault
    92 00008074 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 00008077 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 00008079 B00B                <1>     mov al, 0Bh     ;Read fault
    96 0000807B 80F911              <1>     cmp cl, 11h     ;Read error
    97 0000807E 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 00008080 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 00008082 B480                <1>     mov ah, 80h ;Set error bit
   102 00008084 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00008088 C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00008089 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   106 0000808B 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 0000808D AD00                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 0000808F 0D01                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 00008091 1901                <1>     dw .msdRead - .msdTable         ;Function 4
   110 00008093 0000                <1>     dw 0                            ;Function 5
   111 00008095 0000                <1>     dw 0                            ;Function 6
   112 00008097 0000                <1>     dw 0                            ;Function 7
   113 00008099 5201                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 0000809B 8B01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 0000809D 0000                <1>     dw 0                            ;Function 10
   116 0000809F 0000                <1>     dw 0                            ;Function 11
   117 000080A1 D101                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 000080A3 DD01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 000080A5 F801                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 000080A7 1302                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 000080A9 0000                <1>     dw 0                            ;Function 16
   122 000080AB 0000                <1>     dw 0                            ;Function 17
   123 000080AD 0000                <1>     dw 0                            ;Function 18
   124 000080AF 3B02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 000080B1 0000                <1>     dw 0                            ;Function 20
   126 000080B3 0000                <1>     dw 0                            ;Function 21
   127 000080B5 0000                <1>     dw 0                            ;Function 22
   128 000080B7 E202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 000080B9 F702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> .msdInitShim:
   131 000080BB 53                  <1>     push rbx
   132 000080BC 4157                <1>     push r15
   133 000080BE E8A3070000          <1>     call msdInit
   134 000080C3 415F                <1>     pop r15
   135 000080C5 5B                  <1>     pop rbx
   136 000080C6 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   137 000080CF C3                  <1>     ret
   138                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   139                              <1> .msdMedChk:          ;Function 1
   140 000080D0 B005                <1>     mov al, 05h ;Bad request structure length
   141 000080D2 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   142 000080D5 75AB                <1>     jne .msdWriteErrorCode
   143                              <1> 
   144 000080D7 E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   145 000080DC 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   146 000080DE 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   147 000080E3 488D0D67030000      <1>     lea rcx, .msdBIOSmap
   148 000080EA 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   149 000080ED F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   150 000080F0 753F                <1>     jnz .mmcNoChange
   151                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   152 000080F2 B416                <1>     mov ah, 16h 
   153 000080F4 CD33                <1>     int 33h
   154 000080F6 0F8214FFFFFF        <1>     jc .msdGenDiskError
   155 000080FC 80FC80              <1>     cmp ah, 80h
   156 000080FF 740E                <1>     je .mmcNoChangeLine
   157 00008101 80FC86              <1>     cmp ah, 86h
   158 00008104 7409                <1>     je .mmcNoChangeLine
   159 00008106 84E4                <1>     test ah, ah ;No change?
   160 00008108 7427                <1>     jz .mmcNoChange
   161 0000810A F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   162 0000810D 750D                <1>     jnz .mmcChange
   163                              <1> ;If nothing, fall through and test manually, should never happen though
   164                              <1> .mmcNoChangeLine:
   165                              <1> ;Now we test Media Descriptor
   166 0000810F 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   167 00008114 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   168 00008117 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   169 0000811A 7410                <1>     je .mmcUnsure
   170                              <1> .mmcChange:
   171 0000811C C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   172 00008120 488D051E030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   173 00008127 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   174                              <1>     ;Check here if there were any open handles on the device when it was changed
   175 0000812B C3                  <1>     ret
   176                              <1> .mmcUnsure:
   177 0000812C C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   178 00008130 C3                  <1>     ret
   179                              <1> .mmcNoChange:
   180 00008131 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   181 00008135 C3                  <1>     ret
   182                              <1> 
   183                              <1> 
   184                              <1> .msdBuildBPB:        ;Function 2
   185 00008136 B005                <1>     mov al, 05h ;Bad request structure length
   186 00008138 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   187 0000813B 0F8541FFFFFF        <1>     jne .msdWriteErrorCode
   188                              <1> 
   189 00008141 4889DE              <1>     mov rsi, rbx
   190 00008144 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   191 00008149 488D0D01030000      <1>     lea rcx, .msdBIOSmap
   192 00008150 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   193 00008153 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   194 00008157 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   195 00008159 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   196 0000815C B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   197 00008161 CD33                <1>     int 33h
   198 00008163 0F82A7FEFFFF        <1>     jc .msdGenDiskError
   199                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   200 00008169 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   201 0000816D 7418                <1>     je .mbbpb0
   202 0000816F 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   203 00008173 7412                <1>     je .mbbpb0
   204 00008175 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   205 00008179 740C                <1>     je .mbbpb0
   206 0000817B 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   207 0000817F B007                <1>     mov al, 07h ;Unknown media error code
   208 00008181 0F82FBFEFFFF        <1>     jb .msdWriteErrorCode
   209                              <1> .mbbpb0:
   210 00008187 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   211 0000818A 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   212 0000818D B90F000000          <1>     mov ecx, bpbEx_size/8
   213 00008192 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   214 00008195 C3                  <1>     ret
   215                              <1> .msdIOCTLRead:       ;Function 3, returns done
   216 00008196 B005                <1>     mov al, drvBadDrvReq
   217 00008198 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 0000819B 0F85E1FEFFFF        <1>     jne .msdWriteErrorCode
   219 000081A1 C3                  <1>     ret
   220                              <1> .msdRead:            ;Function 4
   221                              <1> ;Will read one sector at a time.
   222 000081A2 B005                <1>     mov al, 05h ;Bad request structure length
   223 000081A4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   224 000081A7 0F85D5FEFFFF        <1>     jne .msdWriteErrorCode
   225                              <1> 
   226 000081AD E806020000          <1>     call .msdCheckDeviceType
   227                              <1> 
   228 000081B2 4889DF              <1>     mov rdi, rbx
   229 000081B5 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   230                              <1> .msdr0:
   231 000081B7 B682                <1>     mov dh, 82h ;LBA Read Sectors
   232 000081B9 E8D7010000          <1>     call .msdBlkIOCommon
   233 000081BE 0F8241FEFFFF        <1>     jc .msdIOError
   234 000081C4 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   235 000081C8 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   236 000081CC 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   237 000081D0 FFC6                <1>     inc esi
   238 000081D2 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   239 000081D5 75E0                <1>     jne .msdr0
   240 000081D7 4889FB              <1>     mov rbx, rdi
   241 000081DA C3                  <1>     ret
   242                              <1> .msdWrite:           ;Function 8
   243                              <1> ;Will write one sector at a time.
   244 000081DB B005                <1>     mov al, 05h ;Bad request structure length
   245 000081DD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 000081E0 0F859CFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 000081E6 E8CD010000          <1>     call .msdCheckDeviceType
   249                              <1> 
   250 000081EB 4889DF              <1>     mov rdi, rbx
   251 000081EE 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   252                              <1> .msdw0:
   253 000081F0 B683                <1>     mov dh, 83h ;LBA Write Sectors
   254 000081F2 E89E010000          <1>     call .msdBlkIOCommon
   255 000081F7 0F8208FEFFFF        <1>     jc .msdIOError
   256 000081FD 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   257 00008201 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   258 00008205 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   259 00008209 FFC6                <1>     inc esi
   260 0000820B 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   261 0000820E 75E0                <1>     jne .msdw0
   262 00008210 4889FB              <1>     mov rbx, rdi
   263 00008213 C3                  <1>     ret
   264                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   265                              <1> ;Will write one sector at a time and then verify it.
   266 00008214 B005                <1>     mov al, 05h ;Bad request structure length
   267 00008216 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   268 00008219 0F8563FEFFFF        <1>     jne .msdWriteErrorCode
   269                              <1> 
   270 0000821F E894010000          <1>     call .msdCheckDeviceType
   271                              <1> 
   272 00008224 4889DF              <1>     mov rdi, rbx
   273 00008227 31F6                <1>     xor esi, esi  ;Set counter to zero
   274                              <1> .msdwv0:
   275 00008229 B683                <1>     mov dh, 83h ;LBA Write Sectors
   276 0000822B E865010000          <1>     call .msdBlkIOCommon
   277 00008230 0F82CFFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   278 00008236 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   279 00008238 E858010000          <1>     call .msdBlkIOCommon
   280 0000823D 0F82C2FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   281 00008243 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   282 00008247 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   283 0000824B 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   284 0000824F FFC6                <1>     inc esi
   285 00008251 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   286 00008254 75D3                <1>     jne .msdwv0
   287 00008256 4889FB              <1>     mov rbx, rdi
   288 00008259 C3                  <1>     ret
   289                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   290 0000825A B005                <1>     mov al, drvBadDrvReq
   291 0000825C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 0000825F 0F851DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 00008265 C3                  <1>     ret
   295                              <1> .msdDevOpen:         ;Function 13
   296 00008266 B005                <1>     mov al, drvBadDrvReq
   297 00008268 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   298 0000826B 0F8511FEFFFF        <1>     jne .msdWriteErrorCode
   299                              <1> 
   300 00008271 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   301 00008276 488D0DD9010000      <1>     lea rcx, .msdHdlCnt
   302 0000827D FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   303 00008280 C3                  <1>     ret
   304                              <1> .msdDevClose:        ;Function 14
   305 00008281 B005                <1>     mov al, drvBadDrvReq
   306 00008283 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   307 00008286 0F85F6FDFFFF        <1>     jne .msdWriteErrorCode
   308                              <1> 
   309 0000828C 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   310 00008291 488D0DBE010000      <1>     lea rcx, .msdHdlCnt
   311 00008298 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   312 0000829B C3                  <1>     ret
   313                              <1> .msdRemovableMedia:  ;Function 15
   314 0000829C B005                <1>     mov al, drvBadDrvReq
   315 0000829E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   316 000082A1 0F85DBFDFFFF        <1>     jne .msdWriteErrorCode
   317                              <1>     
   318 000082A7 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   319 000082AC 488D0D9E010000      <1>     lea rcx, .msdBIOSmap
   320 000082B3 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   321 000082B7 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   322 000082BC C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   323 000082BF 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   324 000082C3 C3                  <1>     ret
   325                              <1> .msdGenericIOCTL:    ;Function 19
   326 000082C4 B005                <1>     mov al, drvBadDrvReq
   327 000082C6 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   328 000082C9 0F85B3FDFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   330                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   331 000082CF B003                <1>     mov al, drvBadCmd
   332 000082D1 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   333 000082D5 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   334 000082D8 0F85A4FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   335 000082DE F6C180              <1>     test cl, 80h    ;Extended function bit set?
   336 000082E1 0F849BFDFFFF        <1>     jz .msdWriteErrorCode
   337 000082E7 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   338 000082EA 80F941              <1>     cmp cl, 41h     
   339 000082ED 743F                <1>     je .msdGIOCTLWrite
   340 000082EF 80F942              <1>     cmp cl, 42h
   341 000082F2 7451                <1>     je .msdGIOCTLFormat
   342 000082F4 80F960              <1>     cmp cl, 60h
   343 000082F7 0F8585FDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   344                              <1>     ;Get params here
   345 000082FD 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   346 00008301 488D1549010000      <1>     lea rdx, .msdBIOSmap
   347 00008308 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   348 0000830B B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   349 0000830D 53                  <1>     push rbx
   350 0000830E CD33                <1>     int 33h
   351                              <1>     ;Returns:
   352                              <1>     ;rbx = Sector size in bytes
   353                              <1>     ;rcx = Last LBA block
   354 00008310 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   355 00008313 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   356 00008314 0F82F6FCFFFF        <1>     jc .msdGenDiskError
   357                              <1> ;Get LBA Table:
   358                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   359                              <1> ;Offset 1:  Reserved, 7 bytes
   360                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   361                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   362 0000831A 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   363 0000831E 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   364 00008325 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   365 00008329 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   366                              <1>     return
    13                              <2> %%_ret:
    14 0000832D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> .msdGIOCTLWrite:
   369                              <1> ;Write Table:
   370                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   371                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   372                              <1> ;Offset 2:  Reserved, 6 bytes
   373                              <1> ;Offset 8:  Sector to start format at (QWORD)
   374                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   375 0000832E E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   376 00008333 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   377 00008337 B483                <1>     mov ah, 83h
   378                              <1> .msdGIOCTLwfCommon:
   379 00008339 CD33                <1>     int 33h
   380 0000833B 0F82CFFCFFFF        <1>     jc .msdGenDiskError
   381 00008341 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   382                              <1>     return 
    13                              <2> %%_ret:
    14 00008344 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> .msdGIOCTLFormat:
   385                              <1> ;Format Table:
   386                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   387                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   388                              <1> ;Offset 2:  Reserved, 6 bytes
   389                              <1> ;Offset 8:  Sector to start format at (QWORD)
   390 00008345 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   391 0000834A B485                <1>     mov ah, 85h
   392 0000834C EBEB                <1>     jmp short .msdGIOCTLwfCommon
   393                              <1> 
   394                              <1> .msdGIOCTLFormatWriteSetup:
   395                              <1> ;Sets the following:
   396                              <1> ;al = Number of sectors to write/format
   397                              <1> ;rcx = Sector to begin transfer at
   398                              <1> ;dl = BIOS Drive to do transfer on
   399                              <1> ;rsi = Driver Packet (usually set to rbx)
   400                              <1> ;rdi = Write/Format packet
   401 0000834E 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   402 00008352 488D15F8000000      <1>     lea rdx, .msdBIOSmap
   403 00008359 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   404 0000835C 4889DE              <1>     mov rsi, rbx
   405 0000835F 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   406 00008363 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   407 00008366 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   408                              <1>     return
    13                              <2> %%_ret:
    14 0000836A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> .msdGetLogicalDev:   ;Function 23
   411 0000836B B005                <1>     mov al, drvBadDrvReq
   412 0000836D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   413 00008370 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   414                              <1> 
   415 00008376 8A05D4000000        <1>     mov al, byte [.msdCurDev]
   416 0000837C 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   417 0000837F C3                  <1>     ret
   418                              <1> .msdSetLogicalDev:   ;Function 24
   419 00008380 B005                <1>     mov al, drvBadDrvReq
   420 00008382 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   421 00008385 0F85F7FCFFFF        <1>     jne .msdWriteErrorCode
   422                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   423 0000838B 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   424 0000838E 8805BC000000        <1>     mov byte [.msdCurDev], al
   425 00008394 C3                  <1>     ret
   426                              <1> 
   427                              <1> .msdBlkIOCommon:  ;Does block IO
   428                              <1> ;Called with rdi containing old rbx value and ah with function number
   429                              <1> ;rbp points to bpb
   430                              <1> ;Error handled by caller
   431                              <1> ;Sector count handled by caller
   432                              <1> ;Called with dh = BIOS function number
   433 00008395 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   434 0000839A 488D0DB0000000      <1>     lea rcx, .msdBIOSmap
   435 000083A1 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   436 000083A4 31C9                <1>     xor ecx, ecx
   437 000083A6 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   438 000083A9 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   439 000083AD 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   440 000083B1 88F4                <1>     mov ah, dh
   441 000083B3 B001                <1>     mov al, 01h ;Do one sector at a time 
   442 000083B5 CD33                <1>     int 33h
   443                              <1>     return
    13                              <2> %%_ret:
    14 000083B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> .msdCheckDeviceType:
   446                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   447                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   448                              <1> ; is being transacted on, prompts the user. Else, 
   449                              <1> ;Returns ZF=NZ if media number changed!
   450                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   451 000083B8 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   452 000083BC 3A058E000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   453                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000083C2 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   454                              <1> ;If not equal, check new drive is not A or B
   455 000083C4 3C02                <1>     cmp al, 2
   456 000083C6 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   457                              <1>     ;Check if we are in single drive mode or not
   458 000083C8 F6057F000000FF      <1>     test byte [.msdSingleFlag], -1
   459 000083CF 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   460 000083D1 3A0578000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   461 000083D7 742D                <1>     je .msdCDTexitOk    ;Exit if so
   462 000083D9 880570000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   463 000083DF 0441                <1>     add al, "A" ;Convert to a letter
   464 000083E1 88053A000000        <1>     mov byte [.msdStrikeLetter], al
   465 000083E7 488D3520000000      <1>     lea rsi, .msdStrike
   466 000083EE B937000000          <1>     mov ecx, .msdStrikeL
   467                              <1> .msdCDTprintMessage:
   468 000083F3 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   469 000083F4 CD49                <1>     int 49h ;Print char in al
   470 000083F6 FFC9                <1>     dec ecx
   471 000083F8 75F9                <1>     jnz .msdCDTprintMessage
   472 000083FA 31C0                <1>     xor eax, eax
   473 000083FC CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   474                              <1> .msdCDTexit:
   475 000083FE E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   476 00008403 FFC0                <1>     inc eax ;Clear ZF
   477 00008405 C3                  <1>     ret
   478                              <1> .msdCDTexitOk:
   479 00008406 E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   480 0000840B 31C0                <1>     xor eax, eax
   481 0000840D C3                  <1>     ret
   482                              <1> 
   483 0000840E 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   483 00008417 666F72206472697665- <1>
   483 00008420 20                  <1>
   484 00008421 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   484 0000842A 72696B650D0A616E79- <1>
   484 00008433 206B6579207768656E- <1>
   484 0000843C 2072656164790D0A0A  <1>
   485                              <1> .msdStrikeL equ $ - .msdStrike
   486                              <1> 
   487 00008445 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   488                              <1> ;LASTDRIVE default is 5
   489                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   490                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   491 0000844E 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   492 0000844F 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   493 00008450 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   494                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   495 00008451 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   496 00008456 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   497 0000845B 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   497 00008464 000000000000000000- <1>
   497 0000846D 000000000000000000- <1>
   497 00008476 000000000000000000- <1>
   497 0000847F 00000000            <1>
   498 00008483 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   498 0000848C 000000000000000000- <1>
   498 00008495 000000000000000000- <1>
   498 0000849E 000000000000000000- <1>
   498 000084A7 000000000000000000- <1>
   498 000084B0 000000000000000000- <1>
   498 000084B9 000000000000000000- <1>
   498 000084C2 000000000000000000- <1>
   498 000084CB 000000000000000000- <1>
   498 000084D4 000000000000000000- <1>
   498 000084DD 000000000000000000- <1>
   498 000084E6 000000000000000000- <1>
   498 000084EF 000000000000000000- <1>
   498 000084F8 000000000000000000- <1>
   498 00008501 000000000000000000- <1>
   498 0000850A 000000000000000000- <1>
   498 00008513 000000000000000000- <1>
   498 0000851C 000000000000000000- <1>
   498 00008525 000000000000000000- <1>
   498 0000852E 000000000000000000- <1>
   498 00008537 000000000000000000- <1>
   498 00008540 000000000000000000- <1>
   498 00008549 000000000000000000- <1>
   498 00008552 000000000000000000- <1>
   498 0000855B 000000000000000000- <1>
   498 00008564 000000000000000000- <1>
   498 0000856D 000000000000000000- <1>
   498 00008576 000000000000000000- <1>
   498 0000857F 000000000000000000- <1>
   498 00008588 000000000000000000- <1>
   498 00008591 000000000000000000- <1>
   498 0000859A 000000000000000000- <1>
   498 000085A3 000000000000000000- <1>
   498 000085AC 000000000000000000- <1>
   498 000085B5 000000000000000000- <1>
   498 000085BE 000000000000000000- <1>
   498 000085C7 000000000000000000- <1>
   498 000085D0 000000000000000000- <1>
   498 000085D9 000000000000000000- <1>
   498 000085E2 000000000000000000- <1>
   498 000085EB 000000000000000000- <1>
   498 000085F4 000000000000000000- <1>
   498 000085FD 000000000000000000- <1>
   498 00008606 000000000000000000- <1>
   498 0000860F 000000000000000000- <1>
   498 00008618 000000000000000000- <1>
   498 00008621 000000000000000000- <1>
   498 0000862A 000000000000000000- <1>
   498 00008633 000000000000000000- <1>
   498 0000863C 000000000000000000- <1>
   498 00008645 000000000000000000- <1>
   498 0000864E 000000000000000000- <1>
   498 00008657 000000000000000000- <1>
   498 00008660 000000000000000000- <1>
   498 00008669 000000000000000000- <1>
   498 00008672 000000000000000000- <1>
   498 0000867B 000000000000000000- <1>
   498 00008684 000000000000000000- <1>
   498 0000868D 000000000000000000- <1>
   498 00008696 000000000000000000- <1>
   498 0000869F 000000000000000000- <1>
   498 000086A8 000000000000000000- <1>
   498 000086B1 000000000000000000- <1>
   498 000086BA 000000000000000000- <1>
   498 000086C3 000000000000000000- <1>
   498 000086CC 000000000000000000- <1>
   498 000086D5 000000000000        <1>
   499                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   499                              <2> .dfltBPB :
   174 000086DB E9                  <2>  db 0E9h
   175 000086DC 00                  <2>  db 00h
   176 000086DD 90                  <2>  db 90h
   177 000086DE 534350444F537631    <2>  db 'SCPDOSv1'
   178 000086E6 0002                <2>  dw 0200h
   179 000086E8 01                  <2>  db 01h
   180 000086E9 0100                <2>  dw 0001h
   181 000086EB 02                  <2>  db 02h
   182 000086EC E000                <2>  dw 00E0h
   183 000086EE 400B                <2>  dw 0B40h
   184 000086F0 F0                  <2>  db 0F0h
   185 000086F1 0900                <2>  dw 0009h
   186 000086F3 1200                <2>  dw 0012h
   187 000086F5 0200                <2>  dw 0002h
   188 000086F7 00000000            <2>  dd 0
   189 000086FB 00000000            <2>  dd 0
   190 000086FF 00                  <2>  db 00h
   191 00008700 00                  <2>  db 00h
   192 00008701 29                  <2>  db 29h
   193 00008702 00000000            <2>  dd 0
   194 00008706 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 0000870F 2020                <2>
   195 00008711 4641543132202020    <2>  db 'FAT12   '
   196 00008719 000000000000000000- <2>  db 58 dup 0
   196 00008722 000000000000000000- <2>
   196 0000872B 000000000000000000- <2>
   196 00008734 000000000000000000- <2>
   196 0000873D 000000000000000000- <2>
   196 00008746 000000000000000000- <2>
   196 0000874F 00000000            <2>
   500                              <1> endptr equ $
    52                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00008753 0F010D23000000      <1>     sidt [myIdt]
     8 0000875A 0FB6C0              <1>     movzx eax, al
     9 0000875D 4892                <1>     xchg rdx, rax
    10 0000875F 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00008763 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 0000876A 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 0000876D 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00008771 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00008775 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00008779 894208              <1>     mov dword [rdx + 8], eax
    17 0000877C C3                  <1>     ret
    18                              <1> myIdt:
    19 0000877D 0000                <1> .limit  dw 0
    20 0000877F 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
    24 00008787 50                  <1>     push rax
    25 00008788 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00008789 51                  <1>     push rcx
    27 0000878A 52                  <1>     push rdx
    28 0000878B 488D15ECF4FFFF      <1>     lea rdx, qword [fastOutput]
    29 00008792 B849000000          <1>     mov eax, 49h
    30 00008797 E8B7FFFFFF          <1>     call installInterrupt
    31 0000879C 488D15E3F4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 000087A3 B83B000000          <1>     mov eax, 3Bh
    33 000087A8 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 000087AD B401                <1>     mov ah, 01      ;Get buffer status
    36 000087AF CD36                <1>     int 36h
    37 000087B1 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 000087B3 30E4                <1>     xor ah, ah
    39 000087B5 CD36                <1>     int 36h ;Read key to flush from buffer
    40 000087B7 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 000087B9 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 000087BE CD30                <1>     int 30h
    44 000087C0 B402                <1>     mov ah, 02h
    45 000087C2 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 000087C4 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 000087C6 CD30                <1>     int 30h
    48 000087C8 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 000087CA B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 000087CF CD30                <1>     int 30h
    51 000087D1 5A                  <1>     pop rdx
    52 000087D2 59                  <1>     pop rcx
    53 000087D3 5B                  <1>     pop rbx
    54 000087D4 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 000087D5 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 000087DA 50                  <1>     push rax
    58 000087DB 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 000087E2 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 000087E6 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 000087E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 000087E8 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 000087E9 B402                <1>     mov ah, 02  ;Read RTC Time
    69 000087EB CD3A                <1>     int 3Ah
    70 000087ED 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 000087EF 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 000087F2 E84D000000          <1>     call .bcd2Bin
    74 000087F7 88C5                <1>     mov ch, al
    75 000087F9 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 000087FC E843000000          <1>     call .bcd2Bin
    77 00008801 88C1                <1>     mov cl, al
    78 00008803 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00008806 E839000000          <1>     call .bcd2Bin
    80 0000880B 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 0000880D 89C2                <1>     mov edx, eax
    82 0000880F B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00008811 CD41                <1>     int 41h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00008813 B404                <1>     mov ah, 04  ;Read RTC Date
    89 00008815 CD3A                <1>     int 3Ah
    90 00008817 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00008819 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 0000881C E823000000          <1>     call .bcd2Bin
    94 00008821 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00008824 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
    96 0000882A 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 0000882D E812000000          <1>     call .bcd2Bin
    98 00008832 88C6                <1>     mov dh, al  
    99 00008834 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 00008837 E808000000          <1>     call .bcd2Bin
   101 0000883C 88C2                <1>     mov dl, al
   102 0000883E B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00008840 CD41                <1>     int 41h
   104 00008842 EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00008844 51                  <1>     push rcx
   108 00008845 89C1                <1>     mov ecx, eax
   109 00008847 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 0000884C 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00008852 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00008855 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00008858 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 0000885A FFC9                <1>     dec ecx
   116 0000885C 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 0000885E 59                  <1>     pop rcx
   119 0000885F C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00008860 5B                  <1>     pop rbx ;Get the pointer back
   122 00008861 E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134 00008866 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   135                              <1> 
   136 00008867 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   137 00008869 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   138 0000886D 664489C0            <1>     mov ax, r8w
   139 00008871 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   140 00008877 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   141 0000887D C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   142                              <1> 
   143 00008884 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   144 0000888B 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   145 00008892 0F847C000000        <1>     jz .remInit ;No? Go to removables
   146 00008898 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   146 000088A1 00                  <1>
   147 000088A2 B280                <1>     mov dl, 80h ;Start with HDD 0
   148                              <1> .primary:
   149 000088A4 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   150 000088AB 7467                <1>     je .remInit
   151 000088AD 31C9                <1>     xor ecx, ecx    ;Sector 0
   152 000088AF E80B010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   153 000088B4 724F                <1>     jc .primaryEpilog
   154                              <1>     ;Here, check MBR or BPB
   155 000088B6 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   156 000088BF 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   157                              <1>     ;Now check if BPB or MBR
   158 000088C1 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   159 000088C3 8A6302              <1>     mov ah, byte [rbx + 2]
   160 000088C6 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   161 000088CA 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   162                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   163                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   164 000088CC 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   165 000088D3 B104                <1>     mov cl, 4
   166                              <1> .checkPrimary:
   167 000088D5 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   168 000088D8 3C01                <1>     cmp al, 01
   169 000088DA 7421                <1>     je .primaryFound
   170 000088DC 3C04                <1>     cmp al, 04
   171 000088DE 741D                <1>     je .primaryFound
   172 000088E0 3C06                <1>     cmp al, 06
   173 000088E2 7419                <1>     je .primaryFound
   174 000088E4 3C0B                <1>     cmp al, 0Bh
   175 000088E6 7415                <1>     je .primaryFound
   176 000088E8 3C0C                <1>     cmp al, 0Ch
   177 000088EA 7411                <1>     je .primaryFound
   178 000088EC 3C0E                <1>     cmp al, 0Eh
   179 000088EE 740D                <1>     je .primaryFound
   180 000088F0 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   181 000088F7 FEC9                <1>     dec cl
   182 000088F9 740A                <1>     jz .primaryEpilog
   183 000088FB EBD8                <1>     jmp short .checkPrimary
   184                              <1> .primaryFound:
   185                              <1>     ;Copy the first sector of this partition into memory
   186 000088FD 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   187 00008900 E8C8000000          <1>     call .readSectorAndAddDataToTables
   188                              <1> .primaryEpilog:
   189 00008905 FEC2                <1>     inc dl  ;Goto next BIOS drive
   190 00008907 88D6                <1>     mov dh, dl
   191 00008909 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   192 0000890C 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   193 00008912 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   194                              <1> .extended:
   195                              <1> ;We have gone through all the devices once
   196                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   197                              <1>     ;je .remInit ;If yes, get removable devices
   198                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   199                              <1>     ;xor ecx, ecx    ;Get MBR back
   200                              <1>     ;call .initReadSector
   201                              <1>     ;Now we eventually search MBR for a FAT extended partition
   202                              <1> .remInit:
   203                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   204                              <1> ; for some reason the removable drives stop working or dont exist.
   205 00008914 488D35C0FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   206 0000891B 488D3D39FBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   207 00008922 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   208 00008925 48897708            <1>     mov qword [rdi + 8], rsi
   209                              <1> ;This forces the hard drives to start at C:
   210 00008929 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   211 0000892C 30D2                <1>     xor dl, dl  ;Start with removable device 0
   212 0000892E 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   213                              <1>     ;rdi points to the space for the subsequent bpb's
   214 00008931 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   215 00008938 7508                <1>     jnz .removables
   216 0000893A 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   217 00008941 C3                  <1>     ret ;and return!
   218                              <1> .removables:
   219 00008942 31C9                <1>     xor ecx, ecx    ;Read sector 0
   220 00008944 E884000000          <1>     call .readSectorAndAddDataToTables
   221                              <1> .removableEpilogue:
   222 00008949 FEC2                <1>     inc dl  ;Goto next BIOS device now
   223 0000894B 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   224 00008951 7412                <1>     je .end
   225 00008953 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   226 0000895A 7503                <1>     jne .re0
   227 0000895C 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
   228                              <1> .re0:
   229 0000895F 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   230 00008963 72DD                <1>     jb .removables
   231                              <1> .end:
   232 00008965 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   233 0000896C 741D                <1>     je .singleRemDev
   234                              <1> .msdExit:
   235 0000896E 5B                  <1>     pop rbx ;rbx points to the parameter block
   236                              <1>     ;Now we set the .optptr, .endptr and .numunt
   237 0000896F 50                  <1>     push rax
   238 00008970 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   239 00008977 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   240 0000897A 488D05DAFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   241 00008981 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   242 00008985 58                  <1>     pop rax
   243 00008986 E94AFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   244                              <1> .singleRemDev:
   245                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   246 0000898B 488D1DBFFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   247 00008992 8A15B9FAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   248 00008998 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   249 0000899B 488D1DB9FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   250 000089A2 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   251 000089A5 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   252 000089A9 C6059EFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   253 000089B0 C60598FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   254 000089B7 FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   255 000089BD EBAF                <1>     jmp short .msdExit
   256                              <1> .initReadSector:
   257                              <1> ;Called with sector number in rcx and BIOS device number in dl
   258 000089BF B482                <1>     mov ah, 82h ;Read
   259 000089C1 B001                <1>     mov al, 1   ;One sector
   260 000089C3 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   261 000089CA CD33                <1>     int 33h
   262 000089CC C3                  <1>     ret
   263                              <1> 
   264                              <1> .readSectorAndAddDataToTables:
   265                              <1> ;Input:
   266                              <1> ;ecx = Sector number to read
   267                              <1> ;r15 -> bpb array entry for the BPB
   268                              <1> ;r8 = Logical Drive number (offset into arrays)
   269 000089CD E8EDFFFFFF          <1>     call .initReadSector
   270                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000089D2 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000089D4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   271                              <1>     ;Now verify this is a BPB
   272 000089D5 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   273 000089D7 8A6302              <1>     mov ah, byte [rbx + 2]
   274 000089DA 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   275                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000089DE 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   276                              <1>     ;Now copy data to internal tables
   277 000089E0 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   278 000089E3 51                  <1>     push rcx
   279 000089E4 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   280 000089E9 4C89FF              <1>     mov rdi, r15
   281 000089EC F348A5              <1>     rep movsq   ;Copy the BPB
   282 000089EF 59                  <1>     pop rcx
   283                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   284 000089F0 498D98[51840000]    <1>     lea rbx, qword [msdDriver.msdBIOSmap + r8]
   285                              <1>     ;Add device count to rbx to point to correct entry
   286 000089F7 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   287 000089F9 4A8D1CC5[5B840000]  <1>     lea rbx, qword [msdDriver.msdBPBTbl + 8*r8]
   288 00008A01 4C893B              <1>     mov qword [rbx], r15
   289 00008A04 49FFC0              <1>     inc r8  ;Goto next logical drive
   290 00008A07 FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   291 00008A0D 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   292                              <1>     return
    13                              <2> %%_ret:
    14 00008A14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  dosLen  equ ($-$$)  ;Get the length of the Segment
    54                                  Segment drvbss follows=resSeg align=1 nobits
    55                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    56 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    57                                  dosEnd: ;Used to compute the size of resident DOS
    57          ------------------       info: assembly required 1+17+2 passes

