     1                                  [map all ./lst/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;If remote pc used fcb to open, use netFCB to make maximum restrictive share
   160                              <1> netFCBShare     equ 70h     
   161                              <1> noInherit       equ 80h
   162                              <1> ;Bits 8-12 reserved 0
   163                              <1> ;Fancy open mode bits
   164                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   165                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   166                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   168                              <1> 
   169                              <1> ;Attribute Byte
   170                              <1> readOnlyFile    equ 1h
   171                              <1> hiddenFile      equ 2h
   172                              <1> systemFile      equ 4h
   173                              <1> volLabelFile    equ 8h
   174                              <1> directoryFile   equ 10h ;Directory entry
   175                              <1> archiveFile     equ 20h
   176                              <1> charFile        equ 40h ;Reserved, never found in dir
   177                              <1> ;Device Info equates
   178                              <1> ;For a block device, bits [5:0] contain the drive number
   179                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   180                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   181                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   182                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   183                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   184                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   185                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   186                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   187                              <1> devCharDev      equ 80h ;If set, it is a char device!
   188                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   189                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   190                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   191                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   192                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   193                              <1>  
   194                              <1> ;------------------------------------------------------------------------;
   195                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   196                              <1> ; to an internal buffer, and then copying it to the specified location
   197                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   198                              <1> ; another request for the same sector from the same device is made, so 
   199                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   200                              <1> ; size, selected according to the largest detected sector size during 
   201                              <1> ; the initial loadup.
   202                              <1> ;
   203                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   204                              <1> ;
   205                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   206                              <1> ;------------------------------------------------------------------------;
   207                              <1> 
   208                              <1> struc bufferHdr
   209 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   210 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   211 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   212 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   213 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   214 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   215 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   216 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   217                              <1>     .dataarea:             ;Points to the start of the data area
   218                              <1> endstruc
   219                              <1> ;Buffer Flag equates
   220                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   221                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   222                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   223                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   224                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   225                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   226                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   227                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> ; Memory control block for each memory arena
   230                              <1> ;------------------------------------------------------------------------;
   231                              <1> struc mcb
   232 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   233 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   234 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   235                              <1>     ;The following byte is reserved outside of sysinit
   236 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   237 0000000E ????                <1>     .reserved   db 2 dup (?) 
   238                              <1>     .program:
   239                              <1> endstruc
   240                              <1> ;MCB equates
   241                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   242                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   243                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   244                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   245                              <1> mcbMarkCtn      equ "M"
   246                              <1> mcbMarkEnd      equ "Z"
   247                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   248                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   249                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   250                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   251                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   252                              <1> mcbSubIFS       equ "I" ;Unused for now
   253                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   254                              <1> mcbSubFCBS      equ "X" ;Unused for now
   255                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   256                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   257                              <1> mcbSubStacks    equ "S" ;Unused for now
   258                              <1> 
   259                              <1> 
   260                              <1> memFirstFit     equ 0   ;First free block goes to application
   261                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   262                              <1> memLastFit      equ 2   ;Last free block goes to application
   263                              <1> 
   264                              <1> ;Owner = Para aligned address => Owning application PSP
   265                              <1> ;...To consider...
   266                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   267                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   268                              <1> ;------------------------------------------------------------------------;
   269                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   270                              <1> ; following order, thus allowing for return values to be placed in the 
   271                              <1> ; registers by accessing the caller register stack frame.
   272                              <1> ;------------------------------------------------------------------------;
   273                              <1> struc callerFrame
   274 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   275 00000008 ????????????????    <1>     .rbx    dq ?    
   276 00000010 ????????????????    <1>     .rcx    dq ?
   277 00000018 ????????????????    <1>     .rdx    dq ?
   278 00000020 ????????????????    <1>     .rsi    dq ?
   279 00000028 ????????????????    <1>     .rdi    dq ?
   280 00000030 ????????????????    <1>     .rbp    dq ?
   281 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   282 00000040 ????????????????    <1>     .r9     dq ?
   283                              <1> ;Pushed by Processor when invoked via Interrupt
   284 00000048 ????????????????    <1>     .rip    dq ?
   285 00000050 ????????????????    <1>     .cs     dq ?
   286 00000058 ????????????????    <1>     .flags  dq ?
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc dpl
   290                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   291                              <1> ; server calls
   292 00000000 ????????????????    <1>     .rax    dq ?
   293 00000008 ????????????????    <1>     .rbx    dq ?
   294 00000010 ????????????????    <1>     .rcx    dq ?
   295 00000018 ????????????????    <1>     .rdx    dq ?
   296 00000020 ????????????????    <1>     .rsi    dq ?
   297 00000028 ????????????????    <1>     .rdi    dq ?
   298 00000030 ????????????????    <1>     .r8     dq ?
   299 00000038 ????????????????    <1>     .r9     dq ?
   300 00000040 ????????????????    <1>     .align  dq ?
   301 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   302 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   306 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   307 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   308 00000010 ????????????????    <1>     .newSFTVal      dq ?
   309 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   310 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   311 00000028 ????????????????    <1>     .newLastdrive   dq ?
   312 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   313 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   314 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   315 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   316 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   317 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   318 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   319                              <1> endstruc
   320                              <1> 
   321                              <1> struc filename
   322                              <1> ;8.3 File name struct
   323 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   324 00000008 ??????              <1>     .fExt   db 3 dup (?)
   325                              <1> endstruc
   326                              <1> 
   327                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   328 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on
   329 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   330 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   331 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   332 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   333 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   334 00000016 ????                <1>     .fileTime   dw ?  ;File time
   335 00000018 ????                <1>     .fileDate   dw ?  ;File date
   336 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   337 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   338                              <1> endstruc
   339                              <1> 
   340                              <1> struc psp
   341 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   342 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   343 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   344 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   345 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   346 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   347 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   348                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   349                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   350                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   351                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   352                              <1> ; always used and jftSize.
   353                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   354 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   355 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   356 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   357 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   358 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   359 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   360 0000005B ??                  <1>                 db ?  ;Reserved byte
   361                              <1> ;The below are in the same place as in DOS.
   362                              <1>     .cmdLineArgPtr: ;Symbol for future use
   363 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   364 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   365                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   366 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   367 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   368                              <1> endstruc
   369                              <1> 
   370                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   371                              <1> 
   372                              <1> struc clkStruc
   373 00000000 ????                <1>     .dateWord   dw ?
   374 00000002 ??                  <1>     .minutes    db ?
   375 00000003 ??                  <1>     .hours      db ?
   376 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   377 00000005 ??                  <1>     .seconds    db ?
   378                              <1> endstruc
   379                              <1> 
   380                              <1> 
   381                              <1> struc extCtryStruc
   382 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   383 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   384 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   385 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   386 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   387                              <1>                         ;0 = month day year hh:mm:ss
   388                              <1>                         ;1 = day month year hh:mm:ss
   389                              <1>                         ;2 = year month day hh:mm:ss
   390 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   391 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   392 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   393 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   394 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   395 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   396                              <1>                         ;0 = Symbol leads, without space
   397                              <1>                         ;1 = Symbol follows, without space
   398                              <1>                         ;2 = Symbol leads, one space
   399                              <1>                         ;3 = Symbol follows, one space
   400                              <1>                         ;4 = Symbol replace decimal separator
   401 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   402 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   403 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   404 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   405 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   406                              <1> endstruc
   407                              <1> 
   408                              <1> struc countryStruc
   409 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   410                              <1>                         ;0 = month day year hh:mm:ss
   411                              <1>                         ;1 = day month year hh:mm:ss
   412                              <1>                         ;2 = year month day hh:mm:ss
   413 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   414 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   415 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   416 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   417 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   418 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   419                              <1>                         ;0 = Symbol leads, without space
   420                              <1>                         ;1 = Symbol follows, without space
   421                              <1>                         ;2 = Symbol leads, one space
   422                              <1>                         ;3 = Symbol follows, one space
   423                              <1>                         ;4 = Symbol replace decimal separator
   424 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   425 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   426 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   427 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   428 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   429                              <1> endstruc
   430                              <1> 
   431                              <1> ;Critical Error AH bitfield equates
   432                              <1> critRead    equ 0h
   433                              <1> critWrite   equ 1h
   434                              <1> critDOS     equ 0h
   435                              <1> critFAT     equ 2h
   436                              <1> critDir     equ 4h
   437                              <1> critData    equ 6h
   438                              <1> critFailOK  equ 8h
   439                              <1> critRetryOK equ 10h
   440                              <1> critIgnorOK equ 20h
   441                              <1> critCharDev equ 80h
   442                              <1> 
   443                              <1> critIgnore  equ 0
   444                              <1> critRetry   equ 1
   445                              <1> critAbort   equ 2
   446                              <1> critFail    equ 3
   447                              <1> 
   448                              <1> ;MISC ASCII control chars
   449                              <1> NUL equ 00h ;^@         | ASCII Null
   450                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   451                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   452                              <1> BEL equ 07h ;^G         | ASCII Bell
   453                              <1> BSP equ 08h ;^H         | ASCII Backspace
   454                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   455                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   456                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   457                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   458                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   459                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   460                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   461                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   462                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   463                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   464                              <1> SPC equ 20h ;Printable  | ASCII Space
   465                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   466                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   467                              <1> 
   468                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   469                              <1> ;Extended Ascii Codes
   470                              <1> eF1     equ 3Bh ;F1 second byte
   471                              <1> eF2     equ 3Ch ;F2 second byte
   472                              <1> eF3     equ 3Dh ;F3 second byte
   473                              <1> eF4     equ 3Eh ;F4 second byte
   474                              <1> eF5     equ 3Fh ;F5 second byte
   475                              <1> eF6     equ 40h ;F6 second byte
   476                              <1> eF7     equ 41h ;F7 second byte
   477                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   478                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   479                              <1> eIns    equ 52h ;Insert second byte
   480                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   481                              <1> 
   482                              <1> ;Default Configuration for the system
   483                              <1> 
   484                              <1> buffersDefault  equ 30
   485                              <1> filesDefault    equ 20
   486                              <1> fcbsDefault     equ 4
   487                              <1> safeFcbsDeflt   equ 0
   488                              <1> lastDriveDeflt  equ 5   
   489                              <1> 
   490                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   491                              <1> ; then the char has this property.
   492                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   493                              <1> termChar    equ 2   ;Terminator char type
   494                              <1> sepChar     equ 4   ;Separator char type
   495                              <1> badFCBChar  equ 8   ;FCB filename char
    10                                  %include "./src/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI44     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./src/Sysinit/oemreloc.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    38 0000007B 909090909090909090- <1>
    38 00000084 909090909090909090- <1>
    38 0000008D 909090909090909090- <1>
    38 00000096 909090909090909090- <1>
    38 0000009F 909090909090909090- <1>
    38 000000A8 909090909090909090- <1>
    38 000000B1 909090909090909090- <1>
    38 000000BA 909090909090909090- <1>
    38 000000C3 909090909090909090- <1>
    38 000000CC 909090909090909090- <1>
    38 000000D5 909090909090909090- <1>
    38 000000DE 909090909090909090- <1>
    38 000000E7 909090909090909090- <1>
    38 000000F0 909090909090909090- <1>
    38 000000F9 909090909090909090- <1>
    38 00000102 909090909090909090- <1>
    38 0000010B 909090909090909090- <1>
    38 00000114 909090909090909090- <1>
    38 0000011D 909090909090909090- <1>
    38 00000126 909090909090909090- <1>
    38 0000012F 909090909090909090- <1>
    38 00000138 909090909090909090- <1>
    38 00000141 909090909090909090- <1>
    38 0000014A 909090909090909090- <1>
    38 00000153 909090909090909090- <1>
    38 0000015C 909090909090909090- <1>
    38 00000165 909090909090909090- <1>
    38 0000016E 909090909090909090- <1>
    38 00000177 909090909090909090- <1>
    38 00000180 909090909090909090- <1>
    38 00000189 909090909090909090- <1>
    38 00000192 909090909090909090- <1>
    38 0000019B 909090909090909090- <1>
    38 000001A4 909090909090909090- <1>
    38 000001AD 909090909090909090- <1>
    38 000001B6 909090909090909090- <1>
    38 000001BF 909090909090909090- <1>
    38 000001C8 909090909090909090- <1>
    38 000001D1 909090909090909090- <1>
    38 000001DA 909090909090909090- <1>
    38 000001E3 909090909090909090- <1>
    38 000001EC 909090909090909090- <1>
    38 000001F5 909090909090909090- <1>
    38 000001FE 9090                <1>
    39                              <1> ;END OF FIRST SECTOR!!
    40                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    41                              <1> initBegin:
    42 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    43 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    44 00000206 0F32                <1>     rdmsr
    45 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    46 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    47 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    48 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    49 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    50 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    51 00000221 E900000000          <1>     jmp sysinit
    52                              <1> ;Jump with rsi -> BIOS userbase
    53                              <1> ;          rdi -> APT load area (page aligned)
    54                              <1> ;          r15 -> Boot drive
    16                                  %include "./src/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> sysinit:    ;Control is passed here from OEMINIT
     3 00000226 E879150000          <1>     call OEMINIT    ;First we call OEMINIT
     4 0000022B 0F8263190000        <1>     jc OEMHALT      ;If it returns CF=CY, assume halt boot
     5                              <1> ;First move the OEMINIT into fs 
     6 00000231 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     7 00000236 488B3D5B0C0000      <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     8 0000023D 89F8                <1>     mov eax, edi
     9 0000023F 4889FA              <1>     mov rdx, rdi
    10 00000242 48C1EA20            <1>     shr rdx, 20h
    11 00000246 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    12 00000248 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    13                              <1> ;------------------------------------------------;
    14                              <1> ;      Copy DOS to it's final resting ground     ;
    15                              <1> ;------------------------------------------------;  
    16                              <1> dosReloc:
    17 0000024B 488D35(00000000)    <1>     lea rsi, section.resSeg.start   ;Get pointer to the start of resSeg
    18 00000252 488B3D3F0C0000      <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    19 00000259 4881C7[361B0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of resSeg
    20 00000260 4839F7              <1>     cmp rdi, rsi 
    21 00000263 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    22 00000265 B9A4110000          <1>     mov ecx, (dosLen + 7)/8
    23 0000026A F348A5              <1>     rep movsq
    24                              <1> skipDOSReloc:
    25                              <1> ;------------------------------------------------;
    26                              <1> ;              Connect Debugger                  ;
    27                              <1> ;------------------------------------------------;
    28                              <1> %if DEBUG
    29                              <1> ;Only connect if in debug mode
    30                              <1>     mov eax, 0C501h ;Connect debugger
    31                              <1>     int 35h
    32                              <1> %endif
    33                              <1> ;------------------------------------------------;
    34                              <1> ;           Sanitise the data area               ;
    35                              <1> ;------------------------------------------------;
    36                              <1> ; This call initialises ALL fields in the DOS    ;
    37                              <1> ; data area with 0's. Thus any fields, which     ;
    38                              <1> ; need to be initialised with a 0 value, are     ;
    39                              <1> ; initialised for free.                          ;
    40                              <1> ;------------------------------------------------;
    41 0000026D 488B3D240C0000      <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    42 00000274 B9[361B0000]        <1>     mov ecx, dSegLen
    43 00000279 30C0                <1>     xor al, al
    44 0000027B F3AA                <1>     rep stosb   ;and sanitise away!
    45                              <1> ;------------------------------------------------;
    46                              <1> ;          Kernel inits and adjustments          ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ;Adjust Interrupt Entries Int 00h-15h
    49                              <1> ;Assumes rbp points to DOSSEG
    50 0000027D 0F010D0A0C0000      <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    51                              <1> adjExceptions:
    52 00000284 488D3D25080000      <1>     lea rdi, exceptData
    53 0000028B 31C0                <1>     xor eax, eax             ;Start with interrupt 0
    54 0000028D B915000000          <1>     mov ecx, 21
    55 00000292 E8B10B0000          <1>     call setupInterruptBlock
    56                              <1> ;Adjust Interrupt Entries Int 20h-2Fh
    57                              <1> adjInts:
    58 00000297 488D3DC2080000      <1>     lea rdi, intData
    59 0000029E B820000000          <1>     mov eax, 20h            ;Start with interrupt 20h
    60 000002A3 B930000000          <1>     mov ecx, 30h
    61 000002A8 E89B0B0000          <1>     call setupInterruptBlock
    62                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    63                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    64                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    65                              <1> ;Now adjust int 22h and 24h correctly using DOS to get them low
    66 000002AD 488D15E0180000      <1>     lea rdx, OEMHALT ;Get segment start address
    67 000002B4 B822250000          <1>     mov eax, 2522h   ;Int 22h, set vector
    68 000002B9 CD21                <1>     int 21h
    69 000002BB 488D15D2180000      <1>     lea rdx, OEMHALT ;Get segment start address
    70 000002C2 B824250000          <1>     mov eax, 2524h
    71 000002C7 CD21                <1>     int 21h
    72                              <1> ;------------------------------------------------;
    73                              <1> ;          Driver Adjustments and inits          ;
    74                              <1> ;------------------------------------------------;
    75                              <1> ;Modify the pointers in nData before putting them in the data area
    76 000002C9 48012D1A090000      <1>     add qword [nData + drvHdr.strPtr], rbp
    77 000002D0 48012D1B090000      <1>     add qword [nData + drvHdr.intPtr], rbp
    78                              <1> ;Copy the Null driver header to its location in Sysvars
    79 000002D7 B922000000          <1>     mov ecx, drvHdr_size
    80 000002DC 488D35FD080000      <1>     lea rsi, qword [nData]
    81 000002E3 488DBD[7A000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    82 000002EA F3A4                <1>     rep movsb   
    83                              <1> 
    84                              <1> ;Adjust the addresses in the other driver headers 
    85 000002EC 488B35C20B0000      <1>     mov rsi, qword [OEMDRVCHAIN]
    86 000002F3 4889B5[7A000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    87                              <1> adjDrivers:
    88                              <1> ;Input: rsi = Effective address of driver in DOS segment
    89                              <1> ;       rbp = Ptr to the start of the DOS segment
    90                              <1> ;Output: rsi = EA of next header in DOS segment
    91 000002FA 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    92 000002FE 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    93 00000302 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    94 00000309 7408                <1>     je short .exit
    95 0000030B 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    96 0000030E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    97                              <1>     ;add rsi, drvHdr_size   ;... but definitely suggest it for kernel drivers
    98 00000311 EBE7                <1>     jmp short adjDrivers
    99                              <1> .exit:
   100                              <1> ;------------------------------------------------;
   101                              <1> ;                   MCB inits                    ;
   102                              <1> ;------------------------------------------------;
   103                              <1> makeMCBChain:
   104                              <1> ;Fill in Anchor MCB first
   105 00000313 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
   106 0000031A 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
   107 00000321 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
   108 00000324 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
   109 0000032A C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   110 0000032D 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
   111 00000333 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
   111 0000033B 000000              <1>
   112 0000033E C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
   113                              <1> 
   114 00000345 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
   115 0000034C 488905550B0000      <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
   116 00000353 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
   116 00000358 [33000000]          <1>
   117                              <1> 
   118 0000035C 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   119 0000035D E884150000          <1>     call OEMMCBINIT ;Build MCB chain
   120 00000362 5D                  <1>     pop rbp
   121 00000363 0F822B180000        <1>     jc OEMHALT
   122                              <1> ;------------------------------------------------;
   123                              <1> ;              Kernel Driver inits               ;
   124                              <1> ;------------------------------------------------;
   125                              <1> kernDrvInit:
   126                              <1>     ;rbp and fs point to DOSSEG
   127                              <1>     ;Set the CON pointer and the CLOCK pointers.
   128                              <1>     ;The standard defines that kernel drivers are such that the 
   129                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   130                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   131                              <1>     ;GET/SET TIME and GET/SET DATE
   132 00000369 488B35450B0000      <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   133 00000370 4889F3              <1>     mov rbx, rsi
   134 00000373 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   135 0000037A 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   136 0000037D 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   137 00000380 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   138 00000383 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   139 0000038A 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   140 0000038D 488D1D350B0000      <1>     lea rbx, initDrvBlk
   141                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   142 00000394 48C785[1F040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   142 0000039C 000000              <1>
   143                              <1> .init:
   144 0000039F E8F1090000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   145 000003A4 0F82EA170000        <1>     jc OEMHALT
   146 000003AA E8B0080000          <1>     call addDriverMarkers   ;Preserves all registers
   147 000003AF 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   148 000003B5 750B                <1>     jnz short .notMSD
   149 000003B7 E8470A0000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   150 000003BC 0F82D2170000        <1>     jc OEMHALT
   151                              <1> .notMSD:
   152 000003C2 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   153 000003C5 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   154 000003CC 75D1                <1>     jne short .init ;If not, goto next driver
   155                              <1> ;Finally, Eject the init routine if so desired by the implementers
   156 000003CE 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   157 000003D5 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   158 000003DC E863090000          <1>     call ejectKernelInit
   159 000003E1 0F82AD170000        <1>     jc OEMHALT
   160                              <1> ;----------------------------------------:
   161                              <1> ;           End of driver inits.         :
   162                              <1> ;----------------------------------------:
   163                              <1> ;
   164                              <1> ;----------------------------------------:
   165                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   166                              <1> ;      So called the OEM BIOS INIT       :
   167                              <1> ;----------------------------------------:
   168                              <1> ;
   169                              <1> ;----------------------------------------:
   170                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   171                              <1> ;----------------------------------------:
   172                              <1> ;
   173                              <1> ;------------------------------------------------;
   174                              <1> ;     Set up general PSP areas and DOS vars      ;
   175                              <1> ;------------------------------------------------;
   176                              <1> ;Ensure to link the default DOS vCON edit key
   177                              <1> ; controller routines before proceeding
   178 000003E7 488D85[6D2A0000]    <1>     lea rax, qword [rbp + editKeys]
   179 000003EE 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   179 000003F3 [32000000]          <1>
   180                              <1> 
   181                              <1> ;Additional DOS Vars init and fixups
   182 000003F7 64C60425[09040000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   182 000003FF FF                  <1>
   183 00000400 6466C70425-         <1>     mov word fs:[currentNdx], -1    ;Has to be -1 initially
   183 00000405 [3A070000]FFFF      <1>
   184 0000040B 66C785[1F000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   184 00000413 00                  <1>
   185 00000414 66C785[21000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   185 0000041C 00                  <1>
   186 0000041D 64C60425[D1030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   186 00000425 2F                  <1>
   187 00000426 488DBD[B4630000]    <1>     lea rdi, qword [rbp + caseMapFunc]  ;Get the function pointer
   188 0000042D 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapptr], rdi ;Store in country table
   188 00000432 [12020000]          <1>
   189 00000436 4801AD[D6010000]    <1>     add qword [rbp + charTableArray.ucTable + 1], rbp ;Fixup stored address
   190 0000043D 4801AD[DF010000]    <1>     add qword [rbp + charTableArray.filenameUCTable + 1], rbp 
   191 00000444 4801AD[E8010000]    <1>     add qword [rbp + charTableArray.filenameTerminatingTable + 1], rbp 
   192 0000044B 4801AD[F1010000]    <1>     add qword [rbp + charTableArray.collatingTable + 1], rbp 
   193                              <1> 
   194                              <1> ;Server Table setup
   195 00000452 488DBD[8F060000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   196 00000459 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   196 0000045E [931A0000]          <1>
   197                              <1> 
   198                              <1> ;Set network machine name to... nothing!
   199 00000462 488DBD[D6030000]    <1>     lea rdi, qword [rbp + machineName]
   200 00000469 B910000000          <1>     mov ecx, 10h    ;16 chars long
   201 0000046E B020                <1>     mov al, SPC ;Space char
   202 00000470 F3AA                <1>     rep stosb   ;Fill with space chars
   203                              <1> 
   204                              <1> ;Patch Data Table init
   205 00000472 488DBD[E6030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   206 00000479 488D85[61730000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   207 00000480 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   208 00000482 488D85[6B730000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   209 00000489 48AB                <1>     stosq
   210 0000048B 488D85[75730000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   211 00000492 48AB                <1>     stosq
   212 00000494 488D85[7F730000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   213 0000049B 48AB                <1>     stosq
   214                              <1> 
   215                              <1> ;Initial PSP pointer fields
   216 0000049D 488D1D440A0000      <1>     lea rbx, qword [tempPSP]
   217 000004A4 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   217 000004A9 [1F040000]          <1>
   218 000004AD 53                  <1>     push rbx
   219 000004AE 4881C380000000      <1>     add rbx, psp.dta
   220 000004B5 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   220 000004BA [17040000]          <1>
   221 000004BE 5B                  <1>     pop rbx
   222 000004BF 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   223 000004C3 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   224 000004C7 4889DA              <1>     mov rdx, rbx
   225 000004CA B822350000          <1>     mov eax, 3522h  ;Get pointer for Int 22h in rbx
   226 000004CF CD21                <1>     int 21h
   227 000004D1 48895A0A            <1>     mov qword [rdx + psp.oldInt22h], rbx
   228 000004D5 B823350000          <1>     mov eax, 3523h
   229 000004DA CD21                <1>     int 21h
   230 000004DC 48895A12            <1>     mov qword [rdx + psp.oldInt23h], rbx
   231 000004E0 B824350000          <1>     mov eax, 3524h
   232 000004E5 CD21                <1>     int 21h
   233 000004E7 48895A1A            <1>     mov qword [rdx + psp.oldInt24h], rbx
   234                              <1> ;------------------------------------------------;
   235                              <1> ;              Setup DOSMGR Hooks                ;
   236                              <1> ;------------------------------------------------;   
   237 000004EB 488DBD[9F000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   238 000004F2 488D85[767B0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   239 000004F9 48AB                <1>     stosq   ;Store ptr for LaunchTask
   240 000004FB 48AB                <1>     stosq   ;Store ptr for TerminateTask
   241                              <1> ;------------------------------------------------;
   242                              <1> ;              Setup DLLMGR Hooks                ;
   243                              <1> ;------------------------------------------------;   
   244 000004FD 488DBD[AF000000]    <1>     lea rdi, qword [rbp + dllHooks]
   245 00000504 488D85[767B0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   246 0000050B 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   247 0000050D 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   248                              <1> ;------------------------------------------------;
   249                              <1> ;               Setup Share Hooks                ;
   250                              <1> ;------------------------------------------------;
   251 0000050F 488DBD[BF000000]    <1>     lea rdi, qword [rbp + shareHooks]
   252 00000516 488D9D[767B0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   253 0000051D 488D85[707B0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   254 00000524 48AB                <1>     stosq   ;Store bad for openFileCheck
   255 00000526 4893                <1>     xchg rax, rbx
   256 00000528 48AB                <1>     stosq   ;Store good for open
   257 0000052A 48AB                <1>     stosq   ;Store good for close
   258 0000052C 4893                <1>     xchg rax, rbx
   259                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   260 0000052E B905000000          <1>     mov ecx, 5
   261 00000533 F348AB              <1>     rep stosq
   262 00000536 4893                <1>     xchg rax, rbx
   263 00000538 48AB                <1>     stosq   ;Store good for check file lock exists
   264 0000053A 4893                <1>     xchg rax, rbx
   265                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   266 0000053C B903000000          <1>     mov ecx, 3
   267 00000541 F348AB              <1>     rep stosq
   268 00000544 4893                <1>     xchg rax, rbx
   269 00000546 48AB                <1>     stosq   ;Store good for close dup file share
   270 00000548 4893                <1>     xchg rax, rbx
   271 0000054A 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   272 0000054C 48AB                <1>     stosq   ;Store bad for update dir information
   273                              <1> 
   274                              <1> ;Finish by setting up internal DOS vars from OEM passed arguments.
   275 0000054E 0FB6055F090000      <1>     movzx eax, byte [OEMBIOS]
   276 00000555 85C0                <1>     test eax, eax
   277 00000557 741B                <1>     jz short skipOEMName
   278 00000559 488DB5[02000000]    <1>     lea rsi, qword [rbp + dosBIOSName]
   279 00000560 48B8494F0000000000- <1>     mov rax, "IO"
   279 00000569 00                  <1>
   280 0000056A 488906              <1>     mov qword [rsi], rax
   281 0000056D C746082E535953      <1>     mov dword [rsi + 8], ".SYS"
   282                              <1> skipOEMName:
   283 00000574 8B054B090000        <1>     mov eax, dword [OEMVERSION]
   284 0000057A 8985[11000000]      <1>     mov dword [rbp + biosVers], eax
   285                              <1> 
   286 00000580 488B0536090000      <1>     mov rax, qword [OEMPTR]
   287 00000587 488985[15000000]    <1>     mov qword [rbp + biosPtr], rax
   288                              <1> 
   289 0000058E 0FB6051D090000      <1>     movzx eax, byte [DFLTDRIVE]
   290 00000595 31DB                <1>     xor ebx, ebx
   291 00000597 3D19000000          <1>     cmp eax, 25
   292 0000059C 0F47C3              <1>     cmova eax, ebx
   293 0000059F 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   294                              <1> 
   295 000005A5 0FB60504090000      <1>     movzx eax, byte [FILES]
   296 000005AC BB14000000          <1>     mov ebx, filesDefault
   297 000005B1 3D05000000          <1>     cmp eax, 5
   298 000005B6 0F42C3              <1>     cmovb eax, ebx
   299 000005B9 3DFE000000          <1>     cmp eax, 254
   300 000005BE 0F47C3              <1>     cmova eax, ebx
   301 000005C1 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   302                              <1> 
   303 000005C7 0FB605E3080000      <1>     movzx eax, byte [BUFFERS]
   304 000005CE BB1E000000          <1>     mov ebx, buffersDefault
   305 000005D3 85C0                <1>     test eax, eax
   306 000005D5 0F44C3              <1>     cmovz eax, ebx
   307 000005D8 3D63000000          <1>     cmp eax, 99
   308 000005DD 0F47C3              <1>     cmova eax, ebx
   309 000005E0 8805CB080000        <1>     mov byte [BUFFERS], al
   310                              <1> 
   311 000005E6 0FB605C6080000      <1>     movzx eax, byte [LASTDRIVE]
   312 000005ED BB05000000          <1>     mov ebx, lastDriveDeflt
   313 000005F2 39D8                <1>     cmp eax, ebx
   314 000005F4 0F42C3              <1>     cmovb eax, ebx
   315 000005F7 3D19000000          <1>     cmp eax, 25
   316 000005FC 0F47C3              <1>     cmova eax, ebx
   317 000005FF 8805AE080000        <1>     mov byte [LASTDRIVE], al
   318 00000605 8885[78000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   319                              <1> 
   320                              <1> ;------------------------------------------------;
   321                              <1> ;          Find largest sector size              ;
   322                              <1> ;------------------------------------------------;
   323                              <1> sectorSizeSearch:
   324                              <1> ;Done by reading DPB's for each drive
   325 0000060B 31C0                <1>     xor eax, eax
   326 0000060D 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   326 00000612 [3B000000]          <1>
   327                              <1>     ;Go thru each block individually
   328                              <1> .findLargest:
   329 00000616 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   330 0000061A 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   331 0000061F 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   332 00000623 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   333 0000062A 75EA                <1>     jne short .findLargest  ;If not, keep checking
   334 0000062C 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   334 00000631 [5B000000]          <1>
   335                              <1> ;------------------------------------------------;
   336                              <1> ;                CDS array inits                 ;
   337                              <1> ;------------------------------------------------;
   338 00000635 0FB68D[78000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   339 0000063C E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   340 00000641 E995000000          <1>     jmp initialCDSWritten ;Go past the function
   341                              <1> makeCDSArray:
   342                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   343                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   344                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   345 00000646 B85F000000          <1>     mov eax, cds_size
   346 0000064B F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   347 0000064D 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   348 00000652 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   349 00000655 31DB                <1>     xor ebx, ebx
   350 00000657 89C3                <1>     mov ebx, eax
   351 00000659 B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   352 0000065E CD21                <1>     int 21h
   353                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 00000660 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000662 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   354 00000663 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   355 00000666 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   356 0000066C C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   357 00000670 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   358                              <1> 
   359 00000678 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   359 0000067D [65000000]          <1>
   360 00000681 57                  <1>     push rdi
   361 00000682 51                  <1>     push rcx
   362 00000683 89C8                <1>     mov eax, ecx
   363 00000685 B95F000000          <1>     mov ecx, cds_size
   364 0000068A F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   365 0000068C 89C1                <1>     mov ecx, eax
   366 0000068E 31C0                <1>     xor eax, eax
   367 00000690 F3AA                <1>     rep stosb
   368 00000692 59                  <1>     pop rcx
   369 00000693 5F                  <1>     pop rdi
   370 00000694 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   370 00000699 [3B000000]          <1>
   371 0000069D B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   372                              <1> .tempCDS:
   373 000006A2 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   374 000006A4 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   375 000006A8 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   376 000006AF 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   377 000006B5 31D2                <1>     xor edx, edx    ;Use edx for flags
   378 000006B7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   379 000006BE 7409                <1>     je .skipValidCDS
   380 000006C0 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   381 000006C5 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   382                              <1> .skipValidCDS:
   383 000006C9 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   384 000006CD FFC0                <1>     inc eax ;Increment the drive letter
   385 000006CF 4881C75F000000      <1>     add rdi, cds_size   ;Goto next array entry
   386 000006D6 FFC9                <1>     dec ecx
   387 000006D8 75C8                <1>     jnz .tempCDS
   388 000006DA C3                  <1>     ret
   389                              <1> initialCDSWritten:
   390                              <1> ;------------------------------------------------;
   391                              <1> ;        Create a Default Temporary Buffer       ;
   392                              <1> ;------------------------------------------------;
   393 000006DB 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   393 000006E0 [5B000000]          <1>
   394 000006E4 81C320000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   395 000006EA 81C30F000000        <1>     add ebx, 0Fh
   396 000006F0 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   397 000006F3 B800480000          <1>     mov eax, 4800h
   398 000006F8 CD21                <1>     int 21h
   399 000006FA 0F8294140000        <1>     jc OEMHALT
   400 00000700 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   400 00000705 [5D000000]          <1>
   401 00000709 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   402 00000710 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   403 00000716 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   404 0000071C 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   405 00000724 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   406                              <1> ;------------------------------------------------;
   407                              <1> ;          Default File Handle Creation          ;
   408                              <1> ;                                                ;
   409                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   410                              <1> ;------------------------------------------------;
   411                              <1> defaultFileHandles:
   412 00000728 488D95[37010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   413 0000072F 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   413 00000734 [43000000]          <1>
   414 00000738 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   415 0000073F 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   416                              <1> 
   417 00000745 E8B8040000          <1>     call openStreams
   418 0000074A 0F8244140000        <1>     jc OEMHALT
   419                              <1> ;------------------------------------------------;
   420                              <1> ;             Print Welcome Message              ;
   421                              <1> ;------------------------------------------------;
   422 00000750 488D15D8020000      <1>     lea rdx, strtmsg
   423 00000757 B409                <1>     mov ah, 09h
   424 00000759 CD21                <1>     int 21h    
   425                              <1> ;------------------------------------------------;
   426                              <1> ;               Load CONFIG.SYS                  ;
   427                              <1> ;------------------------------------------------;
   428                              <1> ;Setup stackframe, workout base 
   429                              <1> setupFrame:
   430 0000075B 55                  <1>     push rbp
   431 0000075C 4889E5              <1>     mov rbp, rsp
   432 0000075F 4881EC68000000      <1>     sub rsp, cfgFrame_size
   433 00000766 0FB60544070000      <1>     movzx eax, byte [BUFFERS]
   434 0000076D 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   435 00000771 0FB60538070000      <1>     movzx eax, byte [FILES]
   436 00000778 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   437 0000077C 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   438 00000784 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   439 0000078C 0FB60520070000      <1>     movzx eax, byte [LASTDRIVE]
   440 00000793 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   441                              <1> 
   442 00000797 0FB61514070000      <1>     movzx edx, byte [DFLTDRIVE]    ;Get the default drive
   443 0000079E B40E                <1>     mov ah, 0Eh ;Select drive
   444 000007A0 CD21                <1>     int 21h
   445 000007A2 488D15CD020000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   446 000007A9 B43D                <1>     mov ah, 3Dh ;Open file for reading
   447 000007AB B000                <1>     mov al, ReadAccess
   448 000007AD CD21                <1>     int 21h
   449 000007AF 7205                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   450 000007B1 E832080000          <1>     call configParse ;Else, parse the config file
   451                              <1> ;------------------------------------------------;
   452                              <1> ;   Setup Final Data Areas With Overrides from   ;
   453                              <1> ;                  CONFIG.SYS                    ;
   454                              <1> ;------------------------------------------------;
   455                              <1> ;Add additional buffers.
   456                              <1> ;Add additional SFT entries.
   457                              <1> ;Add additional FCBS.
   458                              <1> ;Create a larger CDS if needed.
   459                              <1> noCfg:
   460                              <1> ;Start with buffers:
   461 000007B6 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
   462 000007BA 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
   463 000007C0 0F849D000000        <1>     je .skipBuffers
   464 000007C6 FFC9                <1>     dec ecx  ;Minus one now
   465 000007C8 64880C25[79000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   466                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   467 000007D0 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
   467 000007D5 [5B000000]          <1>
   468 000007D9 0520000000          <1>     add eax, bufferHdr_size ;eax has the size to add
   469 000007DE 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
   470 000007DF F7E1                <1>     mul ecx ;Get total size to allocate in eax
   471 000007E1 5A                  <1>     pop rdx     ;and get the total value back in rdx
   472 000007E2 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
   473 000007E4 81C30F000000        <1>     add ebx, 0Fh
   474 000007EA C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
   475 000007ED B800480000          <1>     mov eax, 4800h  ;ALLOC
   476 000007F2 CD21                <1>     int 21h
   477 000007F4 726D                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
   478                              <1>     ;Each buffer has no flags, drive number must be -1
   479 000007F6 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
   480 000007F9 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
   481 000007FC 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
   482 00000802 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   483 0000080A C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
   484 0000080E 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
   484 00000813 [5D000000]          <1>
   485 00000817 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
   486 0000081A 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   487 0000081D 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   488 0000081F FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
   489 00000821 67E321              <1>     jecxz .lastBuffer
   490                              <1> .bufferLoop:
   491 00000824 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   492 00000827 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   493 0000082A 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   494 00000830 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   495 00000834 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   496 00000837 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   497 0000083A 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   498 0000083E 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   499 00000841 FFC9                <1>     dec ecx
   500 00000843 75DF                <1>     jnz .bufferLoop
   501                              <1> .lastBuffer:
   502 00000845 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   503 00000848 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   504 0000084F 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   505 00000855 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   506 00000859 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   507 0000085C 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   508 0000085F 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   509                              <1> .skipBuffers:
   510                              <1> ;Now build a new SFT header for the number of files specified by user
   511 00000863 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
   512 00000867 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   513 0000086D 7663                <1>     jbe short .skipSFT
   514                              <1>     ;First compute how big this new arena needs to be
   515 0000086F 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
   516 00000875 B84F000000          <1>     mov eax, sft_size
   517 0000087A F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
   518 0000087C 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
   519 00000881 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
   520 00000883 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
   521 00000889 C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
   522 0000088C B800480000          <1>     mov eax, 4800h
   523 00000891 CD21                <1>     int 21h
   524 00000893 723D                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
   525 00000895 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
   525 0000089A [43000000]          <1>
   526 0000089E 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
   527 000008A1 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
   528 000008A5 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
   529 000008AC 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
   530 000008B2 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
   531 000008BA C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
   532                              <1>     ;Point rdi to first sft in this arena
   533 000008BE 488D781A            <1>     lea rdi, qword [rax + sfth_size + mcb_size]
   534                              <1> .initExtraSFTs:
   535 000008C2 66C7070000          <1>     mov word [rdi], 0
   536 000008C7 4881C74F000000      <1>     add rdi, sft_size   ;Goto next SFT
   537 000008CE FFC9                <1>     dec ecx
   538 000008D0 75F0                <1>     jnz .initExtraSFTs  ;Remember uop hybridisation (don't use loop)
   539                              <1> .skipSFT:
   540                              <1> ;FCBS now
   541 000008D2 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
   542 000008D6 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
   543 000008D9 B84F000000          <1>     mov eax, sft_size
   544 000008DE F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
   545 000008E0 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
   546 000008E5 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
   547 000008E7 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
   548 000008ED C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
   549 000008F0 B800480000          <1>     mov eax, 4800h
   550 000008F5 CD21                <1>     int 21h
   551 000008F7 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
   552 000008F9 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
   552 000008FE [6D000000]          <1>
   553 00000902 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
   554 00000906 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
   555 0000090D 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
   556 00000913 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
   557 0000091B C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
   558                              <1> .skipFCBS:
   559                              <1> ;And CDS now
   560 0000091F 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
   561 00000923 64380C25[78000000]  <1>     cmp byte fs:[lastdrvNum], cl
   562 0000092B 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
   563                              <1>     ;Else, we first free the old CDS and then reallocate
   564 0000092D 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
   564 00000932 [65000000]          <1>
   565 00000936 B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
   566 0000093B CD21                <1>     int 21h
   567 0000093D 720D                <1>     jc short .skipCDS
   568 0000093F 64880C25[78000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   569 00000947 E8FAFCFFFF          <1>     call makeCDSArray
   570                              <1> .skipCDS:
   571 0000094C 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   572 0000094F 5D                  <1>     pop rbp ;Stack frame no longer needed
   573                              <1> ;Now we close all five default handles and open AUX, CON and PRN
   574                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
   575 00000950 31DB                <1>     xor ebx, ebx
   576                              <1> closeHandlesLoop:
   577 00000952 B8003E0000          <1>     mov eax, 3e00h  ;Close
   578 00000957 CD21                <1>     int 21h
   579 00000959 FFC3                <1>     inc ebx ;Goto next handle
   580 0000095B 81FB06000000        <1>     cmp ebx, 6
   581 00000961 75EF                <1>     jne closeHandlesLoop
   582 00000963 E89A020000          <1>     call openStreams
   583                              <1> l1:
   584 00000968 BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
   585 0000096D B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
   586 00000972 CD21                <1>     int 21h         ;Malloc and get pointer in rbx
   587 00000974 0F828F000000        <1>     jc badMem
   588 0000097A 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
   589 0000097D 4881EB10000000      <1>     sub rbx, mcb_size
   590 00000984 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   591 0000098C 48890522050000      <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
   592 00000993 4C8D054E050000      <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
   593 0000099A 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
   594                              <1>     ;Input: r8 = PSP
   595                              <1>     ;       r9 = Memory Arena Pointer
   596                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
   597 0000099D E836120000          <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
   598 000009A2 720E                <1>     jc short l2 
   599 000009A4 4C8B050A050000      <1>     mov r8, qword [OEMMEMPTR]
   600 000009AB B800490000          <1>     mov eax, 4900h  ;Free the memory block
   601 000009B0 CD21                <1>     int 21h
   602                              <1> l2:
   603                              <1>     ;Load COMMAND.COM
   604                              <1>     ;Get currentPSP ptr
   605 000009B2 B462                <1>     mov ah, 62h ;Get current PSP ptr in rbx
   606 000009B4 CD21                <1>     int 21h
   607 000009B6 B419                <1>     mov ah, 19h ;Get current Drive letter in al
   608 000009B8 CD21                <1>     int 21h
   609 000009BA 0441                <1>     add al, "A"
   610 000009BC 8805BF000000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
   611                              <1> 
   612 000009C2 488D1DC7000000      <1>     lea rbx, cmdBlock
   613 000009C9 488D3518050000      <1>     lea rsi, tempPSP
   614 000009D0 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
   615 000009D4 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
   616 000009D8 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
   617 000009DC 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
   618 000009E0 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
   619 000009E7 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
   620 000009EB 488D158F000000      <1>     lea rdx, cmdLine
   621 000009F2 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
   622 000009F7 CD21                <1>     int 21h
   623 000009F9 488D1545000000      <1>     lea rdx, badCom
   624 00000A00 B409                <1>     mov ah, 09h ;Print message
   625 00000A02 CD21                <1>     int 21h
   626                              <1> hltLbl:
   627 00000A04 F4                  <1>     hlt
   628 00000A05 F390                <1>     pause
   629 00000A07 EBFB                <1>     jmp short hltLbl
   630                              <1> badMem:
   631 00000A09 488D1509000000      <1>     lea rdx, memErr
   632 00000A10 B800090000          <1>     mov eax, 0900h
   633 00000A15 CD21                <1>     int 21h
   634 00000A17 EBEB                <1>     jmp short hltLbl
   635 00000A19 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
   635 00000A22 6D6F7279204572726F- <1>
   635 00000A2B 720A0D24            <1>
   636                              <1> ;--------------------------------
   637                              <1> ;       DATA FOR SYSINIT        :
   638                              <1> ;--------------------------------
   639 00000A2F 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   639 00000A38 5343502F444F532E2E- <1>
   639 00000A41 2E0A0D24            <1>
   640 00000A45 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
   640 00000A4E 7373696E6720436F6D- <1>
   640 00000A57 6D616E6420696E7465- <1>
   640 00000A60 727072657465720A0D- <1>
   640 00000A69 24                  <1>
   641 00000A6A 434F4E00            <1> conName db "CON",0
   642 00000A6E 41555800            <1> auxName db "AUX",0
   643 00000A72 50524E00            <1> prnName db "PRN",0
   644                              <1> 
   645 00000A76 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
   645 00000A7F 5300                <1>
   646 00000A81 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0   ;ASCIIZ FOR COMMAND.COM
   646 00000A8A 442E434F4D00        <1>
   647                              <1> 
   648                              <1> cmdBlock:   ;Used also for overlay block
   649                              <1>     istruc execProg
   650 00000A90 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
   651 00000A98 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
   652 00000AA0 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
   653 00000AA8 0000000000000000    <1>     at execProg.pfcb2,      dq 0
   654                              <1>     iend
   655                              <1> exceptData:
   656 00000AB0 [0C66000000000000]  <1>     dq i0
   657 00000AB8 [1366000000000000]  <1>     dq i1
   658 00000AC0 [1D66000000000000]  <1>     dq i2
   659 00000AC8 [2766000000000000]  <1>     dq i3
   660 00000AD0 [3166000000000000]  <1>     dq i4
   661 00000AD8 [3B66000000000000]  <1>     dq i5
   662 00000AE0 [4266000000000000]  <1>     dq i6
   663 00000AE8 [4966000000000000]  <1>     dq i7
   664 00000AF0 [5066000000000000]  <1>     dq i8
   665 00000AF8 [5766000000000000]  <1>     dq i9
   666 00000B00 [5E66000000000000]  <1>     dq i10
   667 00000B08 [6566000000000000]  <1>     dq i11
   668 00000B10 [6C66000000000000]  <1>     dq i12
   669 00000B18 [7366000000000000]  <1>     dq i13
   670 00000B20 [7A66000000000000]  <1>     dq i14
   671 00000B28 [8166000000000000]  <1>     dq i15
   672 00000B30 [8866000000000000]  <1>     dq i16
   673 00000B38 [8F66000000000000]  <1>     dq i17
   674 00000B40 [9666000000000000]  <1>     dq i18
   675 00000B48 [9D66000000000000]  <1>     dq i19
   676 00000B50 [A466000000000000]  <1>     dq i20
   677 00000B58 [AB66000000000000]  <1>     dq i21
   678                              <1> 
   679                              <1> intData:
   680 00000B60 [EF57000000000000]  <1>     dq terminateProcess ;Int 20h
   681 00000B68 [D971000000000000]  <1>     dq functionDispatch ;Int 21h
   682 00000B70 [941B000000000000]  <1>     dq OEMHALT          ;Int 22h, If sysinit terminates, halt system
   683 00000B78 [3173000000000000]  <1>     dq defaultIretq     ;Int 23h, ignore any CTRL+C during init
   684 00000B80 [406A000000000000]  <1>     dq dosDefCritErrHdlr 
   685 00000B88 [196B000000000000]  <1>     dq absDiskRead      ;Int 25h
   686 00000B90 [FA6A000000000000]  <1>     dq absDiskWrite     ;Int 26h
   687 00000B98 [F657000000000000]  <1>     dq terminateRes     ;Int 27h
   688 00000BA0 [3173000000000000]  <1>     dq defaultIretq     ;Int 28h
   689 00000BA8 [3173000000000000]  <1>     dq defaultIretq     ;Int 29h
   690 00000BB0 [3173000000000000]  <1>     dq defaultIretq     ;Int 2Ah
   691 00000BB8 [3173000000000000]  <1>     dq defaultIretq     ;Int 2Bh
   692 00000BC0 [3173000000000000]  <1>     dq defaultIretq     ;Int 2Ch
   693 00000BC8 [3173000000000000]  <1>     dq defaultIretq     ;Int 2Dh
   694 00000BD0 [3173000000000000]  <1>     dq defaultIretq     ;Int 2Eh
   695 00000BD8 [807A000000000000]  <1>     dq multiplexHdlr    ;Int 2Fh, multiplex default handler
   696                              <1> nData:
   697 00000BE0 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
   698 00000BE8 0480                <1>     dw 08004h
   699 00000BEA [596A000000000000]  <1>     dq nulStrat
   700 00000BF2 [5F6A000000000000]  <1>     dq nulIntr
   701 00000BFA 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   702                              <1> 
   703                              <1> openStreams:
   704                              <1> ;If this returns with CF=CY, an error occured. Halt boot if initial set of streams
   705 00000C02 488D1565FEFFFF      <1>     lea rdx, auxName
   706 00000C09 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
   707 00000C0E CD21                <1>     int 21h
   708                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000C10 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000C12 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   709 00000C13 89C3                <1>     mov ebx, eax
   710 00000C15 B903000000          <1>     mov ecx, 3  ;
   711 00000C1A B800460000          <1>     mov eax, 4600h  ;DUP2
   712 00000C1F CD21                <1>     int 21h
   713                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C21 72(12)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   714 00000C23 B8003E0000          <1>     mov eax, 3e00h
   715 00000C28 CD21                <1>     int 21h ;Close the original handle
   716                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C2A 72(12)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   717 00000C2C B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   718 00000C31 488D1532FEFFFF      <1>     lea rdx, conName
   719 00000C38 CD21                <1>     int 21h
   720                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C3A 72(12)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   721 00000C3C 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   722 00000C3E B800450000          <1>     mov eax, 4500h  ;DUP
   723 00000C43 CD21                <1>     int 21h
   724                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C45 72(12)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   725 00000C47 B800450000          <1>     mov eax, 4500h  ;DUP
   726 00000C4C CD21                <1>     int 21h
   727                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C4E 72(12)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   728 00000C50 488D151BFEFFFF      <1>     lea rdx, prnName
   729 00000C57 B8023D0000          <1>     mov eax, 3D02h
   730 00000C5C CD21                <1>     int 21h       ;Open file
   731                              <1>     return
    13                              <2> %%_ret:
    14 00000C5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> addDriverMarkers:
   734                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
   735                              <1> ; information and owner to each memory block. Used for drivers that allocate
   736                              <1> ; their own memory using ALLOC.
   737                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
   738                              <1> ;       fs -> Dos Data Area
   739                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
   740                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
   741                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
   742 00000C5F 50                  <1>     push rax
   743 00000C60 53                  <1>     push rbx
   744 00000C61 51                  <1>     push rcx
   745 00000C62 56                  <1>     push rsi
   746 00000C63 57                  <1>     push rdi
   747 00000C64 488BBD[1F040000]    <1>     mov rdi, qword [rbp + currentPSP]
   748 00000C6B 488BB5[33000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
   749 00000C72 B844000000          <1>     mov eax, mcbSubDriver
   750 00000C77 BB4C000000          <1>     mov ebx, mcbSubDrvExtra
   751 00000C7C 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
   752 00000C83 0F44C3              <1>     cmove eax, ebx
   753 00000C86 EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
   754                              <1> .checkSubsystem:
   755 00000C88 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
   756 00000C8C 7512                <1>     jne short .gotoNextBlock
   757 00000C8E 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
   758 00000C91 39D8                <1>     cmp eax, ebx
   759 00000C93 0F45C3              <1>     cmovne eax, ebx
   760 00000C96 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
   761 00000C9A 7504                <1>     jne short .gotoNextBlock
   762 00000C9C C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
   763                              <1> .gotoNextBlock:
   764 00000CA0 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   765 00000CA3 7415                <1>     je short .exit
   766 00000CA5 31C9                <1>     xor ecx, ecx
   767 00000CA7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   768 00000CAA 48C1E104            <1>     shl rcx, 4
   769 00000CAE 4881C610000000      <1>     add rsi, mcb.program    
   770 00000CB5 4801CE              <1>     add rsi, rcx
   771 00000CB8 EBCE                <1>     jmp short .checkSubsystem
   772                              <1> .exit:
   773 00000CBA 5F                  <1>     pop rdi
   774 00000CBB 5E                  <1>     pop rsi
   775 00000CBC 59                  <1>     pop rcx
   776 00000CBD 5B                  <1>     pop rbx
   777 00000CBE 58                  <1>     pop rax
   778                              <1>     return
    13                              <2> %%_ret:
    14 00000CBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   779                              <1> 
   780                              <1> 
   781                              <1> convertBPBArray:
   782                              <1> ;rsi -> BPB array
   783                              <1> ;rbp -> Space for cl consecutive DPB's
   784                              <1> ;rdi -> Driver header
   785                              <1> ;cl = Number of BPBs to process
   786                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
   787 00000CC0 E852000000          <1>     call .findLastDPB
   788 00000CC5 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
   789                              <1> .buildNext:
   790 00000CC8 56                  <1>     push rsi
   791 00000CC9 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
   792 00000CCC B453                <1>     mov ah, 53h ;Build DPB
   793 00000CCE CD21                <1>     int 21h
   794 00000CD0 5E                  <1>     pop rsi
   795 00000CD1 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
   795 00000CD6 [77000000]          <1>
   796 00000CDA 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
   797 00000CDD 64FE0425[77000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
   798 00000CE5 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
   799 00000CE8 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
   800 00000CEC FEC5                <1>     inc ch  ;Goto next unit number
   801 00000CEE 38E9                <1>     cmp cl, ch  ;When equal, exit!
   802 00000CF0 7414                <1>     jz short .exit
   803 00000CF2 488D4535            <1>     lea rax, qword [rbp + dpb_size]
   804 00000CF6 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
   805 00000CFA 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
   806 00000CFD 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
   807 00000D04 EBC2                <1>     jmp short .buildNext
   808                              <1> .exit:
   809                              <1>     ;Now set next DPB as -1 i.e end of chain!
   810 00000D06 31C0                <1>     xor eax, eax
   811 00000D08 48FFC8              <1>     dec rax
   812 00000D0B 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
   813 00000D0F 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
   814 00000D16 C3                  <1>     ret
   815                              <1> .findLastDPB:
   816                              <1> ;Finds the last DPB and links the next DPB to it
   817 00000D17 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   817 00000D1C [3B000000]          <1>
   818 00000D20 4885C0              <1>     test rax, rax
   819 00000D23 7415                <1>     jz short .first 
   820                              <1> .lp:
   821 00000D25 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
   822 00000D2D 7406                <1>     je short .lastFound
   823 00000D2F 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
   824 00000D33 EBF0                <1>     jmp short .lp   ;And go again
   825                              <1> .lastFound:
   826 00000D35 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
   827 00000D39 C3                  <1>     ret
   828                              <1> .first:
   829                              <1> ;If this is the first DPB array, set the dpbHeadPtr
   830 00000D3A 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
   830 00000D3F [3B000000]          <1>
   831 00000D43 C3                  <1>     ret
   832                              <1> 
   833                              <1> ejectKernelInit:
   834                              <1> ;Reallocates the space allocated to the driver file after 
   835                              <1> ; init was called.
   836                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
   837                              <1> ;       r8 -> Points to the mcb header for reallocation
   838                              <1> ;Uses the sysinit init drive block. 
   839                              <1> ;rax, rbx, rflags trashed
   840                              <1> ;If returns CF=CY, error in reallocation.
   841 00000D44 53                  <1>     push rbx
   842 00000D45 488D1D7D010000      <1>     lea rbx, initDrvBlk
   843 00000D4C 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
   844 00000D50 5B                  <1>     pop rbx
   845                              <1>     ;If this endptr is zero or -1 ignore it. 
   846                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
   847 00000D51 4885C0              <1>     test rax, rax
   848                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000D54 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000D56 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   849 00000D57 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
   850                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D5A 74(56)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   851 00000D5C 48FFC8              <1>     dec rax ;Return to original value
   852 00000D5F 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
   853 00000D65 48C1E804            <1>     shr rax, 4
   854 00000D69 48C1E004            <1>     shl rax, 4
   855 00000D6D 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
   856 00000D70 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
   857 00000D72 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
   858 00000D79 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
   859 00000D7B 4981C010000000      <1>     add r8, mcb.program ;Goto program
   860 00000D82 C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
   861 00000D85 29D8                <1>     sub eax, ebx
   862 00000D87 89C3                <1>     mov ebx, eax
   863 00000D89 B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
   864 00000D8E CD21                <1>     int 21h
   865 00000D90 4158                <1>     pop r8
   866                              <1>     return
    13                              <2> %%_ret:
    14 00000D92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   867                              <1> .exit:
   868 00000D93 F8                  <1>     clc ;Make sure to clear the CF flag before returning
   869                              <1>     return
    13                              <2> %%_ret:
    14 00000D94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   870                              <1> 
   871                              <1> initDriver:
   872                              <1> ;Initialises one driver and adjusts the DOS data appropriately
   873                              <1> ;If on return CF=CY then the driver didnt want to be loaded
   874                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
   875                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
   876                              <1> ; arguments are to be passed to the driver
   877                              <1> ;Input: rsi -> driver pointer
   878                              <1> ;       rbx -> sysinit request pointer
   879                              <1> ;       rbp -> DOSSEG pointer
   880 00000D95 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   881 00000D98 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
   882 00000D9C 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
   883 00000DA2 8A85[77000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
   884 00000DA8 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
   885                              <1>     ;Protect the important registers. All others trashable
   886 00000DAB 53                  <1>     push rbx
   887 00000DAC 56                  <1>     push rsi
   888 00000DAD 55                  <1>     push rbp
   889 00000DAE FF560A              <1>     call qword [rsi + drvHdr.strPtr]
   890 00000DB1 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
   891 00000DB4 5D                  <1>     pop rbp
   892 00000DB5 5E                  <1>     pop rsi
   893 00000DB6 5B                  <1>     pop rbx
   894                              <1>     ;Check if a driver wants to not load.
   895                              <1>     ;If a kernel driver wants to stop, halt boot.
   896 00000DB7 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
   897 00000DBD 750C                <1>     jnz short .errExit
   898 00000DBF 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
   899 00000DC3 7508                <1>     jne short .notHalt
   900 00000DC5 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
   901 00000DC9 7502                <1>     jne short .notHalt
   902                              <1> .errExit:
   903 00000DCB F9                  <1>     stc
   904 00000DCC C3                  <1>     ret
   905                              <1> .notHalt:
   906                              <1>     ;Now check if the drivers were con/clock before exiting
   907 00000DCD 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
   908 00000DD1 66250300            <1>     and ax, devDrvConIn | devDrvConOut
   909 00000DD5 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
   910 00000DD7 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
   911 00000DDB 7507                <1>     jne short .checkClock
   912 00000DDD 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
   913                              <1> .checkClock:
   914 00000DE4 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
   915 00000DEA 7407                <1>     jz short .notClock
   916 00000DEC 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi
   917                              <1> .notClock:
   918                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
   919 00000DF3 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   920                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DF9 75(94)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   921                              <1>     ;Else, store the number of units as reported live by driver
   922 00000DFB 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
   923 00000DFF 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
   924 00000E02 C3                  <1>     ret
   925                              <1> 
   926                              <1> buildDPBs:
   927                              <1>     ;Here we specially handle MSD drivers, building DPBs
   928                              <1>     ;If return with CF=CY, fail. Else, all done and setup
   929                              <1>     ;Input: rbx -> Points to sysinit request packet
   930                              <1>     ;       rsi -> Driver header
   931                              <1>     ;       rbp -> DOSSEG pointer
   932                              <1>     ;Preserves those registers
   933 00000E03 53                  <1>     push rbx
   934 00000E04 55                  <1>     push rbp
   935 00000E05 56                  <1>     push rsi
   936 00000E06 57                  <1>     push rdi
   937 00000E07 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
   938 00000E0A 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
   939 00000E0E 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
   940 00000E12 B835000000          <1>     mov eax, dpb_size
   941 00000E17 F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
   942 00000E19 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
   943 00000E1E C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   944 00000E21 89C3                <1>     mov ebx, eax
   945 00000E23 B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
   946 00000E28 CD21                <1>     int 21h
   947 00000E2A 7219                <1>     jc short .badExit
   948 00000E2C 4889C5              <1>     mov rbp, rax    
   949 00000E2F C6400D50            <1>     mov byte [rax + mcb.subSysMark], mcbSubDrvDPB  ;Set DPB marker here
   950 00000E33 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS owner here
   951                              <1>     ;rsi -> Ptr to BPB
   952                              <1> 	;rbp -> Ptr to buffer to hold first DPB
   953                              <1>     ;rdi -> Ptr to the driver header
   954 00000E3B E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
   955                              <1> .exit:
   956 00000E40 5F                  <1>     pop rdi
   957 00000E41 5E                  <1>     pop rsi
   958 00000E42 5D                  <1>     pop rbp
   959 00000E43 5B                  <1>     pop rbx
   960                              <1>     return
    13                              <2> %%_ret:
    14 00000E44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   961                              <1> .badExit:
   962 00000E45 F9                  <1>     stc
   963 00000E46 EBF8                <1>     jmp short .exit
   964                              <1> 
   965                              <1> setupInterruptBlock:
   966                              <1> ;Sets up a block of interrupts with pointers provided in a table
   967                              <1> ;Input:
   968                              <1> ; al = Start interrupt
   969                              <1> ; rdi -> Start of pointer table
   970                              <1> ; cl = Last interrupt + 1
   971                              <1> ;Assumes rbp points to DOSSEG
   972 00000E48 0FB6C0              <1>     movzx eax, al
   973 00000E4B 0FB6C9              <1>     movzx ecx, cl
   974                              <1> .lp:
   975 00000E4E 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   976 00000E51 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   977 00000E54 E80E000000          <1>     call writeIDTEntry
   978 00000E59 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
   979 00000E60 FFC0                <1>     inc eax     ;Goto next interrupt number
   980 00000E62 39C8                <1>     cmp eax, ecx
   981 00000E64 75E8                <1>     jne .lp
   982                              <1>     return
    13                              <2> %%_ret:
    14 00000E66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   983                              <1> 
   984                              <1> writeIDTEntry:
   985                              <1> ;Writes the interrupt in the right place in the table
   986                              <1>     ;al = Interrupt number
   987                              <1>     ;rbx -> Handler to install
   988 00000E67 50                  <1>     push rax
   989 00000E68 53                  <1>     push rbx
   990 00000E69 0FB6C0              <1>     movzx eax, al
   991 00000E6C 4893                <1>     xchg rbx, rax
   992 00000E6E 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
   993 00000E72 48031D17000000      <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
   994 00000E79 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
   995 00000E7C 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   996 00000E80 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
   997 00000E84 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   998 00000E88 894308              <1>     mov dword [rbx + 8], eax
   999 00000E8B 5B                  <1>     pop rbx
  1000 00000E8C 58                  <1>     pop rax
  1001 00000E8D C3                  <1>     ret
  1002                              <1> 
  1003                              <1> ; DATA AREA
  1004                              <1> localIDTpointer: ;Local IDT pointer
  1005 00000E8E 0000                <1>     .Limit  dw 0
  1006 00000E90 0000000000000000    <1>     .Base   dq 0
  1007                              <1> 
  1008 00000E98 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
  1009 00000EA0 0000000000000000    <1> DOSENDPTR   dq 0    ;Pointer to the first free byte AFTER DOS
  1010 00000EA8 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
  1011                              <1> 
  1012                              <1> ;DOS Data given by OEM
  1013 00000EB0 00                  <1> FILES       db 0    ;Default number of FILES
  1014 00000EB1 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
  1015 00000EB2 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
  1016 00000EB3 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
  1017 00000EB4 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
  1018                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
  1019 00000EB5 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
  1020 00000EBD 0000000000000000    <1> OEMPTR      dq 0    ;Pointer to store at biosPtr
  1021 00000EC5 00000000            <1> OEMVERSION  dd 0    ;BIOS number, to be used by drivers for id-ing
  1022                              <1> 
  1023 00000EC9 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
  1023 00000ED2 000000000000000000- <1>
  1023 00000EDB 000000000000000000- <1>
  1023 00000EE4 00000000            <1>
  1024                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
  1025                              <1>     istruc psp
  1026 00000EE8 CD20                <1>     at psp.return,      db 0CDh, 20h
  1027 00000EEA 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
  1028 00000EF2 0000000000000000    <1>     at psp.oldInt22h,   dq 0
  1029 00000EFA 0000000000000000    <1>     at psp.oldInt23h,   dq 0
  1030 00000F02 0000000000000000    <1>     at psp.oldInt24h,   dq 0
  1031 00000F0A 0000000000000000    <1>     at psp.parentPtr,   dq 0
  1032 00000F12 FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
  1032 00000F1B FFFFFFFFFFFFFFFFFF- <1>
  1032 00000F24 FFFF                <1>
  1033 00000F26 0000000000000000    <1>     at psp.envPtr,      dq 0
  1034 00000F2E 0000000000000000    <1>     at psp.rspPtr,      dq 0
  1035 00000F36 1400                <1>     at psp.jftSize,     dw 20 
  1036 00000F38 CD21C3              <1>     at psp.unixEntry,   db 0CDh, 21h, 0C3h
  1037 00000F3B 0000000000000000    <1>     at psp.prevPSP,     dq 0
  1038 00000F43 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
  1038 00000F4C 0000000000000000    <1>
  1039 00000F54 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
  1039 00000F5D 000000000000000000- <1>
  1039 00000F66 0000                <1>
  1040 00000F68 000D00000000000000- <1>     at psp.dta,         db 0, CR, 126 dup (0)   ;Dummy empty command line
  1040 00000F71 000000000000000000- <1>
  1040 00000F7A 000000000000000000- <1>
  1040 00000F83 000000000000000000- <1>
  1040 00000F8C 000000000000000000- <1>
  1040 00000F95 000000000000000000- <1>
  1040 00000F9E 000000000000000000- <1>
  1040 00000FA7 000000000000000000- <1>
  1040 00000FB0 000000000000000000- <1>
  1040 00000FB9 000000000000000000- <1>
  1040 00000FC2 000000000000000000- <1>
  1040 00000FCB 000000000000000000- <1>
  1040 00000FD4 000000000000000000- <1>
  1040 00000FDD 000000000000000000- <1>
  1040 00000FE6 0000                <1>
  1041                              <1>     iend
    17                                  %include "./src/Sysinit/cfginit.asm"
     1                              <1> ;------------------------------------------------;
     2                              <1> ;              Process CONFIG.SYS                ;
     3                              <1> ;------------------------------------------------;
     4                              <1> ;Create a stack frame with the following order.
     5                              <1> ;Values greater than max are set to max. Values less than min are set to min.
     6                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
     7                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
     8                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
     9                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
    10                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
    11                              <1> ;
    12                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
    13                              <1> ;-------------------------------------------------------------------------;
    14                              <1> ; CONFIG.SYS processing pseudocode:-
    15                              <1> ;
    16                              <1> ; _START:
    17                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
    18                              <1> ; If (EOF encountered)
    19                              <1> ;   Insert a terminating ^Z to the end of the line. 
    20                              <1> ;   Close handle.
    21                              <1> ; Parse the line from beginning looking for a DOS terminating char.
    22                              <1> ;   If (CR or EOF encoutered before terminating char)
    23                              <1> ;       Bad line error msg. 
    24                              <1> ;       If (CR encountered)
    25                              <1> ;           Goto _START
    26                              <1> ;       Else
    27                              <1> ;           Goto _EXIT
    28                              <1> ;   Else 
    29                              <1> ;       If (Keyword AND not DEVICE) 
    30                              <1> ;           Store it's value on stack or change internal variable value
    31                              <1> ;       If (DEVICE)
    32                              <1> ;           Move endPtr after end of line and try load the driver.
    33                              <1> ;           If (driver doesn't exist or fails to init)
    34                              <1> ;               print bad driver error msg.
    35                              <1> ;       Else 
    36                              <1> ;           Bad line error msg
    37                              <1> ;       If (line terminated by CR)
    38                              <1> ;           Goto _START
    39                              <1> ; _EXIT:
    40                              <1> ;-------------------------------------------------------------------------;
    41                              <1> ; Note:
    42                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
    43                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
    44                              <1> ;   adjust the memory pointer and start loading next line.
    45                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
    46                              <1> ;   data structures according to the values on the stack frame.
    47                              <1> ;-------------------------------------------------------------------------;
    48                              <1> ;Start CONFIG.SYS parsing here
    49                              <1> configParse:
    50 00000FE8 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
    51 00000FEC 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
    52 00000FF4 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
    53 00000FFC B800480000          <1>     mov eax, 4800h
    54 00001001 BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
    55 00001006 CD21                <1>     int 21h
    56 00001008 0F825A010000        <1>     jc .stopProcessError
    57 0000100E 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
    58 00001012 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
    59 00001015 482D10000000        <1>     sub rax, mcb_size 
    60 0000101B 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
    61 00001023 31C0                <1>     xor eax, eax
    62                              <1> .nextChar:
    63 00001025 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
    64 00001029 6681FBFFFF          <1>     cmp bx, -1
    65 0000102E 0F8434010000        <1>     je .stopProcessError
    66 00001034 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
    67 00001039 B901000000          <1>     mov ecx, 1  ;Read one byte
    68 0000103E CD21                <1>     int 21h
    69 00001040 0F8222010000        <1>     jc .stopProcessError
    70 00001046 85C0                <1>     test eax, eax	;If this is zero, EOF reached, take command
    71 00001048 741B                <1>     jz .endOfFile
    72                              <1> .notEOF:
    73 0000104A 0FB602              <1>     movzx eax, byte [rdx]
    74 0000104D 3C0D                <1>     cmp al, CR
    75 0000104F 741F                <1>     je short .endOfLine
    76 00001051 3C0A                <1>     cmp al, LF
    77 00001053 7418                <1>     je short .endOfLineChange   ;Continue, but replace with standard EOL char (CR)
    78 00001055 3C1A                <1>     cmp al, EOF
    79 00001057 740C                <1>     je short .endOfFile
    80 00001059 E834070000          <1>     call .ucChar    ;Uppercase the char
    81 0000105E 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
    82                              <1> .notChar:
    83 00001060 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
    84 00001063 EBC0                <1>     jmp short .nextChar
    85                              <1> .endOfFile:
    86 00001065 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
    87                              <1> .endOfLineChange:
    88 0000106D C6020D              <1>     mov byte [rdx], CR  ;Store a terminating char at the end of the command
    89                              <1> .endOfLine:
    90                              <1> ;rdx points to terminating char
    91                              <1> ;First find the length of the instruction word
    92 00001070 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
    93                              <1> ;If this is a 1 char line, skip processing (as it is CR), and goto next line
    94 00001074 4839F2              <1>     cmp rdx, rsi
    95 00001077 7473                <1>     je .cmdPrepNew
    96 00001079 E8D2000000          <1>     call .skipSeparators  ;Skip any standard leading separators
    97 0000107E 31C9                <1>     xor ecx, ecx
    98                              <1> .cmdNameLenGet:
    99 00001080 AC                  <1>     lodsb
   100 00001081 E8B6000000          <1>     call .isCharSeparator
   101 00001086 740A                <1>     jz short .endOfCommandFound
   102 00001088 FFC1                <1>     inc ecx
   103 0000108A 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   104 00001090 72EE                <1>     jb short .cmdNameLenGet
   105                              <1> ;Else, fall through in error
   106                              <1> .endOfCommandFound:
   107                              <1> ;ecx has the length of the command
   108 00001092 81F90A000000        <1>     cmp ecx, 10
   109 00001098 0F84C0000000        <1>     je .badLineHandle
   110 0000109E 488D3D66010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   111                              <1> .cmdSearch:
   112 000010A5 803FFF              <1>     cmp byte [rdi], -1
   113 000010A8 0F84B0000000        <1>     je .badLineHandle
   114 000010AE 380F                <1>     cmp byte [rdi], cl
   115 000010B0 757A                <1>     jne short .gotoNextCmd
   116                              <1>     ;Candidate command found, check said command is the command we want
   117 000010B2 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   118 000010B6 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   119 000010BD 0F84A5000000        <1>     je .stopProcessError
   120 000010C3 57                  <1>     push rdi
   121 000010C4 51                  <1>     push rcx
   122 000010C5 48FFC7              <1>     inc rdi ;Go to next char
   123 000010C8 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   124 000010CA 59                  <1>     pop rcx
   125 000010CB 5F                  <1>     pop rdi
   126 000010CC 755E                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   127                              <1>     ;Else, rdi points to the table entry from the head of the table
   128                              <1>     ;      rcx has the length of the name field
   129                              <1>     ;rdx points to the terminating char of the line 
   130 000010CE 488D3536010000      <1>     lea rsi, .keyTbl
   131 000010D5 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   132 000010D8 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   133 000010DE 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   134 000010E1 F8                  <1>     clc ;Ensure flags are happy before entering
   135 000010E2 55                  <1>     push rbp
   136 000010E3 FFD6                <1>     call rsi    ;Call this function
   137 000010E5 5D                  <1>     pop rbp
   138 000010E6 0F8281000000        <1>     jc .stopProcessErrorNoPrint    ;If the function returns CF=CY, error exit
   139                              <1> .cmdPrepNew:
   140 000010EC 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   141 000010F4 0F8581060000        <1>     jnz .cfgExit
   142 000010FA 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   143                              <1>     ;Read the next char. 
   144                              <1>     ;If EOF, exit.
   145                              <1>     ;Else if, LF, proceed to read line routine.
   146                              <1>     ;Else, advance ptr by one and proceed to process char
   147                              <1> .endCommandClear:
   148 000010FE 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   149 00001102 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   150 00001107 B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   151 0000110C CD21                <1>     int 21h
   152 0000110E 7258                <1>     jc .stopProcessError
   153 00001110 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   154 00001112 0F8463060000        <1>     jz .cfgExit
   155                              <1>     ;Do a trash check
   156 00001118 8A02                <1>     mov al, byte [rdx]
   157 0000111A 3C1A                <1>     cmp al, EOF
   158 0000111C 0F8459060000        <1>     je .cfgExit
   159 00001122 3C0A                <1>     cmp al, LF
   160 00001124 0F84FBFEFFFF        <1>     je .nextChar
   161 0000112A EBD2                <1>     jmp short .endCommandClear  ;Loop out trailing spaces, crap chars and CR
   162                              <1> ;CONFIG.SYS utility functions
   163                              <1> .gotoNextCmd:
   164 0000112C 0FB607              <1>     movzx eax, byte [rdi]
   165 0000112F 0503000000          <1>     add eax, 3
   166 00001134 4801C7              <1>     add rdi, rax
   167 00001137 E969FFFFFF          <1>     jmp .cmdSearch
   168                              <1> .isCharSeparator:
   169                              <1> ;Input: AL = Char to check
   170                              <1> ;Output: ZF=ZE -> Char terminal
   171                              <1> ;        ZF=NZ -> Char not terminal
   172 0000113C 3C3D                <1>     cmp al, "="
   173                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000113E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001140 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   174 00001141 3C20                <1>     cmp al, SPC
   175                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001143 74(40)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00001145 3C09                <1>     cmp al, TAB
   177                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001147 74(40)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   178 00001149 3C3B                <1>     cmp al, ";"
   179                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000114B 74(40)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   180 0000114D 3C2C                <1>     cmp al, ","
   181                              <1>     return
    13                              <2> %%_ret:
    14 0000114F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> .skipSeparators:
   183                              <1> ;Input: rsi -> Start of string
   184                              <1> ;Output: rsi -> First non-terminator char after string of terminators
   185 00001150 50                  <1>     push rax
   186                              <1> .stl1:
   187 00001151 AC                  <1>     lodsb   ;Get char
   188 00001152 E8E5FFFFFF          <1>     call .isCharSeparator    ;Is it terminal?
   189 00001157 74F8                <1>     jz .stl1    ;Yes, keep going
   190 00001159 58                  <1>     pop rax
   191 0000115A 48FFCE              <1>     dec rsi
   192                              <1>     return
    13                              <2> %%_ret:
    14 0000115D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> .badLineHandle:
   195                              <1> ;If the command was unrecognised, goto next line! Do not halt!
   196 0000115E E84B000000          <1>     call .badLineErrorMsg
   197 00001163 E984FFFFFF          <1>     jmp  .cmdPrepNew
   198                              <1> 
   199                              <1> .stopProcessError:
   200                              <1> ;Print the hard error message and reset the system values
   201 00001168 E836000000          <1>     call .hardErrorMsg
   202                              <1> .stopProcessErrorNoPrint:
   203                              <1> ;Reset all values to OEM defaults
   204 0000116D 0FB6053DFDFFFF      <1>     movzx eax, byte [BUFFERS]
   205 00001174 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   206 00001178 0FB60531FDFFFF      <1>     movzx eax, byte [FILES]
   207 0000117F 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   208 00001183 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   209 0000118B 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   210 00001193 0FB60519FDFFFF      <1>     movzx eax, byte [LASTDRIVE]
   211 0000119A 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   212 0000119E E9D8050000          <1>     jmp .cfgExit
   213                              <1> .hardErrorMsg:
   214                              <1> ;Prints an error message and TERMINATE parsing
   215 000011A3 50                  <1>     push rax
   216 000011A4 52                  <1>     push rdx
   217 000011A5 488D1515000000      <1>     lea rdx, .hdLine
   218 000011AC EB09                <1>     jmp short .errorCmn
   219                              <1> .badLineErrorMsg:
   220                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   221 000011AE 50                  <1>     push rax
   222 000011AF 52                  <1>     push rdx
   223 000011B0 488D152D000000      <1>     lea rdx, .speLine
   224                              <1> .errorCmn:
   225 000011B7 B800090000          <1>     mov eax, 0900h
   226 000011BC CD21                <1>     int 21h
   227 000011BE 5A                  <1>     pop rdx
   228 000011BF 58                  <1>     pop rax
   229                              <1>     return
    13                              <2> %%_ret:
    14 000011C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   230 000011C1 0D0A4572726F722069- <1> .hdLine:    db CR,LF,"Error in processing CONFIG.SYS",CR,LF,"$"
   230 000011CA 6E2070726F63657373- <1>
   230 000011D3 696E6720434F4E4649- <1>
   230 000011DC 472E5359530D0A24    <1>
   231 000011E4 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   231 000011ED 6E6973656420636F6D- <1>
   231 000011F6 6D616E6420696E2043- <1>
   231 000011FF 4F4E4649472E535953- <1>
   231 00001208 0D0A24              <1>
   232                              <1> .keyTbl: 
   233 0000120B 05425245414B        <1>     db 5, "BREAK"           ;DONE
   234 00001211 6300                <1> 	dw .breakHandler - .keyTbl
   235 00001213 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   236 0000121B 9900                <1> 	dw .bufHandler - .keyTbl
   237 0000121D 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   238 00001225 6F05                <1> 	dw .countryScan - .keyTbl
   239 00001227 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   240 0000122E 2001                <1> 	dw .drvLoader - .keyTbl
   241 00001230 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   242 00001235 6F05                <1> 	dw .fcbHandler - .keyTbl
   243 00001237 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   244 0000123D 6004                <1> 	dw .sftHandler - .keyTbl
   245 0000123F 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   245 00001248 45                  <1>
   246 00001249 2305                <1> 	dw .lastdriveHandler - .keyTbl
   247 0000124B 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   248 00001251 6F05                <1> 	dw .shellHandler - .keyTbl
   249 00001253 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   250 0000125A 6F05                <1> 	dw .stacksHandler - .keyTbl
   251 0000125C 08445249565041524D  <1>     db 8, "DRIVPARM"
   252 00001265 6F05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   253                              <1>     ;The following three are to not cause issues with empty lines/EOF chars
   254 00001267 0352454D            <1>     db 3, "REM"
   255 0000126B 6F05                <1>     dw .comment - .keyTbl
   256 0000126D FF                  <1> 	db -1	;End of table marker
   257                              <1> 
   258                              <1> .breakHandler:
   259 0000126E 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   260 00001272 4881C605000000      <1>     add rsi, 5  ;Go past BREAK
   261                              <1>     ;This must be the word ON or OFF 
   262 00001279 E8D2FEFFFF          <1>     call .skipSeparators
   263 0000127E 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   264 00001280 66813E4F4E          <1>     cmp word [rsi], "ON"
   265 00001285 7413                <1>     je .breakOn
   266 00001287 66813E4F46          <1>     cmp word [rsi], "OF"
   267 0000128C 7506                <1>     jne .breakBad
   268 0000128E 807E0246            <1>     cmp byte [rsi + 2], "F"
   269 00001292 7408                <1>     je .breakCommon
   270                              <1> .breakBad:
   271 00001294 E815FFFFFF          <1>     call .badLineErrorMsg
   272                              <1>     return
    13                              <2> %%_ret:
    14 00001299 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   273                              <1> .breakOn:
   274 0000129A FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   275                              <1> .breakCommon:
   276 0000129C B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   277 000012A1 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 000012A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> 
   280                              <1> .bufHandler:
   281 000012A4 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   282 000012A8 4881C607000000      <1>     add rsi, 7  ;Go past BUFFERS=
   283                              <1>     ;This must be at most three digits, anything else is a failure
   284 000012AF E89CFEFFFF          <1>     call .skipSeparators
   285 000012B4 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   286 000012B7 31C9                <1>     xor ecx, ecx
   287 000012B9 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   288 000012BA 3C30                <1>     cmp al, "0"
   289 000012BC 7256                <1>     jb .bufHandlerErr
   290 000012BE 3C39                <1>     cmp al, "9"
   291 000012C0 7752                <1>     ja .bufHandlerErr
   292 000012C2 FFC1                <1>     inc ecx ;Increment char counter
   293 000012C4 AC                  <1>     lodsb   ;Get second char
   294 000012C5 E850000000          <1>     call .bufHandlerTermCheck
   295 000012CA 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   296 000012CC 3C30                <1>     cmp al, "0"
   297 000012CE 7244                <1>     jb .bufHandlerErr
   298 000012D0 3C39                <1>     cmp al, "9"
   299 000012D2 7740                <1>     ja .bufHandlerErr
   300 000012D4 AC                  <1>     lodsb   ;Check no more chars!
   301 000012D5 E840000000          <1>     call .bufHandlerTermCheck
   302 000012DA 7538                <1>     jne .bufHandlerErr
   303                              <1> .bufHandlerProcess:
   304 000012DC 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   305 000012DE 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   306                              <1> .bufHandlerLp:
   307 000012E1 AC                  <1>     lodsb   ;Get the digit
   308 000012E2 2C30                <1>     sub al, "0" ;Convert to ASCII
   309 000012E4 0FB6C0              <1>     movzx eax, al
   310 000012E7 67E30E              <1>     jecxz .bufHandlerPrepExit   ;Exit if this is the only digit
   311 000012EA D1E0                <1>     shl eax, 1  ;Multiply by 2
   312 000012EC 678D1480            <1>     lea edx, dword [4*eax + eax]    ;Multiply (2*eax) by 5
   313 000012F0 AC                  <1>     lodsb   ;Get the next digit
   314 000012F1 2C30                <1>     sub al, "0"
   315 000012F3 0FB6C0              <1>     movzx eax, al
   316 000012F6 01D0                <1>     add eax, edx    ;Add the tens to the unit
   317                              <1> .bufHandlerPrepExit:
   318 000012F8 0FB60DB2FBFFFF      <1>     movzx ecx, byte [BUFFERS]
   319 000012FF 85C0                <1>     test eax, eax
   320 00001301 0F44C1              <1>     cmovz eax, ecx  ;Replace zero with default if the user specified 0 buffers
   321 00001304 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   322 00001308 F8                  <1>     clc
   323                              <1>     return
    13                              <2> %%_ret:
    14 00001309 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> .bufHandlerMul:
   325 0000130A 2C30                <1>     sub al, "0" ;Convert to a binary value
   326 0000130C F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   327 0000130E 0FB7C0              <1>     movzx eax, ax
   328 00001311 01C2                <1>     add edx, eax
   329                              <1>     return
    13                              <2> %%_ret:
    14 00001313 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   330                              <1> .bufHandlerErr:
   331 00001314 E895FEFFFF          <1>     call .badLineErrorMsg
   332                              <1>     return
    13                              <2> %%_ret:
    14 00001319 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> .bufHandlerTermCheck:
   334 0000131A 3C20                <1>     cmp al, SPC
   335                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000131C 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   336 0000131E 3C09                <1>     cmp al, TAB
   337                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001320 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   338 00001322 3C0D                <1>     cmp al, CR
   339                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001324 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   340 00001326 3C0A                <1>     cmp al, LF
   341                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001328 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     return
    13                              <2> %%_ret:
    14 0000132A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> 
   344                              <1> ;===============================
   345                              <1> ;   Device Driver Loader here  :
   346                              <1> ;===============================
   347                              <1> .drvLoader:
   348 0000132B 488B7DB0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
   349 0000132F 4881C706000000      <1>     add rdi, 6  ;Go past DEVICE= to the pathname
   350 00001336 4889FE              <1>     mov rsi, rdi
   351 00001339 E812FEFFFF          <1>     call .skipSeparators
   352 0000133E 4889F7              <1>     mov rdi, rsi
   353 00001341 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   354                              <1> ;Now search for the first char after pathname. 
   355                              <1> .drvFindEndOfFileName:
   356 00001344 AC                  <1>     lodsb ;Get char from string name
   357                              <1>     ;Was the char a primitive string terminator?
   358 00001345 3C20                <1>     cmp al, SPC
   359 00001347 740C                <1>     je short .fileNameFound
   360 00001349 3C1A                <1>     cmp al, EOF
   361 0000134B 7408                <1>     je short .fileNameFound
   362 0000134D 3C0D                <1>     cmp al, CR
   363 0000134F 7404                <1>     je short .fileNameFound
   364 00001351 3C0A                <1>     cmp al, LF
   365 00001353 75EF                <1>     jne short .drvFindEndOfFileName
   366                              <1> .fileNameFound:
   367 00001355 48FFCE              <1>     dec rsi ;Point rsi to the space itself
   368 00001358 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   369 0000135C 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   370 0000135F 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   371 00001363 C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   372                              <1>     ;rdx -> Filename
   373                              <1>     ;Here open the file to attempt to see how much space to 
   374                              <1>     ; allocate to the file for loading. 
   375                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   376                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   377                              <1>     ; which would allow for opening of files independently of calling programs'
   378                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   379 00001366 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   380 0000136B CD21                <1>     int 21h
   381 0000136D 0F82BC020000        <1>     jc .drvBad
   382 00001373 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   383 00001376 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   384 00001378 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   385 0000137D CD21                <1>     int 21h
   386 0000137F 89C6                <1>     mov esi, eax    ;Save the file size in esi
   387 00001381 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   388 00001383 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   389 00001388 CD21                <1>     int 21h
   390 0000138A 53                  <1>     push rbx        ;Push the file handle on the stack
   391 0000138B BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   392 00001390 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   393 00001395 CD21                <1>     int 21h
   394 00001397 5B                  <1>     pop rbx         ;Get the handle back in rbx
   395 00001398 0F82A1020000        <1>     jc .drvMemClose
   396 0000139E 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   397 000013A1 B940000000          <1>     mov ecx, imageDosHdr_size
   398 000013A6 B8003F0000          <1>     mov eax, 3F00h  ;READ
   399 000013AB CD21                <1>     int 21h
   400 000013AD 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   401 000013B0 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   402 000013B3 730C                <1>     jnc short .headerReadOK
   403                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   404                              <1>     ;r8 must point to the block to free
   405 000013B5 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   406 000013BA CD21                <1>     int 21h
   407 000013BC E967020000          <1>     jmp .drvBadClose
   408                              <1> .headerReadOK:
   409                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   410 000013C1 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   411                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   412 000013C4 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   413 000013C9 7430                <1>     je short .exeDrivers
   414 000013CB 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   415 000013D0 7429                <1>     je short .exeDrivers
   416                              <1> ;.COM drivers come down here
   417                              <1>     ;Get File Image Allocation Size in ecx here.
   418                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   419 000013D2 31C9                <1>     xor ecx, ecx
   420 000013D4 31D2                <1>     xor edx, edx
   421 000013D6 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   422 000013DB CD21                <1>     int 21h
   423                              <1>     ;eax now has the filesize. 
   424 000013DD 89C1                <1>     mov ecx, eax
   425 000013DF 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   426 000013E5 81C101000000        <1>     add ecx, 1h     ;... and round up!
   427 000013EB C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   428 000013EE 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   429 000013F4 73BF                <1>     jae .drvFreeMemAndHdl
   430 000013F6 E97C000000          <1>     jmp .loadCont
   431                              <1> .exeDrivers:
   432                              <1>     ;Get the file pointer for file header
   433 000013FB 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   434 000013FE 31C9                <1>     xor ecx, ecx
   435 00001400 B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   436 00001405 CD21                <1>     int 21h
   437                              <1>     ;Now read in imageFileHeader here
   438 00001407 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   439 0000140A B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   440 0000140F B8003F0000          <1>     mov eax, 3F00h  ;READ
   441 00001414 CD21                <1>     int 21h
   442 00001416 729D                <1>     jc short .drvFreeMemAndHdl
   443 00001418 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   444 0000141D 7296                <1>     jb short .drvFreeMemAndHdl
   445 0000141F 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   446 00001425 758E                <1>     jne .drvFreeMemAndHdl
   447 00001427 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   448 0000142D 7586                <1>     jne .drvFreeMemAndHdl
   449 0000142F 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   450 00001435 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   451                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   452 0000143B B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   453 00001440 B8003F0000          <1>     mov eax, 3F00h  ;READ
   454 00001445 CD21                <1>     int 21h
   455 00001447 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   456 0000144D 3D38000000          <1>     cmp eax, 56
   457 00001452 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   458                              <1>     ;Round up size requirement.
   459                              <1>     ;If .EXE, round up to nearest section alignment
   460 00001458 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   461 0000145B 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   462 0000145E 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   463 00001460 FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   464 00001462 F7D0                <1>     not eax         ;Flip the set and clear bits
   465 00001464 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   466 00001466 01F1                <1>     add ecx, esi    ;Now round upwards!
   467 00001468 C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   468 0000146B 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   469 00001471 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   470                              <1> .loadCont:
   471 00001477 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   472 0000147C CD21                <1>     int 21h ;r8 has the pointer to the block for freeing
   473                              <1>     ;Now close the file
   474 0000147E B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   475 00001483 CD21                <1>     int 21h
   476 00001485 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   477 00001487 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   478 0000148C CD21                <1>     int 21h         ;rax gets the pointer to load the program into
   479 0000148E 0F82AB010000        <1>     jc .drvMemClose
   480                              <1>     ;Now set the subsystem marker and the owner to DOS
   481 00001494 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   482 00001498 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   483                              <1>     ;Build the overlay command block
   484 000014A0 488D1DE9F5FFFF      <1>     lea rbx, cmdBlock
   485 000014A7 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   486 000014AA 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   487 000014AE 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   488 000014B2 4881C606000000      <1>     add rsi, 6  ;Go past DEVICE= to the null terminated pathname
   489 000014B9 E892FCFFFF          <1>     call .skipSeparators
   490 000014BE 4889F2              <1>     mov rdx, rsi
   491 000014C1 B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   492 000014C6 CD21                <1>     int 21h
   493 000014C8 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   494                              <1> .badDriverLoad:
   495 000014CA 4C8B05BFF5FFFF      <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   496 000014D1 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   497 000014D6 CD21                <1>     int 21h
   498 000014D8 488D1508000000      <1>     lea rdx, .drvMemMsg
   499 000014DF B800090000          <1>     mov eax, 0900h
   500 000014E4 CD21                <1>     int 21h
   501                              <1>     return
    13                              <2> %%_ret:
    14 000014E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502 000014E7 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   502 000014F0 756768206D656D6F72- <1>
   502 000014F9 7920666F7220647269- <1>
   502 00001502 7665720D0A24        <1>
   503                              <1> .loadOk:
   504                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   505 00001508 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   506 0000150B 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   507                              <1>     ;Reset the command line to have a space at the null terminator
   508 0000150E 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   509 00001512 53                  <1>     push rbx
   510 00001513 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   511 00001516 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   512 00001518 5B                  <1>     pop rbx
   513                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   514                              <1>     ;Hence, rsi points to that byte!
   515                              <1>     ;Pointers of each header need adjustment relative to their load address,
   516                              <1>     ; and linking into the main driver chain after NUL.
   517                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   518                              <1>     ;                 Else, free using kernel eject routine.
   519 00001519 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   520                              <1> .driverPtrAdjustment:
   521 0000151A 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   522 0000151E 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   523 00001522 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   524 00001529 7408                <1>     je short .driverPtrAdjustmentDone
   525 0000152B 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   526 0000152E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   527 00001531 EBE7                <1>     jmp short .driverPtrAdjustment
   528                              <1> .driverPtrAdjustmentDone:
   529 00001533 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   530                              <1>     ;Prepare for initialising the drivers in the arena
   531                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   532 00001534 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   533 00001537 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   533 00001540 00                  <1>
   534 00001541 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   534 00001546 [1F040000]          <1>
   535 0000154A 488D1D78F9FFFF      <1>     lea rbx, initDrvBlk
   536 00001551 488B45B0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   537 00001555 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax ;and pass to driver!
   538 00001559 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   539                              <1> .driverInit:
   540 0000155D 4C87E5              <1>     xchg r12, rbp
   541 00001560 E830F8FFFF          <1>     call initDriver
   542 00001565 725E                <1>     jc short .driverBadRbpAdjust
   543 00001567 E8F3F6FFFF          <1>     call addDriverMarkers
   544 0000156C 4C87E5              <1>     xchg r12, rbp
   545 0000156F 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   546 00001575 7507                <1>     jnz short .driverInitialised
   547 00001577 E887F8FFFF          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   548 0000157C 724A                <1>     jc short .driverBad
   549                              <1> .driverInitialised:
   550 0000157E 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   551 00001585 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   552 00001589 75D2                <1>     jne short .driverInit ;If not, goto next driver
   553                              <1> ;Now we eject the init routines for the driver
   554                              <1> ;r8 points to the MCB data area already
   555 0000158B 31DB                <1>     xor ebx, ebx
   556 0000158D 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   557 00001591 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   558 00001595 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   559 0000159C 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   560 000015A1 E89EF7FFFF          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   561                              <1>     ;Link into main driver chain, 
   562                              <1>     ;r9 points to first driver in block
   563                              <1>     ;rsi points to last driver in block
   564 000015A6 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   565 000015AA 488DBF[7A000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   566 000015B1 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   567 000015B4 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   568 000015B7 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   569                              <1> .driverExit:
   570                              <1> ;Exit the init routine if it all works out, WOO!
   571                              <1> ;Return values to original registers/memory locations
   572 000015BA 644C891C25-         <1>     mov qword fs:[currentPSP], r11
   572 000015BF [1F040000]          <1>
   573 000015C3 F8                  <1>     clc
   574                              <1>     return
    13                              <2> %%_ret:
    14 000015C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> .driverBadRbpAdjust:
   576 000015C5 4C89E5              <1>     mov rbp, r12
   577                              <1> .driverBad:
   578                              <1>     ;Form the string to print
   579 000015C8 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
   580 000015CF 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
   581 000015D5 750C                <1>     jnz short .driverCharBad    ;If not, exit
   582                              <1>     ;MSD devices need to have something placed in there
   583 000015D7 48B84D534420646576- <1>     mov rax, "MSD dev "
   583 000015E0 20                  <1>
   584 000015E1 48AB                <1>     stosq   ;Store the 8 chars here
   585                              <1> .driverCharBad:
   586 000015E3 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
   587 000015E7 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
   588                              <1> .driverBadPrint:
   589 000015E9 488D1510000000      <1>     lea rdx, .driverBad1
   590 000015F0 B800090000          <1>     mov eax, 0900h  ;Print the string!
   591 000015F5 CD21                <1>     int 21h
   592 000015F7 B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
   593 000015FC CD21                <1>     int 21h
   594 000015FE EBBA                <1>     jmp short .driverExit
   595 00001600 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
   595 00001609 6E697469616C697369- <1>
   595 00001612 6E6720647269766572- <1>
   595 0000161B 3A20                <1>
   596 0000161D 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
   596 00001626 0A24                <1>
   597                              <1> ;------------------
   598                              <1> ;Bad exit cases
   599                              <1> ;------------------
   600                              <1> .drvBadClose:
   601 00001628 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   602 0000162D CD21                <1>     int 21h
   603                              <1> .drvBad:
   604 0000162F 488D1519000000      <1>     lea rdx, .drvBadMsg
   605                              <1> .drvBad2:
   606 00001636 B800090000          <1>     mov eax, 0900h
   607 0000163B CD21                <1>     int 21h
   608 0000163D F8                  <1>     clc ;Never return with CF=CY
   609                              <1>     return
    13                              <2> %%_ret:
    14 0000163E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   610                              <1> .drvMemClose:
   611 0000163F B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   612 00001644 CD21                <1>     int 21h
   613 00001646 488D159AFEFFFF      <1>     lea rdx, .drvMemMsg
   614 0000164D EBE7                <1>     jmp short .drvBad2
   615                              <1> 
   616 0000164F 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
   616 00001658 6D697373696E672066- <1>
   616 00001661 696C656E616D650D0A- <1>
   616 0000166A 24                  <1>
   617                              <1> 
   618                              <1> .sftHandler:
   619                              <1> ;This reads the line to set the number of FILE to between 1 and 254
   620 0000166B 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   621 0000166F 4881C605000000      <1>     add rsi, 5  ;Go past FILES=
   622 00001676 E8D5FAFFFF          <1>     call .skipSeparators
   623                              <1>     ;This must be at most three digits, anything else is a failure
   624 0000167B 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   625 0000167E 31C9                <1>     xor ecx, ecx
   626 00001680 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   627 00001681 3C30                <1>     cmp al, "0"
   628 00001683 0F828E000000        <1>     jb .sftHandlerErr
   629 00001689 3C39                <1>     cmp al, "9"
   630 0000168B 0F8786000000        <1>     ja .sftHandlerErr
   631 00001691 FFC1                <1>     inc ecx ;Increment char counter
   632 00001693 AC                  <1>     lodsb   ;Get second char
   633 00001694 E884000000          <1>     call .sftHandlerTermCheck
   634 00001699 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
   635 0000169B 3C30                <1>     cmp al, "0"
   636 0000169D 7278                <1>     jb .sftHandlerErr
   637 0000169F 3C39                <1>     cmp al, "9"
   638 000016A1 7774                <1>     ja .sftHandlerErr
   639 000016A3 FFC1                <1>     inc ecx ;Increment char counter
   640 000016A5 AC                  <1>     lodsb   ;Get third char
   641 000016A6 E872000000          <1>     call .sftHandlerTermCheck
   642 000016AB 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
   643 000016AD 3C30                <1>     cmp al, "0"
   644 000016AF 7266                <1>     jb .sftHandlerErr
   645 000016B1 3C39                <1>     cmp al, "9"
   646 000016B3 7762                <1>     ja .sftHandlerErr
   647 000016B5 AC                  <1>     lodsb   ;Check no more chars!
   648 000016B6 E862000000          <1>     call .sftHandlerTermCheck
   649 000016BB 755A                <1>     jne .sftHandlerErr
   650 000016BD FFC1                <1>     inc ecx ;Increment char counter
   651                              <1> .sftHandlerProcess:
   652 000016BF 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   653 000016C1 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   654                              <1> .sftHandlerLp:
   655 000016C4 FFC9                <1>     dec ecx
   656 000016C6 AC                  <1>     lodsb   ;Get the digit
   657 000016C7 E823000000          <1>     call .sftHandlerMul
   658 000016CC 67E302              <1>     jecxz .sftHandlerPrepExit
   659 000016CF EBF3                <1>     jmp short .sftHandlerLp 
   660                              <1> .sftHandlerPrepExit:
   661                              <1> ;edx has the value now, so place it in stack
   662 000016D1 81FAFE000000        <1>     cmp edx, 254
   663 000016D7 773E                <1>     ja .sftHandlerErr       ;DOS maximum number of files
   664 000016D9 0FB60DD0F7FFFF      <1>     movzx ecx, byte [FILES] ;Get default if the user specifies less than min
   665 000016E0 81FA08000000        <1>     cmp edx, 8              ;DOS minimum number of files
   666 000016E6 0F42D1              <1>     cmovb edx, ecx
   667 000016E9 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
   668 000016ED F8                  <1>     clc
   669                              <1>     return
    13                              <2> %%_ret:
    14 000016EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   670                              <1> .sftHandlerMul:
   671                              <1> ;Input:
   672                              <1> ;al = digit to add to result (ASCII digit)
   673                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
   674                              <1> ;rdx = Accumulated sum
   675                              <1> ;Output:
   676                              <1> ;rdx = Accumulated sum with al added
   677                              <1> ;eax is destroyed
   678                              <1> ;All other registers preserved
   679 000016EF 51                  <1>     push rcx
   680 000016F0 52                  <1>     push rdx
   681 000016F1 0FB6C0              <1>     movzx eax, al
   682 000016F4 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
   683 000016F9 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
   684 000016FE 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
   685 00001700 BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
   686 00001705 B964000000          <1>     mov ecx, 100
   687 0000170A 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
   688 0000170D 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
   689 00001710 F7E3                <1>     mul ebx    ;Multiply the base offset to eax
   690 00001712 5A                  <1>     pop rdx ;Get the accumulated value back
   691 00001713 01C2                <1>     add edx, eax    ;Add this result over
   692 00001715 59                  <1>     pop rcx
   693                              <1>     return
    13                              <2> %%_ret:
    14 00001716 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   694                              <1> .sftHandlerErr:
   695 00001717 E892FAFFFF          <1>     call .badLineErrorMsg
   696                              <1>     return
    13                              <2> %%_ret:
    14 0000171C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> .sftHandlerTermCheck:
   698 0000171D 3C20                <1>     cmp al, SPC
   699                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000171F 74(1C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   700 00001721 3C09                <1>     cmp al, TAB
   701                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001723 74(1C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   702 00001725 3C0D                <1>     cmp al, CR
   703                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001727 74(1C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   704 00001729 3C0A                <1>     cmp al, LF
   705                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000172B 74(1C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   706                              <1>     return
    13                              <2> %%_ret:
    14 0000172D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> 
   708                              <1> .lastdriveHandler:
   709 0000172E 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   710 00001732 4881C609000000      <1>     add rsi, 9  ;Go past LASTDRIVE=
   711 00001739 E812FAFFFF          <1>     call .skipSeparators
   712 0000173E AC                  <1>     lodsb   ;Get this char
   713 0000173F 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
   714 00001742 E84B000000          <1>     call .ucChar
   715 00001747 3C5A                <1>     cmp al, "Z"
   716 00001749 77CC                <1>     ja .sftHandlerErr
   717 0000174B 3C41                <1>     cmp al, "A"
   718 0000174D 72C8                <1>     jb .sftHandlerErr
   719 0000174F 803E0D              <1>     cmp byte [rsi], CR
   720 00001752 740F                <1>     je .ldProceed
   721 00001754 803E0A              <1>     cmp byte [rsi], LF
   722 00001757 740A                <1>     je .ldProceed
   723 00001759 803E09              <1>     cmp byte [rsi], TAB
   724 0000175C 7405                <1>     je .ldProceed
   725 0000175E 803E20              <1>     cmp byte [rsi], SPC
   726 00001761 75B4                <1>     jne .sftHandlerErr
   727                              <1> .ldProceed:
   728 00001763 2C40                <1>     sub al, "@"     ;Convert into a number 1-26 
   729 00001765 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
   730 00001768 0FB61544F7FFFF      <1>     movzx edx, byte [LASTDRIVE]
   731 0000176F 39D0                <1>     cmp eax, edx
   732 00001771 0F42C2              <1>     cmovb eax, edx
   733 00001774 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   734 00001778 F8                  <1>     clc
   735                              <1>     return
    13                              <2> %%_ret:
    14 00001779 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   736                              <1> .countryScan:
   737                              <1> .fcbHandler:
   738                              <1> .shellHandler:
   739                              <1> .stacksHandler:
   740                              <1> .drivParm:
   741                              <1> .comment:
   742                              <1>     return
    13                              <2> %%_ret:
    14 0000177A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   743                              <1> 
   744                              <1> .cfgExit:
   745 0000177B 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
   746 0000177F B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
   747 00001784 CD21                <1>     int 21h ;bx already has the handle
   748 00001786 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
   749 0000178A B800490000          <1>     mov eax, 4900h  ;FREE
   750 0000178F CD21                <1>     int 21h
   751                              <1>     return
    13                              <2> %%_ret:
    14 00001791 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   752                              <1> .ucChar:
   753                              <1> ;Input: al = Char to UC
   754                              <1> ;Output: al = UC'd char
   755 00001792 53                  <1>     push rbx    ;Save on original stack
   756 00001793 4889E3              <1>     mov rbx, rsp    ;Save across the call.
   757 00001796 50                  <1>     push rax    ;Push two copies in case we get aligned (since we 8byte)
   758 00001797 50                  <1>     push rax
   759 00001798 B813120000          <1>     mov eax, 1213h  ;Uppercase the char in al
   760 0000179D CD2F                <1>     int 2fh
   761 0000179F 4889DC              <1>     mov rsp, rbx    ;Bring back stack
   762 000017A2 5B                  <1>     pop rbx         ;Get back original rbx
   763                              <1>     return
    13                              <2> %%_ret:
    14 000017A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./src/Sysinit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> 
     3                              <1> OEMINIT PROC NEAR
     4                              <1> ;Sets the Statistical data and adds any page tables that are needed
     5                              <1> ;Entered with:
     6                              <1> ;           rsi -> BIOS userbase
     7                              <1> ;           rdi -> APT load area (page aligned)
     8                              <1> ;           r15 -> Boot drive
     9                              <1> ;------------------------------------------------;
    10                              <1> ;      Start saving basic DOS data to the        ; 
    11                              <1> ;                OEM Variables                   ;
    12                              <1> ;------------------------------------------------;
    13 000017A4 31C0                <1>     xor eax, eax    ;Drive A:
    14 000017A6 BB02000000          <1>     mov ebx, 2      ;Drive C:
    15 000017AB 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
    16 000017AF 0F45C3              <1>     cmovnz eax, ebx
    17 000017B2 8805FAF6FFFF        <1>     mov byte [DFLTDRIVE], al    ;Set default drive
    18                              <1> ;Copy DOS to its final resting place
    19 000017B8 4889351A040000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
    20 000017BF C605EAF6FFFF08      <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
    21 000017C6 C605E4F6FFFF1E      <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
    22 000017CD C605DFF6FFFF05      <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
    23 000017D4 C705E7F6FFFF000000- <1>     mov dword [OEMVERSION], 0   ;CSM BIOS
    23 000017DD 00                  <1>
    24 000017DE 48C705D4F6FFFF0000- <1>     mov qword [OEMPTR], 0       ;No pointer
    24 000017E7 0000                <1>
    25 000017E9 C605C4F6FFFF00      <1>     mov byte [OEMBIOS], 0       ;Use SCPBIOS/SCPDOS kernel names
    26                              <1>    ;If no detected Int 33h devices, halt 
    27 000017F0 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    28 000017F2 49C1E818            <1>     shr r8, 3*8
    29 000017F6 4584C0              <1>     test r8b, r8b
    30 000017F9 0F8495030000        <1>     jz OEMHALT
    31 000017FF 4889F7              <1>     mov rdi, rsi
    32 00001802 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
    33 00001809 4881C700100000      <1>     add rdi, 1000h
    34                              <1> ;------------------------------------------------;
    35                              <1> ;      Add additional page tables before the     ;
    36                              <1> ;                   data area.                   ;
    37                              <1> ;------------------------------------------------;
    38                              <1> ;This will allow for up to 64Gb of addressible space
    39                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    40 00001810 B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
    41 00001815 57                  <1>     push rdi        ;rdi points to the APT space
    42 00001816 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    42 0000181F 00                  <1>
    43                              <1> pdtLoop:
    44 00001820 48AB                <1>     stosq
    45 00001822 480500002000        <1>     add rax, 200000h
    46 00001828 FFC9                <1>     dec ecx
    47 0000182A 75F4                <1>     jnz pdtLoop
    48 0000182C 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    49                              <1> ;Now we add every 4kb page to the page directory pointer table
    50                              <1> ;15 4kb pages to consider
    51 0000182D 48893D64F6FFFF      <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
    52 00001834 57                  <1>     push rdi
    53 00001835 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    54 00001838 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    55 0000183B 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    56 00001842 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    57 00001849 B93C000000          <1>     mov ecx, 60
    58 0000184E 480D03000000        <1>     or rax, 3h      ;present and r/w
    59                              <1> pdptLoop:
    60 00001854 48AB                <1>     stosq
    61 00001856 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    62 0000185C FFC9                <1>     dec ecx
    63 0000185E 75F4                <1>     jnz pdptLoop
    64                              <1> 
    65 00001860 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
    66 00001863 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
    67                              <1> ;------------------------------------------------;
    68                              <1> ;       Set Device Driver Chain and Exit         ;
    69                              <1> ;------------------------------------------------;  
    70                              <1> ;Before we exit, set the device driver chain
    71 00001866 48B8-               <1>     mov rax, driverChain
    71 00001868 [7B7C000000000000]  <1>
    72 00001870 5F                  <1>     pop rdi
    73 00001871 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
    74 00001874 4889053AF6FFFF      <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
    75                              <1> 
    76                              <1> ;----------------------------------------------------------------
    77                              <1> ;                       PIC Remap procedure                     :
    78                              <1> ;----------------------------------------------------------------
    79                              <1> ;Remapping the IRQ lines to Interrupts 0F0h - 0FFh
    80 0000187B FA                  <1>     cli
    81 0000187C B0FF                <1>     mov al, 0FFh    ;Mask all interrupts 
    82 0000187E E621                <1>     out 021h, al
    83 00001880 E6A1                <1>     out 0A1h, al
    84 00001882 0F010D68030000      <1>     sidt [oemIDTptr]    ;Get the idt here
    85 00001889 488B3563030000      <1>     mov rsi, qword [oemIDTptr.Base] ;Get the base ptr
    86 00001890 4889F7              <1>     mov rdi, rsi
    87 00001893 4881C600020000      <1>     add rsi, 020h*10h
    88 0000189A 4881C7000F0000      <1>     add rdi, 0F0h*10h
    89 000018A1 B920000000          <1>     mov ecx, 2*10h    ;Copy the hardware IRQ pointers high!
    90 000018A6 F348A5              <1>     rep movsq
    91                              <1> 
    92 000018A9 B011                <1>     mov al, 11h        ;bit 10h and 1h = Start initialisation
    93 000018AB E620                <1>     out 020h, al
    94 000018AD E680                <1>     out 080h, al    
    95 000018AF E6A0                <1>     out 0A0h, al
    96 000018B1 E680                <1>     out 080h, al    
    97 000018B3 B0F0                <1>     mov al, 0F0h       ;PIC1 to take Int 0F0h - F7h
    98 000018B5 E621                <1>     out 021h, al
    99 000018B7 E680                <1>     out 080h, al    
   100 000018B9 0408                <1>     add al, 8        ;PIC2 to take Int  F8h - FFh
   101 000018BB E6A1                <1>     out 0A1h, al 
   102 000018BD E680                <1>     out 080h, al    
   103 000018BF B004                <1>     mov al, 4
   104 000018C1 E621                <1>     out 021h, al    ;Tell PIC 1 that there is a PIC 2 at IRQ2 (00000100)
   105 000018C3 E680                <1>     out 080h, al    
   106 000018C5 FEC8                <1>     dec al
   107 000018C7 FEC8                <1>     dec al
   108 000018C9 E6A1                <1>     out 0A1h, al    ;Tell PIC 2 its cascade identity (00000010)
   109 000018CB E680                <1>     out 080h, al
   110 000018CD B001                <1>     mov al, 01h        ;Initialise in 8086 mode
   111 000018CF E621                <1>     out 021h, al
   112 000018D1 E680                <1>     out 080h, al    
   113 000018D3 E6A1                <1>     out 0A1h, al
   114 000018D5 E680                <1>     out 080h, al    
   115 000018D7 0F011D13030000      <1>     lidt [oemIDTptr] 
   116 000018DE 31C0                <1>     xor eax, eax    ;Unmask all interrupts 
   117 000018E0 E621                <1>     out 021h, al
   118 000018E2 E6A1                <1>     out 0A1h, al
   119 000018E4 FB                  <1>     sti
   120                              <1> ;Ensure that interrupts are still masked
   121 000018E5 C3                  <1>     ret
   122                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
   123                              <1> OEMINIT ENDP
   124                              <1> 
   125                              <1> OEMMCBINIT PROC NEAR
   126 000018E6 B820E80000          <1>     mov eax, 0E820h ;Get memory map
   127 000018EB CD35                <1>     int 35h ; rsi has pointer to memory map
   128 000018ED 488B05E5020000      <1>     mov rax, qword [biosUBase]
   129 000018F4 E8F6000000          <1>     call .mcbFindAddress
   130 000018F9 7341                <1>     jnc .mcbi1  ;If found, proceed
   131                              <1>     ;Here, we try use E801h
   132 000018FB B801E80000          <1>     mov eax, 0E801h
   133 00001900 CD35                <1>     int 35h
   134 00001902 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   135 00001905 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   136 00001908 85C0                <1>     test eax, eax
   137 0000190A 7417                <1>     jz .worst
   138 0000190C C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   139 0000190F C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   140 00001912 8905C9020000        <1>     mov dword [loProtMem], eax
   141 00001918 891DC7020000        <1>     mov dword [hiProtMem], ebx
   142 0000191E E919010000          <1>     jmp mcbBuild
   143                              <1> .worst:
   144                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   145 00001923 B800002000          <1>     mov eax, 200000h
   146 00001928 488B1DAA020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
   147 0000192F 29D8                <1>     sub eax, ebx
   148 00001931 8905AA020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   149 00001937 E900010000          <1>     jmp mcbBuild 
   150                              <1> .mcbi1:
   151 0000193C 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   152 0000193F 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   152 00001948 00                  <1>
   153 00001949 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   154 0000194D 0F85BC000000        <1>     jne .mcbFail
   155 00001953 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   156                              <1>     ;PCI hole always exists so this value will always be a dword
   157 00001957 890584020000        <1>     mov dword [loProtMem], eax
   158 0000195D 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   159 00001960 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   160 00001963 4881FB00000001      <1>     cmp rbx, 1000000h  
   161 0000196A 773A                <1>     ja .skipISA
   162                              <1> ;Here we deal with ISA hole issues
   163 0000196C B820E80000          <1>     mov eax, 0E820h
   164 00001971 CD35                <1>     int 35h
   165 00001973 48B800000001000000- <1>     mov rax, 1000000h
   165 0000197C 00                  <1>
   166 0000197D E86D000000          <1>     call .mcbFindAddress
   167 00001982 0F82B4000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   168 00001988 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   168 00001991 00                  <1>
   169 00001992 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   170 00001996 0F85A0000000        <1>     jne mcbBuild  
   171 0000199C 488B5808            <1>     mov rbx, qword [rax + 8]
   172 000019A0 891D3F020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   173                              <1> .skipISA:
   174 000019A6 B820E80000          <1>     mov eax, 0E820h
   175 000019AB CD35                <1>     int 35h
   176 000019AD 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   176 000019B6 00                  <1>
   177 000019B7 E833000000          <1>     call .mcbFindAddress
   178 000019BC 727E                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   179 000019BE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   179 000019C7 00                  <1>
   180 000019C8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   181 000019CC 756E                <1>     jne mcbBuild   
   182 000019CE 488B5808            <1>     mov rbx, qword [rax + 8]
   183                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   184 000019D2 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   184 000019DB 00                  <1>
   185 000019DC 4839CB              <1>     cmp rbx, rcx
   186 000019DF 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   187 000019E3 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   188 000019EA E94D000000          <1>     jmp mcbBuild
   189                              <1> .mcbFindAddress:
   190                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   191                              <1> ;Entry: rax = Address of arena to search for
   192                              <1> ;       rsi = Pointer to memory map
   193                              <1> ;       ecx = Number of 24 byte entries
   194                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   195                              <1> ;       CF=CY : value in rax not found
   196 000019EF 56                  <1>     push rsi
   197 000019F0 51                  <1>     push rcx
   198 000019F1 50                  <1>     push rax
   199                              <1> .mfa0:
   200 000019F2 483B06              <1>     cmp rax, qword [rsi]
   201 000019F5 7410                <1>     je .mcbAddressFound
   202 000019F7 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   203 000019FE FFC9                <1>     dec ecx
   204 00001A00 79F0                <1>     jns .mfa0
   205                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   206 00001A02 58                  <1>     pop rax
   207 00001A03 59                  <1>     pop rcx
   208 00001A04 5E                  <1>     pop rsi
   209 00001A05 F9                  <1>     stc
   210 00001A06 C3                  <1>     ret
   211                              <1> .mcbAddressFound:
   212 00001A07 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   213 00001A0A 59                  <1>     pop rcx ;Pop old rax value off
   214 00001A0B 59                  <1>     pop rcx
   215 00001A0C 5E                  <1>     pop rsi
   216 00001A0D F8                  <1>     clc
   217 00001A0E C3                  <1>     ret
   218                              <1> .mcbFail:
   219 00001A0F 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   220 00001A16 B804130000          <1>     mov eax, 1304h
   221 00001A1B CD30                <1>     int 30h
   222 00001A1D E972010000          <1>     jmp OEMHALT
   223 00001A22 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   223 00001A2B 6C6F636174696F6E20- <1>
   223 00001A34 4572726F720A0D00    <1>
   224                              <1> 
   225                              <1> mcbBuild:
   226                              <1> ;Actually build the MCB chain here
   227                              <1> ;Start by computing the difference between userbase and DOS area
   228 00001A3C 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   229 00001A43 488B355EF4FFFF      <1>     mov rsi, qword [MCBANCHOR]  
   230 00001A4A 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   231 00001A4D 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   232 00001A51 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   233 00001A57 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   234 00001A5A 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   235 00001A5D 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   236 00001A60 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   237 00001A66 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   238 00001A6C 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   238 00001A75 00                  <1>
   239 00001A76 0F8218010000        <1>     jb OEMHALT
   240 00001A7C C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   241 00001A7F 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   242 00001A82 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   243 00001A85 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   244 00001A8D 31F6                <1>     xor esi, esi
   245 00001A8F 8B354C010000        <1>     mov esi, dword [loProtMem]
   246 00001A95 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   247 00001A9B C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   248 00001A9E 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   249                              <1> 
   250                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   251 00001AA1 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   251 00001AAA 00                  <1>
   252 00001AAB 746C                <1>     jz .skipISA
   253                              <1>     ;Here if an ISA hole exists, place a MCB around it
   254 00001AAD 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   255                              <1>     ;Remove one MCB worth of space from alloc
   256 00001AB4 31C9                <1>     xor ecx, ecx
   257 00001AB6 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   258 00001AB9 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   259 00001ABF C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   260 00001AC2 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   261 00001AC5 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   262 00001AC8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   263 00001ACB 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   264 00001AD3 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   264 00001ADC 00                  <1>
   265 00001ADD 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   266 00001AE0 480510000000        <1>     add rax, mcb_size
   267 00001AE6 4829C1              <1>     sub rcx, rax    ;Take their difference
   268 00001AE9 C1E904              <1>     shr ecx, 4
   269 00001AEC 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   270 00001AEF C1E104              <1>     shl ecx, 4  ;Get bytes again
   271 00001AF2 4881C310000000      <1>     add rbx, mcb_size
   272 00001AF9 4801CB              <1>     add rbx, rcx
   273                              <1>     ;RBX should now be at 16Mb
   274 00001AFC C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   275 00001AFF 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   276 00001B07 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   277 00001B0D C1E904              <1>     shr ecx, 4  ;Get paragraphs
   278 00001B10 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   279 00001B16 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   280                              <1> .skipISA:
   281                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   282                              <1>     ;rbx points to a block with "Z" marker
   283 00001B19 813DC6000000000000- <1>     cmp dword [longMem], 0
   283 00001B22 00                  <1>
   284 00001B23 746E                <1>     jz .exit
   285                              <1>     ;Add PCI hole MCB
   286 00001B25 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   287                              <1>     ;Remove one MCB worth of space from alloc
   288 00001B2C 31C9                <1>     xor ecx, ecx
   289 00001B2E 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   290 00001B31 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   291 00001B37 C1E104              <1>     shl ecx, 4  ;Get bytes
   292 00001B3A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   293 00001B3D 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   294 00001B40 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   295 00001B43 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   296 00001B4B 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   296 00001B54 00                  <1>
   297 00001B55 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   298 00001B58 480510000000        <1>     add rax, mcb_size
   299 00001B5E 4829C1              <1>     sub rcx, rax    ;Take their difference
   300 00001B61 C1E904              <1>     shr ecx, 4
   301 00001B64 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   302 00001B67 C1E104              <1>     shl ecx, 4  ;Get bytes again
   303 00001B6A 4881C310000000      <1>     add rbx, mcb_size
   304 00001B71 4801CB              <1>     add rbx, rcx
   305                              <1>     ;RBX should now be at 4Gb
   306 00001B74 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   307 00001B77 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   308 00001B7F 488B0D63000000      <1>     mov rcx, qword [longMem]
   309 00001B86 48C1E904            <1>     shr rcx, 4
   310 00001B8A 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   311 00001B90 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   312                              <1> .exit:
   313 00001B93 C3                  <1>     ret
   314                              <1> OEMMCBINIT ENDP
   315                              <1> 
   316                              <1> OEMHALT PROC    NEAR
   317                              <1> ;If a critical error occurs during sysinit, fail through here
   318                              <1> ;Int 22h, 23h and 24h point here during sysinit
   319 00001B94 488D2D0C000000      <1>     lea rbp, hltmsg
   320 00001B9B B804130000          <1>     mov eax, 1304h
   321 00001BA0 CD30                <1>     int 30h
   322                              <1> .ei0:
   323 00001BA2 F4                  <1>     hlt
   324 00001BA3 F390                <1>     pause
   325 00001BA5 EBFB                <1>     jmp short .ei0
   326 00001BA7 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   326 00001BB0 7469616C6973696E67- <1>
   326 00001BB9 20534350444F532E53- <1>
   326 00001BC2 59532E205379737465- <1>
   326 00001BCB 6D2068616C74696E67- <1>
   326 00001BD4 2E2E2E00            <1>
   327                              <1> OEMHALT ENDP
   328                              <1> 
   329                              <1> OEMCALLBK PROC NEAR
   330 00001BD8 C3                  <1>     ret
   331                              <1> OEMCALLBK ENDP
   332                              <1> 
   333                              <1> ;OEM Only variables are permitted in this file. They are not 
   334                              <1> ; visible to SYSINIT
   335 00001BD9 0000000000000000    <1> biosUBase   dq 0
   336 00001BE1 00000000            <1> loProtMem   dd 0
   337 00001BE5 00000000            <1> hiProtMem   dd 0
   338 00001BE9 0000000000000000    <1> longMem     dq 0
   339                              <1> oemIDTptr:      ;Local IDT pointer
   340 00001BF1 0000                <1>     .Limit  dw 0
   341 00001BF3 0000000000000000    <1>     .Base   dq 0
    19                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    20                                  %include "./src/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   resb mcb_size   ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   resb 1    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    resd 1    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     resq 1    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33 0000009C ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     resq 1  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   resq 1  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare resq 1  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  resb sfth_size
   149 00000141 <res 4Fh>           <1>     firstSft    resb sft_size
   150 00000190 <res 4Fh>           <1>     secondSft   resb sft_size
   151 000001DF <res 4Fh>           <1>     thirdSft    resb sft_size
   152 0000022E <res 4Fh>           <1>     fourthSft   resb sft_size
   153 0000027D <res 4Fh>           <1>     fifthSft    resb sft_size
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  resb 1  ;Editable by 21h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   resb 1  ;Increments on each 21h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 21h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 resb 1  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to Int 24h x
   182 00000408 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  resw 1  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction resb 1  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  resb 1  ;Error Class
   188 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   189 00000417 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt23hRSP  resq 1  ;Saves RSP across an Int 23h call
   193 0000042F ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 21h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  resb 1  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int21h or returning Int 23h
   201 0000043B ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   207 0000045F ??                  <1>     volIdFlag   db ?    ;If set, we are searching for a volume ID
   208 00000460 ????????????????    <1>     xInt24hRSP  resq 1  ;RSP across an Int 24h call
   209 00000468 ??                  <1>     Int24bitfld resb 1  ;Copies the bit field given to the Int 24h handler
   210 00000469 ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   211 0000046A ??                  <1>     Int24Fail   resb 1  ;Set if Int 24h returned fail
   212                              <1> 
   213 0000046B ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 21h entry if called from within Int 21h
   214 00000473 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   215 0000047B ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 21h
   216 00000483 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 21 call
   217 0000048B ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   218                              <1> ;The below flag tells DOS to print ^C in the termination function
   219 0000048C ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   220 0000048D ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   221                              <1> ;Time stuff
   222                              <1> ;Read the below two as a word
   223 0000048E ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   224 0000048F ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   225 00000490 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   226 00000491 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   227 00000493 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   228                              <1> 
   229 00000494 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   230 00000495 ??                  <1>     int28Flag   resb 1  ;If set, Int 28h should be called, if clear no
   231 00000496 ??                  <1>     Int24Trans  resb 1  ;Set to -1 if Abort translated to Fail
   232                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   233                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   234                              <1> ; without forcing to re-build the whole primary request block.
   235                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   236                              <1> ; with secondary char output going through the secondary header
   237                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   238                              <1> ; for output)
   239                              <1> ;ioReqPkt is the largest possible packet
   240 00000497 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   241 000004C1 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   242                              <1>     altRet: ;Accessed as a qword
   243 000004EB <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   244 00000515 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   245                              <1> ;Swappable Buffers
   246 00000516 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   247                              <1>     ;We add an additional byte to save ah too
   248 0000051C ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   249 0000051E <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   250 0000059E <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   251 0000061E ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   252 00000626 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   253 0000062E ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   254                              <1> ;Misc bookkeeping flags and vars
   255 0000062F <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   256 0000065A <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   257 0000067A <res 5Fh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   258 000006D9 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   259 000006E5 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   260 000006F1 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   261 000006F9 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   262 000006FA ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   263 000006FB ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   264 000006FC ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   265 000006FD ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   266 000006FE ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   267 000006FF ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   268 00000700 ??                  <1>     rwFlag      resb 1  ;00h=Read, 1=Write, read/write/share error reporting
   269 00000701 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   270 00000702 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   271                              <1> 
   272 00000703 ??                  <1>     vConInsert  resb 1  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   273 00000704 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   274 00000705 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   275 00000706 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   276 00000707 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   277 00000708 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   278 00000709 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   279                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   280                              <1> workingDD:  ;Create a symbol for the working device driver too
   281 0000070A ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   282 00000712 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   283 0000071A ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   284                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   285                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   286 00000722 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   287 0000072A ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   288 00000732 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   289 0000073A ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   290 0000073C ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   291 0000073E ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   292                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   293                              <1> ; and 32 byte offset into the sector for directory
   294 00000746 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   295                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   296                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   297 0000074E ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   298                              <1> ;***************************************************|
   299                              <1> ; Needs to be set up before any file access         |
   300                              <1> ; These vars keep track of file access properties   |
   301                              <1> ;   and must be used only for such purposes.        |
   302                              <1> ;***************************************************|
   303 00000750 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   304 00000754 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   305                              <1> 
   306 00000758 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   307 0000075C ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   308 0000075D ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   309                              <1> 
   310 00000765 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   311 00000767 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   312                              <1> ;***************************************************|
   313 0000076B ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   314 0000076F ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   315 00000773 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   316 00000774 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   317 00000778 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   318 0000077C ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   319                              <1> ;Directory stuff
   320 00000780 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   321 00000784 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   322 00000788 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   323 0000078A ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   324                              <1> ;Error DPB 
   325 0000078E ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   326 00000796 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   327                              <1>     
   328 00000797 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   329 000007C2 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   330                              <1> ;Stacks and scratch SFT
   331 000007E2 ????????????        <1>     alignb  8
   332 000007E8 <res 528h>          <1>     critStack   resq 165
   333 00000D10 ????????????????    <1>     critStakTop resq 1
   334                              <1> 
   335 00000D18 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   336                              <1>     
   337 00000D67 ??                  <1>     alignb  8
   338 00000D68 <res 638h>          <1>     AuxStack    resq 199
   339 000013A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   340 000013A8 <res 638h>          <1>     DiskStack   resq 199
   341 000019E0 ????????????????    <1>     DiskStakTop resq 1
   342                              <1> 
   343 000019E8 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   344 000019E9 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   345                              <1>     ;The above is used in create and delete for volume labels only. Otherwise is -1.
   346                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   347 000019EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   348 00001A5A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   349                              <1> ;Exception handler vars in SDA now 
   350 00001A82 <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   351 00001A92 ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   352                              <1>     sdaLen      equ     $ - sda 
   353                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   354                              <1> 
   355                              <1> ;Additional variables NOT in the SDA
   356 00001A93 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   357 00001A9B ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   358 00001A9C <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   359                              <1>     ;for saving the current header when quickly doing a second request
   360                              <1> 
   361 00001AC6 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   362 00001AC7 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   363                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   364                              <1> inExtASCII:
   365 00001AC9 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   366 00001ACA ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   367                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   368                              <1>     ; copy of the date/time record
   369                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   370                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   371                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   372                              <1>     ; to the read IDT routine".
   373                              <1>     dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   374 00001ACC ????                <1>         .limit  dw ?
   375 00001ACE ????????????????    <1>         .base   dq ?
   376                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   377                              <1>     ; stack. In Int 2Fh, this could overwrite user data if the functions
   378                              <1>     ; were allowed to write to original callers register stack. 
   379                              <1>     ; So we have this structure below that is used by these functions to 
   380                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   381                              <1>     ; through the multiplexer we never will read this structure. 
   382                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   383 00001AD6 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
   384                              <1>     dSegLen     equ     $
    21                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    22                                  %define currSegVBase section.resSeg.vstart
    23                                  %include "./src/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 98 ;.98
    10                              <1> dosRev   equ 0  ;Reserved for revision number. Byte at most.
    11                              <1> dosVerFlags equ 0   ;Reserved, byte at most.
    12                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    13                              <1> 
    14 00000000 0062                <1> dosVersion  dw dosVerMac    ;DOS version number
    15 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    15 0000000B 535953              <1>
    16 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    16 00000017 535953              <1>
    17                              <1> ;-----------------------------------:
    18                              <1> ;        Static Data Tables         :
    19                              <1> ;-----------------------------------:
    20                              <1> ;IO Char table
    21                              <1> ;This table has Request header length, command code and error flags
    22                              <1> ; as a packed DWORD entry
    23                              <1> ioRqCmdErrTbl:
    24                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    25                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    26 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    27 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    28 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    29 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    30 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    31 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    32                              <1> 
    33                              <1> 
    34                              <1> 
    35                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    36                              <1> ; wish to install their own custom logic. The table below is NOT patched
    37                              <1> ; but instead, the function below gets replaced. By default, it points to 
    38                              <1> ; the function editKeys in charFunc.asm. 
    39 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    40 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    41 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    42                              <1> ;Extended ASCII keys with special meanings
    43 0000003C 3B                  <1> extKeyTbl   db eF1
    44 0000003D 7D29                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    45 0000003F 3C                  <1>             db eF2
    46 00000040 6F29                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    47 00000042 3D                  <1>             db eF3
    48 00000043 7629                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    49 00000045 3E                  <1>             db eF4
    50 00000046 AB29                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    51 00000048 3F                  <1>             db eF5
    52 00000049 F029                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    53 0000004B 40                  <1>             db eF6
    54 0000004C 062A                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    55 0000004E 41                  <1>             db eF7
    56 0000004F 0D2A                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    57 00000051 4B                  <1>             db eCursL
    58 00000052 D428                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    59 00000054 4D                  <1>             db eCursR
    60 00000055 7D29                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    61 00000057 52                  <1>             db eIns
    62 00000058 182A                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    63 0000005A 53                  <1>             db eDel
    64 0000005B 1F2A                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    65                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    66                              <1> 
    67                              <1> ;When counting the number of days, first compute the number of years since
    68                              <1> ; 1980 and your year. 
    69                              <1> ;Then, using the table below, find the number of leap years between 1980
    70                              <1> ; and (YourYear - 1). 
    71                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    72                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    73                              <1> ;
    74                              <1> ;Use the months table to get the number of days in a normal month as leap 
    75                              <1> ; years are added using the previous comment.
    76                              <1> 
    77                              <1> ;This table is the number of days in the month
    78                              <1> ;The function which updates the days in Feb writes the number to this table
    79                              <1> monthsTbl:  
    80 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    80 00000066 1F1E1F              <1>
    81                              <1> 
    82                              <1> ;Error tables
    83                              <1> hardXlatTbl:
    84                              <1> ;Hard error xlat table. Used so that it can be patched by 
    85                              <1> ; multitaskers and network tools as opposed to having a static
    86                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    87 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    88 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    89 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    90 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    91 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    92 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    93 0000006F 19                  <1>     db errSekErr    ;Seek error
    94 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    95 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    96 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    97 00000073 1D                  <1>     db errWF        ;Write fault
    98 00000074 1E                  <1>     db errRF        ;Read fault
    99 00000075 1F                  <1>     db errGF        ;General fault
   100                              <1>     ;The following two adjust for share errors
   101 00000076 1F                  <1>     db errGF        ;Sharing violations
   102 00000077 1F                  <1>     db errGF        ;File Lock violation
   103 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   104                              <1> hardXlatTblL equ $ - hardXlatTbl
   105                              <1> errXlatTbl:
   106                              <1> ;Each entry is n bytes long, defined as
   107                              <1> ; Byte 0      : DOS function number for which translation will occur
   108                              <1> ; Byte 1      : Length of the table entry - 2
   109                              <1> ; Bytes n - 3 : Acceptable Error codes
   110                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   111                              <1> ;The table is terminated with a single -1 byte
   112                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   113                              <1> ; only on entry to a disk function
   114 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   115 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   116 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   117 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   118 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   119 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   120 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   121 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   122 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   123 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   124 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   125 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   126 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   127 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   128 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   129 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   130 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   131 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   132 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   133 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   134 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   135 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   136 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   137 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   138 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   139 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   140 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   141 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   142 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   143 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   144 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   145 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   146 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   147 00000114 FF                  <1>     db -1   ;End Of Table marker
   148                              <1> 
   149                              <1> 
   150                              <1> extErrTbl:
   151                              <1> ;This table contains the default values for how to respond
   152                              <1> ; to particular errors. Fields with -1 need to be filled in before
   153                              <1> ; setting variables using this table.
   154                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   155                              <1> ; Byte 0: Extended Error Code as a byte
   156                              <1> ; Byte 1: Error Class
   157                              <1> ; Byte 2: Error Suggested Action
   158                              <1> ; Byte 3: Error Locus
   159                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   160                              <1> ;
   161                              <1> ;Error 01: Invalid function number
   162 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   163                              <1> ;Error 02: File not found
   164 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   165                              <1> ;Error 03: Path not found
   166 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   167                              <1> ;Error 04: Too many open handles, and no handles are left
   168 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   169                              <1> ;Error 05: Access being denied
   170 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   171                              <1> ;Error 06: Invalid File handle being provided
   172 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   173                              <1> ;Error 07: MCB chain destroyed
   174 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   175                              <1> ;Error 08: No Memory remaining
   176 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   177                              <1> ;Error 09: Invalid MCB block Address
   178 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   179                              <1> ;Error 0A: Bad Environment block
   180 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   181                              <1> ;Error 0B: Data provided in a bad format
   182 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   183                              <1> ;Error 0C: Access Code Invalid
   184 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   185                              <1> ;Error 0D: Error due to Invalid Data provided
   186 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   187                              <1> ;Error 0F: Error due to a bad drive letter being provided
   188 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   189                              <1> ;Error 10: Error due to attempting to delete the CWD
   190 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   191                              <1> ;Error 11: Error due to a unknown device being used
   192 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   193                              <1> ;Error 12: No more file handles available
   194 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 50: Network request not supported
   196 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   197                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   198 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   199                              <1> ;Error 21: File Locking Violation
   200 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   201                              <1> ;Error 54: Too many levels of redirection error
   202 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   203                              <1> ;Error 56: Bad resource password provided
   204 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   205                              <1> ;Error 52: Directory already exists
   206 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   207                              <1> ;Error 32: Network request not supported by DOS
   208 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   209                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   210 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   211                              <1> ;Error 57: Bad parameter in request
   212 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   213                              <1> ;Error 53: Fail was returned from Int 24h
   214 0000017D 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   215                              <1> ;Error 24: Sharing Buffer Full
   216 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   217 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   218                              <1> 
   219                              <1> ;Nationalisation stuff
   220                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   221 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   222 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   222 0000019A 535953000000000000- <1>
   222 000001A3 000000000000000000- <1>
   222 000001AC 000000000000000000- <1>
   222 000001B5 000000000000000000- <1>
   222 000001BE 000000000000000000- <1>
   222 000001C7 000000000000000000- <1>
   222 000001D0 00                  <1>
   223 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   224 000001D3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   225                              <1> charTableArray: ;All the qwords need fixing up here
   226                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   227 000001D5 02                  <1>     db 2
   228 000001D6 [2602000000000000]  <1>     dq ucTblExt
   229                              <1> .filenameUCTable:
   230 000001DE 04                  <1>     db 4
   231 000001DF [A802000000000000]  <1>     dq fileUCTblExt
   232                              <1> .filenameTerminatingTable:
   233 000001E7 05                  <1>     db 5
   234 000001E8 [2A03000000000000]  <1>     dq fileTermTblExt
   235                              <1> .collatingTable:
   236 000001F0 06                  <1>     db 6
   237 000001F1 [5A03000000000000]  <1>     dq collTblExt
   238                              <1> ;Extended country table
   239                              <1> extCtryTbl:
   240 000001F9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   241                              <1>     ;Below: Length of structure (not including this word and above byte)
   242 000001FA 2A00                <1>     dw extCtryTblL
   243                              <1> .countryCode:
   244 000001FC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   245                              <1> .activeCP:
   246 000001FE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   247                              <1> ;Regular country table
   248                              <1> ctryTbl:
   249                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   250 00000200 0100                <1>     dw 1    ;Date format, UK style
   251 00000202 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   252 00000207 2C00                <1>     db ",",0    ;Thousand separator
   253 00000209 2E00                <1>     db ".",0    ;Decimal separator
   254 0000020B 2D00                <1>     db "-",0    ;Date separator
   255 0000020D 3A00                <1>     db ":",0    ;Time separator
   256 0000020F 00                  <1>     db 0        ;Currency format, symbol leads with no space
   257 00000210 02                  <1>     db 2        ;Number of digits after decimal point
   258 00000211 00                  <1>     db 0        ;Time format, 12hr clock
   259 00000212 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   260 0000021A 2C00                <1>     db ",",0    ;Data list separator
   261 0000021C 000000000000000000- <1>     db 10 dup (0)
   261 00000225 00                  <1>
   262                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   263                              <1> 
   264                              <1> ucTblExt:   ;External pointer to the uppercase table
   265 00000226 8000                <1>     dw 80h
   266                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   267 00000228 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   268 00000230 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   269 00000238 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   270 00000240 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   271 00000248 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   272 00000250 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   273 00000258 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   274 00000260 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   275 00000268 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   276 00000270 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   277 00000278 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   278 00000280 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   279 00000288 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   280 00000290 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   281 00000298 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   282 000002A0 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   283                              <1> 
   284                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   285 000002A8 8000                <1>     dw 80h
   286                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   287 000002AA 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   288 000002B2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   289 000002BA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   290 000002C2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   291 000002CA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   292 000002D2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   293 000002DA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   294 000002E2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   295 000002EA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   296 000002F2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   297 000002FA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   298 00000302 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   299 0000030A E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   300 00000312 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   301 0000031A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   302 00000322 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   303                              <1> 
   304                              <1> fileTermTblExt:
   305 0000032A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   306 0000032C 01                  <1>     db 1    ;Signature byte for the table (1)
   307 0000032D 00                  <1>     db 0    ;Lowest permissible char value for filename
   308 0000032E FF                  <1>     db -1   ;Highest permissible char value for filename
   309 0000032F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   310                              <1> .startBadRange:
   311 00000330 00                  <1>     db 0    ;Start of the illegal range of filename chars
   312                              <1> .endBadRange:
   313 00000331 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   314 00000332 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   315                              <1> fileTermTbl:
   316 00000333 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   317 00000334 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   318 0000033A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   319                              <1>     fileTermTbl_len equ $ - fileTermTbl
   320                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   321                              <1>     ;Buffer space
   322 00000342 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   322 0000034B 000000000000000000- <1>
   322 00000354 000000000000        <1>
   323                              <1> 
   324                              <1> collTblExt:  ;Collating sequence table, for sorting
   325 0000035A 0001                <1>     dw 0100h
   326                              <1> collTbl:
   327 0000035C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   328 00000364 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   329 0000036C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   330 00000374 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   331 0000037C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   332 00000384 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   333 0000038C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   334 00000394 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   335 0000039C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   336 000003A4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   337 000003AC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   338 000003B4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   339 000003BC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   340 000003C4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   341 000003CC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   342 000003D4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   343 000003DC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   344 000003E4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   345 000003EC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   346 000003F4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   347 000003FC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   348 00000404 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   349 0000040C B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   350 00000414 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   351 0000041C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   352 00000424 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   353 0000042C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   354 00000434 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   355 0000043C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   356 00000444 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   357 0000044C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   358 00000454 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   359                              <1> 
   360                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   361                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   362                              <1> ;Bit[1]=Clear if the char of a terminating type.
   363                              <1> ;Bit[2]=Clear if the char is of separator type.
   364                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   365                              <1> ;Bit[4-7]=Unused.    
   366                              <1> 
   367 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   368 00000464 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   369 0000046C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   370 00000474 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   371 0000047C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   372 00000484 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   373 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   374 00000494 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   375 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   376 000004A4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   377 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   378 000004B4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   379 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   380 000004C4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   381 000004CC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   382 000004D4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   383 000004DC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   383 000004E5 FFFFFFFFFFFFFFFFFF- <1>
   383 000004EE FFFFFFFFFFFFFFFFFF- <1>
   383 000004F7 FFFFFFFFFFFFFFFFFF- <1>
   383 00000500 FFFFFFFFFFFFFFFFFF- <1>
   383 00000509 FFFFFFFFFFFFFFFFFF- <1>
   383 00000512 FFFFFFFFFFFFFFFFFF- <1>
   383 0000051B FFFFFFFFFFFFFFFFFF- <1>
   383 00000524 FFFFFFFFFFFFFFFFFF- <1>
   383 0000052D FFFFFFFFFFFFFFFFFF- <1>
   383 00000536 FFFFFFFFFFFFFFFFFF- <1>
   383 0000053F FFFFFFFFFFFFFFFFFF- <1>
   383 00000548 FFFFFFFFFFFFFFFFFF- <1>
   383 00000551 FFFFFFFFFFFFFFFFFF- <1>
   383 0000055A FFFF                <1>
    24                                  %include "./src/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000055C BB53                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 0000055E 391E                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000560 461E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000562 1A1F                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000564 431F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 00000566 4B1F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 00000568 631F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000056A 961F                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 0000056C BB1F                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 0000056E 1A20                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000570 CD22                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000572 2920                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000574 3520                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 00000576 E56F                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 00000578 1970                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000057A 712A                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 0000057C E62A                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 0000057E 0C28                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000580 C828                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000582 4F29                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000584 E62A                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 00000586 E62A                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000588 712A                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000058A 7E29                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 0000058C BD72                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 0000058E 3270                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000590 3C2A                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000592 3970                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000594 3B70                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 00000596 BD72                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000598 BD72                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000059A E870                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 0000059C BD72                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 0000059E E62A                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000005A0 E62A                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000005A2 E929                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 000005A4 E62A                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 000005A6 8470                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 000005A8 C052                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 000005AA E62A                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005AC E62A                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005AE 622A                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005B0 4625                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005B2 6D25                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005B4 7325                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005B6 9425                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005B8 AE70                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005BA 4F2A                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005BC BC70                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005BE 8D53                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005C0 EA70                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005C2 0F6F                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005C4 2271                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005C6 3371                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005C8 4271                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005CA 505C                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005CC 795C                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005CE 7F14                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005D0 E016                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005D2 C818                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005D4 E82C                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005D6 F92C                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005D8 3B2E                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005DA 792E                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005DC B42E                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005DE C02E                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005E0 252F                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005E2 942F                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005E4 C348                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005E6 B230                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005E8 ED30                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005EA 491A                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005EC 584D                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005EE 5C4F                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005F0 6450                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005F2 1855                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005F4 BD53                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005F6 8671                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005F8 0231                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005FA 6D31                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005FC 596F                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005FE 626F                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000600 9471                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000602 A571                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000604 8372                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000606 AD52                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000608 9D31                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 0000060A 2932                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 0000060C 0C52                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000060E 8A72                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000610 7132                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000612 3933                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000614 4D33                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000616 BE72                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000618 8274                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000061A E874                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 0000061C B71A                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000061E 7C6F                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000620 6B6F                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000622 BD72                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000624 746F                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000626 115D                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000628 D55D                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000062A B933                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 0000062C F634                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000062E 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000062F C374                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000631 8D3D                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000633 8168                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000635 C674                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000637 D069                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000639 761D                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000063B 855E                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000063D 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000063F 9947                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000641 6801                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000643 2976                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000645 9775                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 00000647 F939                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 00000649 2727                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000064B B200                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 0000064D CC00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 0000064F DA00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000651 4A6A                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000653 2C6A                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000655 DC69                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 00000657 656B                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 00000659 3E01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 0000065B B146                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 0000065D 9E69                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 0000065F AF68                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000661 4369                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000663 D90B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000665 BA26                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 00000667 1A75                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 00000669 2775                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000066B 636A                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 0000066D ED68                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 0000066F E646                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000671 DB19                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000673 D76D                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000675 1A13                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 00000677 7475                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 00000679 216A                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000067B CE74                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 0000067D 692D                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 0000067F D674                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000681 A72D                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000683 EB71                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000685 F874                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 00000687 986B                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 00000689 A36B                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000068B EB71                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 0000068D FF6F                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 0000068F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 00000690 D271                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 00000692 2472                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000694 7D72                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000696 8E72                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000698 9672                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 0000069A 9E72                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 0000069C B972                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000069E E372                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006A0 E372                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006A2 E372                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006A4 F072                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    25                                  %if DEBUG
    26                                  %include "./src/Debug/debug.asm"
    27                                  %endif
    28                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006A6 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 000006AD 7428                <1>     je .exit
    13 000006AF 56                  <1>     push rsi
    14 000006B0 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006B7 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006BA 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006BC 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006BF EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006C1 57                  <1>     push rdi
    22 000006C2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006C5 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006C8 5F                  <1>     pop rdi ;Get original buf back
    25 000006C9 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006CC 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006D3 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006D6 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 000006D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> markBuffersAsUnreferencedWrapper:
    33                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    34                              <1> ; and preserves rdi
    35 000006D8 57                  <1>     push rdi
    36 000006D9 E802000000          <1>     call markBuffersAsUnreferenced
    37 000006DE 5F                  <1>     pop rdi
    38                              <1>     return
    13                              <2> %%_ret:
    14 000006DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    41                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    42                              <1> ;Output: rdi = First disk buffer
    43 000006E0 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    44 000006E7 57                  <1>     push rdi
    45                              <1> .lp:
    46 000006E8 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    47 000006EC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    48 000006EF 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    49 000006F6 75F0                <1>     jne .lp
    50 000006F8 5F                  <1>     pop rdi
    51                              <1>     return
    13                              <2> %%_ret:
    14 000006F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    54                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    55                              <1> ; second buffer in the chain in rdi
    56                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    57                              <1> ;Output: rdi = Second buffer in the chain
    58 000006FA 52                  <1>     push rdx
    59 000006FB 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    60 000006FE E8A3FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    61 00000703 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    62 00000706 5A                  <1>     pop rdx
    63                              <1>     return
    13                              <2> %%_ret:
    14 00000707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    66                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    67                              <1> ;Input: rdi = Buffer header to start searching at
    68                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    69                              <1> ;        ZF=ZE => No unreferenced buffer found
    70 00000708 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    71 0000070C 750C                <1>     jnz .exit
    72 0000070E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    73 00000711 4881FFFFFFFFFF      <1>     cmp rdi, -1
    74 00000718 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    75                              <1> .exit:
    76                              <1>     return
    13                              <2> %%_ret:
    14 0000071A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> flushAllBuffersForDPB:  ;External linkage
    79                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    80 0000071B 50                  <1>     push rax
    81 0000071C 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
    82 00000723 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    83 00000726 E802000000          <1>     call flushAllBuffersForDrive
    84 0000072B 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 0000072C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    88                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    89                              <1> ; Used also to allow flushing all buffers
    90                              <1> ; Input: al = 0-based physical drive number we are xacting on
    91                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    92                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    93 0000072D 57                  <1>     push rdi
    94 0000072E 50                  <1>     push rax
    95 0000072F 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    96 00000736 B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
    97                              <1> .mainLp:
    98 00000738 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
    99 0000073F 741E                <1>     je .exit   
   100 00000741 E826000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   101 00000746 50                  <1>     push rax
   102 00000747 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   103 0000074B 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   104 00000751 58                  <1>     pop rax
   105 00000752 7405                <1>     je .errDrv    ;If not, goto next buffer
   106                              <1> .nextBuffer:
   107 00000754 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   108 00000757 EBDF                <1>     jmp short .mainLp
   109                              <1> .errDrv:
   110 00000759 C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1  ;Free the buffer if caused error
   111 0000075D EBF5                <1>     jmp short .nextBuffer
   112                              <1> .exit:
   113 0000075F 58                  <1>     pop rax
   114 00000760 5F                  <1>     pop rdi
   115 00000761 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Did we xlat error?
   116                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000768 74C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   117 0000076A F9                  <1>     stc ;If so, return CF=CY
   118                              <1>     return
    13                              <2> %%_ret:
    14 0000076B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   119                              <1> 
   120                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   121                              <1> ;Flushes and cleans the dirty bit from the buffer
   122                              <1> ;Input: AH = Drives to ignore flush for
   123                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   124                              <1> ;       rdi -> Buffer in question
   125 0000076C 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   126                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000076F 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   127 00000771 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   128 00000773 7406                <1>     je .takeThisBuffer
   129 00000775 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   130 00000778 F8                  <1>     clc
   131                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000779 75F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   132                              <1> .takeThisBuffer:
   133 0000077B F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   134                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000077F 74EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   135 00000781 50                  <1>     push rax    ;Save the drive number
   136 00000782 0FB64709            <1>     movzx eax, byte [rdi + bufferHdr.bufferFlags]
   137 00000786 50                  <1>     push rax    ;Save the buffer flags
   138 00000787 E80A000000          <1>     call flushAndFreeBuffer
   139 0000078C 58                  <1>     pop rax     ;Get back the flags
   140 0000078D 7205                <1>     jc .exit
   141 0000078F 24BF                <1>     and al, ~dirtyBuffer    ;Clean the dirty bit
   142 00000791 884709              <1>     mov byte [rdi + bufferHdr.bufferFlags], al  ;And return the flags!
   143                              <1> .exit:  
   144 00000794 58                  <1>     pop rax     ;Get back the drive number
   145                              <1>     return
    13                              <2> %%_ret:
    14 00000795 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   148                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   149                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   150                              <1> ;Exit:  CF=NC : Success
   151                              <1> ;       CF=CY : Fail, terminate the request
   152 00000796 50                  <1>     push rax
   153 00000797 53                  <1>     push rbx
   154 00000798 51                  <1>     push rcx
   155 00000799 52                  <1>     push rdx
   156 0000079A 56                  <1>     push rsi
   157 0000079B 55                  <1>     push rbp
   158                              <1> ;If the buffer is freed, skip flushing to avoid issues
   159 0000079C B8FF000000          <1>     mov eax, freeBuffer
   160 000007A1 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   161                              <1>     ;ah = Flags, al = Drive number
   162 000007A5 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   163 000007A7 7473                <1>     je .fbFreeExit  ;If it was free, exit
   164 000007A9 F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   165 000007AC 746E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   166 000007AE 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   167 000007B4 7466                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   168 000007B6 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   169 000007BD F6C408              <1>     test ah, dataBuffer
   170 000007C0 7407                <1>     jz .fbNotData
   171 000007C2 800D(68040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   172                              <1> .fbNotData:
   173 000007C9 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   174 000007CE F6C402              <1>     test ah, fatBuffer
   175 000007D1 7406                <1>     jz .fbWriteSetup
   176 000007D3 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   177                              <1> .fbWriteSetup:
   178 000007D9 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   179 000007DD 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   180 000007E1 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   181 000007E5 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   182                              <1> .fbWriteDisk:
   183 000007E9 50                  <1>     push rax    ;Save the drive number and flags
   184 000007EA 53                  <1>     push rbx    ;Has pointer to buffer data area
   185 000007EB 51                  <1>     push rcx    ;# of FAT sectors
   186 000007EC 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   187 000007ED 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   188 000007EE 55                  <1>     push rbp    ;DPB ptr for drive
   189 000007EF B901000000          <1>     mov ecx, 1  ;One sector to copy
   190 000007F4 E862650000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   191 000007F9 E896630000          <1>     call absDiskDriverCall    ;Make Driver Request
   192 000007FE 5D                  <1>     pop rbp
   193 000007FF 5E                  <1>     pop rsi
   194 00000800 5A                  <1>     pop rdx
   195 00000801 59                  <1>     pop rcx
   196 00000802 5B                  <1>     pop rbx
   197 00000803 58                  <1>     pop rax
   198                              <1> 
   199 00000804 751E                <1>     jnz .fbFail
   200                              <1> ;Now check if the buffer was a FAT, to write additional copies
   201 00000806 F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   202 00000809 7411                <1>     jz .fbFreeExit  ;If not, exit
   203 0000080B FFC9                <1>     dec ecx
   204 0000080D 740D                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   205 0000080F 50                  <1>     push rax
   206 00000810 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   207 00000813 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   208 00000816 58                  <1>     pop rax
   209 00000817 E9CDFFFFFF          <1>     jmp .fbWriteDisk ;Make another request for the other FAT copy
   210                              <1> .fbFreeExit:
   211 0000081C F8                  <1>     clc
   212                              <1> .fbExitFail:
   213 0000081D 5D                  <1>     pop rbp
   214 0000081E 5E                  <1>     pop rsi
   215 0000081F 5A                  <1>     pop rdx
   216 00000820 59                  <1>     pop rcx
   217 00000821 5B                  <1>     pop rbx
   218 00000822 58                  <1>     pop rax
   219                              <1>     return
    13                              <2> %%_ret:
    14 00000823 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   220                              <1> .fbFail:
   221                              <1> ;Enter here only if the request failed
   222 00000824 FFCE                <1>     dec esi
   223 00000826 75C1                <1>     jnz .fbWriteDisk ;Try the request again!
   224                              <1> ;Request failed thrice, critical error call
   225                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   226 00000828 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite ;Set the initial bitfield to write req
   227 0000082F E8925B0000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   228 00000834 3C01                <1>     cmp al, critRetry
   229 00000836 74A1                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   230                              <1>     ;Else we fail (Ignore=Fail here)
   231 00000838 F9                  <1>     stc ;Set error flag to indicate fail
   232 00000839 E9DFFFFFFF          <1>     jmp .fbExitFail
   233                              <1> 
   234                              <1> testDirtyBufferForDrive:    ;External linkage
   235                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   236                              <1> ;Input: al = Drive number (0 based)
   237                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   238                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   239 0000083E 53                  <1>     push rbx
   240 0000083F 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   241                              <1> .tdbfdCheckBuffer:
   242 00000846 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   243 00000849 7509                <1>     jne .tdbfdGotoNextBuffer
   244 0000084B F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   245 0000084F 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   246 00000851 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   247                              <1> .tdbfdExit:
   248 00000852 5B                  <1>     pop rbx
   249                              <1>     return
    13                              <2> %%_ret:
    14 00000853 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   250                              <1> .tdbfdGotoNextBuffer:
   251 00000854 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   252 00000857 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   253 0000085E 74F2                <1>     je .tdbfdExit
   254 00000860 EBE4                <1>     jmp short .tdbfdCheckBuffer
   255                              <1> 
   256                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   257                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   258                              <1> ; to have a drive number of -1, thus freeing it
   259                              <1> ;Given Drive number is in al
   260 00000862 57                  <1>     push rdi
   261 00000863 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   262                              <1> .i0:
   263 0000086A 4881FFFFFFFFFF      <1>     cmp rdi, -1
   264 00000871 7417                <1>     je .exit
   265 00000873 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   266 00000876 750D                <1>     jne .i1 ;If no, skip freeing
   267 00000878 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   268 0000087E E877FEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   269 00000883 EBE5                <1>     jmp short .i0
   270                              <1> .i1:
   271 00000885 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   272 00000888 EBE0                <1>     jmp short .i0
   273                              <1> .exit:
   274 0000088A 5F                  <1>     pop rdi
   275                              <1>     return
    13                              <2> %%_ret:
    14 0000088B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> markBufferDirty:
   278 0000088C 55                  <1>     push rbp
   279 0000088D 9C                  <1>     pushfq
   280 0000088E 488B2D(3E070000)    <1>     mov rbp, qword [currBuff]
   281 00000895 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   282 00000899 9D                  <1>     popfq
   283 0000089A 5D                  <1>     pop rbp
   284                              <1>     return
    13                              <2> %%_ret:
    14 0000089B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   285                              <1> 
   286                              <1> getBuffer: ;Internal Linkage ONLY
   287                              <1> ;
   288                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   289                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   290                              <1> ;Flushes if not in disk change mode. 
   291                              <1> ;If in disk change mode, will check to see if the selected buffer 
   292                              <1> ; has data referring a device using the same DPB as we are changing.
   293                              <1> ; If it is, skip flushing, if not, flush first!
   294                              <1> ;
   295                              <1> ;This function will return a pointer to the desired data sector OR 
   296                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   297                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   298                              <1> ;Entry: rax = Sector to read
   299                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   300                              <1> ;       rsi = DPB to use for transaction
   301                              <1> ;Exit:  CF=NC => 
   302                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   303                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   304 0000089C 51                  <1>     push rcx
   305 0000089D 52                  <1>     push rdx
   306 0000089E 56                  <1>     push rsi
   307 0000089F 57                  <1>     push rdi
   308 000008A0 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   309 000008A2 E81F010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   310 000008A7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   311 000008AE 741F                <1>     je .rbReadNewSector
   312 000008B0 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   313 000008B7 E8EAFDFFFF          <1>     call makeBufferMostRecentlyUsed
   314 000008BC F8                  <1>     clc
   315                              <1> .rbExit:
   316 000008BD 5F                  <1>     pop rdi
   317 000008BE 5E                  <1>     pop rsi
   318 000008BF 5A                  <1>     pop rdx
   319 000008C0 59                  <1>     pop rcx
   320 000008C1 9C                  <1>     pushfq
   321 000008C2 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   322 000008C9 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   323 000008CD 9D                  <1>     popfq
   324                              <1>     return
    13                              <2> %%_ret:
    14 000008CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> .rbReadNewSector:
   326 000008CF E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   327 000008D4 E8BDFEFFFF          <1>     call flushAndFreeBuffer
   328 000008D9 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   329                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   330                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   331                              <1>     ; is no longer owned by that File so we mark the owner as none
   332 000008DB 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   333 000008DE 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   334 000008E1 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   335 000008E5 80F902              <1>     cmp cl, fatBuffer
   336 000008E8 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   337 000008EA 7503                <1>     jne .rbNonFATbuffer
   338 000008EC 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   339                              <1> .rbNonFATbuffer:
   340 000008EF 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   341 000008F2 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   342 000008F5 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   343 000008F8 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   344 000008FC C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   345 00000900 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   346 00000905 EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   347                              <1> 
   348                              <1> readSectorBuffer:   ;Internal Linkage
   349                              <1> ;Reads a sector into a built sector buffer
   350                              <1> ;Entry: rdi = Pointer to buffer header
   351                              <1> ;Exit:  CF=NC : Success
   352                              <1> ;       CF=CY : Fail, terminate the request
   353                              <1> ;       rbx pointing to buffer header
   354                              <1> ;First make request to device driver
   355 00000907 50                  <1>     push rax
   356 00000908 53                  <1>     push rbx
   357 00000909 51                  <1>     push rcx
   358 0000090A 52                  <1>     push rdx
   359 0000090B 56                  <1>     push rsi
   360 0000090C 55                  <1>     push rbp
   361                              <1> .rsRequest0:
   362 0000090D BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   363 00000912 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   364 00000916 7406                <1>     jz .rsRequest1
   365 00000918 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   366                              <1> .rsRequest1:
   367 0000091E 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   368 00000921 B901000000          <1>     mov ecx, 1  ;One sector to copy
   369 00000926 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   370 0000092A 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   371 0000092E 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   372 00000932 E82F640000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   373 00000937 E858620000          <1>     call absDiskDriverCall    ;Make Driver Request
   374 0000093C 7508                <1>     jnz .rsFail
   375                              <1> .rsExit:
   376 0000093E F8                  <1>     clc
   377                              <1> .rsExitFail:
   378 0000093F 5D                  <1>     pop rbp
   379 00000940 5E                  <1>     pop rsi
   380 00000941 5A                  <1>     pop rdx
   381 00000942 59                  <1>     pop rcx
   382 00000943 5B                  <1>     pop rbx
   383 00000944 58                  <1>     pop rax
   384                              <1>     return
    13                              <2> %%_ret:
    14 00000945 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> .rsFail:
   386                              <1> ;Enter here only if the request failed
   387 00000946 FFCE                <1>     dec esi
   388 00000948 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   389                              <1> ;Request failed thrice, critical error call
   390                              <1> ;First free the buffer if we failed to read data into it. 
   391                              <1> ;We free this buffer to free the resource if the user aborts.
   392                              <1> ;This function is called in a critical section so the buffer pointer
   393                              <1> ; is under no thread of being reallocated.
   394                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   395 0000094A 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer and clear dirty/ref bits
   396 00000950 C605(68040000)00    <1>     mov byte [Int24bitfld], critRead    ;Set the initial bitfield to read req
   397 00000957 E86A5A0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   398 0000095C 3C01                <1>     cmp al, critRetry
   399 0000095E 7509                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   400 00000960 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   401 00000964 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   402 00000967 EBA4                <1>     jmp short .rsRequest0
   403                              <1> .fail:
   404 00000969 F9                  <1>     stc ;Set error flag to indicate fail
   405 0000096A E9D0FFFFFF          <1>     jmp .rsExitFail
   406                              <1>     
   407                              <1> findLRUBuffer: ;Internal Linkage
   408                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   409                              <1> ; in rbx and the currBuff variable
   410                              <1> ;Input: Nothing
   411                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   412                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   413 0000096F 52                  <1>     push rdx
   414 00000970 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   415 00000977 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   416 0000097B 7436                <1>     je .flbExit 
   417 0000097D 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   418 00000984 742D                <1>     je .flbExit
   419                              <1> .flbWalk:
   420 00000986 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   421 00000989 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   422 0000098C 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   423 00000990 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   424 00000992 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   425 00000999 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   426 0000099B 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   427                              <1> .flbHeadLink:
   428 000009A2 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   429 000009A9 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   430 000009B0 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   431                              <1> .flbExit:
   432 000009B3 5A                  <1>     pop rdx
   433 000009B4 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   434                              <1>     return
    13                              <2> %%_ret:
    14 000009BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> .flbFreeLink:
   436 000009BC 51                  <1>     push rcx
   437 000009BD 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   438 000009C0 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   439 000009C3 59                  <1>     pop rcx
   440 000009C4 EBDC                <1>     jmp short .flbHeadLink
   441                              <1> 
   442                              <1> findSectorInBuffer:     ;Internal linkage
   443                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   444                              <1> ;If the sector is not in a buffer, returns with a -1
   445                              <1> ;Input: rax = Sector number
   446                              <1> ;       dl = Drive number
   447                              <1> ;Output: rdi = Buffer hdr pointer or -1
   448 000009C6 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   449                              <1> .fsiCheckBuffer:
   450 000009CD 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   451 000009D0 7507                <1>     jne .fsiGotoNextBuffer
   452 000009D2 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   453 000009D6 7501                <1>     jne .fsiGotoNextBuffer
   454                              <1> .fsiExit:
   455                              <1>     return
    13                              <2> %%_ret:
    14 000009D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> .fsiGotoNextBuffer:
   457 000009D9 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   458 000009DC 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   459 000009E3 74F3                <1>     je .fsiExit
   460 000009E5 EBE6                <1>     jmp short .fsiCheckBuffer
   461                              <1> 
   462                              <1> ;-----------------------------------------------------------------------------
   463                              <1> ;SPECIAL BUFFER FUNCTIONS
   464                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   465                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   466                              <1> ;-----------------------------------------------------------------------------
   467                              <1> getBufForDOS:
   468                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 000009E7 51                  <1>     push rcx
   473 000009E8 B101                <1>     mov cl, dosBuffer
   474 000009EA EB0D                <1>     jmp short getBufCommon
   475                              <1> getBufForFat:
   476                              <1> ;Returns a buffer to use for fat data in rbx
   477                              <1> ;Input: [workingDPB] = DPB to transact on
   478                              <1> ;       rax = Sector to transfer
   479                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   480 000009EC 51                  <1>     push rcx
   481 000009ED B102                <1>     mov cl, fatBuffer
   482 000009EF EB08                <1>     jmp short getBufCommon
   483                              <1> getBufForDir:
   484                              <1> ;Returns a buffer to use for disk directory data in rbx
   485                              <1> ;Input: [workingDPB] = File to manipulate
   486                              <1> ;       rax = Sector to transfer
   487                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   488 000009F1 51                  <1>     push rcx
   489 000009F2 B104                <1>     mov cl, dirBuffer
   490 000009F4 EB03                <1>     jmp short getBufCommon
   491                              <1> getBufForData:
   492                              <1> ;Returns a buffer to use for disk data in rbx
   493                              <1> ;Requires a File Handle.
   494                              <1> ;Input: [workingDPB] = File to manipulate
   495                              <1> ;       rax = Sector to transfer
   496                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   497 000009F6 51                  <1>     push rcx
   498 000009F7 B108                <1>     mov cl, dataBuffer
   499                              <1> getBufCommon:
   500 000009F9 56                  <1>     push rsi
   501 000009FA 57                  <1>     push rdi
   502 000009FB 488B35(0A070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   503                              <1> .makeReq:
   504 00000A02 E895FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   505 00000A07 5F                  <1>     pop rdi
   506 00000A08 5E                  <1>     pop rsi
   507 00000A09 59                  <1>     pop rcx
   508                              <1>     return
    13                              <2> %%_ret:
    14 00000A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A0B 53                  <1>     push rbx
     9 00000A0C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 00000A0F B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A14 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A1A 730C                <1>     jae .exit
    13 00000A1C FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A1E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A24 7302                <1>     jae .exit
    16 00000A26 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A28 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A2A 53                  <1>     push rbx
    29 00000A2B 55                  <1>     push rbp
    30 00000A2C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A33 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000A36 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A3C 731E                <1>     jae .fat32
    34 00000A3E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A44 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A46 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A48 6801000000          <1>     push qword 1
    39 00000A4D EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A4F 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A51 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A53 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000A55 6800000000          <1>     push qword 0
    45 00000A5A EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A5C 6802000000          <1>     push qword 2
    48 00000A61 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A64 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A68 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A6A F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A6C 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A70 01D8                <1>     add eax, ebx
    56 00000A72 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A73 5D                  <1>     pop rbp
    58 00000A74 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A76 51                  <1>     push rcx
    68 00000A77 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A79 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A7B 482D02000000        <1>     sub rax, 2
    72 00000A81 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000A84 48D3E0              <1>     shl rax, cl
    74 00000A87 31C9                <1>     xor ecx, ecx
    75 00000A89 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000A8C 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000A8F 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000A91 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000A94 E872FFFFFF          <1>     call getFATtype
    83 00000A99 81F902000000        <1>     cmp ecx, 2
    84 00000A9F 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AA1 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AA3 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA5 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000AA7 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AA8 89C3                <1>     mov ebx, eax
   100 00000AAA E8C9010000          <1>     call readFAT
   101 00000AAF 7209                <1>     jc .exit
   102 00000AB1 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000AB6 75F0                <1>     jne .lp
   104 00000AB8 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000ABA 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000ABB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000ABC 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000ABE 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000AC0 51                  <1>     push rcx
   117 00000AC1 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000AC3 FFC1                <1>     inc ecx
   120 00000AC5 E8AE010000          <1>     call readFAT
   121 00000ACA 7209                <1>     jc .exit
   122 00000ACC 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000AD1 75F0                <1>     jne .lp
   124 00000AD3 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000AD5 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000AD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000AD7 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AD9 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 00000ADB 53                  <1>     push rbx
   140 00000ADC 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000ADF 89C3                <1>     mov ebx, eax
   143 00000AE1 E892010000          <1>     call readFAT
   144 00000AE6 7206                <1>     jc .exit
   145 00000AE8 FFC9                <1>     dec ecx
   146 00000AEA 75F3                <1>     jnz .lp
   147 00000AEC 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000AEE 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000AF0 53                  <1>     push rbx
   157 00000AF1 56                  <1>     push rsi
   158 00000AF2 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000AF7 721A                <1>     jc .exit    ;Disk read error?
   160 00000AF9 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000AFE 7413                <1>     je .exit
   162 00000B00 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B05 89C3                <1>     mov ebx, eax
   164 00000B07 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 00000B0C 89D8                <1>     mov eax, ebx
   166 00000B0E E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 00000B13 5E                  <1>     pop rsi
   169 00000B14 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 00000B15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 00000B16 F8                  <1>     clc ;Always clear the flags before starting
   182 00000B17 53                  <1>     push rbx
   183 00000B18 56                  <1>     push rsi
   184 00000B19 51                  <1>     push rcx    ;Save tfr count on stack
   185 00000B1A 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 00000B1D E837000000          <1>     call findFreeCluster
   188 00000B22 722B                <1>     jc .exit
   189 00000B24 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 00000B29 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 00000B2B BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 00000B30 50                  <1>     push rax
   195 00000B31 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 00000B36 58                  <1>     pop rax
   197 00000B37 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 00000B39 E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000B3E 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000B40 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000B42 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 00000B47 7206                <1>     jc .exit
   205 00000B49 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 00000B4B FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000B4D 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000B4F 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000B50 9C                  <1>     pushfq
   211 00000B51 F7D9                <1>     neg ecx
   212 00000B53 01F1                <1>     add ecx, esi
   213 00000B55 9D                  <1>     popfq
   214 00000B56 5E                  <1>     pop rsi
   215 00000B57 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00000B58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 00000B59 53                  <1>     push rbx
   224 00000B5A 52                  <1>     push rdx
   225 00000B5B 55                  <1>     push rbp
   226 00000B5C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000B63 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 00000B68 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 00000B6A E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000B6F 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000B71 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000B73 7409                <1>     jz .exit    ;If yes, exit
   237 00000B75 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 00000B79 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000B7C 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000B7E 89D8                <1>     mov eax, ebx
   242 00000B80 F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000B81 5D                  <1>     pop rbp
   245 00000B82 5A                  <1>     pop rdx
   246 00000B83 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000B84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000B85 53                  <1>     push rbx
   257 00000B86 52                  <1>     push rdx
   258 00000B87 55                  <1>     push rbp
   259 00000B88 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   260 00000B8F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000B93 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 00000B9A B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000B9F 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000BA2 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000BA4 E8CF000000          <1>     call readFAT
   271 00000BA9 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 00000BAB 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000BAD 750C                <1>     jne .fatProceed
   274 00000BAF 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 00000BB6 7413                <1>     je .fatFirst
   276 00000BB8 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 00000BBB 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000BBF 39D0                <1>     cmp eax, edx
   280 00000BC1 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000BC3 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 00000BC6 F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 00000BC7 5D                  <1>     pop rbp
   286 00000BC8 5A                  <1>     pop rdx
   287 00000BC9 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 00000BCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 00000BCB 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000BCE 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000BD5 74E4                <1>     je .fatProceed
   294 00000BD7 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 00000BD9 8A05(5C070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 00000BDF 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 00000BE2 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 00000BE4 FE05(5C070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 00000BEA 48FF05(5D070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 00000BF1 488B05(5D070000)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 00000BF8 F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 00000BF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 00000BFA 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 00000C00 E873000000          <1>     call readFAT
   323 00000C05 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 00000C07 3DFFFFFFFF          <1>     cmp eax, -1
   326 00000C0C 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 00000C0E 8905(54070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 00000C14 FF05(50070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 00000C1A E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 00000C1F 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save it
   332 00000C26 C605(5C070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 00000C2D EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 00000C2F 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 00000C30 56                  <1>     push rsi
   348 00000C31 E813000000          <1>     call truncateFAT    ;Preserved eax
   349 00000C36 720E                <1>     jc .exit
   350 00000C38 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 00000C3A E8DA000000          <1>     call writeFAT
   352 00000C3F 7205                <1>     jc .exit
   353 00000C41 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000C46 5E                  <1>     pop rsi
   356 00000C47 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000C49 50                  <1>     push rax
   370 00000C4A 53                  <1>     push rbx
   371 00000C4B 51                  <1>     push rcx
   372 00000C4C 56                  <1>     push rsi
   373 00000C4D 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000C4F E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000C54 721D                <1>     jc .exit    ;Error exit
   377 00000C56 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000C58 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000C59 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000C5B E8B9000000          <1>     call writeFAT
   381 00000C60 7211                <1>     jc .exit    ;Error exit
   382 00000C62 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000C67 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000C6D 7404                <1>     je .exit
   385 00000C6F 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000C71 EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000C73 5E                  <1>     pop rsi
   389 00000C74 59                  <1>     pop rcx
   390 00000C75 5B                  <1>     pop rbx
   391 00000C76 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000C77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000C78 53                  <1>     push rbx
   401 00000C79 51                  <1>     push rcx
   402 00000C7A 52                  <1>     push rdx
   403 00000C7B 57                  <1>     push rdi
   404 00000C7C 55                  <1>     push rbp
   405 00000C7D 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000C7F E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000C84 E863FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000C89 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000C8B 85C9                <1>     test ecx, ecx
   412 00000C8D 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000C8F F7C101000000        <1>     test ecx, 1
   414 00000C95 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000C97 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000C9C 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000CA1 721E                <1>     jb .exit
   419 00000CA3 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000CA8 EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000CAA 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000CAE 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000CB3 7207                <1>     jb .validCluster32   
   425 00000CB5 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000CBA EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000CBC 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000CC1 F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000CC2 5D                  <1>     pop rbp
   433 00000CC3 5F                  <1>     pop rdi
   434 00000CC4 5A                  <1>     pop rdx
   435 00000CC5 59                  <1>     pop rcx
   436 00000CC6 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000CC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000CC8 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000CCE 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000CD0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000CD4 29D1                <1>     sub ecx, edx
   449 00000CD6 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000CD8 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000CDA 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000CDF FFC0                <1>     inc eax ;Get next FAT sector
   454 00000CE1 53                  <1>     push rbx
   455 00000CE2 E805FDFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000CE7 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000CE8 72D8                <1>     jc .exitFail
   458 00000CEA 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000CEC 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000CEF C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000CF2 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000CF4 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000CF9 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000CFC EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000CFE 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000D03 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000D08 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000D0D 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000D0F B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000D14 E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000D19 53                  <1>     push rbx
   483 00000D1A 51                  <1>     push rcx
   484 00000D1B 52                  <1>     push rdx
   485 00000D1C 56                  <1>     push rsi
   486 00000D1D 57                  <1>     push rdi
   487 00000D1E 55                  <1>     push rbp
   488 00000D1F 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000D21 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000D26 E8C1FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000D2B 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000D2D 85C9                <1>     test ecx, ecx
   495 00000D2F 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000D31 F7C101000000        <1>     test ecx, 1
   497 00000D37 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000D39 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000D3E EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000D40 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000D46 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000D4A E83DFBFFFF          <1>     call markBufferDirty
   506 00000D4F F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000D50 5D                  <1>     pop rbp
   509 00000D51 5F                  <1>     pop rdi
   510 00000D52 5E                  <1>     pop rsi
   511 00000D53 5A                  <1>     pop rdx
   512 00000D54 59                  <1>     pop rcx
   513 00000D55 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000D56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000D57 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000D5D F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000D63 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000D65 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000D69 29D1                <1>     sub ecx, edx
   527 00000D6B FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000D6D 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531 00000D6F 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   532 00000D74 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   533 00000D7A C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   534 00000D7D 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   535 00000D7F C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   536 00000D82 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   537 00000D86 E801FBFFFF          <1>     call markBufferDirty
   538 00000D8B FFC0                <1>     inc eax ;Get next FAT sector
   539 00000D8D E85AFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   540 00000D92 72BC                <1>     jc .exitFail
   541 00000D94 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   542 00000D96 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   543 00000D99 EBAF                <1>     jmp short .exit
   544                              <1> .gotoNextClusterFat12NoCross:
   545 00000D9B 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   546 00000DA0 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   547 00000DA5 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   548 00000DA8 EB0A                <1>     jmp short .fat12common
   549                              <1> .gotoNextClusterFat12Even:
   550                              <1>     ;Here the cluster is even and can't cross a sector boundary
   551 00000DAA 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   552 00000DAF 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   553                              <1> .fat12common:
   554 00000DB4 09F0                <1>     or eax, esi     ;Add the new entry bits
   555 00000DB6 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   556 00000DBB E98AFFFFFF          <1>     jmp .exit
   557                              <1> 
   558                              <1> incrementFreeClusterCount:
   559                              <1> ;Cluster Deallocated Function
   560 00000DC0 9C                  <1>     pushfq
   561 00000DC1 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   562 00000DC8 7403                <1>     je .exit
   563 00000DCA FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   564                              <1> .exit:
   565 00000DCD 9D                  <1>     popfq
   566                              <1>     return
    13                              <2> %%_ret:
    14 00000DCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> decrementFreeClusterCount:
   568                              <1> ;Cluster Allocated Function
   569 00000DCF 9C                  <1>     pushfq
   570 00000DD0 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   571 00000DD7 7403                <1>     je .exit
   572 00000DD9 FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   573                              <1> .exit:
   574 00000DDC 9D                  <1>     popfq
   575                              <1>     return
    13                              <2> %%_ret:
    14 00000DDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000DDE 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000DE5 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000DE8 7408                <1>     jz .notNet
     6 00000DEA B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00000DEF CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000DF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000DF2 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000DF4 FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000DF6 E866650000          <1>     call dosCrit1Enter
    13 00000DFB E871610000          <1>     call getCDS     ;Set CDS and current drive vars
    14 00000E00 720C                <1>     jc .critError   ;Return error if this fails
    15 00000E02 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
    16 00000E09 E8AB5D0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000E0E E858650000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E13 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000E15 E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000E1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000E1B 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000E22 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    30 00000E29 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000E2C 8805(FC060000)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000E32 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000E35 8905(84070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000E3B 8905(80070000)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000E41 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000E44 8905(8A070000)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000E4A C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000E4D 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000E4F 813D(84070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000E57 0000                <1>
    43 00000E59 0F8496000000        <1>     je .oldFat
    44 00000E5F 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000E63 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000E67 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000E69 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000E6B 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000E6D 31D2                <1>     xor edx, edx
    50 00000E6F F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000E71 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000E73 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000E77 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000E79 31D2                <1>     xor edx, edx
    58 00000E7B F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000E7D 668905(88070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000E84 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000E8A 89D9                <1>     mov ecx, ebx
    65 00000E8C 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000E8F E8E4FDFFFF          <1>     call readFAT
    68 00000E94 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000E99 7477                <1>     je .errorExit
    70 00000E9B FFC9                <1>     dec ecx
    71 00000E9D 75F0                <1>     jnz .fatlp
    72 00000E9F 8905(84070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000EA5 488D05CC000000      <1>     lea rax, searchDir.nextEp
    75 00000EAC 50                  <1>     push rax    ;Push the return address onto stack
    76 00000EAD 8B05(84070000)      <1>     mov eax, dword [dirClustA]
    77 00000EB3 E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000EB8 0FB71D(88070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000EBF 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000EC2 E82AFBFFFF          <1>     call getBufForDir
    82 00000EC7 0F8246010000        <1>     jc searchDir.hardError
    83 00000ECD E844010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
    84 00000ED2 E807020000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000ED7 8B05(8A070000)      <1>     mov eax, dword [dirEntry]
    86 00000EDD 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000EE2 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000EE4 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000EE7 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000EEA 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000EF0 E996010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000EF5 488D05FB000000      <1>     lea rax, searchDir.oldNextEP
    99 00000EFC 50                  <1>     push rax    ;Push return address onto the stack
   100 00000EFD 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000F01 31D2                <1>     xor edx, edx
   102 00000F03 96                  <1>     xchg esi, eax
   103 00000F04 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000F06 668905(88070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000F0D 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000F10 EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000F12 F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000F13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000F14 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000F1B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000F21 7408                <1>     jz .notNet
   125 00000F23 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000F28 CD2F                <1>     int 2fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000F2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129 00000F2B 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   130 00000F32 F605(FC060000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   131 00000F39 7509                <1>     jnz .volIdSearch
   132 00000F3B F605(5F040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   133 00000F42 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   134                              <1> .volIdSearch:
   135                              <1> ;Here we do a volid search intervention. Always searches root dir.
   136 00000F44 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   137 00000F4B 7407                <1>     jz .notVolSearch
   138 00000F4D 31C0                <1>     xor eax, eax ;Search the root dir.
   139 00000F4F E819060000          <1>     call prepSetupDirSearchVars
   140                              <1> .notVolSearch:
   141 00000F54 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   142 00000F5A 85C0                <1>     test eax, eax
   143 00000F5C 747E                <1>     jz .oldRoot
   144 00000F5E E813FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   145                              <1> .sectorLoop:
   146 00000F63 E889FAFFFF          <1>     call getBufForDir
   147 00000F68 0F82A5000000        <1>     jc .hardError
   148 00000F6E E8A3000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   149                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   150 00000F73 E8AA000000          <1>     call findInBuffer
   151                              <1> .nextEp:
   152                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000F78 73B0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   153 00000F7A 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   154                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   155                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   156                              <1>     ;IF however, the next cluster is -1, then we return fail
   157 00000F80 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   158 00000F86 8905(54070000)      <1>     mov dword [currClustD], eax
   159 00000F8C 668B05(88070000)    <1>     mov ax, word [dirSect]
   160 00000F93 8805(5C070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   161 00000F99 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   162 00000F9D 488905(5D070000)    <1>     mov qword [currSectD], rax  
   163 00000FA4 C705(50070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   163 00000FAC 0000                <1>
   164 00000FAE E826FCFFFF          <1>     call getNextSectorOfFile
   165 00000FB3 725E                <1>     jc .hardError
   166 00000FB5 3DFFFFFFFF          <1>     cmp eax, -1
   167 00000FBA 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   168 00000FBC 66FF05(88070000)    <1>     inc word [dirSect]  ;Goto next sector
   169 00000FC3 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   170 00000FC9 3B05(54070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   171 00000FCF 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   172 00000FD1 66C705(88070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   172 00000FD9 00                  <1>
   173 00000FDA EB87                <1>     jmp short .sectorLoop 
   174                              <1> 
   175                              <1> .oldRoot:
   176                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   177                              <1> ; one large contiguous cluster.
   178                              <1> .oldSectorLp:
   179 00000FDC 0FB705(88070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   180 00000FE3 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   181 00000FE6 E806FAFFFF          <1>     call getBufForDir
   182 00000FEB 7226                <1>     jc .hardError
   183 00000FED E824000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   184 00000FF2 E82B000000          <1>     call findInBuffer
   185                              <1> .oldNextEP:
   186                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000FF7 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000FF9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   187 00000FFA 7413                <1>     jz .fnfError
   188 00000FFC 66FF05(88070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   189 00001003 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   190 00001007 3905(8A070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   191 0000100D 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   192                              <1> .fnfError:
   193 0000100F B012                <1>     mov al, errNoFil
   194 00001011 F9                  <1>     stc
   195                              <1>     return
    13                              <2> %%_ret:
    14 00001012 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> .hardError:
   197 00001013 B0FF                <1>     mov al, -1
   198                              <1>     return
    13                              <2> %%_ret:
    14 00001015 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   199                              <1> prepSectorSearch:
   200                              <1> ;Input: rbx -> Buffer with Dir sector to search
   201                              <1> ;Output: rsi -> Start of the dir data area
   202                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   203 00001016 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   204 0000101A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   205 0000101E C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   206                              <1>     return
    13                              <2> %%_ret:
    14 00001021 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> findInBuffer:
   209                              <1> ;Input:  rsi = Sector buffer data area
   210                              <1> ;Output: CF=CY => No entries found
   211                              <1> ;        ZF=NE => Keep searching in subsequent directories
   212                              <1> ;        ZF=ZE => End of directory reached early, stop
   213                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   214                              <1> ;        rsi = Points to start of the disk buffer directory entry
   215 00001022 E8B7000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   216 00001027 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   217 0000102D E8BD000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   218                              <1> .searchMainLp:
   219                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   220 00001032 8A25(08070000)      <1>     mov ah, byte [delChar]
   221 00001038 803E00              <1>     cmp byte [rsi], 00h
   222 0000103B 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   223 0000103D 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   224 0000103F 750F                <1>     jne .notLookingForEmpty
   225                              <1> .emptySlot:
   226                              <1> ;Here we check if we are looking for an empty directory entry or
   227                              <1> ; we have reached the end of the file (if the first byte is 00h)
   228                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   229 00001041 3A25(D9060000)      <1>     cmp ah, byte [fcbName] 
   230                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001047 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   231                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   232 00001049 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   233 0000104C 753D                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   234 0000104E F9                  <1>     stc
   235                              <1>     return
    13                              <2> %%_ret:
    14 0000104F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> .notLookingForEmpty:
   237 00001050 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   238 00001053 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   239 00001056 F605(5F040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   240 0000105D 7406                <1>     jz .notVolIdExclusive
   241 0000105F 80FC08              <1>     cmp ah, dirVolumeID   ;If we are a volid, clear CF, set ZF and return
   242 00001062 7527                <1>     jne .nextEntry
   243                              <1>     return
    13                              <2> %%_ret:
    14 00001064 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> .notVolIdExclusive:
   245 00001065 803D(69040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   246 0000106C 7434                <1>     je .exclusiveDir
   247 0000106E 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   248 00001070 7437                <1>     je .volFile ;If so, go here
   249 00001072 80FC08              <1>     cmp ah, dirVolumeID ;Is this file a volume lbl that we are not looking for?
   250 00001075 7414                <1>     je .nextEntry
   251 00001077 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   252 00001079 7710                <1>     ja .nextEntry
   253                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   254                              <1> .scanName:
   255 0000107B 56                  <1>     push rsi
   256 0000107C 488D3D(D9060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   257 00001083 E83E000000          <1>     call .nameCompare
   258 00001088 5E                  <1>     pop rsi
   259 00001089 7424                <1>     je .searchEntryFound
   260                              <1> .nextEntry:
   261                              <1> ;Go to next entry
   262 0000108B 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   263 00001092 FF05(8A070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   264 00001098 FFC9                <1>     dec ecx
   265 0000109A 7596                <1>     jnz .searchMainLp
   266                              <1> .badExit:
   267 0000109C 31C0                <1>     xor eax, eax
   268 0000109E FFC0                <1>     inc eax ;Clear ZF
   269 000010A0 F9                  <1>     stc
   270                              <1>     return
    13                              <2> %%_ret:
    14 000010A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> .exclusiveDir:
   272                              <1> ;Used when going down a path, dir bit simply need be set
   273 000010A2 F6C410              <1>     test ah, dirDirectory
   274 000010A5 75D4                <1>     jnz .scanName
   275 000010A7 EBE2                <1>     jmp short .nextEntry
   276                              <1> 
   277                              <1> .volFile:
   278 000010A9 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   279 000010AB 74CE                <1>     je .scanName       ;If so, scan the name agrees
   280 000010AD EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   281                              <1> 
   282                              <1> .searchEntryFound:
   283                              <1> ;Here a good entry was found!
   284 000010AF 56                  <1>     push rsi
   285 000010B0 57                  <1>     push rdi
   286 000010B1 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   287 000010B3 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   288 000010BA B904000000          <1>     mov ecx, 32/8
   289 000010BF F348A5              <1>     rep movsq   ;Copy the directory to SDA
   290 000010C2 5F                  <1>     pop rdi
   291 000010C3 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   292 000010C4 F8                  <1>     clc
   293                              <1>     return
    13                              <2> %%_ret:
    14 000010C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .nameCompare:
   296                              <1> ;Input: rsi = source string
   297                              <1> ;       rdi = string template to compare against
   298                              <1> ;Output: ZF=ZE => Strings are ok
   299                              <1> ;        ZF=NZ => Strings not ok
   300                              <1> ;Accepts wildcards. Trashes al
   301 000010C6 51                  <1>     push rcx
   302 000010C7 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   303                              <1> .ncLp:
   304 000010C9 81F90B000000        <1>     cmp ecx, 11
   305 000010CF 740B                <1>     je .ncExit
   306 000010D1 FFC1                <1>     inc ecx
   307 000010D3 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   308 000010D4 74F3                <1>     je .ncLp    ;If equal, keep going
   309 000010D6 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   310 000010DA 74ED                <1>     je .ncLp
   311                              <1> .ncExit:
   312 000010DC 59                  <1>     pop rcx
   313                              <1>     return
    13                              <2> %%_ret:
    14 000010DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .getNumberOfEntries:
   315 000010DE 55                  <1>     push rbp
   316 000010DF 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   317 000010E6 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   318 000010EA C1E905              <1>     shr ecx, 5  ;Divide by 32
   319 000010ED 5D                  <1>     pop rbp
   320                              <1>     return
    13                              <2> %%_ret:
    14 000010EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   321                              <1> adjustSearchAttr:
   322                              <1> ;Converts the byte to a system only if the bit is set
   323                              <1> ;Input: eax = User selected search mask
   324                              <1> ;Output: eax = Modified search mask
   325 000010EF 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   326 000010F4 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   327                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010F9 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   328 000010FB B808000000          <1>     mov eax, dirVolumeID
   329                              <1>     return
    13                              <2> %%_ret:
    14 00001100 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   330                              <1> 
   331                              <1> asciiToFCB:
   332                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   333                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   334                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   335                              <1> ;Name is space padded.
   336                              <1> ;Input: rsi = ASCII string buffer
   337                              <1> ;       rdi = FCB name buffer
   338                              <1> ;Output: al = Char that terminated the source string 
   339 00001101 53                  <1>     push rbx    
   340 00001102 57                  <1>     push rdi
   341 00001103 B90B000000          <1>     mov ecx, 11
   342 00001108 B020                <1>     mov al, " "
   343 0000110A F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   344 0000110C 5F                  <1>     pop rdi
   345 0000110D 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   346                              <1> .processName:
   347 00001110 AC                  <1>     lodsb   ;Get the char in al
   348 00001111 E8F45E0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   349 00001116 84C0                <1>     test al, al
   350 00001118 742D                <1>     jz .exit
   351 0000111A 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   352 0000111C 740E                <1>     je .extSpace
   353 0000111E 3C2E                <1>     cmp al, "."
   354 00001120 7413                <1>     je .ext
   355                              <1>     ;Test if the char is valid
   356 00001122 E864600000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   357 00001127 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   358 00001129 AA                  <1>     stosb   ;Store the char
   359 0000112A EBE4                <1>     jmp short .processName
   360                              <1> .extSpace:
   361                              <1> ;Now we scan for a period in the name
   362 0000112C AC                  <1>     lodsb   ;Get a char and increase rsi
   363 0000112D 84C0                <1>     test al, al
   364 0000112F 7416                <1>     jz .exit
   365 00001131 3C2E                <1>     cmp al, "."     ;If al is not a period...
   366 00001133 75F7                <1>     jne .extSpace   ; keep searching
   367                              <1> .ext:
   368 00001135 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   369                              <1> .processExt:
   370 00001139 AC                  <1>     lodsb
   371 0000113A 84C0                <1>     test al, al
   372 0000113C 7409                <1>     jz .exit
   373 0000113E 3C20                <1>     cmp al, " "
   374 00001140 7405                <1>     je .exit
   375 00001142 AA                  <1>     stosb
   376 00001143 EBF4                <1>     jmp short .processExt
   377                              <1> .exitBadChar:
   378 00001145 30C0                <1>     xor al, al  ;Return a null terminator
   379                              <1> .exit:
   380 00001147 5B                  <1>     pop rbx
   381                              <1>     return
    13                              <2> %%_ret:
    14 00001148 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> 
   383                              <1> FCBToAsciiz:
   384                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   385                              <1> ;Name is space padded too
   386                              <1> ;Input: rsi = FCB name buffer
   387                              <1> ;       rdi = ASCIIZ string buffer
   388 00001149 B908000000          <1>     mov ecx, 8
   389 0000114E F3A4                <1>     rep movsb   ;Move the name over
   390                              <1> .scanNameSpace:
   391 00001150 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   392 00001154 750D                <1>     jne .ext
   393 00001156 48FFCF              <1>     dec rdi
   394 00001159 FFC1                <1>     inc ecx
   395 0000115B 81F908000000        <1>     cmp ecx, 8
   396 00001161 72ED                <1>     jb .scanNameSpace
   397                              <1> .ext:
   398 00001163 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   399 00001168 7506                <1>     jne .validExt
   400 0000116A 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   401 0000116E 7415                <1>     je .exit
   402                              <1> .validExt:
   403 00001170 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   404 00001172 AA                  <1>     stosb
   405 00001173 B903000000          <1>     mov ecx, 3
   406 00001178 F3A4                <1>     rep movsb   ;Move the three extension chars over
   407                              <1> .scanExtSpace:
   408 0000117A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   409 0000117E 7505                <1>     jne .exit
   410 00001180 48FFCF              <1>     dec rdi
   411 00001183 EBF5                <1>     jmp short .scanExtSpace
   412                              <1> .exit:
   413 00001185 31C0                <1>     xor eax, eax
   414 00001187 AA                  <1>     stosb   ;Store a null at the end
   415                              <1>     return
    13                              <2> %%_ret:
    14 00001188 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> 
   417                              <1> setupFFBlock:
   418                              <1> ;Sets up the find first block for the search
   419                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   420 00001189 50                  <1>     push rax
   421 0000118A 53                  <1>     push rbx
   422 0000118B 56                  <1>     push rsi
   423 0000118C 57                  <1>     push rdi
   424 0000118D 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   425 00001190 8A05(FC060000)      <1>     mov al, byte [searchAttr]
   426 00001196 243F                <1>     and al, 3Fh ;Clear upper two bits
   427 00001198 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   428 0000119B 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   429 000011A2 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   430 000011A4 488D35(D9060000)    <1>     lea rsi, fcbName
   431 000011AB 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   432 000011AF 57                  <1>     push rdi
   433 000011B0 48B820202020202020- <1>     mov rax, "        "
   433 000011B9 20                  <1>
   434 000011BA 48AB                <1>     stosq
   435 000011BC 66AB                <1>     stosw
   436 000011BE AA                  <1>     stosb
   437 000011BF 5F                  <1>     pop rdi
   438 000011C0 48A5                <1>     movsq   ;Move 8 chars
   439 000011C2 66A5                <1>     movsw   ;Move 2 chars
   440 000011C4 A4                  <1>     movsb   ;Move the final char
   441                              <1> 
   442 000011C5 8B05(8A070000)      <1>     mov eax, dword [dirEntry]
   443 000011CB 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   444 000011CE 8B05(80070000)      <1>     mov eax, dword [dirClustPar]
   445 000011D4 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   446 000011D7 8A05(65060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   447 000011DD 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   448 000011E0 8B05(70060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   449 000011E6 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   450 000011E9 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   451 000011EF 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   452 000011F2 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   453 000011F6 488D35(5A060000)    <1>     lea rsi, curDirCopy
   454 000011FD E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   455                              <1> 
   456 00001202 5F                  <1>     pop rdi
   457 00001203 5E                  <1>     pop rsi
   458 00001204 5B                  <1>     pop rbx
   459 00001205 58                  <1>     pop rax
   460                              <1>     return
    13                              <2> %%_ret:
    14 00001206 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   463                              <1> ;Gets the drive letter for the path in al
   464                              <1> ;Input: rsi = Buffer to process
   465                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   466                              <1> ;       ZF=ZE and al = 0 => Null path
   467                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   468                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   469                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   470 00001207 30C0                <1>     xor al, al
   471 00001209 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   472                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000120C 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   473 0000120E 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   474                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001212 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   475 00001214 66AD                <1>     lodsw   ;Get first word, rsi += 2
   476                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   477 00001216 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   478 00001218 2C60                <1>     sub al, 60h
   479                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000121A 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   480 0000121C B0FF                <1>     mov al, -1  ;Else not a valid drive number
   481                              <1>     return
    13                              <2> %%_ret:
    14 0000121E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> getDirPath:
   484 0000121F 30C0                <1>     xor al, al   ;Set to Directory
   485 00001221 EB02                <1>     jmp short getPath
   486                              <1> getFilePath:
   487 00001223 B0FF                <1>     mov al, -1  ;Set to File
   488                              <1> getPath:
   489                              <1> ;Called with:
   490                              <1> ; rdi = SDA Buffer for filename
   491                              <1> ; rsi = Potentially unqualified filename
   492                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   493 00001225 50                  <1>     push rax
   494 00001226 57                  <1>     push rdi
   495 00001227 E876000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   496 0000122C 5F                  <1>     pop rdi
   497 0000122D 58                  <1>     pop rax
   498                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000122E 72EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   499                              <1>     ;Now our name is FQ, we can search the for it!
   500 00001230 48813D(12070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   500 00001238 FFFFFF              <1>
   501 0000123B 0F848E010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   502 00001241 8805(69040000)      <1>     mov byte [fileDirFlag], al 
   503 00001247 B0FF                <1>     mov al, -1
   504 00001249 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   505 0000124F 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   506 00001255 C605(05070000)00    <1>     mov byte [parDirExist], 0   
   507 0000125C C605(04070000)00    <1>     mov byte [fileExist], 0     
   508 00001263 8A05(09070000)      <1>     mov al, byte [workingDrv]
   509 00001269 FEC0                <1>     inc al
   510 0000126B 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   511 0000126F 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   512 00001274 7424                <1>     je .net
   513 00001276 488B1D(1E060000)    <1>     mov rbx, qword [fname1Ptr]
   514 0000127D 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   515 00001284 488D7301            <1>     lea rsi, qword [rbx + 1]
   516 00001288 FF35(12070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   517 0000128E E88B010000          <1>     call pathWalk
   518 00001293 8F05(12070000)      <1>     pop qword [workingCDS]
   519                              <1>     return
    13                              <2> %%_ret:
    14 00001299 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> .net:
   521 0000129A 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   522 0000129D E983010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   523                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   524                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   525                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   526                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   527                              <1>     ; so the redir can do it's job.
   528                              <1> 
   529                              <1> canonicaliseFileName:
   530                              <1> ;Always trying to build and qualify a full pathname
   531                              <1> ;Does getPath without hitting the disk
   532 000012A2 B0FF                <1>     mov al, -1
   533 000012A4 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   534 000012AA 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   535 000012B0 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   536 000012B7 FEC0                <1>     inc al  ;make al = 0
   537 000012B9 8805(2E060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   538 000012BF E836000000          <1>     call getPathNoCanon.epAlt
   539                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012C4 72D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   540                              <1>     ;Check the last two chars to see if we have a null terminator.
   541                              <1>     ;If neither has a null terminator, add one
   542 000012C6 31C0                <1>     xor eax, eax
   543 000012C8 3807                <1>     cmp byte [rdi], al
   544                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012CA 74CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   545 000012CC 3847FF              <1>     cmp byte [rdi - 1], al 
   546                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012CF 74C8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   547 000012D1 AA                  <1>     stosb
   548                              <1>     return
    13                              <2> %%_ret:
    14 000012D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> getDirPathNoCanon:
   551                              <1> ;FCB only
   552 000012D3 31C0                <1>     xor eax, eax
   553 000012D5 4889FE              <1>     mov rsi, rdi
   554 000012D8 EB05                <1>     jmp short getPathNoCanon
   555                              <1> getFilePathNoCanon:
   556                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   557                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   558 000012DA B0FF                <1>     mov al, -1
   559 000012DC 4889FE              <1>     mov rsi, rdi
   560                              <1> getPathNoCanon:
   561                              <1> ;Called with:
   562                              <1> ; rdi = SDA Buffer for filename
   563                              <1> ; rsi = Potentially unqualified filename
   564                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   565 000012DF 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   566 000012E5 B0FF                <1>     mov al, -1
   567 000012E7 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   568 000012ED 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   569 000012F4 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   570                              <1> .epAlt:
   571 000012FA C605(05070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   572 00001301 C605(04070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   573 00001308 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   574 0000130F 7431                <1>     jz .notServer
   575 00001311 E8F1FEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   576 00001316 E8565C0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   577 0000131B FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   578 0000131D 56                  <1>     push rsi
   579 0000131E 57                  <1>     push rdi
   580 0000131F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   581 00001326 50                  <1>     push rax
   582 00001327 E835600000          <1>     call dosCrit1Enter
   583 0000132C E888580000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   584 00001331 E835600000          <1>     call dosCrit1Exit
   585 00001336 58                  <1>     pop rax
   586 00001337 5F                  <1>     pop rdi
   587 00001338 5E                  <1>     pop rsi
   588 00001339 0F83AA000000        <1>     jnc .driveOk
   589                              <1> .serverExit:
   590 0000133F B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   591                              <1>     return
    13                              <2> %%_ret:
    14 00001341 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> .notServer:
   593                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   594 00001342 48C705(12070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   594 0000134A FFFFFF              <1>
   595 0000134D B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   596 00001352 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   597                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001354 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   598 00001356 E8ACFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   599 0000135B 9C                  <1>     pushfq  ;Save the flag state on stack
   600 0000135C 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   601 0000135D 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   602 00001360 E8995C0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   603 00001365 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   604 00001367 E8925C0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   605 0000136C 756B                <1>     jnz .notNet
   606 0000136E 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   607 00001370 7567                <1>     jne .notNet
   608 00001372 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   609 00001373 9D                  <1>     popfq
   610 00001374 66AD                <1>     lodsw
   611 00001376 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   612 0000137A 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   613                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   614                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   615                              <1> ; redirector Find First Without CDS
   616 0000137C 8A1D(2E060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   617 00001382 C605(2E060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   618 00001389 53                  <1>     push rbx
   619                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   620 0000138A AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   621 0000138B E87A5C0000          <1>     call uppercaseChar  ;Make char in al uppercase
   622 00001390 84C0                <1>     test al, al
   623 00001392 7435                <1>     jz .netEnd
   624 00001394 E8655C0000          <1>     call swapPathSeparator  ;If path sep, swap it
   625 00001399 AA                  <1>     stosb
   626 0000139A 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   627                              <1>     ;Skip all following pathseps if there are any
   628                              <1> .moveNetSharePtr:
   629 0000139C AC                  <1>     lodsb
   630 0000139D E85C5C0000          <1>     call swapPathSeparator
   631 000013A2 74F8                <1>     jz .moveNetSharePtr
   632 000013A4 C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   633 000013A7 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   634 000013AA 84C0                <1>     test al, al ;Was this char null?
   635 000013AC 741B                <1>     jz .netEnd  ;Skip processing if so!
   636 000013AE 4889FB              <1>     mov rbx, rdi
   637 000013B1 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   638 000013B4 E86C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   639 000013B9 721C                <1>     jc .netExitBad
   640                              <1>     ;Now if we have a trailing backslash, throw it away
   641                              <1>     ;rdi points to the null char of the path
   642 000013BB 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   643 000013BE E83B5C0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   644 000013C3 7504                <1>     jnz .netEnd
   645 000013C5 C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   646                              <1> .netEnd:
   647 000013C9 5B                  <1>     pop rbx
   648 000013CA 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   649                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000013CC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000013CE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   650                              <1> .netFFnoCDS:
   651 000013CF B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   652 000013D4 CD2F                <1>     int 2Fh
   653                              <1>     return
    13                              <2> %%_ret:
    14 000013D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   654                              <1> .netExitBad:
   655 000013D7 5B                  <1>     pop rbx
   656                              <1>     return
    13                              <2> %%_ret:
    14 000013D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   657                              <1> .notNet:
   658                              <1> ;This is the normal case; paths can be relative, or absolute.
   659 000013D9 58                  <1>     pop rax ;Get the drive letter back
   660 000013DA 9D                  <1>     popfq   ;Get the flag state back
   661 000013DB 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   662                              <1> .pnfErr:
   663 000013DD B003                <1>     mov al, errPnf  ;Null path error
   664 000013DF F9                  <1>     stc
   665                              <1>     return
    13                              <2> %%_ret:
    14 000013E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   666                              <1> .notNull:
   667 000013E1 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   668 000013E3 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   669 000013E5 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   670 000013E7 F9                  <1>     stc
   671                              <1>     return
    13                              <2> %%_ret:
    14 000013E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   672                              <1> .driveOk:
   673 000013E9 84C0                <1>     test al, al
   674 000013EB 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   675                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   676 000013ED 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   677 000013F0 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   678 000013F2 50                  <1>     push rax    ;Save the drive letter
   679 000013F3 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   680 000013F4 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   681 000013F7 E8025C0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   682                              <1>     ;If al is a path separator, then this path is absolute.
   683 000013FC 58                  <1>     pop rax ;Get back the drive letter
   684 000013FD 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   685                              <1> .absoPath:
   686                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   687 000013FF 48FFC6              <1>     inc rsi
   688 00001402 EB1A                <1>     jmp short .commonDir
   689                              <1> .curPath:
   690                              <1> ;This is only jumped to if we are relative the current drive
   691                              <1> ;rsi points to first char in path
   692                              <1> ;If this char is \ or /, then it is an absolute path.
   693 00001404 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   694 0000140A FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   695 0000140C 50                  <1>     push rax    ;Save the current drive number
   696 0000140D 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   697 0000140F E8EA5B0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   698 00001414 58                  <1>     pop rax ;Get back the current drive number
   699 00001415 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   700                              <1> .relMain:
   701 00001417 C605(01070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   702                              <1> .commonDir:
   703                              <1> ;rsi points to the start of the string we will be appending
   704                              <1> ;Fall through now
   705                              <1> pathWalk:
   706                              <1> ;Input: rsi must point to source buffer for path to expand
   707                              <1> ;       rdi must point to a destination buffer
   708                              <1> ;       al must contain the drive 1 based number
   709 0000141E E8B6000000          <1>     call prepareDir    ;Prepare the start of the path
   710 00001423 727D                <1>     jc .badDriveExit 
   711                              <1> .netEp:
   712                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   713                              <1> ;For subst, resolution cannot go past backslash offset.
   714                              <1> ;For join, it is transparent.
   715 00001425 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   716 00001428 7512                <1>     jnz .mainlp
   717                              <1>     ;Setup dummy dir data for Root directory
   718 0000142A 31C0                <1>     xor eax, eax
   719 0000142C 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   720 00001433 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   721 0000143A EB6C                <1>     jmp short .exitGood
   722                              <1> .mainlp:
   723                              <1>     ;rbx must remain constant in this portion,
   724                              <1>     ; and is used to signify the first writable byte in the path
   725 0000143C 53                  <1>     push rbx
   726 0000143D E85D010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   727 00001442 5B                  <1>     pop rbx
   728 00001443 726A                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   729 00001445 84C0                <1>     test al, al
   730 00001447 7507                <1>     jnz .notFile
   731 00001449 C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   732                              <1> .notFile:
   733 00001450 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   734 00001451 E8C4040000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   735 00001456 58                  <1>     pop rax
   736 00001457 736B                <1>     jnc .deviceFound
   737 00001459 E827020000          <1>     call searchForPathspec  ;and search the directory
   738 0000145E 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   739 00001460 E876020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   740 00001465 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   741 00001467 84C0                <1>     test al, al ;Exit if this pathspec was a file
   742 00001469 743D                <1>     jz .exitGood
   743                              <1>     ;Here I have to take the cluster data from the found directory entry
   744                              <1>     ; and setup the search for the next pathspec portion
   745                              <1>     ;Copy necessary data from the current directory copy
   746 0000146B 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   747 00001472 74C8                <1>     jz .mainlp
   748 00001474 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   749 0000147B C1E010              <1>     shl eax, 10h    ;Shift it high
   750 0000147E 668B05(74060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   751                              <1>     ;eax now has the cluster number of the search
   752 00001485 8905(84070000)      <1>     mov dword [dirClustA], eax
   753 0000148B 8905(80070000)      <1>     mov dword [dirClustPar], eax
   754 00001491 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   755 00001493 8905(8A070000)      <1>     mov dword [dirEntry], eax
   756 00001499 668905(88070000)    <1>     mov word [dirSect], ax
   757 000014A0 EB9A                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   758                              <1> .badDriveExit:
   759 000014A2 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   760                              <1>     return
    13                              <2> %%_ret:
    14 000014A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   761                              <1> .exitGood:
   762 000014A8 C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   763                              <1> .exit:
   764                              <1>     return
    13                              <2> %%_ret:
    14 000014AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   765                              <1> .checkDev:
   766                              <1> ;If the return code is errNoFil AND Int24Fail = 0, then we check to see if 
   767                              <1> ; we are in \DEV pseudo dir
   768 000014B0 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Make sure we are not returning from a FAIL
   769 000014B7 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   770                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   771 000014B9 56                  <1>     push rsi
   772 000014BA 57                  <1>     push rdi
   773 000014BB E8E8030000          <1>     call checkDevPath
   774 000014C0 5F                  <1>     pop rdi
   775 000014C1 5E                  <1>     pop rsi
   776 000014C2 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   777                              <1> .deviceFound:
   778 000014C4 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   779 000014C6 C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   780 000014CD C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   781 000014D4 EBD9                <1>     jmp short .exit   
   782                              <1> .nodev:
   783 000014D6 F9                  <1>     stc
   784 000014D7 EBD6                <1>     jmp short .exit
   785                              <1> 
   786                              <1> prepareDir:
   787                              <1> ;Used to transfer the current directory if it is necessary.
   788                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   789                              <1> ; a relative path is specified.
   790                              <1> ;Input: al = 1-based drive letter
   791                              <1> ;Output: rdi = Pointing at where to place chars from source string
   792                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   793                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   794 000014D9 56                  <1>     push rsi    ;Push ptr to source string
   795 000014DA E8825E0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   796 000014DF E81D5A0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   797 000014E4 730C                <1>     jnc .notJoin ;Very valid disk
   798 000014E6 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   799 000014ED 7544                <1>     jnz .joinEp                 ;If not, proceed. If so, fail.    
   800 000014EF F9                  <1>     stc
   801 000014F0 EB0C                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   802                              <1> .notJoin:
   803 000014F2 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
   804 000014F9 E8BB560000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   805                              <1>     ;rbp = DPB ptr now
   806                              <1> .critExit:
   807 000014FE E8685E0000          <1>     call dosCrit1Exit
   808 00001503 7253                <1>     jc .badDriveExit 
   809 00001505 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   810                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   811                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   812                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   813                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   814                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   815 0000150C 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   816 00001513 4889FB              <1>     mov rbx, rdi
   817 00001516 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   818 0000151A 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   819                              <1>     ;Now check if we have a subst to handle
   820 0000151D 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   821 00001523 7535                <1>     jnz .prepDirSubst
   822 00001525 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   823 0000152C 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   824                              <1>     ;Else we copy the first two chars only (X:)
   825 0000152E 66A5                <1>     movsw  
   826 00001530 B05C                <1>     mov al, "\"
   827 00001532 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   828                              <1> .joinEp:
   829 00001533 31C0                <1>     xor eax, eax    ;Get cluster 0
   830 00001535 EB1B                <1>     jmp short .prepDirExitSkip
   831                              <1> .prepLoop:
   832 00001537 AC                  <1>     lodsb
   833 00001538 84C0                <1>     test al, al ;If al was null, then we stop
   834 0000153A 7403                <1>     jz .prepDirExit
   835 0000153C AA                  <1>     stosb
   836 0000153D EBF8                <1>     jmp short .prepLoop
   837                              <1> .prepDirExit:
   838 0000153F 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   839 00001543 7403                <1>     je .prepDirExitSkipPathsep
   840 00001545 B05C                <1>     mov al, "\"
   841 00001547 AA                  <1>     stosb   ;Store the path separator and increment rdi
   842                              <1> .prepDirExitSkipPathsep:
   843 00001548 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   844 0000154F 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   845                              <1> .prepDirExitSkip:
   846 00001552 E816000000          <1>     call prepSetupDirSearchVars
   847 00001557 F8                  <1>     clc ;Clear carry before exiting
   848                              <1> .badDriveExit:
   849 00001558 5E                  <1>     pop rsi
   850                              <1>     return
    13                              <2> %%_ret:
    14 00001559 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   851                              <1> .prepDirSubst:
   852 0000155A 51                  <1>     push rcx
   853 0000155B 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   854                              <1> .prepDirCopy1:
   855 0000155F F3A4                <1>     rep movsb   ;Copy the string over
   856 00001561 59                  <1>     pop rcx
   857 00001562 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   858 00001569 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   859 0000156B EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   860                              <1> prepSetupDirSearchVars:
   861                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   862                              <1> ;       rbp -> Working DPB
   863 0000156D 51                  <1>     push rcx
   864 0000156E 31C9                <1>     xor ecx, ecx
   865 00001570 66890D(88070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   866 00001577 890D(8A070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   867 0000157D E889F4FFFF          <1>     call getFATtype ;Get type of fat
   868 00001582 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   869 00001588 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   870                              <1>     ;FAT 32 here
   871 0000158A 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   872 0000158C 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   873 0000158E 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   874                              <1> .psdsvExit:
   875 00001591 8905(84070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   876 00001597 8905(80070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   877 0000159D 59                  <1>     pop rcx
   878                              <1>     return 
    13                              <2> %%_ret:
    14 0000159E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> 
   880                              <1> copyPathspec:
   881                              <1> ;1) Copies a path portion from the source buffer to the destination
   882                              <1> ;2) Advances rsi to the next null, \ or /
   883                              <1> ;3) Expands all * to ?'s
   884                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   885                              <1> ;    next path separator and rdi pointing to the previous pathsep
   886                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   887                              <1> ;    with rsi moving to path separator
   888                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   889                              <1> ;
   890                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   891                              <1> ;           rdi = Points to where to store it
   892                              <1> ;
   893                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   894                              <1> ;           rdi = First char of next space to store next pathspec
   895                              <1> ;           al = Last char stored (either \ or NULL)
   896                              <1> ;           CF=NC = OK path
   897                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   898                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   899 0000159F 57                  <1>     push rdi    ;Save the pointer into the user buffer
   900 000015A0 C605(8D040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   901 000015A7 488D3D(D9060000)    <1>     lea rdi, fcbName
   902 000015AE 57                  <1>     push rdi
   903 000015AF B903000000          <1>     mov ecx, 3
   904 000015B4 B820202020          <1>     mov eax, "    " ;Four spaces
   905 000015B9 F3AB                <1>     rep stosd   ;Store 12 spaces
   906 000015BB 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   907                              <1> 
   908 000015BC 488D1D(E4060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   909 000015C3 AC                  <1>     lodsb   ;Get first char from user path in al
   910 000015C4 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   911 000015C6 746B                <1>     je .cpsDots
   912 000015C8 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   913                              <1> ;First char is not a dot, so now check if starts with E5h? 
   914                              <1> ;If so, store 05h in its place!
   915 000015CB 3CE5                <1>     cmp al, 0E5h
   916 000015CD 7506                <1>     jne .cpsMainLoop
   917 000015CF 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   918 000015D2 B005                <1>     mov al, 05h
   919 000015D4 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   920                              <1> .cpsMainLoop:
   921 000015D5 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   922 000015D6 84C0                <1>     test al, al ;Is it the null char?
   923 000015D8 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   924 000015DE E81B5A0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   925 000015E3 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   926 000015E9 3C2E                <1>     cmp al, "." ;Filename extension separator
   927 000015EB 7420                <1>     je .cpsExtension
   928                              <1>     ;If we have space in the filename, we check to see if the next char is *
   929 000015ED 3C2A                <1>     cmp al, "*" ;Wildcard?
   930 000015EF 7430                <1>     je .cpsWildcard
   931 000015F1 3C3F                <1>     cmp al, "?" ;Good wildcard?
   932 000015F3 740C                <1>     je .store
   933 000015F5 E8105A0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   934 000015FA E88C5B0000          <1>     call checkCharValid ; and check it is a valid char
   935 000015FF 7472                <1>     je .cpsExitError
   936                              <1> .store:
   937 00001601 4839DF              <1>     cmp rdi, rbx
   938 00001604 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   939 00001606 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   940 00001607 EBCC                <1>     jmp short .cpsMainLoop
   941                              <1> .cpsInvalidChar:
   942 00001609 30C0                <1>     xor al, al
   943 0000160B EB3B                <1>     jmp short .cpsProcessName
   944                              <1> .cpsExtension:
   945                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   946 0000160D B903000000          <1>     mov ecx, 3 
   947 00001612 488D3D(E1060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   948 00001619 57                  <1>     push rdi
   949 0000161A B020                <1>     mov al, " "
   950 0000161C F3AA                <1>     rep stosb
   951 0000161E 5F                  <1>     pop rdi
   952 0000161F EBB4                <1>     jmp short .cpsMainLoop
   953                              <1> .cpsWildcard:
   954                              <1> ;Fill the entire FCB filespec with ?'s.
   955                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
   956                              <1> ; *'s from crashing DOS :)
   957 00001621 AC                  <1>     lodsb   ;Get char, inc rsi
   958 00001622 3C2A                <1>     cmp al, "*"
   959 00001624 74FB                <1>     je short .cpsWildcard
   960 00001626 48FFCE              <1>     dec rsi ;Go back to the first non-star char
   961 00001629 B03F                <1>     mov al, "?"
   962                              <1> .cpsWildcardLp:
   963 0000162B AA                  <1>     stosb
   964 0000162C 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
   965 0000162F 75FA                <1>     jne short .cpsWildcardLp
   966 00001631 EBA2                <1>     jmp short .cpsMainLoop
   967                              <1> 
   968                              <1> .cpsDots:
   969 00001633 AA                  <1>     stosb   ;Store the first dot
   970 00001634 8A06                <1>     mov al, byte [rsi]
   971 00001636 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   972 00001638 752E                <1>     jne .cpsStore
   973 0000163A A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   974 0000163B 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
   975 0000163D 84C0                <1>     test al, al
   976 0000163F 7407                <1>     jz .cpsProcessName
   977 00001641 E8B8590000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
   978 00001646 752B                <1>     jnz .cpsExitError
   979                              <1> .cpsProcessName:
   980                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   981 00001648 84C0                <1>     test al, al 
   982 0000164A 741C                <1>     jz .cpsStore
   983 0000164C E8AD590000          <1>     call swapPathSeparator
   984 00001651 7415                <1>     jz .cpsStore
   985                              <1> .cpsFindTerminator:
   986 00001653 AC                  <1>     lodsb
   987 00001654 84C0                <1>     test al, al 
   988 00001656 7410                <1>     jz .cpsStore
   989 00001658 E8A1590000          <1>     call swapPathSeparator
   990 0000165D 7409                <1>     jz .cpsStore
   991 0000165F E8275B0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   992 00001664 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   993                              <1>     ;If we encounter a terminator, convert to 0
   994 00001666 30C0                <1>     xor al, al
   995                              <1> .cpsStore:
   996 00001668 488D3D(E4060000)    <1>     lea rdi, fcbName+11
   997 0000166F AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   998 00001670 5F                  <1>     pop rdi
   999 00001671 F8                  <1>     clc
  1000                              <1>     return
    13                              <2> %%_ret:
    14 00001672 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1001                              <1> .cpsExitError:
  1002 00001673 5F                  <1>     pop rdi
  1003 00001674 F9                  <1>     stc
  1004                              <1>     return
    13                              <2> %%_ret:
    14 00001675 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1005                              <1> .cpsSkipPathseps:
  1006 00001676 AC                  <1>     lodsb
  1007 00001677 E882590000          <1>     call swapPathSeparator
  1008 0000167C 74F8                <1>     jz .cpsSkipPathseps
  1009 0000167E 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1010 00001681 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1011 00001683 EBE3                <1>     jmp short .cpsStore
  1012                              <1> 
  1013                              <1> searchForPathspec:
  1014                              <1>     ;Now search the current directory for this filename
  1015                              <1>     ;Find first using SDA ffBlock
  1016                              <1>     ;If al = 0, we have final file name or directory name
  1017                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1018                              <1>     ;Output: CF=CY => Error occured
  1019                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1020                              <1>     ;                 FF block somewhat setup
  1021                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1022 00001685 50                  <1>     push rax
  1023 00001686 53                  <1>     push rbx
  1024 00001687 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1025 00001688 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1026 00001689 0FB61D(69040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1027 00001690 53                  <1>     push rbx    ;and push it onto the stack
  1028                              <1> ;Evaluate whether we are searching for a file for a directory
  1029 00001691 84C0                <1>     test al, al
  1030 00001693 741D                <1>     jz .sfpPNfile
  1031                              <1>     ;Fall if subdir
  1032 00001695 488D3D(D9060000)    <1>     lea rdi, fcbName
  1033 0000169C B03F                <1>     mov al, "?" ;Search for wildcard
  1034 0000169E B90B000000          <1>     mov ecx, 11
  1035 000016A3 F2AE                <1>     repne scasb
  1036 000016A5 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1037 000016A7 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1038 000016A9 C605(69040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1039 000016B0 EB07                <1>     jmp short .sfpPNMain
  1040                              <1> .sfpPNfile:
  1041                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1042 000016B2 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1043                              <1> .sfpPNMain:
  1044 000016B9 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1045 000016C0 7405                <1>     je .sfpPNNoDisk
  1046 000016C2 E84DF8FFFF          <1>     call searchDir
  1047                              <1> .sfpPNNoDisk:
  1048 000016C7 5B                  <1>     pop rbx
  1049 000016C8 881D(69040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1050 000016CE 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1051 000016CF 5E                  <1>     pop rsi
  1052 000016D0 5B                  <1>     pop rbx
  1053 000016D1 58                  <1>     pop rax
  1054                              <1>     return
    13                              <2> %%_ret:
    14 000016D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1055                              <1> .sfpPnf:
  1056 000016D3 B803000000          <1>     mov eax, errPnf
  1057                              <1> .sfpErrExit:
  1058 000016D8 F9                  <1>     stc ;Set carry
  1059 000016D9 EBEC                <1>     jmp short .sfpPNNoDisk
  1060                              <1> 
  1061                              <1> addPathspecToBuffer:
  1062                              <1> ;Input: fcbName = Qualified pathname portion
  1063                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1064                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1065                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1066                              <1> ;rbx points to the "head of the path"
  1067                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1068 000016DB F605(2E060000)FF    <1>     test byte [skipDisk], -1
  1069                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000016E2 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1070 000016E4 803D(D9060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1071 000016EB 7461                <1>     je .aptbDots
  1072                              <1>     ;Copy filename over to internal buffer
  1073                              <1> .aptbAddNull:
  1074 000016ED 56                  <1>     push rsi    ;Save source pointer position
  1075 000016EE 488D35(D9060000)    <1>     lea rsi, fcbName
  1076 000016F5 E84FFAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1077 000016FA 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1078 000016FD 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1079 000016FE E8C4000000          <1>     call .aptbInterveneEnterJoin
  1080                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001703 72CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1081                              <1> .aptbHandleTerminator:
  1082 00001705 8A05(E4060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1083 0000170B 84C0                <1>     test al, al
  1084 0000170D 741A                <1>     jz .aptbHandleNull
  1085 0000170F E8EA580000          <1>     call swapPathSeparator
  1086 00001714 0F85C5000000        <1>     jnz .aptbErrorExit
  1087                              <1> ;Handle path separator here directly
  1088 0000171A 50                  <1>     push rax    ;Preserve the terminator char
  1089 0000171B 8A47FF              <1>     mov al, byte [rdi - 1]
  1090 0000171E E8DB580000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1091 00001723 58                  <1>     pop rax
  1092 00001724 7426                <1>     jz .aptbExitOk 
  1093 00001726 AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1094 00001727 EB23                <1>     jmp short .aptbExitOk
  1095                              <1> .aptbHandleNull:
  1096 00001729 E85B000000          <1>     call .aptbAtHeadOfPath
  1097 0000172E 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1098 00001730 50                  <1>     push rax
  1099 00001731 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1100 00001734 E8C5580000          <1>     call swapPathSeparator
  1101 00001739 58                  <1>     pop rax
  1102 0000173A 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1103 0000173C 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1104 0000173F EB0B                <1>     jmp short .aptbExitOk
  1105                              <1> .aptbHandleNullNoOverwritePrim:
  1106 00001741 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1107 00001745 7403                <1>     je short .aptbHandleNullNoOverwrite
  1108                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1109 00001747 48FFCF              <1>     dec rdi
  1110                              <1> .aptbHandleNullNoOverwrite:
  1111 0000174A 8807                <1>     mov byte [rdi], al  ;Write in a null
  1112                              <1> .aptbExitOk:
  1113 0000174C F8                  <1>     clc
  1114                              <1>     return
    13                              <2> %%_ret:
    14 0000174D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1115                              <1> .aptbDots:
  1116                              <1> ;For one dot, we pull the terminating null to rdi
  1117                              <1> ;For two dots, we search backwards for the previous "\"
  1118 0000174E 803D(DA060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1119 00001755 7409                <1>     je .aptbMoreDots
  1120 00001757 C605(D9060000)20    <1>     mov byte [fcbName], " "
  1121 0000175E EB8D                <1>     jmp short .aptbAddNull
  1122                              <1> .aptbMoreDots:
  1123                              <1> ;Here we have two dots
  1124 00001760 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1125 00001765 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1126                              <1> ;Else, we are able to decrement.
  1127 00001767 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1128                              <1> .aptbDotsLp:
  1129 0000176E E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1130 00001773 7490                <1>     je .aptbHandleTerminator
  1131 00001775 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1132 00001778 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1133 0000177A E87F580000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1134 0000177F 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1135 00001781 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1136 00001784 E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1137                              <1> .aptbAtHeadOfPath:
  1138                              <1> ;Returns ZF=ZE if at head of path.
  1139 00001789 57                  <1>     push rdi
  1140 0000178A 48FFCF              <1>     dec rdi
  1141 0000178D 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1142 00001790 5F                  <1>     pop rdi
  1143                              <1>     return
    13                              <2> %%_ret:
    14 00001791 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1144                              <1> .aptbInterveneExitJoin:
  1145                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1146 00001792 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1147 00001799 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1148 0000179F 753E                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1149                              <1>     ;Now we change the drive letter and return
  1150 000017A1 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1151 000017A4 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1152 000017A7 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1153 000017A9 E853570000          <1>     call getCDSNotJoin
  1154                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017AE 72E1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1155 000017B0 56                  <1>     push rsi
  1156 000017B1 57                  <1>     push rdi
  1157 000017B2 53                  <1>     push rbx
  1158 000017B3 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1159 000017BA E8FA530000          <1>     call getDiskDPB 
  1160 000017BF 5B                  <1>     pop rbx
  1161 000017C0 5F                  <1>     pop rdi
  1162 000017C1 5E                  <1>     pop rsi
  1163 000017C2 E93EFFFFFF          <1>     jmp .aptbHandleTerminator
  1164                              <1> .aptbInterveneEnterJoin:
  1165                              <1> ;Handles join paths.
  1166 000017C7 F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1167                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017CE 74C1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1168 000017D0 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1169 000017D1 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
  1170 000017D8 E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1171 000017DD 5E                  <1>     pop rsi
  1172                              <1>     return
    13                              <2> %%_ret:
    14 000017DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1173                              <1> .aptbErrorExit:
  1174 000017DF B002                <1>     mov al, errFnf
  1175 000017E1 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1176 000017E8 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1177 000017EF C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1178 000017F6 F9                  <1>     stc
  1179                              <1>     return
    13                              <2> %%_ret:
    14 000017F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1180                              <1> 
  1181                              <1> handleJoin:
  1182                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1183                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1184                              <1> ;Input:
  1185                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1186                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1187                              <1> ; rax = 0
  1188                              <1> ;Output:
  1189                              <1> ;If no match, no effect.
  1190                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1191                              <1> ; join drive. rsi is advanced to the next path componant.
  1192                              <1> ;If CF=CY => Disk detection error
  1193 000017F8 51                  <1>     push rcx
  1194 000017F9 55                  <1>     push rbp
  1195 000017FA 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1196 00001801 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1197 00001805 F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1198 0000180B 740C                <1>     jz .okToGo
  1199 0000180D F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1200 00001813 0F848C000000        <1>     jz .exitNoCrit
  1201                              <1> .okToGo:
  1202 00001819 E8435B0000          <1>     call dosCrit1Enter
  1203 0000181E 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1204 00001825 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1205                              <1> .checkCDS:
  1206 00001827 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1207 0000182D 7560                <1>     jne .gotoNextCDS
  1208                              <1> .scanCDSName:
  1209                              <1> ;Get the length of the CDS path componant to check
  1210 0000182F 51                  <1>     push rcx
  1211 00001830 57                  <1>     push rdi
  1212 00001831 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1213 00001832 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1214 00001835 E820580000          <1>     call strlen     ;Get length of the path componant in ecx
  1215 0000183A FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1216 0000183C F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1217 0000183E 754C                <1>     jnz .notString
  1218                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1219 00001840 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1220 00001841 E8B8570000          <1>     call swapPathSeparator
  1221 00001846 7407                <1>     jz .goodString
  1222 00001848 84C0                <1>     test al, al
  1223 0000184A 7540                <1>     jnz .notString
  1224 0000184C 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1225                              <1> .goodString:
  1226                              <1>     ;Here we know we have the right string.
  1227 0000184F 59                  <1>     pop rcx ;Trash original rsi
  1228 00001850 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1229 00001851 59                  <1>     pop rcx 
  1230                              <1>     ;Now store the path in the original CDS before intervening
  1231                              <1>     ; in the path
  1232 00001852 48892D(12070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1233 00001859 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1234 0000185A 57                  <1>     push rdi
  1235 0000185B 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1236 0000185E 53                  <1>     push rbx    ;Preserve the head of the path
  1237 0000185F E855530000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1238 00001864 5B                  <1>     pop rbx
  1239 00001865 5F                  <1>     pop rdi
  1240 00001866 5E                  <1>     pop rsi
  1241 00001867 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1242 00001869 8A05(09070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1243 0000186F 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1244 00001871 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1245 00001875 7403                <1>     je .notNet
  1246 00001877 F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1247 00001878 EB26                <1>     jmp short .exit
  1248                              <1> .notNet:
  1249                              <1> ; Join entry intervention occurs here.
  1250 0000187A 8843FE              <1>     mov byte [rbx - 2], al
  1251 0000187D 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1252                              <1> .pullLp:
  1253 00001881 AC                  <1>     lodsb
  1254 00001882 AA                  <1>     stosb
  1255 00001883 84C0                <1>     test al, al
  1256 00001885 75FA                <1>     jnz .pullLp
  1257 00001887 48FFCF              <1>     dec rdi
  1258 0000188A EB14                <1>     jmp short .exit
  1259                              <1> .notString:
  1260 0000188C 5E                  <1>     pop rsi
  1261 0000188D 5F                  <1>     pop rdi
  1262 0000188E 59                  <1>     pop rcx
  1263                              <1> .gotoNextCDS:
  1264 0000188F 4881C55F000000      <1>     add rbp, cds_size
  1265 00001896 FFC1                <1>     inc ecx 
  1266 00001898 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1267 0000189E 7587                <1>     jnz .checkCDS
  1268                              <1> .exit:
  1269 000018A0 E8C65A0000          <1>     call dosCrit1Exit
  1270                              <1> .exitNoCrit:
  1271 000018A5 5D                  <1>     pop rbp
  1272 000018A6 59                  <1>     pop rcx
  1273                              <1>     return
    13                              <2> %%_ret:
    14 000018A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1274                              <1> 
  1275                              <1> checkDevPath:
  1276                              <1> ;Called only if the file/directory was not found on disk.
  1277                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1278                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1279                              <1> ; and check to see if it is a char device. If it is, build a directory
  1280                              <1> ; If it is not, proceed with the request fail.
  1281                              <1> ;
  1282                              <1> ;Input: rsi = Pointer to the next path spec
  1283                              <1> ;Output: CF=NC => Char device found, directory built
  1284                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1285 000018A8 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1286                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018AF 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1287 000018B1 803D(E4060000)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1288 000018B8 7459                <1>     je .notOk                      
  1289                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1290 000018BA 50                  <1>     push rax
  1291 000018BB 48B844455620202020- <1>     mov rax, "DEV     "
  1291 000018C4 20                  <1>
  1292 000018C5 483905(D9060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1293 000018CC 58                  <1>     pop rax
  1294 000018CD 7544                <1>     jne .notOk
  1295 000018CF 813D(E1060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1295 000018D7 205C                <1>
  1296 000018D9 7538                <1>     jne .notOk
  1297                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1298                              <1>     ; looking for a device driver
  1299                              <1>     ;First append it to rdi 
  1300 000018DB B84445565C          <1>     mov eax, "DEV\" 
  1301 000018E0 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1302 000018E1 57                  <1>     push rdi
  1303 000018E2 488D3D(D9060000)    <1>     lea rdi, fcbName
  1304 000018E9 E813F8FFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1305                              <1>     ;Returns in al the terminating char of the source string
  1306 000018EE 5F                  <1>     pop rdi
  1307                              <1>     ;If al is a pathsep, fail
  1308 000018EF E80A570000          <1>     call swapPathSeparator
  1309 000018F4 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1310 000018F6 30C0                <1>     xor al, al
  1311 000018F8 8805(E4060000)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1312 000018FE 53                  <1>     push rbx
  1313 000018FF E844000000          <1>     call checkIfCharDevice
  1314 00001904 5B                  <1>     pop rbx ;Don't need bh yet
  1315 00001905 720C                <1>     jc .notOk
  1316 00001907 E873000000          <1>     call buildCharDir
  1317                              <1>     ;Here the device was determined to be a char device.
  1318                              <1>     ;A dummy directory entry was built for it.
  1319                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1320                              <1>     ; Do not Find Next!
  1321                              <1> .copyName:
  1322 0000190C E838F8FFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1323 00001911 F8                  <1>     clc
  1324                              <1>     return
    13                              <2> %%_ret:
    14 00001912 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1325                              <1> .notOk:
  1326 00001913 B802000000          <1>     mov eax, errFnf
  1327 00001918 F9                  <1>     stc
  1328                              <1>     return
    13                              <2> %%_ret:
    14 00001919 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1329                              <1> .charDevSearch:
  1330 0000191A 53                  <1>     push rbx
  1331 0000191B E828000000          <1>     call checkIfCharDevice
  1332 00001920 5B                  <1>     pop rbx ;Dont need bh yet
  1333 00001921 72F0                <1>     jc .notOk
  1334 00001923 E857000000          <1>     call buildCharDir
  1335 00001928 803D(E4060000)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1336 0000192F 750C                <1>     jne .cds2
  1337 00001931 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1338 00001935 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1339 00001937 48FFCF              <1>     dec rdi
  1340 0000193A B02F                <1>     mov al, "/" ;Replace \ with "/"
  1341 0000193C AA                  <1>     stosb   ;Store that and let the dir write the filename
  1342                              <1> .cds2:
  1343 0000193D 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1344 00001944 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1345 00001946 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1346                              <1>     return
    13                              <2> %%_ret:
    14 00001947 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1347                              <1> 
  1348                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1349                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1350                              <1> ; device driver chain. 
  1351                              <1> ;Output: CF=CY if not found
  1352                              <1> ;        CF=NC if found
  1353                              <1> ;           BH = Low byte of the device attribute word
  1354 00001948 50                  <1>     push rax
  1355 00001949 57                  <1>     push rdi
  1356 0000194A 488B05(D9060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1357 00001951 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1358                              <1> .checkName:
  1359 00001958 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1360 0000195C 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1361 0000195E F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1362 00001961 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1363 00001963 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1364 00001966 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1365 00001969 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1366 0000196D 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1367                              <1> .walkList:
  1368 0000196F 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1369 00001972 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1370 00001979 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1371 0000197B F9                  <1>     stc
  1372                              <1> .exit:
  1373 0000197C 5F                  <1>     pop rdi
  1374 0000197D 58                  <1>     pop rax
  1375                              <1>     return
    13                              <2> %%_ret:
    14 0000197E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1376                              <1> 
  1377                              <1> buildCharDir:
  1378                              <1> ;Build a dummy directory entry for the char device in FCBName
  1379                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1380 0000197F 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1381                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001986 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1382 00001988 50                  <1>     push rax
  1383 00001989 57                  <1>     push rdi
  1384 0000198A C605(E4060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1385 00001991 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1386                              <1>     ;Zero the directory copy (32 bytes)
  1387 00001998 50                  <1>     push rax
  1388 00001999 51                  <1>     push rcx
  1389 0000199A 57                  <1>     push rdi
  1390 0000199B 31C0                <1>     xor eax, eax    ;Zero rax
  1391 0000199D B904000000          <1>     mov ecx, 4
  1392 000019A2 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1393 000019A5 5F                  <1>     pop rdi
  1394 000019A6 59                  <1>     pop rcx
  1395 000019A7 58                  <1>     pop rax
  1396 000019A8 488B05(D9060000)    <1>     mov rax, qword [fcbName]
  1397 000019AF 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1398 000019B2 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1399 000019B7 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1400 000019BA C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1401                              <1>     ;Get date and time and set the write time in the directory entry
  1402 000019BE E85D120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1403 000019C3 E843130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1404 000019C8 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1405 000019CB 31C0                <1>     xor eax, eax
  1406 000019CD 5F                  <1>     pop rdi
  1407 000019CE 58                  <1>     pop rax
  1408                              <1>     return
    13                              <2> %%_ret:
    14 000019CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1409                              <1> 
  1410                              <1> checkFailingComp:
  1411                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1412                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1413                              <1> ;Returns: ZF=ZE => Last path componant
  1414                              <1> ;         ZF=NZ => Not last path componant
  1415 000019D0 50                  <1>     push rax
  1416 000019D1 8A05(E4060000)      <1>     mov al, byte [fcbName + 11]
  1417 000019D7 84C0                <1>     test al, al
  1418 000019D9 58                  <1>     pop rax
  1419                              <1>     return
    13                              <2> %%_ret:
    14 000019DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 000019DB 4889D7              <1>     mov rdi, rdx
     8 000019DE E877560000          <1>     call strlen
     9 000019E3 81F940000000        <1>     cmp ecx, 64
    10 000019E9 760E                <1>     jbe .okLength
    11                              <1> .badFile:
    12 000019EB B002                <1>     mov al, errFnf
    13 000019ED E9BA590000          <1>     jmp extErrExit
    14                              <1> .badPath:
    15 000019F2 B003                <1>     mov al, errPnf
    16 000019F4 E9B3590000          <1>     jmp extErrExit
    17                              <1> .okLength:
    18 000019F9 4889D6              <1>     mov rsi, rdx
    19 000019FC E8BC560000          <1>     call checkPathspecOK
    20 00001A01 0F8226020000        <1>     jc .bad  ;Don't allow any malformed chars, exit Acc den
    21                              <1> .pathOk:
    22 00001A07 E86C570000          <1>     call scanPathWC
    23 00001A0C 72E4                <1>     jc .badPath ;Dont allow wildcards
    24                              <1>     ;Path is ok, now proceed
    25 00001A0E C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
    26 00001A15 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    27 00001A1C E802F8FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    28                              <1>     ;If the path exists, exit error
    29 00001A21 0F8385590000        <1>     jnc extErrExit
    30                              <1>     ;Handle resolved null paths here!!!
    31 00001A27 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    32 00001A2D 30C0                <1>     xor al, al
    33 00001A2F 3D003A5C00          <1>     cmp eax, 005C3A00h
    34 00001A34 74B5                <1>     je .badFile
    35                              <1>     ;-----------------------------
    36                              <1>     ;TEST THAT THE DRIVE IS VALID
    37                              <1>     ;This is clearly unnecessary
    38                              <1>     ;    Keep it for now...
    39                              <1>     ;-----------------------------
    40 00001A36 57                  <1>     push rdi
    41 00001A37 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    42 00001A3E 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    43 00001A44 5F                  <1>     pop rdi
    44 00001A45 0F8461590000        <1>     jz extErrExit  ;Exit access denied
    45                              <1>     ;-------------------------------------------
    46                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    47 00001A4B E880FFFFFF          <1>     call checkFailingComp
    48 00001A50 0F8556590000        <1>     jnz extErrExit
    49                              <1>     ;So all is well, the new subdirectories name is in fcbName
    50                              <1>     ;The parent dir's directory entry is in the curDirCopy
    51 00001A56 E8F5530000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    52                              <1>     ;returns in rdi the working cds ptr
    53 00001A5B 7312                <1>     jnc .notNet
    54 00001A5D B803110000          <1>     mov eax, 1103h
    55 00001A62 CD2F                <1>     int 2fh
    56 00001A64 0F8242590000        <1>     jc extErrExit
    57 00001A6A E92F590000          <1>     jmp extGoodExit
    58                              <1> .notNet:
    59 00001A6F E8ED580000          <1>     call dosCrit1Enter
    60                              <1>     ;Current dpb ptr is already set
    61                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    62                              <1>     ;First we make a dummy dir in curDirCopy
    63 00001A74 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    64 00001A7B 488D35(D9060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    65 00001A82 488D3D(5A060000)    <1>     lea rdi, curDirCopy
    66 00001A89 48A5                <1>     movsq   ;Copy the name over
    67 00001A8B A5                  <1>     movsd
    68 00001A8C E88F110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    69 00001A91 E875120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    70 00001A96 8905(68060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    71 00001A9C 8905(70060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    72 00001AA2 31C0                <1>     xor eax, eax
    73 00001AA4 8905(76060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    74 00001AAA C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    75 00001AB1 8B05(80070000)      <1>     mov eax, dword [dirClustPar]
    76                              <1> .searchForDirSpace:
    77 00001AB7 8905(84070000)      <1>     mov dword [dirClustA], eax
    78 00001ABD 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    79 00001ABF 668905(88070000)    <1>     mov word [dirSect], ax
    80 00001AC6 8905(8A070000)      <1>     mov dword [dirEntry], eax
    81 00001ACC E87C050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    82 00001AD1 7328                <1>     jnc .dirEntryFnd
    83 00001AD3 813D(80070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    83 00001ADB 0000                <1>
    84 00001ADD 0F844A010000        <1>     je .bad ;Set CF and exit
    85 00001AE3 E858060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    86 00001AE8 0F823F010000        <1>     jc .bad
    87 00001AEE 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    88 00001AF3 0F8434010000        <1>     je .bad
    89                              <1>     ;Else eax = Newly allocated cluster
    90 00001AF9 EBBC                <1>     jmp short .searchForDirSpace
    91                              <1> .dirEntryFnd:
    92                              <1> ;rdi points to current directory copy
    93                              <1> ;rsi now points to offset in the buffer to write the entry to
    94                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    95 00001AFB 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
    96 00001B02 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    97                              <1>      
    98 00001B06 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    99 00001B0D 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   100 00001B14 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   101 00001B17 668935(4E070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   102                              <1> ;Must now request a cluster and sanitise it
   103 00001B1E E8CDEFFFFF          <1>     call startNewChain  ;Get cluster number in eax
   104 00001B23 0F8209010000        <1>     jc .badExit
   105 00001B29 E845060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   106 00001B2E 0F82FE000000        <1>     jc .badExit
   107                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   108 00001B34 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   109 00001B3B C1E810              <1>     shr eax, 10h    ;Get high word low
   110 00001B3E 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   111 00001B45 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   112 00001B4C E8A0EEFFFF          <1>     call getBufForDir
   113 00001B51 0F82DB000000        <1>     jc .badExit
   114 00001B57 0FB705(4E070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   115 00001B5E 488D35(5A060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   116 00001B65 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   117 00001B6A B904000000          <1>     mov ecx, 4
   118 00001B6F F348A5              <1>     rep movsq   ;Copy over the buffered directory
   119 00001B72 E815EDFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   120                              <1>     ;Now need to read in data sector and make two entries . and ..
   121 00001B77 57                  <1>     push rdi
   122 00001B78 51                  <1>     push rcx
   123 00001B79 B90B000000          <1>     mov ecx, 11
   124 00001B7E 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   125 00001B85 B020                <1>     mov al, " "
   126 00001B87 F3AA                <1>     rep stosb
   127 00001B89 59                  <1>     pop rcx
   128 00001B8A 5F                  <1>     pop rdi
   129 00001B8B 48B82E000000000000- <1>     mov rax, "."
   129 00001B94 00                  <1>
   130 00001B95 8805(5A060000)      <1>     mov byte [curDirCopy], al
   131 00001B9B 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   132 00001BA2 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   133 00001BA9 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   134 00001BB0 C1E210              <1>     shl edx, 10h
   135 00001BB3 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   136 00001BB5 E8BCEEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   137 00001BBA E832EEFFFF          <1>     call getBufForDir
   138 00001BBF 7271                <1>     jc .badExit
   139                              <1>     ;rbx has buffer pointer now
   140 00001BC1 488D35(5A060000)    <1>     lea rsi, curDirCopy
   141 00001BC8 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   142 00001BCC B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   143 00001BD1 F348A5              <1>     rep movsq
   144                              <1>     ;Now create .. entry
   145 00001BD4 C605(5B060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   146 00001BDB 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   147 00001BE1 E825EEFFFF          <1>     call getFATtype
   148 00001BE6 81F902000000        <1>     cmp ecx, 2
   149 00001BEC 7207                <1>     jb .notFAT32
   150 00001BEE 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   151 00001BF1 7502                <1>     jne .notFAT32
   152 00001BF3 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   153                              <1> .notFAT32:
   154 00001BF5 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   155 00001BFC C1E810              <1>     shr eax, 10h
   156 00001BFF 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   157 00001C06 488D35(5A060000)    <1>     lea rsi, curDirCopy
   158 00001C0D B904000000          <1>     mov ecx, 4
   159 00001C12 F348A5              <1>     rep movsq
   160 00001C15 E872ECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   161 00001C1A E8FCEAFFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   162 00001C1F 7211                <1>     jc .badExit
   163                              <1> .okExit:
   164                              <1>     ;AND WE ARE DONE!
   165 00001C21 E845570000          <1>     call dosCrit1Exit
   166 00001C26 31C0                <1>     xor eax, eax
   167 00001C28 E971570000          <1>     jmp extGoodExit
   168                              <1> .bad:
   169 00001C2D B805000000          <1>     mov eax, errAccDen
   170                              <1> .badExit:
   171 00001C32 E834570000          <1>     call dosCrit1Exit
   172 00001C37 E970570000          <1>     jmp extErrExit
   173                              <1> 
   174                              <1> removeDIR:         ;ah = 3Ah
   175 00001C3C 4889D7              <1>     mov rdi, rdx
   176 00001C3F E816540000          <1>     call strlen
   177 00001C44 81F940000000        <1>     cmp ecx, 64
   178 00001C4A 760E                <1>     jbe .okLength
   179                              <1> .badPath:
   180 00001C4C B005                <1>     mov al, errAccDen
   181 00001C4E E959570000          <1>     jmp extErrExit
   182                              <1> .pnf:
   183 00001C53 B003                <1>     mov al, errPnf
   184 00001C55 E952570000          <1>     jmp extErrExit
   185                              <1> .okLength:
   186 00001C5A 4889D6              <1>     mov rsi, rdx
   187 00001C5D E85B540000          <1>     call checkPathspecOK
   188 00001C62 72E8                <1>     jc .badPath  ;Don't allow any malformed chars
   189                              <1> .pathOk:
   190 00001C64 E80F550000          <1>     call scanPathWC
   191 00001C69 72E1                <1>     jc .badPath ;Dont allow wildcards
   192                              <1>     ;Path is ok, now proceed
   193 00001C6B 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   194 00001C72 E8A8F5FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   195 00001C77 72DA                <1>     jc .pnf    ;Path Doesn't exist
   196 00001C79 E8D2510000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   197 00001C7E 7312                <1>     jnc .notNet
   198 00001C80 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   199 00001C85 CD2F                <1>     int 2fh
   200 00001C87 0F821F570000        <1>     jc extErrExit
   201 00001C8D E90C570000          <1>     jmp extGoodExit
   202                              <1> .notNet:
   203 00001C92 E8CA560000          <1>     call dosCrit1Enter
   204 00001C97 488D3D(1E050000)    <1>     lea rdi, buffer1
   205 00001C9E E8B7530000          <1>     call strlen ;Get the length of the full qualified name in ecx
   206 00001CA3 66890D(4E070000)    <1>     mov word [pathLen], cx
   207                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   208 00001CAA 31C0                <1>     xor eax, eax
   209                              <1> .scanLoop:
   210 00001CAC E81B530000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   211 00001CB1 721A                <1>     jc .notCurrent
   212 00001CB3 E8D9530000          <1>     call compareFileNames
   213 00001CB8 7404                <1>     jz .cantDelCD
   214 00001CBA FFC0                <1>     inc eax
   215 00001CBC EBEE                <1>     jmp short .scanLoop
   216                              <1> .cantDelCD:
   217 00001CBE B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   218 00001CC3 E8A3560000          <1>     call dosCrit1Exit
   219 00001CC8 E9DF560000          <1>     jmp extErrExit
   220                              <1> .notCurrent:
   221 00001CCD 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   222                              <1>     ;Now let use check that our directory is not the CDS currentdir
   223 00001CD4 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   224 00001CDB 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   225                              <1>     ;If the given path length is one more than the backslash offset
   226                              <1>     ; due to the terminating null, then the user is trying to delete the 
   227                              <1>     ; root dir. Fail this.
   228 00001CDE 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   229 00001CE2 FFC1                <1>     inc ecx
   230 00001CE4 663B0D(4E070000)    <1>     cmp cx, word [pathLen]
   231 00001CEB 0F8423010000        <1>     je .accessDenied
   232 00001CF1 E86A030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   233                              <1>     ;for the entry in the sector we are hoping to delete
   234 00001CF6 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   235 00001CFD C1E010              <1>     shl eax, 10h
   236 00001D00 0FB71D(74060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   237 00001D07 09D8                <1>     or eax, ebx
   238 00001D09 8905(80070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   239 00001D0F E862EDFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   240 00001D14 E8D8ECFFFF          <1>     call getBufForDir
   241 00001D19 0F82FA000000        <1>     jc .exitBad
   242                              <1>     ;rbx points to buffer
   243 00001D1F 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   244 00001D23 48B82E202020202020- <1>     mov rax, ".       "
   244 00001D2C 20                  <1>
   245 00001D2D 483906              <1>     cmp qword [rsi], rax
   246 00001D30 0F85DE000000        <1>     jne .accessDenied
   247 00001D36 B42E                <1>     mov ah, "." ;Screw the partial stall
   248 00001D38 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   249 00001D3C 0F85D2000000        <1>     jne .accessDenied
   250 00001D42 4881C620000000      <1>     add rsi, fatDirEntry_size
   251 00001D49 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   252 00001D50 B904000000          <1>     mov ecx, 4
   253 00001D55 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   254                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   255                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   256 00001D58 488D3D(D9060000)    <1>     lea rdi, fcbName
   257 00001D5F B03F                <1>     mov al, "?"
   258 00001D61 B90B000000          <1>     mov ecx, 11
   259 00001D66 F3AA                <1>     rep stosb   ;Store the pattern to search for
   260 00001D68 30C0                <1>     xor al, al  ;Store a terminating zero
   261 00001D6A AA                  <1>     stosb
   262 00001D6B 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   263 00001D71 50                  <1>     push rax    ;Save on stack temporarily
   264 00001D72 8905(84070000)      <1>     mov dword [dirClustA], eax
   265 00001D78 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   266 00001D7A 668905(88070000)    <1>     mov word [dirSect], ax
   267 00001D81 C705(8A070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   267 00001D89 0000                <1>
   268 00001D8B C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   269 00001D92 58                  <1>     pop rax
   270 00001D93 E8DEECFFFF          <1>     call getStartSectorOfCluster
   271 00001D98 E854ECFFFF          <1>     call getBufForDir   
   272 00001D9D 727A                <1>     jc .exitBad
   273 00001D9F E872F2FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   274 00001DA4 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   275 00001DAB 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   276 00001DB1 C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   277 00001DB8 E8B6F1FFFF          <1>     call searchDir.rmdirEP
   278 00001DBD 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   279                              <1>     ;Else, this is a empty dir, we can remove it
   280                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   281 00001DBF 488B05(46070000)    <1>     mov rax, qword [tempSect]
   282 00001DC6 E826ECFFFF          <1>     call getBufForDir
   283 00001DCB 724C                <1>     jc .exitBad
   284 00001DCD E844F2FFFF          <1>     call prepSectorSearch
   285 00001DD2 0FB705(4E070000)    <1>     movzx eax, word [entry]
   286 00001DD9 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   287 00001DDD 4801C6              <1>     add rsi, rax    
   288 00001DE0 8A05(08070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   289 00001DE6 8806                <1>     mov byte [rsi], al  ;Store delchar there
   290 00001DE8 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   291 00001DEC 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   292 00001DF0 E897EAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   293 00001DF5 C1E210              <1>     shl edx, 10h
   294 00001DF8 09D0                <1>     or eax, edx
   295                              <1>     ;Now remove the FAT chain
   296 00001DFA E830EEFFFF          <1>     call unlinkFAT
   297 00001DFF 7218                <1>     jc .exitBad
   298 00001E01 E815E9FFFF          <1>     call flushAllBuffersForDPB
   299 00001E06 7211                <1>     jc .exitBad
   300 00001E08 E85E550000          <1>     call dosCrit1Exit
   301 00001E0D 31C0                <1>     xor eax, eax
   302 00001E0F E98A550000          <1>     jmp extGoodExit
   303                              <1> .accessDenied:
   304 00001E14 B805000000          <1>     mov eax, errAccDen
   305                              <1> .exitBad:
   306 00001E19 F9                  <1>     stc
   307 00001E1A E84C550000          <1>     call dosCrit1Exit
   308 00001E1F E988550000          <1>     jmp extErrExit
   309                              <1> 
   310                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   311                              <1> ;Input: rdx = Pointer to ASCIIZ string
   312 00001E24 4889D7              <1>     mov rdi, rdx
   313 00001E27 E82E520000          <1>     call strlen
   314 00001E2C 81F940000000        <1>     cmp ecx, 64
   315 00001E32 7618                <1>     jbe .okLength
   316                              <1> .badPath:
   317 00001E34 B003                <1>     mov al, errPnf
   318 00001E36 E971550000          <1>     jmp extErrExit
   319                              <1> .badPathCrit:
   320 00001E3B E82B550000          <1>     call dosCrit1Exit
   321 00001E40 EBF2                <1>     jmp short .badPath
   322                              <1> .badCrit:
   323 00001E42 E824550000          <1>     call dosCrit1Exit
   324 00001E47 E960550000          <1>     jmp extErrExit
   325                              <1> .okLength:
   326 00001E4C 4889D6              <1>     mov rsi, rdx
   327 00001E4F E869520000          <1>     call checkPathspecOK
   328 00001E54 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   329 00001E56 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   330                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   331                              <1> .notBad:
   332 00001E58 E83A530000          <1>     call checkPathNet   ;Never allow network paths
   333 00001E5D 74D5                <1>     jz .badPath ;Or Net paths
   334                              <1>     ;Path is ok, now proceed
   335 00001E5F E8FD540000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   336 00001E64 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   337 00001E6B E8AFF3FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   338 00001E70 72D0                <1>     jc .badCrit   ;Exit with error code in eax
   339                              <1>     ;Now we check to make sure the path provided is not past the maximum
   340                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   341                              <1>     ; moved the path past the end.
   342 00001E72 488D3D(1E050000)    <1>     lea rdi, buffer1
   343 00001E79 E8DC510000          <1>     call strlen ;Get the length of this path
   344 00001E7E 81F943000000        <1>     cmp ecx, 67
   345 00001E84 77B5                <1>     ja .badPathCrit
   346                              <1>     ;The path must've been ok, so now copy the path into the CDS
   347                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   348                              <1>     ;Copy the workingCDS to the tmpCDS
   349 00001E86 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   350 00001E8D 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   351 00001E93 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   352 00001E99 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   353 00001E9F 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   354                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   355 00001EA5 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   356 00001EA8 E8E4000000          <1>     call .getFatCluster
   357 00001EAD 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   358                              <1>     ;ecx has the length of the path in the buffer
   359 00001EB0 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   360 00001EB2 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   361 00001EB7 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   362 00001EBA E89B510000          <1>     call strlen
   363 00001EBF 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   364 00001EC1 3D43000000          <1>     cmp eax, 67     ;If the sum is greater than the space for the string + null, error
   365 00001EC6 0F876FFFFFFF        <1>     ja .badPathCrit
   366 00001ECC 51                  <1>     push rcx
   367 00001ECD 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   368 00001ED4 B95F000000          <1>     mov ecx, cds_size
   369 00001ED9 F3A4                <1>     rep movsb   
   370 00001EDB 59                  <1>     pop rcx
   371 00001EDC FFC9                <1>     dec ecx ;Remove the trailing null from the count
   372 00001EDE 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   373 00001EE5 57                  <1>     push rdi
   374 00001EE6 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   375 00001EE9 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   376 00001EED F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   377 00001EEF 5F                  <1>     pop rdi
   378 00001EF0 4889FE              <1>     mov rsi, rdi
   379 00001EF3 31C0                <1>     xor eax, eax
   380 00001EF5 31C9                <1>     xor ecx, ecx
   381 00001EF7 FFC9                <1>     dec ecx
   382 00001EF9 F2AE                <1>     repne scasb   ;Search for the terminating null
   383 00001EFB 4881EF02000000      <1>     sub rdi, 2
   384 00001F02 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   385 00001F04 E8F5500000          <1>     call swapPathSeparator
   386 00001F09 7503                <1>     jnz .notSlash
   387 00001F0B C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   388                              <1> .notSlash:
   389 00001F0E 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   390 00001F11 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   391 00001F13 E8B4500000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   392 00001F18 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   393 00001F1F 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   394 00001F22 C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   395                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   396                              <1>     ;Backslash offset must always be 2 on a join host
   397 00001F29 B943000000          <1>     mov ecx, 67
   398 00001F2E F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   399 00001F30 EB41                <1>     jmp short .exitGood
   400                              <1> .notJoin:
   401                              <1> ;rsi -> workingCDS
   402                              <1> ;Lets first copy the working CDS into tmpCDS
   403 00001F32 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   404 00001F39 B95F000000          <1>     mov ecx, cds_size
   405 00001F3E F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   406 00001F40 E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   407 00001F45 8905(C7060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   408 00001F4B 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   409 00001F52 488D35(1E050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   410 00001F59 E80B510000          <1>     call strcpy
   411 00001F5E 488D35(7A060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   412 00001F65 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   413 00001F6C B95F000000          <1>     mov ecx, cds_size
   414 00001F71 F3A4                <1>     rep movsb
   415                              <1> .exitGood:
   416 00001F73 E8F3530000          <1>     call dosCrit1Exit
   417 00001F78 31C0                <1>     xor eax, eax
   418 00001F7A E91F540000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   419                              <1> .net:
   420                              <1> ;SDA Vars are setup for this request
   421 00001F7F B805110000          <1>     mov eax, 1105h
   422 00001F84 CD2F                <1>     int 2fh
   423 00001F86 0F8220540000        <1>     jc extErrExit
   424 00001F8C E90D540000          <1>     jmp extGoodExit
   425                              <1> .getFatCluster:
   426 00001F91 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   427 00001F98 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   428 00001F9F C1E010              <1>     shl eax, 10h
   429 00001FA2 09D0                <1>     or eax, edx ;Add low bits to eax
   430                              <1>     return
    13                              <2> %%_ret:
    14 00001FA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> getCurrentDIR:     ;ah = 47h
   433                              <1> ;Returns the path for a drive with no X:\.
   434                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   435                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   436 00001FA5 88D0                <1>     mov al, dl  ;Move drive number into al
   437 00001FA7 E8B5530000          <1>     call dosCrit1Enter
   438 00001FAC E8504F0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   439 00001FB1 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   440                              <1> .badDrvExit:
   441 00001FB3 E8B3530000          <1>     call dosCrit1Exit
   442 00001FB8 B80F000000          <1>     mov eax, errBadDrv
   443 00001FBD E9EA530000          <1>     jmp extErrExit
   444                              <1> .okDrive:
   445                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   446 00001FC2 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   447 00001FC3 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   448 00001FCA 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   449 00001FCB 488D3D(1E050000)    <1>     lea rdi, buffer1
   450 00001FD2 E848F2FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   451 00001FD7 5E                  <1>     pop rsi ;Get back the original workingCDS
   452 00001FD8 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   453 00001FD9 72D8                <1>     jc .badDrvExit
   454                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   455                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   456                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   457 00001FDB 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   458 00001FDF 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   459 00001FE2 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   460 00001FE5 7503                <1>     jne .dontSkipChar
   461 00001FE7 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   462                              <1> .dontSkipChar:
   463 00001FEA AC                  <1>     lodsb   ;Get char
   464 00001FEB 84C0                <1>     test al, al
   465 00001FED 7406                <1>     jz .notSpecialChar
   466 00001FEF 3C05                <1>     cmp al, 05h     ;Special char case?
   467 00001FF1 7502                <1>     jne .notSpecialChar
   468 00001FF3 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   469                              <1> .notSpecialChar:
   470 00001FF5 AA                  <1>     stosb
   471 00001FF6 84C0                <1>     test al, al ;Did we store a terminator char?
   472 00001FF8 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   473 00001FFA E86C530000          <1>     call dosCrit1Exit
   474 00001FFF B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   475 00002004 E995530000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   476                              <1> 
   477                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   478 00002009 50                  <1>     push rax
   479 0000200A B800600000          <1>     mov eax, 6000h
   480 0000200F CD21                <1>     int 21h
   481 00002011 58                  <1>     pop rax
   482                              <1>     return
    13                              <2> %%_ret:
    14 00002012 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1>     
   484                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   485                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   486 00002013 E8A5500000          <1>     call checkPathspecOK    ;This preserves rsi
   487 00002018 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   488 0000201A 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   489                              <1> .badPath:
   490 0000201C B805000000          <1>     mov eax, errAccDen
   491 00002021 E986530000          <1>     jmp extErrExit
   492                              <1> .pathspecOk:
   493 00002026 57                  <1>     push rdi    ;Save the destination
   494 00002027 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   495 0000202E E86FF2FFFF          <1>     call canonicaliseFileName
   496 00002033 5F                  <1>     pop rdi
   497 00002034 0F8272530000        <1>     jc extErrExit
   498 0000203A 488D35(1E050000)    <1>     lea rsi, buffer1
   499 00002041 E823500000          <1>     call strcpy
   500 00002046 31C0                <1>     xor eax, eax
   501 00002048 E951530000          <1>     jmp extGoodExit
   502                              <1> 
   503                              <1> ;-----------------------------------
   504                              <1> ;    General Directory Routines    :
   505                              <1> ;-----------------------------------
   506                              <1> 
   507                              <1> 
   508                              <1> findFreeDiskDirEntry:
   509                              <1> ;Find a space in the directory we are searching for a directory entry
   510                              <1> ;Accept first entry starting with a 0E5h or 00h
   511                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   512                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   513                              <1> ; be called for CDS's that are NOT net CDS's).
   514                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   515                              <1> ;       Directory vars must be set up for the directory we are searching in
   516                              <1> ;Output: CF=CY => Error, eax has error code
   517                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   518 0000204D 8A05(08070000)      <1>     mov al, byte [delChar]
   519 00002053 8805(D9060000)      <1>     mov byte [fcbName], al
   520 00002059 E8B6EEFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   521                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000205E 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   522                              <1> ;Free entry found, dir variables are set for the free entry. 
   523                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   524                              <1> getDiskDirectoryEntry:
   525                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   526                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   527                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   528                              <1> ;        qword [tempSect] = Disk sector number of directory
   529                              <1> ;        word [entry] = 32 byte offset into sector
   530                              <1> ;        CF=CY => Error, exit 
   531 00002060 53                  <1>     push rbx
   532 00002061 8B05(84070000)      <1>     mov eax, dword [dirClustA]  
   533                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   534                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   535 00002067 0FB71D(88070000)    <1>     movzx ebx, word [dirSect]
   536 0000206E 85C0                <1>     test eax, eax
   537 00002070 7407                <1>     jz .skipCluster
   538 00002072 E8FFE9FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   539 00002077 EB1B                <1>     jmp short .skipOldFat
   540                              <1> .skipCluster:
   541 00002079 55                  <1>     push rbp
   542 0000207A 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   543 00002081 0FB705(88070000)    <1>     movzx eax, word [dirSect]
   544 00002088 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   545                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   546 0000208B 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   547 0000208F 5D                  <1>     pop rbp
   548 00002090 7202                <1>     jb .skipOldFat
   549 00002092 F9                  <1>     stc
   550                              <1>     return
    13                              <2> %%_ret:
    14 00002093 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .skipOldFat:
   552 00002094 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   553 00002097 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   554 0000209E E84EE9FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   555 000020A3 5B                  <1>     pop rbx
   556                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020A4 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 000020A6 53                  <1>     push rbx
   558 000020A7 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   559 000020AE E863EFFFFF          <1>     call prepSectorSearch
   560                              <1>     ;Above function gets data buffer ptr in rsi
   561 000020B3 0FB705(88070000)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   562 000020BA 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   563 000020BE F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   564                              <1>     ; the current sector
   565 000020C0 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   566 000020C3 8B1D(8A070000)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   567 000020C9 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   568 000020CB C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   569 000020CE 66891D(4E070000)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   570 000020D5 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   571 000020D8 5B                  <1>     pop rbx
   572                              <1>     return
    13                              <2> %%_ret:
    14 000020D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> updateSFTDateTimeFields:    
   575                              <1> ;Updates the SFT time/date entries for disk files
   576                              <1> ;Called with:
   577                              <1> ;   [workingDPB] = DPB pointer for the disk device
   578                              <1> ;   [currentSFT] = Current SFT pointer
   579                              <1> ;   bx = attribute byte from the SFT
   580 000020DA 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
   581                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020DF 75F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   582 000020E1 66F7C30040          <1>     test bx, blokNoDTonClose
   583                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020E6 75F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   584 000020E8 50                  <1>     push rax
   585 000020E9 53                  <1>     push rbx
   586 000020EA E8310B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   587                              <1>     ;Build date and time words
   588 000020EF E8170C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   589                              <1>     ;Update SFT fields
   590 000020F4 66894713            <1>     mov word [rdi + sft.wTime], ax
   591 000020F8 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   592 000020FB 66894715            <1>     mov word [rdi + sft.wDate], ax
   593 000020FF 31C0                <1>     xor eax, eax
   594 00002101 FF15(2F010000)      <1>     call qword [updateDirShare]
   595 00002107 5B                  <1>     pop rbx
   596 00002108 58                  <1>     pop rax
   597                              <1>     return
    13                              <2> %%_ret:
    14 00002109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   598                              <1> 
   599                              <1> getAndUpdateDirSectorForFile:
   600                              <1> ;Input: rdi -> SFT
   601                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   602                              <1> ;               rdi -> SFT
   603 0000210A FF7727              <1>     push qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   604 0000210D E8F42C0000          <1>     call setDPBfromSFT
   605 00002112 58                  <1>     pop rax
   606                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002113 72F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   607 00002115 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   608 0000211C C605(68040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   609 00002123 E8C9E8FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   610                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002128 72DF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   611 0000212A 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Reobtain the SFT ptr
   612 00002131 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   613 00002135 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   614 00002139 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   615 0000213C 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   616                              <1>     return
    13                              <2> %%_ret:
    14 0000213F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   617                              <1> 
   618                              <1> growDirectory:
   619                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   620                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   621                              <1> ;                 eax = New Cluster number
   622                              <1> ;               TWO NON CF ERROR CASES.
   623                              <1> ;               If eax = -1 => disk full!
   624                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   625                              <1> ;        CF=CY => Something went wrong. Rip. 
   626 00002140 53                  <1>     push rbx
   627 00002141 51                  <1>     push rcx
   628 00002142 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   629 00002148 85C0                <1>     test eax, eax
   630 0000214A 7424                <1>     jz .exit
   631 0000214C E852E9FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   632 00002151 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   633 00002153 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   634 00002158 E8B9E9FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   635 0000215D 7211                <1>     jc .exit
   636 0000215F 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   637 00002161 E812EBFFFF          <1>     call readFAT
   638 00002166 7208                <1>     jc .exit
   639 00002168 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   640 0000216D 7201                <1>     jc .exit
   641 0000216F F8                  <1>     clc
   642                              <1> .exit:
   643 00002170 59                  <1>     pop rcx
   644 00002171 5B                  <1>     pop rbx
   645                              <1>     return   
    13                              <2> %%_ret:
    14 00002172 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646                              <1> sanitiseCluster:
   647                              <1> ;Sanitises the cluster in eax to all zeros
   648                              <1> ;Does not move file pointers
   649                              <1> ;Currently, is only called to sanitise subdirectory clusters
   650                              <1> ;Input: eax = Cluster number
   651                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   652                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   653                              <1> ;        If CF=CY => Error, exit
   654 00002173 50                  <1>     push rax
   655 00002174 53                  <1>     push rbx
   656 00002175 51                  <1>     push rcx
   657 00002176 52                  <1>     push rdx
   658 00002177 56                  <1>     push rsi
   659 00002178 55                  <1>     push rbp
   660 00002179 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   661 00002180 E8F1E8FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   662 00002185 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   663 00002189 FFC2                <1>     inc edx ;Make it a count of sectors
   664                              <1> .getSectorInCluster:
   665 0000218B E861E8FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   666 00002190 721E                <1>     jc .exitBad
   667 00002192 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   668 00002196 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   669 0000219A 31C0                <1>     xor eax, eax
   670 0000219C F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   671 0000219E E8E9E6FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   672                              <1> 
   673 000021A3 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   674 000021A5 740A                <1>     jz .exit    ;Jump if we done
   675 000021A7 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   676 000021AB 48FFC0              <1>     inc rax ;Goto next sector in cluster
   677 000021AE EBDB                <1>     jmp short .getSectorInCluster
   678                              <1> .exitBad:
   679 000021B0 F9                  <1>     stc
   680                              <1> .exit:
   681 000021B1 5D                  <1>     pop rbp
   682 000021B2 5E                  <1>     pop rsi
   683 000021B3 5A                  <1>     pop rdx
   684 000021B4 59                  <1>     pop rcx
   685 000021B5 5B                  <1>     pop rbx
   686 000021B6 58                  <1>     pop rax
   687                              <1>     return
    13                              <2> %%_ret:
    14 000021B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 000021B8 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 000021B9 488D1D(1C050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 000021C0 48891D(A5040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 000021C7 5B                  <1>     pop rbx
    60 000021C8 C705(AD040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 000021D0 0000                <1>
    61 000021D2 668905(1C050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 000021D9 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 000021DF 0F85A1000000        <1>     jnz .notChar
    64 000021E5 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 000021EB 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 000021F1 E854510000          <1>     call dosPushRegs    ;Save context here
    68 000021F6 488D1D1DDEFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 000021FD 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00002200 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00002203 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00002206 890D(97040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 0000220C 31C9                <1>     xor ecx, ecx
    75 0000220E 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00002211 7506                <1>     jne .skipBsySet
    77 00002213 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00002219 66870D(9A040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00002220 488D1D(97040000)    <1>     lea rbx, secdReqHdr
    82 00002227 E818480000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 0000222C 668B3D(9A040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 00002233 F7C700800000        <1>     test edi, drvErrStatus
    85 00002239 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 0000223B 803D(99040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 00002242 750C                <1>     jne .notNDRead
    89 00002244 8A05(A4040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 0000224A 8805(1C050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00002250 8A25(9B040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00002256 F6D4                <1>     not ah
    94 00002258 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 0000225B E8D3500000          <1>     call dosPopRegs ;Get back the context
    96 00002260 668B05(1C050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 00002267 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00002268 88CC                <1>     mov ah, cl
   101 0000226A E89D410000          <1>     call charDevErr
   102 0000226F 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 00002271 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 00002273 E8BB500000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00002278 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 0000227D 8025(9B040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 00002284 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 00002286 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00002288 7409                <1>     jz .makeDiskNetReadReq
   115 0000228A FECC                <1>     dec ah
   116 0000228C 7421                <1>     jz .makeDiskNetNonDestReq
   117 0000228E FECC                <1>     dec ah
   118 00002290 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00002292 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00002293 E833000000          <1>     call .prepDiskNetIO
   123 00002298 E8E7210000          <1>     call readBytes
   124 0000229D 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 0000229F E857000000          <1>     call .cleanDiskNetIO
   126 000022A4 8A05(1C050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000022AA 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 000022AC B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 000022AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 000022AF FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 000022B2 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 000022B7 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 000022BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 000022BB E80B000000          <1>     call .prepDiskNetIO
   138 000022C0 E80A250000          <1>     call writeBytes
   139 000022C5 E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 000022CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 000022CB 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 000022D1 E874500000          <1>     call dosPushRegs
   146 000022D6 FF35(17040000)      <1>     push qword [currentDTA]
   147 000022DC 488D0D(1C050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 000022E3 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 000022EA 488935(32070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 000022F1 31C9                <1>     xor ecx, ecx
   151 000022F3 FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 000022F5 FF25(EB040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 000022FB 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 00002301 8F05(17040000)      <1>     pop qword [currentDTA]
   157 00002307 E827500000          <1>     call dosPopRegs
   158 0000230C EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 0000230E E837500000          <1>     call dosPushRegs
   164 00002313 B00D                <1>     mov al, drvOPEN
   165 00002315 EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 00002317 E82E500000          <1>     call dosPushRegs
   169 0000231C B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 0000231E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   173 00002324 7469                <1>     jz .exit    ;Exit if so
   174 00002326 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 0000232A 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 0000232E 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 00002330 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   179 00002337 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   180 00002339 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 0000233C 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 0000233E 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 00002342 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 00002348 7445                <1>     jz .exit    ;No, exit!
   186 0000234A 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 0000234D 488D1D(C1040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   188 00002354 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 00002357 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 0000235A C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 0000235D 50                  <1>     push rax    ;Save the dword
   193 0000235E E8E5460000          <1>     call goDriver
   194 00002363 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   195 0000236A F7C700800000        <1>     test edi, drvErrStatus
   196 00002370 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 00002372 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 00002378 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 0000237A B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 0000237C EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 0000237E 88C8                <1>     mov al, cl  ;Move drive number into al
   205 00002380 B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 00002382 E885400000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 00002387 B001                <1>     mov al, critRetry   ;al returns user response
   210 00002389 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 0000238B 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 0000238C EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 0000238E 58                  <1>     pop rax    
   215                              <1> .exit:
   216 0000238F E89F4F0000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 00002394 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    33                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 00002395 E87D010000          <1>     call charIn_B
    17 0000239A 50                  <1>     push rax
    18 0000239B E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 000023A0 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 000023A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 000023A2 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 000023A4 3C20                <1>     cmp al, asciiCaret
    27 000023A6 0F8286000000        <1>     jb .control
    28 000023AC 3C7F                <1>     cmp al, DEL ;DEL char?
    29 000023AE 7406                <1>     je .skipCurs
    30 000023B0 FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 000023B6 FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 000023BC 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 000023C3 56                  <1>     push rsi
    35 000023C4 7507                <1>     jnz .skipErrorCheck
    36 000023C6 50                  <1>     push rax
    37 000023C7 E897020000          <1>     call vConCtrlCheck
    38 000023CC 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 000023CD E81F020000          <1>     call outputOnStdout
    41 000023D2 5E                  <1>     pop rsi
    42 000023D3 F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000023DA 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 000023DC 53                  <1>     push rbx
    45 000023DD 56                  <1>     push rsi
    46 000023DE BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 000023E3 E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 000023E8 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 000023EE 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 000023F2 F7C300800000        <1>     test ebx, devRedirDev
    52 000023F8 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 000023FE F7C380000000        <1>     test ebx, devCharDev
    54 00002404 0F84B2000000        <1>     jz auxOutCmn.exit
    55 0000240A BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 0000240F E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00002414 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 0000241A 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00002420 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 00002426 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 0000242D E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 00002432 3C0D                <1>     cmp al, CR
    64 00002434 7429                <1>     je .newline
    65 00002436 3C08                <1>     cmp al, BSP
    66 00002438 7431                <1>     je .back
    67 0000243A 3C09                <1>     cmp al, TAB
    68 0000243C 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 00002442 51                  <1>     push rcx
    72 00002443 0FB60D(CC020000)    <1>     movzx ecx, byte [vConCursPos]
    73 0000244A 80C9F8              <1>     or cl, ~7
    74 0000244D F6D9                <1>     neg cl
    75 0000244F 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 00002452 B020                <1>     mov al, SPC
    78 00002454 E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 00002459 FEC9                <1>     dec cl
    80 0000245B 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 0000245D 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 0000245E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 0000245F C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 00002466 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 0000246B FE0D(CC020000)      <1>     dec byte [vConCursPos]
    89 00002471 E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 00002476 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 0000247B BB03000000          <1>     mov ebx, 3
    94 00002480 E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002485 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 00002487 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 00002489 E82AFDFFFF          <1>     call mainCharIO
    99 0000248E 7408                <1>     jz .signalLoop
   100 00002490 30E4                <1>     xor ah, ah  ;Read the char in
   101 00002492 E821FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 00002497 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00002498 E8A3010000          <1>     call callInt28h
   105 0000249D EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 0000249F 53                  <1>     push rbx
   109 000024A0 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 000024A5 EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 000024A7 53                  <1>     push rbx
   113 000024A8 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 000024AD 88D0                <1>     mov al, dl  ;Get the char into al
   116 000024AF 50                  <1>     push rax
   117 000024B0 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 000024B5 58                  <1>     pop rax
   119 000024B6 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 000024B7 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 000024BC 5E                  <1>     pop rsi
   125 000024BD 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 000024BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 000024BF 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 000024C1 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 000024C3 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 000024C9 31DB                <1>     xor ebx, ebx    
   134 000024CB E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000024D0 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 000024D2 488B2D(7B040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 000024D9 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 000024DB E8D8FCFFFF          <1>     call mainCharIO
   139 000024E0 E85B010000          <1>     call callInt28h ;This preserves flags so call here!
   140 000024E5 7507                <1>     jnz .readChar
   141 000024E7 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 000024EB 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 000024ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 000024EE 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 000024F2 31DB                <1>     xor ebx, ebx
   150 000024F4 E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000024F9 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 000024FB B401                <1>     mov ah, 01  ;ND read for char
   153 000024FD E8B6FCFFFF          <1>     call mainCharIO
   154 00002502 750B                <1>     jnz .getChar
   155 00002504 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 00002506 CD2A                <1>     int 2Ah
   157 00002508 E833010000          <1>     call callInt28h
   158 0000250D EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 0000250F 30E4                <1>     xor ah, ah
   162 00002511 E8A2FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 00002516 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 00002517 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 00002518 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 0000251D 7543                <1>     jnz .pullChar
   171 0000251F 803D(E8190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 00002526 7507                <1>     jne .skiplookahead
   173 00002528 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 0000252A E889FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 0000252F B484                <1>     mov ah, 84h
   177 00002531 CD2A                <1>     int 2ah ;Multitasking keyboard loop
   178 00002533 66813D(CA1A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 0000253B FF                  <1>
   179 0000253C 751B                <1>     jne .skipClockRead
   180 0000253E E8074E0000          <1>     call dosPushRegs
   181 00002543 F8                  <1>     clc ;Clear CF, write primary header to backup
   182 00002544 E882000000          <1>     call swapPrimaryHeader
   183 00002549 E8D2060000          <1>     call readDateTimeRecord
   184 0000254E F9                  <1>     stc ;Set CF, write backup to primary header
   185 0000254F E877000000          <1>     call swapPrimaryHeader
   186 00002554 E8DA4D0000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 00002559 66FF05(CA1A0000)    <1>     inc word [keybTicks]
   189 00002560 EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 00002562 30E4                <1>     xor ah, ah
   192 00002564 E84FFCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 00002569 5E                  <1>     pop rsi
   194 0000256A 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 0000256C 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 0000256E C605(C91A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 00002575 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 00002576 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 00002579 AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 0000257A 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000257C 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 0000257E E821FEFFFF          <1>     call charOut_B.in
   208 00002583 EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 00002585 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 0000258A B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000258C 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 0000258E FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 00002590 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 00002591 50                  <1>     push rax
   221 00002592 52                  <1>     push rdx
   222 00002593 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 00002595 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 0000259A 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 0000259C B404                <1>     mov ah, 04h ;Flush input buffers
   226 0000259E E815FCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 000025A3 5A                  <1>     pop rdx
   229 000025A4 58                  <1>     pop rax
   230 000025A5 88C4                <1>     mov ah, al  ;Move function number into ah
   231 000025A7 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 000025A9 7507                <1>     jne .others
   233 000025AB 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 000025AE 7412                <1>     jz .bad ;Yes, exit
   235 000025B0 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 000025B2 3C01                <1>     cmp al, 01h
   238 000025B4 740F                <1>     je .callFunction
   239 000025B6 3C07                <1>     cmp al, 07h
   240 000025B8 740B                <1>     je .callFunction
   241 000025BA 3C08                <1>     cmp al, 08h
   242 000025BC 7407                <1>     je .callFunction
   243 000025BE 3C0A                <1>     cmp al, 0Ah
   244 000025C0 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 000025C2 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 000025C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 000025C5 FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 000025C6 E9974C0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 000025CB 56                  <1>     push rsi
   261 000025CC 57                  <1>     push rdi
   262 000025CD 51                  <1>     push rcx
   263 000025CE 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 000025D7 00                  <1>
   264 000025D8 488D35(C1040000)    <1>     lea rsi, primReqHdr
   265 000025DF 488D3D(9C1A0000)    <1>     lea rdi, bkupReqHdr
   266 000025E6 7303                <1>     jnc .read
   267 000025E8 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 000025EB F3A4                <1>     rep movsb   ;Swap
   270 000025ED 59                  <1>     pop rcx
   271 000025EE 5F                  <1>     pop rdi
   272 000025EF 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 000025F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 000025F1 53                  <1>     push rbx
   278 000025F2 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 000025F7 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 000025FC 7217                <1>     jc .exit
   281 000025FE 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 00002604 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 00002606 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 0000260A 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   285 00002610 7405                <1>     jz .notCharDevOrFast
   286 00002612 CD29                <1>     int 29h ;Fast output
   287                              <1> .exitOk:
   288 00002614 F8                  <1>     clc
   289                              <1> .exit:
   290 00002615 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 00002616 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 00002617 E809000000          <1>     call outputOnSFT
   294 0000261C 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 0000261D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 0000261E E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002623 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 28h if device busy
   305 00002625 50                  <1>     push rax
   306 00002626 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 00002628 E88BFBFFFF          <1>     call mainCharIO
   308 0000262D 58                  <1>     pop rax
   309 0000262E 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 00002630 B402                <1>     mov ah, 02h ;Output char in al
   311 00002632 E881FBFFFF          <1>     call mainCharIO
   312 00002637 F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 00002638 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 00002639 E802000000          <1>     call callInt28h
   316 0000263E EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt28h:
   319                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   320 00002640 9C                  <1>     pushfq
   321 00002641 F605(95040000)FF    <1>     test byte [int28Flag], -1
   322 00002648 7417                <1>     jz .exit    ;If zero, not safe
   323 0000264A F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 00002651 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   326 00002653 FF35(95040000)      <1>     push qword [int28Flag] 
   327 00002659 CD28                <1>     int 28h
   328 0000265B 8F05(95040000)      <1>     pop qword [int28Flag]    ;Return original value
   329                              <1> .exit:
   330 00002661 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 00002662 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 00002663 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 00002668 53                  <1>     push rbx
   354 00002669 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 0000266B E8BA000000          <1>     call getCharDevSFT
   356 00002670 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002671 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 00002673 B401                <1>     mov ah, 01  ;Non destructively read CON
   359 00002675 E83EFBFFFF          <1>     call mainCharIO
   360 0000267A 74C4                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 0000267C 3C13                <1>     cmp al, DC3 ;^S ?
   363 0000267E 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 00002680 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 00002682 E831FBFFFF          <1>     call mainCharIO
   366 00002687 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 0000268C 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 0000268E 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 00002690 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 00002692 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 00002694 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 00002695 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 0000269B 53                  <1>     push rbx
   377 0000269C BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 000026A1 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 000026A6 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000026A7 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 000026A9 57                  <1>     push rdi
   382 000026AA 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 000026AD 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 000026B3 741D                <1>     jz .notNet
   385 000026B5 50                  <1>     push rax
   386 000026B6 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 000026BB CD2F                <1>     int 2Fh
   388 000026BD 58                  <1>     pop rax
   389 000026BE 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 000026C0 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 000026C7 50                  <1>     push rax
   393 000026C8 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 000026CD CD2F                <1>     int 2Fh
   395 000026CF 58                  <1>     pop rax
   396 000026D0 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 000026D2 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   401 000026D9 7507                <1>     jnz .echoOn
   402 000026DB E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 000026E0 EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 000026E2 E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 000026E7 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 000026E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   410 000026E9 E852FFFFFF          <1>     call callInt28h
   411                              <1> .waitNextChar:   ;Here get next char
   412 000026EE B401                <1>     mov ah, 01h ;ND read
   413 000026F0 E8C3FAFFFF          <1>     call mainCharIO
   414 000026F5 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 000026F7 53                  <1>     push rbx
   417 000026F8 31DB                <1>     xor ebx, ebx
   418 000026FA E82B000000          <1>     call getCharDevSFT
   419 000026FF 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002700 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 00002702 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 00002704 E8AFFAFFFF          <1>     call mainCharIO
   423 00002709 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 0000270B 7514                <1>     jnz .checkBreak2
   425 0000270D 803D(C91A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 00002714 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 0000271A C605(C91A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 00002721 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002723 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 00002725 E96F3E0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 0000272A F605(94040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 00002731 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 00002733 57                  <1>     push rdi
   443 00002734 E840260000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 00002739 4889FE              <1>     mov rsi, rdi
   445 0000273C 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 0000273D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 0000273E 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 00002744 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 00002746 488B35(22070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 0000274D F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 0000274E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 0000274F 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 00002751 0F834DFCFFFF        <1>     jae charOut_B.in
   464 00002757 3C09                <1>     cmp al, TAB
   465 00002759 0F8445FCFFFF        <1>     je charOut_B.in
   466 0000275F 3C15                <1>     cmp al, NAK
   467 00002761 0F843DFCFFFF        <1>     je charOut_B.in
   468 00002767 3C14                <1>     cmp al, DC4
   469 00002769 0F8435FCFFFF        <1>     je charOut_B.in
   470 0000276F 50                  <1>     push rax
   471 00002770 B05E                <1>     mov al, "^" ;Get caret in place
   472 00002772 E82DFCFFFF          <1>     call charOut_B.in
   473 00002777 58                  <1>     pop rax
   474 00002778 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 0000277A E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 0000277F B00D                <1>     mov al, CR
   478 00002781 E81EFCFFFF          <1>     call charOut_B.in
   479 00002786 B00A                <1>     mov al, LF
   480 00002788 E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   485 0000278D 803D(08040000)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002794 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 00002796 53                  <1>     push rbx
   490 00002797 56                  <1>     push rsi
   491 00002798 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 0000279F C705(ED040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 000027A7 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 000027A9 C605(EB040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 000027B0 488D1D(EB040000)    <1>     lea rbx, critReqHdr
   497 000027B7 E88C420000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 000027BC 66F705(EE040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 000027C4 02                  <1>
   500 000027C5 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 000027C7 30C0                <1>     xor al, al
   503 000027C9 5E                  <1>     pop rsi
   504 000027CA 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 000027CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 000027CC 8A05(F8040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 000027D2 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 000027D4 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 000027D6 C705(ED040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 000027DE 0000                <1>
   513 000027E0 C605(EB040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 000027E7 C705(01050000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 000027EF 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 000027F1 488D05(F8040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 000027F8 488905(F9040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 000027FF E844420000          <1>     call goDriver   ;RSI and RBX as before
   520 00002804 E9903D0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 00002809 57                  <1>     push rdi
   525 0000280A C605(94040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 00002811 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 00002818 48893D(22070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 0000281F 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002820 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 00002821 C605(94040000)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 00002828 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 00002829 4889D6              <1>     mov rsi, rdx
   553 0000282C 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 0000282E 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002830 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 00002832 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 00002835 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 00002837 7606                <1>     jbe .avoidcheck
   559 00002839 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 0000283D 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 0000283F 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 00002841 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 00002844 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 00002846 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 0000284C 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   569 00002852 56                  <1>     push rsi    ;Push user buffer address
   570 00002853 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   571 0000285A C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 00002861 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   574 00002866 3C0A                <1>     cmp al, LF
   575 00002868 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 0000286A E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 0000286F 3C06                <1>     cmp al, ACK
   580 00002871 74F7                <1>     je .mainLoop2   ;Get another char
   581 00002873 3A05C1D7FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 00002879 0F8426010000        <1>     je .escape
   583 0000287F 3C7F                <1>     cmp al, DEL
   584 00002881 0F8489000000        <1>     je .delete
   585 00002887 3C08                <1>     cmp al, BSP
   586 00002889 0F8481000000        <1>     je .delete
   587 0000288F 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 00002891 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 00002896 3C15                <1>     cmp al, NAK
   591 00002898 9090909090          <1>     db 5 dup (90h)
   592 0000289D 3C0D                <1>     cmp al, CR
   593 0000289F 744C                <1>     je .carriageReturn
   594 000028A1 3C0A                <1>     cmp al, LF
   595 000028A3 7461                <1>     je .lineFeed
   596 000028A5 3A0590D7FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 000028AB 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 000028AD 38D6                <1>     cmp dh, dl
   600 000028AF 731C                <1>     jae .bufOflw
   601 000028B1 AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 000028B2 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 000028B4 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 000028B9 803D(03070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 000028C0 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 000028C2 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 000028C4 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 000028C6 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 000028C9 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 000028CB EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 000028CD B007                <1>     mov al, BEL ;Sound the bell
   617 000028CF E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 000028D4 EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 000028D6 B05C                <1>     mov al, "\"
   622 000028D8 E8C7FAFFFF          <1>     call charOut_B.in
   623 000028DD 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 000028DE E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 000028E3 E85AFBFFFF          <1>     call charOut_B.tab
   628 000028E8 E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 000028ED AA                  <1>     stosb
   631 000028EE E8B1FAFFFF          <1>     call charOut_B.in
   632 000028F3 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 000028F4 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 000028F7 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 000028F9 488D35(CE020000)    <1>     lea rsi, vConBuffer
   637 00002900 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 00002903 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 00002905 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 00002906 E874FEFFFF          <1>     call printCRLF
   642 0000290B E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 00002910 E805000000          <1>     call .removeChar
   645 00002915 E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 0000291A 84F6                <1>     test dh, dh ;Is char count 0?
   648 0000291C 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 0000291E E868000000          <1>     call .vConErase
   650 00002923 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 00002925 3C20                <1>     cmp al, SPC
   652 00002927 7311                <1>     jae .normalChar
   653 00002929 3C09                <1>     cmp al, TAB
   654 0000292B 7420                <1>     je .eraTab
   655 0000292D 3C15                <1>     cmp al, NAK
   656 0000292F 7409                <1>     je .normalChar
   657 00002931 3C14                <1>     cmp al, DC4
   658 00002933 7405                <1>     je .normalChar
   659 00002935 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 0000293A 803D(03070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002941 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 00002943 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002945 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 00002947 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 0000294A FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 0000294C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 0000294D 57                  <1>     push rdi
   672 0000294E 48FFCF              <1>     dec rdi
   673 00002951 FD                  <1>     std ;Go backwards
   674 00002952 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 00002955 B020                <1>     mov al, SPC
   676 00002957 53                  <1>     push rbx
   677 00002958 BB07000000          <1>     mov ebx, 7
   678 0000295D 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 00002960 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 00002961 7608                <1>     jbe .notChar    ;No, skip handling
   682 00002963 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 00002967 740A                <1>     je .tabChar
   684 00002969 FECB                <1>     dec bl
   685                              <1> .notChar:
   686 0000296B E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 0000296D 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 00002973 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 00002975 00D9                <1>     add cl, bl
   692 00002977 80E107              <1>     and cl, 7
   693 0000297A 5B                  <1>     pop rbx
   694 0000297B 5F                  <1>     pop rdi
   695 0000297C FC                  <1>     cld
   696 0000297D 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 0000297F E80C000000          <1>     call .vConEraseNoDec
   700 00002984 E2F9                <1>     loop .vConDelTab
   701 00002986 E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 0000298B 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 0000298E FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 00002990 B008                <1>     mov al, BSP ;Move cursor back
   709 00002992 E80DFAFFFF          <1>     call charOut_B.in
   710 00002997 B020                <1>     mov al, SPC ;Replace with a space
   711 00002999 E806FAFFFF          <1>     call charOut_B.in
   712 0000299E B008                <1>     mov al, BSP ;Move cursor back again
   713 000029A0 E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 000029A5 FF2587D6FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 000029AB E846000000          <1>     call .fCommon2
   721 000029B0 EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 000029B2 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 000029B5 28F9                <1>     sub cl, bh  ;Sub our current position
   725 000029B7 EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 000029B9 B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 000029BE C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 000029C5 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 000029C7 0F849DFEFFFF        <1>     je .mainLoop2
   732 000029CD 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 000029CF 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 000029D5 AC                  <1>     lodsb
   736 000029D6 AA                  <1>     stosb
   737 000029D7 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 000029DC FEC7                <1>     inc bh
   739 000029DE FEC6                <1>     inc dh
   740 000029E0 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 000029E2 E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 000029E7 E80A000000          <1>     call .fCommon2
   744 000029EC 4801CE              <1>     add rsi, rcx
   745 000029EF 00CF                <1>     add bh, cl
   746 000029F1 E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 000029F6 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 000029FB 3A0539D6FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 00002A01 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 00002A03 E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 00002A08 59                  <1>     pop rcx ;Get original return address from stack
   756 00002A09 E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 00002A0E 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 00002A11 28F9                <1>     sub cl, bh
   760 00002A13 74F3                <1>     jz .fforceExit
   761 00002A15 FFC9                <1>     dec ecx
   762 00002A17 74EF                <1>     jz .fforceExit
   763 00002A19 57                  <1>     push rdi
   764 00002A1A 4889F7              <1>     mov rdi, rsi
   765 00002A1D 48FFC7              <1>     inc rdi
   766 00002A20 F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 00002A22 5F                  <1>     pop rdi
   768 00002A23 75E3                <1>     jne .fforceExit ;If char not found, return
   769 00002A25 F6D1                <1>     not cl
   770 00002A27 00D9                <1>     add cl, bl
   771 00002A29 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 00002A2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 00002A2C B040                <1>     mov al, "@"
   775 00002A2E E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 00002A33 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 00002A34 57                  <1>     push rdi
   778 00002A35 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 00002A3A 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 00002A3B 88F3                <1>     mov bl, dh
   781 00002A3D E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 00002A42 B01A                <1>     mov al, EOF
   785 00002A44 E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 00002A49 8A05EBD5FFFF        <1>     mov al, byte [extESC]
   789 00002A4F E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 00002A54 F615(03070000)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 00002A5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 00002A5B 38DF                <1>     cmp bh, bl
   795 00002A5D 0F8407FEFFFF        <1>     je .mainLoop2
   796 00002A63 FEC7                <1>     inc bh
   797 00002A65 48FFC6              <1>     inc rsi
   798 00002A68 E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 00002A6D E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 00002A72 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 00002A77 57                  <1>     push rdi    ;Preserve rdi
   805 00002A78 488D3DBDD5FFFF      <1>     lea rdi, extKeyTbl
   806 00002A7F 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 00002A80 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 00002A81 740D                <1>     je .charFound
   812 00002A83 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 00002A85 7414                <1>     jz .notInTable
   814 00002A87 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 00002A8E EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 00002A90 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 00002A91 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 00002A95 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 00002A98 5F                  <1>     pop rdi
   821 00002A99 FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 00002A9B 59                  <1>     pop rcx ;Realign stack
   824 00002A9C 59                  <1>     pop rcx
   825 00002A9D E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    34                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002AA2 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002AA7 E831440000          <1>     call getUserRegs
     6 00002AAC 668B15(8E040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002AB3 0FB60D(90040000)    <1>     movzx ecx, byte [years]
     9 00002ABA 8A05(93040000)      <1>     mov al, byte [dayOfWeek]
    10 00002AC0 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 00002AC4 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002AC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 00002AC9 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 00002ACE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 00002ACF E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 00002AD4 E804440000          <1>     call getUserRegs
    22 00002AD9 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 00002AE0 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 00002AE7 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 00002AEB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 00002AF0 80FD17              <1>     cmp ch, 23
    33 00002AF3 7749                <1>     ja .exitBad
    34 00002AF5 80F93B              <1>     cmp cl, 59
    35 00002AF8 7744                <1>     ja .exitBad
    36 00002AFA 80FE3B              <1>     cmp dh, 59
    37 00002AFD 773F                <1>     ja .exitBad
    38 00002AFF 80FA63              <1>     cmp dl, 99
    39 00002B02 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 00002B04 E817010000          <1>     call readDateTimeRecord
    42 00002B09 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 00002B10 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 00002B17 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 00002B1A 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 00002B1E 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 00002B22 B906000000          <1>     mov ecx, 6
    48 00002B27 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 00002B2A E82C420000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 00002B2F 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 00002B36 E80D3F0000          <1>     call goDriver
    52 00002B3B 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 00002B3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 00002B3E B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 00002B40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 00002B41 6681F97800          <1>     cmp cx, 120
    62 00002B46 0F83D1000000        <1>     jae .exitBad
    63 00002B4C 80FE0C              <1>     cmp dh, 12
    64 00002B4F 0F87C8000000        <1>     ja .exitBad
    65 00002B55 80FA1F              <1>     cmp dl, 31
    66 00002B58 0F87BF000000        <1>     ja .exitBad
    67 00002B5E 668915(8E040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 00002B65 880D(90040000)      <1>     mov byte [years], cl    ;Save the years count
    70 00002B6B E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 00002B70 88CD                <1>     mov ch, cl ;Get years count in ch
    72 00002B72 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 00002B75 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 00002B78 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 00002B7B BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 00002B80 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 00002B82 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 00002B85 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 00002B88 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 00002B8D FFC9                <1>     dec ecx
    83 00002B8F 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 00002B92 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 00002B97 EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 00002B99 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 00002B9E 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 00002BA0 0FB60D(8F040000)    <1>     movzx ecx, byte [monthOfYear]
    92 00002BA7 488D35AFD4FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 00002BAE FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 00002BB0 67E308              <1>     jecxz .addMonthOffset
    96 00002BB3 AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 00002BB4 0FB6C0              <1>     movzx eax, al
    98 00002BB7 01C2                <1>     add edx, eax
    99 00002BB9 EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 00002BBB 0FB60D(8E040000)    <1>     movzx ecx, byte [dayOfMonth]
   102 00002BC2 FFC9                <1>     dec ecx
   103 00002BC4 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 00002BC6 668915(91040000)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 00002BCD 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 00002BD4 B906000000          <1>     mov ecx, 6
   109 00002BD9 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 00002BDC E885410000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 00002BE1 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 00002BE8 E85B3E0000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 00002BED 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 00002BF4 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 00002BFB 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 00002BFE B906000000          <1>     mov ecx, 6
   118 00002C03 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 00002C06 E850410000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 00002C0B 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 00002C12 E8313E0000          <1>     call goDriver
   122 00002C17 E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 00002C1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 00002C1D B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 00002C1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 00002C20 53                  <1>     push rbx
   132 00002C21 51                  <1>     push rcx
   133 00002C22 52                  <1>     push rdx
   134 00002C23 56                  <1>     push rsi
   135 00002C24 55                  <1>     push rbp
   136                              <1> 
   137 00002C25 66C705(CA1A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 00002C2D 00                  <1>
   138 00002C2E 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 00002C35 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   140 00002C3A 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 00002C3D E824410000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 00002C42 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00002C49 E8FA3D0000          <1>     call goDriver
   148 00002C4E 0FB705(16050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 00002C55 663B05(91040000)    <1>     cmp ax, word [daysOffset]
   155 00002C5C 7466                <1>     je .exit    ;Return if equal
   156 00002C5E 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 00002C63 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 00002C65 668905(91040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 00002C6C BBB5050000          <1>     mov ebx, 365*4 + 1
   163 00002C71 31D2                <1>     xor edx, edx
   164 00002C73 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 00002C75 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 00002C77 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 00002C7C 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 00002C7E 7210                <1>     jb .foundBunch
   171 00002C80 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 00002C82 FFC1                <1>     inc ecx
   173 00002C84 FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 00002C86 39DA                <1>     cmp edx, ebx
   176 00002C88 7206                <1>     jb .foundBunch
   177 00002C8A 29DA                <1>     sub edx, ebx
   178 00002C8C FFC1                <1>     inc ecx
   179 00002C8E EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 00002C90 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 00002C93 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 00002C95 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 00002C9A 488D35BCD3FFFF      <1>     lea rsi, monthsTbl
   190 00002CA1 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 00002CA3 FFC1                <1>     inc ecx ;Start from 1
   193 00002CA5 AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 00002CA6 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 00002CA9 39C2                <1>     cmp edx, eax
   196 00002CAB 7204                <1>     jb .monthFound
   197 00002CAD 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 00002CAF EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 00002CB1 FFC2                <1>     inc edx
   203 00002CB3 880D(8F040000)      <1>     mov byte [monthOfYear], cl
   204 00002CB9 8815(8E040000)      <1>     mov byte [dayOfMonth], dl
   205 00002CBF E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 00002CC4 5D                  <1>     pop rbp
   208 00002CC5 5E                  <1>     pop rsi
   209 00002CC6 5A                  <1>     pop rdx
   210 00002CC7 59                  <1>     pop rcx
   211 00002CC8 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00002CC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 00002CCA 0FB705(91040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 00002CD1 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 00002CD6 31D2                <1>     xor edx, edx
   220 00002CD8 B907000000          <1>     mov ecx, 7   
   221 00002CDD F7F1                <1>     div ecx  ;Get remainder in dl
   222 00002CDF 8815(93040000)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 00002CE5 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002CE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 00002CE8 880D(90040000)      <1>     mov byte [years], cl    ;Save this figure
   232 00002CEE F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 00002CF1 51                  <1>     push rcx
   234 00002CF2 57                  <1>     push rdi
   235 00002CF3 B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 00002CF8 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 00002CFD 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 00002D00 488D3D57D3FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 00002D07 AA                  <1>     stosb   ;Store the word in rdi
   240 00002D08 5F                  <1>     pop rdi
   241 00002D09 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 00002D0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 00002D0B 53                  <1>     push rbx
   257 00002D0C 0FB61D(1B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 00002D13 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 00002D15 89D8                <1>     mov eax, ebx
   260 00002D17 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 00002D1E C1E305              <1>     shl ebx, 5
   262 00002D21 09D8                <1>     or eax, ebx
   263 00002D23 0FB61D(19050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 00002D2A C1E30B              <1>     shl ebx, 11
   265 00002D2D 09D8                <1>     or eax, ebx
   266 00002D2F 0FB61D(8E040000)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002D36 C1E310              <1>     shl ebx, 16
   268 00002D39 09D8                <1>     or eax, ebx
   269 00002D3B 0FB61D(8F040000)    <1>     movzx ebx, byte [monthOfYear]
   270 00002D42 C1E315              <1>     shl ebx, 21
   271 00002D45 09D8                <1>     or eax, ebx
   272 00002D47 0FB61D(90040000)    <1>     movzx ebx, byte [years]
   273 00002D4E C1E319              <1>     shl ebx, 25
   274 00002D51 09D8                <1>     or eax, ebx
   275 00002D53 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 00002D54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;Int 2Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002D55 E8C6FEFFFF          <1>     call readDateTimeRecord
   282 00002D5A E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 00002D5F 31D2                <1>     xor edx, edx
   284 00002D61 6689C2              <1>     mov dx, ax  ;Save time
   285 00002D64 C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002D67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 00002D68 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 00002D6F 4889D6              <1>     mov rsi, rdx
    30 00002D72 803EFF              <1>     cmp byte [rsi], -1
    31 00002D75 7507                <1>     jne .notExt1
    32 00002D77 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 00002D7E 0FB606              <1>     movzx eax, byte [rsi]
    35 00002D81 50                  <1>     push rax    ;Push on stack the drive number
    36 00002D82 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 00002D89 E822030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 00002D8E 7306                <1>     jnc .fcbOk
    39 00002D90 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 00002D91 E9F6450000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 00002D96 488D3D(1E050000)    <1>     lea rdi, buffer1
    43 00002D9D E838E5FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 00002DA2 7306                <1>     jnc .fileFound
    45 00002DA4 5B                  <1>     pop rbx
    46 00002DA5 E9E2450000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 00002DAA 488D3D(2F060000)    <1>     lea rdi, dosffblock
    50 00002DB1 57                  <1>     push rdi
    51 00002DB2 E8D2E3FFFF          <1>     call setupFFBlock
    52 00002DB7 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 00002DB8 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB]
    55 00002DBF F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    56 00002DC6 7407                <1>     jz .notExt2
    57 00002DC8 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 00002DCF 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 00002DD0 85DB                <1>     test ebx, ebx
    61 00002DD2 7509                <1>     jnz .notCurrentDrive
    62 00002DD4 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    63 00002DDB FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 00002DDD AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 00002DDE 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 00002DE1 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 00002DE6 F3A5                <1>     rep movsd
    69 00002DE8 89D8                <1>     mov eax, ebx
    70 00002DEA AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 00002DEB 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 00002DF2 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 00002DF9 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    74 00002E00 7412                <1>     jz .notExt3
    75 00002E02 B8FFFFFFFF          <1>     mov eax, -1
    76 00002E07 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 00002E08 FFC0                <1>     inc eax ;Make it zero
    78 00002E0A AB                  <1>     stosd
    79 00002E0B AA                  <1>     stosb   ;Store 5 bytes of zero
    80 00002E0C 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]
    81 00002E13 AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 00002E14 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 00002E16 AA                  <1>     stosb
    85 00002E17 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 00002E1C F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 00002E1F E965450000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 00002E24 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 00002E2B C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 00002E32 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 00002E39 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 00002E3C 803EFF              <1>     cmp byte [rsi], -1
    96 00002E3F 7514                <1>     jne .notExt
    97 00002E41 FE0D(FB060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 00002E47 4881C606000000      <1>     add rsi, exFcb.attribute
    99 00002E4E AC                  <1>     lodsb   ;Get search attr in al
   100 00002E4F 8805(FC060000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 00002E55 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 00002E5C 31C0                <1>     xor eax, eax
   105 00002E5E AC                  <1>     lodsb   ;Get the FCB drive letter
   106 00002E5F 50                  <1>     push rax    ;Push drive letter on the stack
   107 00002E60 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 00002E63 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 00002E64 B905000000          <1>     mov ecx, 5
   110 00002E69 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 00002E6B FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 00002E71 488D3D(2F060000)    <1>     lea rdi, dosffblock
   113 00002E78 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 00002E79 8F05(17040000)      <1>     pop qword [currentDTA]
   115 00002E7F E85ADFFFFF          <1>     call findNextMain
   116 00002E84 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 00002E8A 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 00002E90 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 00002E97 F607FF              <1>     test byte [rdi], -1
   120 00002E9A 7407                <1>     jz .notExt2
   121 00002E9C 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 00002EA3 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 00002EA4 881F                <1>     mov byte [rdi], bl
   125 00002EA6 E9E1440000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 00002EAB 488D3D(1E050000)    <1>     lea rdi, buffer1
   129 00002EB2 57                  <1>     push rdi
   130 00002EB3 E8F8010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 00002EB8 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 00002EB9 0F82CD440000        <1>     jc fcbErrExit
   133 00002EBF E816E4FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 00002EC4 0F82C2440000        <1>     jc fcbErrExit
   135 00002ECA E8E80F0000          <1>     call outerDeleteMain
   136 00002ECF 0F82B7440000        <1>     jc fcbErrExit
   137 00002ED5 E9AF440000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 00002EDA 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 00002EE1 4889D6              <1>     mov rsi, rdx
   144 00002EE4 803EFF              <1>     cmp byte [rsi], -1
   145 00002EE7 7507                <1>     jne .notExt
   146 00002EE9 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 00002EF0 31C0                <1>     xor eax, eax
   149 00002EF2 AC                  <1>     lodsb
   150 00002EF3 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 00002EF4 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 00002EFB E8B0010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 00002F00 723D                <1>     jc .badPop
   154 00002F02 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 00002F08 8F05(26060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 00002F0E 58                  <1>     pop rax ;Get drive letter back
   157 00002F0F 488D3D(9E050000)    <1>     lea rdi, buffer2
   158 00002F16 E869010000          <1>     call fcbInitName2
   159 00002F1B 7223                <1>     jc short .bad
   160 00002F1D 488B05(26060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 00002F24 488705(1E060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 00002F2B 488905(26060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 00002F32 E8770B0000          <1>     call renameMain
   164 00002F37 0F834C440000        <1>     jnc fcbGoodExit
   165 00002F3D EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 00002F3F 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 00002F40 E947440000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 00002F45 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   175 00002F4C 488D3D(1E050000)    <1>     lea rdi, buffer1
   176 00002F53 57                  <1>     push rdi
   177 00002F54 E857010000          <1>     call fcbInitRoutine
   178 00002F59 5F                  <1>     pop rdi
   179 00002F5A 0F822C440000        <1>     jc fcbErrExit
   180 00002F60 E875E3FFFF          <1>     call getFilePathNoCanon
   181 00002F65 0F8221440000        <1>     jc fcbErrExit
   182 00002F6B 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 00002F71 488B35(1A070000)    <1>     mov rsi, qword [workingFCB]
   185 00002F78 803EFF              <1>     cmp byte [rsi], -1
   186 00002F7B 7507                <1>     jne .notExtended
   187 00002F7D 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 00002F84 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 00002F88 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 00002F8A 85D2                <1>     test edx, edx
   193 00002F8C 7402                <1>     jz .noRemainder
   194 00002F8E FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 00002F90 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 00002F93 E9F1430000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 00002F98 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   203 00002F9F 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 00002FA3 488915(17040000)    <1>     mov qword [currentDTA], rdx
   205 00002FAA C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 00002FAB 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   209 00002FB2 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 00002FB9 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 00002FBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 00002FBE E88D010000          <1>     call parseNameToFCB
   229 00002FC3 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 00002FC4 E8143F0000          <1>     call getUserRegs
   231 00002FC9 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00002FCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 00002FCD 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 00002FD4 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 00002FD7 755F                <1>     jne .exitErr
   251 00002FD9 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 00002FDD 7559                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 00002FDF 488D3D(1E050000)    <1>     lea rdi, buffer1
   255 00002FE6 57                  <1>     push rdi
   256 00002FE7 E8C4000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 00002FEC 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 00002FED 0F8299430000        <1>     jc fcbErrExit
   259 00002FF3 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 00002FF6 E8C2400000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 00002FFB 723B                <1>     jc .exitErr
   262 00002FFD E8D8E2FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 00003002 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 00003008 30C0                <1>     xor al, al
   265 0000300A 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 0000300F 7427                <1>     je .exitErr
   267 00003011 488D1D(180D0000)    <1>     lea rbx, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 00003018 48891D(32070000)    <1>     mov qword [currentSFT], rbx
   269 0000301F 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 00003026 E86F100000          <1>     call createMain
   271 0000302B 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 0000302D E889130000          <1>     call closeMain
   275 00003032 0F8351430000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 00003038 B805000000          <1>     mov eax, errAccDen
   278 0000303D E94A430000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> ;=================================================================
   281                              <1> ;=================================================================
   282                              <1> ;These functions will be marked as reserved for future expansion.
   283                              <1> ; One idea will be to create a handle based record IO interface.
   284                              <1> ; We will be able to do IO on records of predefined length 
   285                              <1> ; on a file handle, thus removing the need for an FCB but still
   286                              <1> ; maintaining the usefulness of record based IO.
   287                              <1> ;=================================================================
   288                              <1> ;=================================================================
   289                              <1> closeFileFCB:      ;ah = 10h
   290                              <1> sequentialReadFCB: ;ah = 14h
   291                              <1> sequentialWriteFCB:;ah = 15h
   292                              <1> randomReadFCB:     ;ah = 21h
   293                              <1> randomWriteFCB:    ;ah = 22h
   294                              <1> setRelRecordFCB:   ;ah = 24h
   295                              <1> randBlockReadFCB:  ;ah = 27h
   296                              <1> randBlockWriteFCB: ;ah = 28h
   297 00003042 B805000000          <1>     mov eax, errAccDen
   298 00003047 E940430000          <1>     jmp fcbErrExit
   299                              <1> 
   300                              <1> 
   301                              <1> ;--------------------------------
   302                              <1> ;  Common FCB related Routines  :
   303                              <1> ;--------------------------------
   304                              <1> fcbCheckDriveType:
   305                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   306                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   307                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   308                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   309                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   310                              <1> ;If a net CDS, automatic fail (for now).
   311 0000304C C605(F9060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   312 00003053 51                  <1>     push rcx
   313 00003054 57                  <1>     push rdi
   314 00003055 55                  <1>     push rbp
   315 00003056 9C                  <1>     pushfq
   316 00003057 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   317 0000305E 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   318 00003060 E8EB3D0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   319 00003065 7218                <1>     jc .exit
   320                              <1>     ;rdi has cds ptr now
   321 00003067 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   322 0000306B E89BD9FFFF          <1>     call getFATtype
   323 00003070 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   324 00003076 7707                <1>     ja .exit
   325                              <1> .okToGo:
   326 00003078 C605(F9060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   327                              <1> .exit:
   328 0000307F 9D                  <1>     popfq
   329 00003080 5D                  <1>     pop rbp
   330 00003081 5F                  <1>     pop rdi
   331 00003082 59                  <1>     pop rcx
   332                              <1>     return
    13                              <2> %%_ret:
    14 00003083 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> fcbInitName2:
   334                              <1> ;Must be called after fcbInitRoutine has been run once
   335                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   336                              <1> ;       rdx -> UserFCB
   337                              <1> ;       eax[0] = Drive number (0 based)
   338 00003084 55                  <1>     push rbp
   339 00003085 4889E5              <1>     mov rbp, rsp
   340 00003088 4881EC0F000000      <1>     sub rsp, 15
   341 0000308F 57                  <1>     push rdi
   342 00003090 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   343 00003094 4889D6              <1>     mov rsi, rdx
   344 00003097 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
   345 0000309E 7407                <1>     jz .notExtended
   346 000030A0 4881C607000000      <1>     add rsi, exFcb.driveNum
   347                              <1> .notExtended:
   348                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   349 000030A7 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   350 000030AE EB36                <1>     jmp short fcbInitRoutine.rename2EP
   351                              <1> fcbInitRoutine:
   352                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   353                              <1> ;Input: rdx -> User FCB
   354                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   355 000030B0 55                  <1>     push rbp
   356 000030B1 4889E5              <1>     mov rbp, rsp
   357 000030B4 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   358                              <1>     ;This space is used to store X:FILENAME.EXT,0
   359 000030BB 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   360 000030BC 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   361 000030C0 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   362 000030C7 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   363 000030CE E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   364 000030D3 7410                <1>     jz .notExtended
   365 000030D5 C605(FB060000)FF    <1>     mov byte [extFCBFlag], -1
   366 000030DC 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   367 000030DF 8805(FC060000)      <1>     mov byte [searchAttr], al
   368                              <1> .notExtended:
   369 000030E5 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   370                              <1> .rename2EP:
   371                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   372 000030E6 E8163E0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   373 000030EB 723F                <1>     jc .badDisk
   374 000030ED E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   375 000030F2 488D1D63D3FFFF      <1>     lea rbx, asciiCharProperties
   376 000030F9 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   377 000030FE 56                  <1>     push rsi    ;rsi -> fcb.filename
   378                              <1> .nameCharCheck:
   379 000030FF AC                  <1>     lodsb   ;Get the char in al
   380 00003100 D7                  <1>     xlatb   ;Get the char signature in al
   381 00003101 A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   382 00003103 7427                <1>     jz .badDisk
   383 00003105 FFC9                <1>     dec ecx
   384 00003107 75F6                <1>     jnz .nameCharCheck
   385 00003109 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   386 0000310A 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   387 0000310D E837E0FFFF          <1>     call FCBToAsciiz
   388 00003112 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   389 00003113 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   390 00003116 7414                <1>     je .badDisk
   391 00003118 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   392 0000311C 55                  <1>     push rbp
   393 0000311D E880E1FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   394 00003122 5D                  <1>     pop rbp
   395 00003123 7207                <1>     jc .badDisk
   396 00003125 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   397 0000312A EB03                <1>     jmp short .jiggleStack  ;Skip the error
   398                              <1> .badDisk:
   399 0000312C B003                <1>     mov al, errPnf  ;DOS does this... so will I
   400 0000312E F9                  <1>     stc
   401                              <1> .jiggleStack:
   402 0000312F 4889EC              <1>     mov rsp, rbp
   403 00003132 5D                  <1>     pop rbp
   404                              <1> .exit:
   405                              <1>     return
    13                              <2> %%_ret:
    14 00003133 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> storeZeroBasedDriveNumber:
   408                              <1> ;Input: al => 0 based drive letter
   409                              <1> ;       rdi -> Points to buffer to store the X: in
   410 00003134 FEC0                <1>     inc al
   411                              <1> storeOneBasedDriveNumber:
   412                              <1> ;Input: al => 1 based drive letter
   413                              <1> ;       rdi -> Points to buffer to store the X: in
   414 00003136 0440                <1>     add al, "@"
   415 00003138 B43A                <1>     mov ah, ":"
   416 0000313A 66AB                <1>     stosw
   417                              <1>     return
    13                              <2> %%_ret:
    14 0000313C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> isFCBExtended:
   420                              <1> ;Input: rdx = FCB ptr
   421                              <1> ;Output: rsi -> Drive letter of FCB
   422                              <1> ;        rdx -> FCB first byte
   423                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   424 0000313D 4889D6              <1>     mov rsi, rdx
   425 00003140 803EFF              <1>     cmp byte [rsi], -1
   426 00003143 7507                <1>     jne .notExtended
   427 00003145 4881C607000000      <1>     add rsi, exFcb.driveNum
   428                              <1> .notExtended:
   429 0000314C 4839F2              <1>     cmp rdx, rsi
   430                              <1>     return
    13                              <2> %%_ret:
    14 0000314F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> parseNameToFCB:
   433                              <1> ;rsi points to a command line to parse
   434                              <1> ;rdi points to a future unopened FCB
   435                              <1> ;al = parsing control bits. 
   436                              <1> ; al[0] = If set, leading filename separators are scanned off
   437                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   438                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   439                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   440                              <1> ;
   441                              <1> ;Separators include : . ; , = + TAB SPACE
   442                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   443 00003150 C605(8D040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   444 00003157 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   445 00003159 A802                <1>     test al, 2  ;Set drive letter
   446 0000315B 7402                <1>     jz .skipDriveLetter
   447 0000315D 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   448                              <1> .skipDriveLetter:
   449 0000315F 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   450 00003162 B908000000          <1>     mov ecx, 8  ;Copy Filename
   451 00003167 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   452 00003169 93                  <1>     xchg eax, ebx
   453 0000316A B020                <1>     mov al, " " ;Clear the field
   454 0000316C 7405                <1>     jz .clearFilenameField
   455 0000316E 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   456 00003171 31C9                <1>     xor ecx, ecx
   457                              <1> .clearFilenameField:
   458 00003173 F3AA                <1>     rep stosb
   459 00003175 B903000000          <1>     mov ecx, 3
   460 0000317A F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   461 0000317D 7405                <1>     jz .clearExtensionField
   462 0000317F 4801CF              <1>     add rdi, rcx
   463 00003182 31C9                <1>     xor ecx, ecx
   464                              <1> .clearExtensionField:
   465 00003184 F3AA                <1>     rep stosb
   466 00003186 91                  <1>     xchg eax, ecx
   467 00003187 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   468 00003188 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   469 0000318F F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   470 00003192 740F                <1>     jz .dontScanOffTerm
   471 00003194 E89F000000          <1>     call skipSeparators ;Skip leading separators
   472 00003199 E8933E0000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   473 0000319E 7508                <1>     jnz .skipIfNotTerminator
   474 000031A0 48FFC6              <1>     inc rsi
   475                              <1> .dontScanOffTerm:
   476 000031A3 E890000000          <1>     call skipSeparators  ;Skip separators
   477                              <1> .skipIfNotTerminator:
   478 000031A8 E85C3E0000          <1>     call uppercaseCharAtPtr 
   479 000031AD 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   480 000031AF 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   481 000031B2 7519                <1>     jne .skipSettingDriveLetter
   482 000031B4 48FFC6              <1>     inc rsi ;Goto next char
   483 000031B7 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   484 000031B9 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   485 000031BB 50                  <1>     push rax    ;Save the 1 based drive letter
   486 000031BC E8403D0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   487 000031C1 58                  <1>     pop rax
   488 000031C2 7302                <1>     jnc .validDriveLetter
   489                              <1> .invalidDriveLetter:
   490 000031C4 B2FF                <1>     mov dl, -1
   491                              <1> .validDriveLetter:
   492 000031C6 AA                  <1>     stosb
   493 000031C7 48FFC6              <1>     inc rsi ;Align pointers...
   494 000031CA 48FFCF              <1>     dec rdi 
   495                              <1> .skipSettingDriveLetter:
   496 000031CD 48FFCE              <1>     dec rsi
   497 000031D0 48FFC7              <1>     inc rdi
   498                              <1> getFCBFilename:
   499                              <1> ;Input: rsi points to first char of filename
   500                              <1> ;       rdi points to storage buffer for filename
   501                              <1> ;       dl contains the signature if drive invalid
   502                              <1> ;Output:
   503                              <1> ;       Fields filled
   504                              <1> ;       al = Return signature
   505 000031D3 B908000000          <1>     mov ecx, 8
   506 000031D8 E815000000          <1>     call getFCBNameField
   507 000031DD 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   508 000031E0 750D                <1>     jne .noExt
   509 000031E2 B903000000          <1>     mov ecx, 3
   510 000031E7 48FFC6              <1>     inc rsi ;Skip this char
   511 000031EA E814000000          <1>     call forceFCBNameField
   512                              <1> .noExt:
   513 000031EF 88D0                <1>     mov al, dl  ;Store the return signature
   514                              <1>     return
    13                              <2> %%_ret:
    14 000031F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> 
   516                              <1> getFCBNameField:
   517                              <1> ;Checks if the field is appropriate before copying it
   518 000031F2 E8123E0000          <1>     call uppercaseCharAtPtr
   519 000031F7 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   520 000031F9 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   521 000031FC 48FFCE              <1>     dec rsi ;Point to previous char
   522                              <1>     return
    13                              <2> %%_ret:
    14 000031FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .okName:
   524 00003200 48FFCE              <1>     dec rsi ;Go back now a char
   525                              <1> forceFCBNameField:
   526                              <1> ;Forcefully copies the name from rsi to rdi
   527 00003203 E8013E0000          <1>     call uppercaseCharAtPtr
   528 00003208 7226                <1>     jc .terminatingSpace
   529 0000320A 750D                <1>     jnz .notSep
   530 0000320C F605(8D040000)FF    <1>     test byte [fcbSpaceOk], -1
   531 00003213 741B                <1>     jz .terminatingSpace
   532 00003215 3C20                <1>     cmp al, " "
   533 00003217 7517                <1>     jne .terminatingSpace
   534                              <1> .notSep:
   535 00003219 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   536 0000321C FFC9                <1>     dec ecx
   537 0000321E 3C2A                <1>     cmp al, "*" ;Big wildcard?
   538 00003220 7504                <1>     jne .notBigWildcard
   539 00003222 B03F                <1>     mov al, "?"
   540 00003224 F3AA                <1>     rep stosb
   541                              <1> .notBigWildcard:
   542 00003226 AA                  <1>     stosb   ;Stores the uppercased char
   543 00003227 3C3F                <1>     cmp al, "?"
   544 00003229 75D8                <1>     jne forceFCBNameField
   545 0000322B 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   546 0000322E EBD3                <1>     jmp short forceFCBNameField
   547                              <1> .terminatingSpace:
   548 00003230 B020                <1>     mov al, " "
   549 00003232 F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   550 00003234 48FFCE              <1>     dec rsi     ;Point back to terminating char
   551                              <1>     return
    13                              <2> %%_ret:
    14 00003237 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> skipSeparators:
   554                              <1> ;Input: rsi -> String 
   555                              <1> ;Output: rsi -> First non separator type char
   556 00003238 AC                  <1>     lodsb
   557 00003239 E8023E0000          <1>     call isCharSeparator
   558 0000323E 74F8                <1>     jz skipSeparators
   559 00003240 48FFCE              <1>     dec rsi
   560                              <1>     return
    13                              <2> %%_ret:
    14 00003243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00003244 51                  <1>     push rcx    ;Save file attributes on stack
    11 00003245 488D0D4E0E0000      <1>     lea rcx, createMain
    12 0000324C C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 00003253 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003255 BB16000000          <1>     mov ebx, dirInclusive
    21 0000325A F605(02070000)FF    <1>     test byte [dosInvoke], -1
    22 00003261 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00003264 880D(FC060000)      <1>     mov byte [searchAttr], cl
    24 0000326A 488D0DFF0C0000      <1>     lea rcx, openMain  
    25 00003271 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00003272 4889D6              <1>     mov rsi, rdx
    28 00003275 E8433E0000          <1>     call checkPathspecOK
    29 0000327A 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 0000327C 58                  <1>     pop rax
    32 0000327D B805000000          <1>     mov eax, errAccDen
    33 00003282 E925410000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00003287 E8D5400000          <1>     call dosCrit1Enter
    36 0000328C E8EF190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00003291 E8D5400000          <1>     call dosCrit1Exit
    38 00003296 0F82D3000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 0000329C E817190000          <1>     call setCurrentSFT
    41 000032A1 66891D(3A070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 000032A8 E89C1A0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 000032AD 0F82BC000000        <1>     jc .exitBad
    44 000032B3 66891D(3C070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 000032BA 48893D(2A070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 000032C1 0FB71D(3A070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 000032C8 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 000032CA 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 000032CD 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 000032D4 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 000032D5 E849DFFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 000032DA 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 000032DB 488D058E0C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 000032E2 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 000032E9 7334                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 000032EB 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 000032EE 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    64 000032F0 F605(05070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 000032F7 741B                <1>     jz .badPathspec ;If not then exit bad path
    66                              <1>     ;Now check the path is not X:\<NUL>
    67 000032F9 8B0D(1E050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    68 000032FF 30C9                <1>     xor cl, cl
    69 00003301 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    70 00003307 7516                <1>     jnz .proceedCall    ;Else, proceed.
    71                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    72 00003309 58                  <1>     pop rax
    73 0000330A B802000000          <1>     mov eax, errFnf 
    74 0000330F E95F000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    75                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    76 00003314 58                  <1>     pop rax
    77 00003315 B803000000          <1>     mov eax, errPnf
    78 0000331A E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    79                              <1> .proceedCall:
    80                              <1> ;If the pathspec exists, recall that for create, we truncate.
    81 0000331F 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    82 00003321 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    83 00003324 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    84 00003325 750B                <1>     jne .callProc   ;Jump if we are creating
    85                              <1>     ;al means openmode here
    86 00003327 A880                <1>     test al, 80h    ;No Inherit bit set?
    87 00003329 7407                <1>     jz .callProc
    88 0000332B 247F                <1>     and al, 7Fh     ;Clear this bit
    89 0000332D B900100000          <1>     mov ecx, devNoInherit
    90                              <1> .callProc:
    91 00003332 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    92 00003338 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    93 0000333E 51                  <1>     push rcx    ;Save the device word 
    94 0000333F FFD3                <1>     call rbx    ;Enter with open mode in 
    95 00003341 59                  <1>     pop rcx
    96 00003342 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    97 00003349 7228                <1>     jc .exitBad2
    98 0000334B 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    99 00003350 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   100 00003354 0FB705(3C070000)    <1>     movzx eax, word [currentHdl]
   101 0000335B FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   102 00003361 66C705(3A070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   102 00003369 FF                  <1>
   103 0000336A E92F400000          <1>     jmp extGoodExit ;Save ax and return OK
   104                              <1> .exitBad:
   105 0000336F FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   106 00003370 5B                  <1>     pop rbx ;Pop the word from the stack
   107 00003371 EB16                <1>     jmp short .exitBadCommon
   108                              <1> .exitBad2:
   109                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   110 00003373 488B35(2A070000)    <1>     mov rsi, qword [curHdlPtr]
   111 0000337A C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   112 0000337D 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
   113 00003384 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   114                              <1> .exitBadCommon:
   115 00003389 66C705(3A070000)FF- <1>     mov word [currentNdx], -1
   115 00003391 FF                  <1>
   116 00003392 E915400000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   117                              <1> 
   118                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   119                              <1> ;Input: bx = file handle to close
   120 00003397 E8C3190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   121 0000339C 0F820A400000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   122 000033A2 E811180000          <1>     call setCurrentSFT  ;Set this as the current SFT
   123 000033A7 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1
   124 000033AC 7406                <1>     je .killHdl
   125                              <1>     ;Now check sharing mode
   126 000033AE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   127 000033B2 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   128                              <1> .killHdl:
   129 000033B4 3C70                <1>     cmp al, netFCBShare ;If this is a NetFile, skip nuking the JFT entry
   130 000033B6 7408                <1>     je .skipShareCheck
   131 000033B8 E857190000          <1>     call getJFTPtr  ;Remember, bx has handle number
   132 000033BD C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   133                              <1> .skipShareCheck:
   134 000033C0 E8F60F0000          <1>     call closeMain  ;Call close main!
   135 000033C5 0F82E13F0000        <1>     jc extErrExit   ;If an error, exit through error exit
   136 000033CB B8003E0000          <1>     mov eax, 3E00h    ;Return value
   137 000033D0 E9C93F0000          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> readFileHdl:       ;ah = 3Fh, handle function
   140 000033D5 488D35A8100000      <1>     lea rsi, readBytes
   141                              <1> .common:
   142 000033DC E87E190000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   143 000033E1 0F82C53F0000        <1>     jc extErrExit   ;Error code in al and exit
   144 000033E7 E8CC170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   145 000033EC 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   146 000033EE FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   147 000033F4 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   148 000033FB FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   149 000033FD 8F05(17040000)      <1>     pop qword [currentDTA]
   150 00003403 0F82A33F0000        <1>     jc extErrExit   ;Error code in al and exit
   151 00003409 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   152 0000340B E9853F0000          <1>     jmp extGoodExit2    ;and exit!
   153                              <1> 
   154                              <1> writeFileHdl:      ;ah = 40h, handle function
   155 00003410 488D35B8130000      <1>     lea rsi, writeBytes
   156 00003417 E9C0FFFFFF          <1>     jmp readFileHdl.common
   157                              <1> 
   158                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   159                              <1> ;Here don't allow malformed chars unless it is a network CDS
   160                              <1> ;Allows deleting volume labels.
   161 0000341C BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   162 00003421 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   163 00003428 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   164 0000342B 880D(FC060000)      <1>     mov byte [searchAttr], cl
   165 00003431 4889D6              <1>     mov rsi, rdx
   166 00003434 E8843C0000          <1>     call checkPathspecOK
   167 00003439 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   168 0000343B 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   169                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   170 0000343D F605(02070000)FF    <1>     test byte [dosInvoke], -1
   171 00003444 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   172                              <1> .badPath:
   173 00003446 B805000000          <1>     mov eax, errAccDen
   174 0000344B E95C3F0000          <1>     jmp extErrExit
   175                              <1> .pathOk:
   176 00003450 488D3D(1E050000)    <1>     lea rdi, buffer1
   177 00003457 52                  <1>     push rdx
   178 00003458 E8C6DDFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   179 0000345D 5A                  <1>     pop rdx
   180 0000345E 0F82483F0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   181                              <1>     ;In the case of a wildcard, recall this will return the first file
   182 00003464 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   183 0000346B 0F853B3F0000        <1>     jnz extErrExit
   184 00003471 E8410A0000          <1>     call outerDeleteMain
   185 00003476 0F82303F0000        <1>     jc extErrExit
   186 0000347C E91D3F0000          <1>     jmp extGoodExit
   187                              <1> 
   188                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   189                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   190 00003481 E8D9180000          <1>     call getSFTPtr
   191 00003486 0F82203F0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   192 0000348C 3C03                <1>     cmp al, 3
   193 0000348E 720A                <1>     jb .validFunction
   194 00003490 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   195 00003495 E9123F0000          <1>     jmp extErrExit
   196                              <1> .validFunction:
   197 0000349A 3C01                <1>     cmp al, 1
   198 0000349C 7718                <1>     ja .seekend
   199 0000349E 7203                <1>     jb .seekset
   200                              <1> ;Here we are at seekcur, seek from current (signed)
   201 000034A0 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   202                              <1> .seekset:
   203                              <1> ;Seek from the start (unsigned)
   204 000034A3 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   205 000034A6 E8323A0000          <1>     call getUserRegs    ;Get user regs in rsi
   206 000034AB 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   207                              <1> .seekExit:
   208 000034AE 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   209 000034B1 E9DF3E0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   210                              <1> .seekend:
   211                              <1> ;Here we are at seekend, seek from end (signed)
   212 000034B6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   213 000034BC 7505                <1>     jnz .netCheck
   214                              <1> .proceedDisk:
   215 000034BE 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   216 000034C1 EBE0                <1>     jmp short .seekset
   217                              <1> .netCheck:
   218 000034C3 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   219 000034C9 75F3                <1>     jnz .proceedDisk
   220 000034CB 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   221                              <1>     ;Check it's share mode
   222 000034CF 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   223 000034D4 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   224 000034D9 7407                <1>     je .netSeek
   225 000034DB 3D30000000          <1>     cmp eax, denyReadShare
   226 000034E0 75DC                <1>     jne .proceedDisk
   227                              <1> .netSeek:
   228 000034E2 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   229 000034E7 CD2F                <1>     int 2Fh
   230 000034E9 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   231 000034EB E9BC3E0000          <1>     jmp extErrExit
   232                              <1> 
   233                              <1> 
   234                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   235 000034F0 3C01                <1>     cmp al, 1
   236 000034F2 761F                <1>     jbe .subFuncOk
   237 000034F4 B801000000          <1>     mov eax, errInvFnc
   238                              <1> .chmodError:
   239                              <1> ;Call with ax = errorcode
   240 000034F9 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   241 00003500 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   242 00003507 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   243 0000350E E9993E0000          <1>     jmp extErrExit
   244                              <1> .subFuncOk:
   245 00003513 4889D6              <1>     mov rsi, rdx
   246 00003516 89C3                <1>     mov ebx, eax    ;Store function code in bl
   247 00003518 53                  <1>     push rbx
   248 00003519 51                  <1>     push rcx
   249 0000351A E89E3B0000          <1>     call checkPathspecOK
   250 0000351F 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   251                              <1> .badPath:
   252 00003521 59                  <1>     pop rcx
   253 00003522 5B                  <1>     pop rbx
   254 00003523 B805000000          <1>     mov eax, errAccDen
   255 00003528 EBCF                <1>     jmp short .chmodError
   256                              <1> .pathOk:
   257 0000352A E8683C0000          <1>     call checkPathNet 
   258 0000352F 74F0                <1>     jz .badPath ;Or Net paths
   259 00003531 E8423C0000          <1>     call scanPathWC
   260 00003536 72E9                <1>     jc .badPath ;Dont allow wildcards
   261 00003538 488D3D(1E050000)    <1>     lea rdi, buffer1
   262 0000353F 52                  <1>     push rdx
   263 00003540 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   264 00003547 E8D7DCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   265 0000354C 5A                  <1>     pop rdx
   266 0000354D 59                  <1>     pop rcx
   267 0000354E 5B                  <1>     pop rbx
   268 0000354F 0F82573E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   269                              <1>     ;In the case of a wildcard, recall this will return the first file
   270 00003555 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   271 0000355C 759B                <1>     jnz .chmodError
   272                              <1> 
   273 0000355E E8ED380000          <1>     call testCDSNet
   274 00003563 730C                <1>     jnc .notNet
   275 00003565 750A                <1>     jnz .notNet ;This type of net ok
   276 00003567 B805000000          <1>     mov eax, errAccDen
   277 0000356C E93B3E0000          <1>     jmp extErrExit
   278                              <1> .notNet:
   279 00003571 84DB                <1>     test bl, bl
   280 00003573 7526                <1>     jnz .setAttribs
   281                              <1>     ;Get attribs here
   282 00003575 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   283 0000357B 7412                <1>     jz .getDiskAttribs
   284 0000357D B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   285 00003582 CD2F                <1>     int 2Fh
   286 00003584 0F82223E0000        <1>     jc extErrExit
   287 0000358A E90F3E0000          <1>     jmp extGoodExit
   288                              <1> .getDiskAttribs:
   289 0000358F 0FB605(65060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   290 00003596 E9033E0000          <1>     jmp extGoodExit
   291                              <1> 
   292                              <1> .setAttribs:
   293                              <1>     ;Set attribs here
   294 0000359B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   295 000035A1 7417                <1>     jz .setDiskAttribs
   296 000035A3 0FB7C9              <1>     movzx ecx, cx
   297 000035A6 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   298 000035A7 B80E110000          <1>     mov eax, 110Eh
   299 000035AC CD2F                <1>     int 2Fh
   300 000035AE 59                  <1>     pop rcx
   301 000035AF 0F82F73D0000        <1>     jc extErrExit
   302 000035B5 E9E43D0000          <1>     jmp extGoodExit
   303                              <1> .setDiskAttribs:
   304 000035BA E886080000          <1>     call checkNoOpenHandlesForShareAction
   305 000035BF 730A                <1>     jnc .okToSet
   306 000035C1 B820000000          <1>     mov eax, errShrVio
   307 000035C6 E9E13D0000          <1>     jmp extErrExit
   308                              <1> .okToSet:
   309 000035CB E8913D0000          <1>     call dosCrit1Enter
   310 000035D0 E88BEAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   311 000035D5 722D                <1>     jc .setErrorNoFlush
   312 000035D7 F6C118              <1>     test cl, volLabelFile | directoryFile
   313 000035DA 740A                <1>     jz .set
   314 000035DC B805000000          <1>     mov eax, errAccDen
   315 000035E1 E91E000000          <1>     jmp .setErrorNoFlush
   316                              <1> .set:
   317 000035E6 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   318 000035E9 80E518              <1>     and ch, (volLabelFile | directoryFile)    ;Keep these two bits
   319 000035EC 08E9                <1>     or cl, ch
   320 000035EE 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   321 000035F1 E825D1FFFF          <1>     call flushAllBuffersForDPB
   322 000035F6 720C                <1>     jc .setError
   323 000035F8 E86E3D0000          <1>     call dosCrit1Exit
   324 000035FD 31C0                <1>     xor eax, eax
   325 000035FF E99A3D0000          <1>     jmp extGoodExit
   326                              <1> .setError:
   327                              <1> 
   328                              <1> .setErrorNoFlush:
   329 00003604 E8623D0000          <1>     call dosCrit1Exit
   330 00003609 E99E3D0000          <1>     jmp extErrExit
   331                              <1> 
   332                              <1> duplicateHandle:   ;ah = 45h, handle function
   333                              <1> ;Input: bx = Handle to duplicate
   334                              <1> ;Output: If ok then ax = New handle
   335 0000360E 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   336 00003611 E833170000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   337                              <1> .duplicateCommon:
   338 00003616 0F82903D0000        <1>     jc extErrExit   ;Exit if no space
   339 0000361C 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   340 0000361F 93                  <1>     xchg eax, ebx
   341 00003620 E83A170000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   342 00003625 0F82813D0000        <1>     jc extErrExit
   343 0000362B 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   344 0000362E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   345 00003634 7505                <1>     jnz .netFile
   346 00003636 E8EC090000          <1>     call openDriverMux
   347                              <1> .netFile:
   348 0000363B E8D4160000          <1>     call getJFTPtr
   349 00003640 8A1F                <1>     mov bl, byte [rdi]
   350 00003642 881E                <1>     mov byte [rsi], bl
   351 00003644 E9553D0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   352                              <1> 
   353                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   354                              <1> ;Input: bx = Handle to duplicate
   355                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   356                              <1>     ;First we close cx if it exists
   357 00003649 0FB7C9              <1>     movzx ecx, cx
   358 0000364C 53                  <1>     push rbx
   359 0000364D 51                  <1>     push rcx
   360 0000364E 89CB                <1>     mov ebx, ecx
   361 00003650 E842FDFFFF          <1>     call closeFileHdl   ;Close handle 
   362 00003655 5B                  <1>     pop rbx
   363 00003656 58                  <1>     pop rax
   364 00003657 E8B8160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   365 0000365C EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   366                              <1> 
   367                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   368                              <1> ;Input: cx = Search Attributes, cl only used
   369                              <1> ;       rdx = Ptr to path to file to look for
   370                              <1> ;       al = Document as needing to be 0 for now
   371                              <1> ;Return:
   372                              <1> ;Data in the DTA or error through AX with CF=CY
   373                              <1> ;CAVEATS!
   374                              <1> ;DTA:attribFnd = 40h => Char dev
   375                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   376 0000365E 880D(FC060000)      <1>     mov byte [searchAttr], cl
   377 00003664 4889D6              <1>     mov rsi, rdx
   378 00003667 E8513A0000          <1>     call checkPathspecOK
   379 0000366C 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   380 0000366E 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   381                              <1> .badPath:
   382 00003670 B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   383 00003675 E9323D0000          <1>     jmp extErrExit
   384                              <1> .pathspecOk:
   385 0000367A FF35(17040000)      <1>     push qword [currentDTA]
   386 00003680 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   387 00003687 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   388 0000368E 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   389 00003695 E889DBFFFF          <1>     call getFilePath
   390                              <1> .findfileExit:
   391 0000369A 8F05(17040000)      <1>     pop qword [currentDTA]
   392 000036A0 0F82063D0000        <1>     jc extErrExit
   393 000036A6 488D3D(2F060000)    <1>     lea rdi, dosffblock
   394 000036AD 57                  <1>     push rdi
   395 000036AE E8D6DAFFFF          <1>     call setupFFBlock
   396 000036B3 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   397 000036B4 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   398 000036BB B92B000000          <1>     mov ecx, ffBlock_size
   399 000036C0 F3A4                <1>     rep movsb   ;Copy the whole block. 
   400                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   401 000036C2 31C0                <1>     xor eax, eax    ;Return value
   402 000036C4 E9D53C0000          <1>     jmp extGoodExit ;Exit well
   403                              <1> 
   404                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   405                              <1> ;Input: DTA has the find first block from the previous search
   406 000036C9 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   407 000036D0 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   408 000036D7 B92B000000          <1>     mov ecx, ffBlock_size
   409 000036DC F3A4                <1>     rep movsb
   410 000036DE FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   411 000036E4 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   412 000036EB 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   413 000036F2 E8E7D6FFFF          <1>     call findNextMain
   414 000036F7 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   415                              <1> 
   416                              <1> renameFile:        ;ah = 56h
   417                              <1> ;Input: rdx -> Filespec to rename
   418                              <1> ;       rdi -> New filespec
   419                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   420 000036F9 4889D6              <1>     mov rsi, rdx
   421 000036FC BB16000000          <1>     mov ebx, dirInclusive
   422 00003701 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   423 00003708 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   424 0000370B 880D(FC060000)      <1>     mov byte [searchAttr], cl
   425                              <1>     ;Step 0, verify both paths provided are valid
   426 00003711 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   427 00003716 7249                <1>     jc .accDenError
   428 00003718 56                  <1>     push rsi
   429 00003719 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   430 0000371C E84A000000          <1>     call .renamePathCheck
   431 00003721 5E                  <1>     pop rsi
   432 00003722 723D                <1>     jc .accDenError
   433                              <1>     ;Now we canonicalise the filenames to make life easy
   434 00003724 56                  <1>     push rsi
   435 00003725 4889FE              <1>     mov rsi, rdi
   436 00003728 488D3D(9E050000)    <1>     lea rdi, buffer2
   437 0000372F E86EDBFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   438 00003734 5E                  <1>     pop rsi
   439 00003735 722A                <1>     jc .accDenError
   440                              <1>     ;Now test if first file exists.
   441 00003737 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   442 0000373D 8F05(26060000)      <1>     pop qword [fname2Ptr]
   443 00003743 488D3D(1E050000)    <1>     lea rdi, buffer1
   444 0000374A E853DBFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   445 0000374F 7210                <1>     jc .accDenError 
   446 00003751 E858030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   447 00003756 0F82503C0000        <1>     jc extErrExit
   448 0000375C E93D3C0000          <1>     jmp extGoodExit
   449                              <1> .accDenError:
   450 00003761 B805000000          <1>     mov eax, errAccDen
   451 00003766 E9413C0000          <1>     jmp extErrExit
   452                              <1> .renamePathCheck:
   453                              <1> ;Checks if the pathspec in rsi is OK
   454 0000376B 56                  <1>     push rsi
   455 0000376C 57                  <1>     push rdi
   456 0000376D E84B390000          <1>     call checkPathspecOK
   457 00003772 5F                  <1>     pop rdi
   458 00003773 5E                  <1>     pop rsi
   459 00003774 730D                <1>     jnc .pathOk     ;Path ok 
   460 00003776 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   461                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   462 00003778 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   463 0000377F 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   464                              <1> .badPath:
   465 00003781 F9                  <1>     stc
   466                              <1>     return
    13                              <2> %%_ret:
    14 00003782 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> .pathOk:
   468 00003783 F8                  <1>     clc
   469                              <1>     return
    13                              <2> %%_ret:
    14 00003784 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> getSetFileDateTime:;ah = 57h
   472 00003785 3C01                <1>     cmp al, 1
   473 00003787 760A                <1>     jbe .oksubfun
   474 00003789 B801000000          <1>     mov eax, errInvFnc
   475 0000378E E9193C0000          <1>     jmp extErrExit
   476                              <1> .oksubfun:
   477 00003793 E8C7150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   478 00003798 0F820E3C0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   479 0000379E 3C01                <1>     cmp al, 1
   480 000037A0 741C                <1>     je .setTimeDate
   481                              <1>     ;Here we get the Time/Date
   482 000037A2 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   483 000037A6 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   484 000037AA E82E370000          <1>     call getUserRegs
   485 000037AF 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   486 000037B3 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   487 000037B7 31C0                <1>     xor eax, eax
   488 000037B9 E9E03B0000          <1>     jmp extGoodExit
   489                              <1> .setTimeDate:
   490                              <1>     ;Here we set the Time/Date
   491 000037BE 66894F13            <1>     mov word [rdi + sft.wTime], cx
   492 000037C2 66895715            <1>     mov word [rdi + sft.wDate], dx
   493 000037C6 31C0                <1>     xor eax, eax
   494 000037C8 E9D13B0000          <1>     jmp extGoodExit
   495                              <1> 
   496                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   497                              <1> ;Uses the clock to do it's bidding
   498                              <1> ;cx = file attribute 
   499                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   500                              <1> ;       filename
   501 000037CD 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   502 000037D2 740A                <1>     jz .validAttribs
   503 000037D4 B805000000          <1>     mov eax, errAccDen
   504 000037D9 E9CE3B0000          <1>     jmp extErrExit
   505                              <1> .validAttribs:
   506 000037DE 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   507 000037E2 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   508 000037E5 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   509 000037EA 31C0                <1>     xor eax, eax
   510 000037EC 4889D7              <1>     mov rdi, rdx
   511 000037EF F2AE                <1>     repne scasb
   512 000037F1 85C9                <1>     test ecx, ecx
   513 000037F3 750A                <1>     jnz .nullFnd
   514                              <1>     ;Bad path
   515 000037F5 B803000000          <1>     mov eax, errPnf
   516 000037FA E9AD3B0000          <1>     jmp extErrExit
   517                              <1> .nullFnd:
   518 000037FF 48FFCF              <1>     dec rdi
   519 00003802 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   520 00003806 E8F3370000          <1>     call swapPathSeparator
   521 0000380B 7403                <1>     jz .pathsepFnd
   522                              <1>     ;If no pathsep found, force one at rdi
   523 0000380D B05C                <1>     mov al, "\"
   524 0000380F AA                  <1>     stosb
   525                              <1> .pathsepFnd:
   526 00003810 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   527                              <1> .fileCreateLoop:
   528 00003813 55                  <1>     push rbp
   529 00003814 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   530 00003819 5D                  <1>     pop rbp
   531 0000381A 0FB7C1              <1>     movzx eax, cx
   532 0000381D 0FB7D2              <1>     movzx edx, dx
   533 00003820 C1E010              <1>     shl eax, 10h
   534 00003823 09D0                <1>     or eax, edx  ;Add the bits of dx too
   535 00003825 E831000000          <1>     call .writeNybbles
   536 0000382A 31C0                <1>     xor eax, eax
   537 0000382C AA                  <1>     stosb   ;Store terminating null
   538 0000382D 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   539 00003830 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   540 00003833 55                  <1>     push rbp
   541 00003834 E85C000000          <1>     call createNewFile
   542 00003839 5D                  <1>     pop rbp
   543 0000383A 0F835E3B0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   544 00003840 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   545 00003847 3D05000000          <1>     cmp eax, errAccDen
   546 0000384C 74C5                <1>     je .fileCreateLoop
   547 0000384E 3D50000000          <1>     cmp eax, errFilExist
   548 00003853 74BE                <1>     je .fileCreateLoop
   549 00003855 F9                  <1>     stc
   550 00003856 E9513B0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   551                              <1> .writeNybbles:
   552                              <1> ;Write the nybbles of eax at rdi
   553 0000385B B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   554                              <1> .wnLp:
   555 00003860 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   556 00003863 50                  <1>     push rax
   557 00003864 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   558 00003869 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   559 0000386E 3D39000000          <1>     cmp eax, '9'
   560 00003873 7605                <1>     jbe .notExtDigit
   561 00003875 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   562                              <1> .notExtDigit:
   563 0000387A AA                  <1>     stosb   ;Store the digit
   564 0000387B 58                  <1>     pop rax
   565 0000387C FFC9                <1>     dec ecx
   566 0000387E 75E0                <1>     jnz .wnLp
   567                              <1>     return
    13                              <2> %%_ret:
    14 00003880 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> 
   569                              <1> .uniqueTimeGet:
   570 00003881 E89AF3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   571 00003886 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   572 0000388D 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   573                              <1>     return
    13                              <2> %%_ret:
    14 00003894 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> createNewFile:     ;ah = 5Bh
   576 00003895 51                  <1>     push rcx    ;Save file attributes on stack
   577 00003896 488D0DE8070000      <1>     lea rcx, createNewMain
   578 0000389D C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   579 000038A4 E9C9F9FFFF          <1>     jmp openFileHdl.openCommon
   580                              <1> 
   581                              <1> lockUnlockFile:    ;ah = 5Ch
   582                              <1> ;ah = 5Ch
   583                              <1> ;al = subfunction
   584                              <1> ;       00h lock region of file
   585                              <1> ;       01h unlock region of file
   586                              <1> ;ebx = file handle
   587                              <1> ;ecx = start offset of region within file
   588                              <1> ;edi = length of region in bytes
   589 000038A9 3C01                <1>     cmp al, 1
   590 000038AB 7757                <1>     ja .badFunction
   591 000038AD 57                  <1>     push rdi
   592 000038AE E8C6140000          <1>     call derefSFTPtr
   593 000038B3 730B                <1>     jnc .validHdl
   594 000038B5 58                  <1>     pop rax ;Discard the qword on the stack
   595 000038B6 B806000000          <1>     mov eax, errBadHdl
   596 000038BB E9EC3A0000          <1>     jmp extErrExit
   597                              <1> .validHdl:
   598 000038C0 84C0                <1>     test al, al ;Check if al = 0
   599 000038C2 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   600 000038C3 7424                <1>     jz .lockFileRegion
   601 000038C5 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   602 000038CB 740B                <1>     jz .unlockShare ;Jump if a local file only
   603 000038CD 50                  <1>     push rax
   604 000038CE B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   605 000038D3 CD2F                <1>     int 2Fh
   606 000038D5 5B                  <1>     pop rbx
   607 000038D6 EB06                <1>     jmp short .exitSelect
   608                              <1> .unlockShare:
   609 000038D8 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   610                              <1> .exitSelect:
   611 000038DE 0F82C83A0000        <1>     jc extErrExit
   612 000038E4 E9B53A0000          <1>     jmp extGoodExit
   613                              <1> .lockFileRegion:
   614 000038E9 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   615 000038EF 740B                <1>     jz .lockShare   ;Jump if a local file only
   616 000038F1 50                  <1>     push rax
   617 000038F2 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   618 000038F7 CD2F                <1>     int 2Fh
   619 000038F9 5B                  <1>     pop rbx
   620 000038FA EBE2                <1>     jmp short .exitSelect
   621                              <1> .lockShare:
   622 000038FC FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   623 00003902 EBDA                <1>     jmp short .exitSelect
   624                              <1> .badFunction:
   625 00003904 B801000000          <1>     mov eax, errInvFnc
   626 00003909 668905(0B040000)    <1>     mov word [errorExCde], ax
   627 00003910 E9973A0000          <1>     jmp extErrExit
   628                              <1> 
   629                              <1> setHandleCount:    ;ah = 67h
   630                              <1> ;Input: bx = Size of new file handle table for process
   631                              <1> ;Output: CF=NC -> Ok to make more handles
   632                              <1> ;        CF=CY -> ax = Error code
   633                              <1> ;Five cases to consider:
   634                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   635                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   636                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   637                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   638                              <1> ;   Special case below, cannot be enacted directly by caller.
   639                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   640 00003915 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   641 00003918 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   642 0000391F 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   643 00003923 7765                <1>     ja short .moreHdlsReq
   644 00003925 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   645 0000392A 771A                <1>     ja short .reduceExternal
   646                              <1>     ;Here if 20 handles or less requested
   647 0000392C 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   648 00003932 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   649 00003934 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   650 00003936 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   651                              <1> .exitGood:
   652 0000393C E95D3A0000          <1>     jmp extGoodExit
   653                              <1> .exitBad:
   654 00003941 E9663A0000          <1>     jmp extErrExit
   655                              <1> .reduceExternal:
   656                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   657                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   658                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   659                              <1> ; and failing that, it will free it and then allocate a new block.
   660 00003946 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   661 0000394A E8E8000000          <1>     call .checkOpenHandles
   662 0000394F 72F0                <1>     jc short .exitBad
   663                              <1>     ;Recall ebx has the numebr of handles here
   664 00003951 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   665 00003956 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   666 0000395A EBE0                <1>     jmp short .exitGood
   667                              <1> .reduceFree:
   668                              <1> ;Entered once we know that we have an external block
   669                              <1> ;Now we close all handles above JFT size
   670 0000395C 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   671 00003960 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   672 00003963 E8CF000000          <1>     call .checkOpenHandles
   673 00003968 72D7                <1>     jc short .exitBad
   674 0000396A BB14000000          <1>     mov ebx, dfltJFTsize
   675 0000396F 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   676                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   677 00003971 E8B8000000          <1>     call .copyBlock
   678                              <1>     ;Now we can free the old block
   679 00003976 4989F0              <1>     mov r8, rsi
   680 00003979 53                  <1>     push rbx
   681 0000397A E8391B0000          <1>     call freeMemory
   682 0000397F 5B                  <1>     pop rbx
   683 00003980 72BF                <1>     jc short .exitBad
   684 00003982 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   685 00003986 31C0                <1>     xor eax, eax
   686                              <1> .exitGood2:
   687 00003988 EBB2                <1>     jmp short .exitGood
   688                              <1> .moreHdlsReq:
   689 0000398A 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   690 00003990 7507                <1>     jne short .okToExpand
   691 00003992 B801000000          <1>     mov eax, errInvFnc
   692                              <1> .exitBad2:
   693 00003997 EBA8                <1>     jmp short .exitBad
   694                              <1> .okToExpand:
   695                              <1> ;Need to check if we are external and reallocating. 
   696                              <1> ;   If we are, can we realloc or do we need to free and save?
   697 00003999 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   698 0000399F 762E                <1>     jbe short .moreFromJFT
   699 000039A1 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   700 000039A5 E83C000000          <1>     call .reallocBlock
   701 000039AA 7390                <1>     jnc short .exitGood
   702 000039AC E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   703 000039B1 728E                <1>     jc short .exitBad
   704 000039B3 4989F0              <1>     mov r8, rsi ;Free the source block
   705 000039B6 53                  <1>     push rbx
   706 000039B7 57                  <1>     push rdi    ;Save the new pointer here
   707 000039B8 55                  <1>     push rbp
   708 000039B9 E8FA1A0000          <1>     call freeMemory
   709 000039BE 5D                  <1>     pop rbp
   710 000039BF 5F                  <1>     pop rdi
   711 000039C0 5B                  <1>     pop rbx
   712 000039C1 7317                <1>     jnc short .freeOk ;Free'd the original block
   713 000039C3 50                  <1>     push rax    ;Save error code on stack
   714 000039C4 4989F8              <1>     mov r8, rdi ;Free the new block
   715 000039C7 E8EC1A0000          <1>     call freeMemory
   716 000039CC 58                  <1>     pop rax
   717 000039CD EBC8                <1>     jmp short .exitBad2
   718                              <1> .moreFromJFT:
   719 000039CF 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   720 000039D3 E826000000          <1>     call .getBlock
   721 000039D8 72BD                <1>     jc short .exitBad2
   722                              <1> .freeOk:
   723 000039DA 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   724 000039DE 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   725 000039E2 31C0                <1>     xor eax, eax
   726 000039E4 EBA2                <1>     jmp short .exitGood2
   727                              <1> .reallocBlock:
   728                              <1> ;Input:
   729                              <1> ;   rsi -> Source block to reallocate
   730                              <1> ;   ebx = Number of handles
   731                              <1> ;   rbp -> Current PSP
   732                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   733                              <1> ;                 ebx = Number of handles
   734                              <1> ;        CF=CY => Error, EAX has error code
   735 000039E6 56                  <1>     push rsi ;Save external pointer on stack
   736 000039E7 53                  <1>     push rbx    ;Save number of handles on stack
   737 000039E8 55                  <1>     push rbp
   738 000039E9 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   739 000039EF C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   740 000039F2 4989F0              <1>     mov r8, rsi
   741 000039F5 E8C61B0000          <1>     call reallocMemory
   742 000039FA 5D                  <1>     pop rbp
   743 000039FB 5B                  <1>     pop rbx
   744 000039FC 5E                  <1>     pop rsi ;Get external pointer back in rsi
   745                              <1>     return
    13                              <2> %%_ret:
    14 000039FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   746                              <1> .getBlock:
   747                              <1> ;rsi -> Source block for copy 
   748                              <1> ;ebx = Number of new handles
   749                              <1> ;Output: rsi and ebx as before
   750                              <1> ;        rdi -> New block
   751                              <1> ;IF CF=CY, bad exit
   752 000039FE 53                  <1>     push rbx    ;bx has the number of handles we want
   753 000039FF 56                  <1>     push rsi
   754 00003A00 55                  <1>     push rbp
   755 00003A01 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   756 00003A07 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   757 00003A0A 89D9                <1>     mov ecx, ebx
   758 00003A0C C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   759 00003A0F 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   760 00003A10 E89F180000          <1>     call allocateMemory ;Allocate memory 
   761 00003A15 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   762 00003A16 5D                  <1>     pop rbp ;Get the PSP pointer back
   763 00003A17 5E                  <1>     pop rsi ;Get the source pointer back
   764 00003A18 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   765                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A19 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   766 00003A1B 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   767 00003A1E 57                  <1>     push rdi
   768 00003A1F 31C0                <1>     xor eax, eax
   769 00003A21 FFC8                <1>     dec eax
   770 00003A23 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   771 00003A25 5F                  <1>     pop rdi
   772 00003A26 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   773 00003A28 E801000000          <1>     call .copyBlock ;Copy all the handles over
   774                              <1>     return
    13                              <2> %%_ret:
    14 00003A2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> .copyBlock:
   776                              <1> ;Input: rsi -> Source block
   777                              <1> ;       rdi -> Destination block
   778                              <1> ;       ecx = Number of handles to copy
   779 00003A2E 56                  <1>     push rsi
   780 00003A2F 57                  <1>     push rdi
   781 00003A30 51                  <1>     push rcx
   782 00003A31 F3A4                <1>     rep movsb
   783 00003A33 59                  <1>     pop rcx
   784 00003A34 5F                  <1>     pop rdi
   785 00003A35 5E                  <1>     pop rsi
   786                              <1>     return
    13                              <2> %%_ret:
    14 00003A36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   787                              <1> .checkOpenHandles:
   788                              <1> ;Checks for open handles in the range that is to be freed.
   789                              <1> ;If any found, error exit
   790                              <1> ;Input: rsi -> Where to start searching
   791 00003A37 56                  <1>     push rsi
   792 00003A38 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   793                              <1> .cohLoop:
   794 00003A3C 803EFF              <1>     cmp byte [rsi], -1
   795 00003A3F 7509                <1>     jne .checkOpenHandlesBadExit
   796 00003A41 48FFC6              <1>     inc rsi
   797 00003A44 FFC9                <1>     dec ecx
   798 00003A46 75F4                <1>     jnz .cohLoop
   799 00003A48 5E                  <1>     pop rsi
   800                              <1>     return
    13                              <2> %%_ret:
    14 00003A49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> .checkOpenHandlesBadExit:
   802 00003A4A B804000000          <1>     mov eax, errNhl
   803 00003A4F F9                  <1>     stc
   804 00003A50 5E                  <1>     pop rsi
   805                              <1>     return
    13                              <2> %%_ret:
    14 00003A51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   806                              <1> 
   807                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   808                              <1>     ;Input: bx = File to flush
   809 00003A52 E808130000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   810 00003A57 0F824F390000        <1>     jc extErrExit
   811 00003A5D E856110000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   812                              <1>     ;Now we check if the device is a char, disk or net file and commit
   813 00003A62 E811000000          <1>     call commitMain
   814 00003A67 0F823F390000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   815                              <1> .exitOk:
   816 00003A6D 30C0                <1>     xor al, al
   817 00003A6F E869340000          <1>     call getUserRegs
   818 00003A74 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   819                              <1>     return
    13                              <2> %%_ret:
    14 00003A77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> 
   821                              <1> ;-----------------------------------:
   822                              <1> ;       Main File IO Routines       :
   823                              <1> ;-----------------------------------:
   824                              <1> commitMain:
   825                              <1> ;Commits the current SFT 
   826 00003A78 E843110000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   827 00003A7D 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   828 00003A81 F7C3C0000000        <1>     test ebx, devCharDev | blokFileNoFlush
   829                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A87 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   830 00003A89 F7C300800000        <1>     test ebx, devRedirDev
   831 00003A8F 7408                <1>     jz .notNet
   832                              <1>     ;Commit file net redir call and exit
   833 00003A91 B807110000          <1>     mov eax, 1107h
   834 00003A96 CD2F                <1>     int 2Fh
   835                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003A98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> .notNet:
   837 00003A99 E8C3380000          <1>     call dosCrit1Enter
   838 00003A9E E837E6FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   839 00003AA3 B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   840 00003AA8 E841090000          <1>     call flushFile      ;Now file gets flushed and exit critical section
   841                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003AAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   842                              <1>     
   843                              <1> renameMain:
   844                              <1> ;Now, creates a special find first block for the source file
   845                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   846                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   847                              <1> ; block. 
   848                              <1> ;Then we search for that file name specifically (again), replacing 
   849                              <1> ; the filename portion of the destination buffer. If it exists or the 
   850                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   851                              <1> ; the new directory entry and delete the original file. 
   852                              <1> ;Input:
   853                              <1> ; filenamePtr1 -> Source path + filename pattern
   854                              <1> ; filenamePtr2 -> New path + filename pattern
   855                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   856                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   857 00003AAE 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   858 00003AB5 E896330000          <1>     call testCDSNet ;CF=NC => Not net
   859 00003ABA 7308                <1>     jnc .notNet
   860 00003ABC B811110000          <1>     mov eax, 1111h
   861 00003AC1 CD2F                <1>     int 2Fh
   862                              <1>     return
    13                              <2> %%_ret:
    14 00003AC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   863                              <1> .notNet:
   864                              <1> ;First check if both drives are on the same disk
   865 00003AC4 8A05(1E050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   866 00003ACA 8A25(9E050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   867 00003AD0 38E0                <1>     cmp al, ah
   868 00003AD2 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   869 00003AD4 B811000000          <1>     mov eax, errDevUnk
   870 00003AD9 F9                  <1>     stc
   871                              <1>     return
    13                              <2> %%_ret:
    14 00003ADA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> .sameDrive:
   873                              <1> ;Now we check if either pathsepc is simply X:\,0
   874                              <1> ; If they are, return fail as we cannot rename the root dir
   875 00003ADB E881380000          <1>     call dosCrit1Enter
   876 00003AE0 8B05(1E050000)      <1>     mov eax, dword [buffer1]
   877 00003AE6 30C0                <1>     xor al, al
   878 00003AE8 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   879 00003AED 750B                <1>     jne .checkpath2
   880                              <1> .accDen:
   881 00003AEF B805000000          <1>     mov eax, errAccDen
   882                              <1> .errorExit:
   883 00003AF4 F9                  <1>     stc
   884 00003AF5 E900030000          <1>     jmp .exit2
   885                              <1> .checkpath2:
   886 00003AFA 8B05(9E050000)      <1>     mov eax, dword [buffer2]
   887 00003B00 30C0                <1>     xor al, al
   888 00003B02 3D003A5C00          <1>     cmp eax, 005C3A00h
   889 00003B07 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   890                              <1>     ;Now ensure hte two paths are not equal
   891 00003B09 488D35(1E050000)    <1>     lea rsi, buffer1
   892 00003B10 488D3D(9E050000)    <1>     lea rdi, buffer2
   893 00003B17 E875350000          <1>     call compareFileNames
   894 00003B1C 74D1                <1>     jz .accDen
   895                              <1> ;Now we find first the source file
   896 00003B1E 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   897 00003B25 4889F7              <1>     mov rdi, rsi
   898 00003B28 E8ADD7FFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   899 00003B2D 0F82C7020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   900 00003B33 488D35(5A060000)    <1>     lea rsi, curDirCopy
   901 00003B3A 488D3D(C2070000)    <1>     lea rdi, renameDir
   902 00003B41 B904000000          <1>     mov ecx, fatDirEntry_size/8
   903 00003B46 F348A5              <1>     rep movsq   ;Copy directory over
   904 00003B49 488D3D(97070000)    <1>     lea rdi, renameFFBlk
   905 00003B50 E834D6FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   906                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   907                              <1>     ; dir for any CDS.
   908 00003B55 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
   909 00003B5C 7447                <1>     jz .notDirCheck
   910 00003B5E 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   911 00003B65 57                  <1>     push rdi
   912 00003B66 E8EF340000          <1>     call strlen ;Get asciiz length in ecx
   913 00003B6B 5B                  <1>     pop rbx
   914 00003B6C FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   915 00003B6E 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   916 00003B75 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   917                              <1> .dirCheck:
   918 00003B7C 4889DF              <1>     mov rdi, rbx
   919 00003B7F 51                  <1>     push rcx    ;Save the char count to check!
   920 00003B80 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   921 00003B81 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   922 00003B83 AC                  <1>     lodsb   ;Get the last char to check in al
   923 00003B84 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   924 00003B85 59                  <1>     pop rcx
   925 00003B86 7512                <1>     jne .neqDir
   926                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
   927 00003B88 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   928 00003B8A 7404                <1>     je .curDirChangeErr
   929 00003B8C 84C0                <1>     test al, al
   930 00003B8E 750A                <1>     jne .neqDir ;Proceed as normal if not null
   931                              <1> .curDirChangeErr:
   932                              <1>     ;Here we are trying to change a current directory. Fail it!
   933                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
   934                              <1>     ; we initially had programmed in (with access denied error instead).
   935 00003B90 B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
   936 00003B95 E95AFFFFFF          <1>     jmp .errorExit
   937                              <1> .neqDir:
   938 00003B9A 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
   939 00003BA1 FFCA                <1>     dec edx
   940 00003BA3 75D7                <1>     jnz .dirCheck
   941                              <1> .notDirCheck:
   942                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   943 00003BA5 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   944 00003BAA 31C0                <1>     xor eax, eax
   945 00003BAC 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   946 00003BB3 F2AE                <1>     repne scasb   ;Search for terminating null
   947 00003BB5 FD                  <1>     std ;Go backwards now, to find the path sep
   948 00003BB6 B05C                <1>     mov al, "\"
   949 00003BB8 F2AE                <1>     repne scasb   ;Now rsi points one before
   950 00003BBA FC                  <1>     cld ;Go normal ways now
   951 00003BBB 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   952 00003BC2 57                  <1>     push rdi
   953 00003BC3 4889FE              <1>     mov rsi, rdi
   954 00003BC6 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
   955 00003BCD E82FD5FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   956 00003BD2 5F                  <1>     pop rdi
   957 00003BD3 57                  <1>     push rdi    ;Save rdi on stack again
   958 00003BD4 488D35(B5070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   959                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   960 00003BDB 48A5                <1>     movsq
   961 00003BDD A5                  <1>     movsd
   962 00003BDE A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   963 00003BDF 5F                  <1>     pop rdi ;rdi points to first char position
   964 00003BE0 E860020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   965 00003BE5 0F8209FFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   966                              <1>     ;Else return the pattern back to its original position
   967 00003BEB 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   968 00003BF2 E852D5FFFF          <1>     call FCBToAsciiz
   969                              <1>     ;Delete the original directory entry
   970 00003BF7 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   971 00003BFB FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   972 00003BFD 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   973 00003C01 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   974 00003C03 8B0D(A4070000)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   975 00003C09 C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   976 00003C0C 91                  <1>     xchg ecx, eax
   977 00003C0D F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   978 00003C0F 89C3                <1>     mov ebx, eax
   979 00003C11 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   980 00003C17 E85ACEFFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   981 00003C1C 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   982 00003C1F E8CDCDFFFF          <1>     call getBufForDir ;Get buffer pointer in rbx
   983 00003C24 0F82DB010000        <1>     jc .badExit
   984 00003C2A 488D741320          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   985                              <1>     ;rsi points to the file entry
   986 00003C2F 8A05(08070000)      <1>     mov al, byte [delChar]
   987 00003C35 8806                <1>     mov byte [rsi], al
   988 00003C37 E850CCFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   989                              <1> 
   990                              <1>     ;Now we use the destination filename pattern to build the new filename
   991 00003C3C 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   992 00003C43 31C0                <1>     xor eax, eax
   993 00003C45 B943000000          <1>     mov ecx, 67
   994 00003C4A F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   995                              <1> .findPattern:
   996 00003C4C 48FFCF              <1>     dec rdi
   997 00003C4F 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   998 00003C52 75F8                <1>     jne .findPattern
   999                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
  1000 00003C54 C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
  1001 00003C5B 807FFF3A            <1>     cmp byte [rdi - 1], ":"
  1002 00003C5F 750D                <1>     jne .notRoot
  1003                              <1>     ;The root dir always exists on a volume so can skip the check.
  1004 00003C61 48FFC7              <1>     inc rdi ;Goto the first char of the filename
  1005 00003C64 57                  <1>     push rdi
  1006 00003C65 800D(FE060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
  1007 00003C6C EB29                <1>     jmp short .skipCheck
  1008                              <1> .notRoot:
  1009 00003C6E AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
  1010 00003C6F 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
  1011                              <1>     ;Now check if the parent directory exists for the destination
  1012 00003C70 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
  1013 00003C71 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
  1014 00003C77 488D35(9E050000)    <1>     lea rsi, buffer2
  1015 00003C7E 4889F7              <1>     mov rdi, rsi
  1016 00003C81 E84DD6FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
  1017 00003C86 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1018 00003C8C 5F                  <1>     pop rdi
  1019 00003C8D 0F8272010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
  1020 00003C93 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1021                              <1> .skipCheck:
  1022                              <1>     ;rdi now points to the first char of the pattern
  1023 00003C97 4889FE              <1>     mov rsi, rdi
  1024 00003C9A 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1025 00003CA1 E85BD4FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1026                              <1>     ;Ensure the destination pattern is not all question marks
  1027 00003CA6 813D(E5060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1027 00003CAE 3F3F                <1>
  1028 00003CB0 7524                <1>     jne .validRenPattern
  1029 00003CB2 813D(E9060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1029 00003CBA 3F3F                <1>
  1030 00003CBC 7518                <1>     jne .validRenPattern
  1031 00003CBE 66813D(ED060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1031 00003CC6 3F                  <1>
  1032 00003CC7 750D                <1>     jne .validRenPattern
  1033 00003CC9 803D(EF060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1034 00003CD0 0F842A010000        <1>     je .bad ;Access denied buddy ol' pal
  1035                              <1> .validRenPattern:
  1036                              <1>     ;curDirCopy has information for the destination directory file we will 
  1037                              <1>     ; write to. The cluster points to the directory file itself to search in
  1038                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1039                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1040 00003CD6 488D35(C2070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1041 00003CDD 488D3D(D9060000)    <1>     lea rdi, fcbName
  1042 00003CE4 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1043 00003CE5 B90B000000          <1>     mov ecx, 11
  1044 00003CEA F3A4                <1>     rep movsb
  1045 00003CEC 5F                  <1>     pop rdi
  1046 00003CED 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1047                              <1> .mnnLp:
  1048 00003CF4 AC                  <1>     lodsb
  1049 00003CF5 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1050 00003CF7 7404                <1>     je .mnnWC   ;Skip overriding this char
  1051 00003CF9 AA                  <1>     stosb   ;Store new char and go forwards by one
  1052 00003CFA 48FFCF              <1>     dec rdi ;Now go back by one
  1053                              <1> .mnnWC:
  1054 00003CFD 48FFC7              <1>     inc rdi ;Goto next letter
  1055 00003D00 FFC1                <1>     inc ecx
  1056 00003D02 81F90B000000        <1>     cmp ecx, 11
  1057 00003D08 75EA                <1>     jne .mnnLp
  1058 00003D0A 488D35(D9060000)    <1>     lea rsi, fcbName
  1059 00003D11 488D3D(C2070000)    <1>     lea rdi, renameDir
  1060 00003D18 B90B000000          <1>     mov ecx, 11
  1061 00003D1D F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1062 00003D1F 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1063 00003D20 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1064 00003D21 488D35(D9060000)    <1>     lea rsi, fcbName
  1065 00003D28 E81CD4FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1066 00003D2D 488B35(26060000)    <1>     mov rsi, qword [fname2Ptr]
  1067 00003D34 4889F7              <1>     mov rdi, rsi
  1068 00003D37 E89ED5FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1069 00003D3C 0F83C3000000        <1>     jnc .badExit   ;If the file exists, then error
  1070 00003D42 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
  1071 00003D47 0F85B8000000        <1>     jne .badExit
  1072                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1073                              <1>     ;If the parent is root, deal with special case
  1074 00003D4D 488D1D(5A060000)    <1>     lea rbx, curDirCopy
  1075 00003D54 F605(FE060000)02    <1>     test byte [fileFDflg], 2
  1076 00003D5B C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1077 00003D62 7416                <1>     jz .notRoot2
  1078 00003D64 488D35(D9060000)    <1>     lea rsi, fcbName
  1079 00003D6B 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1080 00003D72 48A5                <1>     movsq
  1081 00003D74 A5                  <1>     movsd
  1082 00003D75 A4                  <1>     movsb
  1083 00003D76 31C0                <1>     xor eax, eax    ;Dir to search
  1084 00003D78 EB13                <1>     jmp short .getSpace
  1085                              <1> .notRoot2:
  1086 00003D7A 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1087 00003D81 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1088 00003D88 C1E210              <1>     shl edx, 10h
  1089 00003D8B 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1090                              <1> .getSpace:
  1091 00003D8D E877000000          <1>     call .searchForDirSpace
  1092 00003D92 726C                <1>     jc .bad
  1093                              <1> ;dir Entry found, rsi points to space in buffer
  1094 00003D94 4889F7              <1>     mov rdi, rsi
  1095 00003D97 488D35(C2070000)    <1>     lea rsi, renameDir
  1096 00003D9E B904000000          <1>     mov ecx, fatDirEntry_size/8
  1097 00003DA3 F348A5              <1>     rep movsq   ;Copy dir over
  1098 00003DA6 E8E1CAFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1099                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1100                              <1>     ;If it does, we find next. If not, we exit
  1101 00003DAB B03F                <1>     mov al, "?"
  1102 00003DAD 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1103 00003DB4 E8A1320000          <1>     call strlen ;Get in rcx to get the length of the string
  1104 00003DB9 F2AE                <1>     repne scasb
  1105 00003DBB 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1106 00003DBD B90B000000          <1>     mov ecx, 11
  1107 00003DC2 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1108 00003DC9 F2AE                <1>     repne scasb
  1109 00003DCB 7525                <1>     jne .exit
  1110                              <1>     ;Here we gotta do a find next now!
  1111 00003DCD FF35(17040000)      <1>     push qword [currentDTA]
  1112 00003DD3 488D3D(97070000)    <1>     lea rdi, renameFFBlk
  1113 00003DDA 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1114 00003DE1 E8F8CFFFFF          <1>     call findNextMain
  1115 00003DE6 8F05(17040000)      <1>     pop qword [currentDTA]
  1116 00003DEC 0F83E4FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1117                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1118                              <1> .exit:
  1119 00003DF2 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1120 00003DF3 E823C9FFFF          <1>     call flushAllBuffersForDPB
  1121 00003DF8 720B                <1>     jc .badExit
  1122                              <1> .exit2: ;Bad exit before we push qword on stack 
  1123 00003DFA E86C350000          <1>     call dosCrit1Exit
  1124                              <1>     return
    13                              <2> %%_ret:
    14 00003DFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1125                              <1> .bad:
  1126 00003E00 B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1127                              <1> .badExit:
  1128 00003E05 F9                  <1>     stc
  1129 00003E06 5F                  <1>     pop rdi
  1130 00003E07 EBF1                <1>     jmp short .exit2
  1131                              <1> 
  1132                              <1> .searchForDirSpace:
  1133                              <1> ;Input: eax = First directory to search 
  1134 00003E09 8905(84070000)      <1>     mov dword [dirClustA], eax
  1135 00003E0F 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1136 00003E11 668905(88070000)    <1>     mov word [dirSect], ax
  1137 00003E18 8905(8A070000)      <1>     mov dword [dirEntry], eax
  1138 00003E1E E82AE2FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1139 00003E23 731C                <1>     jnc .dirEntryFnd
  1140 00003E25 813D(80070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1140 00003E2D 0000                <1>
  1141 00003E2F 7412                <1>     je .searchBad ;Set CF and exit
  1142 00003E31 E80AE3FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1143 00003E36 720B                <1>     jc .searchBad
  1144 00003E38 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1145 00003E3D 7404                <1>     je .searchBad
  1146                              <1>     ;Else eax = Newly allocated cluster
  1147 00003E3F EBC8                <1>     jmp short .searchForDirSpace
  1148                              <1> .dirEntryFnd:
  1149 00003E41 F8                  <1>     clc
  1150                              <1>     return
    13                              <2> %%_ret:
    14 00003E42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> .searchBad:
  1152 00003E43 F9                  <1>     stc
  1153                              <1>     return
    13                              <2> %%_ret:
    14 00003E44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1154                              <1> 
  1155                              <1> 
  1156                              <1> checkNoOpenHandlesForShareAction:
  1157                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1158                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1159                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1160                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1161                              <1> ; proceeding.
  1162                              <1> ;
  1163                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1164                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1165                              <1> ;       currDirCopy = Directory entry for the file
  1166 00003E45 E800350000          <1>     call dosPushRegs    ;Save the context completely
  1167 00003E4A 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1168 00003E51 740C                <1>     jz .noOpenFileCheckHandler
  1169 00003E53 FF15(BF000000)      <1>     call qword [openFileCheck]
  1170 00003E59 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1171 00003E5B 7447                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1172 00003E5D EB4C                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1173                              <1> .noOpenFileCheckHandler:
  1174                              <1>     ;The following closes most recent shared handles referencing it
  1175                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1176                              <1>     ; mode and if there is precisely 1  
  1177 00003E5F FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1178                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1179 00003E65 488D3D(180D0000)    <1>     lea rdi, scratchSFT
  1180 00003E6C 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  1181 00003E73 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1182 00003E78 C605(07070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1183                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1184 00003E7F 57                  <1>     push rdi    ;Save the SFT ptr
  1185 00003E80 E8D2020000          <1>     call buildSFTEntry
  1186 00003E85 5F                  <1>     pop rdi
  1187 00003E86 7223                <1>     jc .errorMain
  1188 00003E88 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1189 00003E8D 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1190 00003E93 E8503D0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1191 00003E98 7211                <1>     jc .errorMain
  1192 00003E9A 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1193 00003E9F E8DB3C0000          <1>     call closeShareCallWrapper
  1194                              <1> .exit:
  1195 00003EA4 E88A340000          <1>     call dosPopRegs
  1196 00003EA9 F8                  <1>     clc
  1197                              <1>     return
    13                              <2> %%_ret:
    14 00003EAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1198                              <1> .errorMain:
  1199 00003EAB E883340000          <1>     call dosPopRegs
  1200 00003EB0 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1201 00003EB5 F9                  <1>     stc
  1202                              <1>     return
    13                              <2> %%_ret:
    14 00003EB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1203                              <1> 
  1204                              <1> outerDeleteMain:
  1205                              <1> ;Internal current dir must be populated with dir entry
  1206                              <1> ; and internal DOS directory variables now point to this entry.
  1207                              <1> ;Checks if the file is a char device or read only.
  1208                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1209                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1210                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1211                              <1> ;         CF=NC => File deleted
  1212 00003EB7 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1213 00003EBE E88D2F0000          <1>     call testCDSNet ;CF=NC => Not net
  1214 00003EC3 7308                <1>     jnc .notNet
  1215 00003EC5 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1216 00003ECA CD2F                <1>     int 2Fh
  1217                              <1>     return
    13                              <2> %%_ret:
    14 00003ECC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1218                              <1> .notNet:
  1219 00003ECD B805000000          <1>     mov eax, errAccDen  
  1220 00003ED2 F605(65060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1221 00003ED9 7548                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1222 00003EDB E845000000          <1>     call deleteMain
  1223 00003EE0 7241                <1>     jc .exitBad
  1224                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1225 00003EE2 B03F                <1>     mov al, "?"
  1226 00003EE4 488D3D(D9060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1227 00003EEB B90B000000          <1>     mov ecx, 11
  1228 00003EF0 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1229 00003EF2 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1230 00003EF4 F8                  <1>     clc
  1231                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00003EF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1232                              <1> .serverWCloop:
  1233 00003EF6 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1234 00003EFC 488D3D(2F060000)    <1>     lea rdi, dosffblock
  1235 00003F03 57                  <1>     push rdi    ;Push this address onto the stack
  1236 00003F04 E880D2FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1237 00003F09 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1238 00003F0F E8CACEFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1239 00003F14 8F05(17040000)      <1>     pop qword [currentDTA]
  1240                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F1A 72D9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1241 00003F1C E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1242 00003F21 73D3                <1>     jnc .serverWCloop     
  1243                              <1> ;Stop as soon as an error occurs
  1244                              <1> .exitBad:
  1245 00003F23 F9                  <1>     stc
  1246                              <1>     return
    13                              <2> %%_ret:
    14 00003F24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1247                              <1> 
  1248                              <1> deleteMain:
  1249                              <1> ;Now unlink FAT chain and then clear directory entry
  1250                              <1> ;Get the start cluster of this file
  1251                              <1> ;Input:
  1252                              <1> ; The file must have NOT be read-only.
  1253                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1254                              <1> ;     - curDirCopy must be filled with the file directory information
  1255                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1256                              <1> ;Output: CF=NC => Success, 
  1257                              <1> ; If not net CDS:
  1258                              <1> ;   rsi keeps pointing to directory entry.
  1259                              <1> ;   al = First char of the file that was deleted.
  1260                              <1> ;        CF=CY => Error
  1261                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1262 00003F25 E81BFFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1263                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F2A 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1264 00003F2C 52                  <1>     push rdx
  1265 00003F2D 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1266 00003F34 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1267 00003F3B C1E010              <1>     shl eax, 10h
  1268 00003F3E 09D0                <1>     or eax, edx ;Add low bits to eax
  1269 00003F40 5A                  <1>     pop rdx
  1270 00003F41 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1271 00003F43 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1272 00003F45 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1273 00003F4C E8DECCFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1274 00003F51 721B                <1>     jc .exitBad
  1275                              <1> .skipUnlink:
  1276                              <1>     ;Now replace the first char of the directory to 0E5h
  1277                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1278 00003F53 E808E1FFFF          <1>     call getDiskDirectoryEntry
  1279 00003F58 7214                <1>     jc .exitBad
  1280 00003F5A 8A05(08070000)      <1>     mov al, byte [delChar]
  1281 00003F60 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1282 00003F62 E825C9FFFF          <1>     call markBufferDirty
  1283                              <1>     ;CF must be clear
  1284 00003F67 E8AFC7FFFF          <1>     call flushAllBuffersForDPB
  1285                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F6C 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1286                              <1> .exitBad:
  1287 00003F6E F9                  <1>     stc
  1288                              <1>     return
    13                              <2> %%_ret:
    14 00003F6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1289                              <1> 
  1290                              <1> openMain:
  1291                              <1> ;Input: ax (formally al) = Open mode
  1292                              <1> ;       [currentSFT] = SFT we are building
  1293                              <1> ;       [workingCDS] = CDS of drive to access
  1294                              <1> ;       [workingDPB] = DPB of drive to access
  1295                              <1> ;Ouput: CF=CY => Error, eax has error code
  1296 00003F70 E8D3000000          <1>     call setOpenMode
  1297                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F75 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1298 00003F77 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1299 00003F7E 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1300 00003F85 30E4                <1>     xor ah, ah  ;al has the access mode
  1301 00003F87 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1302 00003F8E 750A                <1>     jne .notNet
  1303                              <1> .redirOpen:
  1304 00003F90 50                  <1>     push rax    ;Push open mode onto stack
  1305 00003F91 B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1306 00003F96 CD2F                <1>     int 2Fh
  1307 00003F98 58                  <1>     pop rax
  1308                              <1>     return
    13                              <2> %%_ret:
    14 00003F99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1309                              <1> .notNet:
  1310 00003F9A 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1311 00003FA0 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1312 00003FA2 E8BA330000          <1>     call dosCrit1Enter
  1313                              <1> ;Ensure our disk attributes permit opening
  1314 00003FA7 8A15(65060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1315 00003FAD F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1316 00003FB0 752C                <1>     jnz .accDenExit
  1317 00003FB2 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1318 00003FB5 7439                <1>     jz short .openFile      ;If not, proceed.
  1319                              <1> ;Else, we check if we are permitted to open this file.
  1320 00003FB7 0FB74E02            <1>     movzx ecx, word [rsi + sft.wOpenMode]   ;Get the user-set open mode
  1321 00003FBB F7C100800000        <1>     test ecx, FCBopenedFile  ;We consider FCBs here for future net use 
  1322 00003FC1 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1323 00003FC3 89CA                <1>     mov edx, ecx
  1324 00003FC5 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1325 00003FCB 81FA70000000        <1>     cmp edx, netFCBShare ;Is this a net server FCB open?
  1326 00003FD1 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1327 00003FD3 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1328 00003FD9 80F900              <1>     cmp cl, ReadAccess  ;Are we asking for more than read?
  1329 00003FDC 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1330                              <1> .accDenExit:
  1331 00003FDE B805000000          <1>     mov eax, errAccDen
  1332 00003FE3 EB27                <1>     jmp short .errorExit
  1333                              <1> .fcbOpen:
  1334                              <1> ;FCB calls are depreciated, so this is lined up for removal already. Kept in
  1335                              <1> ; the event that we introduce a 64-bit FCB equivalent interface for net use.
  1336                              <1> ;Since FCB calls cannot set the open mode, we set the FCB open of a RO file
  1337                              <1> ; to only allow reading of the file. 
  1338 00003FE5 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1339 00003FEA 66894E02            <1>     mov word [rsi + sft.wOpenMode], cx
  1340 00003FEE 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1341                              <1> .openFile:
  1342 00003FF0 C605(07070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1343 00003FF7 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1344 00003FFE E854010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1345 00004003 7207                <1>     jc .errorExit
  1346 00004005 E8DE3B0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1347 0000400A 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1348                              <1> .errorExit:
  1349 0000400C E85A330000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1350                              <1>     return
    13                              <2> %%_ret:
    14 00004011 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1351                              <1> .fileSharedOk:
  1352 00004012 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1353 00004017 E8A40B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1354 0000401C FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1355 00004022 E844330000          <1>     call dosCrit1Exit
  1356                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1357 00004027 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1358 0000402E E8DBE2FFFF          <1>     call openSFT
  1359 00004033 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1360 00004039 7501                <1>     jnz .netOpen
  1361                              <1>     return
    13                              <2> %%_ret:
    14 0000403B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1362                              <1> .netOpen:
  1363 0000403C 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1364 00004043 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1365                              <1>     return
    13                              <2> %%_ret:
    14 00004047 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1366                              <1> 
  1367                              <1> setOpenMode:
  1368                              <1> ;Input: al = Open mode for the file open
  1369 00004048 8805(FD060000)      <1>     mov byte [fileOpenMd], al
  1370 0000404E 53                  <1>     push rbx
  1371                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1372 0000404F F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1373 00004056 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1374 00004058 88C3                <1>     mov bl, al
  1375 0000405A 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1376 0000405D 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1    
  1377 00004064 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1378 00004066 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1379 00004069 7405                <1>     je .s2
  1380                              <1> .s1:
  1381 0000406B 80FB40              <1>     cmp bl, denyNoneShare
  1382 0000406E 770D                <1>     ja .somBad
  1383                              <1> .s2:
  1384 00004070 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1385 00004072 80E30F              <1>     and bl, 0Fh
  1386 00004075 80FB02              <1>     cmp bl, RWAccess
  1387 00004078 7703                <1>     ja .somBad
  1388 0000407A 5B                  <1>     pop rbx
  1389 0000407B F8                  <1>     clc
  1390                              <1>     return
    13                              <2> %%_ret:
    14 0000407C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1391                              <1> .somBad:
  1392 0000407D 5B                  <1>     pop rbx
  1393 0000407E B80C000000          <1>     mov eax, errAccCde
  1394 00004083 F9                  <1>     stc
  1395                              <1>     return
    13                              <2> %%_ret:
    14 00004084 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1396                              <1> 
  1397                              <1> createNewMain:
  1398                              <1> ;Input: ax (formally al) = File attributes
  1399                              <1> ;       [currentSFT] = SFT we are building
  1400                              <1> ;       [workingCDS] = CDS of drive to access
  1401                              <1> ;       [workingDPB] = DPB of drive to access
  1402 00004085 0FB6C0              <1>     movzx eax, al
  1403 00004088 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1404 0000408A F605(04070000)FF    <1>     test byte [fileExist], -1
  1405 00004091 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1406 00004093 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1407 00004098 F9                  <1>     stc
  1408                              <1>     return
    13                              <2> %%_ret:
    14 00004099 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1409                              <1> createMain:
  1410                              <1> ;Input: ax (formally al) = File attributes
  1411                              <1> ;       [currentSFT] = SFT we are building
  1412                              <1> ;       [workingCDS] = CDS of drive to access
  1413                              <1> ;       [workingDPB] = DPB of drive to access
  1414 0000409A 0FB6C0              <1>     movzx eax, al
  1415                              <1> .createNewEP:
  1416 0000409D A880                <1>     test al, 80h    ; Is this invalid bit set?
  1417 0000409F 750C                <1>     jnz .invalidAttrib
  1418 000040A1 A808                <1>     test al, volLabelFile    ;Is this a volume label?
  1419 000040A3 7402                <1>     jz .notVol
  1420 000040A5 B008                <1>     mov al, volLabelFile ;If the vol bit is set, set the whole thing to volume only
  1421                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1422                              <1> .notVol:
  1423 000040A7 0C20                <1>     or al, archiveFile   ;Set archive bit
  1424 000040A9 A850                <1>     test al, directoryFile | charFile   ;Invalid bits?
  1425 000040AB 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1426                              <1> .invalidAttrib:
  1427 000040AD B805000000          <1>     mov eax, errAccDen
  1428 000040B2 F9                  <1>     stc
  1429                              <1>     return
    13                              <2> %%_ret:
    14 000040B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1430                              <1> .validAttr:
  1431                              <1> ;Check we are not creating a directory.
  1432 000040B4 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1433 000040BB 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1434 000040C2 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1435 000040C9 750A                <1>     jne .diskFile
  1436 000040CB 50                  <1>     push rax    ;Save the new attributes
  1437 000040CC B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1438 000040D1 CD2F                <1>     int 2Fh
  1439 000040D3 5B                  <1>     pop rbx
  1440                              <1>     return
    13                              <2> %%_ret:
    14 000040D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1441                              <1> .diskFile:
  1442 000040D5 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1443 000040DB 740A                <1>     jz .hardFile
  1444 000040DD 50                  <1>     push rax    ;Save the new attributes
  1445 000040DE B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1446 000040E3 CD2F                <1>     int 2Fh
  1447 000040E5 5B                  <1>     pop rbx
  1448                              <1>     return
    13                              <2> %%_ret:
    14 000040E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1449                              <1> .hardFile:
  1450 000040E7 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1451 000040ED C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1452 000040F4 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1453 000040FB E861320000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1454 00004100 57                  <1>     push rdi    ;Save the sft handle
  1455 00004101 50                  <1>     push rax    ;Save the file attributes on stack
  1456 00004102 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1457 00004107 E84B000000          <1>     call buildSFTEntry
  1458 0000410C 5B                  <1>     pop rbx ;Pop the file attribute off
  1459 0000410D 5F                  <1>     pop rdi
  1460 0000410E 7241                <1>     jc .errorExit
  1461 00004110 E8D33A0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1462 00004115 723A                <1>     jc .errorExit
  1463 00004117 F6C308              <1>     test bl, volLabelFile    ;Was the attribute a volume label?
  1464 0000411A 7420                <1>     jz .notVolLabel    ;If not vol label, skip.
  1465                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1466 0000411C 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1467 00004123 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1468 00004125 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1469 00004127 8805(E9190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1470 0000412D E82F320000          <1>     call dosCrit1Enter
  1471 00004132 E8822A0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1472 00004137 E82F320000          <1>     call dosCrit1Exit
  1473                              <1> .notVolLabel:
  1474 0000413C B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1475 00004141 FF15(2F010000)      <1>     call qword [updateDirShare]
  1476 00004147 E81F320000          <1>     call dosCrit1Exit
  1477 0000414C E9D6FEFFFF          <1>     jmp openDriverMux
  1478                              <1> .errorExit:
  1479 00004151 E815320000          <1>     call dosCrit1Exit
  1480                              <1>     return
    13                              <2> %%_ret:
    14 00004156 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1481                              <1> buildSFTEntry:
  1482                              <1> ;Called in a critical section.
  1483                              <1> ;Input: al = Open mode
  1484                              <1> ;       STACK: File attributes if creating a file
  1485                              <1> ;       [currentSFT] = SFT we are building
  1486                              <1> ;       [workingCDS] = CDS of drive to access
  1487                              <1> ;       [workingDPB] = DPB of drive to access
  1488                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1489                              <1> ;
  1490                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1491                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1492                              <1> ;        If CF=CY: - Return fail
  1493                              <1> ;
  1494                              <1> ;
  1495                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1496                              <1> ;   If not, create disk entry.
  1497                              <1> ;Check if the device was a char device by checking curDirCopy.
  1498                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1499                              <1> 
  1500                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1501                              <1> ; to start of file fields of the SFT
  1502 00004157 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1503 00004158 4889E5              <1>     mov rbp, rsp
  1504 0000415B 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1505                              <1> ;Set the open mode
  1506 00004162 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1507                              <1> ;Get current time
  1508 00004166 E8B5EAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1509 0000416B E89BEBFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1510 00004170 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1511                              <1> ;Set current Owner
  1512 00004173 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1513 0000417A 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1514                              <1> ;Set file pointer to first byte
  1515 0000417E C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1516                              <1> ;Common fields set
  1517 00004185 F605(07070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1518 0000418C 0F84CA010000        <1>     jz .openProc
  1519                              <1>     ;Here if Creating a file.
  1520                              <1>     ;First check if we are handling a volume label
  1521 00004192 48F7451008000000    <1>     test qword [rbp + 10h], volLabelFile  ;Are we creating a volume label?
  1522 0000419A 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1523 0000419C 56                  <1>     push rsi
  1524 0000419D 57                  <1>     push rdi
  1525 0000419E 55                  <1>     push rbp
  1526 0000419F C605(5F040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1527 000041A6 E869CDFFFF          <1>     call searchDir  ;Searches the root dir
  1528 000041AB C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1529 000041B2 5D                  <1>     pop rbp
  1530 000041B3 5F                  <1>     pop rdi
  1531 000041B4 5E                  <1>     pop rsi
  1532 000041B5 0F83F8010000        <1>     jnc .bad ;If CF=NC, then we have found a vollbl, fail.
  1533 000041BB 3C12                <1>     cmp al, errNoFil
  1534 000041BD 0F85F0010000        <1>     jne .bad ;If not "no file found", error out
  1535                              <1> .notVolLbl:
  1536 000041C3 F605(04070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1537 000041CA 0F84D7000000        <1>     jz .createFile
  1538 000041D0 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1539 000041D7 0F8588010000        <1>     jnz .charDev
  1540 000041DD F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1541 000041E4 0F85C9010000        <1>     jnz .bad    ;Make sure we are not recreating a directory as a file!
  1542                              <1>     ;Here disk file exists, so recreating the file.
  1543 000041EA 55                  <1>     push rbp
  1544 000041EB FF35(32070000)      <1>     push qword [currentSFT]
  1545 000041F1 E82FFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1546 000041F6 8F05(32070000)      <1>     pop qword [currentSFT]
  1547 000041FC 5D                  <1>     pop rbp
  1548 000041FD 0F82B0010000        <1>     jc .bad
  1549                              <1>     ;al has the char for the filename
  1550                              <1>     ;Sets vars for the sector/offset into the sector
  1551 00004203 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1552 0000420A 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1553 0000420C 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1554                              <1>     ;al has file attributes.
  1555 00004210 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1556 00004213 31C0                <1>     xor eax, eax
  1557                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1558 00004215 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1559 00004219 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1560 0000421D 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1561 00004220 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1562 00004223 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1563 00004226 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1564 00004229 57                  <1>     push rdi    ;Save SFT pointer
  1565 0000422A 488D3D(5A060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1566 00004231 B920000000          <1>     mov ecx, fatDirEntry_size
  1567 00004236 F3A4                <1>     rep movsb
  1568 00004238 E84FC6FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1569 0000423D 5F                  <1>     pop rdi
  1570                              <1> .createCommon:  ;rdi must point to the current SFT 
  1571                              <1>     ;Now populate the remaining SFT fields 
  1572 0000423E 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1573 00004245 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1574 00004248 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1575 0000424B 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1576 00004252 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1577 00004256 0FB705(4E070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1578 0000425D C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1579 00004260 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1580 00004263 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1581 00004266 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1582 00004269 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1583 0000426D 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1584 00004271 C1E210              <1>     shl edx, 10h
  1585 00004274 09D0                <1>     or eax, edx
  1586 00004276 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1587                              <1> 
  1588 00004279 31C0                <1>     xor eax, eax
  1589                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1590 0000427B 8A05(09070000)      <1>     mov al, byte [workingDrv]
  1591 00004281 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1592 00004283 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1593 00004287 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
  1594 0000428E 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1595                              <1>     ;Last thing, copy the filename over
  1596                              <1>     ;Now save the name
  1597                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1598 00004292 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1599 00004296 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1600 0000429D 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1601 0000429F 66A5                <1>     movsw
  1602 000042A1 A4                  <1>     movsb
  1603                              <1>     ;SFT filled
  1604 000042A2 E903010000          <1>     jmp .exit
  1605                              <1> .createFile:
  1606                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1607                              <1>     ;rsi points to current sft entry
  1608 000042A7 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1609                              <1>     ;Clear out the dir entry
  1610 000042AE 57                  <1>     push rdi
  1611 000042AF B904000000          <1>     mov ecx, 4
  1612 000042B4 31C0                <1>     xor eax, eax
  1613 000042B6 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1614 000042B9 5F                  <1>     pop rdi
  1615                              <1>     ;Copy the FCB name over    
  1616 000042BA 56                  <1>     push rsi
  1617 000042BB 57                  <1>     push rdi
  1618 000042BC B90B000000          <1>     mov ecx, 11
  1619 000042C1 488D35(D9060000)    <1>     lea rsi, fcbName
  1620 000042C8 F3A4                <1>     rep movsb   ;Move over the FCB name
  1621 000042CA 5F                  <1>     pop rdi
  1622 000042CB 5E                  <1>     pop rsi
  1623                              <1> 
  1624 000042CC 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1625                              <1>     ;al has file attributes.
  1626 000042D0 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1627 000042D3 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1628 000042D6 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1629 000042D9 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1630 000042DC 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1631                              <1> .searchForDirSpace:
  1632 000042E2 8905(84070000)      <1>     mov dword [dirClustA], eax
  1633 000042E8 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1634 000042EA 668905(88070000)    <1>     mov word [dirSect], ax
  1635 000042F1 8905(8A070000)      <1>     mov dword [dirEntry], eax
  1636 000042F7 57                  <1>     push rdi
  1637 000042F8 E850DDFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1638 000042FD 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1639 000042FE 7328                <1>     jnc .dirEntryFnd
  1640 00004300 813D(80070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1640 00004308 0000                <1>
  1641 0000430A 0F84A3000000        <1>     je .bad ;Set CF and exit
  1642 00004310 E82BDEFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1643 00004315 0F828F000000        <1>     jc .exit
  1644 0000431B 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1645 00004320 0F848D000000        <1>     je .bad
  1646                              <1>     ;Else eax = Newly allocated cluster
  1647 00004326 EBBA                <1>     jmp short .searchForDirSpace
  1648                              <1> .dirEntryFnd:
  1649 00004328 4887FE              <1>     xchg rdi, rsi
  1650 0000432B B904000000          <1>     mov ecx, 4
  1651 00004330 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1652 00004333 E854C5FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1653 00004338 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1654 0000433F E9FAFEFFFF          <1>     jmp .createCommon
  1655                              <1> .open:
  1656                              <1> ;curdircopy has a copy of the disk file directory
  1657                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1658 00004344 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1659 0000434B 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1660                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1661 00004352 E809DDFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1662 00004357 E9E2FEFFFF          <1>     jmp .createCommon
  1663                              <1> .openProc:
  1664                              <1>     ;Here if Opening a file. 
  1665                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1666                              <1>     ;This is taken care of by openMain.
  1667 0000435C F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute],dirCharDev
  1668 00004363 74DF                <1>     jz .open
  1669                              <1> .charDev:
  1670 00004365 488B05(5A060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1671 0000436C E83A2E0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1672 00004371 7307                <1>     jnc .notBadCharDevName
  1673 00004373 B805000000          <1>     mov eax, errAccDen
  1674 00004378 EB30                <1>     jmp short .exit ;CF already set
  1675                              <1> .notBadCharDevName:
  1676 0000437A 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1677 00004381 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1678 00004385 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1679 00004389 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1680 0000438C 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1681 0000438F 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1682 00004393 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1683 0000439A 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1684 0000439E B820202020          <1>     mov eax, "    "
  1685 000043A3 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1686 000043A7 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1687                              <1> .exit:
  1688 000043AA E8270A0000          <1>     call writeThroughBuffersForHandle
  1689 000043AF 7207                <1>     jc .bad2
  1690 000043B1 5D                  <1>     pop rbp
  1691                              <1>     return
    13                              <2> %%_ret:
    14 000043B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1692                              <1> .bad:   ;Set Access Denied
  1693 000043B3 B805000000          <1>     mov eax, errAccDen
  1694                              <1> .bad2:  ;Error propagating error code
  1695 000043B8 F9                  <1>     stc
  1696 000043B9 5D                  <1>     pop rbp
  1697                              <1>     return
    13                              <2> %%_ret:
    14 000043BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1698                              <1> closeMain: ;Int 2Fh AX=1201h
  1699                              <1> ;Gets the directory entry for a file
  1700                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1701                              <1> ;If CF=CY on return: Error, return error with al = error code
  1702                              <1> ;Preserve all regs except eax and rdi
  1703                              <1> ; If CF=NC on return: eax = Unknown
  1704                              <1> ;                     rdi = current SFT ptr
  1705 000043BB 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1706 000043C2 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1707 000043C6 F7C300800000        <1>     test ebx, devRedirDev ;Is this a network drive?
  1708 000043CC 7408                <1>     jz .physical
  1709                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1710 000043CE B806110000          <1>     mov eax, 1106h  ;Make request
  1711 000043D3 CD2F                <1>     int 2Fh ;Beep!
  1712                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 000043D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1713                              <1> .physical:  
  1714                              <1> ; We make a request to the dev dir to close the device
  1715                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1716 000043D6 E8862F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1717 000043DB E8FADCFFFF          <1>     call updateSFTDateTimeFields
  1718 000043E0 E8E2090000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1719 000043E5 50                  <1>     push rax
  1720 000043E6 53                  <1>     push rbx
  1721 000043E7 E893370000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1722 000043EC 5B                  <1>     pop rbx
  1723 000043ED 58                  <1>     pop rax
  1724                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1725                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1726                              <1> ;Closes the handle properly if only one reference to file remains.
  1727                              <1> ;Input: ax = Initial open handle count
  1728                              <1> ;       bx = attribute byte from the SFT
  1729                              <1> ;       rdi -> Current SFT
  1730 000043EE 50                  <1>     push rax    ;Save the handle count for later
  1731 000043EF 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
  1732 000043F4 7573                <1>     jnz .notDiskBitsSet
  1733 000043F6 E80FDDFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1734 000043FB B805000000          <1>     mov eax, errAccDen
  1735 00004400 7268                <1>     jc .accDenExit
  1736 00004402 56                  <1>     push rsi    ; -> Buffer dir entry
  1737 00004403 57                  <1>     push rdi    ; -> SFT ptr
  1738 00004404 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1739 00004408 E8B9CCFFFF          <1>     call findInBuffer.nameCompare
  1740 0000440D 5F                  <1>     pop rdi     ; -> SFT ptr
  1741 0000440E 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1742 0000440F 7408                <1>     jz .dirEntryForUs
  1743                              <1> .badFileFound:
  1744 00004411 B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1745 00004416 F9                  <1>     stc
  1746 00004417 EB51                <1>     jmp short .accDenExit
  1747                              <1> .dirEntryForUs:
  1748 00004419 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1749 0000441D 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1750 00004421 F6D0                <1>     not al  ;Reverse the bits
  1751 00004423 20C8                <1>     and al, cl  ;These should be equal
  1752 00004425 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1753 00004427 75E8                <1>     jnz .badFileFound
  1754 00004429 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1755 0000442C 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1756 0000442F 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1757 00004433 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1758 00004437 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1759 0000443B 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1760 0000443F 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax    ;And update final field
  1761 00004443 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1762 00004446 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1763 0000444A C1E810              <1>     shr eax, 10h
  1764 0000444D 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1765 00004451 E836C4FFFF          <1>     call markBufferDirty
  1766 00004456 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]
  1767 0000445D E8CBC2FFFF          <1>     call flushAllBuffersForDrive
  1768 00004462 B805000000          <1>     mov eax, errAccDen
  1769 00004467 7201                <1>     jc .accDenExit
  1770                              <1> .notDiskBitsSet:
  1771 00004469 F8                  <1>     clc
  1772                              <1> .accDenExit:
  1773 0000446A 9C                  <1>     pushfq
  1774 0000446B E8A7DEFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1775 00004470 9D                  <1>     popfq
  1776 00004471 59                  <1>     pop rcx ;Get back the initial open handle count
  1777 00004472 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1778 00004475 9C                  <1>     pushfq
  1779 00004476 FFC9                <1>     dec ecx ;Decrement count
  1780 00004478 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1781 0000447A 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1782                              <1> .exit:
  1783 0000447D E8E92E0000          <1>     call dosCrit1Exit
  1784 00004482 9D                  <1>     popfq
  1785                              <1>     return
    13                              <2> %%_ret:
    14 00004483 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1786                              <1> 
  1787                              <1> readBytes:
  1788                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1789                              <1> ;Input: ecx = Number of bytes to read
  1790                              <1> ;Output: ecx = Number of bytes read
  1791                              <1> ;Number of bytes read 
  1792                              <1> ;If CF=CY, return with error code in ax
  1793 00004484 E837070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1794 00004489 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1795 0000448D 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1796 0000448F 3C01                <1>     cmp al, WriteAccess
  1797 00004491 7509                <1>     jne .readable
  1798 00004493 B805000000          <1>     mov eax, errAccDen
  1799 00004498 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1800 0000449A F9                  <1>     stc
  1801                              <1>     return
    13                              <2> %%_ret:
    14 0000449B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1802                              <1> .readable:
  1803 0000449C E861070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1804 000044A1 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1805 000044A4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1806 000044AA 740A                <1>     jz .notRedir
  1807 000044AC B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1808 000044B1 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1809                              <1>     return 
    13                              <2> %%_ret:
    14 000044B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1810                              <1> .exitOk:
  1811 000044B4 F8                  <1>     clc
  1812                              <1>     return 
    13                              <2> %%_ret:
    14 000044B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1813                              <1> .notRedir:
  1814 000044B6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1815 000044BC 7510                <1>     jnz readCharDev
  1816 000044BE E89E2E0000          <1>     call dosCrit1Enter
  1817 000044C3 E89E010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1818 000044C8 E89E2E0000          <1>     call dosCrit1Exit
  1819                              <1>     return 
    13                              <2> %%_ret:
    14 000044CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1820                              <1> readCharDev:
  1821                              <1> ;rdi points to sft for char dev to read
  1822                              <1> ;ecx has the number of bytes to transfer
  1823                              <1> ;Vars have been set up and DTA has the transfer address
  1824                              <1> ;Returns in ecx, the actual bytes transferred
  1825                              <1> ;If CF=CY, return with error code in ax
  1826 000044CE C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1827 000044D5 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1828 000044D9 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1829 000044E0 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1830 000044E3 0F84DA020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1831 000044E9 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1832 000044EC 7407                <1>     jz .notNul
  1833                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1834                              <1>     ;NUL never transfers bytes 
  1835 000044EE 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1836 000044F0 E9CE020000          <1>     jmp readExitOk    ;Goto exit
  1837                              <1> .notNul:
  1838 000044F5 F6C320              <1>     test bl, charDevBinary
  1839 000044F8 0F857F000000        <1>     jnz .binary
  1840                              <1>     ;Here if the device is in ASCII mode
  1841 000044FE F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1842 00004501 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1843                              <1> .consoleInput:
  1844                              <1>     ;Console input here
  1845 00004507 E8FDE2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1846                              <1>     ;Get current offset into buffer (if one exists)
  1847 0000450C 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1848 00004513 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1849 00004516 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1850 00004518 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1851 0000451F 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1852                              <1>     ;Else, reset the buffer
  1853 00004521 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1853 00004529 FF                  <1>
  1854                              <1> .oldBuf:
  1855                              <1> ;Preserve the dta and number of chars to tfr
  1856 0000452A 51                  <1>     push rcx
  1857 0000452B 57                  <1>     push rdi
  1858 0000452C 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1859 00004533 E8F1E2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1860 00004538 5F                  <1>     pop rdi
  1861 00004539 59                  <1>     pop rcx
  1862 0000453A 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1863 00004541 803E1A              <1>     cmp byte [rsi], EOF
  1864 00004544 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1865 00004546 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1866 00004549 B00A                <1>     mov al, LF
  1867 0000454B E854DEFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1868 00004550 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1869 00004552 EB18                <1>     jmp short .exit
  1870                              <1> .tfrBuf:
  1871 00004554 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1872 00004555 AA                  <1>     stosb
  1873 00004556 3C0D                <1>     cmp al, CR 
  1874 00004558 7503                <1>     jne .noCRLF
  1875 0000455A C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1876                              <1> .noCRLF:
  1877 0000455D 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1878 0000455F E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1879 00004561 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1880                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1881 00004563 E83CDEFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1882 00004568 31F6                <1>     xor esi, esi
  1883 0000456A 0C01                <1>     or al, 1    ;Set ZF = NZ
  1884                              <1> .exit:
  1885 0000456C E8B0E2FFFF          <1>     call vConRetDriver
  1886 00004571 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1887 00004578 E946020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1888                              <1> 
  1889                              <1> .binary:
  1890                              <1>     ;Setup registers for transfer
  1891 0000457D 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1892 00004580 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1893                              <1>     ;ecx has the number of bytes to transfer directly
  1894 00004583 E8DE270000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1895 00004588 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1896 0000458F E8B4240000          <1>     call goDriver   ;Make the request
  1897 00004594 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1898 00004597 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1899 0000459E F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1900 000045A4 7422                <1>     jz .binNoError
  1901                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1902 000045A6 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1903 000045A8 E85F1E0000          <1>     call charDevErr   ;ah = has part of the error 
  1904                              <1>     ;al now has the response
  1905 000045AD 3C00                <1>     cmp al, critIgnore
  1906 000045AF 7417                <1>     je .binNoError ;Simply proceed as normal
  1907 000045B1 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1908 000045B4 3C03                <1>     cmp al, critFail
  1909 000045B6 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1910                              <1>     ;Fallthrough here for fail!
  1911                              <1> .failExit:
  1912 000045B8 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1913 000045BF 31C9                <1>     xor ecx, ecx
  1914 000045C1 B805000000          <1>     mov eax, errAccDen
  1915 000045C6 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1916                              <1>     return
    13                              <2> %%_ret:
    14 000045C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1917                              <1> .binNoError:
  1918                              <1>     ;Get number of bytes transferred into 
  1919 000045C8 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1920 000045CE F7D8                <1>     neg eax ;make it into -eax
  1921 000045D0 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1922                              <1>     ;ecx now has bytes left to transfer
  1923 000045D4 50                  <1>     push rax    ;Save value on stack
  1924 000045D5 31C0                <1>     xor eax, eax ;Set ZF
  1925 000045D7 FFC0                <1>     inc eax ;Clear ZF
  1926 000045D9 58                  <1>     pop rax ;Get back the original value
  1927 000045DA E9E4010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1928                              <1> .generalASCII:
  1929                              <1>     ;ecx has bytes to transfer here
  1930                              <1>     ;Setup registers for transfer
  1931 000045DF 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1932 000045E2 51                  <1>     push rcx
  1933 000045E3 B901000000          <1>     mov ecx, 1  ;Get one char
  1934 000045E8 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1935 000045EB E876270000          <1>     call primReqReadSetup   ;Setup request
  1936 000045F0 59                  <1>     pop rcx
  1937                              <1>     ;rbx now has request header ptr
  1938 000045F1 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1939                              <1> .asciiReadChar:
  1940 000045F8 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1941 000045FB E88DE1FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1942 00004600 E843240000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1943 00004605 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1944 0000460C F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1945 00004612 7420                <1>     jz .asciiNoError
  1946 00004614 B486                <1>     mov ah, critCharDev | critData
  1947 00004616 E8F11D0000          <1>     call charDevErr    ;Call Int 24h
  1948                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1949 0000461B C705(D7040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1949 00004623 0000                <1>
  1950 00004625 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1951 00004628 3C03                <1>     cmp al, critFail
  1952 0000462A 748C                <1>     je .failExit
  1953 0000462C 3C01                <1>     cmp al, critRetry
  1954 0000462E 74C8                <1>     je .asciiReadChar
  1955                              <1>     ;Ignore here, pretend NULL CHAR was read
  1956 00004630 30C0                <1>     xor al, al
  1957 00004632 EB15                <1>     jmp short .asciiIgnoreEP
  1958                              <1> .asciiNoError:
  1959                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1960                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1961                              <1> ;Preserve RBX, RSI
  1962                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1963 00004634 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1964 00004637 813D(D7040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1964 0000463F 0000                <1>
  1965 00004641 0F857C010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1966 00004647 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1967                              <1> .asciiIgnoreEP:
  1968 00004649 48FF05(CF040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1969 00004650 48FFC7              <1>     inc rdi ;Also advance register pointer
  1970 00004653 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1971 00004655 0F8468010000        <1>     je readExitOk
  1972 0000465B 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1973 0000465D E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1974                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1975 0000465F FEC0                <1>     inc al  ;make ZF=NZ
  1976 00004661 E95D010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1977                              <1> 
  1978                              <1> readDiskFile:
  1979                              <1> ;rdi = Current SFT
  1980                              <1> ;rbp = WorkingDPB
  1981                              <1> ;ecx = Bytes to transfer
  1982 00004666 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1983 0000466D C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1984                              <1>     ;We have the following vars setup:
  1985                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1986                              <1>     ;currClustF
  1987                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1988                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1989 00004674 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1990 00004677 85D2                <1>     test edx, edx
  1991 00004679 0F8444010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1992 0000467F 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1993 00004685 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1994 00004688 8905(54070000)      <1>     mov dword [currClustD], eax
  1995 0000468E 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1996 00004690 0F842D010000        <1>     jz readExitOk
  1997 00004696 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1998 0000469B 0F8422010000        <1>     jz readExitOk   
  1999 000046A1 8B0D(78070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2000                              <1>     ;Check if we have opened a volume label (should never happen)
  2001 000046A7 F6470408            <1>     test byte [rdi + sft.bFileAttrib], volLabelFile    ;If we try read from vollbl
  2002 000046AB 7407                <1>     jz .shareCheck
  2003 000046AD B805000000          <1>     mov eax, errAccDen
  2004 000046B2 F9                  <1>     stc
  2005                              <1>     return
    13                              <2> %%_ret:
    14 000046B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2006                              <1> .shareCheck:
  2007                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2008 000046B4 E8CD340000          <1>     call retryShareIODelay
  2009 000046B9 7308                <1>     jnc .shareOk
  2010 000046BB E863350000          <1>     call shareCheckReadLockViolation
  2011 000046C0 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2012                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 000046C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2013                              <1> .shareOk:
  2014 000046C3 E810C0FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2015 000046C8 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2016 000046CA 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2017 000046CC 7426                <1>     jz .skipWalk
  2018                              <1> .goToCurrentCluster:
  2019 000046CE E8A5C5FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2020 000046D3 0F82DB000000        <1>     jc .badExit   ;This can only return Fail
  2021 000046D9 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2022 000046DE 0F84DF000000        <1>     je readExitOk ;Exit with no bytes transferred
  2023 000046E4 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2024 000046EA FFCA                <1>     dec edx ;Decrement counter
  2025 000046EC 75E0                <1>     jnz .goToCurrentCluster
  2026 000046EE 8B05(54070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2027                              <1> .skipWalk:
  2028 000046F4 E87DC3FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2029                              <1>     ;Now we add the offset to this
  2030 000046F9 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2031 00004700 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2032 00004703 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2033                              <1> ;Main
  2034                              <1> .mainRead:
  2035 0000470A F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2036 00004711 7407                <1>     jz .mainReadNoBreak
  2037 00004713 50                  <1>     push rax
  2038 00004714 E874E0FFFF          <1>     call checkBreak
  2039 00004719 58                  <1>     pop rax
  2040                              <1> .mainReadNoBreak:
  2041 0000471A E8D7C2FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2042 0000471F 0F828F000000        <1>     jc .badExit
  2043 00004725 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2044 00004729 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2045 00004730 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2046                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2047                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2048                              <1>     ; 3) Bytes left to read from Request
  2049                              <1> 
  2050 00004733 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2051 00004736 2B0D(67070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2052 0000473C 8B1D(7C070000)      <1>     mov ebx, dword [tfrCntr]
  2053 00004742 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2054 00004744 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2055 00004747 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2056 0000474B 662B1D(65070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2057 00004752 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2058 00004754 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2059                              <1>     
  2060 00004757 57                  <1>     push rdi
  2061 00004758 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2062 0000475F 51                  <1>     push rcx
  2063 00004760 F3A4                <1>     rep movsb
  2064 00004762 59                  <1>     pop rcx
  2065 00004763 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2066 00004769 290D(7C070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2067 0000476F 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2068 00004776 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2069 0000477C 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2070 00004780 31D2                <1>     xor edx, edx    ;Zero rdx
  2071 00004782 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2072 00004784 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2073 0000478B 5F                  <1>     pop rdi
  2074 0000478C 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2075 00004792 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2076 00004794 742D                <1>     jz readExitOk ;Exit if so!
  2077 00004796 E83EC4FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2078 0000479B 7217                <1>     jc .badExit
  2079                              <1>     ;If ZF=ZE then currClustF has last cluster
  2080 0000479D 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2081                              <1>     ;Else repeat
  2082                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2083 0000479F 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2083 000047A7 00                  <1>
  2084 000047A8 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2085 000047AF E956FFFFFF          <1>     jmp .mainRead
  2086                              <1> .badExit:
  2087                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2088                              <1>     ; we need to update the SFT before returning
  2089 000047B4 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2090 000047BA 30C0                <1>     xor al, al  ;Set ZF flag
  2091 000047BC E802000000          <1>     call readExitOk   ;We call this
  2092 000047C1 F9                  <1>     stc ;All calls which end up here return Fail!
  2093 000047C2 C3                  <1>     ret
  2094                              <1> 
  2095                              <1> readExitOk:
  2096                              <1> ;Input: ecx = Number of bytes left to transfer!
  2097                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  2098 000047C3 890D(7C070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2099                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  2100                              <1>     ;jnz .skipbitClear
  2101                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  2102                              <1>     ;The disk transfer must've flushed by now. 
  2103                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2104                              <1> .skipbitClear:  ;Or skip that entirely
  2105 000047C9 E8FA030000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2106                              <1>     return 
    13                              <2> %%_ret:
    14 000047CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2107                              <1> 
  2108                              <1> writeBytes:
  2109                              <1> ;Writes the bytes from the user buffer
  2110                              <1> ;Input: ecx = Bytes to xfr
  2111                              <1> ;Returns number of bytes written in ecx if CF=NC
  2112 000047CF E8EC030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2113 000047D4 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2114 000047D8 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2115 000047DA 3C00                <1>     cmp al, ReadAccess
  2116 000047DC 7509                <1>     jne .writeable
  2117                              <1> .noWrite:
  2118 000047DE B805000000          <1>     mov eax, errAccDen
  2119 000047E3 31C9                <1>     xor ecx, ecx
  2120 000047E5 F9                  <1>     stc
  2121 000047E6 C3                  <1>     ret
  2122                              <1> .writeable:
  2123 000047E7 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2124 000047ED 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2125 000047EF 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2126 000047F3 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2127                              <1> .skipAttribCheck:
  2128 000047F5 E808040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2129 000047FA 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2130 00004800 7408                <1>     jz .notRedir
  2131 00004802 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2132 00004807 CD2F                <1>     int 2Fh
  2133                              <1>     return
    13                              <2> %%_ret:
    14 00004809 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2134                              <1> .notRedir:
  2135 0000480A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2136 00004810 7510                <1>     jnz writeCharDev
  2137 00004812 E84A2B0000          <1>     call dosCrit1Enter
  2138 00004817 E84C010000          <1>     call writeDiskFile
  2139 0000481C E84A2B0000          <1>     call dosCrit1Exit
  2140                              <1>     return
    13                              <2> %%_ret:
    14 00004821 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2141                              <1> writeCharDev:
  2142 00004822 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2143                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2144 00004829 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2145 0000482F 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2146                              <1>     ;If ecx = 0, we exit
  2147 00004833 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2148 00004835 85C9                <1>     test ecx, ecx
  2149 00004837 0F846B030000        <1>     jz writeExitChar
  2150 0000483D 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2151 00004844 4889DF              <1>     mov rdi, rbx
  2152 00004847 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2153 00004849 A820                <1>     test al, charDevBinary
  2154 0000484B 744A                <1>     jz .asciiDev
  2155                              <1> ;Write binary transfer here
  2156                              <1> .binaryLp:
  2157 0000484D 31C0                <1>     xor eax, eax
  2158 0000484F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2159 00004852 E804250000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2160 00004857 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2161 0000485E E8E1210000          <1>     call goDriverChar
  2162 00004863 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2163 00004866 B487                <1>     mov ah, critCharDev | critData | critWrite
  2164 00004868 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2165 0000486F F7C700800000        <1>     test edi, drvErrStatus
  2166 00004875 7415                <1>     jz .binXfrOk
  2167 00004877 E8901B0000          <1>     call charDevErr ;Invoke Int 24h
  2168 0000487C 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2169 0000487F 3C00                <1>     cmp al, critIgnore
  2170 00004881 7409                <1>     je .binXfrOk
  2171 00004883 3C01                <1>     cmp al, critRetry
  2172 00004885 74C6                <1>     je .binaryLp
  2173 00004887 E9D5000000          <1>     jmp .exitFail
  2174                              <1> .binXfrOk:
  2175 0000488C 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2176 00004892 E911030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2177                              <1> .asciiDev:
  2178 00004897 A802                <1>     test al, charDevConOut
  2179 00004899 0F859E000000        <1>     jnz .conDev
  2180 0000489F A804                <1>     test al, charDevNulDev
  2181 000048A1 0F858F000000        <1>     jnz .nulDev
  2182                              <1>     ;Here we transfer for a generic character device in ascii mode
  2183 000048A7 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2184 000048A9 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2185 000048AC 0F84F6020000        <1>     je writeExitChar
  2186 000048B2 51                  <1>     push rcx
  2187 000048B3 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2188 000048B8 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2189 000048BB E89B240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2190 000048C0 59                  <1>     pop rcx
  2191 000048C1 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2192 000048C8 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2193                              <1> .asciiLp:
  2194 000048CC E8BCDEFFFF          <1>     call checkBreak
  2195 000048D1 E872210000          <1>     call goDriver
  2196 000048D6 57                  <1>     push rdi
  2197 000048D7 B487                <1>     mov ah, critCharDev | critData | critWrite
  2198 000048D9 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2199 000048E0 F7C700800000        <1>     test edi, drvErrStatus
  2200 000048E6 741D                <1>     jz .asciiNoError
  2201 000048E8 E81F1B0000          <1>     call charDevErr ;Invoke Int 24h
  2202 000048ED 5F                  <1>     pop rdi
  2203 000048EE C705(D7040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2203 000048F6 0000                <1>
  2204 000048F8 3C01                <1>     cmp al, critRetry
  2205 000048FA 74D0                <1>     je .asciiLp
  2206 000048FC 3C00                <1>     cmp al, critIgnore
  2207 000048FE 7412                <1>     je .ignoreEp
  2208 00004900 E95C000000          <1>     jmp .exitFail
  2209                              <1> .asciiNoError:
  2210 00004905 5F                  <1>     pop rdi
  2211 00004906 813D(D7040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2211 0000490E 0000                <1>
  2212 00004910 741D                <1>     je .bytesXfrdOk
  2213                              <1> .ignoreEp:
  2214 00004912 FFC2                <1>     inc edx ;One more char has been xfrd
  2215 00004914 FF05(CF040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2216 0000491A 48FFC7              <1>     inc rdi ;And our copy... 
  2217 0000491D 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2218 00004920 740D                <1>     je .bytesXfrdOk
  2219 00004922 66C705(C4040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2219 0000492A 00                  <1>
  2220 0000492B FFC9                <1>     dec ecx
  2221 0000492D 759D                <1>     jnz .asciiLp
  2222                              <1> .bytesXfrdOk:
  2223 0000492F 89D0                <1>     mov eax, edx
  2224 00004931 E972020000          <1>     jmp writeExitChar
  2225                              <1> .nulDev:
  2226 00004936 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2227 00004938 E96B020000          <1>     jmp writeExitChar
  2228                              <1> .conDev:
  2229 0000493D E8C7DEFFFF          <1>     call vConSwapDriver
  2230 00004942 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2231 00004945 51                  <1>     push rcx
  2232                              <1> .conDevLp:
  2233 00004946 AC                  <1>     lodsb
  2234 00004947 3C1A                <1>     cmp al, EOF
  2235 00004949 7409                <1>     je .conDevExit
  2236 0000494B E854DAFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2237 00004950 FFC9                <1>     dec ecx
  2238 00004952 75F2                <1>     jnz .conDevLp
  2239                              <1> .conDevExit:
  2240 00004954 58                  <1>     pop rax ;Get initial ecx back into eax
  2241 00004955 29C8                <1>     sub eax, ecx
  2242 00004957 E8C5DEFFFF          <1>     call vConRetDriver
  2243 0000495C E947020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2244                              <1> .exitFail:
  2245 00004961 B805000000          <1>     mov eax, errAccDen
  2246 00004966 F9                  <1>     stc
  2247                              <1>     return
    13                              <2> %%_ret:
    14 00004967 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2248                              <1> writeDiskFile:
  2249                              <1>     ;rdi has SFT ptr
  2250 00004968 8B0D(78070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2251 0000496E C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2252 00004975 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2253 0000497C 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2254 00004982 0F85D7010000        <1>     jnz .badExit
  2255 00004988 85C9                <1>     test ecx, ecx
  2256 0000498A 7505                <1>     jnz .nonZeroWrite
  2257 0000498C B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2258                              <1> .nonZeroWrite:
  2259                              <1>     ;Now do share check here
  2260 00004991 E8F0310000          <1>     call retryShareIODelay
  2261 00004996 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2262 00004998 E87D320000          <1>     call shareCheckWriteLockViolation
  2263 0000499D 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2264                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 0000499F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2265                              <1> .proceedWithWrite:
  2266                              <1> ;Ensure that all buffers are now unreferenced
  2267 000049A0 E833BDFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2268 000049A5 31DB                <1>     xor ebx, ebx
  2269 000049A7 891D(74070000)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2270 000049AD 881D(73070000)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2271 000049B3 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2272                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2273 000049B6 85C0                <1>     test eax, eax
  2274 000049B8 751C                <1>     jnz .notStart
  2275 000049BA E831C1FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2276                              <1>     ;jc .exitPrepHardErr
  2277                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000049BF 72DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2278 000049C1 3DFFFFFFFF          <1>     cmp eax, -1
  2279 000049C6 0F84A5010000        <1>     je writeExit
  2280                              <1>     ;Now eax has the first cluster of chain
  2281 000049CC 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2282 000049CF C605(73070000)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2283                              <1> .notStart:
  2284                              <1> ;eax has the start cluster of the file
  2285                              <1> ;Now we go to CurntOff
  2286 000049D6 8905(54070000)      <1>     mov dword [currClustD], eax ;Store in var
  2287 000049DC 31DB                <1>     xor ebx, ebx
  2288 000049DE 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2289 000049E4 85D2                <1>     test edx, edx
  2290 000049E6 744D                <1>     jz .skipWalk
  2291                              <1> .goToCurrentCluster:
  2292 000049E8 E88BC2FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2293                              <1>     ;jc .exitPrepHardErr
  2294                              <1>     retc   ;This can only return Fail
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000049ED 72B0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2295 000049EF 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2296 000049F4 752F                <1>     jne .stillInFile
  2297                              <1> .addCluster:
  2298                              <1>     ;Here we extend by one cluster
  2299 000049F6 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2300 000049FC 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2301 000049FE B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2302 00004A03 E80EC1FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2303                              <1>     ;jc .exitPrepHardErr
  2304                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004A08 7295                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2305 00004A0A 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2306 00004A0C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2307 00004A10 010D(74070000)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2308 00004A16 C605(73070000)FF    <1>     mov byte [fileGrowing], -1
  2309 00004A1D E856C2FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2310                              <1>     ;jc .exitPrepHardErr
  2311                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004A22 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004A24 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2312                              <1> .stillInFile:
  2313 00004A25 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2314 00004A2B FFCA                <1>     dec edx ;Decrement counter
  2315 00004A2D 75B9                <1>     jnz .goToCurrentCluster
  2316                              <1> ;Now we fall out
  2317 00004A2F 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2318                              <1> .skipWalk:
  2319 00004A35 E83CC0FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2320                              <1>     ;Now we add the offset to this
  2321 00004A3A 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2322 00004A41 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2323 00004A44 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2324 00004A4B 8B0D(78070000)      <1>     mov ecx, dword [tfrLen]
  2325 00004A51 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2326 00004A53 751F                <1>     jnz .mainWrite  
  2327                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2328 00004A55 F605(73070000)FF    <1>     test byte [fileGrowing], -1
  2329 00004A5C 750B                <1>     jnz .extend
  2330                              <1> ;Here we truncate where needed
  2331 00004A5E 8B05(54070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2332 00004A64 E8E0C1FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2333                              <1> .extend:
  2334 00004A69 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2335 00004A6C 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2336 00004A6F E9F2000000          <1>     jmp .noByteExit ;Exit ok!
  2337                              <1> .mainWrite:
  2338 00004A74 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2339 00004A7B 7407                <1>     jz .mainWriteNoBreak
  2340 00004A7D 50                  <1>     push rax
  2341 00004A7E E80ADDFFFF          <1>     call checkBreak
  2342 00004A83 58                  <1>     pop rax
  2343                              <1> .mainWriteNoBreak:
  2344                              <1> ;Must intervene here for direct writes (if the handle specifies no buffering)
  2345 00004A84 E86DBFFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2346 00004A89 0F82D0000000        <1>     jc .badExit
  2347 00004A8F 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2348 00004A93 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2349 00004A9A 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2350                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2351                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2352                              <1>     ; 3) Number of bytes left free in the sector
  2353 00004A9D 31C0                <1>     xor eax, eax
  2354 00004A9F 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2355 00004AA3 89D8                <1>     mov eax, ebx
  2356 00004AA5 662B05(65070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2357 00004AAC 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]
  2358                              <1> 
  2359 00004AB2 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2360 00004AB4 0F47CB              <1>     cmova ecx, ebx
  2361 00004AB7 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2362 00004AB9 0F47C8              <1>     cmova ecx, eax
  2363                              <1> 
  2364 00004ABC 56                  <1>     push rsi
  2365 00004ABD 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2366 00004AC4 51                  <1>     push rcx
  2367 00004AC5 F3A4                <1>     rep movsb
  2368 00004AC7 59                  <1>     pop rcx
  2369 00004AC8 E8BFBDFFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2370                              <1> 
  2371 00004ACD 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2372 00004AD3 290D(7C070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2373 00004AD9 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2374 00004AE0 5E                  <1>     pop rsi
  2375                              <1> 
  2376 00004AE1 8B05(78070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2377 00004AE7 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2378 00004AED 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2379 00004AEF 0F847C000000        <1>     jz writeExit
  2380 00004AF5 E8DFC0FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2381                              <1>     ;jc .exitPrepHardErr
  2382                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004AFA 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004AFC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2383 00004AFD 3DFFFFFFFF          <1>     cmp eax, -1
  2384 00004B02 7535                <1>     jne .noExtend
  2385                              <1>     ;Here we need to extend by a cluster
  2386 00004B04 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2387 00004B0A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2388 00004B0C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2389 00004B11 E800C0FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2390                              <1>     ;jc .exitPrepHardErr
  2391                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004B16 72E4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2392 00004B18 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2393 00004B1A 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2394 00004B1E 011D(74070000)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2395 00004B24 C605(73070000)FF    <1>     mov byte [fileGrowing], -1
  2396 00004B2B E8A9C0FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2397                              <1>     ;jc .exitPrepHardErr
  2398                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004B30 72CA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2399 00004B32 3DFFFFFFFF          <1>     cmp eax, -1
  2400 00004B37 7415                <1>     je .noMoreClusters
  2401                              <1> .noExtend:
  2402 00004B39 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2402 00004B41 00                  <1>
  2403 00004B42 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2404 00004B49 E926FFFFFF          <1>     jmp .mainWrite
  2405                              <1> .noMoreClusters:
  2406 00004B4E 56                  <1>     push rsi
  2407 00004B4F 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2408 00004B56 66F746020020        <1>     test word [rsi + sft.wOpenMode], diskFullFail
  2409 00004B5C 5E                  <1>     pop rsi
  2410 00004B5D 74DA                <1>     jz .noExtend    ;If no trigger Int 24h, return success
  2411                              <1>     ;Here we future proof for triggering Int 24h.
  2412                              <1> .badExit:
  2413 00004B5F B805000000          <1>     mov eax, errAccDen
  2414                              <1> ;.exitPrepHardErr:
  2415 00004B64 F9                  <1>     stc
  2416                              <1>     return
    13                              <2> %%_ret:
    14 00004B65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2417                              <1> .noByteExit:
  2418 00004B66 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2419 00004B6B FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2420                              <1> writeExit:
  2421                              <1> ;Advances the bytes on the file pointer
  2422                              <1> ;Return: ecx = Number of bytes transferred
  2423 00004B71 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2424 00004B78 E84B000000          <1>     call updateCurrentSFT
  2425 00004B7D 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2426 00004B7F 7404                <1>     jz .noFlush
  2427 00004B81 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2428                              <1> .noFlush:
  2429 00004B85 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2430 00004B8B 750E                <1>     jnz .exit
  2431 00004B8D 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2432 00004B90 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2433 00004B93 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2434 00004B95 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2435 00004B98 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2436                              <1> .exit:
  2437 00004B9B B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2438 00004BA0 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2439 00004BA6 F8                  <1>     clc
  2440                              <1>     return
    13                              <2> %%_ret:
    14 00004BA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2441                              <1> writeExitChar:
  2442                              <1> ;Input: eax = Number of chars transferred
  2443 00004BA8 8B0D(78070000)      <1>     mov ecx, dword [tfrLen]
  2444 00004BAE 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2445 00004BB0 890D(7C070000)      <1>     mov dword [tfrCntr], ecx
  2446 00004BB6 EBB9                <1>     jmp short writeExit
  2447                              <1> ;-----------------------------------:
  2448                              <1> ;        File Handle routines       :
  2449                              <1> ;-----------------------------------:
  2450                              <1> 
  2451                              <1> setCurrentSFT:
  2452                              <1> ;Set the pointer in rdi as current SFT 
  2453 00004BB8 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  2454                              <1>     return 
    13                              <2> %%_ret:
    14 00004BBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2455                              <1> getCurrentSFT:
  2456                              <1> ;Get the current SFT pointer in rdi
  2457 00004BC0 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2458                              <1>     return 
    13                              <2> %%_ret:
    14 00004BC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2459                              <1> updateCurrentSFT:
  2460                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2461                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2462 00004BC8 57                  <1>     push rdi
  2463 00004BC9 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2464 00004BD0 E8BF010000          <1>     call getBytesTransferred
  2465 00004BD5 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2466                              <1>     ;ecx has bytes transferred
  2467 00004BD8 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2468 00004BDE 751F                <1>     jnz .exit
  2469 00004BE0 50                  <1>     push rax
  2470 00004BE1 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2471 00004BE7 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2472 00004BEA 8B05(50070000)      <1>     mov eax, dword [currClustF]
  2473 00004BF0 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2474 00004BF3 58                  <1>     pop rax
  2475 00004BF4 51                  <1>     push rcx
  2476 00004BF5 8B0D(67070000)      <1>     mov ecx, dword [currByteF]
  2477 00004BFB 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2478 00004BFE 59                  <1>     pop rcx
  2479                              <1> .exit:
  2480 00004BFF 5F                  <1>     pop rdi
  2481 00004C00 F8                  <1>     clc
  2482                              <1>     return 
    13                              <2> %%_ret:
    14 00004C01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2483                              <1> 
  2484                              <1> setupVarsForTransfer:
  2485                              <1> ;Computes the actual bytes to be transferred and 
  2486                              <1> ; sets up internal variables for the transfer. 
  2487                              <1> ;Works for both reading and writing
  2488                              <1> ;Input: ecx = User desired Bytes to transfer
  2489                              <1> ;       rdi = SFT pointer for the file
  2490                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2491                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2492                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2493                              <1> ;
  2494                              <1> ;Note: Does not account for a FULL disk. When writing,
  2495                              <1> ; if the disk will get full as a result of the write,
  2496                              <1> ; stop at the last byte before the transfer. If the 
  2497                              <1> ; file pointer is past the last free byte, write 0
  2498 00004C02 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2499 00004C06 488935(0A070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2500 00004C0D 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2501 00004C10 8905(67070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2502 00004C16 890D(78070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2503 00004C1C 890D(7C070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2504 00004C22 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2505 00004C28 7402                <1>     jz setupVarsForDiskTransfer
  2506 00004C2A F8                  <1>     clc
  2507                              <1>     return
    13                              <2> %%_ret:
    14 00004C2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2508                              <1> setupVarsForDiskTransfer:
  2509                              <1> ;Extension of the above, but for Disk files only
  2510                              <1> ;Input: ecx = User desired Bytes to transfer
  2511                              <1> ;       rdi = SFT pointer for the file
  2512                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2513                              <1> ;        CF=CY: Error exit
  2514 00004C2C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2515 00004C2F 8905(67070000)      <1>     mov dword [currByteF], eax
  2516 00004C35 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2517                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2518 00004C39 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2519 00004C40 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2520 00004C43 881D(09070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2521 00004C49 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2522 00004C4F 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2523 00004C53 31D2                <1>     xor edx, edx    ;Zero rdx
  2524 00004C55 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2525                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2526                              <1>     ;edx has the offset into that sector
  2527 00004C57 8905(58070000)      <1>     mov dword [currSectF], eax
  2528 00004C5D 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2529 00004C64 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2530 00004C66 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2531 00004C69 8805(5C070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2532 00004C6F 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2533 00004C71 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2534 00004C74 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2535 00004C76 8915(50070000)      <1>     mov dword [currClustF], edx ;Save in var
  2536 00004C7C 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2537                              <1> .exit:
  2538 00004C7E F8                  <1>     clc
  2539                              <1>     return 
    13                              <2> %%_ret:
    14 00004C7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2540                              <1> findFreeSFT:
  2541                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2542                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2543                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2544                              <1> ;        CF=CY => eax = errNhl, error exit
  2545 00004C80 31DB                <1>     xor ebx, ebx
  2546                              <1> .mainLp:
  2547 00004C82 53                  <1>     push rbx    ;Save the sft ndx
  2548 00004C83 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2549 00004C88 5B                  <1>     pop rbx
  2550 00004C89 7307                <1>     jnc .sftExists
  2551 00004C8B B804000000          <1>     mov eax, errNhl
  2552 00004C90 F9                  <1>     stc
  2553                              <1>     return
    13                              <2> %%_ret:
    14 00004C91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2554                              <1> .sftExists:
  2555 00004C92 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2556 00004C97 7427                <1>     je .sftFound
  2557 00004C99 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2558 00004C9E 751C                <1>     jne .gotoNextNdx
  2559                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2560 00004CA0 53                  <1>     push rbx
  2561 00004CA1 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2562 00004CA8 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2563 00004CAC 750B                <1>     jne .netGoToNextNdx
  2564 00004CAE 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2565 00004CB5 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2566                              <1> .netGoToNextNdx:
  2567 00004CB9 5B                  <1>     pop rbx
  2568 00004CBA 7404                <1>     je .sftFound
  2569                              <1> .gotoNextNdx:
  2570 00004CBC FFC3                <1>     inc ebx
  2571 00004CBE EBC2                <1>     jmp short .mainLp
  2572                              <1> .sftFound:
  2573 00004CC0 53                  <1>     push rbx
  2574 00004CC1 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2575 00004CC6 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2576 00004CCD 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2577 00004CD1 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2578 00004CD8 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2579 00004CDC 5B                  <1>     pop rbx
  2580 00004CDD F8                  <1>     clc
  2581                              <1>     return
    13                              <2> %%_ret:
    14 00004CDE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2582                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2583                              <1> ;Return a pointer to the SFT entry in rdi
  2584                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2585                              <1> ;Output: rdi = SFT pointer
  2586 00004CDF 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2587                              <1> .walk:
  2588 00004CE6 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2589 00004CEA 7212                <1>     jb .thisTable
  2590 00004CEC 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2591 00004CF0 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2592 00004CF3 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2593 00004CFA 75EA                <1>     jne .walk
  2594 00004CFC F9                  <1>     stc
  2595                              <1>     return
    13                              <2> %%_ret:
    14 00004CFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2596                              <1> .thisTable:
  2597 00004CFE 50                  <1>     push rax
  2598 00004CFF 52                  <1>     push rdx
  2599 00004D00 B84F000000          <1>     mov eax, sft_size
  2600 00004D05 F7E3                <1>     mul ebx
  2601 00004D07 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2602 00004D0A 5A                  <1>     pop rdx
  2603 00004D0B 58                  <1>     pop rax
  2604 00004D0C 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2605                              <1>     return
    13                              <2> %%_ret:
    14 00004D13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2606                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2607                              <1> ;Return a zero extended value in rdi for the SFT entry
  2608                              <1> ;Input: bx = JFT handle (we zero extend)
  2609                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2610                              <1> ;        CF=CY => al = Error code, Fail
  2611 00004D14 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2612 00004D17 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2613 00004D1E 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2614 00004D22 7204                <1>     jb .ok
  2615 00004D24 B006                <1>     mov al, errBadHdl
  2616 00004D26 F9                  <1>     stc
  2617                              <1>     return
    13                              <2> %%_ret:
    14 00004D27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2618                              <1> .ok:
  2619 00004D28 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2620 00004D2E 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2621 00004D30 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2622 00004D32 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2623 00004D36 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2624 00004D3A EB0B                <1>     jmp short .pspOkExit
  2625                              <1> .pspJftBelow:
  2626 00004D3C 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2627                              <1> .pspJftOk:
  2628 00004D42 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2629                              <1> .pspOkExit:
  2630 00004D47 F8                  <1>     clc
  2631                              <1>     return
    13                              <2> %%_ret:
    14 00004D48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2632                              <1> findFreeJFTEntry:
  2633                              <1> ;Finds a free JFT entry in the currentPSP.
  2634                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2635                              <1> ;        CF=CY => al=errNhl
  2636 00004D49 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2637                              <1> .searchLp:
  2638 00004D4B E8C4FFFFFF          <1>     call getJFTPtr
  2639 00004D50 7209                <1>     jc .badExit
  2640 00004D52 803FFF              <1>     cmp byte [rdi], -1
  2641                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D55 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2642 00004D57 FFC3                <1>     inc ebx
  2643 00004D59 EBF0                <1>     jmp short .searchLp
  2644                              <1> .badExit:
  2645 00004D5B B004                <1>     mov al, errNhl
  2646 00004D5D F9                  <1>     stc
  2647                              <1>     return
    13                              <2> %%_ret:
    14 00004D5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2648                              <1> getSFTPtr:
  2649                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2650                              <1> ;Input: bx = JFT handle
  2651                              <1> ;Output: CF=NC: rdi = SFT pointer
  2652                              <1> ;        CF=CY: Error, ax=Error code
  2653 00004D5F E815000000          <1>     call derefSFTPtr
  2654                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D64 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2655 00004D66 50                  <1>     push rax
  2656 00004D67 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2657 00004D6E 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2658 00004D72 58                  <1>     pop rax
  2659                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D73 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2660 00004D75 B006                <1>     mov al, errBadHdl   ;Error code
  2661 00004D77 F9                  <1>     stc         ;Reset CF
  2662                              <1>     return
    13                              <2> %%_ret:
    14 00004D78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2663                              <1> 
  2664                              <1> derefSFTPtr:
  2665                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2666                              <1> ;Input: bx = File handle (gets zero extended)
  2667                              <1> ;Output: CF=NC: rdi = SFT pointer
  2668                              <1> ;        CF=CY: Error, ax=Error code
  2669 00004D79 E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2670 00004D7E 7205                <1>     jb .fail
  2671 00004D80 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2672 00004D83 7504                <1>     jne .ok
  2673                              <1> .fail:
  2674 00004D85 B006                <1>     mov al, errBadHdl
  2675 00004D87 F9                  <1>     stc
  2676                              <1>     return
    13                              <2> %%_ret:
    14 00004D88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2677                              <1> .ok:
  2678 00004D89 53                  <1>     push rbx    ;Preserve the JFT handle
  2679 00004D8A 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2680 00004D8D E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2681 00004D92 5B                  <1>     pop rbx 
  2682                              <1>     return
    13                              <2> %%_ret:
    14 00004D93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2683                              <1> 
  2684                              <1> getBytesTransferred:
  2685 00004D94 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2686 00004D9A F7D9                <1>     neg ecx ;Multiply by -1
  2687 00004D9C 030D(78070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2688                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 00004DA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2689                              <1> 
  2690                              <1> getSFTndxInheritable:
  2691                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2692                              <1> ;Input: ebx = SFTndx (word)
  2693                              <1> ;Output: 
  2694                              <1> ;   ZF=ZE => Inheritable
  2695                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2696 00004DA3 57                  <1>     push rdi
  2697 00004DA4 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2698 00004DA9 7208                <1>     jc .badNdx
  2699 00004DAB 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2700 00004DB1 5F                  <1>     pop rdi
  2701                              <1>     return
    13                              <2> %%_ret:
    14 00004DB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2702                              <1> .badNdx:
  2703 00004DB3 31FF                <1>     xor edi, edi
  2704 00004DB5 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2705 00004DB7 F8                  <1>     clc
  2706 00004DB8 5F                  <1>     pop rdi
  2707                              <1>     return
    13                              <2> %%_ret:
    14 00004DB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2708                              <1> 
  2709                              <1> incrementOpenCount:
  2710                              <1> ;Given a SFTndx, this function will increment it's open count
  2711                              <1> ;Output:
  2712                              <1> ;   CF=NC => sftndx ok, count incremented
  2713                              <1> ;   CF=CY => Bad ndx
  2714 00004DBA 57                  <1>     push rdi
  2715 00004DBB E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2716 00004DC0 7203                <1>     jc .exit
  2717 00004DC2 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2718                              <1> .exit:
  2719 00004DC5 5F                  <1>     pop rdi
  2720                              <1>     return
    13                              <2> %%_ret:
    14 00004DC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2721                              <1> 
  2722                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2723                              <1> ;Input: rdi = SFT pointer
  2724                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2725 00004DC7 9C                  <1>     pushfq
  2726 00004DC8 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2727 00004DCB FFC8                <1>     dec eax     ;Decrement count
  2728 00004DCD 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2729 00004DCF FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2730                              <1> .exit:
  2731 00004DD1 9D                  <1>     popfq
  2732 00004DD2 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2733                              <1>     return
    13                              <2> %%_ret:
    14 00004DD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2734                              <1> 
  2735                              <1> ;Buffer Wrapper
  2736                              <1> writeThroughBuffersForHandle:
  2737                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2738 00004DD6 57                  <1>     push rdi
  2739 00004DD7 55                  <1>     push rbp
  2740 00004DD8 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2741 00004DDF 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2742 00004DE5 751C                <1>     jnz .exit
  2743 00004DE7 FF35(0A070000)      <1>     push qword [workingDPB]
  2744 00004DED 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2745 00004DF1 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2746 00004DF8 E81EB9FFFF          <1>     call flushAllBuffersForDPB
  2747 00004DFD 8F05(0A070000)      <1>     pop qword [workingDPB]
  2748                              <1> .exit:
  2749 00004E03 5D                  <1>     pop rbp
  2750 00004E04 5F                  <1>     pop rdi
  2751                              <1>     return
    13                              <2> %%_ret:
    14 00004E05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2752                              <1> 
  2753                              <1> setDPBfromSFT:
  2754                              <1> ;Sets and updates the DPB from an SFT ptr
  2755                              <1> ;Input: rdi -> sft
  2756                              <1> ;Output: CF=NC: workingDPB set
  2757                              <1> ;        CF=CY: Error fail, exit
  2758 00004E06 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2759 00004E0A 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
  2760 00004E0E 8805(09070000)      <1>     mov byte [workingDrv], al
  2761 00004E14 E82F200000          <1>     call setWorkingDPB
  2762 00004E19 E8EC1D0000          <1>     call ensureDiskValid
  2763                              <1>     return
    13                              <2> %%_ret:
    14 00004E1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00004E1F 3C0F                <1>     cmp al, 15
    36 00004E21 7747                <1>     ja .invalidFunction
    37 00004E23 84C0                <1>     test al, al
    38 00004E25 745B                <1>     jz .getDevWord
    39 00004E27 3C01                <1>     cmp al, 1
    40 00004E29 746E                <1>     je .setDevWord
    41 00004E2B 2C02                <1>     sub al, 2
    42 00004E2D 3C03                <1>     cmp al, 3
    43 00004E2F 7673                <1>     jbe .ioctlStringFunctions
    44 00004E31 2C04                <1>     sub al, 4
    45 00004E33 3C01                <1>     cmp al, 1
    46 00004E35 0F8644010000        <1>     jbe .ioStatusFunctions
    47 00004E3B 2C02                <1>     sub al, 2
    48 00004E3D 3C02                <1>     cmp al, 2
    49 00004E3F 0F86CD010000        <1>     jbe .devControl
    50 00004E45 2C03                <1>     sub al, 3
    51 00004E47 0F8498020000        <1>     jz .setSharingCount
    52 00004E4D FEC8                <1>     dec al
    53 00004E4F 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 00004E55 FEC8                <1>     dec al
    55 00004E57 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 00004E5D FEC8                <1>     dec al
    57 00004E5F 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 00004E65 E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004E6A B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004E6F E938250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004E74 B805000000          <1>     mov eax, errAccDen
    65 00004E79 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004E7B B806000000          <1>     mov eax, errBadHdl
    68 00004E80 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00004E82 E8F2FEFFFF          <1>     call derefSFTPtr
    74 00004E87 72F2                <1>     jc .badHandle
    75 00004E89 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00004E8D 30C0                <1>     xor al, al
    77 00004E8F E849200000          <1>     call getUserRegs
    78 00004E94 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00004E98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00004E99 E8DBFEFFFF          <1>     call derefSFTPtr
    84 00004E9E 72DB                <1>     jc .badHandle 
    85 00004EA0 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00004EA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00004EA4 0FB6F3              <1>     movzx esi, bl
    96 00004EA7 488D1D(C1040000)    <1>     lea rbx, primReqHdr
    97 00004EAE C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 00004EB5 C605(68040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00004EBC C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00004EBF 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00004EC2 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 00004EC6 51                  <1>     push rcx
   105 00004EC7 52                  <1>     push rdx
   106 00004EC8 B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00004ECD BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00004ED2 A801                <1>     test al, 1  ;If set, this is a write operation
   109 00004ED4 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 00004ED7 7507                <1>     jnz .notWrite
   111 00004ED9 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 00004EE0 5A                  <1>     pop rdx
   114 00004EE1 59                  <1>     pop rcx
   115 00004EE2 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 00004EE5 3C01                <1>     cmp al, 1
   117 00004EE7 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00004EE9 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00004EEC E888FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00004EF1 7288                <1>     jc .badHandle 
   122 00004EF3 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00004EFA 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00004F00 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 00004F06 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00004F0A 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 00004F11 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00004F14 31C0                <1>     xor eax, eax
   130 00004F16 EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00004F18 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 00004F1F 89F0                <1>     mov eax, esi
   136 00004F21 53                  <1>     push rbx
   137 00004F22 E84A200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 00004F27 5B                  <1>     pop rbx
   139 00004F28 730A                <1>     jnc .okDrive
   140 00004F2A B80F000000          <1>     mov eax, errBadDrv
   141 00004F2F E978240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 00004F34 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   144 00004F3B 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 00004F3F 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 00004F42 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 00004F45 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 00004F49 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 00004F4C 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 00004F50 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 00004F53 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 00004F59 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 00004F5F 51                  <1>     push rcx    ;Push xfrctr
   159 00004F60 52                  <1>     push rdx    ;Buffer Ptr
   160 00004F61 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 00004F67 E8DC1A0000          <1>     call goDriver
   162 00004F6C 5A                  <1>     pop rdx
   163 00004F6D 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 00004F6E 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 00004F74 0F8424240000        <1>     jz extGoodExit
   167 00004F7A E91A030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 00004F7F E8F5FDFFFF          <1>     call derefSFTPtr
   173 00004F84 0F82F1FEFFFF        <1>     jc .badHandle 
   174 00004F8A 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   175 00004F91 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 00004F94 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00004F9B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   178 00004FA1 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 00004FA7 C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   180 00004FAE B906000000          <1>     mov ecx, drvINSTATUS
   181 00004FB3 BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 00004FB8 84C0                <1>     test al, al
   183 00004FBA 0F45CA              <1>     cmovnz ecx, edx
   184 00004FBD 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 00004FC0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 00004FC6 7416                <1>     jz .ioStatDisk
   187 00004FC8 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 00004FCF 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 00004FD6 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00004FDA 30C0                <1>     xor al, al
   191 00004FDC EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 00004FDE C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 00004FE5 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 00004FE9 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00004FEC 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 00004FEF 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 00004FF3 E8501A0000          <1>     call goDriver
   200 00004FF8 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 00004FFE 0F8595020000        <1>     jnz failIOCTLCall
   202 00005004 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 0000500A 7403                <1>     jz .notBusyExit
   204 0000500C B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 0000500E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 0000500F 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 00005011 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 00005012 84C0                <1>     test al, al
   216 00005014 746D                <1>     jz .remTest
   217 00005016 A801                <1>     test al, 1
   218 00005018 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 0000501A E85AFDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 0000501F 0F8256FEFFFF        <1>     jc .badHandle 
   222 00005025 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 00005029 E8AF1E0000          <1>     call getUserRegs
   225 0000502E 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 00005032 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 00005034 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 00005035 88D8                <1>     mov al, bl
   233 00005037 E8351F0000          <1>     call getCDS
   234 0000503C 730A                <1>     jnc .devTestOkDrive
   235 0000503E B80F000000          <1>     mov eax, errBadDrv
   236 00005043 E964230000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 00005048 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   239 0000504F 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 00005053 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 00005058 7513                <1>     jnz .remoteDrive
   242 0000505A 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 0000505E 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 00005062 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 00005066 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 0000506B EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 0000506D 6689D3              <1>     mov bx, dx
   249 00005070 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 00005075 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 0000507A 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 0000507C 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 00005081 EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 00005083 88D8                <1>     mov al, bl
   258 00005085 E8E71E0000          <1>     call getCDS
   259 0000508A 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 0000508C B80F000000          <1>     mov eax, errBadDrv
   262 00005091 E916230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 00005096 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 0000509D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 000050A3 75E7                <1>     jnz .remTestBadDrv
   267 000050A5 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   268 000050AC 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 000050B0 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 000050B3 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 000050B7 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 000050BD 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 000050C3 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 000050C6 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 000050CA 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 000050D0 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 000050D3 E870190000          <1>     call goDriver
   278 000050D8 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 000050DC 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 000050E1 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 000050E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 000050E5 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 000050EC 6685D2              <1>     test dx, dx
   288 000050EF 0F8475FDFFFF        <1>     jz .invalidFunction
   289 000050F5 668915(21000000)    <1>     mov word [shareDelay], dx
   290 000050FC 31C0                <1>     xor eax, eax
   291 000050FE E99B220000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 00005103 E857FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 00005108 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 0000510A C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 00005111 B806000000          <1>     mov eax, errBadHdl
   299 00005116 E991220000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 0000511B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   302 00005121 75E7                <1>     jnz .ioctrlBadHandle
   303 00005123 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 00005129 74DF                <1>     jz .ioctrlBadHandle
   305 0000512B 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 0000512F EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 00005131 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 00005133 51                  <1>     push rcx
   310 00005134 52                  <1>     push rdx
   311 00005135 E8371E0000          <1>     call getCDS ;Sets the current CDS
   312 0000513A 5A                  <1>     pop rdx
   313 0000513B 59                  <1>     pop rcx
   314 0000513C 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 0000513E 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   317 00005145 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 00005149 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 0000514D 7406                <1>     jz .badDrv
   320 0000514F 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 00005153 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 00005155 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 0000515C B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 00005161 E946220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 00005166 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 0000516A 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 0000516E 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 00005171 8805(C2040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   332 00005177 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 0000517A 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 00005180 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 00005182 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 00005189 B801000000          <1>     mov eax, errInvFnc
   340 0000518E E919220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 00005193 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   344 0000519A C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 0000519D C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 000051A1 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 000051A7 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 000051AB 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 000051AF 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 000051B2 E8261D0000          <1>     call getUserRegs
   351 000051B7 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 000051BB 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 000051BF 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 000051C3 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 000051C7 4889FE              <1>     mov rsi, rdi
   356 000051CA E879180000          <1>     call goDriver
   357 000051CF 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 000051D5 0F84C3210000        <1>     jz extGoodExit
   359 000051DB E9B9000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 000051E0 88D8                <1>     mov al, bl
   363 000051E2 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   364 000051E9 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 000051ED C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 000051F0 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 000051F6 53                  <1>     push rbx
   368 000051F7 E8751D0000          <1>     call getCDS
   369 000051FC 8805(09070000)      <1>     mov byte [workingDrv], al
   370 00005202 5B                  <1>     pop rbx
   371 00005203 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 00005209 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   373 00005210 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 00005214 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 00005218 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 0000521B 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 0000521E 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 00005224 0F8440FCFFFF        <1>     jz .invalidFunction
   380 0000522A E819180000          <1>     call goDriver
   381 0000522F 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 00005235 7405                <1>     jz .getDrvOk
   383 00005237 E95D000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 0000523C 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 0000523F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 00005240 88D8                <1>     mov al, bl
   389 00005242 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   390 00005249 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 0000524D C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 00005250 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 00005256 53                  <1>     push rbx
   394 00005257 E8151D0000          <1>     call getCDS
   395 0000525C 8805(09070000)      <1>     mov byte [workingDrv], al
   396 00005262 5B                  <1>     pop rbx
   397 00005263 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 00005269 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   399 00005270 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 00005274 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 00005278 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 0000527B 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 0000527E 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 00005284 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 0000528A E8B9170000          <1>     call goDriver
   406 0000528F 30C0                <1>     xor al, al
   407 00005291 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005297 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 00005299 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 0000529D 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 000052A3 E838110000          <1>     call xlatHardError
   415 000052A8 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 000052AF E9F8200000          <1>     jmp extErrExit
   417                              <1> 
    38                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 000052B4 E8A8200000          <1>     call dosCrit1Enter
    15 000052B9 B806000000          <1>     mov eax, 6
    16 000052BE 39C3                <1>     cmp ebx, eax
    17 000052C0 0F42D8              <1>     cmovb ebx, eax
    18 000052C3 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 000052C5 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 000052CC 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 000052D3 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 000052DA 31ED                <1>     xor ebp, ebp    
    24 000052DC FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 000052DE 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 000052E5 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 000052E8 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 000052EB 7409                <1>     je .walk1
    30 000052ED 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 000052F0 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 000052F6 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 000052FE 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 00005304 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00005307 744A                <1>     je .det0    ;Determine if this block is useful
    41 00005309 31C9                <1>     xor ecx, ecx
    42 0000530B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 0000530E 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 00005315 48C1E104            <1>     shl rcx, 4
    46 00005319 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 0000531C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 0000531F 7409                <1>     je .cons1
    49 00005321 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 00005324 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 0000532A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 00005332 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 00005334 31C9                <1>     xor ecx, ecx
    56 00005336 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 00005339 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 0000533F 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 00005342 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 00005344 31D2                <1>     xor edx, edx
    61 00005346 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 00005349 48895608            <1>     mov qword [rsi + 8], rdx
    63 0000534D 3C5A                <1>     cmp al, mcbMarkEnd
    64 0000534F 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 00005351 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 00005353 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 00005356 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 00005359 39D9                <1>     cmp ecx, ebx
    72 0000535B 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 0000535D 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 00005364 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 0000536B 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 0000536E 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00005370 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 00005377 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 00005379 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 0000537B 7209                <1>     jb .walk2
    83 0000537D 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 0000537F 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 00005386 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 00005389 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 0000538B 31C9                <1>     xor ecx, ecx
    89 0000538D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005390 48C1E104            <1>     shl rcx, 4
    91 00005394 4881C610000000      <1>     add rsi, mcb.program
    92 0000539B 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 0000539E E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 000053A3 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 000053AA 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 000053AC 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 000053B3 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 000053B6 0F84A8000000        <1>     jz .allocFail
   102 000053BC 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 000053BE C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 000053C1 31C9                <1>     xor ecx, ecx
   105 000053C3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 000053C6 29D9                <1>     sub ecx, ebx
   107 000053C8 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 000053CE 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 000053D1 48C1E104            <1>     shl rcx, 4
   110 000053D5 4881C610000000      <1>     add rsi, mcb.program
   111 000053DC 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 000053DF 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 000053E1 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 000053E4 EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 000053E6 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 000053ED 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 000053F4 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 000053FC 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 000053FF 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005401 31C9                <1>     xor ecx, ecx
   123 00005403 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 00005406 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00005408 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 0000540A 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00005410 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 00005413 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 00005415 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 00005418 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 0000541B 4881C710000000      <1>     add rdi, mcb.program
   133 00005422 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 00005428 48C1E304            <1>     shl rbx, 4
   135 0000542C 4801DF              <1>     add rdi, rbx
   136 0000542F 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 00005431 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 00005439 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 0000543C 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 00005443 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 00005447 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   144 0000544E 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 00005452 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 00005455 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 00005459 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 0000545E E8081F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 00005463 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 00005464 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 0000546B 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 0000546D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 00005470 7409                <1>     je .af1
   157 00005472 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 00005475 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 0000547B 31C9                <1>     xor ecx, ecx
   161 0000547D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005480 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00005488 7505                <1>     jne .af2
   164 0000548A 39D9                <1>     cmp ecx, ebx
   165 0000548C 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 0000548F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 00005492 7410                <1>     je .afExit
   169 00005494 48C1E104            <1>     shl rcx, 4
   170 00005498 4881C610000000      <1>     add rsi, mcb.program
   171 0000549F 4801CE              <1>     add rsi, rcx
   172 000054A2 EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 000054A4 B808000000          <1>     mov eax, errNoMem
   175 000054A9 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   176 000054B0 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 000054B3 E925030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 000054B8 E8A41E0000          <1>     call dosCrit1Enter
   183 000054BD 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 000054C4 31C9                <1>     xor ecx, ecx
   185 000054C6 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 000054CD 4889F7              <1>     mov rdi, rsi
   187 000054D0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 000054D3 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 000054D7 4881C610000000      <1>     add rsi, mcb.program
   190 000054DE 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 000054E1 31C9                <1>     xor ecx, ecx
   193 000054E3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 000054E6 7409                <1>     je .valid
   195 000054E8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 000054EB 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 000054F1 4939F0              <1>     cmp r8, rsi
   199 000054F4 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 000054F6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 000054F9 0F84A5000000        <1>     je .blockError
   203 000054FF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00005502 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 00005506 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 0000550D 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005510 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 00005512 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 0000551A 0F8484000000        <1>     je .blockError
   213 00005520 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 00005528 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 00005530 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 00005532 31C9                <1>     xor ecx, ecx
   218 00005534 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 00005537 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 0000553D 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 00005540 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 00005542 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 00005544 31C9                <1>     xor ecx, ecx
   225 00005546 48890E              <1>     mov qword [rsi], rcx
   226 00005549 48894E08            <1>     mov qword [rsi + 8], rcx
   227 0000554D 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 00005550 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 00005553 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 00005555 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 00005558 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 0000555B 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 0000555F 4881C110000000      <1>     add rcx, mcb.program
   236 00005566 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00005569 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 00005571 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 00005573 31C9                <1>     xor ecx, ecx
   241 00005575 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00005578 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 0000557E 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005581 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005583 8807                <1>     mov byte [rdi + mcb.marker], al
   247 00005585 31C9                <1>     xor ecx, ecx
   248 00005587 48890E              <1>     mov qword [rsi], rcx
   249 0000558A 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 0000558E E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005593 E8D31D0000          <1>     call dosCrit1Exit
   253 00005598 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   254 0000559F 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 000055A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 000055A4 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 000055AB B809000000          <1>     mov eax, errMemAddr
   259 000055B0 E8F71D0000          <1>     call extErrExit ;Error thru the unified error handler
   260 000055B5 E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 000055BA E8AC1D0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 000055BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 000055C0 E89C1D0000          <1>     call dosCrit1Enter
   268 000055C5 85DB                <1>     test ebx, ebx
   269 000055C7 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 000055CD B806000000          <1>     mov eax, 6
   271 000055D2 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 000055D4 0F42D8              <1>     cmovb ebx, eax
   273 000055D7 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 000055DE 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 000055E1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 000055E4 7409                <1>     je .ctn
   277 000055E6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 000055E9 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 000055EF 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 000055F7 74AB                <1>     je freeMemory.blockError
   284 000055F9 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 000055FC 31C9                <1>     xor ecx, ecx
   286 000055FE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005601 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005603 0F8791000000        <1>     ja .growth
   289 00005609 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 0000560F 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005611 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 00005617 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 0000561A 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 00005620 48C1E304            <1>     shl rbx, 4
   296 00005624 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 0000562B 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 0000562E 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 00005630 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 00005633 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 00005635 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 0000563D 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 00005640 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 00005642 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 00005648 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 0000564B 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 0000564F 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 00005656 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 00005659 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 0000565C 7409                <1>     je .shrinkAbsorb
   312 0000565E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 00005661 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 00005667 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 0000566F 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 00005675 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 00005677 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 00005679 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 0000567C 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 0000567F 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005682 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005685 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005689 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 0000568C 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 0000568E 48890E              <1>     mov qword [rsi], rcx
   329 00005691 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005695 E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 0000569A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 0000569D 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 000056A3 31C9                <1>     xor ecx, ecx
   337 000056A5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 000056A8 48C1E104            <1>     shl rcx, 4
   339 000056AC 4889F7              <1>     mov rdi, rsi    
   340 000056AF 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 000056B6 4801CE              <1>     add rsi, rcx
   342 000056B9 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 000056BC 7409                <1>     je .growthOK
   344 000056BE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 000056C1 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 000056C7 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 000056CF 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 000056D1 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 000056D3 31C9                <1>     xor ecx, ecx
   353 000056D5 31D2                <1>     xor edx, edx
   354 000056D7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 000056DA 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 000056E0 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 000056E3 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 000056E5 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 000056E7 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 000056EA 775E                <1>     ja .notEnuffMem1
   361 000056EC 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 000056EE 81FA01000000        <1>     cmp edx, 1
   363 000056F4 744E                <1>     je .notEnuffMem2
   364 000056F6 31C9                <1>     xor ecx, ecx
   365 000056F8 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 000056FB 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 000056FF 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005702 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005705 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 0000570C 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005710 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005713 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 00005717 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005719 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 0000571B 7411                <1>     jz .exit
   378 0000571D 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 00005723 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 00005726 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 0000572E E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 00005733 E8331C0000          <1>     call dosCrit1Exit
   384 00005738 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   385 0000573F 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 00005743 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 00005744 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 00005746 EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 00005748 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 0000574A B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 0000574F 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   395 00005756 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005759 E97F000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 0000575E B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 00005763 E975000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 00005768 84C0                <1>     test al, al
   402 0000576A 741F                <1>     jz .get
   403 0000576C 3C02                <1>     cmp al, 2
   404 0000576E 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005770 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   407 00005777 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 0000577B 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005781 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005785 E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 0000578A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 0000578B 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   414 00005792 31C0                <1>     xor eax, eax
   415 00005794 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 0000579A 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 0000579D 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 000057A1 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 000057A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 000057A7 B801000000          <1>     mov eax, errInvFnc
   422 000057AC EB2F                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 000057AE 50                  <1>     push rax
   428 000057AF 53                  <1>     push rbx
   429 000057B0 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 000057B7 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 000057BA 7408                <1>     je .ok1
   433 000057BC 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 000057BF 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 000057C1 5B                  <1>     pop rbx
   437 000057C2 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 000057C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 000057C4 31C0                <1>     xor eax, eax
   441 000057C6 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 000057C9 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 000057CD 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 000057D4 4801C3              <1>     add rbx, rax
   445 000057D7 EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 000057D9 5B                  <1>     pop rbx ;Pop off the stack first!
   448 000057DA 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 000057DB B007                <1>     mov al, errMCBbad   ;Yikes!
   451                              <1> mcbErrHdlr:
   452                              <1>     ;Jumped to with eax = error code
   453 000057DD C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   454 000057E4 E8C31B0000          <1>     call extErrExit ;Error thru the unified error handler
   455 000057E9 3C07                <1>     cmp al, errMCBbad
   456                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000057EB 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 000057ED EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    39                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 000057EF 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 000057F1 E9E3190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 000057F6 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 000057FC C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 000057FF B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005804 E9D0190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 00005809 C605(15050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005810 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 00005817 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 00005819 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 0000581A EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 0000581C 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 00005823 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 00005827 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 00005828 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 0000582F 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 00005833 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 00005837 4C89C6              <1>     mov rsi, r8
    52 0000583A 4889D7              <1>     mov rdi, rdx
    53 0000583D B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 00005842 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 00005845 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 0000584D F605(15050000)FF    <1>     test byte [pspCopyFlg], -1
    57 00005854 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 00005856 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 0000585E 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 00005862 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 00005866 31C9                <1>     xor ecx, ecx
    64 00005868 B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 0000586D 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005871 B0FF                <1>     mov al, -1
    67 00005873 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 00005875 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005877 E898F4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 0000587C 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 0000587F 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005883 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005887 67E31C              <1>     jecxz .copy
    77 0000588A FFC9                <1>     dec ecx
    78 0000588C AC                  <1>     lodsb   ;Get the SFTndx in al
    79 0000588D 0FB6D8              <1>     movzx ebx, al
    80 00005890 53                  <1>     push rbx
    81 00005891 E80DF5FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005896 58                  <1>     pop rax
    83 00005897 7508                <1>     jnz .badJFT
    84 00005899 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 0000589A E81BF5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 0000589F EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 000058A1 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 000058A4 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 000058A6 C605(15050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 000058AD 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 000058AE 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 000058B1 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 000058B5 B022                <1>     mov al, 22h
    97 000058B7 E8F3150000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 000058BC 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 000058BF 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 000058C1 B023                <1>     mov al, 23h
   101 000058C3 E8E7150000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 000058C8 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 000058CB 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 000058CD B024                <1>     mov al, 24h
   105 000058CF E8DB150000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 000058D4 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 000058D7 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 000058D9 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 000058DE 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 000058E4 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 000058E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 000058E9 C605(06070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 000058F0 81FA06000000        <1>     cmp edx, 6
   120 000058F6 7305                <1>     jae .aboveMinimum
   121 000058F8 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 000058FD 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005904 89D3                <1>     mov ebx, edx
   129 00005906 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005907 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005908 E8B3FCFFFF          <1>     call reallocMemory
   132 0000590D 5B                  <1>     pop rbx
   133 0000590E 58                  <1>     pop rax
   134 0000590F 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005911 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005915 EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 00005917 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ; Step 0
   143                              <1> ;For now, just adjust error level in var
   144 00005919 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   145 0000591B 8625(06070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   146 00005921 F605(8C040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   147 00005928 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   148 0000592A 8625(8C040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   149 00005930 C605(06070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   150                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   151 00005937 8A25(06070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   152                              <1> .storeELvl:
   153 0000593D 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   154                              <1>     
   155                              <1> ; Step 1
   156 00005944 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   157 00005946 CD2A                <1>     int 2Ah
   158 00005948 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   159 0000594D 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   160 00005954 CD2F                <1>     int 2Fh
   161                              <1> ; Step 2
   162                              <1> .step1:
   163 00005956 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   164 0000595D 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   165 00005960 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   166 00005964 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   167 00005967 0F84BC000000        <1>     je .exit
   168                              <1> ; Step 3
   169 0000596D E8AFCEFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   170                              <1> ; Step 3.5
   171 00005972 803D(06070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   172 00005979 747A                <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   173                              <1> ; Step 4
   174 0000597B 803D(06070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   175 00005982 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   176 00005984 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   177 00005989 CD2F                <1>     int 2Fh
   178                              <1> .skipAbortNetClose:
   179 0000598B FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   180 00005991 FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   181                              <1> 
   182 00005997 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   183 0000599E 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   184 000059A2 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   185                              <1> .s4lp:
   186 000059A4 53                  <1>     push rbx
   187 000059A5 51                  <1>     push rcx
   188 000059A6 E8ECD9FFFF          <1>     call closeFileHdl
   189 000059AB 59                  <1>     pop rcx
   190 000059AC 5B                  <1>     pop rbx
   191 000059AD FFC3                <1>     inc ebx ;Goto next handle to close
   192 000059AF 39CB                <1>     cmp ebx, ecx
   193 000059B1 75F1                <1>     jne .s4lp   ;Keep looping for all entries in the JFT 
   194                              <1> ;Step 5
   195                              <1> .step5:
   196 000059B3 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   197                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   198                              <1>     ; with the currentPSP signature and free them.
   199 000059BA 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   200                              <1> .s5lp:  ;And walk the chain
   201                              <1> ;First verify the address in rsi is a valid mcb
   202 000059C1 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   203 000059C3 80F94D              <1>     cmp cl, mcbMarkCtn
   204 000059C6 7405                <1>     je .checkToFree
   205 000059C8 80F95A              <1>     cmp cl, mcbMarkEnd
   206 000059CB 7528                <1>     jne .step6  ;Something wrong so stop freeing
   207                              <1> .checkToFree:
   208 000059CD 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   209 000059D1 750F                <1>     jne .noFree
   210 000059D3 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   211 000059D7 53                  <1>     push rbx
   212 000059D8 51                  <1>     push rcx
   213 000059D9 56                  <1>     push rsi
   214 000059DA E8D9FAFFFF          <1>     call freeMemory ;Free this memory block
   215 000059DF 5E                  <1>     pop rsi
   216 000059E0 59                  <1>     pop rcx
   217 000059E1 5B                  <1>     pop rbx
   218                              <1>     ;If an error occured, the internal vars will be set.
   219                              <1> .noFree:
   220 000059E2 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   221 000059E5 740E                <1>     je .step6   ;Skip if we are
   222 000059E7 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   223 000059EA 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   224 000059EE 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   225 000059F3 EBCC                <1>     jmp short .s5lp
   226                              <1> ;Step 6
   227                              <1> .step6:
   228                              <1> 
   229 000059F5 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   230                              <1> 
   231 000059FB 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   232 000059FF 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   233                              <1> ;Step 7
   234                              <1>     ;rbx points to current PSP, the old parent task
   235                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   236 00005A06 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   237 00005A0A B024                <1>     mov al, 24h
   238 00005A0C E8CF1B0000          <1>     call setIntVector
   239 00005A11 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   240 00005A15 B023                <1>     mov al, 23h
   241 00005A17 E8C41B0000          <1>     call setIntVector
   242 00005A1C 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   243 00005A20 B022                <1>     mov al, 22h
   244 00005A22 52                  <1>     push rdx
   245 00005A23 E8B81B0000          <1>     call setIntVector
   246 00005A28 5A                  <1>     pop rdx
   247                              <1> ;Step 8
   248                              <1> .exit:
   249 00005A29 B0FF                <1>     mov al, -1  ;Flush all drive buffers
   250 00005A2B E831190000          <1>     call dosCrit1Enter
   251 00005A30 E8F8ACFFFF          <1>     call flushAllBuffersForDrive
   252 00005A35 E831190000          <1>     call dosCrit1Exit
   253                              <1> 
   254 00005A3A FA                  <1>     cli
   255 00005A3B 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   256 00005A42 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   257                              <1>     ;Make the parent register frame the current one
   258                              <1>     ;Make RSP point to user stack from parent entry to exec
   259 00005A46 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   260                              <1> 
   261 00005A4A 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   262 00005A4F 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h ;Mimic DOS's return flags
   263                              <1> 
   264 00005A58 C605(96040000)00    <1>     mov byte [Int24Trans], 0    ;Clear this flag
   265 00005A5F C605(08040000)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   266 00005A66 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset
   267 00005A6D E8C1180000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   268 00005A72 48CF                <1>     iretq   ;and return to address that was in rdx
    40                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 00005A74 55                  <1>     push rbp
   100 00005A75 4889E5              <1>     mov rbp, rsp
   101 00005A78 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005A7F 31C9                <1>     xor ecx, ecx
   104 00005A81 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105                              <1>     ;These two are cleared
   106                              <1>     ;mov qword [rbp - execFrame.pEnvBase], rcx
   107                              <1>     ;mov qword [rbp - execFrame.pProgBase], rcx
   108 00005A85 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   109 00005A89 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   110                              <1> 
   111 00005A8D B403                <1>     mov ah, execOverlay
   112 00005A8F F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   113 00005A96 7402                <1>     jz short .noMulti
   114 00005A98 B404                <1>     mov ah, execBkgrnd
   115                              <1> .noMulti:
   116 00005A9A 38E0                <1>     cmp al, ah
   117 00005A9C 7615                <1>     jbe .validSubfunction
   118                              <1> .badSubFunction:
   119 00005A9E B801000000          <1>     mov eax, errInvFnc
   120 00005AA3 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   121                              <1> .badExit:
   122 00005AAA 4889EC              <1>     mov rsp, rbp
   123 00005AAD 5D                  <1>     pop rbp
   124 00005AAE E9F9180000          <1>     jmp extErrExit
   125                              <1> 
   126                              <1> .validSubfunction:
   127 00005AB3 3C02                <1>     cmp al, execInvld
   128 00005AB5 74E7                <1>     je .badSubFunction
   129                              <1>     ;Save registers for each function call
   130 00005AB7 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   131 00005ABB 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   132 00005ABF 0FB6C0              <1>     movzx eax, al
   133 00005AC2 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   134 00005AC6 4889D7              <1>     mov rdi, rdx
   135 00005AC9 E88C150000          <1>     call strlen ;Get string length in cx
   136 00005ACE 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   137                              <1>     ;Now open the file we wanna yeet to
   138 00005AD2 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   139 00005AD4 55                  <1>     push rbp    ;Preserve local frame ptr
   140 00005AD5 E87BD7FFFF          <1>     call openFileHdl
   141 00005ADA 5D                  <1>     pop rbp
   142 00005ADB 72CD                <1>     jc .badExit ;Exit preserving error code in al
   143                              <1>     ;Now ax has the file handle
   144 00005ADD 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   145 00005AE1 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   146 00005AE4 E890F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   147 00005AE9 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   148 00005AED F7C280000000        <1>     test edx, devCharDev
   149 00005AF3 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   150 00005AF5 B002                <1>     mov al, errFnf
   151 00005AF7 E932060000          <1>     jmp .cleanAndFail
   152                              <1> .validDiskFile:
   153 00005AFC 31C0                <1>     xor eax, eax
   154 00005AFE 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   155 00005B02 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   156 00005B06 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   157 00005B0E 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   158 00005B14 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 00005B18 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 00005B1B 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   161 00005B1E 7514                <1>     jnz short .copyEnvironmentBlock
   162 00005B20 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 00005B27 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   164 00005B2B 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   165 00005B2F 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   166 00005B32 746D                <1>     jz short .loadProgram
   167                              <1> .copyEnvironmentBlock:
   168 00005B34 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   169                              <1>     ;Get the length of the environment
   170 00005B37 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   171 00005B3C 31C0                <1>     xor eax, eax
   172 00005B3E 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   173                              <1> .envVerifyLp:
   174 00005B41 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   175 00005B43 7531                <1>     jnz short .invalidEnvironmentError
   176 00005B45 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   177 00005B48 FFC9                <1>     dec ecx
   178 00005B4A AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   179 00005B4B 75F4                <1>     jnz short .envVerifyLp
   180                              <1> 
   181 00005B4D 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   182 00005B50 57                  <1>     push rdi     ;Save the length of the environment block
   183 00005B51 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   184 00005B57 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   185 00005B5B 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   186 00005B5D 89FB                <1>     mov ebx, edi
   187 00005B5F C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   188 00005B62 55                  <1>     push rbp
   189 00005B63 E84CF7FFFF          <1>     call allocateMemory
   190 00005B68 5D                  <1>     pop rbp
   191 00005B69 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   192 00005B6A 7314                <1>     jnc short .copyEnvironment
   193                              <1>     ;Fall thru if not enuff memory
   194                              <1> .insufficientMemory:
   195 00005B6C B808000000          <1>     mov eax, errNoMem
   196 00005B71 E9B8050000          <1>     jmp .cleanAndFail
   197                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   198 00005B76 B80A000000          <1>     mov eax, errBadEnv
   199 00005B7B E9AE050000          <1>     jmp .cleanAndFail
   200                              <1> 
   201                              <1> .copyEnvironment:
   202                              <1>     ;rax has the ptr to allocated memory block
   203                              <1>     ;rcx has the number of chars to copy from the source env block
   204 00005B80 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   205 00005B83 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   206 00005B87 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   207 00005B8B 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   208 00005B8E F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   209 00005B90 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   210 00005B95 66AB                <1>     stosw       ;Away you go!
   211 00005B97 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   212 00005B9B 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   213 00005B9F F3A4                <1>     rep movsb   ;Move the bytes to rdi
   214                              <1> ;Done with the environment... more or less
   215                              <1> .loadProgram:
   216 00005BA1 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   217 00005BA6 488D15(EA190000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   218 00005BAD E898050000          <1>     call .readDataFromHdl
   219 00005BB2 0F8271050000        <1>     jc .badFmtErr
   220 00005BB8 85C0                <1>     test eax, eax   ;Were zero bytes read?
   221 00005BBA 0F8469050000        <1>     jz .badFmtErr
   222 00005BC0 3D40000000          <1>     cmp eax, imageDosHdr_size
   223 00005BC5 0F826F030000        <1>     jb .loadCom
   224                              <1> 
   225 00005BCB 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   226 00005BD0 740B                <1>     je .proceedEXE
   227 00005BD2 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   228 00005BD7 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   229                              <1> .proceedEXE:
   230                              <1>     ;Now we need to read e_lfanew
   231 00005BDD 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   232 00005BDE 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   233 00005BE1 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   234 00005BE4 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   235 00005BE6 30C0                <1>     xor al, al  ;Set file pointer from start of file
   236 00005BE8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   237 00005BEC E890D8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   238 00005BF1 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   239 00005BF2 B918000000          <1>     mov ecx, imageFileHeader_size
   240 00005BF7 E84E050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   241 00005BFC 85C0                <1>     test eax, eax   ;Were zero bytes read?
   242 00005BFE 0F8425050000        <1>     jz .badFmtErr
   243 00005C04 3D18000000          <1>     cmp eax, imageFileHeader_size
   244 00005C09 0F821A050000        <1>     jb .badFmtErr
   245                              <1>     ;So now rdx points to the imageFileHeader
   246 00005C0F 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   247 00005C15 0F850E050000        <1>     jne .badFmtErr
   248 00005C1B 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   249 00005C21 0F8502050000        <1>     jne .badFmtErr
   250                              <1>     ;Check the binary is executable
   251 00005C27 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   252 00005C2B 66A90200            <1>     test ax, imageFileExecutable
   253 00005C2F 0F84F4040000        <1>     jz .badFmtErr
   254 00005C35 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   255                              <1> 
   256 00005C39 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   257 00005C3F 0F82E4040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   258                              <1>     ;Now save the number of sections in the the file
   259 00005C45 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   260 00005C49 85C0                <1>     test eax, eax   ;If this is 0, what?
   261 00005C4B 0F84D8040000        <1>     jz .badFmtErr
   262 00005C51 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   263                              <1>     ;Now load Optional header, file ptr points to it so all good!
   264 00005C55 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   265                              <1>     ;rdx points to exeHdrSpace
   266 00005C5A E8EB040000          <1>     call .readDataFromHdl
   267 00005C5F 85C0                <1>     test eax, eax   ;Were zero bytes read?
   268 00005C61 0F84C2040000        <1>     jz .badFmtErr
   269 00005C67 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   270 00005C6C 0F82B7040000        <1>     jb .badFmtErr
   271                              <1>     ;Now File Ptr points to data dirs, not an issue
   272 00005C72 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   273                              <1>     ;We load the program in, one section at a time, reading section headers in
   274                              <1>     ; one at a time to the section header internal buffer.
   275 00005C79 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   276 00005C81 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   277 00005C83 8B1D(221A0000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   278 00005C89 488B05(321A0000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   279 00005C90 4885C0              <1>     test rax, rax
   280 00005C93 750A                <1>     jnz .notDefaultStackAlloc
   281 00005C95 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   281 00005C9E 00                  <1>
   282                              <1> .notDefaultStackAlloc:
   283 00005C9F 01C3                <1>     add ebx, eax    ;Add stack allocation
   284 00005CA1 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   285                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   286                              <1>     ; section aligned and so we will need to align before reading, to 
   287                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   288 00005CA7 031D(0A1A0000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   289 00005CAD 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   290 00005CB0 81C311000000        <1>     add ebx, 11h
   291 00005CB6 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   292 00005CB9 55                  <1>     push rbp
   293 00005CBA E8F5F5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   294 00005CBF 5D                  <1>     pop rbp
   295 00005CC0 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   296 00005CC6 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   297 00005CCA 480500010000        <1>     add rax, psp_size
   298 00005CD0 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   299                              <1>     ;Finally, just check that we have some code to execute. 
   300                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   301 00005CD4 813D(EE190000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   301 00005CDC 0000                <1>
   302 00005CDE 0F8445040000        <1>     je .badFmtErr   ;If no bytes, exit error
   303 00005CE4 EB0B                <1>     jmp short .exeProceed1
   304                              <1> .exeOvlySkipAlloc:
   305 00005CE6 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   306 00005CEA 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   307 00005CED 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   308                              <1> .exeProceed1:
   309                              <1> ;===========================================================================
   310                              <1>     ;The below blocks are being kept because they can be turned on later
   311                              <1>     ; to change this exe loader to force section alignment of the 
   312                              <1>     ; base load address. It appears there is no need to enforce that the 
   313                              <1>     ; base load address be section aligned, but individual sections need
   314                              <1>     ; to adhere to the section alignment requirements thereafter. 
   315                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   316                              <1>     ; first section gets places at the load address and not at some
   317                              <1>     ; offset from it (as is usually the case, offset 1000h).
   318                              <1> ;===========================================================================
   319                              <1>     ;=======================================================================
   320                              <1>     ;Now we align the progBase to full header size aligned to the next page
   321                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   322                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   323                              <1>     ;=======================================================================
   324                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   325                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   326                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   327                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   328                              <1>     ;push rax
   329                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   330                              <1>     ;dec ecx ;Turn into a mask
   331                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   332                              <1>     ;inc ecx
   333                              <1>     ;sub rcx, rax
   334                              <1>     ;pop rdi
   335                              <1>     ;xor eax, eax
   336                              <1>     ;rep stosb
   337                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   338                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   339                              <1> 
   340                              <1>     ;So now copy one section at a time, read section header in
   341                              <1>     ;File pointer points to the directory table, so skip that
   342 00005CF1 8B15(561A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   343                              <1>     ;Load however many directories we have into place
   344                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   345 00005CF7 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   346 00005CFA 31C9                <1>     xor ecx, ecx
   347 00005CFC 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   348 00005D00 B001                <1>     mov al, 1   ;Move handle forwards from current position
   349 00005D02 E87AD7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   350                              <1>     ;eax has pointer location after adjustment
   351 00005D07 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   352                              <1>     ;File now points to start of Section headers. Read first header in.
   353                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   354 00005D0A 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   355 00005D0E 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   356 00005D12 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   357 00005D14 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   358                              <1> .loadLp:
   359 00005D18 51                  <1>     push rcx    ;Save # of segments left on stack
   360 00005D19 57                  <1>     push rdi    ;Save the current buffer ptr here
   361 00005D1A B928000000          <1>     mov ecx, imageSectionHdr_size
   362 00005D1F 488D15(5A1A0000)    <1>     lea rdx, sectHdr    ;Read section headers here
   363 00005D26 E81F040000          <1>     call .readDataFromHdl
   364 00005D2B 5F                  <1>     pop rdi
   365 00005D2C 59                  <1>     pop rcx
   366 00005D2D 85C0                <1>     test eax, eax
   367 00005D2F 0F84F4030000        <1>     jz .badFmtErr
   368 00005D35 3D28000000          <1>     cmp eax, imageSectionHdr_size
   369 00005D3A 0F85E9030000        <1>     jne .badFmtErr
   370                              <1>     ;File ptr moved forwards to next section header
   371 00005D40 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   372                              <1>     ;Section header read, now we load section into memory
   373                              <1>     ;Move file ptr to data location
   374 00005D47 8B15(6E1A0000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   375 00005D4D 85D2                <1>     test edx, edx
   376 00005D4F 744B                <1>     jz short .skipRawPtrMove
   377 00005D51 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   378 00005D55 31C0                <1>     xor eax, eax    ;Seek from start of file
   379 00005D57 51                  <1>     push rcx
   380 00005D58 57                  <1>     push rdi
   381 00005D59 E823D7FFFF          <1>     call lseekHdl
   382 00005D5E 5F                  <1>     pop rdi
   383 00005D5F 59                  <1>     pop rcx
   384                              <1>     ;Is this a overlay load?
   385 00005D60 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   386 00005D68 7532                <1>     jne short .skipRawPtrMove
   387                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   388                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   389                              <1>     ;Is this is the first segment with data being read into memory?
   390 00005D6A 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   391 00005D6E 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   392 00005D76 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   393                              <1>     ;Now rebase the program to point the first byte of the first
   394                              <1>     ; section at the ProgBase.
   395 00005D78 51                  <1>     push rcx
   396 00005D79 57                  <1>     push rdi
   397 00005D7A 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   398 00005D7E 8B0D(661A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   399 00005D84 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   400 00005D87 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   401 00005D8B 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   402 00005D8F 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   403 00005D93 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   404 00005D96 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   405 00005D9A 5F                  <1>     pop rdi
   406 00005D9B 59                  <1>     pop rcx
   407                              <1> .skipRawPtrMove:
   408 00005D9C 51                  <1>     push rcx
   409 00005D9D 31FF                <1>     xor edi, edi
   410 00005D9F 8B3D(661A0000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   411 00005DA5 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   412                              <1>     ;If a section has a virtual address outside of the allocation arena
   413                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   414                              <1>     ; next section.
   415 00005DA9 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   416 00005DAD 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   417 00005DB0 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   418 00005DB2 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   419 00005DB9 31C9                <1>     xor ecx, ecx
   420 00005DBB 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   421 00005DBE 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   422 00005DC2 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   423 00005DC9 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   424 00005DCC 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   425 00005DCF 7713                <1>     ja short .okToLoad
   426                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   427                              <1> 
   428                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   429 00005DD1 F705(7E1A0000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   429 00005DD9 0000                <1>
   430 00005DDB 0F8548030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   431                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   432                              <1> 
   433                              <1>     ;Else, just skip this section, goto next section
   434 00005DE1 59                  <1>     pop rcx
   435 00005DE2 EB3F                <1>     jmp short .gotoNextSection
   436                              <1> .okToLoad:
   437 00005DE4 8B0D(621A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   438 00005DEA 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   439 00005DED 57                  <1>     push rdi    ;Save section in memory locally
   440 00005DEE E857030000          <1>     call .readDataFromHdl
   441 00005DF3 5F                  <1>     pop rdi
   442 00005DF4 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   443 00005DF5 0F822E030000        <1>     jc .badFmtErr
   444                              <1>     ;Don't check for a zero section read as empty sections may be present!
   445 00005DFB 3B05(621A0000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   446 00005E01 0F8522030000        <1>     jne .badFmtErr
   447                              <1>     ;Data read ok, now fill in any zeros needed
   448 00005E07 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   449                              <1> 
   450 00005E0A 51                  <1>     push rcx
   451                              <1>     ;Here do section padding
   452 00005E0B 4889F8              <1>     mov rax, rdi    ;Get the current address
   453 00005E0E 8B0D(0A1A0000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   454 00005E14 FFC9                <1>     dec ecx ;Turn into a mask
   455 00005E16 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   456 00005E19 FFC1                <1>     inc ecx
   457 00005E1B 4829C1              <1>     sub rcx, rax
   458 00005E1E 31C0                <1>     xor eax, eax
   459 00005E20 F3AA                <1>     rep stosb
   460 00005E22 59                  <1>     pop rcx
   461                              <1> .gotoNextSection:
   462 00005E23 FFC9                <1>     dec ecx ;Decrement our section counter
   463 00005E25 7419                <1>     jz short .doExeFixups
   464                              <1>     ;Read next section header in here
   465 00005E27 51                  <1>     push rcx
   466 00005E28 57                  <1>     push rdi
   467 00005E29 30C0                <1>     xor al, al  ;Move rel start of file
   468 00005E2B 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   469 00005E2E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   470 00005E32 31C9                <1>     xor ecx, ecx
   471 00005E34 E848D6FFFF          <1>     call lseekHdl
   472 00005E39 5F                  <1>     pop rdi
   473 00005E3A 59                  <1>     pop rcx
   474 00005E3B E9D8FEFFFF          <1>     jmp .loadLp
   475                              <1> .doExeFixups:
   476                              <1> ;Here we fixup addresses if needed
   477                              <1> ;If the program is loaded at its desired location never need to relocate.
   478                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   479                              <1> ;   If the program has had it's .reloc section stripped by the linker
   480                              <1> ;       or has no .reloc directory, we fail
   481                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   482                              <1> ;       relocations anyway.
   483                              <1> 
   484                              <1> ;If program base = desired load, skip relocs
   485 00005E40 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   486 00005E44 483B15(021A0000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   487 00005E4B 0F84CA000000        <1>     je .exeComplete
   488                              <1> ;If program has had relocs stripped, fail
   489 00005E51 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   490 00005E55 66A90100            <1>     test ax, imageFileRelocsStripped
   491 00005E59 0F85CA020000        <1>     jnz .badFmtErr
   492                              <1> ;If program has no .reloc section, fail
   493 00005E5F 8B15(561A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   494 00005E65 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   495 00005E6B 0F82B8020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   496                              <1> ;Now we get the reloc section
   497 00005E71 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   498 00005E74 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   499                              <1>     ;eax now points to position in file of directory entry for reloc
   500 00005E7A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   501 00005E7E 31C0                <1>     xor eax, eax
   502 00005E80 E8FCD5FFFF          <1>     call lseekHdl   ;Move handle there in file
   503 00005E85 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   504 00005E88 B908000000          <1>     mov ecx, imageDataDirectory_size
   505                              <1>     ;Read 8 bytes into sectHdr space
   506 00005E8D 488D15(5A1A0000)    <1>     lea rdx, sectHdr
   507 00005E94 E8B1020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   508 00005E99 85C0                <1>     test eax, eax
   509 00005E9B 0F8488020000        <1>     jz .badFmtErr
   510 00005EA1 39C8                <1>     cmp eax, ecx
   511 00005EA3 0F8580020000        <1>     jne .badFmtErr
   512                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   513 00005EA9 8B35(5A1A0000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   514 00005EAF 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   515 00005EB1 7468                <1>     jz .exeComplete   ;... including if overlay
   516 00005EB3 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   517                              <1>     ;Now rsi points to where in memory the relocation data table is
   518                              <1>     ;Now compute the relocation factor =
   519                              <1>     ;   Difference from the load address and prefered
   520 00005EB7 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   521 00005EBB 482B05(021A0000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   522 00005EC2 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   523 00005ECA 750F                <1>     jne short .notOverlayReloc
   524                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   525                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   526                              <1>     ;This should be the same as ProgBase anyway for overlays.
   527 00005ECC 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   528 00005ED0 482B05(021A0000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   529                              <1>     ;Store this as the overlay program base
   530 00005ED7 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   531                              <1> .notOverlayReloc:
   532 00005EDB 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   533                              <1>     ;rsi points to relocation data table in memory
   534 00005EDE 8B0D(5E1A0000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   535 00005EE4 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   536 00005EE6 7433                <1>     jz .exeComplete
   537                              <1>     ;rsi points to the first base relocation block. The relocations begin
   538                              <1>     ; after the first block
   539                              <1>     ;ecx has the number of base relocation blocks to process.
   540                              <1> .nextBlock:
   541 00005EE8 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   542 00005EE9 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   543 00005EEB 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   544 00005EEF 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   545 00005EF2 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   546 00005EF5 67E31E              <1>     jecxz .blockDone    
   547 00005EF8 81E908000000        <1>     sub ecx, 8
   548 00005EFE 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   549 00005F05 D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   550                              <1> .blockNotDone:
   551 00005F07 66AD                <1>     lodsw   ;Get the next page offset word
   552 00005F09 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   553                              <1>     ;rdi points to base, rax give offset into 4Kb page
   554 00005F0E 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   555 00005F12 FFC9                <1>     dec ecx
   556 00005F14 75F1                <1>     jnz .blockNotDone
   557                              <1> .blockDone:
   558 00005F16 59                  <1>     pop rcx
   559 00005F17 FFC9                <1>     dec ecx
   560 00005F19 75CD                <1>     jnz .nextBlock
   561                              <1> .exeComplete:
   562 00005F1B 8B05(FA190000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   563                              <1>     ;Now get EP relative to the (rescaled) load address.
   564 00005F21 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   565 00005F25 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   566 00005F29 FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   567 00005F2F 0F82F4010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   568 00005F35 E9A5000000          <1>     jmp .buildChildPSP
   569                              <1> .loadCom:
   570                              <1>     ;File is open here, so just read the file into memory. 
   571                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   572                              <1>     ;Allocate 64Kb of memory, or as much as we can
   573 00005F3A 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   574 00005F42 7450                <1>     je .comOverlay
   575 00005F44 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   576 00005F49 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   577 00005F4C 55                  <1>     push rbp
   578 00005F4D E862F3FFFF          <1>     call allocateMemory
   579 00005F52 5D                  <1>     pop rbp
   580 00005F53 734C                <1>     jnc .comallocOk
   581 00005F55 3C08                <1>     cmp al, errNoMem
   582 00005F57 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available
   584                              <1>     ;We check if this value is psp_size more than filesize
   585 00005F5D 53                  <1>     push rbx    ;Save new minimum size
   586 00005F5E B802000000          <1>     mov eax, 2    ;Reposition to end of file
   587 00005F63 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   588 00005F67 31D2                <1>     xor edx, edx    ;Go to end of file
   589 00005F69 E813D5FFFF          <1>     call lseekHdl
   590                              <1>     ;eax has file size
   591 00005F6E 5B                  <1>     pop rbx ;Get back max alloc size
   592 00005F6F 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   593 00005F71 29C2                <1>     sub edx, eax
   594 00005F73 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   595 00005F79 0F82EDFBFFFF        <1>     jb .insufficientMemory   ;Fail
   596 00005F7F 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   597 00005F82 55                  <1>     push rbp
   598 00005F83 E82CF3FFFF          <1>     call allocateMemory
   599 00005F88 5D                  <1>     pop rbp
   600 00005F89 0F829F010000        <1>     jc .cleanAndFail
   601 00005F8F E90D000000          <1>     jmp .comallocOk
   602                              <1> .comOverlay:
   603                              <1>     ;Here we simply read the file into the buffer provided
   604 00005F94 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   605 00005F98 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   606 00005F9B 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   607 00005F9F EB0A                <1>     jmp short .comRead
   608                              <1> .comallocOk:
   609                              <1>     ;rax should point to the first byte
   610 00005FA1 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   611 00005FA5 480500010000        <1>     add rax, psp_size
   612                              <1> .comRead:
   613 00005FAB 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   614                              <1> 
   615 00005FAF B802000000          <1>     mov eax, 2    ;Reposition to end of file
   616 00005FB4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00005FB8 31D2                <1>     xor edx, edx    ;Go to end of file
   618 00005FBA E8C2D4FFFF          <1>     call lseekHdl
   619                              <1>     ;eax has filesize now
   620 00005FBF 50                  <1>     push rax    ;Save filesize
   621 00005FC0 31C0                <1>     xor eax, eax    ;Reposition to start of file
   622 00005FC2 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   623 00005FC6 31D2                <1>     xor edx, edx    ;Go to start of file
   624 00005FC8 E8B4D4FFFF          <1>     call lseekHdl
   625 00005FCD 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   626 00005FCE 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   627 00005FD2 E873010000          <1>     call .readDataFromHdl   ;Read from the file handle
   628 00005FD7 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   629 00005FDB 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   630                              <1> .buildChildPSP:
   631                              <1>     ;We can close handle now
   632 00005FDF 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   633 00005FE3 55                  <1>     push rbp
   634 00005FE4 E8AED3FFFF          <1>     call closeFileHdl   ;Close the file
   635 00005FE9 5D                  <1>     pop rbp
   636                              <1> 
   637                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   638 00005FEA 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   639 00005FF2 0F840E010000        <1>     je .overlayExit
   640                              <1>     ;Now build the PSP
   641 00005FF8 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   642 00005FFB 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   643 00005FFF 52                  <1>     push rdx
   644 00006000 55                  <1>     push rbp
   645 00006001 E803F8FFFF          <1>     call createPSP
   646 00006006 5D                  <1>     pop rbp
   647 00006007 5A                  <1>     pop rdx
   648                              <1> 
   649                              <1>     ;Now copy the environment block over if rax != 0
   650 00006008 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   651 0000600C 4885DB              <1>     test rbx, rbx
   652 0000600F 7404                <1>     jz short .skipEnvCopy
   653 00006011 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   654                              <1> .skipEnvCopy:
   655                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   656 00006015 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   657 0000601C E840130000          <1>     call dosCrit1Enter
   658 00006021 E84B010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   659                              <1> 
   660 00006026 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   661 0000602D 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   662                              <1> 
   663                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   664                              <1>     ; and set FS to point to the PSP
   665 00006034 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   666                              <1> 
   667 00006038 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   668 0000603C B925000000          <1>     mov ecx, fcb_size
   669 00006041 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   670 00006045 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   671 00006047 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   672 00006049 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   673 0000604D B925000000          <1>     mov ecx, fcb_size
   674 00006052 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   675 00006056 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   676 00006058 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   677 0000605A 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   678 0000605E 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   679 00006065 B980000000          <1>     mov ecx, 80h
   680 0000606A F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   681                              <1> 
   682 0000606C 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   683 0000606E 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   684                              <1> 
   685                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   686 00006071 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   687 00006076 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   688 00006078 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   689 0000607C 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   690                              <1> 
   691 0000607E E85A0E0000          <1>     call getUserRegs    ;Need to get Int 22h address from stack
   692 00006083 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   693 00006087 4889470A            <1>     mov qword [rdi + psp.oldInt22h], rax    ;and save it in PSP
   694 0000608B 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   695 0000608E B022                <1>     mov al, 22h
   696 00006090 E84B150000          <1>     call setIntVector   ;bx preserved by this call
   697                              <1> 
   698                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   699 00006095 88D8                <1>     mov al, bl
   700 00006097 30DB                <1>     xor bl, bl
   701 00006099 E8630E0000          <1>     call getCDSNotJoin
   702 0000609E 7302                <1>     jnc .drive1Ok
   703 000060A0 B3FF                <1>     mov bl, -1
   704                              <1> .drive1Ok:
   705 000060A2 88F8                <1>     mov al, bh
   706 000060A4 30FF                <1>     xor bh, bh
   707 000060A6 E8560E0000          <1>     call getCDSNotJoin
   708 000060AB 7302                <1>     jnc .drive2Ok
   709 000060AD B7FF                <1>     mov bh, -1
   710                              <1> .drive2Ok:
   711                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   712                              <1>     ;rdi has pointer to psp
   713 000060AF 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   714                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   715 000060B2 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   716 000060B7 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   716 000060C0 FF                  <1>
   717 000060C1 4821C6              <1>     and rsi, rax    ;To align downwards
   718                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   719                              <1>     ;That is the job of the runtime to handle.
   720                              <1> ;Registers carrying data at this point:
   721                              <1> ;bx = FCB drive statuses
   722                              <1> ;rsi = Stack Base
   723                              <1> ;rbp = execFrame
   724 000060C4 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   725 000060C8 750B                <1>     jne short .noBg
   726                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   727 000060CA 56                  <1>     push rsi
   728 000060CB E80D0E0000          <1>     call getUserRegs
   729 000060D0 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   730 000060D4 5E                  <1>     pop rsi
   731                              <1> .noBg:
   732 000060D5 FF15(9F000000)      <1>     call qword [launchTask]
   733 000060DB 7251                <1>     jc short .cleanAndFail
   734                              <1> ;Final step: Transfer control
   735 000060DD 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   736 000060E1 742C                <1>     je .xfrProgram
   737 000060E3 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   738 000060E7 741D                <1>     je .overlayExit ;Skip the below for background tasks
   739 000060E9 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   740 000060ED 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   741 000060F1 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   742 000060F5 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   743 000060F8 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   744 000060FB 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 00006102 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   746                              <1> .overlayExit:
   747 00006106 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   748 00006109 5D                  <1>     pop rbp ;Point rsp to the return address
   749 0000610A E98F120000          <1>     jmp extGoodExit ;And return!
   750                              <1> .xfrProgram:
   751 0000610F FA                  <1>     cli
   752 00006110 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   753 00006113 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   754 0000611A FB                  <1>     sti
   755                              <1> 
   756 0000611B 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   757 0000611C FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   758 0000611F 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   759 00006122 4989F9              <1>     mov r9, rdi
   760 00006125 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   761                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 00006128 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> ;r8 is guaranteed to have a copy of the PSP.
   763                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   764                              <1> ;Everything else is optional and potentially changable at a later stage
   765                              <1> 
   766                              <1> .badFmtErr:
   767 00006129 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   768                              <1> .cleanAndFail:
   769                              <1> ;Close the open file and any open resources and fail
   770 0000612E E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   771 00006133 E833120000          <1>     call dosCrit1Exit
   772 00006138 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   773 0000613C 50                  <1>     push rax    ;Save error code
   774 0000613D 55                  <1>     push rbp
   775 0000613E E854D2FFFF          <1>     call closeFileHdl
   776 00006143 5D                  <1>     pop rbp
   777 00006144 58                  <1>     pop rax
   778 00006145 E960F9FFFF          <1>     jmp .badExit
   779                              <1> 
   780                              <1> .readDataFromHdl:
   781                              <1> ;Input: ecx = Number of bytes to transfer
   782                              <1> ;       rdx = Ptr to the buffer to use
   783 0000614A 52                  <1>     push rdx
   784 0000614B E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   785 00006150 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   786 00006154 55                  <1>     push rbp
   787 00006155 E87BD2FFFF          <1>     call readFileHdl
   788 0000615A 5D                  <1>     pop rbp
   789 0000615B E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   790 00006160 5A                  <1>     pop rdx
   791                              <1>     return
    13                              <2> %%_ret:
    14 00006161 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .clearArenaOwner:
   793 00006162 53                  <1>     push rbx
   794 00006163 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   795 00006165 E8F7110000          <1>     call dosCrit1Enter
   796 0000616A E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   797 0000616F 5B                  <1>     pop rbx
   798                              <1>     return
    13                              <2> %%_ret:
    14 00006170 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> .setPSPArenaOwner:
   800                              <1> ;Sets the current PSP as the arena owner
   801 00006171 53                  <1>     push rbx
   802 00006172 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   803 00006179 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   804 0000617E E8E8110000          <1>     call dosCrit1Exit
   805 00006183 5B                  <1>     pop rbx
   806                              <1>     return
    13                              <2> %%_ret:
    14 00006184 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   807                              <1> .setProgOrEnvArenaOwnerToRBX:
   808                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   809 00006185 9C                  <1>     pushfq
   810 00006186 50                  <1>     push rax
   811                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   812                              <1>     ;This is because they are set up at separate points in the routine!
   813 00006187 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   814 0000618B E80C000000          <1>     call .writeArenaHeaderOwner
   815 00006190 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   816 00006194 E803000000          <1>     call .writeArenaHeaderOwner
   817 00006199 58                  <1>     pop rax
   818 0000619A 9D                  <1>     popfq
   819                              <1>     return
    13                              <2> %%_ret:
    14 0000619B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> .writeArenaHeaderOwner:
   821                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   822                              <1> ;       rbx = Owner ID
   823 0000619C 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   824                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000619F 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825 000061A1 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   826 000061A7 48895801            <1>     mov qword [rax + 1], rbx
   827                              <1>     return
    13                              <2> %%_ret:
    14 000061AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 000061AC 3C01                <1>     cmp al, 01
    12 000061AE 740B                <1>     je .setSC
    13 000061B0 7210                <1>     jb .getSC
    14 000061B2 3C03                <1>     cmp al, 03
    15 000061B4 7214                <1>     jb .getDev
    16 000061B6 741C                <1>     je .setDev
    17 000061B8 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 000061BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 000061BB 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 000061C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 000061C2 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 000061C8 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 000061CA B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 000061CC E80C0D0000          <1>     call getUserRegs
    29 000061D1 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 000061D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 000061D5 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 000061D8 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 000061DB 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 000061DD 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 000061E0 31ED                <1>     xor ebp, ebp    ;Get country table
    57 000061E2 B901000000          <1>     mov ecx, 1      ;Set country table
    58 000061E7 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 000061EE 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 000061F0 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 000061F2 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 000061F4 488D3505A0FFFF      <1>     lea rsi, ctryTbl
    65 000061FB B926000000          <1>     mov ecx, countryStruc_size
    66 00006200 F3A4                <1>     rep movsb
    67 00006202 0FB71DF39FFFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 00006209 E8CF0C0000          <1>     call getUserRegs
    70 0000620E 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 00006212 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 00006214 E985110000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 00006219 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 0000621B E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 00006220 0F8286110000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 00006226 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 00006228 75E8                <1>     jnz .exitNoCountryCode 
    81 0000622A 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 0000622C 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 0000622E 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 00006230 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 00006232 663B1DC39FFFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006239 7499                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   101 0000623B 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 0000623D 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 0000623F B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 00006244 CD2F                <1>     int 2fh
   105 00006246 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 00006248 751F                <1>     jne .errNotInstalled
   107 0000624A 488D35389FFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 00006251 B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 00006256 B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 0000625B 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 0000625D 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 00006260 CD2F                <1>     int 2fh
   113 00006262 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00006264 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00006266 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 00006267 F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 00006268 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 00006269 B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 0000626B EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 0000626D 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 00006273 7250                <1>     jb .invFuncExit
   143 00006275 488D350D9FFFFF      <1>     lea rsi, dosNLSPtr
   144 0000627C 6681FAFFFF          <1>     cmp dx, -1
   145 00006281 660F4415739FFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 00006289 6681FBFFFF          <1>     cmp bx, -1
   147 0000628E 660F441D689FFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 00006296 663B155F9FFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 0000629D 7569                <1>     jne .nlsReq
   150 0000629F 663B1D589FFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 000062A6 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 000062A8 488D35269FFFFF      <1>     lea rsi, charTableArray
   155 000062AF 0FB72D1D9FFFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 000062B6 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 000062B8 7515                <1>     jne .tblFound
   159 000062BA 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 000062C1 FFCD                <1>     dec ebp
   161 000062C3 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 000062C5 B801000000          <1>     mov eax, 1
   165 000062CA E9DD100000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 000062CF A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 000062D0 3C01                <1>     cmp al, 1
   169 000062D2 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 000062D4 B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 000062D9 B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 000062DE F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 000062E0 E8F80B0000          <1>     call getUserRegs
   177 000062E5 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 000062E8 89D8                <1>     mov eax, ebx    
   181 000062EA E9AF100000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 000062EF 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 000062F5 31C0                <1>     xor eax, eax    ;Clear eax
   186 000062F7 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 000062F9 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 000062FB 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 000062FE 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 00006300 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 00006302 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 00006306 EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 00006308 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 0000630B B800140000          <1>     mov eax, 1400h  ;Install check!
   199 00006310 CD2F                <1>     int 2fh
   200 00006312 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 00006314 75AF                <1>     jne .invFuncExit    
   202 00006316 B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 0000631B CD2F                <1>     int 2fh
   204 0000631D 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 0000631F 0F8587100000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 00006325 0FB705A59EFFFF      <1>     movzx eax, word [defaultCP]
   210 0000632C E96D100000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 00006331 3C01                <1>     cmp al, 1
   220 00006333 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 00006335 E8A30B0000          <1>     call getUserRegs
   223 0000633A 0FB71DBD9EFFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 00006341 0FB715899EFFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 00006348 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 0000634B 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 0000634E E94B100000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 00006353 B801000000          <1>     mov eax, errInvFnc
   230 00006358 E94F100000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 0000635D 3C02                <1>     cmp al, 2
   233 0000635F 75F2                <1>     jne .exitBadFunc
   234 00006361 0FB715299EFFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 00006368 B800140000          <1>     mov eax, 1400h
   236 0000636D CD2F                <1>     int 2Fh
   237 0000636F 3CFF                <1>     cmp al, -1
   238 00006371 75E0                <1>     jne .exitBadFunc
   239 00006373 488D350F9EFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 0000637A B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 0000637F CD2F                <1>     int 2Fh
   242 00006381 84C0                <1>     test al, al
   243 00006383 0F8415100000        <1>     jz extGoodExit
   244 00006389 3C41                <1>     cmp al, errNLSAcDen
   245 0000638B 0F851B100000        <1>     jne extErrExit
   246 00006391 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 00006393 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 0000639A C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 000063A1 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 000063A8 C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 000063AF E905100000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 000063B4 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000063B6 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000063B8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 000063B9 53                  <1>     push rbx
   259 000063BA 488D1D679EFFFF      <1>     lea rbx, ucTbl
   260 000063C1 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 000063C3 D7                  <1>     xlatb
   262 000063C4 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 000063C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                                  %include "./src/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> disk pointer
     7                              <1> ;       rbp -> DPB ptr
     8 000063C6 3C0F                <1>     cmp al, drvBadDskChnge
     9 000063C8 7510                <1>     jne .doReq
    10 000063CA 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 000063CB 488B05(E3040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume label ptr
    12 000063D2 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 000063D9 58                  <1>     pop rax
    15                              <1> .doReq:
    16 000063DA E849000000          <1>     call diskDevErr ;Preserves the disk pointer
    17                              <1>     return
    13                              <2> %%_ret:
    14 000063DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 000063E0 50                  <1>     push rax    ;Wanna preserve ax
    24 000063E1 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 000063E6 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 000063E9 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 000063EB 53                  <1>     push rbx
    28 000063EC 488D1D769CFFFF      <1>     lea rbx, hardXlatTbl
    29 000063F3 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 000063F4 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 000063F5 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 000063FC 58                  <1>     pop rax
    34 000063FD 56                  <1>     push rsi
    35 000063FE 488D35109DFFFF      <1>     lea rsi, extErrTbl
    36 00006405 E8FB0F0000          <1>     call setErrorVars
    37 0000640A 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 0000640B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 0000640C 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 0000640F 8825(68040000)      <1>     mov byte [Int24bitfld], ah
    48 00006415 48892D(8E070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 0000641C 56                  <1>     push rsi
    50 0000641D 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 00006421 E87C000000          <1>     call hardErrorCommon
    52 00006426 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00006427 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 00006428 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 0000642A 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 0000642D 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 0000642F 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 00006432 57                  <1>     push rdi        ;Save the buffer pointer
    68 00006433 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 00006436 81FF00000000        <1>     cmp edi, drvWPErr
    70 0000643C 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 0000643E 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 00006441 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 00006447 8A25(68040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 0000644D 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 00006450 F6C301              <1>     test bl, dosBuffer
    79 00006453 7505                <1>     jnz .df0
    80 00006455 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 00006458 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 0000645A F6C302              <1>     test bl, fatBuffer
    84 0000645D 750C                <1>     jnz .df1
    85 0000645F 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 00006462 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Invalidate the count!
    87 00006469 EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 0000646B F6C304              <1>     test bl, dirBuffer
    90 0000646E 7505                <1>     jnz .df2
    91 00006470 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 00006473 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 00006475 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 00006478 8025(00070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 0000647F 0A25(00070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 00006485 0A25(68040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 0000648B E802000000          <1>     call diskDevErrBitfield
   101 00006490 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 00006491 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 00006492 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 00006495 48892D(8E070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 0000649C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 000064A0 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 000064A2 E839FFFFFF          <1>     call xlatHardError
   117 000064A7 50                  <1>     push rax
   118 000064A8 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 000064AD 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 000064AF 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 000064B2 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 000064B3 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   152 000064BA 7204                <1>     jb .noIntError  ;If not 0, enter
   153 000064BC B003                <1>     mov al, critFail    ;Else, return Fail always
   154 000064BE EB6F                <1>     jmp short .exit     ;Don't translate fail to abort
   155                              <1> .noIntError:
   156 000064C0 488925(60040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack
   157 000064C7 66813D(3A070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   157 000064CF FF                  <1>
   158 000064D0 740C                <1>     je .notOpeningFile
   159 000064D2 57                  <1>     push rdi
   160 000064D3 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   161 000064DA C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   162 000064DD 5F                  <1>     pop rdi
   163                              <1> .notOpeningFile:
   164 000064DE FA                  <1>     cli ;Disable Interrupts
   165 000064DF FE05(07040000)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   166 000064E5 FE0D(08040000)      <1>     dec byte [inDOS]    ;Exiting DOS
   167 000064EB 488B25(7B040000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   168 000064F2 31ED                <1>     xor ebp, ebp    ;Always zeroed
   169 000064F4 CD24                <1>     int 24h ;Call critical error handler, sets interrupts on again
   170 000064F6 488B25(60040000)    <1>     mov rsp, qword [xInt24hRSP] ;Return to the stack of the function that failed
   171 000064FD C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   172 00006504 FE05(08040000)      <1>     inc byte [inDOS]    ;Reenter DOS
   173 0000650A 488B2D(8E070000)    <1>     mov rbp, qword [tmpDPBPtr]
   174 00006511 FB                  <1>     sti ;Reenable Interrupts
   175                              <1>     ;Now we check that the response given was allowed, and translate if needed
   176                              <1> .checkResponse:
   177 00006512 3C00                <1>     cmp al, critIgnore
   178 00006514 743F                <1>     je .checkIgnore
   179 00006516 3C01                <1>     cmp al, critRetry
   180 00006518 7446                <1>     je .checkRetry
   181 0000651A 3C03                <1>     cmp al, critFail
   182 0000651C 754D                <1>     jne .abort   ;Must be abort
   183                              <1> .setFail:   ;Here is for fail
   184 0000651E B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   185 00006520 FE05(6A040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   186 00006526 F605(68040000)08    <1>     test byte [Int24bitfld], critFailOK
   187 0000652D 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   188                              <1> .exit:
   189 0000652F C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   190 00006536 803D(3A070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   191                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000653D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000653F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   192                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   193 00006540 50                  <1>     push rax
   194 00006541 57                  <1>     push rdi
   195 00006542 0FB705(3A070000)    <1>     movzx eax, word [currentNdx]
   196 00006549 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]
   197 00006550 8807                <1>     mov byte [rdi], al
   198 00006552 5F                  <1>     pop rdi
   199 00006553 58                  <1>     pop rax
   200                              <1>     return
    13                              <2> %%_ret:
    14 00006554 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> .checkIgnore:
   202 00006555 F605(68040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   203 0000655C 75D1                <1>     jnz .exit
   204 0000655E EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   205                              <1> .checkRetry:
   206 00006560 F605(68040000)10    <1>     test byte [Int24bitfld], critRetryOK
   207 00006567 75C6                <1>     jnz .exit   
   208 00006569 EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   209                              <1> .abort:
   210                              <1> ;Prepare to abort. We abort from within!
   211                              <1> ;If a network request requests abort, translate to fail
   212 0000656B 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1
   213 00006572 7509                <1>     jne .kill   ;If this is zero, local invokation
   214 00006574 C605(96040000)FF    <1>     mov byte [Int24Trans], -1   ;We are translating a Abort to Fail. Mark it
   215 0000657B EBB2                <1>     jmp short .exit
   216                              <1> .kill:
   217 0000657D 66893D(0B040000)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   218 00006584 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   219 00006586 C605(06070000)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   220 0000658D C605(5F040000)00    <1>     mov byte [volIdFlag], 0 ;Clear special vol search byte if set
   221 00006594 E99EF3FFFF          <1>     jmp terminateClean.altEP
   222                              <1> 
   223                              <1> ctrlBreakHdlr:
   224 00006599 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   225 0000659B E8AFC1FFFF          <1>     call printCaretASCII
   226 000065A0 E8DAC1FFFF          <1>     call printCRLF
   227                              <1>     ;Reset the console back to 0
   228 000065A5 C605(94040000)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   229                              <1> ;Handles a control break, juggles stacks and enters int 21h 
   230                              <1> .exceptEP:
   231                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   232                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   233                              <1> ;   interrupted DOS call is restarted
   234 000065AC FA                  <1> 	cli
   235 000065AD 488B25(7B040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   236 000065B4 E87A0D0000          <1> 	call dosPopRegs ;Get user state back
   237 000065B9 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   238 000065C0 C605(07040000)00    <1>     mov byte [critErrFlag], 0
   239 000065C7 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp
   240 000065CE F8                  <1>     clc
   241 000065CF CD23                <1>     int 23h ;Call critical error handler
   242 000065D1 FA                  <1>     cli ;Clear interrupts again
   243 000065D2 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   244 000065D9 9C                  <1>     pushfq  ;Get flags in rax
   245 000065DA 58                  <1>     pop rax 
   246 000065DB 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret 8?
   247 000065E2 750C                <1>     jne .checkCF
   248                              <1> .returnToDOS:
   249 000065E4 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   250 000065EB E9E90B0000          <1>     jmp functionDispatch    ;Goto int 21h
   251                              <1> .checkCF:
   252 000065F0 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Account for the flags and SS:RSP left on stack
   253 000065F7 A801                <1>     test al, 1  ;CF set?
   254 000065F9 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   255 000065FB B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   256 00006600 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   257 00006607 E9CD0B0000          <1>     jmp functionDispatch
   258                              <1> 
   259                              <1> ;CPU Exception handlers
   260                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   261                              <1> ; CTRL+C exit.
   262                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   263                              <1> ; system.
   264                              <1> ; Also halt if the application is it's own parent.
   265                              <1> ;An application should hook these interupts if they wish to not 
   266                              <1> ; CTRL+C exit, and instead return to DOS.
   267                              <1> i0:
   268 0000660C 31C0                <1>     xor eax, eax
   269 0000660E E9AB000000          <1>     jmp cpu_2args
   270                              <1> i1:
   271 00006613 B801000000          <1>     mov eax, 1
   272 00006618 E9A1000000          <1>     jmp cpu_2args
   273                              <1> i2:
   274 0000661D B802000000          <1>     mov eax, 2
   275 00006622 E997000000          <1>     jmp cpu_2args
   276                              <1> i3:
   277 00006627 B803000000          <1>     mov eax, 3
   278 0000662C E98D000000          <1>     jmp cpu_2args
   279                              <1> i4:
   280 00006631 B804000000          <1>     mov eax, 4
   281 00006636 E983000000          <1>     jmp cpu_2args
   282                              <1> i5:
   283 0000663B B805000000          <1>     mov eax, 5
   284 00006640 EB7C                <1>     jmp short cpu_2args
   285                              <1> i6:
   286 00006642 B806000000          <1>     mov eax, 6
   287 00006647 EB75                <1>     jmp short cpu_2args
   288                              <1> i7:
   289 00006649 B807000000          <1>     mov eax, 7
   290 0000664E EB6E                <1>     jmp short cpu_2args
   291                              <1> i8:
   292 00006650 B808000000          <1>     mov eax, 8
   293 00006655 EB60                <1>     jmp short cpu_3args
   294                              <1> i9:
   295 00006657 B809000000          <1>     mov eax, 9
   296 0000665C EB60                <1>     jmp short cpu_2args
   297                              <1> i10:
   298 0000665E B80A000000          <1>     mov eax, 0Ah
   299 00006663 EB52                <1>     jmp short cpu_3args
   300                              <1> i11:
   301 00006665 B80B000000          <1>     mov eax, 0Bh
   302 0000666A EB4B                <1>     jmp short cpu_3args
   303                              <1> i12:
   304 0000666C B80C000000          <1>     mov eax, 0Ch
   305 00006671 EB44                <1>     jmp short cpu_3args
   306                              <1> i13:
   307 00006673 B80D000000          <1>     mov eax, 0Dh
   308 00006678 EB3D                <1>     jmp short cpu_3args
   309                              <1> i14:
   310 0000667A B80E000000          <1>     mov eax, 0Eh
   311 0000667F EB2F                <1>     jmp short cpu_4args
   312                              <1> i15:
   313 00006681 B80F000000          <1>     mov eax, 0Fh
   314 00006686 EB36                <1>     jmp short cpu_2args
   315                              <1> i16:
   316 00006688 B810000000          <1>     mov eax, 10h
   317 0000668D EB2F                <1>     jmp short cpu_2args
   318                              <1> i17:
   319 0000668F B811000000          <1>     mov eax, 11h
   320 00006694 EB21                <1>     jmp short cpu_3args
   321                              <1> i18:
   322 00006696 B812000000          <1>     mov eax, 12h
   323 0000669B EB21                <1>     jmp short cpu_2args
   324                              <1> i19:
   325 0000669D B813000000          <1>     mov eax, 13h
   326 000066A2 EB1A                <1>     jmp short cpu_2args
   327                              <1> i20:
   328 000066A4 B814000000          <1>     mov eax, 14h
   329 000066A9 EB13                <1>     jmp short cpu_2args
   330                              <1> i21:
   331 000066AB B815000000          <1>     mov eax, 15h
   332                              <1> cpu_4args:
   333 000066B0 B903000000          <1>     mov ecx, 3
   334 000066B5 EB0C                <1>     jmp short cpu_exception
   335                              <1> cpu_3args:
   336 000066B7 B902000000          <1>     mov ecx, 2
   337 000066BC EB05                <1>     jmp short cpu_exception
   338                              <1> cpu_2args:
   339 000066BE B901000000          <1>     mov ecx, 1
   340                              <1> cpu_exception:
   341                              <1> ;Enter with:
   342                              <1> ; eax = Exception number in binary
   343                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   344 000066C3 488D356D020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   345 000066CA BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   346 000066CF E81B020000          <1>     call .writeExceptionMessage
   347                              <1> 
   348 000066D4 803D(08040000)01    <1>     cmp byte [inDOS], 1
   349 000066DB 7327                <1>     jae .introStop
   350 000066DD 3D02000000          <1>     cmp eax, 2
   351 000066E2 7420                <1>     je .introStop
   352                              <1> 
   353 000066E4 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   354 000066EB 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   355 000066EF 7413                <1>     je .introStop
   356                              <1> 
   357 000066F1 488D3568020000      <1>     lea rsi, .fatal1
   358 000066F8 BBC1000000          <1>     mov ebx, fatal1L
   359 000066FD E8ED010000          <1>     call .writeExceptionMessage
   360 00006702 EB18                <1>     jmp short .introEnd
   361                              <1> .introStop:
   362 00006704 C605(921A0000)FF    <1>     mov byte [haltDOS], -1
   363 0000670B 488D3512030000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   364 00006712 BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   365 00006717 E8D3010000          <1>     call .writeExceptionMessage
   366                              <1> .introEnd:
   367 0000671C 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   368 00006723 E895010000          <1>     call .printbyte ;Store the error code in the byte buffer
   369 00006728 488D35(821A0000)    <1>     lea rsi, byteBuffer
   370 0000672F BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   371 00006734 E8B6010000          <1>     call .writeExceptionMessage
   372                              <1> 
   373 00006739 488D35E1020000      <1>     lea rsi, .fatal2
   374 00006740 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   375 00006745 E8A5010000          <1>     call .writeExceptionMessage
   376                              <1> 
   377 0000674A 80F901              <1>     cmp cl, 1
   378 0000674D 0F87D0000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   379                              <1> .cpurollprint:
   380 00006753 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   381 0000675A 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   382                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   383 0000675E B108                <1>     mov cl, 8    ;8 bytes
   384                              <1> .cpurollprint1:
   385 00006760 48C1C208            <1>     rol rdx, 8
   386 00006764 88D0                <1>     mov al, dl
   387 00006766 52                  <1>     push rdx
   388 00006767 E851010000          <1>     call .printbyte
   389 0000676C 5A                  <1>     pop rdx
   390 0000676D FEC9                <1>     dec cl
   391 0000676F 75EF                <1>     jnz .cpurollprint1
   392                              <1> 
   393 00006771 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   394 00006776 488D35(821A0000)    <1>     lea rsi, byteBuffer
   395 0000677D E86D010000          <1>     call .writeExceptionMessage
   396                              <1> 
   397 00006782 BB03000000          <1>     mov ebx, crlfL
   398 00006787 488D35AF020000      <1>     lea rsi, .crlf
   399 0000678E E85C010000          <1>     call .writeExceptionMessage    
   400                              <1> 
   401 00006793 F605(921A0000)FF    <1>     test byte [haltDOS], -1
   402 0000679A 7534                <1>     jnz .fatalStop
   403 0000679C E839010000          <1>     call .readInputChar
   404                              <1>     ;Set error code to General Failure
   405 000067A1 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   405 000067A9 00                  <1>
   406 000067AA C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   407 000067B1 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   408 000067B8 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   409 000067BF B8FF4C0000          <1>     mov eax, 4cFFh
   410 000067C4 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1
   411                              <1>     ;If a -1 error code and ctrlC exit and the extended error
   412                              <1>     ; setup as above, chances are it was a CPU error
   413 000067CB E9090A0000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   414                              <1> .fatalStop:
   415                              <1> ;This is called if inDOS > 1 or NMI occured
   416                              <1> ;Waits 1 minute then reboots
   417 000067D0 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   418 000067D5 CD2A                <1>     int 2Ah
   419 000067D7 E8850B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   420 000067DC E8940B0000          <1>     call dosCrit2Enter  ;Get the lock to end all multitasking
   421 000067E1 E86FC5FFFF          <1>     call getDateAndTimeOld  ;Get time packed in edx (edx[0:4] = Seconds/2)
   422 000067E6 89D3                <1>     mov ebx, edx
   423 000067E8 81E31F000000        <1>     and ebx, 1Fh    ;Save the relevent bits
   424                              <1> .loopForNextSecond:
   425 000067EE E820000000          <1>     call .getTimeDateCompare
   426 000067F3 74F9                <1>     je .loopForNextSecond
   427                              <1> .loopTillTimeElapsed:
   428 000067F5 E819000000          <1>     call .getTimeDateCompare
   429 000067FA 75F9                <1>     jne .loopTillTimeElapsed
   430                              <1>     ;Now we triple fault
   431 000067FC 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   432 00006803 EB00                <1>     jmp short .toHell
   433                              <1> .toHell:
   434 00006805 CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   435 00006807 EBFC                <1>     jmp short .toHell
   436                              <1> .resetIDT:
   437 00006809 0000                <1>     dw 0
   438 0000680B 0000000000000000    <1>     dq 0
   439                              <1> .getTimeDateCompare:
   440 00006813 53                  <1>     push rbx
   441 00006814 E83CC5FFFF          <1>     call getDateAndTimeOld
   442 00006819 5B                  <1>     pop rbx
   443 0000681A 81E21F000000        <1>     and edx, 1Fh
   444 00006820 39DA                <1>     cmp edx, ebx
   445                              <1>     return
    13                              <2> %%_ret:
    14 00006822 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> .cpuextendederror:
   448 00006823 5A                  <1>     pop rdx
   449 00006824 48FFC9              <1>     dec rcx
   450 00006827 51                  <1>     push rcx
   451 00006828 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   452 0000682F B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   453 00006831 86D6                <1>     xchg dl, dh   
   454                              <1> .pr1:
   455 00006833 88D0                <1>     mov al, dl
   456 00006835 52                  <1>     push rdx
   457 00006836 E882000000          <1>     call .printbyte
   458 0000683B 5A                  <1>     pop rdx
   459 0000683C C1CA08              <1>     ror edx, 8    ;Print just dx for now
   460 0000683F FEC9                <1>     dec cl
   461 00006841 75F0                <1>     jnz .pr1
   462                              <1> 
   463 00006843 488D35(821A0000)    <1>     lea rsi, byteBuffer
   464 0000684A BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   465 0000684F E89B000000          <1>     call .writeExceptionMessage
   466                              <1> 
   467 00006854 488D35C6010000      <1>     lea rsi, .fatal2
   468 0000685B BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   469 00006860 E88A000000          <1>     call .writeExceptionMessage
   470                              <1> 
   471 00006865 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   472 00006866 48FFC9              <1>     dec rcx
   473 00006869 0F84E4FEFFFF        <1>     jz .cpurollprint
   474                              <1> 
   475 0000686F B108                <1>     mov cl, 8   ;16 nybbles
   476 00006871 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   477 00006874 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   478                              <1> .pr2:
   479 0000687B 48C1C208            <1>     rol rdx, 8    ;Print rdx
   480 0000687F 88D0                <1>     mov al, dl
   481 00006881 52                  <1>     push rdx
   482 00006882 E836000000          <1>     call .printbyte
   483 00006887 5A                  <1>     pop rdx
   484 00006888 FEC9                <1>     dec cl
   485 0000688A 75EF                <1>     jnz .pr2
   486                              <1> 
   487 0000688C 488D35(821A0000)    <1>     lea rsi, byteBuffer
   488 00006893 BB10000000          <1>     mov ebx, 16
   489 00006898 E852000000          <1>     call .writeExceptionMessage
   490                              <1> 
   491 0000689D 488D357D010000      <1>     lea rsi, .fatal2
   492 000068A4 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   493 000068A9 E841000000          <1>     call .writeExceptionMessage
   494                              <1> 
   495 000068AE E9A0FEFFFF          <1>     jmp .cpurollprint
   496                              <1> 
   497                              <1> 
   498                              <1> .char:    ;Print a single character
   499 000068B3 488D1D6D000000      <1>     lea rbx, .ascii
   500 000068BA D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   501 000068BB AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   502 000068BC C3                  <1>     ret
   503                              <1> .printbyte:
   504 000068BD 88C2                <1>     mov dl, al            ;save byte in dl
   505 000068BF 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   506 000068C3 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   507 000068C8 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   508 000068CC E8E2FFFFFF          <1>     call .char
   509 000068D1 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   510 000068D4 E8DAFFFFFF          <1>     call .char
   511 000068D9 C3                  <1>     ret        
   512                              <1> 
   513                              <1> 
   514                              <1> .readInputChar:
   515 000068DA C605(ED040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   516 000068E1 488D35(1C050000)    <1>     lea rsi, singleIObyt
   517 000068E8 BB01000000          <1>     mov ebx, 1  ;Read one char
   518 000068ED EB07                <1>     jmp short .ioException
   519                              <1> .writeExceptionMessage:
   520                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   521 000068EF C605(ED040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   522                              <1> .ioException:
   523 000068F6 C605(EB040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   524 000068FD 66C705(EE040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   524 00006905 00                  <1>
   525 00006906 891D(01050000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   526 0000690C 488D1D(EB040000)    <1>     lea rbx, critReqHdr
   527 00006913 488935(F9040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   528 0000691A 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   529 00006921 E822010000          <1>     call goDriver
   530                              <1>     return
    13                              <2> %%_ret:
    14 00006926 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> 
   533                              <1> ;Error messages
   534 00006927 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   534 00006930 39414243444546      <1>
   535 00006937 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   535 00006940 20205343502F444F53- <1>
   535 00006949 20455843455054494F- <1>
   535 00006952 4E2044455445435445- <1>
   535 0000695B 44210D0A0A          <1>
   536                              <1> fatalt0L   equ $ - .fatalt0
   537                              <1> 
   538                              <1> .fatal1:   
   539 00006960 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   539 00006969 656E7469616C6C7920- <1>
   539 00006972 666174616C20657272- <1>
   539 0000697B 6F7220686173206265- <1>
   539 00006984 656E20646574656374- <1>
   539 0000698D 65640D0A            <1>
   540 00006991 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   540 0000699A 68652063757272656E- <1>
   540 000069A3 74206170706C696361- <1>
   540 000069AC 74696F6E206D757374- <1>
   540 000069B5 206265207465726D69- <1>
   540 000069BE 6E617465642E0D0A0A  <1>
   541 000069C7 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   541 000069D0 20616E79206B657920- <1>
   541 000069D9 746F20636F6E74696E- <1>
   541 000069E2 7565206F7220435452- <1>
   541 000069EB 4C2B414C542B44454C- <1>
   541 000069F4 20746F207265737461- <1>
   541 000069FD 727420746865206D61- <1>
   541 00006A06 6368696E652E        <1>
   542 00006A0C 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   542 00006A15 5354454D204552524F- <1>
   542 00006A1E 523A20              <1>
   543                              <1> fatal1L equ $ - .fatal1
   544                              <1> 
   545 00006A21 203A20              <1> .fatal2:   db " : "
   546                              <1> fatal2L    equ $ - .fatal2
   547                              <1> 
   548                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   549 00006A24 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   549 00006A2D 4F532053595354454D- <1>
   549 00006A36 2053544F503A20      <1>
   550                              <1> fatalHaltL equ $ - .fatalHalt
   551 00006A3D 0D0A0A              <1> .crlf:  db CR,LF,LF
   552                              <1> crlfL  equ $ - .crlf
    43                                  %include "./src/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006A40 B003                <1>     mov al, critFail
     7 00006A42 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00006A44 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006A48 E828090000          <1>     call dosCrit2Enter
    16 00006A4D FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006A50 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006A53 E827090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006A58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006A59 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006A5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006A60 84C0                <1>     test al, al
    33 00006A62 723F                <1>     jc .diskError
    34 00006A64 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006A6A 7337                <1>     jae .diskError
    36 00006A6C 50                  <1>     push rax
    37 00006A6D FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006A6F E8FD040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00006A74 58                  <1>     pop rax
    40 00006A75 7235                <1>     jc .error
    41 00006A77 8805(09070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 00006A7D 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00006A84 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006A8C 750A                <1>     jnz .netError
    45 00006A8E 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006A92 E8B1030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006A97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006A98 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006AA0 00                  <1>
    50 00006AA1 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006AA3 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006AAB 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006AAC C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006AB3 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006ABA C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006AC1 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006AC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006AC3 FE05(08040000)      <1>     inc byte [inDOS]
    63 00006AC9 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006ACA FC                  <1>     cld ;Set string ops in the right direction
    65 00006ACB E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006AD0 72F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    67 00006AD2 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 00006AD9 56                  <1>     push rsi
    69 00006ADA 50                  <1>     push rax
    70 00006ADB 488D35(1E050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006AE2 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 00006AE4 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006AE7 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006AED F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006AEE B800030000          <1>     mov eax, 0300h  
    79 00006AF3 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00006AF5 58                  <1>     pop rax
    82 00006AF6 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006AF7 729F                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006AF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006AFA FA                  <1>     cli
    93 00006AFB 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006B02 488D25(E0190000)    <1>     lea rsp, DiskStakTop
    95 00006B09 55                  <1>     push rbp
    96 00006B0A 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006B0B E8B3FFFFFF          <1>     call setupAbsDiskEntry
    98 00006B10 7252                <1>     jc absDiskExit
    99 00006B12 E844020000          <1>     call primReqWriteSetup
   100 00006B17 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006B19 FA                  <1>     cli 
   107 00006B1A 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006B21 488D25(E0190000)    <1>     lea rsp, DiskStakTop
   109 00006B28 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00006B29 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006B2A E894FFFFFF          <1>     call setupAbsDiskEntry
   112 00006B2F 7233                <1>     jc absDiskExit
   113 00006B31 E830020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00006B36 E859000000          <1>     call absDiskDriverCall
   118 00006B3B 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006B3D 8A05(C4040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006B43 B480                <1>     mov ah, 80h ;Attachment failure
   123 00006B45 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00006B47 741A                <1>     je .absExit
   125 00006B49 B440                <1>     mov ah, 40h ;Seek error
   126 00006B4B 3C06                <1>     cmp al, 06h
   127 00006B4D 7414                <1>     je .absExit
   128 00006B4F B408                <1>     mov ah, 08h ;Bad CRC
   129 00006B51 3C04                <1>     cmp al, 04h
   130 00006B53 740E                <1>     je .absExit
   131 00006B55 B404                <1>     mov ah, 04h ;Sector not found
   132 00006B57 3C08                <1>     cmp al, 08h
   133 00006B59 7408                <1>     je .absExit
   134 00006B5B 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006B5D 84C0                <1>     test al, al
   136 00006B5F 7402                <1>     je .absExit
   137 00006B61 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006B63 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00006B64 5B                  <1>     pop rbx
   142 00006B65 5D                  <1>     pop rbp
   143 00006B66 FA                  <1>     cli
   144 00006B67 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]
   145 00006B6E FB                  <1>     sti ;Reenable interrupts
   146 00006B6F 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00006B76 9C                  <1>     pushfq
   148 00006B77 5A                  <1>     pop rdx ;Get the current flags
   149 00006B78 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 00006B7C 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00006B81 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00006B83 FA                  <1>     cli
   154 00006B84 52                  <1>     push rdx    ;Push the flags on the stack
   155 00006B85 51                  <1>     push rcx    ;Push the return address on the stack
   156 00006B86 9C                  <1>     pushfq
   157 00006B87 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006B89 89CA                <1>     mov edx, ecx
   159 00006B8B FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00006B91 9D                  <1>     popfq
   161 00006B92 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00006B93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00006B94 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00006B95 8B0D(D7040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006B9B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006B9F E8A4FEFFFF          <1>     call goDriver   ;Make request
   176 00006BA4 5E                  <1>     pop rsi
   177 00006BA5 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006BAB 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006BAD 0FB705(C4040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 00006BB4 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006BB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 00006BB9 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 00006BBD 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 00006BC0 8805(09070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 00006BC6 E87D020000          <1>     call setWorkingDPB
   192 00006BCB 57                  <1>     push rdi    ;Save the CDS ptr
   193 00006BCC E839000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 00006BD1 5F                  <1>     pop rdi
   195 00006BD2 7235                <1>     jc .exitBad ;Preserve CF
   196 00006BD4 7532                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 00006BD6 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006BDD 31C0                <1>     xor eax, eax
   200 00006BDF FFC8                <1>     dec eax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006BE1 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 00006BE5 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006BEC 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00006BF2 7509                <1>     jnz .next
   207 00006BF4 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 00006BF8 7503                <1>     jne .next   ;Else, goto next
   209 00006BFA 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006BFD 4881C75F000000      <1>     add rdi, cds_size
   212 00006C04 FFC9                <1>     dec ecx
   213 00006C06 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006C08 F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006C09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224 00006C0A E8A0010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   225                              <1> ;Return in rbx the req hdr address
   226 00006C0F 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   227 00006C13 E830FEFFFF          <1>     call goDriver   ;Request!
   228 00006C18 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   229 00006C1C F7C700800000        <1>     test edi, drvErrStatus
   230 00006C22 0F85C4000000        <1>     jnz .diskDrvCritErr
   231 00006C28 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   232 00006C2F 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   233 00006C32 3805(E9190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   234 00006C38 750C                <1>     jne .notForce
   235                              <1>     ;Here we are forced to rebuild the DPB. In principle, the medium has
   236                              <1>     ; not changed but the new volume needs to be updated. 
   237                              <1>     ;The driver can use this opportunity to synchronise its BPB with the 
   238                              <1>     ; new label.  
   239 00006C3A C605(E9190000)FF    <1>     mov byte [rebuildDrv], -1   ;Now reset this flag as we are doing our job.
   240 00006C41 E95E000000          <1>     jmp .resetDPB   ;Don't need to flush as the disk is the same.
   241                              <1> .notForce:
   242 00006C46 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   243 00006C49 7854                <1>     js short .invalidateBuffers  ;If either byte is -1, freebuffers and buildbpb
   244                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006C4B 75BC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   245                              <1>     ;Here we check for any dirty buffers
   246                              <1>     ;If dirty buffer found, dont get new DPB
   247 00006C4D 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   248                              <1> .checkBuffer:
   249 00006C54 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;IS this buffer for us?
   250 00006C57 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   251 00006C59 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this buffer dirty?
   252 00006C5D 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   253 00006C5F F8                  <1>     clc 
   254                              <1>     return
    13                              <2> %%_ret:
    14 00006C60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   255                              <1> .gotoNextBuffer:
   256 00006C61 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   257 00006C64 4881FFFFFFFFFF      <1>     cmp rdi, -1
   258 00006C6B 75E7                <1>     jne .checkBuffer        ;Check for this buffer
   259                              <1>     ;If we get here, we found no dirty buffers for our drive
   260                              <1>     ;We use the reference bit to keep track of which buffers we've gone through
   261 00006C6D C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset number of free to unknown
   262 00006C74 E8679AFFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   263                              <1> .dirtyLoop:
   264 00006C79 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   265 00006C7D 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   266 00006C80 7515                <1>     jne .skipDirtyCheck
   267 00006C82 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   268 00006C86 0F8490000000        <1>     je .dirtyBufferError
   269                              <1>     ;Set reference bit and drive to free
   270 00006C8C 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   271 00006C92 E8639AFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   272                              <1> .skipDirtyCheck:
   273 00006C97 E86C9AFFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   274 00006C9C 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   275                              <1> .exit:
   276                              <1>     return
    13                              <2> %%_ret:
    14 00006C9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   278 00006C9F E8BE9BFFFF          <1>     call freeBuffersForDrive    ;Free all the buffers with the DPB in rbp
   279                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   280 00006CA4 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   281                              <1>     ;Get a buffer to read BPB into in rdi
   282 00006CA8 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   283 00006CAA E8389DFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   284 00006CAF 723A                <1>     jc short .exitBad    ;Immediately exit with the carry flag set
   285 00006CB1 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   286                              <1> .repeatEP:
   287 00006CB5 E821010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   288 00006CBA 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   289 00006CBE E885FDFFFF          <1>     call goDriver   ;Request!
   290 00006CC3 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   291 00006CC7 F7C700800000        <1>     test edi, drvErrStatus
   292 00006CCD 751D                <1>     jnz .diskDrvCritErr
   293                              <1>     ;Now rebuild the dpb fields for this drive
   294 00006CCF 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   295 00006CD3 53                  <1>     push rbx
   296 00006CD4 E8280A0000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   297 00006CD9 5B                  <1>     pop rbx
   298                              <1>     ;Adjust the buffer header information
   299 00006CDA 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   300 00006CDD 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   301 00006CE0 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   302 00006CE3 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   303 00006CE6 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   304 00006CE8 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   305                              <1> .exitBad:
   306                              <1>     return
    13                              <2> %%_ret:
    14 00006CEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   307                              <1> .diskDrvCritErr:
   308                              <1> ;Critical Errors fall through here
   309                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   310 00006CEC C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset freecluster count
   311 00006CF3 48892D(8E070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   312 00006CFA B41A                <1>     mov ah, critRead | critFAT | critFailOK | critRetryOK
   313 00006CFC 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   314 00006D02 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   315 00006D06 E887F7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   316 00006D0B 488B2D(8E070000)    <1>     mov rbp, qword [tmpDPBPtr]
   317 00006D12 3C01                <1>     cmp al, critRetry
   318 00006D14 0F849FFEFFFF        <1>     je getDiskDPB
   319                              <1> .errorExitBad:
   320 00006D1A F9                  <1>     stc     ;Set error flag to indicate fail
   321                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 00006D1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> .dirtyBufferError:
   324 00006D1C 55                  <1>     push rbp
   325 00006D1D 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   326 00006D21 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   327 00006D27 5D                  <1>     pop rbp
   328 00006D28 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   329                              <1>     ;rbp points to the dpb still
   330 00006D2A 57                  <1>     push rdi
   331 00006D2B 488B3D(D0040000)    <1>     mov rdi, qword [primReqHdr + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   332 00006D32 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   333 00006D39 5F                  <1>     pop rdi ;Get back the buffer pointer
   334 00006D3A C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   335 00006D41 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;A write was the cause of the error
   336 00006D48 B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   337 00006D4D E8D6F6FFFF          <1>     call diskDevErr
   338 00006D52 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   339 00006D54 74C4                <1>     je .errorExitBad    ;If so, exit with CF set
   340 00006D56 E95EFEFFFF          <1>     jmp getDiskDPB  ;Now we try again
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;           Primitive Driver Requests
   343                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   344                              <1> ;First are Disk requests, then Char device requests
   345                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   346                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   347                              <1> 
   348                              <1> primReqWriteSetup:
   349 00006D5B 50                  <1>     push rax
   350 00006D5C B408                <1>     mov ah, drvWRITE    ;Command code
   351 00006D5E 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   352 00006D64 EB03                <1>     jmp short primReqRWCommon
   353                              <1> primReqReadSetup:
   354 00006D66 50                  <1>     push rax
   355 00006D67 B404                <1>     mov ah, drvREAD
   356                              <1> primReqRWCommon:
   357                              <1> ;Sets up the IO request packet with:
   358                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   359                              <1> ; rbx = Data storage buffer ptr
   360                              <1> ; ecx = Number of sectors to transfer
   361                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   362                              <1> ; ~~~~ Set by entry function ~~~~ 
   363                              <1> ; ah = Command code
   364                              <1> ; All regs preserved EXCEPT rbx.
   365                              <1> ; Return: rbx = Transfer Address
   366 00006D69 48891D(CF040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   367 00006D70 890D(D7040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   368 00006D76 C605(C1040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   369 00006D7D 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   370 00006D82 8905(C2040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   371 00006D88 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   372 00006D8B 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   373                              <1>     ;Disk operations only here!
   374 00006D8D 488915(DB040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   375 00006D94 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   376 00006D97 8805(CE040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   377 00006D9D 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   378 00006DA0 8805(C2040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   379                              <1> primReqCommonExit:
   380                              <1> ;Returns in rbx the primary request header as these functions
   381                              <1> ; setup the request in the primary request header space
   382 00006DA6 58                  <1>     pop rax
   383 00006DA7 488D1D(C1040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   384                              <1>     return
    13                              <2> %%_ret:
    14 00006DAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> 
   386                              <1> primReqMedCheckSetup:
   387                              <1> ;Prepare the diskIO packet for mediacheck
   388                              <1> ;rbp has DPB pointer for device to check media on
   389 00006DAF 50                  <1>     push rax
   390 00006DB0 C605(C1040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   391 00006DB7 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   392 00006DBA 8805(CE040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   393 00006DC0 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   394 00006DC3 8805(C2040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   395 00006DC9 C605(C3040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   396 00006DD0 66C705(C4040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   396 00006DD8 00                  <1>
   397 00006DD9 EBCB                <1>     jmp short primReqCommonExit
   398                              <1> 
   399                              <1> primReqGetBPBSetup:
   400                              <1> ;rbp has DPB pointer for device
   401                              <1> ;rdi has sector buffer header pointer for transfer
   402 00006DDB 50                  <1>     push rax
   403 00006DDC 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   404 00006DE0 48893D(CF040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   405 00006DE7 C605(C1040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   406 00006DEE 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   407 00006DF1 8805(CE040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   408 00006DF7 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   409 00006DFA 8805(C2040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   410 00006E00 C605(C3040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   411 00006E07 66C705(C4040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   411 00006E0F 00                  <1>
   412 00006E10 EB94                <1>     jmp short primReqCommonExit
   413                              <1> 
   414                              <1> primReqOpenSetup:
   415                              <1> ;al = unit number if a disk device. Undefined otherwise
   416 00006E12 50                  <1>     push rax
   417 00006E13 B40D                <1>     mov ah, drvOPEN
   418 00006E15 EB03                <1>     jmp short primReqOCcommon
   419                              <1> primReqCloseSetup:
   420                              <1> ;al = unit number if a disk device. Undefined otherwise
   421 00006E17 50                  <1>     push rax
   422 00006E18 B40E                <1>     mov ah, drvCLOSE
   423                              <1> primReqOCcommon:
   424 00006E1A C605(C1040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   425 00006E21 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   426 00006E22 8905(C2040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   427                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   428 00006E28 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   429                              <1> 
   430                              <1> secdReqCharIOReq:
   431                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   432                              <1> ;Input:
   433                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   434                              <1> ; ecx = Length of buffer
   435                              <1> ; rdi = Buffer pointer
   436                              <1> ;Output: 
   437                              <1> ; rbx = Transfer Address 
   438 00006E2D 488D1D(97040000)    <1>     lea rbx, secdReqHdr
   439 00006E34 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   440 00006E37 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   441 00006E3A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   442 00006E40 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   443 00006E44 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   444                              <1>     return
    13                              <2> %%_ret:
    14 00006E47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   445                              <1> ;If the device which will process this request is a disk device
   446                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   447                              <1> ;Then we will read the appropriate byte from that buffer to the 
   448                              <1> ; singleIOByt buffer.
   449                              <1> ;Such a request will require additional setup with the following fields:
   450                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    44                                  %include "./src/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006E48 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006E4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006E50 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    21 00006E57 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006E5E 7409                <1>     je .net
    23 00006E60 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00006E66 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006E68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006E69 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006E6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006E6B E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006E70 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00006E72 B80C110000          <1>     mov eax, 110Ch 
    43 00006E77 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006E79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006E7A C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006E81 E8DB040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00006E86 E82EFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006E8B 721C                <1>     jc .exit
    51 00006E8D E8F39CFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00006E92 7215                <1>     jc .exit
    53 00006E94 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 00006E97 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006E99 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006E9C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00006E9F FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00006EA1 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 00006EA5 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006EA8 F8                  <1>     clc
    61                              <1> .exit:
    62 00006EA9 E8BD040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00006EAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00006EAF 50                  <1>     push rax    ;Preserve rax
    69 00006EB0 FA                  <1>     cli ;Halt interrupts
    70 00006EB1 0F010D(CC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 00006EB8 0FB6C0              <1>     movzx eax, al
    72 00006EBB 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 00006EBF 480305(CE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 00006EC6 31DB                <1>     xor ebx, ebx
    75 00006EC8 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 00006ECB 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 00006ECF 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 00006ED3 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 00006ED7 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 00006EDA FB                  <1>     sti
    81 00006EDB 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 00006EDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 00006EDD 488B35(7B040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 00006EE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 00006EE5 488B35(43000000)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 00006EEC 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 00006EF3 740A                <1>     je .exitBad
    96 00006EF5 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 00006EF7 7407                <1>     je .exit    ;Drive found
    98 00006EF9 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 00006EFD EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 00006EFF F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 00006F00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> getCDSNotJoin:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   110                              <1> ;            set.
   111 00006F01 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 00006F06 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 00006F08 56                  <1>     push rsi
   114 00006F09 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 00006F10 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 00006F16 5E                  <1>     pop rsi
   117 00006F17 7401                <1>     jz .exit
   118 00006F19 F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 00006F1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   123                              <1> ;Allows a redirector or subst/join to build a CDS
   124                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   125                              <1> ; volumes, that are made at system boot.
   126                              <1> ;Input: al = Drive Letter for drive
   127                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   128                              <1> ;Output: rdi = newly filled in workingCDS
   129                              <1> ;CF=NC => CDS valid and has a DPB
   130                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   131 00006F1B 50                  <1>     push rax
   132 00006F1C 2C40                <1>     sub al, "A"-1
   133 00006F1E 3A05(77000000)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   134 00006F24 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   135 00006F2B 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   136 00006F31 58                  <1>     pop rax
   137 00006F32 723C                <1>     jb .exit    ;Exit with CF=CY
   138 00006F34 50                  <1>     push rax
   139 00006F35 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   140 00006F3A 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   141 00006F3C 58                  <1>     pop rax
   142 00006F3D 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   143 00006F43 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   144 00006F4A 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   145 00006F52 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   146 00006F59 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   147                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   148 00006F5F 50                  <1>     push rax
   149 00006F60 56                  <1>     push rsi
   150 00006F61 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   151 00006F63 E87DFFFFFF          <1>     call walkDPBchain
   152 00006F68 7204                <1>     jb .skipSettingDPB
   153 00006F6A 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   154                              <1> .skipSettingDPB:
   155 00006F6E 5E                  <1>     pop rsi
   156 00006F6F 58                  <1>     pop rax
   157                              <1> .exit:
   158                              <1>     return
    13                              <2> %%_ret:
    14 00006F70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> getCDS:     ;Int 2Fh AX=1219h
   161                              <1> ;Gets the device DPB and saves it in the DOS variable
   162                              <1> ;This can be called to get CDS for network drives too!
   163                              <1> ;Input: al = 1 based drive number
   164                              <1> ;Sets workingCDS var with the CDS for the device. 
   165                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   166 00006F71 84C0                <1>     test al, al
   167 00006F73 7508                <1>     jnz .skip
   168 00006F75 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   169 00006F7B FEC0                <1>     inc al
   170                              <1> .skip:
   171 00006F7D FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   172 00006F7F 56                  <1>     push rsi
   173 00006F80 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   174 00006F87 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   175 00006F8E 7423                <1>     jz .localCall
   176                              <1>     ;Invokation via 21/5D00
   177 00006F90 50                  <1>     push rax
   178 00006F91 57                  <1>     push rdi
   179 00006F92 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   180 00006F99 48893D(12070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   181 00006FA0 0441                <1>     add al, "A" ;Convert to a drive letter
   182 00006FA2 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   183 00006FA7 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   184 00006FAD 5F                  <1>     pop rdi
   185 00006FAE 58                  <1>     pop rax
   186 00006FAF 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   187 00006FB1 EB17                <1>     jmp short .exitOk   ;All oki
   188                              <1> .localCall:
   189 00006FB3 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   190 00006FB8 7208                <1>     jc .exitBad
   191 00006FBA 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   192 00006FC0 7508                <1>     jnz .exitOk ;Exit with flag cleared
   193                              <1>     ;Else Return to unknown error locus
   194                              <1> .exitBad:
   195 00006FC2 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   196                              <1> .exitBad1:
   197 00006FC9 F9                  <1>     stc
   198                              <1> .exitOk:
   199 00006FCA 5E                  <1>     pop rsi
   200                              <1>     return
    13                              <2> %%_ret:
    14 00006FCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   203                              <1>     ;Gets the CDS for the current drive in al
   204                              <1>     ;Input: al = Drive number, 0 = A ...
   205                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   206                              <1>     ;        CF=CY => al not valid
   207 00006FCC 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   208 00006FD2 7202                <1>     jb .ctn
   209 00006FD4 F9                  <1>     stc 
   210                              <1>     return
    13                              <2> %%_ret:
    14 00006FD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .ctn:
   212 00006FD6 50                  <1>     push rax
   213 00006FD7 52                  <1>     push rdx
   214 00006FD8 0FB6C0              <1>     movzx eax, al
   215 00006FDB 48BE5F000000000000- <1>     mov rsi, cds_size
   215 00006FE4 00                  <1>
   216 00006FE5 31D2                <1>     xor edx, edx
   217 00006FE7 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   218 00006FE9 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   219 00006FF0 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   220 00006FF3 488935(12070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   221 00006FFA 5A                  <1>     pop rdx
   222 00006FFB 58                  <1>     pop rax
   223 00006FFC F8                  <1>     clc
   224                              <1>     return
    13                              <2> %%_ret:
    14 00006FFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> 
   226                              <1> 
   227                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   228                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   229                              <1> ;Input: AL = Char to normalise.
   230                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   231                              <1> ;If path separator, set ZF=ZE
   232 00006FFE 3C5C                <1>     cmp al, "\"
   233 00007000 7406                <1>     je .exit
   234 00007002 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   235 00007004 7502                <1>     jne .exit
   236 00007006 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   237                              <1> .exit:
   238                              <1>     return
    13                              <2> %%_ret:
    14 00007008 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> uppercaseCharAtPtr:
   241                              <1> ;Get the char pointed to by rsi and then fall
   242 00007009 AC                  <1>     lodsb
   243                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   244                              <1> ;Convert a lowercase char to uppercase
   245                              <1> ; Leave alone uppercase chars and invalid chars
   246                              <1> ;Input: al = Char to convert to uppercase
   247                              <1> ;Output: al = Processed char
   248 0000700A 53                  <1>     push rbx
   249 0000700B 3C61                <1>     cmp al, "a"
   250 0000700D 7214                <1>     jb .exit
   251 0000700F 3C7A                <1>     cmp al, "z"
   252 00007011 7702                <1>     ja .checkExt
   253 00007013 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   254                              <1> .checkExt:
   255 00007015 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   256 00007017 720A                <1>     jb .exit
   257 00007019 2C80                <1>     sub al, 80h ;Turn into table offset
   258 0000701B 488D1D8892FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   259 00007022 D7                  <1>     xlatb   ;Get converted extended byte into al
   260                              <1> .exit:
   261 00007023 50                  <1>     push rax    ;Save al temporarily
   262 00007024 488D1D3194FFFF      <1>     lea rbx, asciiCharProperties
   263 0000702B D7                  <1>     xlatb   ;Get the signature in al
   264 0000702C A801                <1>     test al, badChar
   265 0000702E 58                  <1>     pop rax
   266 0000702F 5B                  <1>     pop rbx
   267                              <1>     return
    13                              <2> %%_ret:
    14 00007030 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> isCharTerminator:
   270                              <1> ;Input: al = Char to check properties of
   271                              <1> ;Output:    ZF=NZ => Char not name terminator
   272                              <1> ;           ZF=ZE => Char terminator
   273 00007031 50                  <1>     push rax
   274 00007032 53                  <1>     push rbx
   275 00007033 488D1D2294FFFF      <1>     lea rbx, asciiCharProperties
   276 0000703A D7                  <1>     xlatb
   277 0000703B A802                <1>     test al, termChar
   278 0000703D 5B                  <1>     pop rbx
   279 0000703E 58                  <1>     pop rax
   280                              <1>     return
    13                              <2> %%_ret:
    14 0000703F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> isCharSeparator:
   283                              <1> ;Input: al = Char to check properties of
   284                              <1> ;Output:    ZF=NZ => Char not separator
   285                              <1> ;           ZF=ZE => Char separator
   286 00007040 50                  <1>     push rax
   287 00007041 53                  <1>     push rbx
   288 00007042 488D1D1394FFFF      <1>     lea rbx, asciiCharProperties
   289 00007049 D7                  <1>     xlatb
   290 0000704A A804                <1>     test al, sepChar
   291 0000704C 5B                  <1>     pop rbx
   292 0000704D 58                  <1>     pop rax
   293                              <1>     return
    13                              <2> %%_ret:
    14 0000704E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> strlen2:    ;Int 2Fh, AX=1212h
   296                              <1> ;Entry point for Multiplex
   297 0000704F 57                  <1>     push rdi
   298 00007050 4889F7              <1>     mov rdi, rsi
   299 00007053 E802000000          <1>     call strlen
   300 00007058 5F                  <1>     pop rdi
   301                              <1>     return
    13                              <2> %%_ret:
    14 00007059 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> strlen: 
   303                              <1> ;Gets the length of a ASCIIZ string
   304                              <1> ;Input: rdi = Source buffer
   305                              <1> ;Output: ecx = Length of string
   306 0000705A 50                  <1>     push rax
   307 0000705B 57                  <1>     push rdi
   308 0000705C 30C0                <1>     xor al, al
   309 0000705E 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   310 00007060 FFC9                <1>     dec ecx ;rcx = -1
   311 00007062 F2AE                <1>     repne scasb
   312 00007064 F7D1                <1>     not ecx
   313 00007066 5F                  <1>     pop rdi
   314 00007067 58                  <1>     pop rax
   315                              <1>     return
    13                              <2> %%_ret:
    14 00007068 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> 
   317                              <1> strcpy:
   318                              <1> ;Copies a null terminated string from rsi to rdi
   319 00007069 AC                  <1>     lodsb
   320 0000706A AA                  <1>     stosb
   321 0000706B 84C0                <1>     test al, al
   322                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000706D 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   323 0000706F EBF8                <1>     jmp short strcpy
   324                              <1> 
   325                              <1> strcmp:
   326                              <1> ;Compares two ASCIIZ strings for equality.
   327                              <1> ;Input: rsi = First string
   328                              <1> ;       rdi = Second string
   329                              <1> ;       ecx = Number of bytes to compare
   330                              <1> ;Output: ZF=ZE => Equal
   331                              <1> ;        ZF=NZ => Not equal
   332 00007071 56                  <1>     push rsi
   333 00007072 57                  <1>     push rdi
   334 00007073 F3A6                <1>     repe cmpsb
   335 00007075 5F                  <1>     pop rdi
   336 00007076 5E                  <1>     pop rsi
   337                              <1>     return
    13                              <2> %%_ret:
    14 00007077 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> 
   339                              <1> 
   340                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   341                              <1> ;Converts lowercase to uppercase and / to "\"
   342                              <1> ;Input: rsi = Source buffer
   343                              <1> ;       rdi = Buffer to place normalised path
   344 00007078 50                  <1>     push rax
   345 00007079 56                  <1>     push rsi
   346 0000707A 57                  <1>     push rdi
   347                              <1> .scan:
   348 0000707B AC                  <1>     lodsb
   349 0000707C 84C0                <1>     test al, al
   350 0000707E 740D                <1>     jz .exit
   351 00007080 E879FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   352 00007085 E880FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   353 0000708A AA                  <1>     stosb
   354 0000708B EBEE                <1>     jmp short .scan
   355                              <1> .exit:
   356 0000708D 5F                  <1>     pop rdi
   357 0000708E 5E                  <1>     pop rsi
   358 0000708F 58                  <1>     pop rax
   359                              <1>     return
    13                              <2> %%_ret:
    14 00007090 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   362                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   363                              <1> ;Input: rsi = One ASCIIZ pathname
   364                              <1> ;       rdi = Second ASCIIZ pathname
   365                              <1> ;Return:
   366                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   367 00007091 50                  <1>     push rax
   368 00007092 56                  <1>     push rsi
   369 00007093 57                  <1>     push rdi
   370                              <1> .scan:
   371 00007094 AC                  <1>     lodsb
   372 00007095 E818000000          <1>     call .normaliseChar
   373 0000709A 88C4                <1>     mov ah, al  ;Save normalised char in ah
   374 0000709C 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   375 0000709E 48FFC7              <1>     inc rdi ;And goto next char
   376 000070A1 E80C000000          <1>     call .normaliseChar
   377 000070A6 38E0                <1>     cmp al, ah  ;Are they equal?
   378 000070A8 7504                <1>     jne .exit   ;If not equal, exit
   379 000070AA 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   380 000070AC 75E6                <1>     jnz .scan
   381                              <1> .exit:
   382 000070AE 5F                  <1>     pop rdi
   383 000070AF 5E                  <1>     pop rsi
   384 000070B0 58                  <1>     pop rax
   385                              <1>     return
    13                              <2> %%_ret:
    14 000070B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   386                              <1> .normaliseChar:
   387 000070B2 E853FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   388 000070B7 E842FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   389                              <1>     return
    13                              <2> %%_ret:
    14 000070BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> checkPathspecOK:
   391                              <1> ;Input:
   392                              <1> ;rsi -> points to a path to verify if it is ok.
   393                              <1> ;Output:
   394                              <1> ;CF=NC => The path is totally clean and ok to use.
   395                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   396                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   397                              <1> ; and depending on method of invokation and caller, may be permissable.
   398                              <1> ;We accept lc and uc characters in this check function.
   399 000070BD 50                  <1>     push rax
   400 000070BE 53                  <1>     push rbx    ;Use rbx as the return flag status
   401 000070BF 56                  <1>     push rsi
   402 000070C0 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   403                              <1>     ;Start by getting the length of the ASCIIZ string.
   404 000070C2 51                  <1>     push rcx
   405 000070C3 57                  <1>     push rdi
   406 000070C4 4889F7              <1>     mov rdi, rsi
   407 000070C7 E88EFFFFFF          <1>     call strlen
   408 000070CC 89C8                <1>     mov eax, ecx    ;Save the length in eax
   409 000070CE 5F                  <1>     pop rdi
   410 000070CF 59                  <1>     pop rcx
   411 000070D0 3D40000000          <1>     cmp eax, 64    ;Check
   412 000070D5 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   413 000070DB 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   414 000070DD 0F848A000000        <1>     jz .badExit
   415                              <1>     ;First we verify if our path is relative or canonical (absolute)
   416 000070E3 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   417 000070E6 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   418 000070EA 7416                <1>     je .netName
   419 000070EC 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   420 000070F0 7410                <1>     je .netName
   421 000070F2 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   422 000070F5 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   423                              <1>     ;Here if relative
   424 000070F7 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   425 000070FE 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   426 00007100 EB3B                <1>     jmp short .okToScan
   427                              <1> .netName:
   428 00007102 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   429 00007109 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   430 0000710C 745F                <1>     je .badExit
   431 0000710E EB2D                <1>     jmp short .okToScan
   432                              <1> .diskPath:
   433 00007110 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   434 00007117 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   435 0000711A 7451                <1>     je .badExit
   436 0000711C F605(02070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   437 00007123 740F                <1>     jz .localAbsCheck
   438                              <1> .absMain:
   439 00007125 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   440 00007126 E8D3FEFFFF          <1>     call swapPathSeparator
   441 0000712B 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   442 0000712D 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   443 00007130 743B                <1>     je .badExit ;Error if so!
   444 00007132 EB09                <1>     jmp short .okToScan
   445                              <1> .localAbsCheck:
   446 00007134 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   447 00007136 E8C3FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   448 0000713B 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   449                              <1>     ;Else we are relative and begin wildcard search
   450                              <1> .okToScan:
   451 0000713D AC                  <1>     lodsb   
   452 0000713E 84C0                <1>     test al, al ;End of path char?
   453 00007140 7430                <1>     jz .exit
   454 00007142 E8B7FEFFFF          <1>     call swapPathSeparator
   455 00007147 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   456 00007149 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   457 0000714B 7411                <1>     je .wcFound
   458 0000714D 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   459 0000714F 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   460                              <1>     ;Else we check that the char in al is an acceptable char
   461 00007151 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   462 00007153 74E8                <1>     je .okToScan
   463 00007155 E831000000          <1>     call checkCharValid
   464 0000715A 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   465 0000715C EBDF                <1>     jmp short .okToScan
   466                              <1> .wcFound:
   467 0000715E BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   468 00007163 EBD8                <1>     jmp short .okToScan
   469                              <1> .wcCheck:
   470                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   471 00007165 F7C340000000        <1>     test ebx, 40h
   472 0000716B 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   473                              <1>     ;Else fall through in error
   474                              <1> .badExit:
   475 0000716D BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   476                              <1> .exit:
   477 00007172 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   478 00007173 9D                  <1>     popfq
   479 00007174 5E                  <1>     pop rsi
   480 00007175 5B                  <1>     pop rbx
   481 00007176 58                  <1>     pop rax
   482                              <1>     return
    13                              <2> %%_ret:
    14 00007177 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> scanPathWC:
   485                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   486                              <1> ; even in the final path componant.
   487                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   488                              <1> ;Output: CF=NC => No wildcards present
   489                              <1> ;        CF=CY => Wildcards found
   490 00007178 50                  <1>     push rax
   491 00007179 56                  <1>     push rsi
   492                              <1> .scan:
   493 0000717A AC                  <1>     lodsb
   494 0000717B 84C0                <1>     test al, al
   495 0000717D 7409                <1>     jz .exit
   496 0000717F 3C3F                <1>     cmp al, "?"
   497 00007181 7404                <1>     je .wcFnd
   498 00007183 3C2A                <1>     cmp al, "*"
   499 00007185 75F3                <1>     jne .scan
   500                              <1> .wcFnd:
   501 00007187 F9                  <1>     stc
   502                              <1> .exit:
   503 00007188 5E                  <1>     pop rsi
   504 00007189 58                  <1>     pop rax
   505                              <1>     return
    13                              <2> %%_ret:
    14 0000718A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> 
   507                              <1> checkCharValid:
   508                              <1> ;If ZF=ZE => Invalid Char
   509                              <1> ;If ZF=NZ => Valid Char
   510 0000718B 50                  <1>     push rax
   511 0000718C E879FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   512 00007191 58                  <1>     pop rax
   513                              <1>     return
    13                              <2> %%_ret:
    14 00007192 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   514                              <1> 
   515                              <1> 
   516                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   517                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   518                              <1> ;Input: rsi = One pointer
   519                              <1> ;       rdi = Second pointer
   520                              <1> ;Output: ZF=ZE if equal
   521                              <1> ;        ZF=NZ if not
   522 00007193 4839FE              <1>     cmp rsi, rdi
   523                              <1>     return
    13                              <2> %%_ret:
    14 00007196 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> checkPathNet:
   526                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   527                              <1> ;Output: ZF=ZE => Path is a net path
   528                              <1> ;        ZF=NZ => Path is not a net path
   529 00007197 50                  <1>     push rax
   530 00007198 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   531 0000719B E85EFEFFFF          <1>     call swapPathSeparator
   532 000071A0 7507                <1>     jnz .exit
   533 000071A2 88E0                <1>     mov al, ah  ;Get the second char
   534 000071A4 E855FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   535                              <1> .exit:
   536 000071A9 58                  <1>     pop rax
   537                              <1>     return
    13                              <2> %%_ret:
    14 000071AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   538                              <1> 
   539                              <1> getCharDevDriverPtr:
   540                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   541                              <1> ;Input: rax = Device Driver name (space padded)
   542                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   543 000071AB 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   544                              <1> .lp:
   545 000071B2 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   546                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000071B6 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   547 000071B8 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   548 000071BB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   549 000071C2 75EE                <1>     jne .lp ;If not loop
   550 000071C4 F9                  <1>     stc ;Else bad exit
   551                              <1>     return
    13                              <2> %%_ret:
    14 000071C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   554                              <1> ;Pointer to the first non-null device driver in the chain.
   555                              <1> ;Returns the value in rax only
   556 000071C6 488D05(7A000000)    <1>     lea rax, nulDevHdr
   557 000071CD 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   558                              <1>     return
    13                              <2> %%_ret:
    14 000071D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   561                              <1> ;Gets the extended error code in ax and returns
   562 000071D1 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   563                              <1>     return
    13                              <2> %%_ret:
    14 000071D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                                  %include "./src/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 000071D9 FA                  <1>     cli ;Halt external interrupts
    19 000071DA FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 000071DB 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 000071DE 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 000071E4 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 000071E7 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 000071E9 0F847C020000        <1>     je ctrlBreakCheck
    26 000071EF 80FC64              <1>     cmp ah, 64h
    27 000071F2 0F84D8020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 21h spiel
    28 000071F8 7724                <1>     ja .fsbegin   ;If above, do usual Int21 entry
    29 000071FA 80FC51              <1>     cmp ah, 51h
    30 000071FD 0F84BB020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 00007203 80FC62              <1>     cmp ah, 62h
    32 00007206 0F84BB020000        <1>     je getPSPaddr          ;Calls the above function
    33 0000720C 80FC50              <1>     cmp ah, 50h
    34 0000720F 0F84A0020000        <1>     je setCurrProcessID
    35 00007215 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 00007218 0F84BA020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 0000721E E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 00007223 48891D(83040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 0000722A 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 00007232 00                  <1>
    41 00007233 488B05(7B040000)    <1>     mov rax, qword [oldRSP]
    42 0000723A 488905(6B040000)    <1>     mov qword [oldoldRSP], rax
    43 00007241 FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 00007247 488925(7B040000)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 0000724E C605(02070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 00007255 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 0000725C 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 00007260 58                  <1>     pop rax     ;Get old rax back
    51 00007261 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .abortEP:
    53                              <1> .charFun0CEP:
    54                              <1> .serverEP:
    55 00007262 488D25(100D0000)    <1>     lea rsp, critStakTop
    56 00007269 FB                  <1>     sti         ;Reenable interrupts
    57                              <1> 
    58 0000726A 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    59 0000726C 881D(94040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    60 00007272 C605(95040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    61 00007279 881D(6A040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    62 0000727F 881D(8B040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    63                              <1> 
    64 00007285 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    65 00007286 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    66 00007288 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    67 0000728A 488D05CB92FFFF      <1>     lea rax, kDispTbl
    68 00007291 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    69 00007294 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    70 00007298 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    71 0000729B 58                  <1>     pop rax
    72                              <1> 
    73 0000729C 84E4                <1>     test ah, ah     ;Simple Terminate function?
    74 0000729E 741C                <1>     jz .fddiskOp
    75 000072A0 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    76 000072A3 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    77 000072A5 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    78 000072A8 7712                <1>     ja .fddiskOp
    79                              <1> ;Char operations here
    80 000072AA F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    81 000072B1 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    82 000072B3 488D25(A0130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    83 000072BA EB40                <1>     jmp short .fdGoToFunction
    84                              <1> .fddiskOp:
    85                              <1>     ;Disk operations go here
    86                              <1>     ;Save rax on entry to a disk funciton
    87 000072BC 488905(33040000)    <1>     mov qword [oldRAX], rax
    88                              <1>     ;Clear up error info
    89 000072C3 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    90 000072CA C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    91 000072D1 C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    92                              <1> 
    93 000072D8 50                  <1>     push rax
    94 000072D9 B482                <1>     mov ah, 82h ;Cancel all critical section!
    95 000072DB CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
    96 000072DD 58                  <1>     pop rax
    97                              <1> 
    98 000072DE C605(95040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
    99 000072E5 488D25(E0190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   100 000072EC F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   101 000072F3 7407                <1>     jz .fdGoToFunction
   102                              <1> ; HANDLE CTRL+BREAK HERE!
   103 000072F5 50                  <1>     push rax
   104 000072F6 E892B4FFFF          <1>     call checkBreak   ; Check for a ^C
   105 000072FB 58                  <1>     pop rax
   106                              <1> .fdGoToFunction:
   107 000072FC 48871D(83040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   108                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   109                              <1>     ;
   110                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   111                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   112                              <1>     ;
   113                              <1>     %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1>     %endif
   119 00007303 FF15(83040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1>     %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 21h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1>     %endif
   130                              <1>     %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1>     %endif
   136                              <1> .fdExit:
   137 00007309 FA                  <1>     cli     ;Redisable interrupts
   138 0000730A FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 00007310 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 00007317 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 0000731A 488B05(6B040000)    <1>     mov rax, qword [oldoldRSP]
   142 00007321 488905(7B040000)    <1>     mov qword [oldRSP], rax
   143 00007328 E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 0000732D 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 0000732F 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 00007331 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 00007333 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 00007339 58                  <1>     pop rax
   152 0000733A 5B                  <1>     pop rbx
   153 0000733B 59                  <1>     pop rcx
   154 0000733C 5A                  <1>     pop rdx
   155 0000733D 5E                  <1>     pop rsi
   156 0000733E 5F                  <1>     pop rdi
   157 0000733F 5D                  <1>     pop rbp
   158 00007340 4158                <1>     pop r8
   159 00007342 4159                <1>     pop r9
   160 00007344 FF25(73040000)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 0000734A 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 00007350 4151                <1>     push r9
   164 00007352 4150                <1>     push r8
   165 00007354 55                  <1>     push rbp
   166 00007355 57                  <1>     push rdi
   167 00007356 56                  <1>     push rsi
   168 00007357 52                  <1>     push rdx
   169 00007358 51                  <1>     push rcx
   170 00007359 53                  <1>     push rbx
   171 0000735A 50                  <1>     push rax
   172 0000735B FF25(73040000)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 00007361 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 00007362 B801800000          <1>     mov eax, 8001h
   176 00007367 CD2A                <1>     int 2ah
   177 00007369 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 0000736A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 0000736B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 0000736C B801810000          <1>     mov eax, 8101h
   182 00007371 CD2A                <1>     int 2ah
   183 00007373 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00007374 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 00007375 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 00007376 B802800000          <1>     mov eax, 8002h
   188 0000737B CD2A                <1>     int 2ah
   189 0000737D 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 0000737E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 0000737F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 00007380 B802810000          <1>     mov eax, 8102h
   194 00007385 CD2A                <1>     int 2ah
   195 00007387 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 00007388 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 00007389 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 0000738B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 0000738C E836000000          <1>     call xLatError
   207 00007391 B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 00007393 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 00007394 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 00007395 E843FBFFFF          <1>     call getUserRegs
   216 0000739A 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 0000739C EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 0000739E E83AFBFFFF          <1>     call getUserRegs
   222 000073A3 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 000073A6 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 000073AA F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 000073AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 000073AC 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 000073AF E813000000          <1>     call xLatError
   237 000073B4 E891000000          <1>     call checkFail
   238                              <1> .noXlat:
   239 000073B9 E81FFBFFFF          <1>     call getUserRegs
   240 000073BE 668906              <1>     mov word [rsi + callerFrame.rax], ax
   241 000073C1 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   242 000073C5 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   243                              <1>     return
    13                              <2> %%_ret:
    14 000073C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> xLatError:
   245                              <1> ;Translates the error code given in ax and sets error code in the var
   246                              <1> ; Input: ax = Extended Error Code
   247                              <1> ; Output: ax = Potentially translated Error Code
   248                              <1> ;         [errorExCde] = Original Error Code
   249                              <1> ;Preserves all registers except ax
   250                              <1> ;AH is always returned as 0
   251 000073C7 53                  <1>     push rbx
   252 000073C8 51                  <1>     push rcx
   253 000073C9 56                  <1>     push rsi
   254 000073CA 668905(0B040000)    <1>     mov word [errorExCde], ax
   255 000073D1 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   256 000073D3 488D359F8CFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   257                              <1> .readEntry:
   258 000073DA 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   259 000073DC 3CFF                <1>     cmp al, -1
   260 000073DE 741F                <1>     je .skipXlat
   261 000073E0 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   262 000073E6 7408                <1>     je .found
   263                              <1>     ;Here, entry not found, goto next entry
   264 000073E8 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   265 000073EB 4801C6              <1>     add rsi, rax    ;Goto next entry
   266 000073EE EBEA                <1>     jmp short .readEntry
   267                              <1> .found:
   268                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   269 000073F0 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   270                              <1> .mainSearch:
   271 000073F3 AC                  <1>     lodsb   ;Get one byte into al
   272 000073F4 38C3                <1>     cmp bl, al  ;Check against the error code
   273 000073F6 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   274 000073F8 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   275 000073FA 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   276                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   277 000073FC 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   278                              <1> .skipXlat:
   279 000073FF 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   280 00007401 5E                  <1>     pop rsi
   281 00007402 59                  <1>     pop rcx
   282 00007403 5B                  <1>     pop rbx
   283                              <1>     return
    13                              <2> %%_ret:
    14 00007404 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   285                              <1> ;Looks up the error code in the variable and sets the other error vars
   286                              <1> ;Called with the lookup table in rsi
   287                              <1> ;All regs preserved
   288 00007405 50                  <1>     push rax
   289 00007406 53                  <1>     push rbx
   290 00007407 51                  <1>     push rcx
   291 00007408 56                  <1>     push rsi
   292 00007409 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   293 00007410 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   294                              <1> .readEntry:
   295 00007415 AD                  <1>     lodsd   ;Read the dword table entry into eax
   296 00007416 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   297 0000741B 7428                <1>     je .exit    
   298 0000741D 38D8                <1>     cmp al, bl  ;Compare the error codes
   299 0000741F 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   300 00007421 D3E8                <1>     shr eax, cl
   301 00007423 3CFF                <1>     cmp al, -1
   302 00007425 7406                <1>     je .skipClass
   303 00007427 8805(0E040000)      <1>     mov byte [errorClass], al
   304                              <1> .skipClass:
   305 0000742D D3E8                <1>     shr eax, cl
   306 0000742F 3CFF                <1>     cmp al, -1
   307 00007431 7406                <1>     je .skipAct
   308 00007433 8805(0D040000)      <1>     mov byte [errorAction], al
   309                              <1> .skipAct:
   310 00007439 D3E8                <1>     shr eax, cl
   311 0000743B 3CFF                <1>     cmp al, -1
   312 0000743D 7406                <1>     je .exit
   313 0000743F 8805(0A040000)      <1>     mov byte [errorLocus], al
   314                              <1> .exit:
   315 00007445 5E                  <1>     pop rsi
   316 00007446 59                  <1>     pop rcx
   317 00007447 5B                  <1>     pop rbx
   318 00007448 58                  <1>     pop rax
   319                              <1>     return
    13                              <2> %%_ret:
    14 00007449 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> checkFail:
   321                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   322                              <1> ; and swaps the var error code if so
   323 0000744A 803D(6A040000)00    <1>     cmp byte [Int24Fail], 0
   324 00007451 7509                <1>     jnz .skipFail
   325 00007453 66C705(0B040000)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 24h"
   325 0000745B 00                  <1>
   326                              <1> .skipFail:
   327 0000745C 56                  <1>     push rsi
   328 0000745D 488D35B18CFFFF      <1>     lea rsi, extErrTbl
   329 00007464 E89CFFFFFF          <1>     call setErrorVars
   330 00007469 5E                  <1>     pop rsi
   331                              <1>     return
    13                              <2> %%_ret:
    14 0000746A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> ;========================================:
   333                              <1> ;      Reentrant Kernel Functions        :
   334                              <1> ;========================================:
   335                              <1> ctrlBreakCheck:    ;ah = 33h
   336 0000746B 3C06                <1>     cmp al, 6
   337 0000746D 743C                <1>     je .trueVer
   338 0000746F 3C05                <1>     cmp al, 5
   339 00007471 742E                <1>     je .getBtDrv    ;Peel off btdrv req.
   340 00007473 84C0                <1>     test al, al
   341 00007475 7508                <1>     jnz .cbcget     ;Get the state or other functions
   342 00007477 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   343 0000747D 48CF                <1>     iretq
   344                              <1> .cbcget:
   345 0000747F 3C02                <1>     cmp al, 02h
   346 00007481 771A                <1>     ja .cbcBad
   347 00007483 740D                <1>     jz .cbcxchg ;Function 2
   348 00007485 52                  <1>     push rdx
   349 00007486 80E201              <1>     and dl, 1   ;Get only the bottom bit
   350 00007489 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   351 0000748F 5A                  <1>     pop rdx
   352 00007490 48CF                <1>     iretq
   353                              <1> .cbcxchg:
   354 00007492 80E201              <1>     and dl, 1
   355 00007495 8615(32040000)      <1>     xchg byte [breakFlag], dl
   356 0000749B 48CF                <1>     iretq
   357                              <1> .cbcBad:
   358 0000749D B0FF                <1>     mov al, -1
   359 0000749F 48CF                <1>     iretq
   360                              <1> .getBtDrv:
   361                              <1> ;Undocumented.
   362                              <1> ;Might be unreliable so dont document yet.
   363                              <1> ;Return 1 based boot drive in dl
   364 000074A1 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   365 000074A7 FEC2                <1>     inc dl  ;Return a 1 based drive number
   366 000074A9 48CF                <1>     iretq
   367                              <1> .trueVer:
   368                              <1> ;Undocumented.
   369                              <1> ;bx returns true DOS number.
   370                              <1> ;dl has "revision" number in bits 0-2. 
   371                              <1> ;dh has various flags. All reserved for future use.
   372 000074AB 66BB0062            <1>     mov bx, dosVerMac
   373 000074AF 66BA0000            <1>     mov dx, (dosVerFlags << 8) | dosRev
   374 000074B3 48CF                <1>     iretq
   375                              <1> 
   376                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   377 000074B5 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   378 000074BC 48CF                <1>     iretq
   379                              <1> 
   380                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   381 000074BE 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   382 000074C5 48CF                <1>     iretq
   383                              <1> 
   384                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   385 000074C7 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   386 000074CE 48CF                <1>     iretq
   387                              <1> 
   388                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   389 000074D0 8805(E8190000)      <1>     mov byte [lookahead], al    
   390 000074D6 48CF                <1>     iretq
   391                              <1> 
   392                              <1> systemServices: ;ah = 61h
   393                              <1> ;All pointers returned in rdx
   394                              <1> ;al = 0 -> Get Environment pointer in rdx
   395                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   396                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   397                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   398                              <1> ;                        Else, rdx -> Filename
   399 000074D8 3C01                <1>     cmp al, 1
   400 000074DA 7453                <1>     je short .getCmdLineArgs
   401 000074DC 3C02                <1>     cmp al, 2
   402 000074DE 760C                <1>     jbe .getEnvPtr
   403 000074E0 B801000000          <1>     mov eax, errInvFnc
   404                              <1> .exitBad:
   405 000074E5 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   406 000074EA 48CF                <1>     iretq
   407                              <1> .getEnvPtr:
   408                              <1>     ;Gets the environment pointer in rdx
   409 000074EC 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   410 000074F3 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   411 000074F7 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   412                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   413                              <1> ; pass the ptr to the word after.
   414 000074F9 FA                  <1>     cli
   415 000074FA 51                  <1>     push rcx
   416 000074FB 31C9                <1>     xor ecx, ecx
   417 000074FD B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   418                              <1> .gep0:
   419 00007502 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   420 00007507 740D                <1>     je short .gep1
   421 00007509 48FFC2              <1>     inc rdx         ;Go to the next byte
   422 0000750C FFC9                <1>     dec ecx
   423 0000750E 75F2                <1>     jnz short .gep0
   424                              <1> .gep00:
   425                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   426 00007510 59                  <1>     pop rcx
   427 00007511 FB                  <1>     sti
   428 00007512 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   429 00007514 EBCF                <1>     jmp short .exitBad
   430                              <1> .gep1:
   431 00007516 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   432 0000751D 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   433 00007522 75EC                <1>     jne .gep00
   434 00007524 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   435 0000752B 59                  <1>     pop rcx
   436 0000752C FB                  <1>     sti
   437 0000752D EB0B                <1>     jmp short .exitOk
   438                              <1> .getCmdLineArgs:
   439 0000752F 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   440 00007536 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   441                              <1> .exitOk:
   442 0000753A 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   443 0000753F 48CF                <1>     iretq
   444                              <1> 
   445                              <1> 
   446                              <1> ;========================================:
   447                              <1> ;            Kernel Functions            :
   448                              <1> ;========================================:
   449                              <1> diskReset:         ;ah = 0Dh
   450                              <1> ;Flush all dirty buffers to disk
   451 00007541 E81BFEFFFF          <1>     call dosCrit1Enter
   452 00007546 B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   453 00007548 E8E091FFFF          <1>     call flushAllBuffersForDrive  
   454                              <1>     ;Now we free all buffers and set their referenced bit
   455 0000754D 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   456                              <1> .drBufferLp:
   457 00007554 4881FFFFFFFFFF      <1>     cmp rdi, -1
   458 0000755B 740B                <1>     je .drExit
   459 0000755D 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   460 00007563 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   461 00007566 EBEC                <1>     jmp short .drBufferLp
   462                              <1> .drExit:
   463 00007568 E8FEFDFFFF          <1>     call dosCrit1Exit
   464 0000756D B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   465 00007572 CD2F                <1>     int 2fh
   466                              <1>     return
    13                              <2> %%_ret:
    14 00007574 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> 
   468                              <1> selectDisk:        ;ah = 0Eh
   469                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   470 00007575 88D0                <1>     mov al, dl
   471 00007577 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   472 00007579 E883F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   473 0000757E 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   474 00007580 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   475                              <1> .skipSettingCurrent:
   476 00007586 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   477                              <1>     return
    13                              <2> %%_ret:
    14 0000758D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   480 0000758E 8A05(31040000)      <1>     mov al, byte [currentDrv]
   481                              <1>     return
    13                              <2> %%_ret:
    14 00007594 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> FATinfoDefault:    ;ah = 1Bh
   484 00007595 30D2                <1>     xor dl, dl
   485                              <1> FATinfoDevice:     ;ah = 1Ch
   486                              <1> ;Input: dl = 1 based drive number
   487                              <1> ;Output:
   488                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   489                              <1> ;cx = bytes per sector
   490                              <1> ;edx = total number of clusters
   491                              <1> ;rbx = Ptr to media ID byte
   492 00007597 88D0                <1>     mov al, dl  ;Move drive number into al
   493 00007599 E8D3F9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   494 0000759E 7307                <1>     jnc .fidCDSFound
   495 000075A0 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   496 000075A5 EB2E                <1>     jmp short .error 
   497                              <1> .fidCDSFound:
   498 000075A7 E8BFF8FFFF          <1>     call getDiskData
   499 000075AC 7227                <1>     jc .error
   500                              <1> ;Now we have that:
   501                              <1> ;al = sectors per cluster
   502                              <1> ;ah = media ID byte
   503                              <1> ;ebx = total clusters
   504                              <1> ;cx = bytes per sector
   505                              <1> ;edx = number of available clusters
   506 000075AE E82AF9FFFF          <1>     call getUserRegs
   507 000075B3 8825(96070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   508 000075B9 30E4                <1>     xor ah, ah
   509 000075BB 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   510 000075BE 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   511 000075C2 488D1D(96070000)    <1>     lea rbx, mediaByte
   512 000075C9 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   513 000075CD 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   514                              <1> .badExit:
   515 000075D1 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   516                              <1>     return
    13                              <2> %%_ret:
    14 000075D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   517                              <1> .error:
   518 000075D5 E8D2FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   519 000075DA 66B8FFFF            <1>     mov ax, -1
   520 000075DE EBF1                <1>     jmp short .badExit
   521                              <1> 
   522                              <1> setIntVector:      ;ah = 25h
   523                              <1> ;Called with:
   524                              <1> ;   rdx = Pointer to interrupt handler
   525                              <1> ;   al = Interrupt number
   526 000075E0 FA                  <1>     cli ;Halt interrupts
   527 000075E1 0F010D(CC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   528 000075E8 0FB6C0              <1>     movzx eax, al
   529 000075EB 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   530 000075EF 480305(CE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   531 000075F6 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   532 000075F9 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   533 000075FD 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   534 00007601 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   535 00007605 895008              <1>     mov dword [rax + 8], edx
   536 00007608 FB                  <1>     sti
   537                              <1>     return
    13                              <2> %%_ret:
    14 00007609 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   538                              <1> 
   539                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   540 0000760A 8805(D0030000)      <1>     mov byte [verifyFlag], al
   541 00007610 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   542                              <1>     return
    13                              <2> %%_ret:
    14 00007617 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> getDOSversion:     ;ah = 30h
   544 00007618 E8C0F8FFFF          <1>     call getUserRegs
   545 0000761D 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   546 0000761F 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   547 00007622 668B05D789FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   548 00007629 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   549                              <1>     return
    13                              <2> %%_ret:
    14 0000762C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   550                              <1> 
   551                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   552                              <1> ;Input: dx = Version number. Value of 0 means true value.
   553 0000762D 6685D2              <1>     test dx, dx
   554 00007630 750A                <1>     jnz .newVal
   555 00007632 66C705C589FFFF0062  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   556                              <1>     return
    13                              <2> %%_ret:
    14 0000763B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> .newVal:
   558 0000763C 668915BD89FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   559                              <1>     return
    13                              <2> %%_ret:
    14 00007643 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   562                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   563 00007644 30D2                <1>     xor dl, dl
   564                              <1> getDeviceDPBptr:   ;ah = 32h
   565                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   566                              <1> ;On exit: rbx = DPB pointer
   567 00007646 88D0                <1>     mov al, dl
   568 00007648 E824F9FFFF          <1>     call getCDS
   569 0000764D 722C                <1>     jc .bad
   570 0000764F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   571 00007656 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   572 0000765C 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   573                              <1>     ;Here ONLY if accessing critical Disk data structures
   574 0000765E E8FEFCFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   575 00007663 E851F5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   576 00007668 E8FEFCFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   577 0000766D 720C                <1>     jc .bad
   578 0000766F E869F8FFFF          <1>     call getUserRegs
   579 00007674 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   580 00007678 30C0                <1>     xor al, al
   581                              <1>     return
    13                              <2> %%_ret:
    14 0000767A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   582                              <1> .bad:
   583 0000767B B0FF                <1>     mov al, -1
   584                              <1>     return
    13                              <2> %%_ret:
    14 0000767D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> getInDOSflagPtr:   ;ah = 34h
   587 0000767E 488D15(08040000)    <1>     lea rdx, inDOS
   588 00007685 E853F8FFFF          <1>     call getUserRegs
   589 0000768A 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   590                              <1>     return
    13                              <2> %%_ret:
    14 0000768E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   591                              <1> 
   592                              <1> getIntVector:      ;ah = 35h
   593                              <1> ;Called with:
   594                              <1> ;   al = Interrupt Number
   595                              <1> ;Returns:
   596                              <1> ;   rbx = Pointer to interrupt handler
   597 0000768F E81BF8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   598 00007694 E844F8FFFF          <1>     call getUserRegs
   599 00007699 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   600                              <1>     return
    13                              <2> %%_ret:
    14 0000769D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   601                              <1> 
   602                              <1> getDiskFreeSpace:  ;ah = 36h
   603                              <1> ;Input: Drive number in dl (0 = Current)
   604                              <1> ;Output:    ax = sectors per cluster
   605                              <1> ;           ebx = number of free clusters
   606                              <1> ;           cx = bytes per sector
   607                              <1> ;           edx = total clusters on drive
   608 0000769E 88D0                <1>     mov al, dl
   609 000076A0 E8CCF8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   610 000076A5 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   611                              <1> ;Else, we at an error.
   612                              <1> ;Simply return with CY set and error code in al with extended error info
   613 000076A7 B80F000000          <1>     mov eax, errBadDrv
   614 000076AC E8FBFCFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   615                              <1>     ;extErrExit sets rsi to caller regs
   616 000076B1 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   617                              <1>     return
    13                              <2> %%_ret:
    14 000076B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   618                              <1> .gdfsCDSFound:
   619 000076B7 E8AFF7FFFF          <1>     call getDiskData
   620 000076BC 7219                <1>     jc .error
   621                              <1> ;Now we have that:
   622                              <1> ;al = sectors per cluster
   623                              <1> ;ah = media ID byte
   624                              <1> ;ebx = total clusters
   625                              <1> ;cx = bytes per sector
   626                              <1> ;edx = number of available clusters
   627 000076BE E81AF8FFFF          <1>     call getUserRegs
   628 000076C3 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   629 000076C5 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   630 000076C8 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   631 000076CC 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   632 000076CF 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   633                              <1> .badExit:
   634 000076D3 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   635                              <1>     return
    13                              <2> %%_ret:
    14 000076D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   636                              <1> .error:
   637 000076D7 E8D0FCFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   638 000076DC 66B8FFFF            <1>     mov ax, -1
   639 000076E0 EBF1                <1>     jmp short .badExit
   640                              <1> 
   641                              <1> 
   642                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   643 000076E2 31C0                <1>     xor eax, eax
   644 000076E4 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   645 000076EB E9AEFCFFFF          <1>     jmp extGoodExit
   646                              <1> 
   647                              <1> getSysVarsPtr:     ;ah = 52h
   648 000076F0 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   649 000076F7 E8E1F7FFFF          <1>     call getUserRegs
   650 000076FC 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   651                              <1>     return
    13                              <2> %%_ret:
    14 00007700 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> 
   654                              <1> ;AH = 53h - CREATE DPB
   655                              <1> createDPB:         ;generates a DPB from a given BPB
   656                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   657                              <1> ;This is done so that the other fields of the DPB can be recycled
   658                              <1> ;Input: rsi = ptr to the BPB
   659                              <1> ;       rbp = ptr to the DPB
   660                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   661                              <1> ;bMediaDescriptor
   662 00007701 8A4615              <1>     mov al, byte [rsi + bpb.media]
   663 00007704 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   664                              <1> ;dFirstFreeCluster
   665 00007707 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   666                              <1> ;dNumberOfFreeClusters
   667 0000770E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   668                              <1> ;wBytesPerSector
   669 00007715 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   670 00007719 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   671                              <1> ;bMaxSectorInCluster
   672 0000771D 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   673 00007720 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   674 00007722 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   675                              <1> ;bSectorsPerClusterShift
   676 00007725 FEC0                <1>     inc al
   677 00007727 30C9                <1>     xor cl, cl
   678                              <1> .cd2:
   679 00007729 D0E8                <1>     shr al, 1
   680 0000772B 7404                <1>     jz .cd3
   681 0000772D FEC1                <1>     inc cl
   682 0000772F EBF8                <1>     jmp short .cd2
   683                              <1> .cd3:
   684 00007731 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   685                              <1> ;wFAToffset, number of reserved sectors in partition
   686 00007734 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   687 00007738 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   688                              <1> ;bNumberOfFATs
   689 0000773C 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   690 0000773F 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   691                              <1> ;wNumberRootDirEntries
   692                              <1> ;Gets the number of 32 byte entries in the root directory
   693                              <1> ;Only valid for FAT 12/16
   694 00007742 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   695 00007746 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   696                              <1> ;dFATlength, get the FAT length
   697 0000774A 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   698 0000774E 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   699 00007751 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   700 00007753 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   701 00007756 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   702                              <1> ;Complex cases below...
   703                              <1> ;dClusterHeapOffset, start sector of the data area
   704 00007759 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   705 0000775D 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   706 00007760 85C0                <1>     test eax, eax
   707 00007762 0F44C3              <1>     cmovz eax, ebx
   708                              <1> ;eax = FATsz
   709 00007765 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   710 00007769 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   711 0000776C 85DB                <1>     test ebx, ebx
   712 0000776E 0F44D9              <1>     cmovz ebx, ecx 
   713                              <1> ;ebx = TotSec
   714 00007771 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   715 00007774 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   716                              <1> .cd4:
   717 00007776 01C2                <1>     add edx, eax
   718 00007778 FEC9                <1>     dec cl
   719 0000777A 75FA                <1>     jnz .cd4
   720 0000777C 89D0                <1>     mov eax, edx    ;Store product in eax
   721 0000777E 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   722 00007782 01D0                <1>     add eax, edx
   723                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   724 00007784 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   725 00007788 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   726 0000778B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   727 0000778F 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   728 00007790 89D0                <1>     mov eax, edx
   729 00007792 31D2                <1>     xor edx, edx
   730 00007794 F7F1                <1>     div ecx
   731 00007796 89C2                <1>     mov edx, eax
   732 00007798 58                  <1>     pop rax
   733 00007799 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   734                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   735                              <1>     ;aka eax = Start sector of the data area in volume
   736 0000779B 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   737                              <1> ;dClusterCount
   738 0000779E 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   739 000077A0 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   740 000077A2 31D2                <1>     xor edx, edx
   741 000077A4 BB01000000          <1>     mov ebx, 1
   742 000077A9 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   743 000077AC D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   744 000077AE F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   745 000077B0 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   746 000077B2 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   747                              <1> ;dFirstUnitOfRootDir
   748 000077B5 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   749 000077BA 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   750 000077BD 770F                <1>     ja .cd5
   751                              <1>     ;Else, we need to find the first sector of the root directory
   752                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   753 000077BF 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   754 000077C3 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   755                              <1> .cd51:
   756 000077C7 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   757 000077CA FFC9                <1>     dec ecx
   758 000077CC 75F9                <1>     jnz .cd51
   759                              <1> .cd5:
   760 000077CE 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   761 000077D1 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   762                              <1> ;Exit epilogue
   763 000077D5 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   764 000077DC 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   765                              <1>     %if DEBUG && DPBINFO
   766                              <1>     ;Print DPB 
   767                              <1>     debugEnterM
   768                              <1>     push rbp
   769                              <1>     lea rbp, .l0000
   770                              <1>     call debPrintNullString
   771                              <1>     pop rbp
   772                              <1>     call debDPBBPBptr
   773                              <1>     call debMakeDebuggerRespond
   774                              <1>     jmp short .l0001
   775                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   776                              <1> .l0001:
   777                              <1>     debugExitM
   778                              <1>     %endif
   779                              <1>     return
    13                              <2> %%_ret:
    14 000077DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   780                              <1> 
   781                              <1> getVerifySetting:  ;ah = 54h
   782 000077DF 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   783                              <1>     return
    13                              <2> %%_ret:
    14 000077E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   784                              <1> 
   785                              <1> getExtendedError:  ;ah = 59h
   786 000077E6 E8F2F6FFFF          <1>     call getUserRegs
   787 000077EB 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   788 000077F2 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   789 000077F8 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   790 000077FE 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   791 00007804 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   792 0000780B 668906              <1>     mov word [rsi + callerFrame.rax], ax
   793 0000780E 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   794 00007812 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   795 00007815 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   796                              <1> noOp:
   797                              <1>     return
    13                              <2> %%_ret:
    14 00007819 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> ;At some point we will implement the below function but that is
   799                              <1> ; a low priority as it is not a DOS 3.3 function. 
   800                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    46                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 0000781A 3C07                <1>     cmp al, 07h
     8 0000781C 7204                <1>     jb .skip
     9 0000781E 3C09                <1>     cmp al, 09h
    10 00007820 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007822 4889D6              <1>     mov rsi, rdx
    13 00007825 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00007829 66891D(43040000)    <1>     mov word [machineNum], bx
    15 00007830 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00007834 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 0000783B 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00007842 53                  <1>     push rbx
    20 00007843 488B1D(931A0000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 0000784A 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 0000784B 50                  <1>     push rax    ;Push al onto stack as a qword
    23 0000784C E856010000          <1>     call serverFunctionSelect
    24 00007851 B801000000          <1>     mov eax, eLocUnk
    25 00007856 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 0000785C E94BFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00007861 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00007862 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00007863 5F                  <1>     pop rdi
    33 00007864 E874F6FFFF          <1>     call getUserRegs
    34 00007869 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 0000786C 56                  <1>     push rsi
    36 0000786D B906000000          <1>     mov ecx, 6
    37 00007872 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00007875 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 0000787C 48A5                <1>     movsq   ;Transfer r8...
    40 0000787E 48A5                <1>     movsq   ;... and r9
    41 00007880 5E                  <1>     pop rsi
    42 00007881 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00007884 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007888 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 0000788C 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00007890 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007894 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007898 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 0000789C 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 000078A0 48891D(83040000)    <1>     mov qword [oldRBX], rbx
    51 000078A7 C605(02070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 000078AE E9AFF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 000078B3 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 000078BA 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 000078BF 740A                <1>     je .validTask
    62 000078C1 B805000000          <1>     mov eax, errAccDen
    63 000078C6 E9E1FAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 000078CB 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 000078CD E88FFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 000078D2 53                  <1>     push rbx
    70 000078D3 E8A1D4FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 000078D8 7227                <1>     jc .exit
    72 000078DA 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 000078DF 741B                <1>     je .gotoNextFile
    74 000078E1 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 000078E6 7414                <1>     je .gotoNextFile
    76 000078E8 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 000078EE 750C                <1>     jnz .gotoNextFile
    78 000078F0 48893D(32070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 000078F7 E87CC1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 000078FC 5B                  <1>     pop rbx
    83 000078FD FFC3                <1>     inc ebx
    84 000078FF EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007901 E865FAFFFF          <1>     call dosCrit1Exit
    87 00007906 5B                  <1>     pop rbx ;Align stack
    88 00007907 E992FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 0000790C FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007912 0F8294FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007918 E981FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 0000791D FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007923 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007925 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 0000792B EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 0000792D FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007933 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007935 E8A3F5FFFF          <1>     call getUserRegs
   110 0000793A 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 0000793E 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007942 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007946 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007948 488D3D(07040000)    <1>     lea rdi, sda
   124 0000794F 48B98C160000000000- <1>     mov rcx, sdaLen
   124 00007958 00                  <1>
   125 00007959 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007962 00                  <1>
   126 00007963 E875F5FFFF          <1>     call getUserRegs
   127 00007968 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 0000796C 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007970 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007972 50                  <1>     push rax
   133 00007973 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007978 CD2F                <1>     int 2Fh
   135 0000797A 5B                  <1>     pop rbx
   136 0000797B 7295                <1>     jc short closeFilesByName.shareExitBad
   137 0000797D EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 0000797F 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007981 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007988 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 0000798C 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00007993 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007996 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 0000799D 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 000079A0 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 000079A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 000079A7 55                  <1>     push rbp
   156 000079A8 4889E5              <1>     mov rbp, rsp
   157 000079AB 53                  <1>     push rbx
   158 000079AC 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 000079B0 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 000079B3 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 000079B6 7621                <1>     jbe short .argumentTooBig
   162 000079B8 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 000079BC D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 000079BE FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 000079C0 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 000079C4 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 000079C7 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 000079CB 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 000079CF 5B                  <1>     pop rbx
   170 000079D0 5D                  <1>     pop rbp
   171 000079D1 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 000079D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 000079D9 5B                  <1>     pop rbx
   175 000079DA 5D                  <1>     pop rbp
   176 000079DB C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 000079DE 3C01                <1>     cmp al, 01
   181 000079E0 7214                <1>     jb .getName
   182 000079E2 7437                <1>     jz .setName
   183 000079E4 3C06                <1>     cmp al, 6
   184 000079E6 724C                <1>     jb .netRedir
   185 000079E8 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 000079EF B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 000079F1 E9B6F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 000079F6 4889D7              <1>     mov rdi, rdx
   198 000079F9 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00007A00 E8D8F4FFFF          <1>     call getUserRegs
   200 00007A05 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00007A09 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007A10 31C0                <1>     xor eax, eax
   204 00007A12 48A5                <1>     movsq
   205 00007A14 A5                  <1>     movsd
   206 00007A15 66A5                <1>     movsw
   207 00007A17 A4                  <1>     movsb
   208 00007A18 AA                  <1>     stosb   ;Store terminating null
   209 00007A19 EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 00007A1B 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007A22 4889D6              <1>     mov rsi, rdx
   217 00007A25 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 00007A2B 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00007A32 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007A34 50                  <1>     push rax
   223 00007A35 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 00007A3A CD2F                <1>     int 2Fh
   225 00007A3C 5A                  <1>     pop rdx
   226 00007A3D 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 00007A3F E95AF9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 00007A44 80FC07              <1>     cmp ah, 07h
   233 00007A47 7419                <1>     je .driveAction
   234 00007A49 80FC08              <1>     cmp ah, 08h
   235 00007A4C 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 00007A4E 50                  <1>     push rax
   238 00007A4F B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00007A54 CD2F                <1>     int 2Fh
   240 00007A56 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00007A57 0F824FF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 00007A5D E93CF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00007A62 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00007A64 E863F5FFFF          <1>     call getCDSforDrive
   249 00007A69 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00007A6B 80EA07              <1>     sub dl, 7
   252 00007A6E 7408                <1>     jz .enable
   253 00007A70 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00007A76 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00007A78 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 00007A7E EBDD                <1>     jmp short .goodExit
    47                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00007A80 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00007A83 7411                <1>     je .installCheck
    23 00007A85 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007A88 740C                <1>     je .installCheck
    25 00007A8A 80FC12              <1>     cmp ah, 12h
    26 00007A8D 741E                <1>     je .goMplx
    27 00007A8F 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007A92 7402                <1>     je .installCheck
    29 00007A94 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007A96 84C0                <1>     test al, al
    38 00007A98 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007A9A B801000000          <1>     mov eax, errInvFnc
    41 00007A9F C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007AA6 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007AAB 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00007AAD 3C30                <1>     cmp al, mDispTblL / 2
    48 00007AAF 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50 00007AB1 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    51 00007AB2 53                  <1>     push rbx    ;Storage for DOS function
    52 00007AB3 53                  <1>     push rbx    ;Stores rbx value
    53 00007AB4 488D1D2B000000      <1>     lea rbx, .retAddr
    54 00007ABB 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    55                              <1> 
    56 00007AC0 51                  <1>     push rcx
    57 00007AC1 488D1D668BFFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    58 00007AC8 53                  <1>     push rbx
    59 00007AC9 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    60 00007ACC D1E1                <1>     shl ecx, 1   ;multiply by 2
    61 00007ACE 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    62 00007AD1 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    63 00007AD5 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    64 00007AD6 4801CB              <1>     add rbx, rcx
    65 00007AD9 59                  <1>     pop rcx
    66 00007ADA 48895C2408          <1>     mov qword [rsp + 8], rbx
    67 00007ADF 5B                  <1>     pop rbx
    68 00007AE0 488B442440          <1>     mov rax, qword [rsp + 8*8]  ;Pick the word pushed on the stack before call 
    69                              <1>     return
    13                              <2> %%_ret:
    14 00007AE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    70                              <1> 
    71                              <1> .retAddr:
    72 00007AE6 53                  <1>     push rbx
    73 00007AE7 9C                  <1>     pushfq
    74 00007AE8 5B                  <1>     pop rbx
    75 00007AE9 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    76 00007AEE 5B                  <1>     pop rbx
    77 00007AEF 48CF                <1>     iretq
    78                              <1> 
    79                              <1> multiplexTest:
    80 00007AF1 B0FF                <1>     mov al, -1
    81 00007AF3 C3                  <1>     ret
    82                              <1> 
    83                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    84                              <1> ;Return: r8 = Dos Data Segment Pointer
    85 00007AF4 4C8D05(00000000)    <1>     lea r8, dosDataArea
    86                              <1>     return
    13                              <2> %%_ret:
    14 00007AFB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    89                              <1> ;Input: cl = open mode
    90                              <1> ;       rdx -> Ptr to filename to open
    91                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    92 00007AFC 88C8                <1>     mov al, cl
    93 00007AFE E852B7FFFF          <1>     call openFileHdl
    94                              <1>     return
    13                              <2> %%_ret:
    14 00007B03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    95                              <1> 
    96                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    97                              <1> ;Input:  
    98                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
    99                              <1> ;   ebx = Handle to move (lower word only)
   100                              <1> ;   ecx = Number of bytes to move
   101                              <1> ;   edx = 0 (upper dword, reserved for now)
   102                              <1> ;Return:
   103                              <1> ;   eax = New pointer location
   104                              <1> ;   edx = 0
   105 00007B04 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   106 00007B0A 488D05(D61A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   107 00007B11 488905(7B040000)    <1>     mov qword [oldRSP], rax
   108 00007B18 89E8                <1>     mov eax, ebp
   109 00007B1A E862B9FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   110 00007B1F 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   111                              <1>     return
    13                              <2> %%_ret:
    14 00007B25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   114                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   115                              <1> ; low byte of bp.
   116 00007B26 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   117 00007B2C 488D05(D61A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   118 00007B33 488905(7B040000)    <1>     mov qword [oldRSP], rax
   119 00007B3A 89E8                <1>     mov eax, ebp
   120 00007B3C E8DED2FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   121 00007B41 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   122                              <1>     return  
    13                              <2> %%_ret:
    14 00007B47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> mpxChecksum:
   125                              <1> ;Computes the checksum of a number of bytes in memory
   126                              <1> ;Input: edx = Start value for checksum
   127                              <1> ;       ecx = number of bytes to sum
   128                              <1> ;       rsi -> Ptr to byte array to perform sum on
   129 00007B48 31C0                <1>     xor eax, eax
   130 00007B4A 67E307              <1>     jecxz .exit
   131                              <1> .lp:
   132 00007B4D AC                  <1>     lodsb
   133 00007B4E 01C2                <1>     add edx, eax
   134 00007B50 FFC9                <1>     dec ecx
   135 00007B52 75F9                <1>     jnz .lp
   136                              <1> .exit:
   137                              <1>     return
    13                              <2> %%_ret:
    14 00007B54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   139                              <1> ;Sums the values in a number of bytes in memory
   140                              <1> ;Input: rsi -> Byte array to sum values of
   141                              <1> ;       edx = Value limit (for the sum)
   142                              <1> ;       ecx = 0
   143 00007B55 31C0                <1>     xor eax, eax
   144                              <1> .lp:
   145 00007B57 AC                  <1>     lodsb
   146 00007B58 39C2                <1>     cmp edx, eax
   147                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B5A 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   148 00007B5C 29C2                <1>     sub edx, eax
   149 00007B5E FFC1                <1>     inc ecx
   150 00007B60 EBF5                <1>     jmp short .lp
    48                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007B62 B801000000          <1>     mov eax, errInvFnc
     6 00007B67 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007B6E F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007B6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007B70 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007B75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007B76 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007B77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007B78 FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007B7E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007B7F FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007B85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007B86 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007B8D 53                  <1>     push rbx
    34 00007B8E FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007B94 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B95 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007B97 E806000000          <1>     call shareRetryCountdown
    38 00007B9C FFCB                <1>     dec ebx
    39 00007B9E 75ED                <1>     jnz .mainLoop
    40 00007BA0 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00007BA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007BA2 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007BA9 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007BAB 51                  <1>     push rcx
    49 00007BAC 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007BB3 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007BB6 51                  <1>     push rcx
    53 00007BB7 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007BB9 66FFC9              <1>     dec cx
    56 00007BBC 75FB                <1>     jnz .mainLoop
    57 00007BBE 59                  <1>     pop rcx
    58 00007BBF FFC9                <1>     dec ecx
    59 00007BC1 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007BC3 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007BC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007BC5 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007BCB 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007BCD 50                  <1>     push rax
    69 00007BCE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007BD2 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007BD7 58                  <1>     pop rax
    72 00007BD8 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007BDA E870000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007BDF 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 00007BE1 B820000000          <1>     mov eax, errShrVio
    78 00007BE6 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007BE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 00007BE8 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 00007BE9 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 00007BF0 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
    93 00007BF7 31C0                <1>     xor eax, eax
    94 00007BF9 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 00007BFF 51                  <1>     push rcx
    96 00007C00 E873FFFFFF          <1>     call openShareCallWrapper
    97 00007C05 59                  <1>     pop rcx
    98 00007C06 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 00007C08 E895FFFFFF          <1>     call shareRetryCountdown
   100 00007C0D FFC9                <1>     dec ecx
   101 00007C0F 75DF                <1>     jnz .keepLooping
   102 00007C11 E841000000          <1>     call shareCriticalError
   103 00007C16 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 00007C18 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007C19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 00007C1A C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 00007C21 EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 00007C23 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 00007C2A 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   117 00007C30 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 00007C32 50                  <1>     push rax
   119 00007C33 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00007C37 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 00007C3C 58                  <1>     pop rax
   122 00007C3D 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 00007C3F E80B000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007C44 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   126                              <1> .notInCompatMode:
   127 00007C46 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 00007C48 B821000000          <1>     mov eax, errLokVio
   129 00007C4D F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 00007C4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 00007C4F 57                  <1>     push rdi
   135 00007C50 B821000000          <1>     mov eax, errLokVio
   136 00007C55 EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 00007C57 57                  <1>     push rdi
   141 00007C58 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 00007C5F C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 00007C66 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] 
   145 00007C6D 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 00007C6F E8B4E7FFFF          <1>     call diskDevErr
   147 00007C74 5F                  <1>     pop rdi
   148 00007C75 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007C77 74D5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   150 00007C79 F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00007C7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    49                                  ;These driver files are to be written by an OEM.
    50                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00007C7B [9D7C000000000000]  <1>     dq auxHdr
     7 00007C83 1380                <1>     dw 08013h
     8 00007C85 [1B7E000000000000]  <1>     dq commonStrat
     9 00007C8D [237E000000000000]  <1>     dq conDriver
    10 00007C95 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00007C9D [BF7C000000000000]  <1>     dq prnHdr
    13 00007CA5 0080                <1>     dw 08000h
    14 00007CA7 [1B7E000000000000]  <1>     dq commonStrat
    15 00007CAF [1881000000000000]  <1>     dq com1Intr
    16 00007CB7 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00007CBF [E17C000000000000]  <1>     dq clkHdr
    19 00007CC7 40A0                <1>     dw 0A040h
    20 00007CC9 [596A000000000000]  <1>     dq nulStrat
    21 00007CD1 [5F6A000000000000]  <1>     dq nulIntr
    22 00007CD9 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00007CE1 [037D000000000000]  <1>     dq msdHdr
    25 00007CE9 0880                <1>     dw 08008h
    26 00007CEB [1B7E000000000000]  <1>     dq commonStrat
    27 00007CF3 [8E7F000000000000]  <1>     dq clkDriver
    28 00007CFB 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00007D03 [257D000000000000]  <1>     dq com1Hdr
    31 00007D0B 4008                <1>     dw 00840h   
    32 00007D0D [1B7E000000000000]  <1>     dq commonStrat
    33 00007D15 [A082000000000000]  <1>     dq msdDriver
    34 00007D1D 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 00007D25 [477D000000000000]  <1>     dq com2Hdr
    37 00007D2D 0080                <1>     dw 08000h
    38 00007D2F [1B7E000000000000]  <1>     dq commonStrat
    39 00007D37 [1881000000000000]  <1>     dq com1Intr
    40 00007D3F 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 00007D47 [697D000000000000]  <1>     dq com3Hdr
    43 00007D4F 0080                <1>     dw 08000h
    44 00007D51 [1B7E000000000000]  <1>     dq commonStrat
    45 00007D59 [2181000000000000]  <1>     dq com2Intr
    46 00007D61 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 00007D69 [8B7D000000000000]  <1>     dq com4Hdr
    49 00007D71 0080                <1>     dw 08000h
    50 00007D73 [1B7E000000000000]  <1>     dq commonStrat
    51 00007D7B [2A81000000000000]  <1>     dq com3Intr
    52 00007D83 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00007D8B [AD7D000000000000]  <1>     dq lpt1Hdr
    55 00007D93 0080                <1>     dw 08000h
    56 00007D95 [1B7E000000000000]  <1>     dq commonStrat
    57 00007D9D [3381000000000000]  <1>     dq com4Intr
    58 00007DA5 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00007DAD [CF7D000000000000]  <1>     dq lpt2Hdr
    61 00007DB5 40A0                <1>     dw 0A040h
    62 00007DB7 [596A000000000000]  <1>     dq nulStrat
    63 00007DBF [5F6A000000000000]  <1>     dq nulIntr
    64 00007DC7 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007DCF [F17D000000000000]  <1>     dq lpt3Hdr
    67 00007DD7 40A0                <1>     dw 0A040h
    68 00007DD9 [596A000000000000]  <1>     dq nulStrat
    69 00007DE1 [5F6A000000000000]  <1>     dq nulIntr
    70 00007DE9 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00007DF1 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 00007DF9 40A0                <1>     dw 0A040h
    74 00007DFB [596A000000000000]  <1>     dq nulStrat
    75 00007E03 [5F6A000000000000]  <1>     dq nulIntr
    76 00007E0B 4C50543320202020    <1>     dq "LPT3    "
    77 00007E13 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    51                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00007E1B 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 00007E22 C3                  <1>     ret
     5                              <1> conDriver:
     6 00007E23 50                  <1>     push rax
     7 00007E24 53                  <1>     push rbx
     8 00007E25 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 00007E2C B003                <1>     mov al, 03h ;Unknown Command
    10 00007E2E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 00007E32 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00007E34 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 00007E37 84C0                <1>     test al, al
    15 00007E39 7445                <1>     jz .conInit
    16 00007E3B 3C04                <1>     cmp al, 4
    17 00007E3D 745B                <1>     jz .conRead
    18 00007E3F 3C05                <1>     cmp al, 5
    19 00007E41 0F8499000000        <1>     jz .conNondestructiveRead
    20 00007E47 3C06                <1>     cmp al, 6
    21 00007E49 0F84C2000000        <1>     jz .conInputStatus
    22 00007E4F 3C07                <1>     cmp al, 7
    23 00007E51 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 00007E57 3C08                <1>     cmp al, 8
    25 00007E59 0F84E4000000        <1>     jz .conWrite
    26 00007E5F 3C09                <1>     cmp al, 9
    27 00007E61 0F84DC000000        <1>     jz .conWrite
    28 00007E67 3C0A                <1>     cmp al, 0Ah
    29 00007E69 0F84FD000000        <1>     jz .conOutputStatus
    30 00007E6F EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00007E71 B480                <1>     mov ah, 80h ;Set error bit
    33 00007E73 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 00007E77 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 00007E7D 5B                  <1>     pop rbx
    37 00007E7E 58                  <1>     pop rax
    38 00007E7F C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00007E80 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00007E82 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 00007E89 75EC                <1>     jnz short .conExit
    43 00007E8B E8F60B0000          <1>     call conInit
    44 00007E90 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 00007E97 EBDE                <1>     jmp short .conExit
    46 00007E99 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 00007E9A B005                <1>     mov al, 05h ;Bad request structure length?
    50 00007E9C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 00007E9F 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00007EA1 57                  <1>     push rdi
    54 00007EA2 51                  <1>     push rcx
    55 00007EA3 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 00007EA7 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 00007EA9 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00007EAC 741C                <1>     je .cre2
    60 00007EAE 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 00007EB5 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 00007EB7 31C0                <1>     xor eax, eax
    63 00007EB9 CD36                <1>     int 36h
    64                              <1> .cre11:
    65 00007EBB AA                  <1>     stosb
    66 00007EBC 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 00007EBE 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 00007EC0 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 00007EC6 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 00007EC8 EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 00007ECA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 00007ECD 59                  <1>     pop rcx
    75 00007ECE 5F                  <1>     pop rdi
    76 00007ECF EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 00007ED1 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 00007ED7 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00007EDE EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00007EE0 B005                <1>     mov al, 05h ;Bad request structure length?
    84 00007EE2 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 00007EE5 758A                <1>     jne .conWriteErrorCode
    86 00007EE7 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00007EEE 7519                <1>     jnz .cnr2
    88 00007EF0 B401                <1>     mov ah, 01h     ;Get key if exists
    89 00007EF2 CD36                <1>     int 36h
    90 00007EF4 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 00007EF6 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 00007EF9 E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00007EFE 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 00007F04 E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 00007F09 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00007F0F EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 00007F11 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00007F13 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 00007F16 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 00007F1C E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 00007F21 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00007F23 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 00007F26 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00007F2C C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 00007F33 B401                <1>     mov ah, 01      ;Get buffer status
   115 00007F35 CD36                <1>     int 36h
   116 00007F37 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 00007F3D 30E4                <1>     xor ah, ah
   118 00007F3F CD36                <1>     int 36h ;Read key to flush from buffer
   119 00007F41 EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 00007F43 B005                <1>     mov al, 05h ;Bad request structure length?
   123 00007F45 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 00007F48 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 00007F4E 56                  <1>     push rsi
   127 00007F4F 51                  <1>     push rcx
   128 00007F50 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 00007F54 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 00007F56 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 00007F59 7407                <1>     je .cw2
   133 00007F5B AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 00007F5C CD29                <1>     int 29h ;Fast print char
   135 00007F5E FFC1                <1>     inc ecx
   136 00007F60 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 00007F62 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 00007F65 59                  <1>     pop rcx
   140 00007F66 5E                  <1>     pop rsi
   141 00007F67 E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 00007F6C B005                <1>     mov al, 05h ;Bad request structure length?
   144 00007F6E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 00007F71 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 00007F77 E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 00007F7C 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 29h
   150                              <1> ;Called with char to transfer in al
   151 00007F7D 50                  <1>     push rax
   152 00007F7E B40E                <1>     mov ah, 0Eh
   153 00007F80 CD30                <1>     int 30h
   154 00007F82 58                  <1>     pop rax
   155 00007F83 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 00007F85 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 00007F8C 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 00007F8E 50                  <1>     push rax
   163 00007F8F 53                  <1>     push rbx
   164 00007F90 51                  <1>     push rcx
   165 00007F91 52                  <1>     push rdx
   166 00007F92 56                  <1>     push rsi
   167 00007F93 55                  <1>     push rbp
   168 00007F94 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 00007F9B B003                <1>     mov al, 03h ;Unknown Command
   170 00007F9D 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 00007FA1 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 00007FA3 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 00007FA6 84C0                <1>     test al, al
   175 00007FA8 743B                <1>     jz .clkInit
   176 00007FAA 3C04                <1>     cmp al, 04h
   177 00007FAC 7451                <1>     jz .clkRead
   178 00007FAE 3C06                <1>     cmp al, 06h
   179 00007FB0 0F84AE000000        <1>     jz .clkInputStatus
   180 00007FB6 3C07                <1>     cmp al, 07h
   181 00007FB8 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 00007FBE 3C08                <1>     cmp al, 08h
   183 00007FC0 0F84BE000000        <1>     jz .clkWrite
   184 00007FC6 3C09                <1>     cmp al, 09h
   185 00007FC8 0F84B6000000        <1>     jz .clkWrite
   186 00007FCE EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 00007FD0 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 00007FD2 B480                <1>     mov ah, 80h ;Set error bit
   191 00007FD4 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 00007FD8 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00007FDE 5D                  <1>     pop rbp
   195 00007FDF 5E                  <1>     pop rsi
   196 00007FE0 5A                  <1>     pop rdx
   197 00007FE1 59                  <1>     pop rcx
   198 00007FE2 5B                  <1>     pop rbx
   199 00007FE3 58                  <1>     pop rax
   200 00007FE4 C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 00007FE5 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 00007FE7 F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00007FEE 75E8                <1>     jnz short .clkExit
   205 00007FF0 E8F20A0000          <1>     call clockInit
   206 00007FF5 C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00007FFC EBDA                <1>     jmp short .clkExit
   208 00007FFE 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00007FFF B005                <1>     mov al, 05h ;Bad request structure length?
   212 00008001 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 00008004 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 00008006 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 00008009 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 0000800D 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 00008014 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 00008018 30E4                <1>     xor ah, ah
   220 0000801A CD3A                <1>     int 3Ah         ;Read the system timer
   221 0000801C 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 0000801E 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00008020 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 00008022 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 00008026 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 0000802D 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00008030 0FB7D2              <1>     movzx edx, dx
   230 00008033 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 00008035 89D0                <1>     mov eax, edx
   232 00008037 31D2                <1>     xor edx, edx
   233 00008039 89D8                <1>     mov eax, ebx
   234 0000803B B944040000          <1>     mov ecx, 1092   
   235 00008040 F7F1                <1>     div ecx
   236 00008042 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 00008045 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 00008047 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 0000804B 31D2                <1>     xor edx, edx
   240 0000804D B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 00008052 F7F1                <1>     div ecx
   242 00008054 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 00008057 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 00008059 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 0000805C 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 0000805F E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 00008064 B005                <1>     mov al, 05h ;Bad request structure length?
   253 00008066 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 00008069 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 0000806F E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 00008074 B005                <1>     mov al, 05h ;Bad request structure length?
   259 00008076 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 00008079 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 0000807F E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 00008084 B005                <1>     mov al, 05h ;Bad request structure length?
   265 00008086 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 00008089 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 0000808F 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 00008092 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 00008096 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 0000809A 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 000080A1 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 000080A3 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 000080A7 B105                <1>     mov cl, 5
   276 000080A9 F6F1                <1>     div cl          ;Divide al by 5
   277 000080AB 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 000080AD 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 000080AF 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 000080B2 B912000000          <1>     mov ecx, 18
   283 000080B7 F7E1                <1>     mul ecx  
   284 000080B9 01C3                <1>     add ebx, eax
   285                              <1> 
   286 000080BB 31D2                <1>     xor edx, edx
   287 000080BD 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 000080C1 B944040000          <1>     mov ecx, 1092
   289 000080C6 F7E1                <1>     mul ecx
   290 000080C8 01C3                <1>     add ebx, eax
   291 000080CA 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 000080CC 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 000080D0 B401                <1>     mov ah, 01h     ;Set the system time
   294 000080D2 CD3A                <1>     int 3Ah
   295                              <1> 
   296 000080D4 4889F3              <1>     mov rbx, rsi
   297 000080D7 E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 000080DC 51                  <1>     push rcx
   303 000080DD 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 000080E0 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 000080E2 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 000080E7 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 000080ED C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 000080F0 050A000000          <1>     add eax, 10
   310 000080F5 E2F9                <1>     loop .cbth0
   311 000080F7 59                  <1>     pop rcx
   312 000080F8 C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 000080F9 51                  <1>     push rcx
   318 000080FA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 000080FD 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 000080FF 3D0A000000          <1>     cmp eax, 10
   322 00008104 7209                <1>     jb .chtb1
   323 00008106 2D0A000000          <1>     sub eax, 10
   324 0000810B FFC1                <1>     inc ecx
   325 0000810D EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 0000810F C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00008112 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00008114 59                  <1>     pop rcx
   330 00008115 C3                  <1>     ret
   331 00008116 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 00008118 C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 0000811F EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 00008121 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 00008128 EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 0000812A C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 00008131 EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 00008133 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 0000813A 50                  <1>     push rax
   347 0000813B 53                  <1>     push rbx
   348 0000813C 51                  <1>     push rcx
   349 0000813D 52                  <1>     push rdx
   350 0000813E 56                  <1>     push rsi
   351 0000813F 57                  <1>     push rdi
   352 00008140 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 00008147 B003                <1>     mov al, 03h ;Unknown Command
   354 00008149 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 0000814D 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 0000814F 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 00008152 84C0                <1>     test al, al
   359 00008154 745B                <1>     jz short .comExit
   360 00008156 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 00008158 7464                <1>     jz .comRead
   362 0000815A 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 0000815C 0F849D000000        <1>     jz .comNondestructiveRead   
   364 00008162 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 00008164 0F8486000000        <1>     jz .comReadInputStatus
   366 0000816A 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 0000816C 0F849C000000        <1>     jz .comFlushInputBuffers
   368 00008172 3C08                <1>     cmp al, 8
   369 00008174 0F84BA000000        <1>     jz .comWrite
   370 0000817A 3C09                <1>     cmp al, 9
   371 0000817C 0F84B2000000        <1>     jz .comWrite
   372 00008182 3C0A                <1>     cmp al, 0Ah
   373 00008184 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 0000818A EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 0000818C B002                <1>     mov al, 02h ;Unknown device
   377 0000818E EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 00008190 BA0B000000          <1>     mov edx, 0Bh
   380 00008195 EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 00008197 BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 0000819C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 0000819F B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 000081A4 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 000081A6 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 000081A9 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 000081AB B480                <1>     mov ah, 80h ;Set error bit
   391 000081AD 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 000081B1 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 000081B7 5F                  <1>     pop rdi
   395 000081B8 5E                  <1>     pop rsi
   396 000081B9 5A                  <1>     pop rdx
   397 000081BA 59                  <1>     pop rcx
   398 000081BB 5B                  <1>     pop rbx
   399 000081BC 58                  <1>     pop rax
   400 000081BD C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 000081BE B005                <1>     mov al, 05h ;Bad request structure length?
   404 000081C0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 000081C3 75E6                <1>     jne .comWriteErrorCode
   406 000081C5 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 000081C9 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 000081CB 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 000081CE 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 000081D0 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 000081D5 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 000081DC F8                  <1>     clc
   415 000081DD CD34                <1>     int 34h ;Recieve Char
   416 000081DF 72BB                <1>     jc .comError
   417 000081E1 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 000081E4 74EA                <1>     je .cr11
   419 000081E6 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 000081E7 FFC1                <1>     inc ecx
   421 000081E9 EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 000081EB 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 000081EE EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 000081F0 B005                <1>     mov al, 05h ;Bad request structure length?
   428 000081F2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 000081F5 75B4                <1>     jne .comWriteErrorCode
   430 000081F7 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 000081FD EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 000081FF B005                <1>     mov al, 05h ;Bad request structure length?
   436 00008201 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 00008204 75A5                <1>     jne .comWriteErrorCode
   438 00008206 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 0000820C EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 0000820E B005                <1>     mov al, 05h ;Bad request structure length?
   443 00008210 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 00008213 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 00008215 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 0000821C B800020000          <1>     mov eax, 0200h    ;Recieve
   448 00008221 F8                  <1>     clc
   449 00008222 CD34                <1>     int 34h
   450 00008224 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 0000822A 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 0000822D 75E6                <1>     jne .cfib0
   453 0000822F E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 00008234 B005                <1>     mov al, 05h ;Bad request structure length?
   457 00008236 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 00008239 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 0000823F 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 00008243 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 00008245 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 00008248 7417                <1>     je .cw2
   465 0000824A AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 0000824B B401                <1>     mov ah, 01h ;Move function number into ah
   467 0000824D 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 00008254 F8                  <1>     clc
   469 00008255 CD34                <1>     int 34h ;Transmit char
   470 00008257 0F823FFFFFFF        <1>     jc .comError
   471 0000825D FFC1                <1>     inc ecx
   472 0000825F EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 00008261 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 00008264 E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 00008269 B005                <1>     mov al, 05h ;Bad request structure length?
   480 0000826B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 0000826E 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 00008274 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 0000827B B403                <1>     mov ah, 03h     ;Get status
   485 0000827D F8                  <1>     clc
   486 0000827E CD34                <1>     int 34h
   487 00008280 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 00008286 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 0000828B C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 0000828E F7D0                <1>     not eax      ;Bitwise inversion
   491 00008290 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 00008295 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 0000829A E912FFFFFF          <1>     jmp .comExit
   494 0000829F 00                  <1> .comDevice   db 0
    52                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 000082A0 50                  <1>     push rax
     3 000082A1 53                  <1>     push rbx
     4 000082A2 51                  <1>     push rcx
     5 000082A3 52                  <1>     push rdx
     6 000082A4 56                  <1>     push rsi
     7 000082A5 57                  <1>     push rdi
     8 000082A6 55                  <1>     push rbp
     9 000082A7 4150                <1>     push r8
    10 000082A9 488B1D63FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 000082B0 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 000082B4 B003                <1>     mov al, drvBadCmd
    13 000082B6 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 000082BC B001                <1>     mov al, drvBadUnit 
    15 000082BE 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 000082C2 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 000082C8 488D358B040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 000082CF 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 000082D3 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 000082D6 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 000082DA 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 000082DE D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 000082E0 488D0DA1000000      <1>     lea rcx, .msdTable
    24 000082E7 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 000082EB 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 000082ED 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 000082EF 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 000082F2 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 000082F4 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 000082FA 4158                <1>     pop r8
    32 000082FC 5D                  <1>     pop rbp
    33 000082FD 5F                  <1>     pop rdi
    34 000082FE 5E                  <1>     pop rsi
    35 000082FF 5A                  <1>     pop rdx
    36 00008300 59                  <1>     pop rcx
    37 00008301 5B                  <1>     pop rbx
    38 00008302 58                  <1>     pop rax
    39 00008303 C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 00008304 4889FB              <1>     mov rbx, rdi
    43 00008307 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 0000830A 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 0000830C 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 0000830F 488B1DFDFAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 00008316 B401                <1>     mov ah, 01h
    50 00008318 CD33                <1>     int 33h ;Read status of last operation
    51 0000831A 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 0000831D B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 0000831F 7460                <1>     je .msdWriteErrorCode 
    54 00008321 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 00008323 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 00008326 7459                <1>     je .msdWriteErrorCode 
    57 00008328 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 0000832B 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 0000832D B002                <1>     mov al, 02h  ;Device not ready code
    61 0000832F 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 00008332 744D                <1>     je .msdWriteErrorCode
    63 00008334 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 00008338 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 0000833C 30C0                <1>     xor al, al
    67 0000833E 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 00008343 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 00008345 B004                <1>     mov al, 04h     ;CRC error code
    71 00008347 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 0000834C 7433                <1>     je .msdWriteErrorCode
    73 0000834E 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 00008353 742C                <1>     je .msdWriteErrorCode
    75 00008355 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 0000835A 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 0000835C B006                <1>     mov al, 06h     ;Seek error code
    79 0000835E 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 00008361 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 00008363 B007                <1>     mov al, 07h
    84 00008365 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 00008368 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 0000836A B008                <1>     mov al, 08h     ;Sector not found code
    88 0000836C 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 0000836F 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 00008371 B00A                <1>     mov al, 0Ah     ;Write fault
    92 00008373 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 00008376 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 00008378 B00B                <1>     mov al, 0Bh     ;Read fault
    96 0000837A 80F911              <1>     cmp cl, 11h     ;Read error
    97 0000837D 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 0000837F B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 00008381 B480                <1>     mov ah, 80h ;Set error bit
   102 00008383 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00008387 C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00008388 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   106 0000838A 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 0000838C AD00                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 0000838E 0D01                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 00008390 1901                <1>     dw .msdRead - .msdTable         ;Function 4
   110 00008392 0000                <1>     dw 0                            ;Function 5
   111 00008394 0000                <1>     dw 0                            ;Function 6
   112 00008396 0000                <1>     dw 0                            ;Function 7
   113 00008398 5201                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 0000839A 8B01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 0000839C 0000                <1>     dw 0                            ;Function 10
   116 0000839E 0000                <1>     dw 0                            ;Function 11
   117 000083A0 D101                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 000083A2 DD01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 000083A4 F801                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 000083A6 1302                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 000083A8 0000                <1>     dw 0                            ;Function 16
   122 000083AA 0000                <1>     dw 0                            ;Function 17
   123 000083AC 0000                <1>     dw 0                            ;Function 18
   124 000083AE 3B02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 000083B0 0000                <1>     dw 0                            ;Function 20
   126 000083B2 0000                <1>     dw 0                            ;Function 21
   127 000083B4 0000                <1>     dw 0                            ;Function 22
   128 000083B6 E202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 000083B8 F702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> .msdInitShim:
   131 000083BA 53                  <1>     push rbx
   132 000083BB 4157                <1>     push r15
   133 000083BD E8A3070000          <1>     call msdInit
   134 000083C2 415F                <1>     pop r15
   135 000083C4 5B                  <1>     pop rbx
   136 000083C5 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   137 000083CE C3                  <1>     ret
   138                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   139                              <1> .msdMedChk:          ;Function 1
   140 000083CF B005                <1>     mov al, 05h ;Bad request structure length
   141 000083D1 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   142 000083D4 75AB                <1>     jne .msdWriteErrorCode
   143                              <1> 
   144 000083D6 E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   145 000083DB 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   146 000083DD 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   147 000083E2 488D0D67030000      <1>     lea rcx, .msdBIOSmap
   148 000083E9 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   149 000083EC F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   150 000083EF 753F                <1>     jnz .mmcNoChange
   151                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   152 000083F1 B416                <1>     mov ah, 16h 
   153 000083F3 CD33                <1>     int 33h
   154 000083F5 0F8214FFFFFF        <1>     jc .msdGenDiskError
   155 000083FB 80FC80              <1>     cmp ah, 80h
   156 000083FE 740E                <1>     je .mmcNoChangeLine
   157 00008400 80FC86              <1>     cmp ah, 86h
   158 00008403 7409                <1>     je .mmcNoChangeLine
   159 00008405 84E4                <1>     test ah, ah ;No change?
   160 00008407 7427                <1>     jz .mmcNoChange
   161 00008409 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   162 0000840C 750D                <1>     jnz .mmcChange
   163                              <1> ;If nothing, fall through and test manually, should never happen though
   164                              <1> .mmcNoChangeLine:
   165                              <1> ;Now we test Media Descriptor
   166 0000840E 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   167 00008413 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   168 00008416 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   169 00008419 7410                <1>     je .mmcUnsure
   170                              <1> .mmcChange:
   171 0000841B C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   172 0000841F 488D051E030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   173 00008426 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   174                              <1>     ;Check here if there were any open handles on the device when it was changed
   175 0000842A C3                  <1>     ret
   176                              <1> .mmcUnsure:
   177 0000842B C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   178 0000842F C3                  <1>     ret
   179                              <1> .mmcNoChange:
   180 00008430 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   181 00008434 C3                  <1>     ret
   182                              <1> 
   183                              <1> 
   184                              <1> .msdBuildBPB:        ;Function 2
   185 00008435 B005                <1>     mov al, 05h ;Bad request structure length
   186 00008437 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   187 0000843A 0F8541FFFFFF        <1>     jne .msdWriteErrorCode
   188                              <1> 
   189 00008440 4889DE              <1>     mov rsi, rbx
   190 00008443 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   191 00008448 488D0D01030000      <1>     lea rcx, .msdBIOSmap
   192 0000844F 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   193 00008452 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   194 00008456 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   195 00008458 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   196 0000845B B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   197 00008460 CD33                <1>     int 33h
   198 00008462 0F82A7FEFFFF        <1>     jc .msdGenDiskError
   199                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   200 00008468 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   201 0000846C 7418                <1>     je .mbbpb0
   202 0000846E 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   203 00008472 7412                <1>     je .mbbpb0
   204 00008474 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   205 00008478 740C                <1>     je .mbbpb0
   206 0000847A 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   207 0000847E B007                <1>     mov al, 07h ;Unknown media error code
   208 00008480 0F82FBFEFFFF        <1>     jb .msdWriteErrorCode
   209                              <1> .mbbpb0:
   210 00008486 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   211 00008489 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   212 0000848C B90F000000          <1>     mov ecx, bpbEx_size/8
   213 00008491 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   214 00008494 C3                  <1>     ret
   215                              <1> .msdIOCTLRead:       ;Function 3, returns done
   216 00008495 B005                <1>     mov al, drvBadDrvReq
   217 00008497 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 0000849A 0F85E1FEFFFF        <1>     jne .msdWriteErrorCode
   219 000084A0 C3                  <1>     ret
   220                              <1> .msdRead:            ;Function 4
   221                              <1> ;Will read one sector at a time.
   222 000084A1 B005                <1>     mov al, 05h ;Bad request structure length
   223 000084A3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   224 000084A6 0F85D5FEFFFF        <1>     jne .msdWriteErrorCode
   225                              <1> 
   226 000084AC E806020000          <1>     call .msdCheckDeviceType
   227                              <1> 
   228 000084B1 4889DF              <1>     mov rdi, rbx
   229 000084B4 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   230                              <1> .msdr0:
   231 000084B6 B682                <1>     mov dh, 82h ;LBA Read Sectors
   232 000084B8 E8D7010000          <1>     call .msdBlkIOCommon
   233 000084BD 0F8241FEFFFF        <1>     jc .msdIOError
   234 000084C3 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   235 000084C7 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   236 000084CB 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   237 000084CF FFC6                <1>     inc esi
   238 000084D1 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   239 000084D4 75E0                <1>     jne .msdr0
   240 000084D6 4889FB              <1>     mov rbx, rdi
   241 000084D9 C3                  <1>     ret
   242                              <1> .msdWrite:           ;Function 8
   243                              <1> ;Will write one sector at a time.
   244 000084DA B005                <1>     mov al, 05h ;Bad request structure length
   245 000084DC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 000084DF 0F859CFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 000084E5 E8CD010000          <1>     call .msdCheckDeviceType
   249                              <1> 
   250 000084EA 4889DF              <1>     mov rdi, rbx
   251 000084ED 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   252                              <1> .msdw0:
   253 000084EF B683                <1>     mov dh, 83h ;LBA Write Sectors
   254 000084F1 E89E010000          <1>     call .msdBlkIOCommon
   255 000084F6 0F8208FEFFFF        <1>     jc .msdIOError
   256 000084FC 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   257 00008500 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   258 00008504 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   259 00008508 FFC6                <1>     inc esi
   260 0000850A 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   261 0000850D 75E0                <1>     jne .msdw0
   262 0000850F 4889FB              <1>     mov rbx, rdi
   263 00008512 C3                  <1>     ret
   264                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   265                              <1> ;Will write one sector at a time and then verify it.
   266 00008513 B005                <1>     mov al, 05h ;Bad request structure length
   267 00008515 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   268 00008518 0F8563FEFFFF        <1>     jne .msdWriteErrorCode
   269                              <1> 
   270 0000851E E894010000          <1>     call .msdCheckDeviceType
   271                              <1> 
   272 00008523 4889DF              <1>     mov rdi, rbx
   273 00008526 31F6                <1>     xor esi, esi  ;Set counter to zero
   274                              <1> .msdwv0:
   275 00008528 B683                <1>     mov dh, 83h ;LBA Write Sectors
   276 0000852A E865010000          <1>     call .msdBlkIOCommon
   277 0000852F 0F82CFFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   278 00008535 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   279 00008537 E858010000          <1>     call .msdBlkIOCommon
   280 0000853C 0F82C2FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   281 00008542 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   282 00008546 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   283 0000854A 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   284 0000854E FFC6                <1>     inc esi
   285 00008550 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   286 00008553 75D3                <1>     jne .msdwv0
   287 00008555 4889FB              <1>     mov rbx, rdi
   288 00008558 C3                  <1>     ret
   289                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   290 00008559 B005                <1>     mov al, drvBadDrvReq
   291 0000855B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 0000855E 0F851DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 00008564 C3                  <1>     ret
   295                              <1> .msdDevOpen:         ;Function 13
   296 00008565 B005                <1>     mov al, drvBadDrvReq
   297 00008567 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   298 0000856A 0F8511FEFFFF        <1>     jne .msdWriteErrorCode
   299                              <1> 
   300 00008570 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   301 00008575 488D0DD9010000      <1>     lea rcx, .msdHdlCnt
   302 0000857C FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   303 0000857F C3                  <1>     ret
   304                              <1> .msdDevClose:        ;Function 14
   305 00008580 B005                <1>     mov al, drvBadDrvReq
   306 00008582 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   307 00008585 0F85F6FDFFFF        <1>     jne .msdWriteErrorCode
   308                              <1> 
   309 0000858B 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   310 00008590 488D0DBE010000      <1>     lea rcx, .msdHdlCnt
   311 00008597 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   312 0000859A C3                  <1>     ret
   313                              <1> .msdRemovableMedia:  ;Function 15
   314 0000859B B005                <1>     mov al, drvBadDrvReq
   315 0000859D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   316 000085A0 0F85DBFDFFFF        <1>     jne .msdWriteErrorCode
   317                              <1>     
   318 000085A6 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   319 000085AB 488D0D9E010000      <1>     lea rcx, .msdBIOSmap
   320 000085B2 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   321 000085B6 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   322 000085BB C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   323 000085BE 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   324 000085C2 C3                  <1>     ret
   325                              <1> .msdGenericIOCTL:    ;Function 19
   326 000085C3 B005                <1>     mov al, drvBadDrvReq
   327 000085C5 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   328 000085C8 0F85B3FDFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   330                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   331 000085CE B003                <1>     mov al, drvBadCmd
   332 000085D0 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   333 000085D4 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   334 000085D7 0F85A4FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   335 000085DD F6C180              <1>     test cl, 80h    ;Extended function bit set?
   336 000085E0 0F849BFDFFFF        <1>     jz .msdWriteErrorCode
   337 000085E6 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   338 000085E9 80F941              <1>     cmp cl, 41h     
   339 000085EC 743F                <1>     je .msdGIOCTLWrite
   340 000085EE 80F942              <1>     cmp cl, 42h
   341 000085F1 7451                <1>     je .msdGIOCTLFormat
   342 000085F3 80F960              <1>     cmp cl, 60h
   343 000085F6 0F8585FDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   344                              <1>     ;Get params here
   345 000085FC 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   346 00008600 488D1549010000      <1>     lea rdx, .msdBIOSmap
   347 00008607 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   348 0000860A B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   349 0000860C 53                  <1>     push rbx
   350 0000860D CD33                <1>     int 33h
   351                              <1>     ;Returns:
   352                              <1>     ;rbx = Sector size in bytes
   353                              <1>     ;rcx = Last LBA block
   354 0000860F 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   355 00008612 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   356 00008613 0F82F6FCFFFF        <1>     jc .msdGenDiskError
   357                              <1> ;Get LBA Table:
   358                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   359                              <1> ;Offset 1:  Reserved, 7 bytes
   360                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   361                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   362 00008619 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   363 0000861D 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   364 00008624 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   365 00008628 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   366                              <1>     return
    13                              <2> %%_ret:
    14 0000862C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> .msdGIOCTLWrite:
   369                              <1> ;Write Table:
   370                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   371                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   372                              <1> ;Offset 2:  Reserved, 6 bytes
   373                              <1> ;Offset 8:  Sector to start format at (QWORD)
   374                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   375 0000862D E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   376 00008632 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   377 00008636 B483                <1>     mov ah, 83h
   378                              <1> .msdGIOCTLwfCommon:
   379 00008638 CD33                <1>     int 33h
   380 0000863A 0F82CFFCFFFF        <1>     jc .msdGenDiskError
   381 00008640 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   382                              <1>     return 
    13                              <2> %%_ret:
    14 00008643 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> .msdGIOCTLFormat:
   385                              <1> ;Format Table:
   386                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   387                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   388                              <1> ;Offset 2:  Reserved, 6 bytes
   389                              <1> ;Offset 8:  Sector to start format at (QWORD)
   390 00008644 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   391 00008649 B485                <1>     mov ah, 85h
   392 0000864B EBEB                <1>     jmp short .msdGIOCTLwfCommon
   393                              <1> 
   394                              <1> .msdGIOCTLFormatWriteSetup:
   395                              <1> ;Sets the following:
   396                              <1> ;al = Number of sectors to write/format
   397                              <1> ;rcx = Sector to begin transfer at
   398                              <1> ;dl = BIOS Drive to do transfer on
   399                              <1> ;rsi = Driver Packet (usually set to rbx)
   400                              <1> ;rdi = Write/Format packet
   401 0000864D 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   402 00008651 488D15F8000000      <1>     lea rdx, .msdBIOSmap
   403 00008658 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   404 0000865B 4889DE              <1>     mov rsi, rbx
   405 0000865E 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   406 00008662 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   407 00008665 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   408                              <1>     return
    13                              <2> %%_ret:
    14 00008669 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> .msdGetLogicalDev:   ;Function 23
   411 0000866A B005                <1>     mov al, drvBadDrvReq
   412 0000866C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   413 0000866F 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   414                              <1> 
   415 00008675 8A05D4000000        <1>     mov al, byte [.msdCurDev]
   416 0000867B 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   417 0000867E C3                  <1>     ret
   418                              <1> .msdSetLogicalDev:   ;Function 24
   419 0000867F B005                <1>     mov al, drvBadDrvReq
   420 00008681 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   421 00008684 0F85F7FCFFFF        <1>     jne .msdWriteErrorCode
   422                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   423 0000868A 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   424 0000868D 8805BC000000        <1>     mov byte [.msdCurDev], al
   425 00008693 C3                  <1>     ret
   426                              <1> 
   427                              <1> .msdBlkIOCommon:  ;Does block IO
   428                              <1> ;Called with rdi containing old rbx value and ah with function number
   429                              <1> ;rbp points to bpb
   430                              <1> ;Error handled by caller
   431                              <1> ;Sector count handled by caller
   432                              <1> ;Called with dh = BIOS function number
   433 00008694 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   434 00008699 488D0DB0000000      <1>     lea rcx, .msdBIOSmap
   435 000086A0 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   436 000086A3 31C9                <1>     xor ecx, ecx
   437 000086A5 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   438 000086A8 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   439 000086AC 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   440 000086B0 88F4                <1>     mov ah, dh
   441 000086B2 B001                <1>     mov al, 01h ;Do one sector at a time 
   442 000086B4 CD33                <1>     int 33h
   443                              <1>     return
    13                              <2> %%_ret:
    14 000086B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> .msdCheckDeviceType:
   446                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   447                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   448                              <1> ; is being transacted on, prompts the user. Else, 
   449                              <1> ;Returns ZF=NZ if media number changed!
   450                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   451 000086B7 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   452 000086BB 3A058E000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   453                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000086C1 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   454                              <1> ;If not equal, check new drive is not A or B
   455 000086C3 3C02                <1>     cmp al, 2
   456 000086C5 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   457                              <1>     ;Check if we are in single drive mode or not
   458 000086C7 F6057F000000FF      <1>     test byte [.msdSingleFlag], -1
   459 000086CE 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   460 000086D0 3A0578000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   461 000086D6 742D                <1>     je .msdCDTexitOk    ;Exit if so
   462 000086D8 880570000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   463 000086DE 0441                <1>     add al, "A" ;Convert to a letter
   464 000086E0 88053A000000        <1>     mov byte [.msdStrikeLetter], al
   465 000086E6 488D3520000000      <1>     lea rsi, .msdStrike
   466 000086ED B937000000          <1>     mov ecx, .msdStrikeL
   467                              <1> .msdCDTprintMessage:
   468 000086F2 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   469 000086F3 CD29                <1>     int 29h ;Print char in al
   470 000086F5 FFC9                <1>     dec ecx
   471 000086F7 75F9                <1>     jnz .msdCDTprintMessage
   472 000086F9 31C0                <1>     xor eax, eax
   473 000086FB CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   474                              <1> .msdCDTexit:
   475 000086FD E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   476 00008702 FFC0                <1>     inc eax ;Clear ZF
   477 00008704 C3                  <1>     ret
   478                              <1> .msdCDTexitOk:
   479 00008705 E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   480 0000870A 31C0                <1>     xor eax, eax
   481 0000870C C3                  <1>     ret
   482                              <1> 
   483 0000870D 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   483 00008716 666F72206472697665- <1>
   483 0000871F 20                  <1>
   484 00008720 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   484 00008729 72696B650D0A616E79- <1>
   484 00008732 206B6579207768656E- <1>
   484 0000873B 2072656164790D0A0A  <1>
   485                              <1> .msdStrikeL equ $ - .msdStrike
   486                              <1> 
   487 00008744 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   488                              <1> ;LASTDRIVE default is 5
   489                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   490                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   491 0000874D 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   492 0000874E 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   493 0000874F 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   494                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   495 00008750 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   496 00008755 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   497 0000875A 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   497 00008763 000000000000000000- <1>
   497 0000876C 000000000000000000- <1>
   497 00008775 000000000000000000- <1>
   497 0000877E 00000000            <1>
   498 00008782 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   498 0000878B 000000000000000000- <1>
   498 00008794 000000000000000000- <1>
   498 0000879D 000000000000000000- <1>
   498 000087A6 000000000000000000- <1>
   498 000087AF 000000000000000000- <1>
   498 000087B8 000000000000000000- <1>
   498 000087C1 000000000000000000- <1>
   498 000087CA 000000000000000000- <1>
   498 000087D3 000000000000000000- <1>
   498 000087DC 000000000000000000- <1>
   498 000087E5 000000000000000000- <1>
   498 000087EE 000000000000000000- <1>
   498 000087F7 000000000000000000- <1>
   498 00008800 000000000000000000- <1>
   498 00008809 000000000000000000- <1>
   498 00008812 000000000000000000- <1>
   498 0000881B 000000000000000000- <1>
   498 00008824 000000000000000000- <1>
   498 0000882D 000000000000000000- <1>
   498 00008836 000000000000000000- <1>
   498 0000883F 000000000000000000- <1>
   498 00008848 000000000000000000- <1>
   498 00008851 000000000000000000- <1>
   498 0000885A 000000000000000000- <1>
   498 00008863 000000000000000000- <1>
   498 0000886C 000000000000000000- <1>
   498 00008875 000000000000000000- <1>
   498 0000887E 000000000000000000- <1>
   498 00008887 000000000000000000- <1>
   498 00008890 000000000000000000- <1>
   498 00008899 000000000000000000- <1>
   498 000088A2 000000000000000000- <1>
   498 000088AB 000000000000000000- <1>
   498 000088B4 000000000000000000- <1>
   498 000088BD 000000000000000000- <1>
   498 000088C6 000000000000000000- <1>
   498 000088CF 000000000000000000- <1>
   498 000088D8 000000000000000000- <1>
   498 000088E1 000000000000000000- <1>
   498 000088EA 000000000000000000- <1>
   498 000088F3 000000000000000000- <1>
   498 000088FC 000000000000000000- <1>
   498 00008905 000000000000000000- <1>
   498 0000890E 000000000000000000- <1>
   498 00008917 000000000000000000- <1>
   498 00008920 000000000000000000- <1>
   498 00008929 000000000000000000- <1>
   498 00008932 000000000000000000- <1>
   498 0000893B 000000000000000000- <1>
   498 00008944 000000000000000000- <1>
   498 0000894D 000000000000000000- <1>
   498 00008956 000000000000000000- <1>
   498 0000895F 000000000000000000- <1>
   498 00008968 000000000000000000- <1>
   498 00008971 000000000000000000- <1>
   498 0000897A 000000000000000000- <1>
   498 00008983 000000000000000000- <1>
   498 0000898C 000000000000000000- <1>
   498 00008995 000000000000000000- <1>
   498 0000899E 000000000000000000- <1>
   498 000089A7 000000000000000000- <1>
   498 000089B0 000000000000000000- <1>
   498 000089B9 000000000000000000- <1>
   498 000089C2 000000000000000000- <1>
   498 000089CB 000000000000000000- <1>
   498 000089D4 000000000000        <1>
   499                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   499                              <2> .dfltBPB :
   174 000089DA E9                  <2>  db 0E9h
   175 000089DB 00                  <2>  db 00h
   176 000089DC 90                  <2>  db 90h
   177 000089DD 534350444F537631    <2>  db 'SCPDOSv1'
   178 000089E5 0002                <2>  dw 0200h
   179 000089E7 01                  <2>  db 01h
   180 000089E8 0100                <2>  dw 0001h
   181 000089EA 02                  <2>  db 02h
   182 000089EB E000                <2>  dw 00E0h
   183 000089ED 400B                <2>  dw 0B40h
   184 000089EF F0                  <2>  db 0F0h
   185 000089F0 0900                <2>  dw 0009h
   186 000089F2 1200                <2>  dw 0012h
   187 000089F4 0200                <2>  dw 0002h
   188 000089F6 00000000            <2>  dd 0
   189 000089FA 00000000            <2>  dd 0
   190 000089FE 00                  <2>  db 00h
   191 000089FF 00                  <2>  db 00h
   192 00008A00 29                  <2>  db 29h
   193 00008A01 00000000            <2>  dd 0
   194 00008A05 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 00008A0E 2020                <2>
   195 00008A10 4641543132202020    <2>  db 'FAT12   '
   196 00008A18 000000000000000000- <2>  db 58 dup 0
   196 00008A21 000000000000000000- <2>
   196 00008A2A 000000000000000000- <2>
   196 00008A33 000000000000000000- <2>
   196 00008A3C 000000000000000000- <2>
   196 00008A45 000000000000000000- <2>
   196 00008A4E 00000000            <2>
   500                              <1> endptr equ $
    53                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00008A52 0F010D23000000      <1>     sidt [myIdt]
     8 00008A59 0FB6C0              <1>     movzx eax, al
     9 00008A5C 4892                <1>     xchg rdx, rax
    10 00008A5E 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00008A62 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00008A69 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00008A6C 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00008A70 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00008A74 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00008A78 894208              <1>     mov dword [rdx + 8], eax
    17 00008A7B C3                  <1>     ret
    18                              <1> myIdt:
    19 00008A7C 0000                <1> .limit  dw 0
    20 00008A7E 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00008A86 50                  <1>     push rax
    25 00008A87 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00008A88 51                  <1>     push rcx
    27 00008A89 52                  <1>     push rdx
    28 00008A8A 488D15ECF4FFFF      <1>     lea rdx, qword [fastOutput]
    29 00008A91 B829000000          <1>     mov eax, 29h
    30 00008A96 E8B7FFFFFF          <1>     call installInterrupt
    31 00008A9B 488D15E3F4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00008AA2 B83B000000          <1>     mov eax, 3Bh
    33 00008AA7 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00008AAC B401                <1>     mov ah, 01      ;Get buffer status
    36 00008AAE CD36                <1>     int 36h
    37 00008AB0 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00008AB2 30E4                <1>     xor ah, ah
    39 00008AB4 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00008AB6 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00008AB8 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00008ABD CD30                <1>     int 30h
    44 00008ABF B402                <1>     mov ah, 02h
    45 00008AC1 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00008AC3 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00008AC5 CD30                <1>     int 30h
    48 00008AC7 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00008AC9 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00008ACE CD30                <1>     int 30h
    51 00008AD0 5A                  <1>     pop rdx
    52 00008AD1 59                  <1>     pop rcx
    53 00008AD2 5B                  <1>     pop rbx
    54 00008AD3 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 00008AD4 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 00008AD9 50                  <1>     push rax
    58 00008ADA 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 00008AE1 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 00008AE5 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 00008AE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 00008AE7 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 00008AE8 B402                <1>     mov ah, 02  ;Read RTC Time
    69 00008AEA CD3A                <1>     int 3Ah
    70 00008AEC 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00008AEE 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 00008AF1 E84D000000          <1>     call .bcd2Bin
    74 00008AF6 88C5                <1>     mov ch, al
    75 00008AF8 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 00008AFB E843000000          <1>     call .bcd2Bin
    77 00008B00 88C1                <1>     mov cl, al
    78 00008B02 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00008B05 E839000000          <1>     call .bcd2Bin
    80 00008B0A 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00008B0C 89C2                <1>     mov edx, eax
    82 00008B0E B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00008B10 CD21                <1>     int 21h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00008B12 B404                <1>     mov ah, 04  ;Read RTC Date
    89 00008B14 CD3A                <1>     int 3Ah
    90 00008B16 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00008B18 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 00008B1B E823000000          <1>     call .bcd2Bin
    94 00008B20 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00008B23 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
    96 00008B29 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00008B2C E812000000          <1>     call .bcd2Bin
    98 00008B31 88C6                <1>     mov dh, al  
    99 00008B33 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 00008B36 E808000000          <1>     call .bcd2Bin
   101 00008B3B 88C2                <1>     mov dl, al
   102 00008B3D B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00008B3F CD21                <1>     int 21h
   104 00008B41 EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00008B43 51                  <1>     push rcx
   108 00008B44 89C1                <1>     mov ecx, eax
   109 00008B46 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 00008B4B 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00008B51 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00008B54 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00008B57 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 00008B59 FFC9                <1>     dec ecx
   116 00008B5B 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00008B5D 59                  <1>     pop rcx
   119 00008B5E C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00008B5F 5B                  <1>     pop rbx ;Get the pointer back
   122 00008B60 E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134 00008B65 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   135                              <1> 
   136 00008B66 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   137 00008B68 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   138 00008B6C 664489C0            <1>     mov ax, r8w
   139 00008B70 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   140 00008B76 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   141 00008B7C C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   142                              <1> 
   143 00008B83 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   144 00008B8A 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   145 00008B91 0F847C000000        <1>     jz .remInit ;No? Go to removables
   146 00008B97 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   146 00008BA0 00                  <1>
   147 00008BA1 B280                <1>     mov dl, 80h ;Start with HDD 0
   148                              <1> .primary:
   149 00008BA3 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   150 00008BAA 7467                <1>     je .remInit
   151 00008BAC 31C9                <1>     xor ecx, ecx    ;Sector 0
   152 00008BAE E80B010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   153 00008BB3 724F                <1>     jc .primaryEpilog
   154                              <1>     ;Here, check MBR or BPB
   155 00008BB5 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   156 00008BBE 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   157                              <1>     ;Now check if BPB or MBR
   158 00008BC0 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   159 00008BC2 8A6302              <1>     mov ah, byte [rbx + 2]
   160 00008BC5 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   161 00008BC9 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   162                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   163                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   164 00008BCB 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   165 00008BD2 B104                <1>     mov cl, 4
   166                              <1> .checkPrimary:
   167 00008BD4 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   168 00008BD7 3C01                <1>     cmp al, 01
   169 00008BD9 7421                <1>     je .primaryFound
   170 00008BDB 3C04                <1>     cmp al, 04
   171 00008BDD 741D                <1>     je .primaryFound
   172 00008BDF 3C06                <1>     cmp al, 06
   173 00008BE1 7419                <1>     je .primaryFound
   174 00008BE3 3C0B                <1>     cmp al, 0Bh
   175 00008BE5 7415                <1>     je .primaryFound
   176 00008BE7 3C0C                <1>     cmp al, 0Ch
   177 00008BE9 7411                <1>     je .primaryFound
   178 00008BEB 3C0E                <1>     cmp al, 0Eh
   179 00008BED 740D                <1>     je .primaryFound
   180 00008BEF 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   181 00008BF6 FEC9                <1>     dec cl
   182 00008BF8 740A                <1>     jz .primaryEpilog
   183 00008BFA EBD8                <1>     jmp short .checkPrimary
   184                              <1> .primaryFound:
   185                              <1>     ;Copy the first sector of this partition into memory
   186 00008BFC 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   187 00008BFF E8C8000000          <1>     call .readSectorAndAddDataToTables
   188                              <1> .primaryEpilog:
   189 00008C04 FEC2                <1>     inc dl  ;Goto next BIOS drive
   190 00008C06 88D6                <1>     mov dh, dl
   191 00008C08 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   192 00008C0B 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   193 00008C11 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   194                              <1> .extended:
   195                              <1> ;We have gone through all the devices once
   196                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   197                              <1>     ;je .remInit ;If yes, get removable devices
   198                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   199                              <1>     ;xor ecx, ecx    ;Get MBR back
   200                              <1>     ;call .initReadSector
   201                              <1>     ;Now we eventually search MBR for a FAT extended partition
   202                              <1> .remInit:
   203                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   204                              <1> ; for some reason the removable drives stop working or dont exist.
   205 00008C13 488D35C0FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   206 00008C1A 488D3D39FBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   207 00008C21 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   208 00008C24 48897708            <1>     mov qword [rdi + 8], rsi
   209                              <1> ;This forces the hard drives to start at C:
   210 00008C28 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   211 00008C2B 30D2                <1>     xor dl, dl  ;Start with removable device 0
   212 00008C2D 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   213                              <1>     ;rdi points to the space for the subsequent bpb's
   214 00008C30 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   215 00008C37 7508                <1>     jnz .removables
   216 00008C39 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   217 00008C40 C3                  <1>     ret ;and return!
   218                              <1> .removables:
   219 00008C41 31C9                <1>     xor ecx, ecx    ;Read sector 0
   220 00008C43 E884000000          <1>     call .readSectorAndAddDataToTables
   221                              <1> .removableEpilogue:
   222 00008C48 FEC2                <1>     inc dl  ;Goto next BIOS device now
   223 00008C4A 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   224 00008C50 7412                <1>     je .end
   225 00008C52 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   226 00008C59 7503                <1>     jne .re0
   227 00008C5B 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
   228                              <1> .re0:
   229 00008C5E 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   230 00008C62 72DD                <1>     jb .removables
   231                              <1> .end:
   232 00008C64 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   233 00008C6B 741D                <1>     je .singleRemDev
   234                              <1> .msdExit:
   235 00008C6D 5B                  <1>     pop rbx ;rbx points to the parameter block
   236                              <1>     ;Now we set the .optptr, .endptr and .numunt
   237 00008C6E 50                  <1>     push rax
   238 00008C6F 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   239 00008C76 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   240 00008C79 488D05DAFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   241 00008C80 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   242 00008C84 58                  <1>     pop rax
   243 00008C85 E94AFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   244                              <1> .singleRemDev:
   245                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   246 00008C8A 488D1DBFFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   247 00008C91 8A15B9FAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   248 00008C97 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   249 00008C9A 488D1DB9FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   250 00008CA1 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   251 00008CA4 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   252 00008CA8 C6059EFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   253 00008CAF C60598FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   254 00008CB6 FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   255 00008CBC EBAF                <1>     jmp short .msdExit
   256                              <1> .initReadSector:
   257                              <1> ;Called with sector number in rcx and BIOS device number in dl
   258 00008CBE B482                <1>     mov ah, 82h ;Read
   259 00008CC0 B001                <1>     mov al, 1   ;One sector
   260 00008CC2 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   261 00008CC9 CD33                <1>     int 33h
   262 00008CCB C3                  <1>     ret
   263                              <1> 
   264                              <1> .readSectorAndAddDataToTables:
   265                              <1> ;Input:
   266                              <1> ;ecx = Sector number to read
   267                              <1> ;r15 -> bpb array entry for the BPB
   268                              <1> ;r8 = Logical Drive number (offset into arrays)
   269 00008CCC E8EDFFFFFF          <1>     call .initReadSector
   270                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00008CD1 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00008CD3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   271                              <1>     ;Now verify this is a BPB
   272 00008CD4 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   273 00008CD6 8A6302              <1>     mov ah, byte [rbx + 2]
   274 00008CD9 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   275                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008CDD 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   276                              <1>     ;Now copy data to internal tables
   277 00008CDF 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   278 00008CE2 51                  <1>     push rcx
   279 00008CE3 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   280 00008CE8 4C89FF              <1>     mov rdi, r15
   281 00008CEB F348A5              <1>     rep movsq   ;Copy the BPB
   282 00008CEE 59                  <1>     pop rcx
   283                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   284 00008CEF 488D1D5AFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   285 00008CF6 4C01C3              <1>     add rbx, r8
   286                              <1>     ;Add device count to rbx to point to correct entry
   287 00008CF9 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   288 00008CFB 488D1D58FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl]
   289 00008D02 4A8D1CC3            <1>     lea rbx, qword [rbx + 8*r8]
   290 00008D06 4C893B              <1>     mov qword [rbx], r15
   291 00008D09 49FFC0              <1>     inc r8  ;Goto next logical drive
   292 00008D0C FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   293 00008D12 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   294                              <1>     return
    13                              <2> %%_ret:
    14 00008D19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                                  dosLen  equ ($-$$)  ;Get the length of the Segment
    55                                  Segment drvbss follows=resSeg align=1 nobits
    56                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    57 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    58                                  dosEnd: ;Used to compute the size of resident DOS
    58          ------------------       info: assembly required 1+19+2 passes

