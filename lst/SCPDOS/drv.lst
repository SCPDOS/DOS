     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rets 0
    81                              <1> cret s
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retns 0
    85                              <1> cret ns
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL    equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvNotIBM    equ 2000h ;If set, buffer in Build BPB is scratch space
    70                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    71                              <1>     devDrvIOCTLRW   equ 4000h ;If set, IOCTL Read/Write supported
    72                              <1>     devDrvChar      equ 8000h ;If set, Char device
    73                              <1> ;Bit 0 1=console input
    74                              <1> ;    1 1=console output (character devices)
    75                              <1> ;    2 1=NUL device
    76                              <1> ;    3 1=CLOCK device
    77                              <1> ;    4 1=Int 29 output (CON)
    78                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    79                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    80                              <1> ;   11 1=open/close/removable media supported (3.0+)
    81                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    82                              <1> ;      1=media descriptor in FAT required (block devices)
    83                              <1> ;   14 1=IOCTL supported
    84                              <1> ;   15 0=block device
    85                              <1> ;      1=character device
    86                              <1> 
    87                              <1> ;Driver structures
    88                              <1> 
    89                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    90                              <1> 
    91                              <1>     .hdrlen db ?  ;Length of the request header
    92                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    93                              <1>     .cmdcde db ?  ;Command code
    94                              <1>     .status dw ?  ;Status word
    95                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    96                              <1> 
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> struc drvReqPkt
   100                              <1>     drvReqPktM
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   101                              <1> endstruc
   102                              <1> 
   103                              <1> struc initReqPkt  ;Init Request Packet
   104                              <1> 
   105                              <1>     drvReqPktM   ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   106 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   107 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   108 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   109 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   114                              <1> 
   115                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   116 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   117 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   118 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   123                              <1> 
   124                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   125 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   126 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   127 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   128                              <1> 
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc ioReqPkt   ;IO Request Packet
   132                              <1> 
   133                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   134 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   135 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   136 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   137 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   138 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   143                              <1>     
   144                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   145 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   146                              <1> 
   147                              <1> endstruc
   148                              <1> 
   149                              <1> struc statusReqPkt   ;Status Request Packet
   150                              <1> 
   151                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   152                              <1> 
   153                              <1> endstruc
   154                              <1> 
   155                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   156                              <1> 
   157                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   158                              <1>      
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc openReqPkt ;Open Device Request Packet
   162                              <1> 
   163                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   164                              <1>      
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc closeReqPkt ;Close Device Request Packet
   168                              <1> 
   169                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   170                              <1>      
   171                              <1> endstruc
   172                              <1> 
   173                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   174                              <1> 
   175                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   176                              <1>      
   177                              <1> endstruc
   178                              <1> 
   179                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   180                              <1> 
   181                              <1>     drvReqPktM    ;Common Driver Header Macro  
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   182 0000000D ??                  <1>     .majfun db ?  ;Major function number
   183 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   184 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   185 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   186 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   187                              <1> 
   188                              <1> endstruc
   189                              <1> 
   190                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   191                              <1>     
   192                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   193                              <1> 
   194                              <1> endstruc
   195                              <1> 
   196                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   197                              <1>     
   198                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   199                              <1> 
   200                              <1> endstruc
   201                              <1> ;IOCTL structs
   202                              <1> 
   203                              <1> struc lbaParamsBlock
   204 00000000 ??                  <1>     .bSize          db ?
   205 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   206                              <1>                             ;1 = Get current saved drive info w/o updating
   207                              <1>                             ;2 = Get physical parameters of the medium
   208                              <1>                             ;Only meaningful on get. Set must have this as 0
   209 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   210 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   211                              <1>                             ; If one, can use CHS functions with returned vals
   212 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   213 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   214 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   215                              <1> ;The below is the absolute start sector of the partition. It is the 
   216                              <1> ; partition at which to find the BPB.
   217 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   218                              <1> endstruc
   219                              <1> 
   220                              <1> struc lbaIOBlock
   221 00000000 ??                  <1>     .size           db ?
   222 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   223 00000002 ????????????        <1>     .res            db 6 dup (?)
   224 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start write at
   225 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   226                              <1> endstruc
   227                              <1> 
   228                              <1> struc lbaFormatBlock
   229 00000000 ??                  <1>     .size           db ?
   230 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   231 00000002 ????????????        <1>     .res            db 6 dup (?)
   232 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start format at
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc chsParamsBlock
   236 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   237 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   238 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   239 00000004 ????                <1>     .wNumCyl    dw ?
   240 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   241 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   242                              <1>     .TrackLayout:
   243                              <1> endstruc
   244                              <1> 
   245                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   246                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   247                              <1> ;Only used in setparams requests. Ignored for getparams 
   248                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   249                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   250                              <1> 
   251                              <1> 
   252                              <1> struc chsIOBlock
   253 00000000 ??                  <1>     .bSpecFuncs     db ?
   254 00000001 ????                <1>     .wStartHead     dw ?
   255 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   256 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   257 00000007 ????                <1>     .wNumSectors    dw ?
   258 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   259                              <1> endstruc
   260                              <1> 
   261                              <1> struc chsFormatBlock
   262 00000000 ??                  <1>     .bSpecFuncs db ?
   263 00000001 ????                <1>     .wStartHead dw ?
   264 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   265                              <1> endstruc
   266                              <1> 
   267                              <1> struc accFlgBlk
   268 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   269 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc idParamBlk
   273 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   274 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   275 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   276 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   277                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
     1                              <1> ;No externally defined symbols, no internally exposed symbols.
     2                              <1> 
     3                              <1> ;Driver internal equates
     4                              <1> drvBlkTblL      equ 26  ;Space for 26 drive letters!
     5                              <1> ;IOCTL track table size (max number of sectors in a track is 63)
     6                              <1> maxTrackTblSz   equ 63
     7                              <1> maxAcc          equ 5   ;Maximum accesses to a remdev w/o timer/changeline
     8                              <1> 
     9                              <1> struc drvBlk
    10                              <1> ;--------------------------------------------------------------------
    11                              <1> ; Drvblk Header information
    12                              <1> ;--------------------------------------------------------------------
    13 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    14 00000008 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    15 00000009 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    16                              <1> ;--------------------------------------------------------------------
    17                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    18                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    19                              <1> ;  left in those fields... not a problem)
    20                              <1> ;--------------------------------------------------------------------
    21                              <1> .bpb:
    22 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    23 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    24 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    25 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    26 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    27 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
    28 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
    29 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
    30 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
    31 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
    32 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
    33 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
    34                              <1> ;--------------------------------------------------------------------
    35                              <1> ; The below vars are only accessed on FAT32 volumes
    36                              <1> ;--------------------------------------------------------------------
    37 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
    38 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
    39 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
    40 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
    41 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
    42 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
    43                              <1> .endBpb:
    44                              <1> ;--------------------------------------------------------------------
    45                              <1> ; DrvBlk flags
    46                              <1> ;--------------------------------------------------------------------
    47 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
    48 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
    49 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
    50 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
    51                              <1> ;The below word is a legacy thing. It is only used in a CHS based IOCTL call.
    52 00000039 ????                <1>     .wNumCyl    dw ?
    53 0000003B <res 35h>           <1>     .sBkupBPB   db bpb32_size dup (?)   ;Backup of BPB used during format
    54                              <1> .dAccTime:          ;Last media check time if remdev
    55 00000070 ????????            <1>     .wPtnType   dd ?    
    56                              <1> ;--------------------------------------------------------------------
    57                              <1> ; Volume string and id for the drive described by this drvblk
    58                              <1> ;--------------------------------------------------------------------
    59 00000074 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
    60 0000007F ??                  <1>                 db ?            ;Null terminator for string
    61 00000080 ????????            <1>     .volId      dd ?            ;Volume serial number            
    62 00000084 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
    63 0000008C ??                  <1>                 db ?            ;Null terminator for string
    64                              <1> endstruc
    65                              <1> drvBlkBpb_size equ drvBlk.endBpb - drvBlk.bpb
    66                              <1> 
    67                              <1> ;FAT type values
    68                              <1> bpbUnknown  equ 80h ;Unknown FAT
    69                              <1> bpbFat16    equ 40h ;FAT 16 disk
    70                              <1> bpbFat32    equ 20h ;FAT 32 disk
    71                              <1> bpbFat12    equ 10h ;FAT 12 disk
    72                              <1> 
    73                              <1> ;Device Type flags
    74                              <1> type48TPI   equ 0   ;Small floppy format, depreciated
    75                              <1> type96TPI   equ 1   ;Large floppy format, depreciated
    76                              <1> typeSmall   equ 2   ;Super large floppy format, depreciated
    77                              <1> typeHard    equ 5   ;Hard drive
    78                              <1> typeGenRem  equ 7   ;Generic removable medium, default
    79                              <1> 
    80                              <1> ;Device Flag values
    81                              <1> devFixed    equ 1       ;Set if fixed disk 
    82                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
    83                              <1> devLockBpb  equ 4       ;Set if we are not to update BPB on updateBPB calls
    84                              <1> devSameSec  equ 8       ;All sectors in track are same size
    85                              <1> devMulti    equ 10h     ;Physical drive has many logical units (A/B share)
    86                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
    87                              <1> devChgd     equ 40h     ;Dev change detected (set on shared physical drives)
    88                              <1>                         ; Can only be set on remdevs with changeline support!
    89                              <1> devSetDASD  equ 80h     ;Set if we need to set drive DASD params before next fmt.
    90                              <1>                         ; Gets set if new parameters are written to drive!
    91                              <1> devNewParms equ 100h    ;Set if new drive parameters set! Set on IOCTL setparms.
    92                              <1> devUnFmt    equ 200h    ;Disables reads/writes if set
    93                              <1> 
    94                              <1> ;Media byte bits
    95                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
    96                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
    97                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
    98                              <1> 
    99                              <1> ;Partition types
   100                              <1> ptnPrimary  equ 1       ;A primary MBR partition
   101                              <1> ptnLogical  equ 2       ;A logical MBR partition
   102                              <1> ptnActive   equ 80h     ;An active partition
   103                              <1> ptnGpt      equ 4       ;A primary GPT partition
   104                              <1> ptrUnknown  equ 8000h   ;An unknown partition
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E8BA320000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E8A7310000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 7408                <1>     jz .prnExit 
   513                              <1>     ;Everything else, device not ready
   514 000004AD B002                <1>     mov al, drvNotReady
   515                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   516 000004AF B480                <1>     mov ah, 80h ;Set error bit
   517 000004B1 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   518                              <1> .prnExit:
   519 000004B5 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   520 000004BB 5B                  <1>     pop rbx
   521 000004BC 58                  <1>     pop rax
   522 000004BD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> ; This file contains five main routines:
     2                              <1> ; 1) Replacement Int 39h routine (for unhooking interrupts back).
     3                              <1> ; 2) Replacement Int 33h routine.
     4                              <1> ; 3) Int 33h replacement routine.
     5                              <1> ; 4) Driver itself
     6                              <1> ; 5) Int 2Fh Driver backdoor routine
     7                              <1> 
     8 000004BE 0000000000000000    <1> i39Org  dq 0    ;Original BIOS Int 39h to replace on Int 39h
     9 000004C6 0000000000000000    <1> i33Org  dq 0    ;Original BIOS Int 33h to replace on Int 39h.
    10 000004CE 0000000000000000    <1> i2FNext dq 0    ;Previous Int 2Fh handler
    11 000004D6 0000000000000000    <1> i33Next dq 0    ;Current disk driver to call.
    12                              <1> 
    13                              <1> 
    14                              <1> ;DEBUG COMMON ROUTINES!
    15                              <1> drvDbg equ 0
    16                              <1> i33Dbg equ 0
    17                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
    18                              <1> %if drvDbg
    19                              <1> dbgPrintString:
    20                              <1> ;Pass in rsi the string we wanna print and its length in ecx.
    21                              <1> ;Preserves all registers
    22                              <1>     pushfq
    23                              <1>     push rax
    24                              <1> .lp:
    25                              <1>     lodsb
    26                              <1>     test al, al
    27                              <1>     jz .exit
    28                              <1>     call dbgPutch
    29                              <1>     jmp short .lp
    30                              <1> .exit:
    31                              <1>     pop rax
    32                              <1>     popfq
    33                              <1>     return
    34                              <1> 
    35                              <1> dbgCrlf:
    36                              <1> ;Prints a CRLF
    37                              <1>     push rax
    38                              <1>     mov al, 0Ah 
    39                              <1>     call dbgPutch
    40                              <1>     mov al, 0Dh
    41                              <1>     call dbgPutch
    42                              <1>     pop rax
    43                              <1>     return
    44                              <1> 
    45                              <1> dbgPutch:
    46                              <1> ;Input: al = ASCII char to print
    47                              <1>     push rdx
    48                              <1>     mov dx, 0E9h
    49                              <1>     out dx, al
    50                              <1>     pop rdx
    51                              <1>     return
    52                              <1> 
    53                              <1> dbgPrintHexByte:
    54                              <1> ;Print the hex byte in al as a hex value
    55                              <1>     pushfq
    56                              <1>     push rdx
    57                              <1>     push rbx
    58                              <1>     push rax
    59                              <1> 
    60                              <1>     mov dl, al           ;save byte in dl
    61                              <1>     and ax, 00F0h        ;Hi nybble
    62                              <1>     and dx, 000Fh        ;Lo nybble
    63                              <1>     shr ax, 4            ;shift one hex place value pos right
    64                              <1>     call .wrchar
    65                              <1>     mov ax, dx           ;mov lo nybble, to print
    66                              <1>     call .wrchar
    67                              <1> 
    68                              <1>     pop rax
    69                              <1>     pop rbx
    70                              <1>     pop rdx
    71                              <1>     popfq
    72                              <1>     return
    73                              <1> .wrchar:
    74                              <1>     push rdx
    75                              <1>     lea rbx, .debascii
    76                              <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    77                              <1>     mov dx, 0E9h
    78                              <1>     out dx, al
    79                              <1>     pop rdx
    80                              <1>     return
    81                              <1> .debascii   db "0123456789ABCDEF"
    82                              <1> %endif
    83                              <1> 
    84                              <1> ;Replacement Int 39h routine to replace interrupts these drivers hook.
    85                              <1> dosInt39h:
    86                              <1> ;For now, we just replace int 33h and int 39h back and then jump to i39h
    87 000004DE B833250000          <1>     mov eax, 2533h
    88 000004E3 488B15DCFFFFFF      <1>     mov rdx, qword [i33Org]
    89 000004EA CD21                <1>     int 21h
    90 000004EC B839250000          <1>     mov eax, 2539h
    91 000004F1 488B15C6FFFFFF      <1>     mov rdx, qword [i39Org]
    92 000004F8 CD21                <1>     int 21h
    93                              <1> ;And now do the actual warm reboot
    94 000004FA FF25BEFFFFFF        <1>     jmp qword [i39Org]
    95                              <1> 
    96                              <1> ;Replacement Int 33h routine
    97                              <1> dosInt33h:
    98                              <1> ;--------------------------------------------------------------------------
    99                              <1> ;       This is a wrapper around the BIOS Int 33h handler.
   100                              <1> ;--------------------------------------------------------------------------
   101                              <1> ;This routine does the following:
   102                              <1> ;1) Checks if a format request is being made, in which case
   103                              <1> ;   it will ensure that the devSetDASD and devChgd bits are set for all 
   104                              <1> ;   drives for the BIOS drive in dl to ensure that the DOS driver treats
   105                              <1> ;   the DOS drives properly.
   106                              <1> ;
   107                              <1> ; For the most part (CHS is depreciated so we don't talk about it here):
   108                              <1> ;   AH = Function number (05h/85h is FORMAT)
   109                              <1> ;   AL = Number of sectors to xact.
   110                              <1> ;   RBX -> Points to a xfr buffer.
   111                              <1> ;   RCX = Start sector of xft.
   112                              <1> ;   DL = BIOS Drive number to xact on.
   113                              <1> ;--------------------------------------------------------------------------
   114                              <1> ;Enter the DOS driver critical section . When the MSD driver enters this it 
   115                              <1> ; already has the lock so this simply incs the count. If a process attempts 
   116                              <1> ; to bypass DOS and we are already processing a request it gets put on ice.
   117                              <1> ;--------------------------------------------------------------------------
   118                              <1> %if drvDbg and i33Dbg
   118          ******************  <1>  warning: trailing garbage after expression ignored [-w+pp-trailing]
   119                              <1>     call .dbgFun
   120                              <1> %endif
   121                              <1> ;Start by clearing the CF on entry
   122 00000500 80642410FE          <1>     and byte [rsp + 2*8], ~1
   123                              <1> ;Enter the device critical section
   124 00000505 50                  <1>     push rax
   125 00000506 B802800000          <1>     mov eax, 8002h
   126 0000050B CD2A                <1>     int 2ah
   127 0000050D 58                  <1>     pop rax
   128                              <1> ;Now put the retaddr in the var we own 
   129 0000050E 8F0557000000        <1>     pop qword [.tmp]
   130                              <1> ;Now check that we are not formatting. If we are, we need to set the bit on
   131                              <1> ; all DOS drives that use this BIOS drive that it has been formatted and 
   132                              <1> ; changed.
   133 00000514 50                  <1>     push rax    ;Push the function number on stack
   134 00000515 80E47F              <1>     and ah, 7Fh ;Clear the top bit (as both 05h and 85h are formats)
   135 00000518 80FC05              <1>     cmp ah, 05h
   136 0000051B 7405                <1>     je .format
   137 0000051D 80FC07              <1>     cmp ah, 07h ;Undocumented SCSI format?
   138 00000520 750A                <1>     jne .notFormat
   139                              <1> .format:
   140                              <1> ;Here we register the format request!
   141 00000522 B8C0000000          <1>     mov eax, devChgd | devSetDASD   ;Bits to set in flags
   142 00000527 E89A0D0000          <1>     call msdDriver.setBitsForAllDevs
   143                              <1> .notFormat:
   144 0000052C 58                  <1>     pop rax     ;Get the function number from stack
   145                              <1> ;Call previous handler and exit irq in this call.
   146 0000052D 881537000000        <1>     mov byte [.drv], dl ;Save the drive we are acting on
   147                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   148                              <1> %if drvDbg
   149                              <1>     push rax
   150                              <1>     push rsi
   151                              <1>     lea rsi, .i33dbgStr1
   152                              <1>     call dbgPrintString
   153                              <1>     mov al, ah
   154                              <1>     call dbgPrintHexByte
   155                              <1>     lea rsi, .i33dbgStr11
   156                              <1>     call dbgPrintString
   157                              <1>     mov al, dl
   158                              <1>     call dbgPrintHexByte
   159                              <1>     call dbgCrlf
   160                              <1>     pop rsi
   161                              <1>     pop rax
   162                              <1> %endif
   163                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   164 00000533 FF159DFFFFFF        <1>     call qword [i33Next]    
   165 00000539 731F                <1>     jnc .exitI33
   166                              <1> ;We enter here when an error occurs!
   167 0000053B 84E4                <1>     test ah, ah ;Error 0? Magical error needs to be cleaned up
   168 0000053D 741B                <1>     jz .exitI33
   169                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   170                              <1> %if drvDbg
   171                              <1>     push rsi
   172                              <1>     lea rsi, .i33dbgStr
   173                              <1>     call dbgPrintString
   174                              <1>     pop rsi
   175                              <1>     push rax
   176                              <1>     mov al, ah
   177                              <1>     call dbgPrintHexByte
   178                              <1>     pop rax
   179                              <1>     call dbgCrlf
   180                              <1> %endif
   181                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   182 0000053F 80FC06              <1>     cmp ah, 06h         ;Did a swap occur?
   183 00000542 7515                <1>     jne .exitI33Bad     ;All other errors get bubbled up
   184                              <1> ;Here we ensure that on all drives with this BIOS number, we 
   185                              <1> ; register that the swap occured :)
   186 00000544 50                  <1>     push rax
   187 00000545 52                  <1>     push rdx
   188 00000546 0FB6151D000000      <1>     movzx edx, byte [.drv]
   189 0000054D B840000000          <1>     mov eax, devChgd    ;Set the device changed bit on all devices
   190 00000552 E86F0D0000          <1>     call msdDriver.setBitsForAllDevs
   191 00000557 5A                  <1>     pop rdx
   192 00000558 58                  <1>     pop rax
   193                              <1> .exitI33Bad:
   194 00000559 F9                  <1>     stc
   195                              <1> .exitI33:
   196                              <1> ;Replace the retaddr back on the stack
   197 0000055A FF350B000000        <1>     push qword [.tmp]
   198                              <1> ;Exit the device critical section now
   199 00000560 50                  <1>     push rax
   200 00000561 B802810000          <1>     mov eax, 8102h
   201 00000566 CD2A                <1>     int 2ah
   202 00000568 58                  <1>     pop rax
   203                              <1> ;And finally go back to the caller :)
   204                              <1>     return
    13                              <2> %%_ret:
    14 00000569 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   205                              <1> %if drvDbg and i33Dbg
   205          ******************  <1>  warning: trailing garbage after expression ignored [-w+pp-trailing]
   206                              <1> .dbgFun:
   207                              <1>     cmp byte [0700h], -1
   208                              <1>     retne
   209                              <1>     cmp byte [.drv], 0
   210                              <1>     retne
   211                              <1>     pop rax
   212                              <1>     inc byte [.dbgCnt]
   213                              <1>     mov ah, 06h
   214                              <1>     cmp byte [.dbgCnt], 1
   215                              <1>     je .dbgIret
   216                              <1>     mov ah, 80h
   217                              <1>     or byte [rsp + 2*8h], 1 ;Set CF
   218                              <1> .dbgIret:
   219                              <1>     iretq
   220                              <1> .dbgCnt db 0
   221                              <1> %endif
   222                              <1> ;Local data for the main IRQ handler
   223 0000056A 00                  <1> .drv    db 0    ;Drive we are acting on
   224 0000056B 0000000000000000    <1> .tmp    dq 0
   225                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   226                              <1> %if drvDbg
   227                              <1> .i33dbgStr1     db "[BIOS] Entering BIOS function ",0
   228                              <1> .i33dbgStr11    db "h on drive ",0
   229                              <1> .i33dbgStr db "[BIOS] Int 33h Error detected: ",0
   230                              <1> %endif
   231                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   232                              <1> 
   233                              <1> ;Int 33h replacement routine
   234                              <1> i2fhSwap33h:
   235                              <1> ;Replaces the current int 33h handler and the int 39h replacement handler
   236                              <1> ;Input: ah = 13h
   237                              <1> ;       rdx -> New Int 33h handler.
   238                              <1> ;       rbx -> Value to replace back when system shutdown occurs.
   239                              <1> ;Output:
   240                              <1> ;       rdx -> Replaced Int 33h handler.
   241                              <1> ;       rbx -> Replaced original lowest level Int 33h handler.
   242 00000573 80FC13              <1>     cmp ah, 13h
   243 00000576 0F856C0D0000        <1>     jne msdDriver.i2fDriver ;Goto the driver backdoor if not this handler 
   244 0000057C 48871553FFFFFF      <1>     xchg qword [i33Next], rdx
   245 00000583 48871D3CFFFFFF      <1>     xchg qword [i33Org], rbx
   246 0000058A 48CF                <1>     iretq
   247                              <1> 
   248                              <1> ; Actual driver here
   249                              <1> msdDriver:
   250 0000058C 50                  <1>     push rax
   251 0000058D 53                  <1>     push rbx
   252 0000058E 51                  <1>     push rcx
   253 0000058F 52                  <1>     push rdx
   254 00000590 56                  <1>     push rsi
   255 00000591 57                  <1>     push rdi
   256 00000592 55                  <1>     push rbp
   257 00000593 4150                <1>     push r8
   258 00000595 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the ptr to the req header in rbx
   259 0000059C 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
   260 000005A0 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
   261 000005A6 7741                <1>     ja .errBadCmd                 ;If yes, error!
   262 000005A8 488D2D4D000000      <1>     lea rbp, .fnTbl
   263 000005AF 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
   264 000005B4 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
   265 000005B7 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
   266 000005B9 7417                <1>     jz .exit
   267 000005BB 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
   268 000005BE 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
   269 000005C2 752C                <1>     jne .errBadPkt
   270 000005C4 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
   271 000005C7 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
   272 000005CB E8C90A0000          <1>     call .setupDrive    ;Returns rbp -> Table entry
   273                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
   274 000005D0 FFD6                <1>     call rsi 
   275                              <1> .exit:
   276 000005D2 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get back the req header ptr
   277 000005D9 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
   278 000005DF 4158                <1>     pop r8
   279 000005E1 5D                  <1>     pop rbp
   280 000005E2 5F                  <1>     pop rdi
   281 000005E3 5E                  <1>     pop rsi
   282 000005E4 5A                  <1>     pop rdx
   283 000005E5 59                  <1>     pop rcx
   284 000005E6 5B                  <1>     pop rbx
   285 000005E7 58                  <1>     pop rax
   286 000005E8 C3                  <1>     ret
   287                              <1> 
   288                              <1> .errBadCmd:
   289 000005E9 B803000000          <1>     mov eax, drvBadCmd
   290 000005EE EB05                <1>     jmp short .writeEntryError
   291                              <1> .errBadPkt:
   292 000005F0 B805000000          <1>     mov eax, drvBadDrvReq
   293                              <1> .writeEntryError:
   294                              <1> ;Used for errors in the driver entry
   295 000005F5 E8F6000000          <1>     call .errorExit
   296 000005FA EBD6                <1>     jmp short .exit
   297                              <1> 
   298                              <1> 
   299                              <1> .fnTbl:
   300                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
   301                              <1> ; to function, high word is packet size for check
   302                              <1>     ;dw .initShim - .fnTbl        ;Function 0
   303 000005FC 132E                <1>     dw msdInit - .fnTbl
   304 000005FE 1F00                <1>     dw initReqPkt_size
   305 00000600 0C01                <1>     dw .medChk - .fnTbl          ;Function 1
   306 00000602 1700                <1>     dw mediaCheckReqPkt_size
   307 00000604 BD01                <1>     dw .buildBPB - .fnTbl        ;Function 2
   308 00000606 1E00                <1>     dw bpbBuildReqPkt_size
   309 00000608 0000                <1>     dw 0                         ;Function 3
   310 0000060A 0000                <1>     dw 0
   311 0000060C 4A04                <1>     dw .read - .fnTbl            ;Function 4
   312 0000060E 2A00                <1>     dw ioReqPkt_size
   313 00000610 0000                <1>     dw 0                         ;Function 5
   314 00000612 0000                <1>     dw 0
   315 00000614 0000                <1>     dw 0                         ;Function 6
   316 00000616 0000                <1>     dw 0
   317 00000618 0000                <1>     dw 0                         ;Function 7
   318 0000061A 0000                <1>     dw 0
   319 0000061C 7A04                <1>     dw .write - .fnTbl           ;Function 8
   320 0000061E 2A00                <1>     dw ioReqPkt_size
   321 00000620 7A04                <1>     dw .write - .fnTbl           ;Function 9
   322 00000622 2A00                <1>     dw ioReqPkt_size
   323 00000624 0000                <1>     dw 0                         ;Function 10
   324 00000626 0000                <1>     dw 0
   325 00000628 0000                <1>     dw 0                         ;Function 11
   326 0000062A 0000                <1>     dw 0
   327 0000062C 0000                <1>     dw 0                         ;Function 12
   328 0000062E 0000                <1>     dw 0
   329 00000630 9005                <1>     dw .devOpen - .fnTbl         ;Function 13
   330 00000632 0D00                <1>     dw openReqPkt_size
   331 00000634 9E05                <1>     dw .devClose - .fnTbl        ;Function 14
   332 00000636 0D00                <1>     dw closeReqPkt_size
   333 00000638 AC05                <1>     dw .remMed - .fnTbl          ;Function 15
   334 0000063A 0D00                <1>     dw remMediaReqPkt_size
   335 0000063C 0000                <1>     dw 0                         ;Function 16
   336 0000063E 0000                <1>     dw 0
   337 00000640 0000                <1>     dw 0                         ;Function 17
   338 00000642 0000                <1>     dw 0
   339 00000644 0000                <1>     dw 0                         ;Function 18
   340 00000646 0000                <1>     dw 0
   341 00000648 BB05                <1>     dw .IOCTL - .fnTbl           ;Function 19
   342 0000064A 2700                <1>     dw ioctlReqPkt_size
   343 0000064C 0000                <1>     dw 0                         ;Function 20
   344 0000064E 0000                <1>     dw 0
   345 00000650 0000                <1>     dw 0                         ;Function 21
   346 00000652 0000                <1>     dw 0
   347 00000654 0000                <1>     dw 0                         ;Function 22
   348 00000656 0000                <1>     dw 0
   349 00000658 610A                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   350 0000065A 0D00                <1>     dw getDevReqPkt_size
   351 0000065C 970A                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   352 0000065E 0D00                <1>     dw setDevReqPkt_size
   353                              <1> 
   354                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   355                              <1> .errorXlat:
   356                              <1> ;Jumped to with ah = BIOS error code as reported on function call
   357 00000660 488D3D97000000      <1>     lea rdi, .biosErrTbl
   358 00000667 88E0                <1>     mov al, ah
   359 00000669 B905000000          <1>     mov ecx, errTblLen
   360 0000066E F2AE                <1>     repne scasb
   361 00000670 7505                <1>     jne .exNotFnd
   362 00000672 8A4704              <1>     mov al, byte [rdi + errTblLen - 1] ;Get entry in DOS table now
   363 00000675 EB79                <1>     jmp short .errorExit
   364                              <1> .exNotFnd:
   365                              <1> ;Come here if the BIOS supplied code was not mapped to anything.
   366                              <1> ; We now get the SCSI code. Only a few cases make sense so
   367                              <1> ; we try and decypher. Else, general fault.
   368 00000677 B800010000          <1>     mov eax, 0100h
   369 0000067C E8360C0000          <1>     call .callI33h
   370                              <1> ;Device Not Ready
   371 00000681 B802000000          <1>     mov eax, drvNotReady  ;Device not ready code
   372 00000686 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   373 00000689 7465                <1>     je .errorExit
   374 0000068B 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   375 0000068F 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   376                              <1> ;Write Protected
   377 00000693 B800000000          <1>     mov eax, drvWPErr
   378 00000698 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   379 0000069D 7451                <1>     je .errorExit
   380                              <1> ;CRC Error
   381 0000069F B804000000          <1>     mov eax, drvCRCErr     ;CRC error code
   382 000006A4 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   383 000006A9 7445                <1>     je .errorExit
   384 000006AB 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   385 000006B0 743E                <1>     je .errorExit
   386 000006B2 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   387 000006B7 7437                <1>     je .errorExit
   388                              <1> ;Seek Error
   389 000006B9 B806000000          <1>     mov eax, drvBadSeek 
   390 000006BE 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   391 000006C1 742D                <1>     je .errorExit
   392                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   393                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   394 000006C3 B807000000          <1>     mov eax, drvBadMed
   395 000006C8 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   396 000006CB 7423                <1>     je .errorExit
   397                              <1> ;Sector Not Found
   398 000006CD B808000000          <1>     mov eax, drvSecNotFnd     ;Sector not found code
   399 000006D2 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   400 000006D5 7419                <1>     je .errorExit
   401                              <1> ;Write faults
   402 000006D7 B80A000000          <1>     mov eax, drvWriteFault     ;Write fault
   403 000006DC 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   404 000006DF 740F                <1>     je .errorExit
   405                              <1> ;Read faults
   406 000006E1 B80B000000          <1>     mov eax, drvReadFault     ;Read fault
   407 000006E6 80F911              <1>     cmp cl, 11h     ;Read error
   408 000006E9 7405                <1>     je .errorExit
   409                              <1> ;General Errors
   410                              <1> .genErrExit:
   411 000006EB B80C000000          <1>     mov eax, drvGenFault     ;Everything else is general error
   412                              <1> .errorExit:     ;Jump to with al=Standard Error code
   413 000006F0 B480                <1>     mov ah, 80h ;Set error bit
   414 000006F2 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   415 000006F9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   416                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 000006FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   417                              <1> ;The xlat table is used for simple error codes.
   418                              <1> ;The more complex stuff requires a further callout to int 33h for the SCSI
   419                              <1> ; error code.
   420                              <1> .biosErrTbl:
   421 000006FE 04                  <1>     db 04h  ;Sector not found
   422 000006FF 06                  <1>     db 06h  ;Media changed or removed
   423 00000700 10                  <1>     db 10h  ;ECC/CRC error
   424 00000701 40                  <1>     db 40h  ;Seek error
   425 00000702 80                  <1>     db 80h  ;Timeout error
   426                              <1> errTblLen equ $ - .biosErrTbl
   427                              <1> .dosErrTbl:
   428 00000703 08                  <1>     db drvSecNotFnd
   429 00000704 0F                  <1>     db drvBadDskChnge
   430 00000705 04                  <1>     db drvCRCErr
   431 00000706 06                  <1>     db drvBadSeek
   432 00000707 02                  <1>     db drvNotReady
   433                              <1> 
   434                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   435                              <1> .medChk:          ;Function 1
   436                              <1> ;Start by placing the label pointer in the slot in the event of a change!
   437 00000708 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   438 0000070C 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   439                              <1> ;Did this drive have its parameters swapped since the last time?
   440 00000710 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devNewParms
   441 00000716 7416                <1>     jz .mcNoFormat
   442                              <1> ;Reset and apply the different logic now :)
   443 00000718 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devNewParms   ;Clear this bit
   444 0000071E C605BB0C0000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   445 00000725 E8450A0000          <1>     call .checkDevFixed ;If fixed, declare changed!
   446 0000072A 7577                <1>     jnz .mmcChange
   447                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   448 0000072C EB07                <1>     jmp short .mcRem
   449                              <1> .mcNoFormat:
   450 0000072E E83C0A0000          <1>     call .checkDevFixed
   451 00000733 7563                <1>     jnz .mmcNoChange
   452                              <1> .mcRem:
   453 00000735 E8510A0000          <1>     call .checkDevType
   454 0000073A 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
   455 00000740 743E                <1>     jz .mmcNoChangeLine
   456 00000742 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   457                              <1> ;Now we do a BIOS changeline check. 
   458 00000745 E82C0A0000          <1>     call .checkMediaChange  ;If we know w
   459 0000074A 750C                <1>     jnz .mmcVolCheck
   460                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   461                              <1> %if drvDbg
   462                              <1>     push rsi
   463                              <1>     lea rsi, .mcDbgMsg
   464                              <1>     call dbgPrintString
   465                              <1>     pop rsi
   466                              <1> %endif
   467                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   468 0000074C B800160000          <1>     mov eax, 1600h 
   469 00000751 E8610B0000          <1>     call .callI33h
   470 00000756 7314                <1>     jnc .mmcNoChangeFnd
   471                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   472                              <1> %if drvDbg
   473                              <1>     push rsi
   474                              <1>     lea rsi, .mcDbgMsg1
   475                              <1>     call dbgPrintString
   476                              <1>     pop rsi
   477                              <1> %endif
   478                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   479                              <1> .mmcVolCheck:
   480                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   481                              <1> %if drvDbg
   482                              <1>     push rsi
   483                              <1>     lea rsi, .mcDbgMsg3
   484                              <1>     call dbgPrintString
   485                              <1>     pop rsi
   486                              <1> %endif
   487                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   488                              <1> ;Here if are checking the volume for its ID.
   489 00000758 E8F7000000          <1>     call .updateBpb ;If this fails, change!
   490 0000075D 7244                <1>     jc .mmcChange
   491 0000075F E8E5090000          <1>     call .checkVolumeSame
   492 00000764 85C0                <1>     test eax, eax
   493 00000766 7437                <1>     jz .mmcUnsure
   494 00000768 7839                <1>     js .mmcChange   ;If the sign bit is set, eax = -1. Disk changed!
   495 0000076A EB2C                <1>     jmp short .mmcNoChange
   496                              <1> .mmcNoChangeFnd:
   497                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   498                              <1> %if drvDbg
   499                              <1>     push rsi
   500                              <1>     lea rsi, .mcDbgMsg2
   501                              <1>     call dbgPrintString
   502                              <1>     pop rsi
   503                              <1> %endif
   504                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   505                              <1> ;If the changeline says no change, check that we were the last disk to access
   506                              <1> ; If we were not, we do a time check do time/last access check. If more than
   507                              <1> ; two seconds, have passed, we do a volume check. Else, since the changeline
   508                              <1> ; said no change, we assume that no change!
   509 0000076C 8A056E0C0000        <1>     mov al, byte [.bLastDsk]
   510 00000772 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
   511 00000775 7421                <1>     je .mmcNoChange
   512 00000777 E80A0B0000          <1>     call .checkTime ;Returns CF=CY if unsure. If unsure, do BPB check
   513 0000077C 72DA                <1>     jc .mmcVolCheck
   514 0000077E EB18                <1>     jmp short .mmcNoChange    ;Else, we say no change!
   515                              <1> .mmcNoChangeLine:
   516                              <1> ; If last accessed medchecked disk was this one and the time on this 
   517                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   518 00000780 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   519 00000783 8605570C0000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   520 00000789 3805510C0000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   521 0000078F 750E                <1>     jne .mmcUnsure
   522                              <1> ;Else, now we do the famous time check. 
   523 00000791 E8F00A0000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   524 00000796 7207                <1>     jc .mmcUnsure
   525                              <1> .mmcNoChange:
   526                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   527                              <1> %if drvDbg
   528                              <1>     call .mmcDbgNoCh
   529                              <1> %endif
   530                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   531 00000798 B801000000          <1>     mov eax, 1
   532 0000079D EB0F                <1>     jmp short .mmcExit
   533                              <1> .mmcUnsure:
   534                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   535                              <1> %if drvDbg
   536                              <1>     call .mmcDbgUnk
   537                              <1> %endif
   538                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   539 0000079F 31C0                <1>     xor eax, eax
   540 000007A1 EB0B                <1>     jmp short .mmcExit
   541                              <1> .mmcChange:
   542                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   543                              <1> %if drvDbg
   544                              <1>     call .mmcDbgChange
   545                              <1> %endif
   546                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   547 000007A3 B8FFFFFFFF          <1>     mov eax, -1
   548 000007A8 8805320C0000        <1>     mov byte [.bLastDsk], al    ;Default to unknown disk if a change occured!
   549                              <1> .mmcExit:
   550 000007AE 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   551 000007B5 88430E              <1>     mov byte [rbx + mediaCheckReqPkt.medret], al
   552                              <1>     return
    13                              <2> %%_ret:
    14 000007B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   554                              <1> %if drvDbg
   555                              <1> .mmcDbgNoCh:
   556                              <1>     lea rsi, .mmcNoStrD
   557                              <1>     jmp short .mmcDbgCmn
   558                              <1> .mmcNoStrD  db "_ not changed",0Ah,0Dh,0
   559                              <1> 
   560                              <1> .mmcDbgUnk:
   561                              <1>     lea rsi, .mmcUnkStrD
   562                              <1>     jmp short .mmcDbgCmn
   563                              <1> .mmcUnkStrD db "_ unknown",0Ah,0Dh,0
   564                              <1> 
   565                              <1> .mmcDbgChange:
   566                              <1>     lea rsi, .mmcChStrD
   567                              <1>     jmp short .mmcDbgCmn
   568                              <1> .mmcChStrD  db "_ changed",0Ah,0Dh,0
   569                              <1> 
   570                              <1> .mmcDbgCmn:
   571                              <1>     push rsi
   572                              <1>     lea rsi, .mmcMedChgStr
   573                              <1>     call dbgPrintString
   574                              <1>     pop rsi
   575                              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   576                              <1>     add al, "A"
   577                              <1>     mov byte [rsi], al
   578                              <1>     call dbgPrintString
   579                              <1>     return
   580                              <1> .mmcMedChgStr   db "[MEDCHECK] ",0
   581                              <1> .mcDbgMsg db "[MEDCHECK] Doing BIOS medcheck",0Ah,0Dh,0
   582                              <1> .mcDbgMsg1 db "[MEDCHECK] Reported change",0Ah,0Dh,0
   583                              <1> .mcDbgMsg2 db "[MEDCHECK] No Change Reported",0Ah,0Dh,0
   584                              <1> .mcDbgMsg3 db "[MEDCHECK] Doing volume check",0Ah,0Dh,0
   585                              <1> %endif
   586                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   587                              <1> 
   588                              <1> .buildBPB:        ;Function 2
   589                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   590                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   591                              <1> ; the table entry bpb which we will be returning.
   592 000007B9 E8B1090000          <1>     call .checkDevFixed
   593 000007BE 7517                <1>     jnz .bbpbExit
   594                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   595                              <1> %if drvDbg
   596                              <1>     push rsi
   597                              <1>     lea rsi, .bbpbMsg
   598                              <1>     call dbgPrintString
   599                              <1>     pop rsi
   600                              <1> %endif
   601                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   602                              <1> ;------------------------------------------------------
   603                              <1> ; Here for removable devices only!!
   604                              <1> ;------------------------------------------------------
   605 000007C0 E839000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   606 000007C5 E88A000000          <1>     call .updateBpb ;Fill the BPB entries in the drvBlk
   607                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   608                              <1> %if drvDbg
   609                              <1>     push rsi
   610                              <1>     push rdi
   611                              <1>     lea rsi, .bbpbMsg1
   612                              <1>     lea rdi, .bbpbMsg11
   613                              <1>     cmovc rsi, rdi
   614                              <1>     call dbgPrintString
   615                              <1>     pop rdi
   616                              <1>     pop rsi
   617                              <1> %endif
   618                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   619 000007CA 0F82E8020000        <1>     jc .ioDoErr     ;Errors returned as if from block IO handler
   620 000007D0 E895010000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   621 000007D5 7300                <1>     jnc .bbpbExit
   622                              <1> ;Here we will search the root directory for the volume label only!
   623                              <1> ;The FS string has been setup and volume ID is set to 0.
   624                              <1> ;
   625                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   626                              <1> ;
   627                              <1> .bbpbExit:
   628 000007D7 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the driver ptr
   629 000007DE 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   630 000007E2 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   631 000007E5 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   632 000007EC 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   633                              <1>     return
    13                              <2> %%_ret:
    14 000007F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   634                              <1> .bbpbError:
   635 000007F1 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   636 000007F3 0F84F7FEFFFF        <1>     je .errorExit   
   637 000007F9 E962FEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   638                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   639                              <1> %if drvDbg
   640                              <1> .bbpbMsg1 db "[BUILDBPB] BPB Build Ok",0Ah,0Dh,0
   641                              <1> .bbpbMsg11 db "[BUILDBPB] BPB Build Failed",0Ah,0Dh,0
   642                              <1> .bbpbMsg db "[BUILDBPB] Building BPB",0Ah,0Dh,0
   643                              <1> %endif
   644                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   645                              <1> .resetIds:
   646                              <1> ;We reset the volume id string and label to the default for the 
   647                              <1> ; volume before the reset!
   648 000007FE 50                  <1>     push rax
   649 000007FF 53                  <1>     push rbx
   650 00000800 51                  <1>     push rcx
   651 00000801 56                  <1>     push rsi
   652 00000802 57                  <1>     push rdi
   653                              <1> 
   654                              <1> ;1) Clear volume Id
   655 00000803 C78580000000000000- <1>     mov dword [rbp + drvBlk.volId], 0
   655 0000080C 00                  <1>
   656                              <1> ;2) Reset the volume label to default
   657 0000080D 488D35C20B0000      <1>     lea rsi, .defLbl
   658 00000814 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   659 00000818 B90C000000          <1>     mov ecx, 12
   660 0000081D F3A4                <1>     rep movsb
   661                              <1> ;3) Reset the FAT string
   662                              <1> ;Since fat32 indicator is in the middle, compare against it.
   663                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   664 0000081F 488D35A70B0000      <1>     lea rsi, .fat32Str
   665 00000826 488D058E0B0000      <1>     lea rax, .fat12Str
   666 0000082D 488D1D900B0000      <1>     lea rbx, .fat16Str
   667 00000834 F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   668 00000838 480F47F3            <1>     cmova rsi, rbx
   669 0000083C 480F42F0            <1>     cmovb rsi, rax
   670 00000840 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   671 00000847 B909000000          <1>     mov ecx, 9
   672 0000084C F3A4                <1>     rep movsb
   673                              <1> 
   674 0000084E 5F                  <1>     pop rdi
   675 0000084F 5E                  <1>     pop rsi
   676 00000850 59                  <1>     pop rcx
   677 00000851 5B                  <1>     pop rbx
   678 00000852 58                  <1>     pop rax
   679                              <1>     return
    13                              <2> %%_ret:
    14 00000853 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> .updateBpb:
   682                              <1> ;------------------------------------------------------
   683                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   684                              <1> ; or failing, for the BPB indicated by the media byte.
   685                              <1> ;Never called on Fixed devs in normal operation.
   686                              <1> ;------------------------------------------------------
   687                              <1> ;Entered with: 
   688                              <1> ;   rbp -> drvBlk for this drive
   689                              <1> ;------------------------------------------------------
   690                              <1> ;Exited with:
   691                              <1> ;   If CF=NC:
   692                              <1> ;       rbx -> The start of the BPB
   693                              <1> ;       rsi -> End of the BPB. Points to the extSig
   694                              <1> ;               if present.
   695                              <1> ;   Else:
   696                              <1> ;       If ZF=NZ: 
   697                              <1> ;           eax = DOS error code (Invalid BPB detected)
   698                              <1> ;       Else:
   699                              <1> ;           eax = BIOS error code
   700                              <1> ;------------------------------------------------------
   701 00000854 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBpb
   702                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000085A 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000085C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   703 0000085D E8AF010000          <1>     call .bbpbReadBS    ;Sets up rbx to point to internal disk buffer
   704                              <1>     retc    ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000862 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000864 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   705                              <1> ;Check we if we have a valid bootsector.
   706 00000865 803B69              <1>     cmp byte [rbx + oemHeader.jump], 069h       ;Direct jump has no NOP
   707 00000868 7410                <1>     je .ubpbCheckMedOk
   708 0000086A 803BE9              <1>     cmp byte [rbx + oemHeader.jump], 0E9h       ;Near jump has no NOP
   709 0000086D 740B                <1>     je .ubpbCheckMedOk
   710 0000086F 803BEB              <1>     cmp byte [rbx + oemHeader.jump], 0EBh       ;Short jump has a NOP
   711 00000872 7555                <1>     jne .ubpbOldDisk
   712 00000874 807B0290            <1>     cmp byte [rbx + oemHeader.jump + 2], 090h   ;NOP should be here
   713 00000878 754F                <1>     jne .ubpbOldDisk
   714                              <1> .ubpbCheckMedOk:
   715 0000087A 8A4315              <1>     mov al, byte [rbx + oemHeader_size + bpb.media] ;Get medbyte from BPB
   716 0000087D E83A000000          <1>     call .checkMedByt   ;Check if it is 0F0h or geq 0F8h
   717 00000882 7545                <1>     jnz .ubpbOldDisk    ;If it is not, don't trust the BPB. Read the FAT sector
   718                              <1> ;Now we do the pre DOS 3.2 single sided check and kludge.
   719 00000884 A801                <1>     test al, 1  ;Double sided bit set on media byte?
   720 00000886 0F85B2000000        <1>     jnz .ubpbNormalDisk ;If set, proceed as normal.
   721                              <1> ;Here if we have a "single-sided" formatted media.
   722                              <1> ;Check the OEM string. We filter out SCPDOS disks first.
   723 0000088C 817B0353435044      <1>     cmp dword [rbx + oemHeader.oemString], "SCPD"
   724 00000893 750C                <1>     jne .ubpbNotSCP
   725 00000895 66817B074F53        <1>     cmp word [rbx + oemHeader.oemString + 4], "OS"
   726 0000089B 0F849D000000        <1>     je .ubpbNormalDisk
   727                              <1> .ubpbNotSCP:
   728                              <1> ;Now blind check version numbers for 16-bit DOS OEM strings.
   729                              <1> ;Search for DOS 2.0, 3.1 and 3.2. These versions have ID's such that 
   730                              <1> ; the version number starts at position 5.
   731                              <1> ;Usually, these BPBs have MSDOS or IBM<SPC><SPC> or OEM<SPC><SPC>
   732                              <1> ; as the OEM string. OEM stands for any three characters used by an
   733                              <1> ; OEM to identify disks they formatted, follows by "x.y" for a major
   734                              <1> ; and minor version number.
   735                              <1> ;Since we cannot enumerate all the OEM strings and can't guarantee
   736                              <1> ; that they have the bug, we will simply check the version number @
   737                              <1> ; position 5 in the string which seems to have been an unofficial 
   738                              <1> ; standard for placing the version number in the OEM string at the 
   739                              <1> ; time. 
   740                              <1> ;The dot in the check helps "guarantee" the number is a version number 
   741                              <1> ; we are possibly interested in.
   742 000008A1 66817B08332E        <1>     cmp word [rbx + oemHeader.oemString + 5], "3."  ;DOS 3?
   743 000008A7 720A                <1>     jb .ubpbAdjustSPC  ;If below, must be "2." or "1." which has bug. Adjust.
   744 000008A9 807B0A32            <1>     cmp byte [rbx + oemHeader.oemString + 7], "2"   ;DOS 3.2?
   745 000008AD 0F838B000000        <1>     jae .ubpbNormalDisk ;If above or equal 3.2, no need for adjustment.
   746                              <1> .ubpbAdjustSPC:
   747                              <1> ;Here we must be pre 16-bit DOS 3.2. Adjust the BPB in memory to have 
   748                              <1> ; a spc value of 1.
   749 000008B3 C6430D01            <1>     mov byte [rbx + oemHeader_size + bpb.secPerClus], 1
   750 000008B7 E982000000          <1>     jmp .ubpbNormalDisk ;Now proceed as a normal disk
   751                              <1> .checkMedByt:
   752                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   753                              <1> ; recognise as this is a sign of an unhealthy volume.
   754                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   755                              <1> ;Input: al = Media byte. 
   756                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   757 000008BC 3CF0                <1>     cmp al, 0F0h
   758                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008BE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008C0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   759 000008C1 3CF8                <1>     cmp al, 0F8h
   760                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008C3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008C5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   761 000008C6 38C0                <1>     cmp al, al  ;Set ZF if greater than F8h
   762                              <1>     return
    13                              <2> %%_ret:
    14 000008C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .ubpbOldDisk:
   764                              <1> ;We accept media bytes 0F9h-0FFh now. 0F8h and 0F0h make no sense here.
   765 000008C9 E83D010000          <1>     call .bbpbReadFAT   ;Read the FAT sector now instead
   766                              <1>     retc    ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008CE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008D0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   767 000008D1 0FB703              <1>     movzx eax, word [rbx]   ;Clear upper bytes
   768 000008D4 25FF0F0000          <1>     and eax, 0FFFh
   769 000008D9 3DF90F0000          <1>     cmp eax, 0FF9h    ;Cannot accept less than 0F9h as we dont know how to handle
   770 000008DE 7224                <1>     jb .ubpbErr
   771 000008E0 7547                <1>     jne .ubpbOldest ;If not equal to 0F9h, it must be a "normal" disk.
   772                              <1> ;The only way to check which 0F9h we have, is to read the FAT and try to 
   773                              <1> ; find the second FAT, as they are at different "known" sectors. 
   774                              <1> ;First we read sector 4. If we find the 12 bytes 0FFF9h then use the first entry
   775                              <1> ; in the 0F9h table. 
   776                              <1> ;Else, read sector 8. If we find the 12 bytes 0FFF9h there, then use the 
   777                              <1> ; second entry in the 0F9h table.
   778 000008E2 488D1D8E1B0000      <1>     lea rbx, .drvBpbTblF9
   779 000008E9 E81C000000          <1>     call .upbpFindF9
   780                              <1>     retc                ;If the sector read failed, exit with ZF=ZE!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008EE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008F0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   781 000008F1 7452                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   782 000008F3 4881C319000000      <1>     add rbx, bpb_size   ;Else, goto next entry
   783 000008FA E80B000000          <1>     call .upbpFindF9    ;And try with this BPB
   784                              <1>     retc                ;If the sector read failed, exit with ZF=ZE!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008FF 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000901 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   785 00000902 7441                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   786                              <1> ;Else fall through as we don't know what 0F9h means here.
   787                              <1> .ubpbErr:               
   788                              <1> ;Bad media bytes or BPB go here. Means the media is unknown.
   789 00000904 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code (07h)
   790 00000906 85C0                <1>     test eax, eax           ;Set ZF=NZ so we indicate a DOS error code!
   791 00000908 F9                  <1>     stc                     ;And set CF=CY to always return error!
   792                              <1>     return
    13                              <2> %%_ret:
    14 00000909 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .upbpFindF9:
   794                              <1> ;Reads the supposed start of the second FAT sector to search for a FF9h 
   795                              <1> ;Call with rbx -> Table entry for this drive
   796                              <1> ;Returns:   CF=NC and ZF=ZE: Second boot sector found. Use the bpb in rbx.
   797                              <1> ;           CF=NC and ZF=NZ: Second boot sector not found. Goto next entry.
   798                              <1> ;           CF=CY: Disk read failed.
   799 0000090A 0FB74B0B            <1>     movzx ecx, word [rbx + bpb.FATsz16] ;Get number of fat sectors in a FAT
   800 0000090E FFC1                <1>     inc ecx     ;Add one for the reserved sector to get sector !
   801 00000910 53                  <1>     push rbx
   802 00000911 E8FD000000          <1>     call .bbpbReadEp
   803 00000916 0FB703              <1>     movzx eax, word [rbx]   ;Read the first word
   804 00000919 5B                  <1>     pop rbx
   805                              <1>     retc            ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000091A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000091C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   806 0000091D 25FF0F0000          <1>     and eax, 0FFFh  ;Scan off the upper nybble to get low meaningful 12 bytes
   807 00000922 3DF90F0000          <1>     cmp eax, 0FF9h  ;Is this FF9h as it should be?
   808 00000927 F8                  <1>     clc             ;Since eax can be a random word, force clear CF here.
   809                              <1>     return
    13                              <2> %%_ret:
    14 00000928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   810                              <1> .ubpbOldest:
   811                              <1> ;Here we build a pretend BPB in the sector buffer pointed to by rbx.
   812                              <1> ;This will then be used to build the internal data structure. 
   813 00000929 488D1DB11A0000      <1>     lea rbx, .drvBpbTbl
   814 00000930 2CFA                <1>     sub al, 0FAh    ;Get the offset into the bpb table
   815 00000932 B919000000          <1>     mov ecx, bpb_size
   816 00000937 F7E1                <1>     mul ecx         ;Get byte offset into the bpb table
   817 00000939 4801C3              <1>     add rbx, rax    ;Point rbx to this bpb in the table
   818 0000093C EB07                <1>     jmp short .ubpbMoveBpb
   819                              <1> .ubpbNormalDisk:
   820 0000093E 4881C30B000000      <1>     add rbx, oemHeader_size ;Now point rbx to the BPB itself
   821                              <1> ;Update the drvBlk with info from the BPB.
   822                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   823                              <1> ; are ok before updating the msdTbl entry. 
   824                              <1> .ubpbMoveBpb:
   825 00000945 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   826 00000948 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   827 0000094C E851000000          <1>     call .getFATType    ;Fat type is given in edx
   828 00000951 72B1                <1>     jc .ubpbErr ;Only happens if crucial BPB fields are zero 
   829 00000953 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   830                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   831                              <1> ; if it is present
   832 00000956 B819000000          <1>     mov eax, bpb_size
   833 0000095B B929000000          <1>     mov ecx, bpb32_size - 12    ;BPB32 minus reserved count
   834 00000960 80FA20              <1>     cmp dl, bpbFat32
   835 00000963 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   836 00000966 F3A4                <1>     rep movsb        ;Now copy the BPB over!
   837 00000968 F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   838                              <1>     return
    13                              <2> %%_ret:
    14 00000969 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   839                              <1> 
   840                              <1> .moveVolIds:
   841                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   842                              <1> ;Input: rsi -> End of the BPB in sector. rbp -> drvBlk
   843                              <1> ;Output: CF=CY: No volume label in sector found.
   844                              <1> ;        CF=NC: Volume Label in sector found and copied.
   845 0000096A E80E080000          <1>     call .clearMediaChange   ;Start by clearing the changed bit if it was set
   846 0000096F 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   847 00000973 752B                <1>     jne .mviNoSig
   848                              <1> ;Else, now we copy the volume information from the extended bs info block
   849 00000975 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   850 00000978 898580000000        <1>     mov dword [rbp + drvBlk.volId], eax
   851 0000097E 4881C607000000      <1>     add rsi, extBs.volLab
   852 00000985 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   853 00000989 B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   854 0000098E F3A4                <1>     rep movsb   
   855                              <1>     ;rsi now points to the filSysType field in the extBs.
   856                              <1>     ;Move rdi to the filSysType field in the drvBlk.
   857 00000990 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   858 00000997 B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   859 0000099C F3A4                <1>     rep movsb   
   860                              <1> ;Clear the change bit now
   861 0000099E F8                  <1>     clc
   862                              <1>     return
    13                              <2> %%_ret:
    14 0000099F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   863                              <1> .mviNoSig:
   864 000009A0 F9                  <1>     stc
   865                              <1>     return
    13                              <2> %%_ret:
    14 000009A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   866                              <1> 
   867                              <1> .getFATType:
   868                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   869 000009A2 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   870 000009A5 E362                <1>     jrcxz .bbpbGFTErr
   871 000009A7 89C8                <1>     mov eax, ecx
   872 000009A9 FFC8                <1>     dec eax
   873 000009AB 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   874 000009AF C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   875 000009B2 01D0                <1>     add eax, edx
   876 000009B4 31D2                <1>     xor edx, edx
   877 000009B6 F7F1                <1>     div ecx     ;eax = Root Dir sectors
   878 000009B8 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   879 000009B9 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   880 000009BD 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   881 000009C0 85C0                <1>     test eax, eax
   882 000009C2 0F44C2              <1>     cmovz eax, edx
   883 000009C5 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   884 000009C9 F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   885 000009CB 85C0                <1>     test eax, eax   ;If either BPB_NumFATs or FATSz is 0, fail!
   886 000009CD 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   887 000009CE 7439                <1>     jz .bbpbGFTErr
   888 000009D0 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   889 000009D4 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   890 000009D6 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   891 000009D8 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   892 000009DC 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   893 000009DF 85C0                <1>     test eax, eax
   894 000009E1 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   895 000009E4 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   896 000009E6 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   897 000009EA E31D                <1>     jrcxz .bbpbGFTErr
   898 000009EC 31D2                <1>     xor edx, edx
   899 000009EE F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   900 000009F0 BA10000000          <1>     mov edx, bpbFat12
   901 000009F5 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   902 000009FA 720B                <1>     jb .bbpbGFTExit
   903 000009FC D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   904 000009FE 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   905 00000A03 7302                <1>     jnb .bbpbGFTExit   ;If above or equal, its in FAT32
   906 00000A05 D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   907                              <1> .bbpbGFTExit:
   908 00000A07 F8                  <1>     clc
   909                              <1>     return
    13                              <2> %%_ret:
    14 00000A08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   910                              <1> .bbpbGFTErr:
   911 00000A09 F9                  <1>     stc
   912                              <1>     return
    13                              <2> %%_ret:
    14 00000A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   913                              <1> 
   914                              <1> .bbpbReadFAT:
   915                              <1> ;Reads the first FAT sector of media we are playing with.
   916 00000A0B 31C9                <1>     xor ecx, ecx
   917 00000A0D FFC1                <1>     inc ecx         ;Read Sector 1...
   918                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   919                              <1> %if drvDbg
   920                              <1>     push rsi
   921                              <1>     lea rsi, .bbpbDbgReadFatStr
   922                              <1>     call dbgPrintString
   923                              <1>     pop rsi
   924                              <1> %endif
   925                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   926 00000A0F EB02                <1>     jmp short .bbpbReadEp
   927                              <1> .bbpbReadBS:
   928                              <1> ;Reads the bootsector of media we are playing with.
   929 00000A11 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   930                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   931                              <1> %if drvDbg
   932                              <1>     push rsi
   933                              <1>     lea rsi, .bbpbDbgReadBSStr
   934                              <1>     call dbgPrintString
   935                              <1>     pop rsi
   936                              <1> %endif
   937                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   938                              <1> .bbpbReadEp:
   939 00000A13 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]
   940 00000A16 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   941 00000A1A 488D1DC0090000      <1>     lea rbx, .inBuffer  ;Use the in sector buffer. Ensure ownership.
   942 00000A21 BE05000000          <1>     mov esi, 5
   943                              <1> .bbpbReadLp:
   944 00000A26 B801820000          <1>     mov eax, 8201h  ;LBA Read function (read 1 sector)
   945 00000A2B E887080000          <1>     call .callI33h
   946                              <1> %if drvDbg
   947                              <1>     jnc .bbpbDbgReadExit
   948                              <1> %else
   949 00000A30 0F83E3000000        <1>     jnc .bioExit
   950                              <1> %endif
   951                              <1> ;Here if an error. AH has the BIOS error code. Return with
   952                              <1> ; ZF=ZE to indicate we are returning a BIOS code!
   953 00000A36 E80B010000          <1>     call .bioReset  ;Reset the drive. WARNING: CRASHES BOCHS
   954 00000A3B FFCE                <1>     dec esi
   955 00000A3D 75E7                <1>     jnz .bbpbReadLp
   956                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   957                              <1> %if drvDbg
   958                              <1>     push rsi
   959                              <1>     lea rsi, .bbpbDbgReadBadStr
   960                              <1>     call dbgPrintString
   961                              <1>     pop rsi
   962                              <1> %endif
   963                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   964 00000A3F E8D5000000          <1>     call .bioExit   ;Setup the time and the drive info for the access
   965 00000A44 F9                  <1>     stc             ;Now set up the carry flag!
   966                              <1>     return
    13                              <2> %%_ret:
    14 00000A45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   967                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   968                              <1> %if drvDbg
   969                              <1> .bbpbDbgReadExit:
   970                              <1>     push rsi
   971                              <1>     lea rsi, .bbpbDbgReadOkStr
   972                              <1>     call dbgPrintString
   973                              <1>     pop rsi
   974                              <1>     jmp .bioExit
   975                              <1> 
   976                              <1> .bbpbDbgReadFatStr db "[DRIVER] Reading FAT Sector",0Ah,0Dh,0
   977                              <1> .bbpbDbgReadBSStr db "[DRIVER] Reading Boot Sector",0Ah,0Dh,0
   978                              <1> .bbpbDbgReadOkStr db "[DRIVER] Read OK",0Ah,0Dh,0
   979                              <1> .bbpbDbgReadBadStr db "[DRIVER] Read Bad",0Ah,0Dh,0
   980                              <1> %endif
   981                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   982                              <1> 
   983                              <1> .read:              ;Function 4
   984                              <1> ;Will read one sector at a time.
   985 00000A46 E8FA070000          <1>     call .ioSetVolLbl
   986 00000A4B E83B070000          <1>     call .checkDevType
   987 00000A50 E8BF060000          <1>     call .checkSwap 
   988 00000A55 7261                <1>     jc .ioDoErr
   989 00000A57 4889DF              <1>     mov rdi, rbx    ;Move ioreqpktptr to rdi
   990 00000A5A E873000000          <1>     call .bioSetupRegs
   991                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A5F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A61 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   992                              <1> .msdr0:
   993 00000A62 B800820000          <1>     mov eax, 8200h  ;LBA Read function
   994 00000A67 E888000000          <1>     call .blkIO
   995 00000A6C 724A                <1>     jc .ioDoErr
   996 00000A6E E850000000          <1>     call .ioAdv
   997 00000A73 75ED                <1>     jne .msdr0
   998                              <1>     return
    13                              <2> %%_ret:
    14 00000A75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   999                              <1> 
  1000                              <1> .write:             ;Function 8/9
  1001                              <1> ;Will write and optionally verify one sector at a time.
  1002 00000A76 E8CA070000          <1>     call .ioSetVolLbl
  1003 00000A7B E80B070000          <1>     call .checkDevType
  1004 00000A80 E88F060000          <1>     call .checkSwap 
  1005 00000A85 7231                <1>     jc .ioDoErr
  1006 00000A87 4889DF              <1>     mov rdi, rbx    ;Move ioreqpktptr to rdi
  1007 00000A8A E843000000          <1>     call .bioSetupRegs
  1008                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A8F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A91 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1009                              <1> .msdw0:
  1010 00000A92 B800830000          <1>     mov eax, 8300h ;LBA Write Sectors
  1011 00000A97 E858000000          <1>     call .blkIO
  1012 00000A9C 721A                <1>     jc .ioDoErr
  1013 00000A9E 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
  1014 00000AA2 750C                <1>     jne .msdw1
  1015 00000AA4 B800840000          <1>     mov eax, 8400h ;LBA Verify Sectors
  1016 00000AA9 E846000000          <1>     call .blkIO
  1017 00000AAE 7208                <1>     jc .ioDoErr
  1018                              <1> .msdw1:
  1019 00000AB0 E80E000000          <1>     call .ioAdv
  1020 00000AB5 75DB                <1>     jne .msdw0
  1021                              <1>     return
    13                              <2> %%_ret:
    14 00000AB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1022                              <1> .ioDoErr:
  1023                              <1> ;Come here if after an error in block IO handler.
  1024                              <1> ;If ZF=ZE, disk error occured, the error needs translation so do it.
  1025                              <1> ;Else just return the error code in al
  1026 00000AB8 0F84A2FBFFFF        <1>     jz .errorXlat
  1027 00000ABE E92DFCFFFF          <1>     jmp .errorExit
  1028                              <1> 
  1029                              <1> .ioAdv:
  1030                              <1> ;Advances the buffers on successful IO. 
  1031                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
  1032                              <1> ;Input: 
  1033                              <1> ;       rbx -> Where we just IO'ed to
  1034                              <1> ;       rcx = LBA sector we just xfred
  1035                              <1> ;       dl  = BIOS drive number
  1036                              <1> ;       rdi -> ioReqPkt
  1037                              <1> ;       rbp -> drvBlk
  1038                              <1> ;       esi = Number of sectors to xfr
  1039                              <1> ;Output:
  1040                              <1> ;       rbx -> Where to IO next sector to/from
  1041                              <1> ;       rcx = LBA of next sector to xfer
  1042                              <1> ;       dl  = BIOS drive number
  1043                              <1> ;       rdi -> ioReqPkt
  1044                              <1> ;       rbp -> drvBlk
  1045                              <1> ;       esi = Sectors left to xfr.
  1046                              <1> ;       ZF=ZE if esi is 0. Else ZF=NZ.
  1047 00000AC3 50                  <1>     push rax
  1048 00000AC4 48FFC1              <1>     inc rcx     ;Goto next sector
  1049 00000AC7 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
  1050 00000ACB 4801C3              <1>     add rbx, rax  ;Advance the buffer pointer by 1 sector
  1051 00000ACE FFCE                <1>     dec esi     ;Once this hits 0, we stop the xfr
  1052 00000AD0 58                  <1>     pop rax
  1053                              <1>     return
    13                              <2> %%_ret:
    14 00000AD1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1054                              <1> 
  1055                              <1> .bioSetupRegs:
  1056                              <1> ;Sets up sector to read and buffer ptr for block IO call.
  1057                              <1> ;If returns ZF=ZE then xfr 0 sectors, exit immediately
  1058                              <1> ;Input: rdi -> ioReqPkt
  1059                              <1> ;       rbp -> drvBlk
  1060                              <1> ;Output: rdi -> ioReqPkt
  1061                              <1> ;        rbp -> drvBlk
  1062                              <1> ;        rbx -> Transfer buffer
  1063                              <1> ;        rcx = Sector to transfer
  1064                              <1> ;        esi = Number of sectors to transfer
  1065                              <1> ;        ZF=ZE if esi is 0. Else ZF=NZ.
  1066 00000AD2 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
  1067 00000AD5 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
  1068 00000AD9 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
  1069 00000ADD 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS drive number
  1070 00000AE0 8B7716              <1>     mov esi, dword [rdi + ioReqPkt.tfrlen]  ;Get the tfrlen into esi
  1071 00000AE3 85F6                <1>     test esi, esi                           ;If this is 0, avoid IO
  1072                              <1>     return
    13                              <2> %%_ret:
    14 00000AE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1073                              <1> 
  1074                              <1> .blkIODirect:    ;Does block IO without sanity checking the sector number
  1075                              <1> ;All registers as below!
  1076 00000AE6 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1077 00000AEC 0F8593000000        <1>     jnz .bioUfmted
  1078 00000AF2 EB11                <1>     jmp short .biocmn
  1079                              <1> .blkIO:  ;Does block IO for one sector
  1080                              <1> ;Sector count handled by caller.
  1081                              <1> ;All registers marked as input registers must be preserved across the call
  1082                              <1> ; except ah
  1083                              <1> ;Input: ah = BIOS function number
  1084                              <1> ;       rdi -> ioReqPkt             (Normal Read/Write only)
  1085                              <1> ;       rbp -> drvBlk
  1086                              <1> ;       rbx -> Transfer buffer
  1087                              <1> ;       rcx = LBA sector to transfer
  1088                              <1> ;       dl  = BIOS drive number
  1089                              <1> ;       esi = Sectors left to xfr!  (Normal Read/Write only)
  1090                              <1> ;Output: CF=NC: esi number of sectors xferred.
  1091                              <1> ;        CF=CY: An error ocured. 
  1092                              <1> ;           ZF=NZ: Non-disk error, return the DOS error code in eax
  1093                              <1> ;           ZF=ZE: Disk error, xlat BIOS error code in ah
  1094 00000AF4 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1095 00000AFA 0F8585000000        <1>     jnz .bioUfmted
  1096 00000B00 E858000000          <1>     call .bioSanity ;Sanity check ecx here
  1097                              <1> .biocmn:
  1098 00000B05 56                  <1>     push rsi    ;Save sector count
  1099 00000B06 BE05000000          <1>     mov esi, 5  ;Retry counter five times
  1100                              <1> .biolp:
  1101 00000B0B B001                <1>     mov al, 01h ;Do one sector 
  1102 00000B0D E8A5070000          <1>     call .callI33h  ;Preserves all passed regs except eax
  1103 00000B12 7221                <1>     jc .bioError
  1104 00000B14 3C01                <1>     cmp al, 1   ;Did we do one sector?
  1105 00000B16 7515                <1>     jne .bioNoIO    ;No, try again without calling BIOS error handling
  1106 00000B18 5E                  <1>     pop rsi ;Rebalance stack
  1107                              <1> .bioExit:
  1108                              <1>     ;mov dl, byte [rbp + drvBlk.bDOSNum]
  1109 00000B19 8815C1080000        <1>     mov byte [.bLastDsk], dl    ;Last DOS disk accessed
  1110 00000B1F E84B060000          <1>     call .checkDevFixed
  1111                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B24 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B26 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1112                              <1> ;Below routine saves the registers it trashes
  1113 00000B27 E844070000          <1>     call .setTime   ;Set the current time and clear state for successful IO
  1114                              <1>     return
    13                              <2> %%_ret:
    14 00000B2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1115                              <1> .bioNoIO:
  1116 00000B2D FFCE                <1>     dec esi ;Decrement the retry counter
  1117 00000B2F 75DA                <1>     jnz .biolp  ;and try again if we still have retries to do
  1118 00000B31 5E                  <1>     pop rsi ;Now rebalance the stack
  1119                              <1> ;Here we return as if our request was successful but we set esi to zero
  1120                              <1> ; to stop IO processing as the operation isn't reading/writing the sector
  1121                              <1> ; for no erroring reason (should never actually happen as the sanity check 
  1122                              <1> ; should handle this case but _just in case_ ).
  1123 00000B32 31F6                <1>     xor esi, esi
  1124                              <1>     return
    13                              <2> %%_ret:
    14 00000B34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1125                              <1> .bioError:
  1126                              <1> ;Jumped to with ah = BIOS error code
  1127 00000B35 E888050000          <1>     call .checkSwapIO
  1128 00000B3A E807000000          <1>     call .bioReset  ;Reset the drive. WARNING: CRASHES BOCHS. Does E9h check
  1129 00000B3F FFCE                <1>     dec esi
  1130 00000B41 75C8                <1>     jnz .biolp
  1131 00000B43 5E                  <1>     pop rsi ;Pop the sector count off the stack
  1132                              <1>     ;ZF=ZE set now as esi counted down
  1133 00000B44 F9                  <1>     stc
  1134                              <1>     return
    13                              <2> %%_ret:
    14 00000B45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1135                              <1> .bioReset:
  1136                              <1> ;Resets the drive system for the drive in dl
  1137 00000B46 50                  <1>     push rax
  1138 00000B47 E4E9                <1>     in al, 0E9h
  1139 00000B49 3CE9                <1>     cmp al, 0E9h
  1140 00000B4B 7407                <1>     je .bioResetSkip
  1141 00000B4D 31C0                <1>     xor eax, eax    ;Do reset
  1142 00000B4F E863070000          <1>     call .callI33h  ;Ignore any errors
  1143                              <1> .bioResetSkip:
  1144 00000B54 C60585080000FF      <1>     mov byte [.bLastDsk], -1    ;Reset the last disk accessed
  1145 00000B5B 58                  <1>     pop rax
  1146                              <1>     return
    13                              <2> %%_ret:
    14 00000B5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1147                              <1> .bioSanity:
  1148                              <1> ;Input: ecx = Sector we will transact on. rbp -> DrvBlk
  1149                              <1> ;Output: CF=NC, sector ok to xact on
  1150                              <1> ;        CF=CY, doesnt return, fails the call. ZF=ZE always (have DOS code)
  1151                              <1> ;        If the sector fails check, we return from the top level with ZF=ZE
  1152                              <1> ;           to indicate a DOS error code in eax.
  1153 00000B5D A9FF000000          <1>     test eax, 0FFh  ;If the bottom byte is set, it is a IOCTL call.
  1154                              <1>     retnz           ;BIOS checks these for us as IOCTL bypasses partitions.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B62 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B64 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1155 00000B65 50                  <1>     push rax
  1156 00000B66 53                  <1>     push rbx
  1157 00000B67 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
  1158 00000B6B 8B5D1F              <1>     mov ebx, dword [rbp + drvBlk.dTotSec32] 
  1159 00000B6E 85C0                <1>     test eax, eax
  1160 00000B70 0F44C3              <1>     cmovz eax, ebx  ;The 32 bit count is valid only if 16 bit count is 0
  1161 00000B73 39C1                <1>     cmp ecx, eax    ;This will set CF iff ecx < eax. If eax >= ecx CF=NC.
  1162 00000B75 5B                  <1>     pop rbx
  1163 00000B76 58                  <1>     pop rax
  1164 00000B77 F5                  <1>     cmc             ;Flip CF from CY to NC if ok and NC to CY if not
  1165                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B78 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B7A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1166                              <1> ;Now pops the return from the sanity call and falls.
  1167 00000B7B 58                  <1>     pop rax ;Return from block IO with error code in eax below
  1168 00000B7C B808000000          <1>     mov eax, drvSecNotFnd
  1169                              <1> .bioNoDiskErr:
  1170 00000B81 85C0                <1>     test eax, eax   ;Clear ZF
  1171 00000B83 F9                  <1>     stc
  1172                              <1>     return
    13                              <2> %%_ret:
    14 00000B84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1173                              <1> .bioUfmted:
  1174                              <1> ;Returns the DOS error code bad media to caller. 
  1175                              <1> ;Returns CF=CY and ZF=ZE (with eax = DOS error code)
  1176 00000B85 B807000000          <1>     mov eax, drvBadMed
  1177 00000B8A EBF5                <1>     jmp short .bioNoDiskErr
  1178                              <1> 
  1179                              <1> .devOpen:         ;Function 13
  1180 00000B8C 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
  1181                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B92 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B94 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1182 00000B95 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
  1183                              <1>     return
    13                              <2> %%_ret:
    14 00000B99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1184                              <1> .devClose:        ;Function 14
  1185 00000B9A 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
  1186                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BA0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BA2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1187 00000BA3 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
  1188                              <1>     return
    13                              <2> %%_ret:
    14 00000BA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1189                              <1> .remMed:  ;Function 15
  1190                              <1> ;Sets busy bit if fixed drive!
  1191 00000BA8 E8C2050000          <1>     call .checkDevFixed ;Is it fixed?
  1192                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BAD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BAF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1193 00000BB0 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
  1194                              <1>     return
    13                              <2> %%_ret:
    14 00000BB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1195                              <1> 
  1196                              <1> .IOCTL:    ;Function 19
  1197                              <1> ;Implements LBA versions of the CHS functions by setting the high bit
  1198                              <1> ; in the minor code.
  1199 00000BB7 B803000000          <1>     mov eax, drvBadCmd
  1200 00000BBC 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]  ;Get CH and CL in one read
  1201 00000BC0 80FD08              <1>     cmp ch, 08h     ;Disk Drive Major Code?
  1202 00000BC3 0F8527FBFFFF        <1>     jne .errorExit  ;If not, exit bad
  1203                              <1> ;Disk Drive IOCTL here
  1204 00000BC9 F6C118              <1>     test cl, 18h    ;If either bits 3 or 4 set, fail the call
  1205 00000BCC 0F851EFBFFFF        <1>     jnz .errorExit
  1206 00000BD2 F6C160              <1>     test cl, 60h    ;One of these two bits MUST be set (bits 5 and 6)
  1207 00000BD5 0F8415FBFFFF        <1>     jz .errorExit
  1208 00000BDB 0FB6D1              <1>     movzx edx, cl
  1209 00000BDE 81E207FFFFFF        <1>     and edx, ~0F8h   ;Clear bits 3-7 to get table offset
  1210 00000BE4 488D3D21000000      <1>     lea rdi, .ioctlTbl
  1211 00000BEB 57                  <1>     push rdi
  1212 00000BEC 488D3C97            <1>     lea rdi, qword [rdi + 4*rdx]
  1213 00000BF0 F6C120              <1>     test cl, 20h
  1214 00000BF3 7407                <1>     jz .ioctlNoRead
  1215 00000BF5 4881C702000000      <1>     add rdi, 2  ;If we are doing the read function, goto the next instruction
  1216                              <1> .ioctlNoRead:
  1217 00000BFC 0FB717              <1>     movzx edx, word [rdi]   ;Read the word offset
  1218 00000BFF 5F                  <1>     pop rdi
  1219 00000C00 4801D7              <1>     add rdi, rdx    ;Add the table base
  1220 00000C03 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]
  1221 00000C07 F6C180              <1>     test cl, 80h    ;Now set the flag for if CHS (ZF=ZE) or LBA (ZF=NZ)
  1222 00000C0A FFE7                <1>     jmp rdi ;And enter the function with the ptr to the ctrl block in rdx
  1223                              <1> .ioctlTbl:
  1224                              <1> ;Note: For the CHS IO functions, we translate the CHS requests into LBA
  1225                              <1> ; requests and then recycle the LBA request code. We do this using the 
  1226                              <1> ; track table. If the sector size of any table entry is neq the 
  1227                              <1> ; device sector size, we fail the request. This is because these requests
  1228                              <1> ; work on a track by track basis.
  1229 00000C0C 3E00                <1>     dw .ioSetDevParams - .ioctlTbl  ;CL = 40h or CL = C0h, Write IOCTL
  1230 00000C0E 4301                <1>     dw .ioGetDevParams - .ioctlTbl  ;CL = 60h or CL = E0h, Read IOCTL
  1231 00000C10 3102                <1>     dw .ioWrite - .ioctlTbl         ;CL = 41h or CL = C1h, Write IOCTL
  1232 00000C12 5B02                <1>     dw .ioRead - .ioctlTbl          ;CL = 61h or CL = E1h, Read IOCTL
  1233 00000C14 6802                <1>     dw .ioFormat - .ioctlTbl        ;CL = 42h or CL = C2h, Write IOCTL
  1234 00000C16 9002                <1>     dw .ioVerify - .ioctlTbl        ;CL = 62h or CL = E2h, Read IOCTL
  1235 00000C18 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 43h or CL = C3h, error
  1236 00000C1A 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 63h or CL = E3h, error
  1237 00000C1C 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 44h or CL = C4h, error
  1238 00000C1E 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 64h or CL = E4h, error
  1239 00000C20 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 45h or CL = C5h, error
  1240 00000C22 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 65h or CL = E5h, error
  1241 00000C24 2903                <1>     dw .ioSetIds - .ioctlTbl        ;CL = 46h or CL = C6h, Set vol Ids
  1242 00000C26 2903                <1>     dw .ioGetIds - .ioctlTbl        ;CL = 66h or CL = E6h, Get vol Ids
  1243 00000C28 2E03                <1>     dw .ioSetAccessFlag - .ioctlTbl ;CL = 47h or CL = C7h, Write IOCTL
  1244 00000C2A 4203                <1>     dw .ioGetAccessFlag - .ioctlTbl ;CL = 67h or CL = E7h, Read IOCTL
  1245                              <1> .iobadCmd:
  1246 00000C2C B803000000          <1>     mov eax, drvBadCmd
  1247 00000C31 E9BAFAFFFF          <1>     jmp .errorExit
  1248                              <1> .iobadCmdLen:
  1249 00000C36 B805000000          <1>     mov eax, drvBadDrvReq
  1250 00000C3B E9B0FAFFFF          <1>     jmp .errorExit
  1251                              <1> .iobadMed:
  1252 00000C40 B807000000          <1>     mov eax, drvBadMed
  1253 00000C45 E9A6FAFFFF          <1>     jmp .errorExit
  1254                              <1> ;---------------------------------------------------------------------------
  1255                              <1> ;               Set Device parameters in CHS and LBA here
  1256                              <1> ;---------------------------------------------------------------------------
  1257                              <1> .ioSetDevParams:
  1258 00000C4A 9C                  <1>     pushfq
  1259                              <1> ;If the parameters are swapped, set the flags and indicate the media 
  1260                              <1> ; was swapped (even if not).
  1261 00000C4B 66814D374001        <1>     or word [rbp + drvBlk.wDevFlgs], devNewParms | devChgd
  1262 00000C51 9D                  <1>     popfq
  1263 00000C52 0F85C8000000        <1>     jnz .lbaSetParams
  1264                              <1> ;Here we set CHS params. 
  1265                              <1> ;Before we trust the table, we check that indeed
  1266                              <1> ; no sector index is past the max sector count and that if the caller
  1267                              <1> ; claimed that all the sectors are of the same size, they really are.    
  1268 00000C58 488D723C            <1>     lea rsi, qword [rdx + chsParamsBlock.TrackLayout]
  1269 00000C5C 4889F7              <1>     mov rdi, rsi    ;Save the pointer in rdi
  1270 00000C5F 66AD                <1>     lodsw           ;Get the lead word and adv rsi by 2
  1271 00000C61 0FB7C8              <1>     movzx ecx, ax   ;Get the lead table entry into ax
  1272 00000C64 81F93F000000        <1>     cmp ecx, maxTrackTblSz
  1273 00000C6A 7460                <1>     jz .iosdpNoTrack   ;Don't touch the tracks bit in this case!
  1274 00000C6C 0F8779FAFFFF        <1>     ja .genErrExit
  1275 00000C72 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Check the first entry is ok!
  1276 00000C77 0F876EFAFFFF        <1>     ja .genErrExit
  1277                              <1> .iosdpTblCheckLp:
  1278 00000C7D AD                  <1>     lodsd   ;Go to next entry
  1279 00000C7E FFC9                <1>     dec ecx ;And remove from the count
  1280 00000C80 7420                <1>     jz .iosdpTblCheckEnd
  1281 00000C82 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Ensure no entry above the max entry value
  1282 00000C87 0F875EFAFFFF        <1>     ja .genErrExit
  1283 00000C8D F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec ;All same size?
  1284 00000C90 74EB                <1>     jz .iosdpTblCheckLp ;If not, skip this check (always check 1=<i<=n)
  1285 00000C92 668B4602            <1>     mov ax, word [rsi + 2]  ;Else get sector size
  1286 00000C96 663946FE            <1>     cmp word [rsi - 2], ax  ;And compare with the previous sector size
  1287 00000C9A 0F854BFAFFFF        <1>     jne .genErrExit
  1288 00000CA0 EBDB                <1>     jmp short .iosdpTblCheckLp
  1289                              <1> .iosdpTblCheckEnd:
  1290                              <1> ;Now we set the sector size bit if all tracks same size check was passed.
  1291                              <1> ;If all sectors have the same size but the caller didn't specify this
  1292                              <1> ; bit, we also don't specify this bit.
  1293 00000CA2 66816537F7FF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSameSec    ;Clear bit first
  1294 00000CA8 F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec
  1295 00000CAB 7406                <1>     jz .iosdpNoSetTrackBit
  1296                              <1> ;The only way we got here if the bit was set is that the check passed.
  1297                              <1> ; Set the bit in the device block.
  1298 00000CAD 66814D370800        <1>     or word [rbp + drvBlk.wDevFlgs], devSameSec
  1299                              <1> .iosdpNoSetTrackBit:
  1300                              <1> ;Now we copy the table directly as sector numbers may be purposefully
  1301                              <1> ; interleaved. NO SORTING!!
  1302 00000CB3 4889FE              <1>     mov rsi, rdi    ;Get back the track layout pointer 
  1303 00000CB6 488D3DA2020000      <1>     lea rdi, .ioTrackTbl    ;We overwrite our internal track table
  1304 00000CBD 66AD                <1>     lodsw   ;Get the table length
  1305 00000CBF 0FB7C8              <1>     movzx ecx, ax   ;This many entries
  1306 00000CC2 66AB                <1>     stosw
  1307 00000CC4 F3A5                <1>     rep movsd       ;Move the dword entries over
  1308 00000CC6 F60202              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncTrk    ;Just tracks?
  1309                              <1>     retnz   ;Return if bit set!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000CC9 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000CCB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1310                              <1> .iosdpNoTrack:
  1311                              <1> ;Now we update the rest of the disk metadata.
  1312                              <1> ;Now copy the rest of the bytes and return
  1313 00000CCC 0FB74202            <1>     movzx eax, word [rdx + chsParamsBlock.wDevFlgs]
  1314 00000CD0 2503000000          <1>     and eax, devFixed | devChgLine  ;Keep only these two bits
  1315 00000CD5 66816537FCFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~(devFixed | devChgLine)   ;Clear em
  1316 00000CDB 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax  ;Add those two bits as set
  1317 00000CDF 0FB64201            <1>     movzx eax, byte [rdx + chsParamsBlock.bDevType]
  1318 00000CE3 884536              <1>     mov byte [rbp + drvBlk.bDevType], al
  1319 00000CE6 66814D378000        <1>     or word [rbp + drvBlk.wDevFlgs], devSetDASD 
  1320 00000CEC 0FB74204            <1>     movzx eax, word [rdx + chsParamsBlock.wNumCyl]
  1321 00000CF0 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
  1322                              <1> ;Finally, here we do the BPB magic.
  1323                              <1> ;
  1324                              <1> ;The logic here is that in a format operation, we first update the driver 
  1325                              <1> ; devBlk bpb fields with the new format and set the devLockBpb flag. 
  1326                              <1> ; This is so the bpb isn't updated from the disk when a disk operation is 
  1327                              <1> ; enacted and that the parameters we passed in this call are what are
  1328                              <1> ; reported to DOS whilst the bootsector hasn't been synchronised with 
  1329                              <1> ; the disk.
  1330                              <1> ;
  1331                              <1> ;We then write the bootsector with the new bpb to disk, thus synchronising
  1332                              <1> ; the new bpb parameter block with what is on disk.
  1333                              <1> ;
  1334                              <1> ;Then we call this again, this time, to clear the locking flag as the disk
  1335                              <1> ; is now sychronised with the accurate bpb. We also here can get rid of 
  1336                              <1> ; the old backup bpb and so the second call will replace the backup
  1337                              <1> ; with whatever we pass it (ideally, the same bpb).
  1338                              <1> ;
  1339                              <1> ;This procedure protects us from accidentally making the drive unusable if
  1340                              <1> ; we somehow fail to write the BPB by having updated the drvBlk. The 
  1341                              <1> ; protection occurs by allowing us to restore the backup bpb as the devBlk 
  1342                              <1> ; bpb if the disk synchronisation of the new parameters failed.
  1343 00000CF4 F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
  1344 00000CF7 7511                <1>     jnz .iosdpSetBPB    ;If bit set, lock the bpb
  1345                              <1> ;Else we update the backup bpb and unlock the main bpb
  1346 00000CF9 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sBkupBPB]
  1347 00000CFD B935000000          <1>     mov ecx, bpb32_size
  1348 00000D02 66816537FBFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devLockBpb   ;Now allow update bpb 
  1349 00000D08 EB0F                <1>     jmp short .iosdpCopy
  1350                              <1> .iosdpSetBPB:
  1351 00000D0A 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]   ;Default to the normal BPB in drvblk
  1352 00000D0E B929000000          <1>     mov ecx, drvBlkBpb_size
  1353 00000D13 66814D370400        <1>     or word [rbp + drvBlk.wDevFlgs], devLockBpb ;Lock the BPB now
  1354                              <1> .iosdpCopy:
  1355 00000D19 488D7207            <1>     lea rsi, qword [rdx + chsParamsBlock.deviceBPB]
  1356 00000D1D F3A4                <1>     rep movsb
  1357                              <1>     return
    13                              <2> %%_ret:
    14 00000D1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1358                              <1> 
  1359                              <1> .lbaSetParams:
  1360                              <1> ;This only sets the sector size and number of sectors in drvBlk.bpb.
  1361                              <1>     ;Set start sector of partition
  1362 00000D20 8B4A18              <1>     mov ecx, dword [rdx + lbaParamsBlock.qStartSector]
  1363 00000D23 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
  1364                              <1>     ;Set sector size
  1365 00000D26 8B4A08              <1>     mov ecx, dword [rdx + lbaParamsBlock.qSectorSize]
  1366 00000D29 66894D0A            <1>     mov word [rbp + drvBlk.wBpS], cx
  1367                              <1>     ;Set same device flags as in CHS.
  1368 00000D2D 0FB64A02            <1>     movzx ecx, byte [rdx + lbaParamsBlock.wDevFlgs]
  1369 00000D31 6681E10300          <1>     and cx, devFixed | devChgLine
  1370 00000D36 66094D37            <1>     or word [rbp + drvBlk.wDevFlgs], cx
  1371                              <1>     ;Set sector information.
  1372 00000D3A 8B4A10              <1>     mov ecx, dword [rdx + lbaParamsBlock.qNumSectors]
  1373 00000D3D 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
  1374 00000D43 7605                <1>     jna .lbaSetSmall
  1375 00000D45 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
  1376 00000D48 31C9                <1>     xor ecx, ecx
  1377                              <1> .lbaSetSmall:
  1378 00000D4A 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
  1379                              <1>     return
    13                              <2> %%_ret:
    14 00000D4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1380                              <1> ;---------------------------------------------------------------------------
  1381                              <1> ;               Get Device parameters in CHS and LBA here
  1382                              <1> ;---------------------------------------------------------------------------
  1383                              <1> .ioGetDevParams:
  1384 00000D4F 7559                <1>     jnz .lbaGetParams
  1385                              <1> ;Here we get CHS params. 
  1386 00000D51 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
  1387 00000D55 F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
  1388 00000D58 7517                <1>     jnz .iogdpBkup  ;If set, return the bpb data as is.
  1389 00000D5A E8F5FAFFFF          <1>     call .updateBpb ;Else, gets the BPB from the disk.
  1390 00000D5F 0F8253FDFFFF        <1>     jc .ioDoErr ;Errors returned as if from block IO handler
  1391 00000D65 E800FCFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1392 00000D6A 488D357B060000      <1>     lea rsi, qword [.inBuffer + 11]
  1393                              <1> .iogdpBkup:
  1394                              <1> ;The caller block in memory must have a bpb32_size'ed space for the BPB
  1395                              <1> ; even if it is a FAT16/12 drive. The caller has to assertain the 
  1396                              <1> ; type of BPB it is based information in the common part of the BPB.
  1397 00000D71 488D7A07            <1>     lea rdi, qword [rdx + chsParamsBlock.deviceBPB]
  1398 00000D75 B935000000          <1>     mov ecx, bpb32_size
  1399 00000D7A F3A4                <1>     rep movsb
  1400 00000D7C B805000000          <1>     mov eax, typeHard
  1401 00000D81 B907000000          <1>     mov ecx, typeGenRem
  1402 00000D86 F6453701            <1>     test byte [rbp + drvBlk.wDevFlgs], devFixed
  1403 00000D8A 0F44C1              <1>     cmovz eax, ecx  ;eax is set to 7 if the dev is removable
  1404 00000D8D 884201              <1>     mov byte [rdx + chsParamsBlock.bDevType], al
  1405 00000D90 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1406 00000D94 2503000000          <1>     and eax, devFixed | devChgLine
  1407 00000D99 66894202            <1>     mov word [rdx + chsParamsBlock.wDevFlgs], ax
  1408 00000D9D C6420600            <1>     mov byte [rdx + chsParamsBlock.bMedTyp], 0
  1409 00000DA1 0FB74539            <1>     movzx eax, word [rbp + drvBlk.wNumCyl]
  1410 00000DA5 66894204            <1>     mov word [rdx + chsParamsBlock.wNumCyl], ax
  1411                              <1>     return
    13                              <2> %%_ret:
    14 00000DA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> 
  1413                              <1> .lbaGetParams:
  1414                              <1> ;Gets more "updated" information on partitions.
  1415                              <1> ;The data returned will always be the partition maximum! For remdevs
  1416                              <1> ; this means up to the whole media size and for fixed disks we are still 
  1417                              <1> ; restricted to the partition size.
  1418 00000DAA B805000000          <1>     mov eax, drvBadDrvReq
  1419 00000DAF 803A20              <1>     cmp byte [rdx + lbaParamsBlock.bSize], lbaParamsBlock_size
  1420 00000DB2 0F8538F9FFFF        <1>     jne .errorExit
  1421 00000DB8 4889D7              <1>     mov rdi, rdx    ;Store the params block ptr in rdi
  1422 00000DBB 807F0102            <1>     cmp byte [rdi + lbaParamsBlock.bSpecFuncs], 2   ;Check get phys call.
  1423 00000DBF 0F872BF9FFFF        <1>     ja .errorExit   ;If above 2, error with bad request!
  1424 00000DC5 741F                <1>     je .lgpbpbGetPhys
  1425 00000DC7 F6470101            <1>     test byte [rdi + lbaParamsBlock.bSpecFuncs], 1  ;Check if we update BPB.
  1426 00000DCB 7533                <1>     jnz .lgpbpbok
  1427 00000DCD 57                  <1>     push rdi    ;Push the param block onto the stack
  1428 00000DCE E881FAFFFF          <1>     call .updateBpb
  1429 00000DD3 7208                <1>     jc .lgpbpbnotok ;Even if just bad BPB, keep changed bit on!
  1430 00000DD5 E890FBFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1431 00000DDA 5F                  <1>     pop rdi     ;Pop param block
  1432 00000DDB EB23                <1>     jmp short .lgpbpbok
  1433                              <1> .lgpbpbnotok:
  1434                              <1> ;If no valid BPB found, and the device removable, return BIOS params for the 
  1435                              <1> ; whole device. We never come here for fixed disks as updateBpb always passes.
  1436 00000DDD 5F                  <1>     pop rdi
  1437 00000DDE 3C07                <1>     cmp al, drvBadMed   ;If remdev has bad media, get bios attribs.
  1438 00000DE0 0F850AF9FFFF        <1>     jne .errorExit
  1439                              <1> ;We only fall here if on an unformatted removable disk.
  1440                              <1> ;Unformatted means with an unrecognisable BPB.
  1441                              <1> .lgpbpbGetPhys:
  1442 00000DE6 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
  1443 00000DEA B800880000          <1>     mov eax, 8800h  ;Read LBA Device Parameters
  1444 00000DEF CD33                <1>     int 33h
  1445 00000DF1 0F8269F8FFFF        <1>     jc .errorXlat
  1446 00000DF7 48FFC1              <1>     inc rcx         ;Turn into an absolute count of sectors
  1447 00000DFA 31D2                <1>     xor edx, edx    ;0 Hidden sectors on remdevs/unformatted media
  1448                              <1> ;eax = 0 since either not formatted or values may not be ok for CHS calls
  1449 00000DFC 89D0                <1>     mov eax, edx     
  1450 00000DFE EB1F                <1>     jmp short .lgpStor
  1451                              <1> .lgpbpbok:
  1452 00000E00 31C0                <1>     xor eax, eax
  1453 00000E02 89C3                <1>     mov ebx, eax
  1454 00000E04 FFC3                <1>     inc ebx
  1455                              <1> ;Here eax=0 and ebx=1.
  1456 00000E06 F6450FFF            <1>     test byte [rbp + drvBlk.bNumFAT], -1    ;If 0 FATs, the FAT is invalid!
  1457 00000E0A 0F45C3              <1>     cmovnz eax, ebx                         ;Set if we have a FAT
  1458 00000E0D 8B551B              <1>     mov edx, dword [rbp + drvBlk.dHiddSec]
  1459 00000E10 0FB75D0A            <1>     movzx ebx, word [rbp + drvBlk.wBpS]
  1460 00000E14 0FB74D12            <1>     movzx ecx, word [rbp + drvBlk.wTotSec16]
  1461 00000E18 85C9                <1>     test ecx, ecx
  1462 00000E1A 7503                <1>     jnz .lgpStor
  1463 00000E1C 8B4D1F              <1>     mov ecx, dword [rbp + drvBlk.dTotSec32]
  1464                              <1> .lgpStor:
  1465                              <1> ;Enter with:
  1466                              <1> ;ax = 0 if unformatted, 1 if any FAT type (means can call CHS function)
  1467                              <1> ;rbx = Sector size in bytes
  1468                              <1> ;rcx = Last LBA block address + 1 (Count of sectors)
  1469                              <1> ;rdx = Hidden sectors
  1470 00000E1F 66894704            <1>     mov word [rdi + lbaParamsBlock.wFSType], ax
  1471 00000E23 48895F08            <1>     mov qword [rdi + lbaParamsBlock.qSectorSize], rbx
  1472 00000E27 48894F10            <1>     mov qword [rdi + lbaParamsBlock.qNumSectors], rcx
  1473 00000E2B 48895718            <1>     mov qword [rdi + lbaParamsBlock.qStartSector], rdx
  1474 00000E2F 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1475 00000E33 2503000000          <1>     and eax, devFixed | devChgLine
  1476 00000E38 66894702            <1>     mov word [rdi + lbaParamsBlock.wDevFlgs], ax
  1477                              <1>     return 
    13                              <2> %%_ret:
    14 00000E3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1478                              <1> ;---------------------------------------------------------------------------
  1479                              <1> ;                    CHS IO requests are structured here
  1480                              <1> ;---------------------------------------------------------------------------
  1481                              <1> .ioWrite:
  1482 00000E3D 0F85BB000000        <1>     jnz .lbaWrite
  1483                              <1> ;Here for CHS write tracks. 
  1484 00000E43 BB00830000          <1>     mov ebx, 8300h  ;Write sectors
  1485                              <1> .iochsRW:
  1486 00000E48 E86F000000          <1>     call .ioChsToLba
  1487 00000E4D E853000000          <1>     call .ioChsSanity
  1488 00000E52 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector]
  1489 00000E56 01C1                <1>     add ecx, eax    ;Add the zero based sector number to start of "track"
  1490 00000E58 0FB77707            <1>     movzx esi, word [rdi + chsIOBlock.wNumSectors]  ;How many sectors to IO on
  1491                              <1> .iochsCmn:
  1492 00000E5C 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1493 00000E5E 488B5F09            <1>     mov rbx, qword [rdi + chsIOBlock.pXferBuffer]   ;And get buffer ptr in rbx
  1494 00000E62 E9B6000000          <1>     jmp .ioEp
  1495                              <1> .ioRead:
  1496 00000E67 0F858A000000        <1>     jnz .lbaRead
  1497                              <1> ;Here for CHS read tracks.
  1498 00000E6D BB00820000          <1>     mov ebx, 8200h  ;Read sectors
  1499 00000E72 EBD4                <1>     jmp short .iochsRW
  1500                              <1> .ioFormat:
  1501                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1502                              <1> ;
  1503                              <1> ;We start by setting DASD parameters but for now we do nothing so just
  1504                              <1> ; clear the flag.
  1505 00000E74 9C                  <1>     pushfq
  1506 00000E75 668165377FFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSetDASD
  1507 00000E7B 9D                  <1>     popfq
  1508                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1509 00000E7C 756F                <1>     jnz .lbaFmt
  1510                              <1> ;Here for CHS format track.
  1511 00000E7E BB00850000          <1>     mov ebx, 8500h  ;Format sectors
  1512 00000E83 F60201              <1>     test byte [rdx + chsFormatBlock.bSpecFuncs], 1  ;If this bit clear do format
  1513 00000E86 7404                <1>     jz .iochsFmtCmn
  1514                              <1> ;Else we should respond if the sector table is valid. Since our BIOS is crap
  1515                              <1> ; we always return OK and let the format call fail. This would possibly be
  1516                              <1> ; dangerous but its not since the BIOS CHS emulation is very meh.
  1517 00000E88 C60200              <1>     mov byte [rdx + chsFormatBlock.bSpecFuncs], 0   ;All ok!
  1518                              <1>     return
    13                              <2> %%_ret:
    14 00000E8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1519                              <1> .iochsFmtCmn:
  1520 00000E8C E82B000000          <1>     call .ioChsToLba    ;Get the LBA of the first sector of the track in ecx
  1521 00000E91 0FB77517            <1>     movzx esi, word [rbp + drvBlk.wSecPerTrk]   ;Fmt/Verify this many sectors
  1522 00000E95 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1523 00000E97 E981000000          <1>     jmp .ioEp
  1524                              <1> .ioVerify:
  1525 00000E9C 7548                <1>     jnz .lbaVerify
  1526                              <1> ;Here for CHS verify track.
  1527 00000E9E BB00840000          <1>     mov ebx, 8400h
  1528 00000EA3 EBE7                <1>     jmp short .iochsFmtCmn
  1529                              <1> 
  1530                              <1> .ioChsSanity:
  1531                              <1> ;Checks that the read/write will be on one track and makes sense.
  1532                              <1> ;Input: ebx = BIOS function to call. Preserved.
  1533                              <1> ;       ecx = LBA of start sector.
  1534                              <1> ;       rdi -> chsIOBlock
  1535                              <1> ;       rbp -> Drive block ptr
  1536 00000EA5 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector] ;Zero based
  1537 00000EA9 FFC0                <1>     inc eax         ;Make it 1 based for the comparison
  1538 00000EAB 66034707            <1>     add ax, word [rdi + chsIOBlock.wNumSectors]
  1539 00000EAF 663B4517            <1>     cmp ax, word [rbp + drvBlk.wSecPerTrk]  ;Does this surpass num sect/trck?
  1540                              <1>     retna
    77                              <2> cret na
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EB3 7701                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EB5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1541                              <1> .ioctlerr:
  1542 00000EB6 5B                  <1>     pop rbx ;Pop the ret addr off the stack and tail to the bad media
  1543 00000EB7 E984FDFFFF          <1>     jmp .iobadMed
  1544                              <1> .ioChsToLba:
  1545                              <1> ;Gets the first sector of the track selected by this call.
  1546                              <1> ;Works with the values set in the bpb of drvBlk which isn't ideal...
  1547                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
  1548                              <1> ;Input: ebx = BIOS Function to call. Preserved.
  1549                              <1> ;Output: ecx = eax = LBA address for the first sector of the track
  1550                              <1> ;        rdi -> chsFormatBlock or IOBlock
  1551 00000EBC 4889D7              <1>     mov rdi, rdx
  1552 00000EBF 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
  1553 00000EC3 0FB74F03            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartCyl]
  1554 00000EC7 663B4D39            <1>     cmp cx, word [rbp + drvBlk.wNumCyl]
  1555 00000ECB 73E9                <1>     jae .ioctlerr
  1556 00000ECD FFC1                <1>     inc ecx ;Inc as we get it as a zero based number
  1557 00000ECF F7E1                <1>     mul ecx
  1558 00000ED1 0FB74F01            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartHead]
  1559 00000ED5 663B4D19            <1>     cmp cx, word [rbp + drvBlk.wNumHeads]
  1560 00000ED9 73DB                <1>     jae .ioctlerr 
  1561 00000EDB 01C8                <1>     add eax, ecx
  1562 00000EDD 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
  1563 00000EE1 F7E1                <1>     mul ecx
  1564 00000EE3 89C1                <1>     mov ecx, eax
  1565                              <1>     return
    13                              <2> %%_ret:
    14 00000EE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1566                              <1> ;---------------------------------------------------------------------------
  1567                              <1> ;                    LBA IO requests are structured here
  1568                              <1> ;---------------------------------------------------------------------------
  1569                              <1> .lbaVerify:
  1570 00000EE6 B800840000          <1>     mov eax, 8400h  ;Verify sectors
  1571 00000EEB EB05                <1>     jmp short .lbaFmtCmn
  1572                              <1> .lbaFmt:
  1573 00000EED B800850000          <1>     mov eax, 8500h  ;Format sectors
  1574                              <1> .lbaFmtCmn:
  1575 00000EF2 803A10              <1>     cmp byte [rdx + lbaIOBlock.size], lbaFormatBlock_size
  1576 00000EF5 EB13                <1>     jmp short .lbaCmn
  1577                              <1> .lbaRead:
  1578 00000EF7 B800820000          <1>     mov eax, 8200h  ;Read sectors
  1579 00000EFC EB05                <1>     jmp short .lbaRWCmn
  1580                              <1> .lbaWrite:
  1581 00000EFE B800830000          <1>     mov eax, 8300h  ;Write sectors
  1582                              <1> .lbaRWCmn:
  1583 00000F03 488B5A10            <1>     mov rbx, qword [rdx + lbaIOBlock.xferBuffer]
  1584 00000F07 803A18              <1>     cmp byte [rdx + lbaIOBlock.size], lbaIOBlock_size
  1585                              <1> .lbaCmn:
  1586 00000F0A 0F8526FDFFFF        <1>     jne .iobadCmdLen
  1587                              <1> ;Setup the vars for block IO
  1588 00000F10 4889D7              <1>     mov rdi, rdx
  1589 00000F13 0FB77701            <1>     movzx esi, word [rdi + lbaFormatBlock.numSectors]
  1590 00000F17 8B4F08              <1>     mov ecx, dword [rdi + lbaFormatBlock.startSector]
  1591 00000F1A 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]  ;Point to sector in partition
  1592                              <1> .ioEp:
  1593 00000F1D 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
  1594                              <1> .ioLp:
  1595 00000F20 50                  <1>     push rax        ;Always preserve the function number we are using
  1596 00000F21 E8C0FBFFFF          <1>     call .blkIODirect
  1597 00000F26 58                  <1>     pop rax
  1598 00000F27 0F828BFBFFFF        <1>     jc .ioDoErr
  1599 00000F2D E891FBFFFF          <1>     call .ioAdv
  1600 00000F32 75EC                <1>     jnz .ioLp
  1601                              <1>     return
    13                              <2> %%_ret:
    14 00000F34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1602                              <1> ;---------------------------------------------------------------------------
  1603                              <1> 
  1604                              <1> ;---------------------------------------------------------------------------
  1605                              <1> ;                           Misc GENIO routines 
  1606                              <1> ;---------------------------------------------------------------------------
  1607                              <1> .ioSetIds:
  1608                              <1> .ioGetIds:
  1609 00000F35 E9F2FCFFFF          <1>     jmp .iobadCmd
  1610                              <1> .ioSetAccessFlag:
  1611                              <1> ;Sets/Clears the unformatted bit of a device block.
  1612 00000F3A F64201FF            <1>     test byte [rdx + accFlgBlk.bAccMode], -1
  1613 00000F3E 7407                <1>     jz .iosafNoAcc
  1614                              <1> ;Enables access if the access mode is non-zero
  1615 00000F40 66816537FFFD        <1>     and word [rbp + drvBlk.wDevFlgs], ~devUnFmt
  1616                              <1>     return
    13                              <2> %%_ret:
    14 00000F46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1617                              <1> .iosafNoAcc:
  1618                              <1> ;Disables access if the access mode is zero 
  1619 00000F47 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt
  1620                              <1>     return
    13                              <2> %%_ret:
    14 00000F4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1621                              <1> .ioGetAccessFlag:
  1622                              <1> ;Gets the state of the unformatted bit of a device block
  1623 00000F4E C6420100            <1>     mov byte [rdx + accFlgBlk.bAccMode], 0  ;Init to clear, no access
  1624 00000F52 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1625                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F58 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F5A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1626 00000F5B FE4201              <1>     inc byte [rdx + accFlgBlk.bAccMode] ;If bit clear, set mode to access ok!
  1627                              <1>     return
    13                              <2> %%_ret:
    14 00000F5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1628                              <1> 
  1629                              <1> .ioTrackTbl:
  1630 00000F5F 3F00                <1>     dw maxTrackTblSz    ;Have a maximum of 63 sectors per track
  1631                              <1> ;Each row is a pair of words:
  1632                              <1> ;   dw Sector number, Sector size
  1633 00000F61 01000002            <1>     dw 1, 200h
  1634 00000F65 02000002            <1>     dw 2, 200h
  1635 00000F69 03000002            <1>     dw 3, 200h
  1636 00000F6D 04000002            <1>     dw 4, 200h
  1637 00000F71 05000002            <1>     dw 5, 200h
  1638 00000F75 06000002            <1>     dw 6, 200h
  1639 00000F79 07000002            <1>     dw 7, 200h
  1640 00000F7D 08000002            <1>     dw 8, 200h
  1641 00000F81 09000002            <1>     dw 9, 200h
  1642 00000F85 0A000002            <1>     dw 10, 200h
  1643 00000F89 0B000002            <1>     dw 11, 200h
  1644 00000F8D 0C000002            <1>     dw 12, 200h
  1645 00000F91 0D000002            <1>     dw 13, 200h
  1646 00000F95 0E000002            <1>     dw 14, 200h
  1647 00000F99 0F000002            <1>     dw 15, 200h
  1648 00000F9D 10000002            <1>     dw 16, 200h
  1649 00000FA1 11000002            <1>     dw 17, 200h
  1650 00000FA5 12000002            <1>     dw 18, 200h
  1651 00000FA9 13000002            <1>     dw 19, 200h
  1652 00000FAD 14000002            <1>     dw 20, 200h
  1653 00000FB1 15000002            <1>     dw 21, 200h
  1654 00000FB5 16000002            <1>     dw 22, 200h
  1655 00000FB9 17000002            <1>     dw 23, 200h
  1656 00000FBD 18000002            <1>     dw 24, 200h
  1657 00000FC1 19000002            <1>     dw 25, 200h
  1658 00000FC5 1A000002            <1>     dw 26, 200h
  1659 00000FC9 1B000002            <1>     dw 27, 200h
  1660 00000FCD 1C000002            <1>     dw 28, 200h
  1661 00000FD1 1D000002            <1>     dw 29, 200h
  1662 00000FD5 1E000002            <1>     dw 30, 200h
  1663 00000FD9 1F000002            <1>     dw 31, 200h
  1664 00000FDD 20000002            <1>     dw 32, 200h
  1665 00000FE1 21000002            <1>     dw 33, 200h
  1666 00000FE5 22000002            <1>     dw 34, 200h
  1667 00000FE9 23000002            <1>     dw 35, 200h
  1668 00000FED 24000002            <1>     dw 36, 200h
  1669 00000FF1 25000002            <1>     dw 37, 200h
  1670 00000FF5 26000002            <1>     dw 38, 200h
  1671 00000FF9 27000002            <1>     dw 39, 200h
  1672 00000FFD 28000002            <1>     dw 40, 200h
  1673 00001001 29000002            <1>     dw 41, 200h
  1674 00001005 2A000002            <1>     dw 42, 200h
  1675 00001009 2B000002            <1>     dw 43, 200h
  1676 0000100D 2C000002            <1>     dw 44, 200h
  1677 00001011 2D000002            <1>     dw 45, 200h
  1678 00001015 2E000002            <1>     dw 46, 200h
  1679 00001019 2F000002            <1>     dw 47, 200h
  1680 0000101D 30000002            <1>     dw 48, 200h
  1681 00001021 31000002            <1>     dw 49, 200h
  1682 00001025 32000002            <1>     dw 50, 200h
  1683 00001029 33000002            <1>     dw 51, 200h
  1684 0000102D 34000002            <1>     dw 52, 200h
  1685 00001031 35000002            <1>     dw 53, 200h
  1686 00001035 36000002            <1>     dw 54, 200h
  1687 00001039 37000002            <1>     dw 55, 200h
  1688 0000103D 38000002            <1>     dw 56, 200h
  1689 00001041 39000002            <1>     dw 57, 200h
  1690 00001045 3A000002            <1>     dw 58, 200h
  1691 00001049 3B000002            <1>     dw 59, 200h
  1692 0000104D 3C000002            <1>     dw 60, 200h
  1693 00001051 3D000002            <1>     dw 61, 200h
  1694 00001055 3E000002            <1>     dw 62, 200h
  1695 00001059 3F000002            <1>     dw 63, 200h
  1696                              <1> 
  1697                              <1> .getLogicalDev:   ;Function 23
  1698                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
  1699                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
  1700 0000105D 31C0                <1>     xor eax, eax
  1701 0000105F 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1702 00001065 7428                <1>     jz .gldExit
  1703 00001067 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
  1704 0000106B 488D2D37140000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
  1705                              <1> .gldLp:
  1706 00001072 384508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
  1707 00001075 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
  1708 0000107A 75F6                <1>     jne .gldLp
  1709 0000107C 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
  1710 00001082 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
  1711 00001087 74E9                <1>     jz .gldLp 
  1712 00001089 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
  1713 0000108D FFC0                <1>     inc eax ;Make it 1 based
  1714                              <1> .gldExit:
  1715 0000108F 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
  1716                              <1>     return
    13                              <2> %%_ret:
    14 00001092 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1717                              <1> 
  1718                              <1> .setLogicalDev:   ;Function 24
  1719 00001093 E8F3000000          <1>     call .checkDevType  ;Set the unit as the owner of this BIOS drive!
  1720                              <1>     return
    13                              <2> %%_ret:
    14 00001098 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1721                              <1> 
  1722                              <1> .setupDrive:
  1723                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
  1724                              <1> ; sets up internal vars according to it. 
  1725                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
  1726                              <1> ;Output: rbp = Points to the drvBlk
  1727 00001099 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
  1728                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000109D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000109F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1729 000010A0 488D2D02140000      <1>     lea rbp, .drvBlkTbl
  1730                              <1> .sdChk:
  1731 000010A7 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
  1732                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010AA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010AC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1733 000010AD 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1734 000010B1 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1735 000010B8 75ED                <1>     jne .sdChk  ;Keep looping until end of table
  1736 000010BA 58                  <1>     pop rax     ;Pop return address off the stack
  1737 000010BB B007                <1>     mov al, drvBadMed
  1738 000010BD E933F5FFFF          <1>     jmp .writeEntryError
  1739                              <1> 
  1740                              <1> .checkSwapIO:
  1741                              <1> ;Checks if the reason for an error mid IO operation was
  1742                              <1> ; really media being swapped.
  1743 000010C2 E8A8000000          <1>     call .checkDevFixed ;If the dev is fixed, skip checking swap
  1744                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010C7 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010C9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1745 000010CA 80FC06              <1>     cmp ah, 06h         ;ah = 06 is BIOS Drive changed error code 
  1746                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010CD 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010CF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1747                              <1> ;Here the BIOS is reporting that the media was swapped. Check the media
  1748                              <1> ; to see if the drive really was swapped. 
  1749                              <1> ;We start by checking the open count. If it is zero, we never report
  1750                              <1> ; an illegal disk swap. This prevents this error from being thrown
  1751                              <1> ; if no files are open.
  1752 000010D0 E8AF000000          <1>     call .checkOpen ;If opcnt = 0, ignore this error.
  1753                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010D5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010D7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1754                              <1> ;Here, if we determine that a media swap occured, we must report a 
  1755                              <1> ; bad disk change. That means, unsure or no swap simply return the 
  1756                              <1> ; error code. 
  1757 000010D8 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get original meddesc byte
  1758 000010DC 50                  <1>     push rax                                ;and save it on the stack
  1759 000010DD E822000000          <1>     call .csiogetbpb    ;Now get new bpb
  1760 000010E2 7217                <1>     jc .csiogetbpberr   ;If error in getting the BPB, bubble it up
  1761 000010E4 58                  <1>     pop rax             ;Get back the FAT byte in al
  1762 000010E5 E85A000000          <1>     call .checkFATSame  ;Returns status in eax
  1763 000010EA 7803                <1>     js .csioBadDskChg
  1764                              <1> .csioExit:
  1765 000010EC B406                <1>     mov ah, 06h         ;Maintain the BIOS error code here
  1766                              <1>     return
    13                              <2> %%_ret:
    14 000010EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1767                              <1> .csioBadDskChg:
  1768                              <1> ;Restore the stack to return directly to DOS and not caller. 
  1769                              <1> ;Place DOS error code into al
  1770 000010EF 58                  <1>     pop rax
  1771 000010F0 58                  <1>     pop rax
  1772 000010F1 B80F000000          <1>     mov eax, drvBadDskChnge
  1773 000010F6 E9F5F5FFFF          <1>     jmp .errorExit
  1774                              <1> .csiogetbpberr:
  1775                              <1> ;Return the error code from getbpb
  1776                              <1> ;Drop the saved media byte from the stack
  1777 000010FB 4881C408000000      <1>     add rsp, 8
  1778 00001102 F9                  <1>     stc
  1779                              <1>     return      ;and return with rax = Error code from updatebpb
    13                              <2> %%_ret:
    14 00001103 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1780                              <1> .csiogetbpb:
  1781                              <1> ;Saves the IO registers for use across the updatebpb call and calls
  1782                              <1> ; the get bpb function
  1783 00001104 53                  <1>     push rbx    
  1784 00001105 51                  <1>     push rcx
  1785 00001106 52                  <1>     push rdx
  1786 00001107 56                  <1>     push rsi
  1787 00001108 57                  <1>     push rdi
  1788 00001109 E846F7FFFF          <1>     call .updateBpb ;Update the BPB
  1789 0000110E 5F                  <1>     pop rdi
  1790 0000110F 5E                  <1>     pop rsi
  1791 00001110 5A                  <1>     pop rdx
  1792 00001111 59                  <1>     pop rcx
  1793 00001112 5B                  <1>     pop rbx
  1794                              <1>     return
    13                              <2> %%_ret:
    14 00001113 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1795                              <1>     
  1796                              <1> .checkSwap:
  1797                              <1> ;Checks if the media represented by drvBlk has been swapped when it 
  1798                              <1> ; shouldn't've been swapped.
  1799                              <1> ;Input: rbp -> drvBlk to check for
  1800                              <1> ;Output: CF=NC: All ok.
  1801                              <1> ;        CF=CY: Error in getting updated BPB. 
  1802                              <1> ;               AL = BIOS error code
  1803                              <1> ;   If an illegal disk swap is detected, then this call returns directly
  1804                              <1> ;   and doesnt bubble up to the caller. 
  1805 00001114 E856000000          <1>     call .checkDevFixed ;If the dev is fixed, skip checking swap
  1806                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001119 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000111B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1807 0000111C E863000000          <1>     call .checkOpen
  1808                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001121 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001123 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1809 00001124 E84D000000          <1>     call .checkMediaChange
  1810                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001129 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000112B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1811                              <1> ;Since the open count is non-zero and a media swap has been seen (since
  1812                              <1> ; the flag was set) we update the BPB and check if the media is the 
  1813                              <1> ; same as the previous media. 
  1814 0000112C E823F7FFFF          <1>     call .updateBpb     ;Update the BPB
  1815                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001131 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001133 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1816 00001134 E810000000          <1>     call .checkVolumeSame
  1817                              <1>     retns   ;If the sign bit is not set (i.e. unsure or no change) return ok
    85                              <2> cret ns
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001139 7801                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000113B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1818                              <1> ;Else, we now return a bad disk change!
  1819 0000113C 58                  <1>     pop rax ;Pop original return address off the stack
  1820 0000113D B00F                <1>     mov al, drvBadDskChnge  ;Driver error code
  1821 0000113F E9ACF5FFFF          <1>     jmp .errorExit  ;Place error code in packet and return
  1822                              <1> 
  1823                              <1> .checkFATSame:
  1824                              <1> ;At this point, we are unsure of the media swap status. 
  1825 00001144 3A4514              <1>     cmp al, byte [rbp + drvBlk.bMedDesc]
  1826 00001147 751D                <1>     jne .cvsChange  ;If they are not equal, there mustve been a change
  1827                              <1> ;The FAT media byte is the same so how about literally anything else?
  1828                              <1> .checkVolumeSame:
  1829                              <1> ;If the volume has an extended BPB, we check the serial number. If they are 
  1830                              <1> ; the same, we then say no change. Else, the volume has changed. 
  1831                              <1> ;Else, we report unknown. 
  1832                              <1> ;----------------------------------------------------------------------------
  1833                              <1> ;TODO: In the outer else, replace with a read of the filesystem volume label
  1834                              <1> ;      and implement in buildBPB a routine to read the volume label from the
  1835                              <1> ;      root directory of whatever drive.
  1836                              <1> ;----------------------------------------------------------------------------
  1837 00001149 31C0                <1>     xor eax, eax    ;Set eax = 0, unsure
  1838 0000114B 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
  1839                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000114F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001151 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1840                              <1> ;Here if we have an extended boot signature. 
  1841                              <1> ; Check the volume ids are equal
  1842 00001152 50                  <1>     push rax
  1843 00001153 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
  1844 00001156 398580000000        <1>     cmp dword [rbp + drvBlk.volId], eax
  1845 0000115C 58                  <1>     pop rax
  1846 0000115D 7507                <1>     jne .cvsChange
  1847                              <1> .cvsNoChange:
  1848 0000115F FFC0                <1>     inc eax ;Make eax = 1, no change
  1849 00001161 E917000000          <1>     jmp .clearMediaChange    ;Exit tail calling through this function
  1850                              <1> .cvsChange:
  1851 00001166 FFC8                <1>     dec eax ;Make eax = -1, change
  1852 00001168 880572020000        <1>     mov byte [.bLastDsk], al    ;Ensure we do a media check next time
  1853                              <1>     return
    13                              <2> %%_ret:
    14 0000116E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1854                              <1> 
  1855                              <1> .checkDevFixed:
  1856                              <1> ;Input: rbp -> drvBlk to check if fixed media or not
  1857                              <1> ;Output: ZF=ZE: Not fixed
  1858                              <1> ;        ZF=NZ: Fixed
  1859 0000116F 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
  1860                              <1>     return
    13                              <2> %%_ret:
    14 00001175 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1861                              <1> 
  1862                              <1> .checkMediaChange:
  1863                              <1> ;Input: rbp -> drvBlk to check changed flag for
  1864                              <1> ;Output: ZF=ZE: No change
  1865                              <1> ;        ZF=NZ: Change
  1866 00001176 66F745374000        <1>     test word [rbp + drvBlk.wDevFlgs], devChgd
  1867                              <1>     return
    13                              <2> %%_ret:
    14 0000117C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1868                              <1> 
  1869                              <1> .clearMediaChange:
  1870                              <1> ;Input: rbp -> drvBlk to clear the devChanged bit for
  1871 0000117D 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devChgd
  1872                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
  1873                              <1> %if drvDbg
  1874                              <1>     push rsi
  1875                              <1>     lea rsi, .cmcstr
  1876                              <1>     call dbgPrintString
  1877                              <1>     pop rsi
  1878                              <1>     push rax
  1879                              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  1880                              <1>     add al, "A"
  1881                              <1>     call dbgPutch
  1882                              <1>     pop rax
  1883                              <1>     call dbgCrlf
  1884                              <1>     return
  1885                              <1> .cmcstr db "[DRIVER] Media Change bit cleared for drive ",0
  1886                              <1> %endif
  1887                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  1888                              <1>     return
    13                              <2> %%_ret:
    14 00001183 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1889                              <1> 
  1890                              <1> .checkOpen:
  1891                              <1> ;Input: rbp -> drvBlk to check open count for
  1892                              <1> ;Output: ZF=ZE: Open count is 0
  1893                              <1> ;        ZF=NZ: Open count geq 0
  1894 00001184 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
  1895                              <1>     return
    13                              <2> %%_ret:
    14 0000118A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1896                              <1> 
  1897                              <1> .checkDevType:
  1898                              <1> ;Checks if we need to display the swap drive message and displays it if so.
  1899                              <1> ;The device must already be setup in rbp (and var) for this to work.
  1900                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
  1901 0000118B 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
  1902                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001191 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001193 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1903 00001194 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1904                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000119A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000119C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1905                              <1> ;Else, now we find the current owner of this drive letter :)
  1906 0000119D 8A4508              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
  1907 000011A0 488D3D02130000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
  1908                              <1> .cdtLp:
  1909 000011A7 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1910 000011AE 746B                <1>     je .cdtBadExit
  1911 000011B0 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
  1912 000011B3 740D                <1>     je .cdtNextEntry
  1913 000011B5 384708              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
  1914 000011B8 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
  1915                              <1>     ;Now we check if this is the current owner of the device?
  1916 000011BA 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
  1917 000011C0 7505                <1>     jnz .cdtDevFnd
  1918                              <1> .cdtNextEntry:
  1919 000011C2 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
  1920 000011C5 EBE0                <1>     jmp short .cdtLp
  1921                              <1> .cdtDevFnd:
  1922                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
  1923                              <1> ; device) gains ownership.
  1924 000011C7 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
  1925 000011CD 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
  1926                              <1> ;If a set map request, don't prompt the message!
  1927 000011D3 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
  1928                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011D7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011D9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1929                              <1> 
  1930                              <1> ;Broadcast the disk-swap message for multitaskers to hook
  1931                              <1> ; and issue message (and skip the "not multitasking friendly"
  1932                              <1> ; section below)
  1933 000011DA 8A7709              <1>     mov dh, byte [rdi + drvBlk.bDOSNum] ;Unit that has lost ownership
  1934 000011DD 8A5509              <1>     mov dl, byte [rbp + drvBlk.bDOSNum] ;Unit that has gained ownership
  1935 000011E0 31C9                <1>     xor ecx, ecx
  1936 000011E2 B8004A0000          <1>     mov eax, 4A00h
  1937 000011E7 CD2F                <1>     int 2Fh         ;If either ecx or cx = -1, return
  1938 000011E9 0FBFC9              <1>     movsx ecx, cx   ;Convert 16-bit responses to 32-bit
  1939 000011EC FFC1                <1>     inc ecx         ;If ecx = -1, we return
  1940                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011EE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011F0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1941                              <1> 
  1942                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1943 000011F1 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  1944 000011F4 0441                <1>     add al, "A" ;Convert to a letter
  1945 000011F6 88059B010000        <1>     mov byte [.strikeMsgLetter], al
  1946 000011FC 488D357C010000      <1>     lea rsi, .strikeMsg
  1947 00001203 B93C000000          <1>     mov ecx, .strikeMsgL
  1948                              <1> .cdtPrint:
  1949 00001208 AC                  <1>     lodsb   ;Get the char in al, inc rsi
  1950 00001209 CD29                <1>     int 29h ;Print char in al
  1951 0000120B FFC9                <1>     dec ecx
  1952 0000120D 75F9                <1>     jnz .cdtPrint
  1953                              <1> 
  1954 0000120F E821000000          <1>     call .cdtCleanKeyb  ;Clean the buffer!
  1955 00001214 E80E000000          <1>     call .cdtAwaitKeyb  ;Await until a char ready in a friendly way :)
  1956                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1957                              <1> 
  1958 00001219 F8                  <1>     clc ;Indicate goodness through CF
  1959                              <1>     return
    13                              <2> %%_ret:
    14 0000121A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1960                              <1> .cdtBadExit:
  1961 0000121B 58                  <1>     pop rax
  1962 0000121C B807000000          <1>     mov eax, drvBadMed
  1963 00001221 F9                  <1>     stc ;Indicate badness through CF
  1964 00001222 E9C9F4FFFF          <1>     jmp .errorExit
  1965                              <1> 
  1966                              <1> .cdtAwaitKeyb:
  1967 00001227 B800010000          <1>     mov eax, 0100h
  1968 0000122C CD36                <1>     int 36h ;If return ZF=ZE, we have no char in the buffer. Loop until we do!
  1969 0000122E 74F7                <1>     jz .cdtAwaitKeyb
  1970 00001230 31C0                <1>     xor eax, eax
  1971 00001232 CD36                <1>     int 36h ;Now pull the char!
  1972                              <1>     return
    13                              <2> %%_ret:
    14 00001234 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1973                              <1> .cdtCleanKeyb:
  1974 00001235 B800010000          <1>     mov eax, 0100h
  1975 0000123A CD36                <1>     int 36h ;If return ZF=NZ we have a char in the buffer, pull it!
  1976                              <1>     retz    ;Else ZF=ZE, no char, ready to await the keypress.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000123C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000123E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1977 0000123F 31C0                <1>     xor eax, eax    ;Pull the char in the buffer from buffer
  1978 00001241 CD36                <1>     int 36h
  1979 00001243 EBF0                <1>     jmp short .cdtCleanKeyb
  1980                              <1> 
  1981                              <1> .ioSetVolLbl:
  1982                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
  1983                              <1> ;Input: rbx -> io request packet
  1984                              <1> ;       rbp -> drvBlk to get volume ID from
  1985                              <1> ;Output: Pointer placed in io request packet
  1986 00001245 50                  <1>     push rax
  1987 00001246 488D4574            <1>     lea rax, qword [rbp + drvBlk.volLab]    ;Get the volLbl from the BPB
  1988 0000124A 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
  1989 0000124E 58                  <1>     pop rax
  1990 0000124F C3                  <1>     ret
  1991                              <1> 
  1992                              <1> .getTime:
  1993                              <1> ;Gets the current time in a format ready to be used for disk access.
  1994 00001250 31C0                <1>     xor eax, eax
  1995 00001252 CD3A                <1>     int 3Ah
  1996 00001254 0FB7D2              <1>     movzx edx, dx
  1997 00001257 C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
  1998 0000125A 09D1                <1>     or ecx, edx ;Store the current time count into ecx
  1999 0000125C 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
  2000 0000125E 740E                <1>     jz .stStore
  2001 00001260 0FB6C0              <1>     movzx eax, al
  2002 00001263 51                  <1>     push rcx    ;Save the current time count
  2003 00001264 B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
  2004 00001269 F7E1                <1>     mul ecx
  2005 0000126B 59                  <1>     pop rcx
  2006 0000126C 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
  2007                              <1> .stStore:
  2008 0000126E F8                  <1>     clc
  2009                              <1>     return
    13                              <2> %%_ret:
    14 0000126F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2010                              <1> 
  2011                              <1> .setTime:
  2012                              <1> ;Sets the current time to the disk drive and resets the access counter
  2013                              <1> ;Preserves all registers and edits .bAccCnt and .dAccTime for rbp -> drvBlk
  2014 00001270 50                  <1>     push rax
  2015 00001271 51                  <1>     push rcx
  2016 00001272 52                  <1>     push rdx
  2017 00001273 E8D8FFFFFF          <1>     call .getTime   ;Return in ecx the time. eax and edx trashed.
  2018 00001278 894D70              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
  2019 0000127B C6055D01000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
  2020 00001282 5A                  <1>     pop rdx
  2021 00001283 59                  <1>     pop rcx
  2022 00001284 58                  <1>     pop rax
  2023                              <1>     return
    13                              <2> %%_ret:
    14 00001285 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2024                              <1> 
  2025                              <1> .checkTime:
  2026                              <1> ;Does the time/access count check :)
  2027                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
  2028 00001286 E8C5FFFFFF          <1>     call .getTime   ;Returns in ecx the current time
  2029 0000128B 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
  2030 0000128D 7517                <1>     jnz .ctOk
  2031 0000128F FE054A010000        <1>     inc byte [.bAccCnt]
  2032 00001295 803D4301000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
  2033 0000129C 7217                <1>     jb .ctNoChange
  2034 0000129E FE0D3B010000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
  2035 000012A4 EB0D                <1>     jmp short .ctMaybeCh
  2036                              <1> .ctOk:
  2037 000012A6 8B5570              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
  2038                              <1> ;ecx = time of current check, adjusted for day rollovers 
  2039 000012A9 29D1                <1>     sub ecx, edx    
  2040 000012AB 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
  2041 000012B1 7602                <1>     jbe .ctNoChange
  2042                              <1> .ctMaybeCh:
  2043 000012B3 F9                  <1>     stc
  2044                              <1>     return
    13                              <2> %%_ret:
    14 000012B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2045                              <1> .ctNoChange:
  2046 000012B5 F8                  <1>     clc
  2047                              <1>     return
    13                              <2> %%_ret:
    14 000012B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2048                              <1> 
  2049                              <1> .callI33h:
  2050                              <1> ;Wraps all i33 calls allowing me to preserve all that I need to preserve
  2051                              <1> ; across these calls. Only allows returning values in ax.
  2052 000012B7 53                  <1>     push rbx
  2053 000012B8 51                  <1>     push rcx
  2054 000012B9 52                  <1>     push rdx
  2055 000012BA 56                  <1>     push rsi
  2056 000012BB 57                  <1>     push rdi
  2057 000012BC 55                  <1>     push rbp
  2058 000012BD CD33                <1>     int 33h
  2059 000012BF 5D                  <1>     pop rbp
  2060 000012C0 5F                  <1>     pop rdi
  2061 000012C1 5E                  <1>     pop rsi
  2062 000012C2 5A                  <1>     pop rdx
  2063 000012C3 59                  <1>     pop rcx
  2064 000012C4 5B                  <1>     pop rbx
  2065                              <1>     return
    13                              <2> %%_ret:
    14 000012C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2066                              <1> 
  2067                              <1> .setBitsForAllDevs:
  2068                              <1> ;Sets the selected bits for all devices with a particular BIOS number.
  2069                              <1> ;Input: ax = Bits to set in wDevFlgs
  2070                              <1> ;       dl = BIOS drive number
  2071 000012C6 55                  <1>     push rbp
  2072 000012C7 9C                  <1>     pushfq
  2073 000012C8 488D2DDA110000      <1>     lea rbp, .drvBlkTbl
  2074                              <1> .sbfadLp:
  2075 000012CF 385508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], dl
  2076 000012D2 7504                <1>     jne .sbfadNext
  2077 000012D4 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax
  2078                              <1> .sbfadNext:
  2079 000012D8 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  2080 000012DC 4881FDFFFFFFFF      <1>     cmp rbp, -1
  2081 000012E3 75EA                <1>     jne .sbfadLp
  2082                              <1> .sbfadExit:
  2083 000012E5 9D                  <1>     popfq
  2084 000012E6 5D                  <1>     pop rbp
  2085                              <1>     return
    13                              <2> %%_ret:
    14 000012E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2086                              <1> 
  2087                              <1> .i2fDriver:
  2088                              <1> ;Back door into the block driver :)
  2089 000012E8 80FC08              <1>     cmp ah, 08h
  2090 000012EB 7510                <1>     jne .i2fNotUs
  2091 000012ED 84C0                <1>     test al, al ;AL=00, Install check
  2092 000012EF 7412                <1>     jz .i2fCheck
  2093 000012F1 3C01                <1>     cmp al, 01  ;AL=01, Add block device
  2094 000012F3 7412                <1>     je .i2fAddTbl
  2095 000012F5 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
  2096 000012F7 745D                <1>     je .i2fExec
  2097 000012F9 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
  2098 000012FB 7479                <1>     je .i2fGivTbl
  2099                              <1> .i2fNotUs:
  2100 000012FD FF25CBF1FFFF        <1>     jmp qword [i2FNext]
  2101                              <1> .i2fCheck:
  2102 00001303 B0FF                <1>     mov al, -1  ;Indicate installed!
  2103 00001305 48CF                <1>     iretq
  2104                              <1> .i2fAddTbl:
  2105                              <1> ;Adds a new entry to the drive chain and updates the multiownership bits
  2106                              <1> ; as it does :)
  2107                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
  2108                              <1> ;Destroy rax, rbx and rsi
  2109 00001307 488D359B110000      <1>     lea rsi, .drvBlkTbl
  2110 0000130E 0FB64708            <1>     movzx eax, byte [rdi + drvBlk.bBIOSNum]
  2111                              <1> .i2fATLp:
  2112 00001312 384608              <1>     cmp byte [rsi + drvBlk.bBIOSNum], al
  2113 00001315 7526                <1>     jne .i2fATNext
  2114                              <1> ;Set that the two disks are multi owned. New cannot own the drive
  2115                              <1> ; and make sure that the new drive has the accurate changeline bit set
  2116 00001317 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti       ;Both drives now multi!
  2117 0000131D 66814F371000        <1>     or word [rdi + drvBlk.wDevFlgs], devMulti
  2118 00001323 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv    ;New cant own drv
  2119                              <1> ;Changeline check.
  2120 00001329 66816737FDFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devChgLine   ;Assume no changeline
  2121 0000132F 66F746370200        <1>     test word [rsi + drvBlk.wDevFlgs], devChgLine   ;Do we really have cline?
  2122 00001335 7406                <1>     jz .i2fATNext   ;Skip adding the bit if not
  2123 00001337 66814F370200        <1>     or word [rdi + drvBlk.wDevFlgs], devChgLine     ;Add if we do 
  2124                              <1> .i2fATNext:
  2125 0000133D 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;Check if we @ end of table
  2126 00001344 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink] ;Walk if not
  2127 00001348 75C8                <1>     jne .i2fATLp    ;And go again if not
  2128 0000134A 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi ;Else, link rdi onto the end
  2129 0000134D 48C707FFFFFFFF      <1>     mov qword [rdi + drvBlk.pLink], -1  ;And terminate list @ rdi now :)
  2130 00001354 48CF                <1>     iretq
  2131                              <1> .i2fExec:
  2132                              <1> ;We make a small change in that we clean up the flags from the stack
  2133                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
  2134                              <1> ; as no useful information is ever passed in the flags from a driver
  2135                              <1> ; so by doing so, any ported applications which do an additional pop
  2136                              <1> ; from the stack to balance the stack will not be harmed by this.
  2137 00001356 50                  <1>     push rax
  2138 00001357 B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
  2139 0000135C CD2A                <1>     int 2Ah
  2140                              <1> 
  2141 0000135E 53                  <1>     push rbx
  2142 0000135F 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx  ;Save the ptr in var since we own it now :)
  2143 00001366 E821F2FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
  2144 0000136B 5B                  <1>     pop rbx
  2145                              <1> 
  2146 0000136C B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
  2147 00001371 CD2A                <1>     int 2Ah
  2148 00001373 58                  <1>     pop rax
  2149 00001374 48CF                <1>     iretq
  2150                              <1> .i2fGivTbl:
  2151                              <1> ;Output: rdi -> drvBlkTbl
  2152 00001376 488D3D2C110000      <1>     lea rdi, .drvBlkTbl
  2153 0000137D 48CF                <1>     iretq
  2154                              <1> 
  2155 0000137F 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert disk for drive "
  2155 00001388 6469736B20666F7220- <1>
  2155 00001391 647269766520        <1>
  2156 00001397 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
  2156 000013A0 72696B650D0A616E79- <1>
  2156 000013A9 206B6579207768656E- <1>
  2156 000013B2 2072656164790D0A0A  <1>
  2157                              <1> .strikeMsgL equ $ - .strikeMsg
  2158                              <1> 
  2159 000013BB 464154313220202000  <1> .fat12Str   db "FAT12   ",0
  2160 000013C4 464154313620202000  <1> .fat16Str   db "FAT16   ",0
  2161 000013CD 464154333220202000  <1> .fat32Str   db "FAT32   ",0
  2162 000013D6 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
  2163                              <1> 
  2164 000013DF 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
  2165 000013E0 FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check/IO.
  2166                              <1> 
  2167                              <1> ;Keep this @ 4096 for hotplugging a 4096 dev that needs 512 byte pseudo
  2168                              <1> ; access. 
  2169                              <1> ;Access to this buffer should be mediated through a critical section... 
  2170                              <1> ; but this driver doesnt need to be reentrant yet.
  2171 000013E1 000000000000000000- <1> .inBuffer   db 4096 dup (0)  
  2171 000013EA 000000000000000000- <1>
  2171 000013F3 000000000000000000- <1>
  2171 000013FC 000000000000000000- <1>
  2171 00001405 000000000000000000- <1>
  2171 0000140E 000000000000000000- <1>
  2171 00001417 000000000000000000- <1>
  2171 00001420 000000000000000000- <1>
  2171 00001429 000000000000000000- <1>
  2171 00001432 000000000000000000- <1>
  2171 0000143B 000000000000000000- <1>
  2171 00001444 000000000000000000- <1>
  2171 0000144D 000000000000000000- <1>
  2171 00001456 000000000000000000- <1>
  2171 0000145F 000000000000000000- <1>
  2171 00001468 000000000000000000- <1>
  2171 00001471 000000000000000000- <1>
  2171 0000147A 000000000000000000- <1>
  2171 00001483 000000000000000000- <1>
  2171 0000148C 000000000000000000- <1>
  2171 00001495 000000000000000000- <1>
  2171 0000149E 000000000000000000- <1>
  2171 000014A7 000000000000000000- <1>
  2171 000014B0 000000000000000000- <1>
  2171 000014B9 000000000000000000- <1>
  2171 000014C2 000000000000000000- <1>
  2171 000014CB 000000000000000000- <1>
  2171 000014D4 000000000000000000- <1>
  2171 000014DD 000000000000000000- <1>
  2171 000014E6 000000000000000000- <1>
  2171 000014EF 000000000000000000- <1>
  2171 000014F8 000000000000000000- <1>
  2171 00001501 000000000000000000- <1>
  2171 0000150A 000000000000000000- <1>
  2171 00001513 000000000000000000- <1>
  2171 0000151C 000000000000000000- <1>
  2171 00001525 000000000000000000- <1>
  2171 0000152E 000000000000000000- <1>
  2171 00001537 000000000000000000- <1>
  2171 00001540 000000000000000000- <1>
  2171 00001549 000000000000000000- <1>
  2171 00001552 000000000000000000- <1>
  2171 0000155B 000000000000000000- <1>
  2171 00001564 000000000000000000- <1>
  2171 0000156D 000000000000000000- <1>
  2171 00001576 000000000000000000- <1>
  2171 0000157F 000000000000000000- <1>
  2171 00001588 000000000000000000- <1>
  2171 00001591 000000000000000000- <1>
  2171 0000159A 000000000000000000- <1>
  2171 000015A3 000000000000000000- <1>
  2171 000015AC 000000000000000000- <1>
  2171 000015B5 000000000000000000- <1>
  2171 000015BE 000000000000000000- <1>
  2171 000015C7 000000000000000000- <1>
  2171 000015D0 000000000000000000- <1>
  2171 000015D9 000000000000000000- <1>
  2171 000015E2 000000000000000000- <1>
  2171 000015EB 000000000000000000- <1>
  2171 000015F4 000000000000000000- <1>
  2171 000015FD 000000000000000000- <1>
  2171 00001606 000000000000000000- <1>
  2171 0000160F 000000000000000000- <1>
  2171 00001618 000000000000000000- <1>
  2171 00001621 000000000000000000- <1>
  2171 0000162A 000000000000000000- <1>
  2171 00001633 000000000000000000- <1>
  2171 0000163C 000000000000000000- <1>
  2171 00001645 000000000000000000- <1>
  2171 0000164E 000000000000000000- <1>
  2171 00001657 000000000000000000- <1>
  2171 00001660 000000000000000000- <1>
  2171 00001669 000000000000000000- <1>
  2171 00001672 000000000000000000- <1>
  2171 0000167B 000000000000000000- <1>
  2171 00001684 000000000000000000- <1>
  2171 0000168D 000000000000000000- <1>
  2171 00001696 000000000000000000- <1>
  2171 0000169F 000000000000000000- <1>
  2171 000016A8 000000000000000000- <1>
  2171 000016B1 000000000000000000- <1>
  2171 000016BA 000000000000000000- <1>
  2171 000016C3 000000000000000000- <1>
  2171 000016CC 000000000000000000- <1>
  2171 000016D5 000000000000000000- <1>
  2171 000016DE 000000000000000000- <1>
  2171 000016E7 000000000000000000- <1>
  2171 000016F0 000000000000000000- <1>
  2171 000016F9 000000000000000000- <1>
  2171 00001702 000000000000000000- <1>
  2171 0000170B 000000000000000000- <1>
  2171 00001714 000000000000000000- <1>
  2171 0000171D 000000000000000000- <1>
  2171 00001726 000000000000000000- <1>
  2171 0000172F 000000000000000000- <1>
  2171 00001738 000000000000000000- <1>
  2171 00001741 000000000000000000- <1>
  2171 0000174A 000000000000000000- <1>
  2171 00001753 000000000000000000- <1>
  2171 0000175C 000000000000000000- <1>
  2171 00001765 000000000000000000- <1>
  2171 0000176E 000000000000000000- <1>
  2171 00001777 000000000000000000- <1>
  2171 00001780 000000000000000000- <1>
  2171 00001789 000000000000000000- <1>
  2171 00001792 000000000000000000- <1>
  2171 0000179B 000000000000000000- <1>
  2171 000017A4 000000000000000000- <1>
  2171 000017AD 000000000000000000- <1>
  2171 000017B6 000000000000000000- <1>
  2171 000017BF 000000000000000000- <1>
  2171 000017C8 000000000000000000- <1>
  2171 000017D1 000000000000000000- <1>
  2171 000017DA 000000000000000000- <1>
  2171 000017E3 000000000000000000- <1>
  2171 000017EC 000000000000000000- <1>
  2171 000017F5 000000000000000000- <1>
  2171 000017FE 000000000000000000- <1>
  2171 00001807 000000000000000000- <1>
  2171 00001810 000000000000000000- <1>
  2171 00001819 000000000000000000- <1>
  2171 00001822 000000000000000000- <1>
  2171 0000182B 000000000000000000- <1>
  2171 00001834 000000000000000000- <1>
  2171 0000183D 000000000000000000- <1>
  2171 00001846 000000000000000000- <1>
  2171 0000184F 000000000000000000- <1>
  2171 00001858 000000000000000000- <1>
  2171 00001861 000000000000000000- <1>
  2171 0000186A 000000000000000000- <1>
  2171 00001873 000000000000000000- <1>
  2171 0000187C 000000000000000000- <1>
  2171 00001885 000000000000000000- <1>
  2171 0000188E 000000000000000000- <1>
  2171 00001897 000000000000000000- <1>
  2171 000018A0 000000000000000000- <1>
  2171 000018A9 000000000000000000- <1>
  2171 000018B2 000000000000000000- <1>
  2171 000018BB 000000000000000000- <1>
  2171 000018C4 000000000000000000- <1>
  2171 000018CD 000000000000000000- <1>
  2171 000018D6 000000000000000000- <1>
  2171 000018DF 000000000000000000- <1>
  2171 000018E8 000000000000000000- <1>
  2171 000018F1 000000000000000000- <1>
  2171 000018FA 000000000000000000- <1>
  2171 00001903 000000000000000000- <1>
  2171 0000190C 000000000000000000- <1>
  2171 00001915 000000000000000000- <1>
  2171 0000191E 000000000000000000- <1>
  2171 00001927 000000000000000000- <1>
  2171 00001930 000000000000000000- <1>
  2171 00001939 000000000000000000- <1>
  2171 00001942 000000000000000000- <1>
  2171 0000194B 000000000000000000- <1>
  2171 00001954 000000000000000000- <1>
  2171 0000195D 000000000000000000- <1>
  2171 00001966 000000000000000000- <1>
  2171 0000196F 000000000000000000- <1>
  2171 00001978 000000000000000000- <1>
  2171 00001981 000000000000000000- <1>
  2171 0000198A 000000000000000000- <1>
  2171 00001993 000000000000000000- <1>
  2171 0000199C 000000000000000000- <1>
  2171 000019A5 000000000000000000- <1>
  2171 000019AE 000000000000000000- <1>
  2171 000019B7 000000000000000000- <1>
  2171 000019C0 000000000000000000- <1>
  2171 000019C9 000000000000000000- <1>
  2171 000019D2 000000000000000000- <1>
  2171 000019DB 000000000000000000- <1>
  2171 000019E4 000000000000000000- <1>
  2171 000019ED 000000000000000000- <1>
  2171 000019F6 000000000000000000- <1>
  2171 000019FF 000000000000000000- <1>
  2171 00001A08 000000000000000000- <1>
  2171 00001A11 000000000000000000- <1>
  2171 00001A1A 000000000000000000- <1>
  2171 00001A23 000000000000000000- <1>
  2171 00001A2C 000000000000000000- <1>
  2171 00001A35 000000000000000000- <1>
  2171 00001A3E 000000000000000000- <1>
  2171 00001A47 000000000000000000- <1>
  2171 00001A50 000000000000000000- <1>
  2171 00001A59 000000000000000000- <1>
  2171 00001A62 000000000000000000- <1>
  2171 00001A6B 000000000000000000- <1>
  2171 00001A74 000000000000000000- <1>
  2171 00001A7D 000000000000000000- <1>
  2171 00001A86 000000000000000000- <1>
  2171 00001A8F 000000000000000000- <1>
  2171 00001A98 000000000000000000- <1>
  2171 00001AA1 000000000000000000- <1>
  2171 00001AAA 000000000000000000- <1>
  2171 00001AB3 000000000000000000- <1>
  2171 00001ABC 000000000000000000- <1>
  2171 00001AC5 000000000000000000- <1>
  2171 00001ACE 000000000000000000- <1>
  2171 00001AD7 000000000000000000- <1>
  2171 00001AE0 000000000000000000- <1>
  2171 00001AE9 000000000000000000- <1>
  2171 00001AF2 000000000000000000- <1>
  2171 00001AFB 000000000000000000- <1>
  2171 00001B04 000000000000000000- <1>
  2171 00001B0D 000000000000000000- <1>
  2171 00001B16 000000000000000000- <1>
  2171 00001B1F 000000000000000000- <1>
  2171 00001B28 000000000000000000- <1>
  2171 00001B31 000000000000000000- <1>
  2171 00001B3A 000000000000000000- <1>
  2171 00001B43 000000000000000000- <1>
  2171 00001B4C 000000000000000000- <1>
  2171 00001B55 000000000000000000- <1>
  2171 00001B5E 000000000000000000- <1>
  2171 00001B67 000000000000000000- <1>
  2171 00001B70 000000000000000000- <1>
  2171 00001B79 000000000000000000- <1>
  2171 00001B82 000000000000000000- <1>
  2171 00001B8B 000000000000000000- <1>
  2171 00001B94 000000000000000000- <1>
  2171 00001B9D 000000000000000000- <1>
  2171 00001BA6 000000000000000000- <1>
  2171 00001BAF 000000000000000000- <1>
  2171 00001BB8 000000000000000000- <1>
  2171 00001BC1 000000000000000000- <1>
  2171 00001BCA 000000000000000000- <1>
  2171 00001BD3 000000000000000000- <1>
  2171 00001BDC 000000000000000000- <1>
  2171 00001BE5 000000000000000000- <1>
  2171 00001BEE 000000000000000000- <1>
  2171 00001BF7 000000000000000000- <1>
  2171 00001C00 000000000000000000- <1>
  2171 00001C09 000000000000000000- <1>
  2171 00001C12 000000000000000000- <1>
  2171 00001C1B 000000000000000000- <1>
  2171 00001C24 000000000000000000- <1>
  2171 00001C2D 000000000000000000- <1>
  2171 00001C36 000000000000000000- <1>
  2171 00001C3F 000000000000000000- <1>
  2171 00001C48 000000000000000000- <1>
  2171 00001C51 000000000000000000- <1>
  2171 00001C5A 000000000000000000- <1>
  2171 00001C63 000000000000000000- <1>
  2171 00001C6C 000000000000000000- <1>
  2171 00001C75 000000000000000000- <1>
  2171 00001C7E 000000000000000000- <1>
  2171 00001C87 000000000000000000- <1>
  2171 00001C90 000000000000000000- <1>
  2171 00001C99 000000000000000000- <1>
  2171 00001CA2 000000000000000000- <1>
  2171 00001CAB 000000000000000000- <1>
  2171 00001CB4 000000000000000000- <1>
  2171 00001CBD 000000000000000000- <1>
  2171 00001CC6 000000000000000000- <1>
  2171 00001CCF 000000000000000000- <1>
  2171 00001CD8 000000000000000000- <1>
  2171 00001CE1 000000000000000000- <1>
  2171 00001CEA 000000000000000000- <1>
  2171 00001CF3 000000000000000000- <1>
  2171 00001CFC 000000000000000000- <1>
  2171 00001D05 000000000000000000- <1>
  2171 00001D0E 000000000000000000- <1>
  2171 00001D17 000000000000000000- <1>
  2171 00001D20 000000000000000000- <1>
  2171 00001D29 000000000000000000- <1>
  2171 00001D32 000000000000000000- <1>
  2171 00001D3B 000000000000000000- <1>
  2171 00001D44 000000000000000000- <1>
  2171 00001D4D 000000000000000000- <1>
  2171 00001D56 000000000000000000- <1>
  2171 00001D5F 000000000000000000- <1>
  2171 00001D68 000000000000000000- <1>
  2171 00001D71 000000000000000000- <1>
  2171 00001D7A 000000000000000000- <1>
  2171 00001D83 000000000000000000- <1>
  2171 00001D8C 000000000000000000- <1>
  2171 00001D95 000000000000000000- <1>
  2171 00001D9E 000000000000000000- <1>
  2171 00001DA7 000000000000000000- <1>
  2171 00001DB0 000000000000000000- <1>
  2171 00001DB9 000000000000000000- <1>
  2171 00001DC2 000000000000000000- <1>
  2171 00001DCB 000000000000000000- <1>
  2171 00001DD4 000000000000000000- <1>
  2171 00001DDD 000000000000000000- <1>
  2171 00001DE6 000000000000000000- <1>
  2171 00001DEF 000000000000000000- <1>
  2171 00001DF8 000000000000000000- <1>
  2171 00001E01 000000000000000000- <1>
  2171 00001E0A 000000000000000000- <1>
  2171 00001E13 000000000000000000- <1>
  2171 00001E1C 000000000000000000- <1>
  2171 00001E25 000000000000000000- <1>
  2171 00001E2E 000000000000000000- <1>
  2171 00001E37 000000000000000000- <1>
  2171 00001E40 000000000000000000- <1>
  2171 00001E49 000000000000000000- <1>
  2171 00001E52 000000000000000000- <1>
  2171 00001E5B 000000000000000000- <1>
  2171 00001E64 000000000000000000- <1>
  2171 00001E6D 000000000000000000- <1>
  2171 00001E76 000000000000000000- <1>
  2171 00001E7F 000000000000000000- <1>
  2171 00001E88 000000000000000000- <1>
  2171 00001E91 000000000000000000- <1>
  2171 00001E9A 000000000000000000- <1>
  2171 00001EA3 000000000000000000- <1>
  2171 00001EAC 000000000000000000- <1>
  2171 00001EB5 000000000000000000- <1>
  2171 00001EBE 000000000000000000- <1>
  2171 00001EC7 000000000000000000- <1>
  2171 00001ED0 000000000000000000- <1>
  2171 00001ED9 000000000000000000- <1>
  2171 00001EE2 000000000000000000- <1>
  2171 00001EEB 000000000000000000- <1>
  2171 00001EF4 000000000000000000- <1>
  2171 00001EFD 000000000000000000- <1>
  2171 00001F06 000000000000000000- <1>
  2171 00001F0F 000000000000000000- <1>
  2171 00001F18 000000000000000000- <1>
  2171 00001F21 000000000000000000- <1>
  2171 00001F2A 000000000000000000- <1>
  2171 00001F33 000000000000000000- <1>
  2171 00001F3C 000000000000000000- <1>
  2171 00001F45 000000000000000000- <1>
  2171 00001F4E 000000000000000000- <1>
  2171 00001F57 000000000000000000- <1>
  2171 00001F60 000000000000000000- <1>
  2171 00001F69 000000000000000000- <1>
  2171 00001F72 000000000000000000- <1>
  2171 00001F7B 000000000000000000- <1>
  2171 00001F84 000000000000000000- <1>
  2171 00001F8D 000000000000000000- <1>
  2171 00001F96 000000000000000000- <1>
  2171 00001F9F 000000000000000000- <1>
  2171 00001FA8 000000000000000000- <1>
  2171 00001FB1 000000000000000000- <1>
  2171 00001FBA 000000000000000000- <1>
  2171 00001FC3 000000000000000000- <1>
  2171 00001FCC 000000000000000000- <1>
  2171 00001FD5 000000000000000000- <1>
  2171 00001FDE 000000000000000000- <1>
  2171 00001FE7 000000000000000000- <1>
  2171 00001FF0 000000000000000000- <1>
  2171 00001FF9 000000000000000000- <1>
  2171 00002002 000000000000000000- <1>
  2171 0000200B 000000000000000000- <1>
  2171 00002014 000000000000000000- <1>
  2171 0000201D 000000000000000000- <1>
  2171 00002026 000000000000000000- <1>
  2171 0000202F 000000000000000000- <1>
  2171 00002038 000000000000000000- <1>
  2171 00002041 000000000000000000- <1>
  2171 0000204A 000000000000000000- <1>
  2171 00002053 000000000000000000- <1>
  2171 0000205C 000000000000000000- <1>
  2171 00002065 000000000000000000- <1>
  2171 0000206E 000000000000000000- <1>
  2171 00002077 000000000000000000- <1>
  2171 00002080 000000000000000000- <1>
  2171 00002089 000000000000000000- <1>
  2171 00002092 000000000000000000- <1>
  2171 0000209B 000000000000000000- <1>
  2171 000020A4 000000000000000000- <1>
  2171 000020AD 000000000000000000- <1>
  2171 000020B6 000000000000000000- <1>
  2171 000020BF 000000000000000000- <1>
  2171 000020C8 000000000000000000- <1>
  2171 000020D1 000000000000000000- <1>
  2171 000020DA 000000000000000000- <1>
  2171 000020E3 000000000000000000- <1>
  2171 000020EC 000000000000000000- <1>
  2171 000020F5 000000000000000000- <1>
  2171 000020FE 000000000000000000- <1>
  2171 00002107 000000000000000000- <1>
  2171 00002110 000000000000000000- <1>
  2171 00002119 000000000000000000- <1>
  2171 00002122 000000000000000000- <1>
  2171 0000212B 000000000000000000- <1>
  2171 00002134 000000000000000000- <1>
  2171 0000213D 000000000000000000- <1>
  2171 00002146 000000000000000000- <1>
  2171 0000214F 000000000000000000- <1>
  2171 00002158 000000000000000000- <1>
  2171 00002161 000000000000000000- <1>
  2171 0000216A 000000000000000000- <1>
  2171 00002173 000000000000000000- <1>
  2171 0000217C 000000000000000000- <1>
  2171 00002185 000000000000000000- <1>
  2171 0000218E 000000000000000000- <1>
  2171 00002197 000000000000000000- <1>
  2171 000021A0 000000000000000000- <1>
  2171 000021A9 000000000000000000- <1>
  2171 000021B2 000000000000000000- <1>
  2171 000021BB 000000000000000000- <1>
  2171 000021C4 000000000000000000- <1>
  2171 000021CD 000000000000000000- <1>
  2171 000021D6 000000000000000000- <1>
  2171 000021DF 000000000000000000- <1>
  2171 000021E8 000000000000000000- <1>
  2171 000021F1 000000000000000000- <1>
  2171 000021FA 000000000000000000- <1>
  2171 00002203 000000000000000000- <1>
  2171 0000220C 000000000000000000- <1>
  2171 00002215 000000000000000000- <1>
  2171 0000221E 000000000000000000- <1>
  2171 00002227 000000000000000000- <1>
  2171 00002230 000000000000000000- <1>
  2171 00002239 000000000000000000- <1>
  2171 00002242 000000000000000000- <1>
  2171 0000224B 000000000000000000- <1>
  2171 00002254 000000000000000000- <1>
  2171 0000225D 000000000000000000- <1>
  2171 00002266 000000000000000000- <1>
  2171 0000226F 000000000000000000- <1>
  2171 00002278 000000000000000000- <1>
  2171 00002281 000000000000000000- <1>
  2171 0000228A 000000000000000000- <1>
  2171 00002293 000000000000000000- <1>
  2171 0000229C 000000000000000000- <1>
  2171 000022A5 000000000000000000- <1>
  2171 000022AE 000000000000000000- <1>
  2171 000022B7 000000000000000000- <1>
  2171 000022C0 000000000000000000- <1>
  2171 000022C9 000000000000000000- <1>
  2171 000022D2 000000000000000000- <1>
  2171 000022DB 000000000000000000- <1>
  2171 000022E4 000000000000000000- <1>
  2171 000022ED 000000000000000000- <1>
  2171 000022F6 000000000000000000- <1>
  2171 000022FF 000000000000000000- <1>
  2171 00002308 000000000000000000- <1>
  2171 00002311 000000000000000000- <1>
  2171 0000231A 000000000000000000- <1>
  2171 00002323 000000000000000000- <1>
  2171 0000232C 000000000000000000- <1>
  2171 00002335 000000000000000000- <1>
  2171 0000233E 000000000000000000- <1>
  2171 00002347 000000000000000000- <1>
  2171 00002350 000000000000000000- <1>
  2171 00002359 000000000000000000- <1>
  2171 00002362 000000000000000000- <1>
  2171 0000236B 000000000000000000- <1>
  2171 00002374 000000000000000000- <1>
  2171 0000237D 000000000000000000- <1>
  2171 00002386 000000000000000000- <1>
  2171 0000238F 000000000000000000- <1>
  2171 00002398 000000000000000000- <1>
  2171 000023A1 000000000000000000- <1>
  2171 000023AA 000000000000000000- <1>
  2171 000023B3 000000000000000000- <1>
  2171 000023BC 000000000000000000- <1>
  2171 000023C5 000000000000000000- <1>
  2171 000023CE 000000000000000000- <1>
  2171 000023D7 000000000000000000- <1>
  2171 000023E0 00                  <1>
  2172                              <1> 
  2173                              <1> .drvBpbTbl:
  2174                              <1> ;Table of BPBs from FAh-FFh
  2175                              <1>     istruc bpb
  2176 000023E1 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2177 000023E3 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2178 000023E4 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2179 000023E6 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2180 000023E7 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2181 000023E9 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  2182 000023EB FA                  <1>         at .media,      db 0FAh ;Media descriptor byte
  2183 000023EC 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  2184 000023EE 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2185 000023F0 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  2186 000023F2 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2187 000023F6 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2188                              <1>     iend
  2189                              <1>     istruc bpb
  2190 000023FA 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2191 000023FC 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2192 000023FD 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2193 000023FF 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2194 00002400 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2195 00002402 0005                <1>         at .totSec16,   dw 1280 ;Number of sectors on medium
  2196 00002404 FB                  <1>         at .media,      db 0FBh ;Media descriptor byte
  2197 00002405 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  2198 00002407 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2199 00002409 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2200 0000240B 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2201 0000240F 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2202                              <1>     iend
  2203                              <1>     istruc bpb
  2204 00002413 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2205 00002415 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2206 00002416 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2207 00002418 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2208 00002419 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  2209 0000241B 6801                <1>         at .totSec16,   dw 360  ;Number of sectors on medium
  2210 0000241D FC                  <1>         at .media,      db 0FCh ;Media descriptor byte
  2211 0000241E 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  2212 00002420 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  2213 00002422 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  2214 00002424 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2215 00002428 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2216                              <1>     iend
  2217                              <1>     istruc bpb
  2218 0000242C 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2219 0000242E 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2220 0000242F 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2221 00002431 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2222 00002432 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2223 00002434 D002                <1>         at .totSec16,   dw 720  ;Number of sectors on medium
  2224 00002436 FD                  <1>         at .media,      db 0FDh ;Media descriptor byte
  2225 00002437 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  2226 00002439 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  2227 0000243B 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2228 0000243D 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2229 00002441 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2230                              <1>     iend
  2231                              <1>     istruc bpb
  2232 00002445 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2233 00002447 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2234 00002448 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2235 0000244A 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2236 0000244B 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  2237 0000244D 4001                <1>         at .totSec16,   dw 320  ;Number of sectors on medium
  2238 0000244F FE                  <1>         at .media,      db 0FEh ;Media descriptor byte
  2239 00002450 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  2240 00002452 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2241 00002454 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  2242 00002456 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2243 0000245A 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2244                              <1>     iend
  2245                              <1>     istruc bpb
  2246 0000245E 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2247 00002460 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2248 00002461 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2249 00002463 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2250 00002464 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2251 00002466 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  2252 00002468 FF                  <1>         at .media,      db 0FFh ;Media descriptor byte
  2253 00002469 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  2254 0000246B 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2255 0000246D 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2256 0000246F 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2257 00002473 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2258                              <1>     iend
  2259                              <1> .drvBpbTblF9:
  2260                              <1> ;Contains the special F9 BPBs
  2261                              <1>     istruc bpb  ;720Kb 3.5" floppies
  2262 00002477 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2263 00002479 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2264 0000247A 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2265 0000247C 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2266 0000247D 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2267 0000247F A005                <1>         at .totSec16,   dw 1440 ;Number of sectors on medium
  2268 00002481 F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  2269 00002482 0300                <1>         at .FATsz16,    dw 3    ;Number of sectors per FAT
  2270 00002484 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  2271 00002486 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2272 00002488 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2273 0000248C 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2274                              <1>     iend
  2275                              <1>     istruc bpb  ;1.2Mb 5.25" floppies
  2276 00002490 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2277 00002492 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2278 00002493 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2279 00002495 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2280 00002496 E000                <1>         at .rootEntCnt, dw 224  ;Number of 32 byte entries in Root directory
  2281 00002498 6009                <1>         at .totSec16,   dw 2400 ;Number of sectors on medium
  2282 0000249A F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  2283 0000249B 0700                <1>         at .FATsz16,    dw 7    ;Number of sectors per FAT
  2284 0000249D 0F00                <1>         at .secPerTrk,  dw 15   ;Number of sectors per "track"
  2285 0000249F 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2286 000024A1 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2287 000024A5 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2288                              <1>     iend
  2289                              <1> 
  2290                              <1> .drvBlkTbl:
  2291                              <1> ;All drives start with Sectors/Cluster as -1 to indicate not initialised.
  2292                              <1> ;All drives start with Media Descripter as 0 (invalid type)
  2293                              <1> ;All drives start with dAccTime at -1 to force "uncertain" read for remdevs
  2294                              <1> ;All drives present 63 Cylinders (only valid as a field on fixed disks)
  2295                              <1> ;All drives have as an alt BPB, a 1.44Mb 3.5" Floppy.
  2296                              <1>     %assign i 0
  2297                              <1>     %rep drvBlkTblL
  2298                              <1>     istruc drvBlk
  2299                              <1>         at .pLink,      dq -1   ;End of table marker
  2300                              <1>         at .bBIOSNum,   db i    ;DOS drive number
  2301                              <1>         at .bDOSNum,    db i    ;BIOS drives default to removable
  2302                              <1> ;Do a FAT12/16 BPB in FAT32 format
  2303                              <1>         at .wBpS,       dw 200h
  2304                              <1>         at .bSpC,       db -1       
  2305                              <1>         at .wResC,      dw 0001h
  2306                              <1>         at .bNumFAT,    db 02h
  2307                              <1>         at .wRtCntNum,  dw 00E0h    
  2308                              <1>         at .wTotSec16,  dw 0B40h    
  2309                              <1>         at .bMedDesc,   db 00h    
  2310                              <1>         at .wFATsz16,   dw 0009h    
  2311                              <1>         at .wSecPerTrk, dw 0012h    
  2312                              <1>         at .wNumHeads,  dw 0002h    
  2313                              <1>         at .dHiddSec,   dd 0    
  2314                              <1>         at .dTotSec32,  dd 0     
  2315                              <1> ;FAT 32 fields. All zeros
  2316                              <1>         at .FATsz32,    dd 0
  2317                              <1>         at .extFlags,   dw 0
  2318                              <1>         at .FSver,      dw 0
  2319                              <1>         at .RootClus,   dd 0
  2320                              <1>         at .FSinfo,     dw 0
  2321                              <1>         at .BkBootSec,  dw 0
  2322                              <1> ;DrvBlk Flags
  2323                              <1>         at .bBpbType,   db bpbFat12
  2324                              <1>         at .wOpenCnt,   dw 0
  2325                              <1>         at .bDevType,   db typeGenRem   ;Init to generic removable device
  2326                              <1>         at .wDevFlgs,   dw 0
  2327                              <1>         at .wNumCyl,    dw 63   
  2328                              <1>         istruc bpb32
  2329                              <1>             at .bytsPerSec, dw 200h
  2330                              <1>             at .secPerClus, db 01h
  2331                              <1>             at .revdSecCnt, dw 0001h
  2332                              <1>             at .numFATs,    db 02h    
  2333                              <1>             at .rootEntCnt, dw 00E0h    
  2334                              <1>             at .totSec16,   dw 0B40h    
  2335                              <1>             at .media,      db 0F0h    
  2336                              <1>             at .FATsz16,    dw 0009h    
  2337                              <1>             at .secPerTrk,  dw 0012h    
  2338                              <1>             at .numHeads,   dw 0002h    
  2339                              <1>             at .hiddSec,    dd 0    
  2340                              <1>             at .totSec32,   dd 0     
  2341                              <1>             at .FATsz32,    dd 0
  2342                              <1>             at .extFlags,   dw 0
  2343                              <1>             at .FSver,      dw 0
  2344                              <1>             at .RootClus,   dd 0
  2345                              <1>             at .FSinfo,     dw 0
  2346                              <1>             at .BkBootSec,  dw 0
  2347                              <1>             at .reserved,   db 12 dup (0) 
  2348                              <1>         iend
  2349                              <1>         at .dAccTime,   dd -1 
  2350                              <1>         at .volLab,     db "NO NAME    ",0
  2351                              <1>         at .volId,      dd 0    ;Vol ID of 0
  2352                              <1>         at .filSysType, db "FAT12   ",0
  2353                              <1>     iend
  2354                              <1>         %assign i i+1
  2355                              <1>     %endrep
  2298                              <2>  istruc drvBlk
  2299 000024A9 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 000024B1 00                  <2>  at .bBIOSNum, db i
  2301 000024B2 00                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 000024B3 0002                <2>  at .wBpS, dw 200h
  2304 000024B5 FF                  <2>  at .bSpC, db -1
  2305 000024B6 0100                <2>  at .wResC, dw 0001h
  2306 000024B8 02                  <2>  at .bNumFAT, db 02h
  2307 000024B9 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 000024BB 400B                <2>  at .wTotSec16, dw 0B40h
  2309 000024BD 00                  <2>  at .bMedDesc, db 00h
  2310 000024BE 0900                <2>  at .wFATsz16, dw 0009h
  2311 000024C0 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 000024C2 0200                <2>  at .wNumHeads, dw 0002h
  2313 000024C4 00000000            <2>  at .dHiddSec, dd 0
  2314 000024C8 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 000024CC 00000000            <2>  at .FATsz32, dd 0
  2317 000024D0 0000                <2>  at .extFlags, dw 0
  2318 000024D2 0000                <2>  at .FSver, dw 0
  2319 000024D4 00000000            <2>  at .RootClus, dd 0
  2320 000024D8 0000                <2>  at .FSinfo, dw 0
  2321 000024DA 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 000024DC 10                  <2>  at .bBpbType, db bpbFat12
  2324 000024DD 0000                <2>  at .wOpenCnt, dw 0
  2325 000024DF 07                  <2>  at .bDevType, db typeGenRem
  2326 000024E0 0000                <2>  at .wDevFlgs, dw 0
  2327 000024E2 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 000024E4 0002                <2>  at .bytsPerSec, dw 200h
  2330 000024E6 01                  <2>  at .secPerClus, db 01h
  2331 000024E7 0100                <2>  at .revdSecCnt, dw 0001h
  2332 000024E9 02                  <2>  at .numFATs, db 02h
  2333 000024EA E000                <2>  at .rootEntCnt, dw 00E0h
  2334 000024EC 400B                <2>  at .totSec16, dw 0B40h
  2335 000024EE F0                  <2>  at .media, db 0F0h
  2336 000024EF 0900                <2>  at .FATsz16, dw 0009h
  2337 000024F1 1200                <2>  at .secPerTrk, dw 0012h
  2338 000024F3 0200                <2>  at .numHeads, dw 0002h
  2339 000024F5 00000000            <2>  at .hiddSec, dd 0
  2340 000024F9 00000000            <2>  at .totSec32, dd 0
  2341 000024FD 00000000            <2>  at .FATsz32, dd 0
  2342 00002501 0000                <2>  at .extFlags, dw 0
  2343 00002503 0000                <2>  at .FSver, dw 0
  2344 00002505 00000000            <2>  at .RootClus, dd 0
  2345 00002509 0000                <2>  at .FSinfo, dw 0
  2346 0000250B 0000                <2>  at .BkBootSec, dw 0
  2347 0000250D 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002516 000000              <2>
  2348                              <2>  iend
  2349 00002519 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 0000251D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002526 202000              <2>
  2351 00002529 00000000            <2>  at .volId, dd 0
  2352 0000252D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002536 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 0000253E 01                  <2>  at .bBIOSNum, db i
  2301 0000253F 01                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002540 0002                <2>  at .wBpS, dw 200h
  2304 00002542 FF                  <2>  at .bSpC, db -1
  2305 00002543 0100                <2>  at .wResC, dw 0001h
  2306 00002545 02                  <2>  at .bNumFAT, db 02h
  2307 00002546 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002548 400B                <2>  at .wTotSec16, dw 0B40h
  2309 0000254A 00                  <2>  at .bMedDesc, db 00h
  2310 0000254B 0900                <2>  at .wFATsz16, dw 0009h
  2311 0000254D 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 0000254F 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002551 00000000            <2>  at .dHiddSec, dd 0
  2314 00002555 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002559 00000000            <2>  at .FATsz32, dd 0
  2317 0000255D 0000                <2>  at .extFlags, dw 0
  2318 0000255F 0000                <2>  at .FSver, dw 0
  2319 00002561 00000000            <2>  at .RootClus, dd 0
  2320 00002565 0000                <2>  at .FSinfo, dw 0
  2321 00002567 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002569 10                  <2>  at .bBpbType, db bpbFat12
  2324 0000256A 0000                <2>  at .wOpenCnt, dw 0
  2325 0000256C 07                  <2>  at .bDevType, db typeGenRem
  2326 0000256D 0000                <2>  at .wDevFlgs, dw 0
  2327 0000256F 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002571 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002573 01                  <2>  at .secPerClus, db 01h
  2331 00002574 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002576 02                  <2>  at .numFATs, db 02h
  2333 00002577 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002579 400B                <2>  at .totSec16, dw 0B40h
  2335 0000257B F0                  <2>  at .media, db 0F0h
  2336 0000257C 0900                <2>  at .FATsz16, dw 0009h
  2337 0000257E 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002580 0200                <2>  at .numHeads, dw 0002h
  2339 00002582 00000000            <2>  at .hiddSec, dd 0
  2340 00002586 00000000            <2>  at .totSec32, dd 0
  2341 0000258A 00000000            <2>  at .FATsz32, dd 0
  2342 0000258E 0000                <2>  at .extFlags, dw 0
  2343 00002590 0000                <2>  at .FSver, dw 0
  2344 00002592 00000000            <2>  at .RootClus, dd 0
  2345 00002596 0000                <2>  at .FSinfo, dw 0
  2346 00002598 0000                <2>  at .BkBootSec, dw 0
  2347 0000259A 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 000025A3 000000              <2>
  2348                              <2>  iend
  2349 000025A6 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 000025AA 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 000025B3 202000              <2>
  2351 000025B6 00000000            <2>  at .volId, dd 0
  2352 000025BA 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 000025C3 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 000025CB 02                  <2>  at .bBIOSNum, db i
  2301 000025CC 02                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 000025CD 0002                <2>  at .wBpS, dw 200h
  2304 000025CF FF                  <2>  at .bSpC, db -1
  2305 000025D0 0100                <2>  at .wResC, dw 0001h
  2306 000025D2 02                  <2>  at .bNumFAT, db 02h
  2307 000025D3 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 000025D5 400B                <2>  at .wTotSec16, dw 0B40h
  2309 000025D7 00                  <2>  at .bMedDesc, db 00h
  2310 000025D8 0900                <2>  at .wFATsz16, dw 0009h
  2311 000025DA 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 000025DC 0200                <2>  at .wNumHeads, dw 0002h
  2313 000025DE 00000000            <2>  at .dHiddSec, dd 0
  2314 000025E2 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 000025E6 00000000            <2>  at .FATsz32, dd 0
  2317 000025EA 0000                <2>  at .extFlags, dw 0
  2318 000025EC 0000                <2>  at .FSver, dw 0
  2319 000025EE 00000000            <2>  at .RootClus, dd 0
  2320 000025F2 0000                <2>  at .FSinfo, dw 0
  2321 000025F4 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 000025F6 10                  <2>  at .bBpbType, db bpbFat12
  2324 000025F7 0000                <2>  at .wOpenCnt, dw 0
  2325 000025F9 07                  <2>  at .bDevType, db typeGenRem
  2326 000025FA 0000                <2>  at .wDevFlgs, dw 0
  2327 000025FC 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 000025FE 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002600 01                  <2>  at .secPerClus, db 01h
  2331 00002601 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002603 02                  <2>  at .numFATs, db 02h
  2333 00002604 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002606 400B                <2>  at .totSec16, dw 0B40h
  2335 00002608 F0                  <2>  at .media, db 0F0h
  2336 00002609 0900                <2>  at .FATsz16, dw 0009h
  2337 0000260B 1200                <2>  at .secPerTrk, dw 0012h
  2338 0000260D 0200                <2>  at .numHeads, dw 0002h
  2339 0000260F 00000000            <2>  at .hiddSec, dd 0
  2340 00002613 00000000            <2>  at .totSec32, dd 0
  2341 00002617 00000000            <2>  at .FATsz32, dd 0
  2342 0000261B 0000                <2>  at .extFlags, dw 0
  2343 0000261D 0000                <2>  at .FSver, dw 0
  2344 0000261F 00000000            <2>  at .RootClus, dd 0
  2345 00002623 0000                <2>  at .FSinfo, dw 0
  2346 00002625 0000                <2>  at .BkBootSec, dw 0
  2347 00002627 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002630 000000              <2>
  2348                              <2>  iend
  2349 00002633 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002637 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002640 202000              <2>
  2351 00002643 00000000            <2>  at .volId, dd 0
  2352 00002647 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002650 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002658 03                  <2>  at .bBIOSNum, db i
  2301 00002659 03                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 0000265A 0002                <2>  at .wBpS, dw 200h
  2304 0000265C FF                  <2>  at .bSpC, db -1
  2305 0000265D 0100                <2>  at .wResC, dw 0001h
  2306 0000265F 02                  <2>  at .bNumFAT, db 02h
  2307 00002660 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002662 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002664 00                  <2>  at .bMedDesc, db 00h
  2310 00002665 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002667 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002669 0200                <2>  at .wNumHeads, dw 0002h
  2313 0000266B 00000000            <2>  at .dHiddSec, dd 0
  2314 0000266F 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002673 00000000            <2>  at .FATsz32, dd 0
  2317 00002677 0000                <2>  at .extFlags, dw 0
  2318 00002679 0000                <2>  at .FSver, dw 0
  2319 0000267B 00000000            <2>  at .RootClus, dd 0
  2320 0000267F 0000                <2>  at .FSinfo, dw 0
  2321 00002681 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002683 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002684 0000                <2>  at .wOpenCnt, dw 0
  2325 00002686 07                  <2>  at .bDevType, db typeGenRem
  2326 00002687 0000                <2>  at .wDevFlgs, dw 0
  2327 00002689 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 0000268B 0002                <2>  at .bytsPerSec, dw 200h
  2330 0000268D 01                  <2>  at .secPerClus, db 01h
  2331 0000268E 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002690 02                  <2>  at .numFATs, db 02h
  2333 00002691 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002693 400B                <2>  at .totSec16, dw 0B40h
  2335 00002695 F0                  <2>  at .media, db 0F0h
  2336 00002696 0900                <2>  at .FATsz16, dw 0009h
  2337 00002698 1200                <2>  at .secPerTrk, dw 0012h
  2338 0000269A 0200                <2>  at .numHeads, dw 0002h
  2339 0000269C 00000000            <2>  at .hiddSec, dd 0
  2340 000026A0 00000000            <2>  at .totSec32, dd 0
  2341 000026A4 00000000            <2>  at .FATsz32, dd 0
  2342 000026A8 0000                <2>  at .extFlags, dw 0
  2343 000026AA 0000                <2>  at .FSver, dw 0
  2344 000026AC 00000000            <2>  at .RootClus, dd 0
  2345 000026B0 0000                <2>  at .FSinfo, dw 0
  2346 000026B2 0000                <2>  at .BkBootSec, dw 0
  2347 000026B4 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 000026BD 000000              <2>
  2348                              <2>  iend
  2349 000026C0 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 000026C4 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 000026CD 202000              <2>
  2351 000026D0 00000000            <2>  at .volId, dd 0
  2352 000026D4 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 000026DD FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 000026E5 04                  <2>  at .bBIOSNum, db i
  2301 000026E6 04                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 000026E7 0002                <2>  at .wBpS, dw 200h
  2304 000026E9 FF                  <2>  at .bSpC, db -1
  2305 000026EA 0100                <2>  at .wResC, dw 0001h
  2306 000026EC 02                  <2>  at .bNumFAT, db 02h
  2307 000026ED E000                <2>  at .wRtCntNum, dw 00E0h
  2308 000026EF 400B                <2>  at .wTotSec16, dw 0B40h
  2309 000026F1 00                  <2>  at .bMedDesc, db 00h
  2310 000026F2 0900                <2>  at .wFATsz16, dw 0009h
  2311 000026F4 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 000026F6 0200                <2>  at .wNumHeads, dw 0002h
  2313 000026F8 00000000            <2>  at .dHiddSec, dd 0
  2314 000026FC 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002700 00000000            <2>  at .FATsz32, dd 0
  2317 00002704 0000                <2>  at .extFlags, dw 0
  2318 00002706 0000                <2>  at .FSver, dw 0
  2319 00002708 00000000            <2>  at .RootClus, dd 0
  2320 0000270C 0000                <2>  at .FSinfo, dw 0
  2321 0000270E 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002710 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002711 0000                <2>  at .wOpenCnt, dw 0
  2325 00002713 07                  <2>  at .bDevType, db typeGenRem
  2326 00002714 0000                <2>  at .wDevFlgs, dw 0
  2327 00002716 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002718 0002                <2>  at .bytsPerSec, dw 200h
  2330 0000271A 01                  <2>  at .secPerClus, db 01h
  2331 0000271B 0100                <2>  at .revdSecCnt, dw 0001h
  2332 0000271D 02                  <2>  at .numFATs, db 02h
  2333 0000271E E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002720 400B                <2>  at .totSec16, dw 0B40h
  2335 00002722 F0                  <2>  at .media, db 0F0h
  2336 00002723 0900                <2>  at .FATsz16, dw 0009h
  2337 00002725 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002727 0200                <2>  at .numHeads, dw 0002h
  2339 00002729 00000000            <2>  at .hiddSec, dd 0
  2340 0000272D 00000000            <2>  at .totSec32, dd 0
  2341 00002731 00000000            <2>  at .FATsz32, dd 0
  2342 00002735 0000                <2>  at .extFlags, dw 0
  2343 00002737 0000                <2>  at .FSver, dw 0
  2344 00002739 00000000            <2>  at .RootClus, dd 0
  2345 0000273D 0000                <2>  at .FSinfo, dw 0
  2346 0000273F 0000                <2>  at .BkBootSec, dw 0
  2347 00002741 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 0000274A 000000              <2>
  2348                              <2>  iend
  2349 0000274D FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002751 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 0000275A 202000              <2>
  2351 0000275D 00000000            <2>  at .volId, dd 0
  2352 00002761 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 0000276A FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002772 05                  <2>  at .bBIOSNum, db i
  2301 00002773 05                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002774 0002                <2>  at .wBpS, dw 200h
  2304 00002776 FF                  <2>  at .bSpC, db -1
  2305 00002777 0100                <2>  at .wResC, dw 0001h
  2306 00002779 02                  <2>  at .bNumFAT, db 02h
  2307 0000277A E000                <2>  at .wRtCntNum, dw 00E0h
  2308 0000277C 400B                <2>  at .wTotSec16, dw 0B40h
  2309 0000277E 00                  <2>  at .bMedDesc, db 00h
  2310 0000277F 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002781 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002783 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002785 00000000            <2>  at .dHiddSec, dd 0
  2314 00002789 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 0000278D 00000000            <2>  at .FATsz32, dd 0
  2317 00002791 0000                <2>  at .extFlags, dw 0
  2318 00002793 0000                <2>  at .FSver, dw 0
  2319 00002795 00000000            <2>  at .RootClus, dd 0
  2320 00002799 0000                <2>  at .FSinfo, dw 0
  2321 0000279B 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 0000279D 10                  <2>  at .bBpbType, db bpbFat12
  2324 0000279E 0000                <2>  at .wOpenCnt, dw 0
  2325 000027A0 07                  <2>  at .bDevType, db typeGenRem
  2326 000027A1 0000                <2>  at .wDevFlgs, dw 0
  2327 000027A3 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 000027A5 0002                <2>  at .bytsPerSec, dw 200h
  2330 000027A7 01                  <2>  at .secPerClus, db 01h
  2331 000027A8 0100                <2>  at .revdSecCnt, dw 0001h
  2332 000027AA 02                  <2>  at .numFATs, db 02h
  2333 000027AB E000                <2>  at .rootEntCnt, dw 00E0h
  2334 000027AD 400B                <2>  at .totSec16, dw 0B40h
  2335 000027AF F0                  <2>  at .media, db 0F0h
  2336 000027B0 0900                <2>  at .FATsz16, dw 0009h
  2337 000027B2 1200                <2>  at .secPerTrk, dw 0012h
  2338 000027B4 0200                <2>  at .numHeads, dw 0002h
  2339 000027B6 00000000            <2>  at .hiddSec, dd 0
  2340 000027BA 00000000            <2>  at .totSec32, dd 0
  2341 000027BE 00000000            <2>  at .FATsz32, dd 0
  2342 000027C2 0000                <2>  at .extFlags, dw 0
  2343 000027C4 0000                <2>  at .FSver, dw 0
  2344 000027C6 00000000            <2>  at .RootClus, dd 0
  2345 000027CA 0000                <2>  at .FSinfo, dw 0
  2346 000027CC 0000                <2>  at .BkBootSec, dw 0
  2347 000027CE 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 000027D7 000000              <2>
  2348                              <2>  iend
  2349 000027DA FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 000027DE 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 000027E7 202000              <2>
  2351 000027EA 00000000            <2>  at .volId, dd 0
  2352 000027EE 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 000027F7 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 000027FF 06                  <2>  at .bBIOSNum, db i
  2301 00002800 06                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002801 0002                <2>  at .wBpS, dw 200h
  2304 00002803 FF                  <2>  at .bSpC, db -1
  2305 00002804 0100                <2>  at .wResC, dw 0001h
  2306 00002806 02                  <2>  at .bNumFAT, db 02h
  2307 00002807 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002809 400B                <2>  at .wTotSec16, dw 0B40h
  2309 0000280B 00                  <2>  at .bMedDesc, db 00h
  2310 0000280C 0900                <2>  at .wFATsz16, dw 0009h
  2311 0000280E 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002810 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002812 00000000            <2>  at .dHiddSec, dd 0
  2314 00002816 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 0000281A 00000000            <2>  at .FATsz32, dd 0
  2317 0000281E 0000                <2>  at .extFlags, dw 0
  2318 00002820 0000                <2>  at .FSver, dw 0
  2319 00002822 00000000            <2>  at .RootClus, dd 0
  2320 00002826 0000                <2>  at .FSinfo, dw 0
  2321 00002828 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 0000282A 10                  <2>  at .bBpbType, db bpbFat12
  2324 0000282B 0000                <2>  at .wOpenCnt, dw 0
  2325 0000282D 07                  <2>  at .bDevType, db typeGenRem
  2326 0000282E 0000                <2>  at .wDevFlgs, dw 0
  2327 00002830 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002832 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002834 01                  <2>  at .secPerClus, db 01h
  2331 00002835 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002837 02                  <2>  at .numFATs, db 02h
  2333 00002838 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 0000283A 400B                <2>  at .totSec16, dw 0B40h
  2335 0000283C F0                  <2>  at .media, db 0F0h
  2336 0000283D 0900                <2>  at .FATsz16, dw 0009h
  2337 0000283F 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002841 0200                <2>  at .numHeads, dw 0002h
  2339 00002843 00000000            <2>  at .hiddSec, dd 0
  2340 00002847 00000000            <2>  at .totSec32, dd 0
  2341 0000284B 00000000            <2>  at .FATsz32, dd 0
  2342 0000284F 0000                <2>  at .extFlags, dw 0
  2343 00002851 0000                <2>  at .FSver, dw 0
  2344 00002853 00000000            <2>  at .RootClus, dd 0
  2345 00002857 0000                <2>  at .FSinfo, dw 0
  2346 00002859 0000                <2>  at .BkBootSec, dw 0
  2347 0000285B 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002864 000000              <2>
  2348                              <2>  iend
  2349 00002867 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 0000286B 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002874 202000              <2>
  2351 00002877 00000000            <2>  at .volId, dd 0
  2352 0000287B 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002884 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 0000288C 07                  <2>  at .bBIOSNum, db i
  2301 0000288D 07                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 0000288E 0002                <2>  at .wBpS, dw 200h
  2304 00002890 FF                  <2>  at .bSpC, db -1
  2305 00002891 0100                <2>  at .wResC, dw 0001h
  2306 00002893 02                  <2>  at .bNumFAT, db 02h
  2307 00002894 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002896 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002898 00                  <2>  at .bMedDesc, db 00h
  2310 00002899 0900                <2>  at .wFATsz16, dw 0009h
  2311 0000289B 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 0000289D 0200                <2>  at .wNumHeads, dw 0002h
  2313 0000289F 00000000            <2>  at .dHiddSec, dd 0
  2314 000028A3 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 000028A7 00000000            <2>  at .FATsz32, dd 0
  2317 000028AB 0000                <2>  at .extFlags, dw 0
  2318 000028AD 0000                <2>  at .FSver, dw 0
  2319 000028AF 00000000            <2>  at .RootClus, dd 0
  2320 000028B3 0000                <2>  at .FSinfo, dw 0
  2321 000028B5 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 000028B7 10                  <2>  at .bBpbType, db bpbFat12
  2324 000028B8 0000                <2>  at .wOpenCnt, dw 0
  2325 000028BA 07                  <2>  at .bDevType, db typeGenRem
  2326 000028BB 0000                <2>  at .wDevFlgs, dw 0
  2327 000028BD 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 000028BF 0002                <2>  at .bytsPerSec, dw 200h
  2330 000028C1 01                  <2>  at .secPerClus, db 01h
  2331 000028C2 0100                <2>  at .revdSecCnt, dw 0001h
  2332 000028C4 02                  <2>  at .numFATs, db 02h
  2333 000028C5 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 000028C7 400B                <2>  at .totSec16, dw 0B40h
  2335 000028C9 F0                  <2>  at .media, db 0F0h
  2336 000028CA 0900                <2>  at .FATsz16, dw 0009h
  2337 000028CC 1200                <2>  at .secPerTrk, dw 0012h
  2338 000028CE 0200                <2>  at .numHeads, dw 0002h
  2339 000028D0 00000000            <2>  at .hiddSec, dd 0
  2340 000028D4 00000000            <2>  at .totSec32, dd 0
  2341 000028D8 00000000            <2>  at .FATsz32, dd 0
  2342 000028DC 0000                <2>  at .extFlags, dw 0
  2343 000028DE 0000                <2>  at .FSver, dw 0
  2344 000028E0 00000000            <2>  at .RootClus, dd 0
  2345 000028E4 0000                <2>  at .FSinfo, dw 0
  2346 000028E6 0000                <2>  at .BkBootSec, dw 0
  2347 000028E8 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 000028F1 000000              <2>
  2348                              <2>  iend
  2349 000028F4 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 000028F8 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002901 202000              <2>
  2351 00002904 00000000            <2>  at .volId, dd 0
  2352 00002908 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002911 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002919 08                  <2>  at .bBIOSNum, db i
  2301 0000291A 08                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 0000291B 0002                <2>  at .wBpS, dw 200h
  2304 0000291D FF                  <2>  at .bSpC, db -1
  2305 0000291E 0100                <2>  at .wResC, dw 0001h
  2306 00002920 02                  <2>  at .bNumFAT, db 02h
  2307 00002921 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002923 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002925 00                  <2>  at .bMedDesc, db 00h
  2310 00002926 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002928 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 0000292A 0200                <2>  at .wNumHeads, dw 0002h
  2313 0000292C 00000000            <2>  at .dHiddSec, dd 0
  2314 00002930 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002934 00000000            <2>  at .FATsz32, dd 0
  2317 00002938 0000                <2>  at .extFlags, dw 0
  2318 0000293A 0000                <2>  at .FSver, dw 0
  2319 0000293C 00000000            <2>  at .RootClus, dd 0
  2320 00002940 0000                <2>  at .FSinfo, dw 0
  2321 00002942 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002944 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002945 0000                <2>  at .wOpenCnt, dw 0
  2325 00002947 07                  <2>  at .bDevType, db typeGenRem
  2326 00002948 0000                <2>  at .wDevFlgs, dw 0
  2327 0000294A 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 0000294C 0002                <2>  at .bytsPerSec, dw 200h
  2330 0000294E 01                  <2>  at .secPerClus, db 01h
  2331 0000294F 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002951 02                  <2>  at .numFATs, db 02h
  2333 00002952 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002954 400B                <2>  at .totSec16, dw 0B40h
  2335 00002956 F0                  <2>  at .media, db 0F0h
  2336 00002957 0900                <2>  at .FATsz16, dw 0009h
  2337 00002959 1200                <2>  at .secPerTrk, dw 0012h
  2338 0000295B 0200                <2>  at .numHeads, dw 0002h
  2339 0000295D 00000000            <2>  at .hiddSec, dd 0
  2340 00002961 00000000            <2>  at .totSec32, dd 0
  2341 00002965 00000000            <2>  at .FATsz32, dd 0
  2342 00002969 0000                <2>  at .extFlags, dw 0
  2343 0000296B 0000                <2>  at .FSver, dw 0
  2344 0000296D 00000000            <2>  at .RootClus, dd 0
  2345 00002971 0000                <2>  at .FSinfo, dw 0
  2346 00002973 0000                <2>  at .BkBootSec, dw 0
  2347 00002975 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 0000297E 000000              <2>
  2348                              <2>  iend
  2349 00002981 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002985 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 0000298E 202000              <2>
  2351 00002991 00000000            <2>  at .volId, dd 0
  2352 00002995 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 0000299E FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 000029A6 09                  <2>  at .bBIOSNum, db i
  2301 000029A7 09                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 000029A8 0002                <2>  at .wBpS, dw 200h
  2304 000029AA FF                  <2>  at .bSpC, db -1
  2305 000029AB 0100                <2>  at .wResC, dw 0001h
  2306 000029AD 02                  <2>  at .bNumFAT, db 02h
  2307 000029AE E000                <2>  at .wRtCntNum, dw 00E0h
  2308 000029B0 400B                <2>  at .wTotSec16, dw 0B40h
  2309 000029B2 00                  <2>  at .bMedDesc, db 00h
  2310 000029B3 0900                <2>  at .wFATsz16, dw 0009h
  2311 000029B5 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 000029B7 0200                <2>  at .wNumHeads, dw 0002h
  2313 000029B9 00000000            <2>  at .dHiddSec, dd 0
  2314 000029BD 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 000029C1 00000000            <2>  at .FATsz32, dd 0
  2317 000029C5 0000                <2>  at .extFlags, dw 0
  2318 000029C7 0000                <2>  at .FSver, dw 0
  2319 000029C9 00000000            <2>  at .RootClus, dd 0
  2320 000029CD 0000                <2>  at .FSinfo, dw 0
  2321 000029CF 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 000029D1 10                  <2>  at .bBpbType, db bpbFat12
  2324 000029D2 0000                <2>  at .wOpenCnt, dw 0
  2325 000029D4 07                  <2>  at .bDevType, db typeGenRem
  2326 000029D5 0000                <2>  at .wDevFlgs, dw 0
  2327 000029D7 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 000029D9 0002                <2>  at .bytsPerSec, dw 200h
  2330 000029DB 01                  <2>  at .secPerClus, db 01h
  2331 000029DC 0100                <2>  at .revdSecCnt, dw 0001h
  2332 000029DE 02                  <2>  at .numFATs, db 02h
  2333 000029DF E000                <2>  at .rootEntCnt, dw 00E0h
  2334 000029E1 400B                <2>  at .totSec16, dw 0B40h
  2335 000029E3 F0                  <2>  at .media, db 0F0h
  2336 000029E4 0900                <2>  at .FATsz16, dw 0009h
  2337 000029E6 1200                <2>  at .secPerTrk, dw 0012h
  2338 000029E8 0200                <2>  at .numHeads, dw 0002h
  2339 000029EA 00000000            <2>  at .hiddSec, dd 0
  2340 000029EE 00000000            <2>  at .totSec32, dd 0
  2341 000029F2 00000000            <2>  at .FATsz32, dd 0
  2342 000029F6 0000                <2>  at .extFlags, dw 0
  2343 000029F8 0000                <2>  at .FSver, dw 0
  2344 000029FA 00000000            <2>  at .RootClus, dd 0
  2345 000029FE 0000                <2>  at .FSinfo, dw 0
  2346 00002A00 0000                <2>  at .BkBootSec, dw 0
  2347 00002A02 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002A0B 000000              <2>
  2348                              <2>  iend
  2349 00002A0E FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002A12 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002A1B 202000              <2>
  2351 00002A1E 00000000            <2>  at .volId, dd 0
  2352 00002A22 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002A2B FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002A33 0A                  <2>  at .bBIOSNum, db i
  2301 00002A34 0A                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002A35 0002                <2>  at .wBpS, dw 200h
  2304 00002A37 FF                  <2>  at .bSpC, db -1
  2305 00002A38 0100                <2>  at .wResC, dw 0001h
  2306 00002A3A 02                  <2>  at .bNumFAT, db 02h
  2307 00002A3B E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002A3D 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002A3F 00                  <2>  at .bMedDesc, db 00h
  2310 00002A40 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002A42 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002A44 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002A46 00000000            <2>  at .dHiddSec, dd 0
  2314 00002A4A 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002A4E 00000000            <2>  at .FATsz32, dd 0
  2317 00002A52 0000                <2>  at .extFlags, dw 0
  2318 00002A54 0000                <2>  at .FSver, dw 0
  2319 00002A56 00000000            <2>  at .RootClus, dd 0
  2320 00002A5A 0000                <2>  at .FSinfo, dw 0
  2321 00002A5C 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002A5E 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002A5F 0000                <2>  at .wOpenCnt, dw 0
  2325 00002A61 07                  <2>  at .bDevType, db typeGenRem
  2326 00002A62 0000                <2>  at .wDevFlgs, dw 0
  2327 00002A64 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002A66 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002A68 01                  <2>  at .secPerClus, db 01h
  2331 00002A69 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002A6B 02                  <2>  at .numFATs, db 02h
  2333 00002A6C E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002A6E 400B                <2>  at .totSec16, dw 0B40h
  2335 00002A70 F0                  <2>  at .media, db 0F0h
  2336 00002A71 0900                <2>  at .FATsz16, dw 0009h
  2337 00002A73 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002A75 0200                <2>  at .numHeads, dw 0002h
  2339 00002A77 00000000            <2>  at .hiddSec, dd 0
  2340 00002A7B 00000000            <2>  at .totSec32, dd 0
  2341 00002A7F 00000000            <2>  at .FATsz32, dd 0
  2342 00002A83 0000                <2>  at .extFlags, dw 0
  2343 00002A85 0000                <2>  at .FSver, dw 0
  2344 00002A87 00000000            <2>  at .RootClus, dd 0
  2345 00002A8B 0000                <2>  at .FSinfo, dw 0
  2346 00002A8D 0000                <2>  at .BkBootSec, dw 0
  2347 00002A8F 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002A98 000000              <2>
  2348                              <2>  iend
  2349 00002A9B FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002A9F 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002AA8 202000              <2>
  2351 00002AAB 00000000            <2>  at .volId, dd 0
  2352 00002AAF 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002AB8 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002AC0 0B                  <2>  at .bBIOSNum, db i
  2301 00002AC1 0B                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002AC2 0002                <2>  at .wBpS, dw 200h
  2304 00002AC4 FF                  <2>  at .bSpC, db -1
  2305 00002AC5 0100                <2>  at .wResC, dw 0001h
  2306 00002AC7 02                  <2>  at .bNumFAT, db 02h
  2307 00002AC8 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002ACA 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002ACC 00                  <2>  at .bMedDesc, db 00h
  2310 00002ACD 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002ACF 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002AD1 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002AD3 00000000            <2>  at .dHiddSec, dd 0
  2314 00002AD7 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002ADB 00000000            <2>  at .FATsz32, dd 0
  2317 00002ADF 0000                <2>  at .extFlags, dw 0
  2318 00002AE1 0000                <2>  at .FSver, dw 0
  2319 00002AE3 00000000            <2>  at .RootClus, dd 0
  2320 00002AE7 0000                <2>  at .FSinfo, dw 0
  2321 00002AE9 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002AEB 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002AEC 0000                <2>  at .wOpenCnt, dw 0
  2325 00002AEE 07                  <2>  at .bDevType, db typeGenRem
  2326 00002AEF 0000                <2>  at .wDevFlgs, dw 0
  2327 00002AF1 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002AF3 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002AF5 01                  <2>  at .secPerClus, db 01h
  2331 00002AF6 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002AF8 02                  <2>  at .numFATs, db 02h
  2333 00002AF9 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002AFB 400B                <2>  at .totSec16, dw 0B40h
  2335 00002AFD F0                  <2>  at .media, db 0F0h
  2336 00002AFE 0900                <2>  at .FATsz16, dw 0009h
  2337 00002B00 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002B02 0200                <2>  at .numHeads, dw 0002h
  2339 00002B04 00000000            <2>  at .hiddSec, dd 0
  2340 00002B08 00000000            <2>  at .totSec32, dd 0
  2341 00002B0C 00000000            <2>  at .FATsz32, dd 0
  2342 00002B10 0000                <2>  at .extFlags, dw 0
  2343 00002B12 0000                <2>  at .FSver, dw 0
  2344 00002B14 00000000            <2>  at .RootClus, dd 0
  2345 00002B18 0000                <2>  at .FSinfo, dw 0
  2346 00002B1A 0000                <2>  at .BkBootSec, dw 0
  2347 00002B1C 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002B25 000000              <2>
  2348                              <2>  iend
  2349 00002B28 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002B2C 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002B35 202000              <2>
  2351 00002B38 00000000            <2>  at .volId, dd 0
  2352 00002B3C 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002B45 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002B4D 0C                  <2>  at .bBIOSNum, db i
  2301 00002B4E 0C                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002B4F 0002                <2>  at .wBpS, dw 200h
  2304 00002B51 FF                  <2>  at .bSpC, db -1
  2305 00002B52 0100                <2>  at .wResC, dw 0001h
  2306 00002B54 02                  <2>  at .bNumFAT, db 02h
  2307 00002B55 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002B57 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002B59 00                  <2>  at .bMedDesc, db 00h
  2310 00002B5A 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002B5C 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002B5E 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002B60 00000000            <2>  at .dHiddSec, dd 0
  2314 00002B64 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002B68 00000000            <2>  at .FATsz32, dd 0
  2317 00002B6C 0000                <2>  at .extFlags, dw 0
  2318 00002B6E 0000                <2>  at .FSver, dw 0
  2319 00002B70 00000000            <2>  at .RootClus, dd 0
  2320 00002B74 0000                <2>  at .FSinfo, dw 0
  2321 00002B76 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002B78 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002B79 0000                <2>  at .wOpenCnt, dw 0
  2325 00002B7B 07                  <2>  at .bDevType, db typeGenRem
  2326 00002B7C 0000                <2>  at .wDevFlgs, dw 0
  2327 00002B7E 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002B80 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002B82 01                  <2>  at .secPerClus, db 01h
  2331 00002B83 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002B85 02                  <2>  at .numFATs, db 02h
  2333 00002B86 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002B88 400B                <2>  at .totSec16, dw 0B40h
  2335 00002B8A F0                  <2>  at .media, db 0F0h
  2336 00002B8B 0900                <2>  at .FATsz16, dw 0009h
  2337 00002B8D 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002B8F 0200                <2>  at .numHeads, dw 0002h
  2339 00002B91 00000000            <2>  at .hiddSec, dd 0
  2340 00002B95 00000000            <2>  at .totSec32, dd 0
  2341 00002B99 00000000            <2>  at .FATsz32, dd 0
  2342 00002B9D 0000                <2>  at .extFlags, dw 0
  2343 00002B9F 0000                <2>  at .FSver, dw 0
  2344 00002BA1 00000000            <2>  at .RootClus, dd 0
  2345 00002BA5 0000                <2>  at .FSinfo, dw 0
  2346 00002BA7 0000                <2>  at .BkBootSec, dw 0
  2347 00002BA9 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002BB2 000000              <2>
  2348                              <2>  iend
  2349 00002BB5 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002BB9 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002BC2 202000              <2>
  2351 00002BC5 00000000            <2>  at .volId, dd 0
  2352 00002BC9 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002BD2 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002BDA 0D                  <2>  at .bBIOSNum, db i
  2301 00002BDB 0D                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002BDC 0002                <2>  at .wBpS, dw 200h
  2304 00002BDE FF                  <2>  at .bSpC, db -1
  2305 00002BDF 0100                <2>  at .wResC, dw 0001h
  2306 00002BE1 02                  <2>  at .bNumFAT, db 02h
  2307 00002BE2 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002BE4 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002BE6 00                  <2>  at .bMedDesc, db 00h
  2310 00002BE7 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002BE9 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002BEB 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002BED 00000000            <2>  at .dHiddSec, dd 0
  2314 00002BF1 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002BF5 00000000            <2>  at .FATsz32, dd 0
  2317 00002BF9 0000                <2>  at .extFlags, dw 0
  2318 00002BFB 0000                <2>  at .FSver, dw 0
  2319 00002BFD 00000000            <2>  at .RootClus, dd 0
  2320 00002C01 0000                <2>  at .FSinfo, dw 0
  2321 00002C03 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002C05 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002C06 0000                <2>  at .wOpenCnt, dw 0
  2325 00002C08 07                  <2>  at .bDevType, db typeGenRem
  2326 00002C09 0000                <2>  at .wDevFlgs, dw 0
  2327 00002C0B 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002C0D 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002C0F 01                  <2>  at .secPerClus, db 01h
  2331 00002C10 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002C12 02                  <2>  at .numFATs, db 02h
  2333 00002C13 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002C15 400B                <2>  at .totSec16, dw 0B40h
  2335 00002C17 F0                  <2>  at .media, db 0F0h
  2336 00002C18 0900                <2>  at .FATsz16, dw 0009h
  2337 00002C1A 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002C1C 0200                <2>  at .numHeads, dw 0002h
  2339 00002C1E 00000000            <2>  at .hiddSec, dd 0
  2340 00002C22 00000000            <2>  at .totSec32, dd 0
  2341 00002C26 00000000            <2>  at .FATsz32, dd 0
  2342 00002C2A 0000                <2>  at .extFlags, dw 0
  2343 00002C2C 0000                <2>  at .FSver, dw 0
  2344 00002C2E 00000000            <2>  at .RootClus, dd 0
  2345 00002C32 0000                <2>  at .FSinfo, dw 0
  2346 00002C34 0000                <2>  at .BkBootSec, dw 0
  2347 00002C36 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002C3F 000000              <2>
  2348                              <2>  iend
  2349 00002C42 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002C46 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002C4F 202000              <2>
  2351 00002C52 00000000            <2>  at .volId, dd 0
  2352 00002C56 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002C5F FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002C67 0E                  <2>  at .bBIOSNum, db i
  2301 00002C68 0E                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002C69 0002                <2>  at .wBpS, dw 200h
  2304 00002C6B FF                  <2>  at .bSpC, db -1
  2305 00002C6C 0100                <2>  at .wResC, dw 0001h
  2306 00002C6E 02                  <2>  at .bNumFAT, db 02h
  2307 00002C6F E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002C71 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002C73 00                  <2>  at .bMedDesc, db 00h
  2310 00002C74 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002C76 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002C78 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002C7A 00000000            <2>  at .dHiddSec, dd 0
  2314 00002C7E 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002C82 00000000            <2>  at .FATsz32, dd 0
  2317 00002C86 0000                <2>  at .extFlags, dw 0
  2318 00002C88 0000                <2>  at .FSver, dw 0
  2319 00002C8A 00000000            <2>  at .RootClus, dd 0
  2320 00002C8E 0000                <2>  at .FSinfo, dw 0
  2321 00002C90 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002C92 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002C93 0000                <2>  at .wOpenCnt, dw 0
  2325 00002C95 07                  <2>  at .bDevType, db typeGenRem
  2326 00002C96 0000                <2>  at .wDevFlgs, dw 0
  2327 00002C98 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002C9A 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002C9C 01                  <2>  at .secPerClus, db 01h
  2331 00002C9D 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002C9F 02                  <2>  at .numFATs, db 02h
  2333 00002CA0 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002CA2 400B                <2>  at .totSec16, dw 0B40h
  2335 00002CA4 F0                  <2>  at .media, db 0F0h
  2336 00002CA5 0900                <2>  at .FATsz16, dw 0009h
  2337 00002CA7 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002CA9 0200                <2>  at .numHeads, dw 0002h
  2339 00002CAB 00000000            <2>  at .hiddSec, dd 0
  2340 00002CAF 00000000            <2>  at .totSec32, dd 0
  2341 00002CB3 00000000            <2>  at .FATsz32, dd 0
  2342 00002CB7 0000                <2>  at .extFlags, dw 0
  2343 00002CB9 0000                <2>  at .FSver, dw 0
  2344 00002CBB 00000000            <2>  at .RootClus, dd 0
  2345 00002CBF 0000                <2>  at .FSinfo, dw 0
  2346 00002CC1 0000                <2>  at .BkBootSec, dw 0
  2347 00002CC3 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002CCC 000000              <2>
  2348                              <2>  iend
  2349 00002CCF FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002CD3 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002CDC 202000              <2>
  2351 00002CDF 00000000            <2>  at .volId, dd 0
  2352 00002CE3 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002CEC FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002CF4 0F                  <2>  at .bBIOSNum, db i
  2301 00002CF5 0F                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002CF6 0002                <2>  at .wBpS, dw 200h
  2304 00002CF8 FF                  <2>  at .bSpC, db -1
  2305 00002CF9 0100                <2>  at .wResC, dw 0001h
  2306 00002CFB 02                  <2>  at .bNumFAT, db 02h
  2307 00002CFC E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002CFE 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002D00 00                  <2>  at .bMedDesc, db 00h
  2310 00002D01 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002D03 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002D05 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002D07 00000000            <2>  at .dHiddSec, dd 0
  2314 00002D0B 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002D0F 00000000            <2>  at .FATsz32, dd 0
  2317 00002D13 0000                <2>  at .extFlags, dw 0
  2318 00002D15 0000                <2>  at .FSver, dw 0
  2319 00002D17 00000000            <2>  at .RootClus, dd 0
  2320 00002D1B 0000                <2>  at .FSinfo, dw 0
  2321 00002D1D 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002D1F 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002D20 0000                <2>  at .wOpenCnt, dw 0
  2325 00002D22 07                  <2>  at .bDevType, db typeGenRem
  2326 00002D23 0000                <2>  at .wDevFlgs, dw 0
  2327 00002D25 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002D27 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002D29 01                  <2>  at .secPerClus, db 01h
  2331 00002D2A 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002D2C 02                  <2>  at .numFATs, db 02h
  2333 00002D2D E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002D2F 400B                <2>  at .totSec16, dw 0B40h
  2335 00002D31 F0                  <2>  at .media, db 0F0h
  2336 00002D32 0900                <2>  at .FATsz16, dw 0009h
  2337 00002D34 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002D36 0200                <2>  at .numHeads, dw 0002h
  2339 00002D38 00000000            <2>  at .hiddSec, dd 0
  2340 00002D3C 00000000            <2>  at .totSec32, dd 0
  2341 00002D40 00000000            <2>  at .FATsz32, dd 0
  2342 00002D44 0000                <2>  at .extFlags, dw 0
  2343 00002D46 0000                <2>  at .FSver, dw 0
  2344 00002D48 00000000            <2>  at .RootClus, dd 0
  2345 00002D4C 0000                <2>  at .FSinfo, dw 0
  2346 00002D4E 0000                <2>  at .BkBootSec, dw 0
  2347 00002D50 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002D59 000000              <2>
  2348                              <2>  iend
  2349 00002D5C FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002D60 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002D69 202000              <2>
  2351 00002D6C 00000000            <2>  at .volId, dd 0
  2352 00002D70 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002D79 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002D81 10                  <2>  at .bBIOSNum, db i
  2301 00002D82 10                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002D83 0002                <2>  at .wBpS, dw 200h
  2304 00002D85 FF                  <2>  at .bSpC, db -1
  2305 00002D86 0100                <2>  at .wResC, dw 0001h
  2306 00002D88 02                  <2>  at .bNumFAT, db 02h
  2307 00002D89 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002D8B 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002D8D 00                  <2>  at .bMedDesc, db 00h
  2310 00002D8E 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002D90 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002D92 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002D94 00000000            <2>  at .dHiddSec, dd 0
  2314 00002D98 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002D9C 00000000            <2>  at .FATsz32, dd 0
  2317 00002DA0 0000                <2>  at .extFlags, dw 0
  2318 00002DA2 0000                <2>  at .FSver, dw 0
  2319 00002DA4 00000000            <2>  at .RootClus, dd 0
  2320 00002DA8 0000                <2>  at .FSinfo, dw 0
  2321 00002DAA 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002DAC 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002DAD 0000                <2>  at .wOpenCnt, dw 0
  2325 00002DAF 07                  <2>  at .bDevType, db typeGenRem
  2326 00002DB0 0000                <2>  at .wDevFlgs, dw 0
  2327 00002DB2 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002DB4 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002DB6 01                  <2>  at .secPerClus, db 01h
  2331 00002DB7 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002DB9 02                  <2>  at .numFATs, db 02h
  2333 00002DBA E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002DBC 400B                <2>  at .totSec16, dw 0B40h
  2335 00002DBE F0                  <2>  at .media, db 0F0h
  2336 00002DBF 0900                <2>  at .FATsz16, dw 0009h
  2337 00002DC1 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002DC3 0200                <2>  at .numHeads, dw 0002h
  2339 00002DC5 00000000            <2>  at .hiddSec, dd 0
  2340 00002DC9 00000000            <2>  at .totSec32, dd 0
  2341 00002DCD 00000000            <2>  at .FATsz32, dd 0
  2342 00002DD1 0000                <2>  at .extFlags, dw 0
  2343 00002DD3 0000                <2>  at .FSver, dw 0
  2344 00002DD5 00000000            <2>  at .RootClus, dd 0
  2345 00002DD9 0000                <2>  at .FSinfo, dw 0
  2346 00002DDB 0000                <2>  at .BkBootSec, dw 0
  2347 00002DDD 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002DE6 000000              <2>
  2348                              <2>  iend
  2349 00002DE9 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002DED 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002DF6 202000              <2>
  2351 00002DF9 00000000            <2>  at .volId, dd 0
  2352 00002DFD 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002E06 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002E0E 11                  <2>  at .bBIOSNum, db i
  2301 00002E0F 11                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002E10 0002                <2>  at .wBpS, dw 200h
  2304 00002E12 FF                  <2>  at .bSpC, db -1
  2305 00002E13 0100                <2>  at .wResC, dw 0001h
  2306 00002E15 02                  <2>  at .bNumFAT, db 02h
  2307 00002E16 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002E18 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002E1A 00                  <2>  at .bMedDesc, db 00h
  2310 00002E1B 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002E1D 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002E1F 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002E21 00000000            <2>  at .dHiddSec, dd 0
  2314 00002E25 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002E29 00000000            <2>  at .FATsz32, dd 0
  2317 00002E2D 0000                <2>  at .extFlags, dw 0
  2318 00002E2F 0000                <2>  at .FSver, dw 0
  2319 00002E31 00000000            <2>  at .RootClus, dd 0
  2320 00002E35 0000                <2>  at .FSinfo, dw 0
  2321 00002E37 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002E39 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002E3A 0000                <2>  at .wOpenCnt, dw 0
  2325 00002E3C 07                  <2>  at .bDevType, db typeGenRem
  2326 00002E3D 0000                <2>  at .wDevFlgs, dw 0
  2327 00002E3F 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002E41 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002E43 01                  <2>  at .secPerClus, db 01h
  2331 00002E44 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002E46 02                  <2>  at .numFATs, db 02h
  2333 00002E47 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002E49 400B                <2>  at .totSec16, dw 0B40h
  2335 00002E4B F0                  <2>  at .media, db 0F0h
  2336 00002E4C 0900                <2>  at .FATsz16, dw 0009h
  2337 00002E4E 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002E50 0200                <2>  at .numHeads, dw 0002h
  2339 00002E52 00000000            <2>  at .hiddSec, dd 0
  2340 00002E56 00000000            <2>  at .totSec32, dd 0
  2341 00002E5A 00000000            <2>  at .FATsz32, dd 0
  2342 00002E5E 0000                <2>  at .extFlags, dw 0
  2343 00002E60 0000                <2>  at .FSver, dw 0
  2344 00002E62 00000000            <2>  at .RootClus, dd 0
  2345 00002E66 0000                <2>  at .FSinfo, dw 0
  2346 00002E68 0000                <2>  at .BkBootSec, dw 0
  2347 00002E6A 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002E73 000000              <2>
  2348                              <2>  iend
  2349 00002E76 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002E7A 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002E83 202000              <2>
  2351 00002E86 00000000            <2>  at .volId, dd 0
  2352 00002E8A 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002E93 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002E9B 12                  <2>  at .bBIOSNum, db i
  2301 00002E9C 12                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002E9D 0002                <2>  at .wBpS, dw 200h
  2304 00002E9F FF                  <2>  at .bSpC, db -1
  2305 00002EA0 0100                <2>  at .wResC, dw 0001h
  2306 00002EA2 02                  <2>  at .bNumFAT, db 02h
  2307 00002EA3 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002EA5 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002EA7 00                  <2>  at .bMedDesc, db 00h
  2310 00002EA8 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002EAA 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002EAC 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002EAE 00000000            <2>  at .dHiddSec, dd 0
  2314 00002EB2 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002EB6 00000000            <2>  at .FATsz32, dd 0
  2317 00002EBA 0000                <2>  at .extFlags, dw 0
  2318 00002EBC 0000                <2>  at .FSver, dw 0
  2319 00002EBE 00000000            <2>  at .RootClus, dd 0
  2320 00002EC2 0000                <2>  at .FSinfo, dw 0
  2321 00002EC4 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002EC6 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002EC7 0000                <2>  at .wOpenCnt, dw 0
  2325 00002EC9 07                  <2>  at .bDevType, db typeGenRem
  2326 00002ECA 0000                <2>  at .wDevFlgs, dw 0
  2327 00002ECC 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002ECE 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002ED0 01                  <2>  at .secPerClus, db 01h
  2331 00002ED1 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002ED3 02                  <2>  at .numFATs, db 02h
  2333 00002ED4 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002ED6 400B                <2>  at .totSec16, dw 0B40h
  2335 00002ED8 F0                  <2>  at .media, db 0F0h
  2336 00002ED9 0900                <2>  at .FATsz16, dw 0009h
  2337 00002EDB 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002EDD 0200                <2>  at .numHeads, dw 0002h
  2339 00002EDF 00000000            <2>  at .hiddSec, dd 0
  2340 00002EE3 00000000            <2>  at .totSec32, dd 0
  2341 00002EE7 00000000            <2>  at .FATsz32, dd 0
  2342 00002EEB 0000                <2>  at .extFlags, dw 0
  2343 00002EED 0000                <2>  at .FSver, dw 0
  2344 00002EEF 00000000            <2>  at .RootClus, dd 0
  2345 00002EF3 0000                <2>  at .FSinfo, dw 0
  2346 00002EF5 0000                <2>  at .BkBootSec, dw 0
  2347 00002EF7 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002F00 000000              <2>
  2348                              <2>  iend
  2349 00002F03 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002F07 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002F10 202000              <2>
  2351 00002F13 00000000            <2>  at .volId, dd 0
  2352 00002F17 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002F20 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002F28 13                  <2>  at .bBIOSNum, db i
  2301 00002F29 13                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002F2A 0002                <2>  at .wBpS, dw 200h
  2304 00002F2C FF                  <2>  at .bSpC, db -1
  2305 00002F2D 0100                <2>  at .wResC, dw 0001h
  2306 00002F2F 02                  <2>  at .bNumFAT, db 02h
  2307 00002F30 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002F32 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002F34 00                  <2>  at .bMedDesc, db 00h
  2310 00002F35 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002F37 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002F39 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002F3B 00000000            <2>  at .dHiddSec, dd 0
  2314 00002F3F 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002F43 00000000            <2>  at .FATsz32, dd 0
  2317 00002F47 0000                <2>  at .extFlags, dw 0
  2318 00002F49 0000                <2>  at .FSver, dw 0
  2319 00002F4B 00000000            <2>  at .RootClus, dd 0
  2320 00002F4F 0000                <2>  at .FSinfo, dw 0
  2321 00002F51 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002F53 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002F54 0000                <2>  at .wOpenCnt, dw 0
  2325 00002F56 07                  <2>  at .bDevType, db typeGenRem
  2326 00002F57 0000                <2>  at .wDevFlgs, dw 0
  2327 00002F59 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002F5B 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002F5D 01                  <2>  at .secPerClus, db 01h
  2331 00002F5E 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002F60 02                  <2>  at .numFATs, db 02h
  2333 00002F61 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002F63 400B                <2>  at .totSec16, dw 0B40h
  2335 00002F65 F0                  <2>  at .media, db 0F0h
  2336 00002F66 0900                <2>  at .FATsz16, dw 0009h
  2337 00002F68 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002F6A 0200                <2>  at .numHeads, dw 0002h
  2339 00002F6C 00000000            <2>  at .hiddSec, dd 0
  2340 00002F70 00000000            <2>  at .totSec32, dd 0
  2341 00002F74 00000000            <2>  at .FATsz32, dd 0
  2342 00002F78 0000                <2>  at .extFlags, dw 0
  2343 00002F7A 0000                <2>  at .FSver, dw 0
  2344 00002F7C 00000000            <2>  at .RootClus, dd 0
  2345 00002F80 0000                <2>  at .FSinfo, dw 0
  2346 00002F82 0000                <2>  at .BkBootSec, dw 0
  2347 00002F84 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00002F8D 000000              <2>
  2348                              <2>  iend
  2349 00002F90 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00002F94 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00002F9D 202000              <2>
  2351 00002FA0 00000000            <2>  at .volId, dd 0
  2352 00002FA4 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00002FAD FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00002FB5 14                  <2>  at .bBIOSNum, db i
  2301 00002FB6 14                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00002FB7 0002                <2>  at .wBpS, dw 200h
  2304 00002FB9 FF                  <2>  at .bSpC, db -1
  2305 00002FBA 0100                <2>  at .wResC, dw 0001h
  2306 00002FBC 02                  <2>  at .bNumFAT, db 02h
  2307 00002FBD E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00002FBF 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00002FC1 00                  <2>  at .bMedDesc, db 00h
  2310 00002FC2 0900                <2>  at .wFATsz16, dw 0009h
  2311 00002FC4 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00002FC6 0200                <2>  at .wNumHeads, dw 0002h
  2313 00002FC8 00000000            <2>  at .dHiddSec, dd 0
  2314 00002FCC 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00002FD0 00000000            <2>  at .FATsz32, dd 0
  2317 00002FD4 0000                <2>  at .extFlags, dw 0
  2318 00002FD6 0000                <2>  at .FSver, dw 0
  2319 00002FD8 00000000            <2>  at .RootClus, dd 0
  2320 00002FDC 0000                <2>  at .FSinfo, dw 0
  2321 00002FDE 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00002FE0 10                  <2>  at .bBpbType, db bpbFat12
  2324 00002FE1 0000                <2>  at .wOpenCnt, dw 0
  2325 00002FE3 07                  <2>  at .bDevType, db typeGenRem
  2326 00002FE4 0000                <2>  at .wDevFlgs, dw 0
  2327 00002FE6 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00002FE8 0002                <2>  at .bytsPerSec, dw 200h
  2330 00002FEA 01                  <2>  at .secPerClus, db 01h
  2331 00002FEB 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00002FED 02                  <2>  at .numFATs, db 02h
  2333 00002FEE E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00002FF0 400B                <2>  at .totSec16, dw 0B40h
  2335 00002FF2 F0                  <2>  at .media, db 0F0h
  2336 00002FF3 0900                <2>  at .FATsz16, dw 0009h
  2337 00002FF5 1200                <2>  at .secPerTrk, dw 0012h
  2338 00002FF7 0200                <2>  at .numHeads, dw 0002h
  2339 00002FF9 00000000            <2>  at .hiddSec, dd 0
  2340 00002FFD 00000000            <2>  at .totSec32, dd 0
  2341 00003001 00000000            <2>  at .FATsz32, dd 0
  2342 00003005 0000                <2>  at .extFlags, dw 0
  2343 00003007 0000                <2>  at .FSver, dw 0
  2344 00003009 00000000            <2>  at .RootClus, dd 0
  2345 0000300D 0000                <2>  at .FSinfo, dw 0
  2346 0000300F 0000                <2>  at .BkBootSec, dw 0
  2347 00003011 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 0000301A 000000              <2>
  2348                              <2>  iend
  2349 0000301D FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00003021 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 0000302A 202000              <2>
  2351 0000302D 00000000            <2>  at .volId, dd 0
  2352 00003031 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 0000303A FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00003042 15                  <2>  at .bBIOSNum, db i
  2301 00003043 15                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00003044 0002                <2>  at .wBpS, dw 200h
  2304 00003046 FF                  <2>  at .bSpC, db -1
  2305 00003047 0100                <2>  at .wResC, dw 0001h
  2306 00003049 02                  <2>  at .bNumFAT, db 02h
  2307 0000304A E000                <2>  at .wRtCntNum, dw 00E0h
  2308 0000304C 400B                <2>  at .wTotSec16, dw 0B40h
  2309 0000304E 00                  <2>  at .bMedDesc, db 00h
  2310 0000304F 0900                <2>  at .wFATsz16, dw 0009h
  2311 00003051 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00003053 0200                <2>  at .wNumHeads, dw 0002h
  2313 00003055 00000000            <2>  at .dHiddSec, dd 0
  2314 00003059 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 0000305D 00000000            <2>  at .FATsz32, dd 0
  2317 00003061 0000                <2>  at .extFlags, dw 0
  2318 00003063 0000                <2>  at .FSver, dw 0
  2319 00003065 00000000            <2>  at .RootClus, dd 0
  2320 00003069 0000                <2>  at .FSinfo, dw 0
  2321 0000306B 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 0000306D 10                  <2>  at .bBpbType, db bpbFat12
  2324 0000306E 0000                <2>  at .wOpenCnt, dw 0
  2325 00003070 07                  <2>  at .bDevType, db typeGenRem
  2326 00003071 0000                <2>  at .wDevFlgs, dw 0
  2327 00003073 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00003075 0002                <2>  at .bytsPerSec, dw 200h
  2330 00003077 01                  <2>  at .secPerClus, db 01h
  2331 00003078 0100                <2>  at .revdSecCnt, dw 0001h
  2332 0000307A 02                  <2>  at .numFATs, db 02h
  2333 0000307B E000                <2>  at .rootEntCnt, dw 00E0h
  2334 0000307D 400B                <2>  at .totSec16, dw 0B40h
  2335 0000307F F0                  <2>  at .media, db 0F0h
  2336 00003080 0900                <2>  at .FATsz16, dw 0009h
  2337 00003082 1200                <2>  at .secPerTrk, dw 0012h
  2338 00003084 0200                <2>  at .numHeads, dw 0002h
  2339 00003086 00000000            <2>  at .hiddSec, dd 0
  2340 0000308A 00000000            <2>  at .totSec32, dd 0
  2341 0000308E 00000000            <2>  at .FATsz32, dd 0
  2342 00003092 0000                <2>  at .extFlags, dw 0
  2343 00003094 0000                <2>  at .FSver, dw 0
  2344 00003096 00000000            <2>  at .RootClus, dd 0
  2345 0000309A 0000                <2>  at .FSinfo, dw 0
  2346 0000309C 0000                <2>  at .BkBootSec, dw 0
  2347 0000309E 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 000030A7 000000              <2>
  2348                              <2>  iend
  2349 000030AA FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 000030AE 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 000030B7 202000              <2>
  2351 000030BA 00000000            <2>  at .volId, dd 0
  2352 000030BE 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 000030C7 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 000030CF 16                  <2>  at .bBIOSNum, db i
  2301 000030D0 16                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 000030D1 0002                <2>  at .wBpS, dw 200h
  2304 000030D3 FF                  <2>  at .bSpC, db -1
  2305 000030D4 0100                <2>  at .wResC, dw 0001h
  2306 000030D6 02                  <2>  at .bNumFAT, db 02h
  2307 000030D7 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 000030D9 400B                <2>  at .wTotSec16, dw 0B40h
  2309 000030DB 00                  <2>  at .bMedDesc, db 00h
  2310 000030DC 0900                <2>  at .wFATsz16, dw 0009h
  2311 000030DE 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 000030E0 0200                <2>  at .wNumHeads, dw 0002h
  2313 000030E2 00000000            <2>  at .dHiddSec, dd 0
  2314 000030E6 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 000030EA 00000000            <2>  at .FATsz32, dd 0
  2317 000030EE 0000                <2>  at .extFlags, dw 0
  2318 000030F0 0000                <2>  at .FSver, dw 0
  2319 000030F2 00000000            <2>  at .RootClus, dd 0
  2320 000030F6 0000                <2>  at .FSinfo, dw 0
  2321 000030F8 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 000030FA 10                  <2>  at .bBpbType, db bpbFat12
  2324 000030FB 0000                <2>  at .wOpenCnt, dw 0
  2325 000030FD 07                  <2>  at .bDevType, db typeGenRem
  2326 000030FE 0000                <2>  at .wDevFlgs, dw 0
  2327 00003100 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 00003102 0002                <2>  at .bytsPerSec, dw 200h
  2330 00003104 01                  <2>  at .secPerClus, db 01h
  2331 00003105 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00003107 02                  <2>  at .numFATs, db 02h
  2333 00003108 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 0000310A 400B                <2>  at .totSec16, dw 0B40h
  2335 0000310C F0                  <2>  at .media, db 0F0h
  2336 0000310D 0900                <2>  at .FATsz16, dw 0009h
  2337 0000310F 1200                <2>  at .secPerTrk, dw 0012h
  2338 00003111 0200                <2>  at .numHeads, dw 0002h
  2339 00003113 00000000            <2>  at .hiddSec, dd 0
  2340 00003117 00000000            <2>  at .totSec32, dd 0
  2341 0000311B 00000000            <2>  at .FATsz32, dd 0
  2342 0000311F 0000                <2>  at .extFlags, dw 0
  2343 00003121 0000                <2>  at .FSver, dw 0
  2344 00003123 00000000            <2>  at .RootClus, dd 0
  2345 00003127 0000                <2>  at .FSinfo, dw 0
  2346 00003129 0000                <2>  at .BkBootSec, dw 0
  2347 0000312B 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 00003134 000000              <2>
  2348                              <2>  iend
  2349 00003137 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 0000313B 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 00003144 202000              <2>
  2351 00003147 00000000            <2>  at .volId, dd 0
  2352 0000314B 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 00003154 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 0000315C 17                  <2>  at .bBIOSNum, db i
  2301 0000315D 17                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 0000315E 0002                <2>  at .wBpS, dw 200h
  2304 00003160 FF                  <2>  at .bSpC, db -1
  2305 00003161 0100                <2>  at .wResC, dw 0001h
  2306 00003163 02                  <2>  at .bNumFAT, db 02h
  2307 00003164 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00003166 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00003168 00                  <2>  at .bMedDesc, db 00h
  2310 00003169 0900                <2>  at .wFATsz16, dw 0009h
  2311 0000316B 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 0000316D 0200                <2>  at .wNumHeads, dw 0002h
  2313 0000316F 00000000            <2>  at .dHiddSec, dd 0
  2314 00003173 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00003177 00000000            <2>  at .FATsz32, dd 0
  2317 0000317B 0000                <2>  at .extFlags, dw 0
  2318 0000317D 0000                <2>  at .FSver, dw 0
  2319 0000317F 00000000            <2>  at .RootClus, dd 0
  2320 00003183 0000                <2>  at .FSinfo, dw 0
  2321 00003185 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00003187 10                  <2>  at .bBpbType, db bpbFat12
  2324 00003188 0000                <2>  at .wOpenCnt, dw 0
  2325 0000318A 07                  <2>  at .bDevType, db typeGenRem
  2326 0000318B 0000                <2>  at .wDevFlgs, dw 0
  2327 0000318D 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 0000318F 0002                <2>  at .bytsPerSec, dw 200h
  2330 00003191 01                  <2>  at .secPerClus, db 01h
  2331 00003192 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00003194 02                  <2>  at .numFATs, db 02h
  2333 00003195 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00003197 400B                <2>  at .totSec16, dw 0B40h
  2335 00003199 F0                  <2>  at .media, db 0F0h
  2336 0000319A 0900                <2>  at .FATsz16, dw 0009h
  2337 0000319C 1200                <2>  at .secPerTrk, dw 0012h
  2338 0000319E 0200                <2>  at .numHeads, dw 0002h
  2339 000031A0 00000000            <2>  at .hiddSec, dd 0
  2340 000031A4 00000000            <2>  at .totSec32, dd 0
  2341 000031A8 00000000            <2>  at .FATsz32, dd 0
  2342 000031AC 0000                <2>  at .extFlags, dw 0
  2343 000031AE 0000                <2>  at .FSver, dw 0
  2344 000031B0 00000000            <2>  at .RootClus, dd 0
  2345 000031B4 0000                <2>  at .FSinfo, dw 0
  2346 000031B6 0000                <2>  at .BkBootSec, dw 0
  2347 000031B8 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 000031C1 000000              <2>
  2348                              <2>  iend
  2349 000031C4 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 000031C8 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 000031D1 202000              <2>
  2351 000031D4 00000000            <2>  at .volId, dd 0
  2352 000031D8 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 000031E1 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 000031E9 18                  <2>  at .bBIOSNum, db i
  2301 000031EA 18                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 000031EB 0002                <2>  at .wBpS, dw 200h
  2304 000031ED FF                  <2>  at .bSpC, db -1
  2305 000031EE 0100                <2>  at .wResC, dw 0001h
  2306 000031F0 02                  <2>  at .bNumFAT, db 02h
  2307 000031F1 E000                <2>  at .wRtCntNum, dw 00E0h
  2308 000031F3 400B                <2>  at .wTotSec16, dw 0B40h
  2309 000031F5 00                  <2>  at .bMedDesc, db 00h
  2310 000031F6 0900                <2>  at .wFATsz16, dw 0009h
  2311 000031F8 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 000031FA 0200                <2>  at .wNumHeads, dw 0002h
  2313 000031FC 00000000            <2>  at .dHiddSec, dd 0
  2314 00003200 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00003204 00000000            <2>  at .FATsz32, dd 0
  2317 00003208 0000                <2>  at .extFlags, dw 0
  2318 0000320A 0000                <2>  at .FSver, dw 0
  2319 0000320C 00000000            <2>  at .RootClus, dd 0
  2320 00003210 0000                <2>  at .FSinfo, dw 0
  2321 00003212 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 00003214 10                  <2>  at .bBpbType, db bpbFat12
  2324 00003215 0000                <2>  at .wOpenCnt, dw 0
  2325 00003217 07                  <2>  at .bDevType, db typeGenRem
  2326 00003218 0000                <2>  at .wDevFlgs, dw 0
  2327 0000321A 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 0000321C 0002                <2>  at .bytsPerSec, dw 200h
  2330 0000321E 01                  <2>  at .secPerClus, db 01h
  2331 0000321F 0100                <2>  at .revdSecCnt, dw 0001h
  2332 00003221 02                  <2>  at .numFATs, db 02h
  2333 00003222 E000                <2>  at .rootEntCnt, dw 00E0h
  2334 00003224 400B                <2>  at .totSec16, dw 0B40h
  2335 00003226 F0                  <2>  at .media, db 0F0h
  2336 00003227 0900                <2>  at .FATsz16, dw 0009h
  2337 00003229 1200                <2>  at .secPerTrk, dw 0012h
  2338 0000322B 0200                <2>  at .numHeads, dw 0002h
  2339 0000322D 00000000            <2>  at .hiddSec, dd 0
  2340 00003231 00000000            <2>  at .totSec32, dd 0
  2341 00003235 00000000            <2>  at .FATsz32, dd 0
  2342 00003239 0000                <2>  at .extFlags, dw 0
  2343 0000323B 0000                <2>  at .FSver, dw 0
  2344 0000323D 00000000            <2>  at .RootClus, dd 0
  2345 00003241 0000                <2>  at .FSinfo, dw 0
  2346 00003243 0000                <2>  at .BkBootSec, dw 0
  2347 00003245 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 0000324E 000000              <2>
  2348                              <2>  iend
  2349 00003251 FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 00003255 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 0000325E 202000              <2>
  2351 00003261 00000000            <2>  at .volId, dd 0
  2352 00003265 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
  2298                              <2>  istruc drvBlk
  2299 0000326E FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2300 00003276 19                  <2>  at .bBIOSNum, db i
  2301 00003277 19                  <2>  at .bDOSNum, db i
  2302                              <2> 
  2303 00003278 0002                <2>  at .wBpS, dw 200h
  2304 0000327A FF                  <2>  at .bSpC, db -1
  2305 0000327B 0100                <2>  at .wResC, dw 0001h
  2306 0000327D 02                  <2>  at .bNumFAT, db 02h
  2307 0000327E E000                <2>  at .wRtCntNum, dw 00E0h
  2308 00003280 400B                <2>  at .wTotSec16, dw 0B40h
  2309 00003282 00                  <2>  at .bMedDesc, db 00h
  2310 00003283 0900                <2>  at .wFATsz16, dw 0009h
  2311 00003285 1200                <2>  at .wSecPerTrk, dw 0012h
  2312 00003287 0200                <2>  at .wNumHeads, dw 0002h
  2313 00003289 00000000            <2>  at .dHiddSec, dd 0
  2314 0000328D 00000000            <2>  at .dTotSec32, dd 0
  2315                              <2> 
  2316 00003291 00000000            <2>  at .FATsz32, dd 0
  2317 00003295 0000                <2>  at .extFlags, dw 0
  2318 00003297 0000                <2>  at .FSver, dw 0
  2319 00003299 00000000            <2>  at .RootClus, dd 0
  2320 0000329D 0000                <2>  at .FSinfo, dw 0
  2321 0000329F 0000                <2>  at .BkBootSec, dw 0
  2322                              <2> 
  2323 000032A1 10                  <2>  at .bBpbType, db bpbFat12
  2324 000032A2 0000                <2>  at .wOpenCnt, dw 0
  2325 000032A4 07                  <2>  at .bDevType, db typeGenRem
  2326 000032A5 0000                <2>  at .wDevFlgs, dw 0
  2327 000032A7 3F00                <2>  at .wNumCyl, dw 63
  2328                              <2>  istruc bpb32
  2329 000032A9 0002                <2>  at .bytsPerSec, dw 200h
  2330 000032AB 01                  <2>  at .secPerClus, db 01h
  2331 000032AC 0100                <2>  at .revdSecCnt, dw 0001h
  2332 000032AE 02                  <2>  at .numFATs, db 02h
  2333 000032AF E000                <2>  at .rootEntCnt, dw 00E0h
  2334 000032B1 400B                <2>  at .totSec16, dw 0B40h
  2335 000032B3 F0                  <2>  at .media, db 0F0h
  2336 000032B4 0900                <2>  at .FATsz16, dw 0009h
  2337 000032B6 1200                <2>  at .secPerTrk, dw 0012h
  2338 000032B8 0200                <2>  at .numHeads, dw 0002h
  2339 000032BA 00000000            <2>  at .hiddSec, dd 0
  2340 000032BE 00000000            <2>  at .totSec32, dd 0
  2341 000032C2 00000000            <2>  at .FATsz32, dd 0
  2342 000032C6 0000                <2>  at .extFlags, dw 0
  2343 000032C8 0000                <2>  at .FSver, dw 0
  2344 000032CA 00000000            <2>  at .RootClus, dd 0
  2345 000032CE 0000                <2>  at .FSinfo, dw 0
  2346 000032D0 0000                <2>  at .BkBootSec, dw 0
  2347 000032D2 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2347 000032DB 000000              <2>
  2348                              <2>  iend
  2349 000032DE FFFFFFFF            <2>  at .dAccTime, dd -1
  2350 000032E2 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2350 000032EB 202000              <2>
  2351 000032EE 00000000            <2>  at .volId, dd 0
  2352 000032F2 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2353                              <2>  iend
  2354                              <2>  %assign i i+1
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 000032FB 0F010D23000000      <1>     sidt [myIdt]
     8 00003302 0FB6C0              <1>     movzx eax, al
     9 00003305 4892                <1>     xchg rdx, rax
    10 00003307 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 0000330B 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00003312 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00003315 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00003319 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 0000331D 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00003321 894208              <1>     mov dword [rdx + 8], eax
    17 00003324 C3                  <1>     ret
    18                              <1> myIdt:
    19 00003325 0000                <1> .limit  dw 0
    20 00003327 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 0000332F 50                  <1>     push rax
    25 00003330 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00003331 51                  <1>     push rcx
    27 00003332 52                  <1>     push rdx
    28 00003333 488D1538CEFFFF      <1>     lea rdx, qword [fastOutput]
    29 0000333A B829000000          <1>     mov eax, 29h
    30 0000333F E8B7FFFFFF          <1>     call installInterrupt
    31 00003344 488D152FCEFFFF      <1>     lea rdx, qword [ctrlBreak]
    32 0000334B B83B000000          <1>     mov eax, 3Bh
    33 00003350 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00003355 B401                <1>     mov ah, 01      ;Get buffer status
    36 00003357 CD36                <1>     int 36h
    37 00003359 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 0000335B 30E4                <1>     xor ah, ah
    39 0000335D CD36                <1>     int 36h ;Read key to flush from buffer
    40 0000335F EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00003361 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00003366 CD30                <1>     int 30h
    44 00003368 B402                <1>     mov ah, 02h
    45 0000336A 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 0000336C 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 0000336E CD30                <1>     int 30h
    48 00003370 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00003372 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00003377 CD30                <1>     int 30h
    51 00003379 5A                  <1>     pop rdx
    52 0000337A 59                  <1>     pop rcx
    53 0000337B 5B                  <1>     pop rbx
    54 0000337C 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 0000337D 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 00003383 50                  <1>     push rax
    59 00003384 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 0000338B 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 0000338F 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 00003390 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 00003391 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 00003392 B402                <1>     mov ah, 02  ;Read RTC Time
    70 00003394 CD3A                <1>     int 3Ah
    71 00003396 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 00003398 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 0000339B E84D000000          <1>     call .bcd2Bin
    75 000033A0 88C5                <1>     mov ch, al
    76 000033A2 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 000033A5 E843000000          <1>     call .bcd2Bin
    78 000033AA 88C1                <1>     mov cl, al
    79 000033AC 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 000033AF E839000000          <1>     call .bcd2Bin
    81 000033B4 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 000033B6 89C2                <1>     mov edx, eax
    83 000033B8 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 000033BA CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 000033BC B404                <1>     mov ah, 04  ;Read RTC Date
    90 000033BE CD3A                <1>     int 3Ah
    91 000033C0 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 000033C2 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 000033C5 E823000000          <1>     call .bcd2Bin
    95 000033CA 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 000033CD 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 000033D3 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 000033D6 E812000000          <1>     call .bcd2Bin
    99 000033DB 88C6                <1>     mov dh, al  
   100 000033DD 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 000033E0 E808000000          <1>     call .bcd2Bin
   102 000033E5 88C2                <1>     mov dl, al
   103 000033E7 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 000033E9 CD21                <1>     int 21h
   105 000033EB EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 000033ED 51                  <1>     push rcx
   109 000033EE 89C1                <1>     mov ecx, eax
   110 000033F0 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 000033F5 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 000033FB 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 000033FE C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 00003401 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 00003403 FFC9                <1>     dec ecx
   117 00003405 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 00003407 59                  <1>     pop rcx
   120 00003408 C3                  <1>     ret
   121                              <1> .clkEnd:
   122 00003409 5B                  <1>     pop rbx ;Get the pointer back
   123 0000340A E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;Start by setting up the interrupt vectors!
   136 0000340F B839350000          <1>     mov eax, 3539h  ;Get original Int 39h
   137 00003414 CD21                <1>     int 21h
   138 00003416 48891DA1D0FFFF      <1>     mov qword [i39Org], rbx
   139 0000341D B839250000          <1>     mov eax, 2539h  ;Setup our handler
   140 00003422 488D15B5D0FFFF      <1>     lea rdx, dosInt39h
   141 00003429 CD21                <1>     int 21h
   142                              <1> 
   143 0000342B B833350000          <1>     mov eax, 3533h  ;Get original Int 33h
   144 00003430 CD21                <1>     int 21h
   145 00003432 48891D8DD0FFFF      <1>     mov qword [i33Org], rbx
   146 00003439 48891D96D0FFFF      <1>     mov qword [i33Next], rbx    ;This is also the low level handler
   147 00003440 B833250000          <1>     mov eax, 2533h  ;Setup our handler
   148 00003445 488D15B4D0FFFF      <1>     lea rdx, dosInt33h
   149 0000344C CD21                <1>     int 21h
   150                              <1> 
   151 0000344E B82F350000          <1>     mov eax, 352Fh  ;Get previous Int 2Fh handler
   152 00003453 CD21                <1>     int 21h
   153 00003455 48891D72D0FFFF      <1>     mov qword [i2FNext], rbx
   154 0000345C B82F250000          <1>     mov eax, 252Fh
   155 00003461 488D150BD1FFFF      <1>     lea rdx, i2fhSwap33h
   156 00003468 CD21                <1>     int 21h
   157                              <1> 
   158                              <1> 
   159                              <1> ;Then set up the link pointers to the load address of the 
   160                              <1> ; drive table.
   161 0000346A B919000000          <1>     mov ecx, drvBlkTblL - 1
   162 0000346F 488D2D33F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   163 00003476 4889EE              <1>     mov rsi, rbp
   164                              <1> .dskTblLp:
   165 00003479 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   166 0000347C 4881C68D000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   167 00003483 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   168 00003486 FFC9                <1>     dec ecx                 ;Decrement the count
   169 00003488 75EF                <1>     jnz .dskTblLp
   170 0000348A 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   171                              <1> ;Now get number of Int 33h information packed in r8
   172 00003491 CD31                <1>     int 31h
   173                              <1>     ;Returns:
   174                              <1>     ;r8[Byte 0] = Number of COM ports
   175                              <1>     ;r8[Byte 1] = Number of fixed disks
   176                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   177                              <1>     ;r8[Byte 3] = Number of Int 33h units
   178 00003493 4C890547DFFFFF      <1>     mov qword [msdDriver.inBuffer], r8   
   179 0000349A 0FB60543DFFFFF      <1>     movzx eax, byte [msdDriver.inBuffer + 3]
   180 000034A1 85C0                <1>     test eax, eax
   181 000034A3 0F84DA010000        <1>     jz .noDevs
   182 000034A9 0FB61D32DFFFFF      <1>     movzx ebx, byte [msdDriver.inBuffer + 1]
   183 000034B0 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   184 000034B2 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   185 000034B8 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   186 000034BE C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   187                              <1> ;Start by doing fixed disks.
   188 000034C5 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   189 000034C7 745D                <1>     jz .doRem
   190 000034C9 C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   191 000034D0 C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   192                              <1> .hdLp:
   193                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   194                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   195 000034D7 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   196 000034D9 E8A2030000          <1>     call .ptnUpdateBpb
   197 000034DE 7211                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   198                              <1> ;The odd case where there is a BPB on the hard disk :)
   199 000034E0 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   200 000034E4 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   201 000034EA E833030000          <1>     call .advDiskPtrs
   202 000034EF EB17                <1>     jmp short .fatDiskOk
   203                              <1> .mbrFnd:
   204 000034F1 751C                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   205                              <1> ;Now reread sector 0 (it might have been overwritten by a attempted FAT read)
   206 000034F3 E819D5FFFF          <1>     call msdDriver.bbpbReadBS
   207                              <1> ;Now we check if we have a valid MBR signature.
   208 000034F8 66813DDEE0FFFF55AA  <1>     cmp word [msdDriver.inBuffer + mbr.mbrSig], 0AA55h
   209 00003501 750C                <1>     jne .gotoNextDisk
   210 00003503 E89D010000          <1>     call .processMbr    ;This disk is done.
   211                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   212                              <1> .fatDiskOk:
   213                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   214 00003508 E80D030000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   215 0000350D 7417                <1>     je .doRem
   216                              <1> .gotoNextDisk:
   217 0000350F FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   218 00003515 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   219 0000351C 247F                <1>     and al, ~80h    ;Drop the upper bit
   220 0000351E 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   221 00003524 75B1                <1>     jne .hdLp
   222                              <1> ;------------------------------------------------
   223                              <1> ;   Here we start doing removable devices
   224                              <1> ;------------------------------------------------
   225                              <1> .doRem:
   226 00003526 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   227 0000352D 8805(01000000)      <1>     mov byte [fixPtn], al
   228 00003533 C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   229 0000353A C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   230 00003541 803D(02000000)00    <1>     cmp byte [remDrv], 0
   231 00003548 0F8426010000        <1>     je .noRems
   232                              <1> .remLp:
   233 0000354E 31C9                <1>     xor ecx, ecx        ;Load sector 0 of the disk
   234 00003550 E82B030000          <1>     call .ptnUpdateBpb  ;If can't get a BPB, its ok. Remdevs here :)
   235 00003555 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   236 00003559 B800880000          <1>     mov eax, 8800h      ;Get disk parameters for changeline status in eax
   237 0000355E CD33                <1>     int 33h
   238 00003560 7221                <1>     jc .remSkipDisk     ;If we cant query the drive, then we skip this.
   239 00003562 A910000000          <1>     test eax, 10h       ;Set if we have changeline support
   240 00003567 7406                <1>     jz .remNext
   241 00003569 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   242                              <1> .remNext:
   243 0000356F 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   244 00003575 E8A8020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   245 0000357A 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   246 00003581 742C                <1>     je .msdExit
   247                              <1> .remSkipDisk:
   248 00003583 FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   249 00003589 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   250 00003590 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   251 00003596 7417                <1>     je .msdExit
   252 00003598 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   253 0000359A 72B2                <1>     jb .remLp                   ;If not, do normal processing.
   254                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   255                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   256                              <1> ; to go past the letters assigned to the fixed disk.
   257 0000359C 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   258 000035A2 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   259 000035A4 8805(04000000)      <1>     mov byte [dosDrv], al
   260 000035AA E99FFFFFFF          <1>     jmp .remLp
   261                              <1> .msdExit:
   262 000035AF F605(00000000)FF    <1>     test byte [physVol], -1 ;Did we fail to initialise ANY devices?
   263 000035B6 0F84C7000000        <1>     jz .noDevs  ;If so, we pretend we have two drives and hope defaults work!
   264 000035BC F605(00000000)FF    <1>     test byte [physVol], -1
   265 000035C3 0F84AB000000        <1>     jz .noRems
   266 000035C9 803D(02000000)01    <1>     cmp byte [remDrv], 1
   267 000035D0 7539                <1>     jne .skipSingle
   268                              <1> ;Here we do the A: >-< B: jank.
   269                              <1> ;We know rbp points to what should the block for B:. The block for A:
   270                              <1> ; is right behind it.
   271                              <1> .doSingle:
   272 000035D2 4889EE              <1>     mov rsi, rbp
   273 000035D5 4881EE8D000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   274 000035DC 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   275                              <1> ;Now we transfer the BIOS number and set drive number to 1
   276 000035E2 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bBIOSNum]
   277 000035E6 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   278 000035E9 C6450901            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   279 000035ED 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   280 000035F1 4881C60A000000      <1>     add rsi, drvBlk.bpb
   281 000035F8 B983000000          <1>     mov ecx, (drvBlk_size - 10)  ;8 bytes Link ptr and 2 id bytes
   282 000035FD F3A4                <1>     rep movsb
   283 000035FF 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   284 00003605 FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   285                              <1> .skipSingle:
   286 0000360B 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   287 00003612 53                  <1>     push rbx    ;Save this count on the stack
   288 00003613 FFCB                <1>     dec ebx     ;Turn into an offset into the table
   289 00003615 B88D000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   290 0000361A F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   291 0000361C 488D3586EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   292 00003623 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   293 0000362B 488D1D(66000000)    <1>     lea rbx, bpbArray
   294                              <1> .buildBPBArrayLp:
   295 00003632 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   296 00003636 0FB64609            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   297 0000363A 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   298 0000363E 4889F7              <1>     mov rdi, rsi                            ;Save this ptr before walking
   299 00003641 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Now walk the table
   300 00003644 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   301 0000364B 75E5                <1>     jne .buildBPBArrayLp    ;No... keep going
   302 0000364D 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   303                              <1> ;
   304                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   305                              <1> ;
   306 00003650 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the request packet ptr back
   307                              <1> ;All previous drivers return the "worst case" eject pointer. Here we return
   308                              <1> ; the real eject pointer
   309 00003657 4881C78D000000      <1>     add rdi, drvBlk_size    ;Mov rdi past end of last drvBlk 2 first free byte
   310 0000365E 48897B0E            <1>     mov qword [rbx + initReqPkt.endptr], rdi    ;save as real eject point
   311 00003662 58                  <1>     pop rax         ;Get back the number of detected volumes
   312 00003663 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   313 00003666 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   314 0000366A 66C70589CFFFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   315                              <1>     return
    13                              <2> %%_ret:
    14 00003673 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> .noRems:
   317                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   318                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   319                              <1> ; we just did the first remdev. This drive gets registered as having
   320                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   321 00003674 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   322 00003678 FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   323                              <1> ;Here we setup A: drive to be a pretend 1.44Mb drive
   324 0000367E E94FFFFFFF          <1>     jmp .doSingle
   325                              <1> .noDevs:
   326                              <1> ;If we have no drives, then suppose we have two default drives
   327                              <1> ; A: and B: which are NOT the same!
   328 00003683 C605(00000000)02    <1>     mov byte [physVol], 2   ;Identify entries A and B of system Ok!
   329                              <1> ;Now set them as their own owners and not shared status.
   330 0000368A 488D3518EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl
   331 00003691 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   332 00003697 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]
   333 0000369A 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   334 000036A0 E966FFFFFF          <1>     jmp .skipSingle
   335                              <1> ;------------------------
   336                              <1> ; Procedures for init
   337                              <1> ;------------------------
   338                              <1> 
   339                              <1> .processMbr:
   340                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   341                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   342 000036A5 E8A4010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   343                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   344                              <1> ; ptn. We process it, invalidate the entry then start again
   345 000036AA 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   346 000036B1 7539                <1>     jne .pmbrNoHack
   347 000036B3 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   348 000036BA B904000000          <1>     mov ecx, 4
   349                              <1> .pmbrHackLp:
   350 000036BF 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   351 000036C2 740D                <1>     je .pmbrHackFnd
   352                              <1> .pmbrHackRet:
   353 000036C4 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   354 000036CB FFC9                <1>     dec ecx
   355 000036CD 75F0                <1>     jnz .pmbrHackLp
   356 000036CF EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   357                              <1> .pmbrHackFnd:
   358 000036D1 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   359 000036D5 E831020000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   360 000036DA 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   361 000036DC C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   362 000036E3 E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   363                              <1> ;Ignore any read errors, but we start again.
   364 000036E8 C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   365                              <1> ;Now we fall down and start again
   366                              <1> .pmbrNoHack:
   367 000036EC C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   368 000036F3 488D35(06000000)    <1>     lea rsi, mbrE
   369                              <1> .pmbrLp:
   370 000036FA 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   371 000036FD E817020000          <1>     call .checkMbrPtnType
   372 00003702 7551                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   373 00003704 E802020000          <1>     call .checkDataPtn
   374 00003709 740A                <1>     je .pmbrDodata
   375 0000370B E85E000000          <1>     call .processEPtn   ;Here we process EBR
   376                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003710 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003712 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   377 00003713 EB38                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   378                              <1> .pmbrDodata:
   379 00003715 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   380 00003718 E863010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   381 0000371D 730E                <1>     jnc .pmbrOk
   382                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000371F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003721 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   383                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   384 00003722 E8D6000000          <1>     call .getUfmtSize
   385 00003727 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   386                              <1> .pmbrOk:
   387 0000372D 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   388 00003733 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   389 00003737 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   390 0000373A 2580000000          <1>     and eax, ptnActive
   391 0000373F 0D01000000          <1>     or eax, ptnPrimary
   392 00003744 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   393 00003748 E8D5000000          <1>     call .advDiskPtrs
   394                              <1> .pmbrXtrejoin:
   395 0000374D E8C8000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   396                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003752 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003754 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   397                              <1> .pmbrNext:
   398 00003755 FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   399 0000375B 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   400                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003762 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003764 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   401 00003765 4881C610000000      <1>     add rsi, mbrEntry_size
   402 0000376C EB8C                <1>     jmp short .pmbrLp
   403                              <1> 
   404                              <1> .processEPtn:
   405                              <1> ;Process all logical process in an extended partition. rsi points to
   406                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   407                              <1> ;Thus we always know the "root" sector of this extended partition.
   408 0000376E 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   409                              <1> .peplp:
   410 00003771 E8F4000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   411                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003776 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003778 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   412 00003779 66813D5DDEFFFF55AA  <1>     cmp word [msdDriver.inBuffer + ebr.mbrSig], 0AA55h
   413 00003782 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   414 00003784 F9                  <1>     stc
   415                              <1>     return
    13                              <2> %%_ret:
    14 00003785 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> .pep1:
   417 00003786 E8B2000000          <1>     call .copyEbr       ;Save the EBR
   418                              <1> ;Now we check the saved EBR is valid.
   419 0000378B 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   420 00003792 E86C010000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   421 00003797 7551                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   422 00003799 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   423 000037A0 E866010000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   424 000037A5 7443                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   425                              <1> ;Now we get the absolute start sector of this partition.
   426 000037A7 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   427 000037AD E8CE000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB (preserves sector number)
   428 000037B2 730E                <1>     jnc .pepOk
   429                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000037B4 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000037B6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   430                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   431 000037B7 E841000000          <1>     call .getUfmtSize
   432 000037BC 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   433                              <1> .pepOk:
   434                              <1> ;If here, this partition will be given a CDS entry.
   435                              <1> ;Now we go to the next logical partition in the extended partition and
   436                              <1> ; move to the next drive
   437 000037C2 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   438 000037C8 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   439 000037CC 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   440 000037CF 2580000000          <1>     and eax, ptnActive
   441 000037D4 0D02000000          <1>     or eax, ptnLogical
   442 000037D9 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   443 000037DD E840000000          <1>     call .advDiskPtrs
   444 000037E2 E833000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   445                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000037E7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000037E9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   446                              <1> .pepNextEbr:
   447                              <1> ;Else we now walk the disk linked list.
   448 000037EA 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   449 000037F0 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   450                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000037F2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000037F4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   451 000037F5 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   452 000037F8 E974FFFFFF          <1>     jmp .peplp
   453                              <1> 
   454                              <1> .getUfmtSize:
   455                              <1> ;Moves the partition geometry information into drvBlk from MBR. This is only
   456                              <1> ; a necessity if the medium doesn't have a trustworthy BPB. Doesn't touch CHS 
   457                              <1> ; stuff because bleugh. That can be computed by FORMAT.
   458                              <1> ;
   459                              <1> ;This is done so that unformatted partitions are mounted by DOS. They cannot 
   460                              <1> ; be used, and so needs to be FORMATed. Thus, NumFAT=0 should only really 
   461                              <1> ; happen on hard drive partitions at boot.
   462                              <1> ;
   463                              <1> ;Input: rsi -> MBR/EBR entry for this partition
   464                              <1> ;       rbp -> drvBlk for this drive we are setting up
   465                              <1> ;       rcx = Sector number of the start of the partition
   466                              <1> ;
   467                              <1> ;Output: The following fields in the drvBlk are filled in
   468                              <1> ;       bNumFAT = Number of FATs on partition (0 as unformatted)
   469                              <1> ;       dHiddSec = Starting sector of the partition
   470                              <1> ;       dTotSec32 = 32 bit size of partition (if large enough)
   471                              <1> ;       wTotSec16 = 16 bit size of partition or 0 if 32 bit in use
   472 000037FD C6450F00            <1>     mov byte [rbp + drvBlk.bNumFAT], 0 ;Indicate no FATs on ufmt ptn.
   473 00003801 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx  ;Set start sector of partition
   474 00003804 8B4E0C              <1>     mov ecx, dword [rsi + mbrEntry.numSectors]
   475 00003807 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   476 0000380D 7605                <1>     jbe .gpgSmol
   477 0000380F 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   478 00003812 31C9                <1>     xor ecx, ecx
   479                              <1> .gpgSmol:
   480 00003814 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   481 00003818 F8                  <1>     clc
   482                              <1>     return
    13                              <2> %%_ret:
    14 00003819 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> .physCheckEnd:
   485 0000381A 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   486                              <1>     return
    13                              <2> %%_ret:
    14 00003821 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   487                              <1> 
   488                              <1> .advDiskPtrs:
   489 00003822 E88E000000          <1>     call .getNumCyl     ;Computes the number of cylinders in the BPB
   490 00003827 E8C1000000          <1>     call .xfrBkupBpb    ;Finish drvBlk init by transfering dfltBPB
   491 0000382C 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   492 00003830 FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   493 00003836 FE05(00000000)      <1>     inc byte [physVol]
   494                              <1>     return
    13                              <2> %%_ret:
    14 0000383C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> .copyEbr:
   497                              <1> ;Copies the EBR from the EBR sector in the buffer
   498 0000383D 51                  <1>     push rcx
   499 0000383E 56                  <1>     push rsi
   500 0000383F 57                  <1>     push rdi
   501 00003840 488D3D(06000000)    <1>     lea rdi, mbrE
   502 00003847 B920000000          <1>     mov ecx, 2*mbrEntry_size
   503 0000384C EB0F                <1>     jmp short .cpmbr
   504                              <1> .copyMbr:
   505                              <1> ;Copies the MBR from the MBR sector in the buffer
   506 0000384E 51                  <1>     push rcx
   507 0000384F 56                  <1>     push rsi
   508 00003850 57                  <1>     push rdi
   509 00003851 488D3D(06000000)    <1>     lea rdi, mbrE
   510 00003858 B940000000          <1>     mov ecx, 4*mbrEntry_size
   511                              <1> .cpmbr:
   512 0000385D 488D353BDDFFFF      <1>     lea rsi, qword [msdDriver.inBuffer + mbr.mbrEntry1]
   513 00003864 F3A4                <1>     rep movsb
   514 00003866 5F                  <1>     pop rdi
   515 00003867 5E                  <1>     pop rsi
   516 00003868 59                  <1>     pop rcx
   517                              <1>     return
    13                              <2> %%_ret:
    14 00003869 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> .readSector:
   520                              <1> ;Input: ecx = Sector to read
   521 0000386A 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   522 00003871 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   523 00003876 488D1D64DBFFFF      <1>     lea rbx, msdDriver.inBuffer
   524 0000387D CD33                <1>     int 33h
   525                              <1>     return
    13                              <2> %%_ret:
    14 0000387F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> .ptnUpdateBpb:
   528                              <1> ;Setups up the call for below on the current partition.
   529                              <1> ;Input: ecx = Number of hidden sectors (preserved)
   530                              <1> ;Output:
   531                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   532                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   533                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   534 00003880 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   535 00003886 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   536 00003889 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   537 00003890 884509              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   538 00003893 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   539 0000389A 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   540 0000389D 51                  <1>     push rcx
   541 0000389E 56                  <1>     push rsi    ;Save the mbr entry ptr
   542 0000389F E8B0CFFFFF          <1>     call msdDriver.updateBpb
   543 000038A4 7209                <1>     jc .pubBad
   544 000038A6 E8BFD0FFFF          <1>     call msdDriver.moveVolIds
   545 000038AB 5E                  <1>     pop rsi
   546 000038AC 59                  <1>     pop rcx
   547 000038AD F8                  <1>     clc         ;Always clean even if no ids
   548                              <1>     return
    13                              <2> %%_ret:
    14 000038AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .pubBad:
   550 000038AF 5E                  <1>     pop rsi
   551 000038B0 59                  <1>     pop rcx
   552 000038B1 3C07                <1>     cmp al, drvBadMed ;Bad Partition?
   553 000038B3 F9                  <1>     stc         ;Ensure we set the CF again
   554                              <1>     return
    13                              <2> %%_ret:
    14 000038B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> .getNumCyl:
   557                              <1> ;Computes the number of cylinders on the media. Not really to be used.
   558                              <1> ;Input: rbp -> drvBlk
   559 000038B5 50                  <1>     push rax
   560 000038B6 51                  <1>     push rcx
   561 000038B7 52                  <1>     push rdx
   562 000038B8 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
   563 000038BC 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
   564 000038C0 F7E1                <1>     mul ecx ;Get sectors per cylinder in eax. edx = 0
   565 000038C2 85C0                <1>     test eax, eax   ;If ax is 0, store zero! Phoney CHS data in BPB.
   566 000038C4 7414                <1>     jz .gncExit     ;This prevents CHS IOCTL from occuring.
   567 000038C6 89C1                <1>     mov ecx, eax    ;Save this number in ecx
   568 000038C8 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   569 000038CC 85C0                <1>     test eax, eax   ;If this is zero, get the 32 bit count of sectors
   570 000038CE 0F44451F            <1>     cmovz eax, dword [rbp + drvBlk.dTotSec32]
   571 000038D2 F7F1                <1>     div ecx     ;sectors/(sectors/cylinder) = whole cylinders in eax
   572 000038D4 85D2                <1>     test edx, edx
   573 000038D6 7402                <1>     jz .gncExit
   574 000038D8 FFC0                <1>     inc eax     ;Inc the cylinder count to account for not whole divide
   575                              <1> .gncExit:
   576 000038DA BAFFFF0000          <1>     mov edx, 0FFFFh   ;A default Max cylinder value, since CHS is for floppies.
   577 000038DF 39D0                <1>     cmp eax, edx
   578 000038E1 0F47C2              <1>     cmova eax, edx
   579 000038E4 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   580 000038E8 F8                  <1>     clc ;Ensure CF is clear
   581 000038E9 5A                  <1>     pop rdx
   582 000038EA 59                  <1>     pop rcx
   583 000038EB 58                  <1>     pop rax
   584                              <1>     return
    13                              <2> %%_ret:
    14 000038EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> .xfrBkupBpb:
   587                              <1> ;Makes a copy of the reported bpb in the drvBlk for formatting backups
   588 000038ED 51                  <1>     push rcx
   589 000038EE 56                  <1>     push rsi
   590 000038EF 57                  <1>     push rdi
   591 000038F0 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
   592 000038F4 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sBkupBPB]
   593 000038F8 B929000000          <1>     mov ecx, drvBlkBpb_size
   594 000038FD F3A4                <1>     rep movsb
   595 000038FF 5F                  <1>     pop rdi
   596 00003900 5E                  <1>     pop rsi
   597 00003901 59                  <1>     pop rcx
   598                              <1>     return
    13                              <2> %%_ret:
    14 00003902 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> .checkEbrPtnType:
   601                              <1> ;Input: al = Partition type
   602                              <1> ;Output: ZF=ZE => Valid partition type found
   603                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   604 00003903 E811000000          <1>     call .checkMbrPtnType
   605                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003908 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000390A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   606                              <1> .checkDataPtn:
   607 0000390B 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   608 0000390D 7407                <1>     je .ceptBad
   609 0000390F 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   610 00003911 7403                <1>     je .ceptBad
   611 00003913 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   612                              <1>     return
    13                              <2> %%_ret:
    14 00003915 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> .ceptBad:
   614 00003916 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   615                              <1>     return
    13                              <2> %%_ret:
    14 00003918 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> .checkMbrPtnType:
   618                              <1> ;Input: al = Partition type
   619                              <1> ;Output: ZF=ZE => Valid partition type found
   620                              <1> ;        ZF=NZ => Not a valid partition type
   621 00003919 51                  <1>     push rcx
   622 0000391A 57                  <1>     push rdi
   623 0000391B 488D3D0A000000      <1>     lea rdi, .ptnTbl
   624 00003922 B909000000          <1>     mov ecx, .ptnTblL
   625 00003927 F2AE                <1>     repne scasb ;Find the entry in al
   626 00003929 5F                  <1>     pop rdi
   627 0000392A 59                  <1>     pop rcx
   628                              <1>     return
    13                              <2> %%_ret:
    14 0000392B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> ;Table contents:
   631                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   632                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   633                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   634                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   635                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   636                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   637                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   638                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   639 0000392C 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   640                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [8C05000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqPktPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     5                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     6 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     7 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     8 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
     9 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    10 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    11 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    12 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    13 00000066 <res D0h>           <1> bpbArray    dq drvBlkTblL dup (?)
    38 00000136 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+4+2 passes

