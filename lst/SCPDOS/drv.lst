     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rets 0
    81                              <1> cret s
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retns 0
    85                              <1> cret ns
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvIOCTLQ    equ 80h ;If set, IOCTL Query supported (21h/4410h, 4411h)
    69                              <1>     devDrvOpClRem   equ 800h ;If set, Open, Close and Rem media supported
    70                              <1>     devDrvNotIBM    equ 2000h ;If set, media byte is meaningful for disk comps
    71                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    72                              <1>     devDrvIOCTLCtl  equ 4000h ;If set, IOCTL control strings supported
    73                              <1>     devDrvChar      equ 8000h ;If set, Char device
    74                              <1> ;Bit 0 1=Console input
    75                              <1> ;    1 1=Console output (character devices)
    76                              <1> ;    2 1=NUL device
    77                              <1> ;    3 1=CLOCK device
    78                              <1> ;    4 1=Int 29 output (CON)
    79                              <1> ;    6 1=Generic IOCTL and GET/SET logical drive supported (13,17,18) (3.2+)
    80                              <1> ;    7 1=Query IOCTL function supported (19) (5.0+)
    81                              <1> ;   11 1=Open/close/removable media supported (3.0+)
    82                              <1> ;   13 1=Output until busy supported (character devices) (3.0+)
    83                              <1> ;      1=Media descriptor in FAT required (block devices)
    84                              <1> ;   14 1=IOCTL read and write control strings supported
    85                              <1> ;   15 0=Block device
    86                              <1> ;      1=Character device
    87                              <1> 
    88                              <1> ;Driver structures
    89                              <1> 
    90                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    91                              <1> 
    92                              <1>     .hdrlen db ?  ;Length of the request header
    93                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    94                              <1>     .cmdcde db ?  ;Command code
    95                              <1>     .status dw ?  ;Status word
    96                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    97                              <1> 
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> struc drvReqPkt
   101                              <1>     drvReqPktM
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc initReqPkt  ;Init Request Packet
   105                              <1> 
   106                              <1>     drvReqPktM   ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   107 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   108 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   109 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   110 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   111                              <1> 
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   115                              <1> 
   116                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   117 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   118 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   119 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   120                              <1> 
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   124                              <1> 
   125                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   126 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   127 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   128 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   129                              <1> 
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc ioReqPkt   ;IO Request Packet
   133                              <1> 
   134                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   135 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   136 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   137 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   138 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   139 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   144                              <1>     
   145                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   146 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   147                              <1> 
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc statusReqPkt   ;Status Request Packet
   151                              <1> 
   152                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   153                              <1> 
   154                              <1> endstruc
   155                              <1> 
   156                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   157                              <1> 
   158                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   159                              <1>      
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc openReqPkt ;Open Device Request Packet
   163                              <1> 
   164                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   165                              <1>      
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc closeReqPkt ;Close Device Request Packet
   169                              <1> 
   170                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   171                              <1>      
   172                              <1> endstruc
   173                              <1> 
   174                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   175                              <1> 
   176                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   177                              <1>      
   178                              <1> endstruc
   179                              <1> 
   180                              <1> struc outTilBusyPkt
   181                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   182 0000000D ????????????????    <1>     .pXfrBuffer dq ?    ;Pointer to the transfer buffer
   183 00000015 ????                <1>     .wXfrCount  dw ?    ;Byte count to xfr. Returns bytes xfred.
   184                              <1> endstruc
   185                              <1> 
   186                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   187                              <1> 
   188                              <1>     drvReqPktM    ;Common Driver Header Macro  
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   189 0000000D ??                  <1>     .majfun db ?  ;Major function number
   190 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   191 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   192 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   193 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   194                              <1> 
   195                              <1> endstruc
   196                              <1> 
   197                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   198                              <1>     
   199                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   200                              <1> 
   201                              <1> endstruc
   202                              <1> 
   203                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   204                              <1>     
   205                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   206                              <1> 
   207                              <1> endstruc
   208                              <1> ;IOCTL structs
   209                              <1> 
   210                              <1> struc lbaParamsBlock
   211 00000000 ??                  <1>     .bSize          db ?
   212 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   213                              <1>                             ;1 = Get current saved drive info w/o updating
   214                              <1>                             ;2 = Get physical parameters of the medium
   215                              <1>                             ;Only meaningful on get. Set must have this as 0
   216 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   217 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   218                              <1>                             ; If one, can use CHS functions with returned vals
   219 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   220 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   221 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   222                              <1> ;The below is the absolute start sector of the partition. It is the 
   223                              <1> ; partition at which to find the BPB.
   224 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   225                              <1> endstruc
   226                              <1> 
   227                              <1> %macro lbIOCmnM 0   ;IOCTL LBA request common portion macro
   228                              <1>     .size           db ?
   229                              <1>     .numSectors     db ?  ;# sectors to act on. Returns sectors acted on
   230                              <1>     .res            db 6 dup (?)
   231                              <1>     .startSector    dq ?  ;Sector to start action on
   232                              <1> %endmacro
   233                              <1> 
   234                              <1> struc lbaIOBlock
   235                              <1>     lbIOCmnM
   228 00000000 ??                  <2>  .size db ?
   229 00000001 ??                  <2>  .numSectors db ?
   230 00000002 ????????????        <2>  .res db 6 dup (?)
   231 00000008 ????????????????    <2>  .startSector dq ?
   236 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   237                              <1> endstruc
   238                              <1> 
   239                              <1> struc lbaFormatBlock
   240                              <1>     lbIOCmnM
   228 00000000 ??                  <2>  .size db ?
   229 00000001 ??                  <2>  .numSectors db ?
   230 00000002 ????????????        <2>  .res db 6 dup (?)
   231 00000008 ????????????????    <2>  .startSector dq ?
   241                              <1> endstruc
   242                              <1> 
   243                              <1> struc chsParamsBlock
   244 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   245 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   246 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   247 00000004 ????                <1>     .wNumCyl    dw ?
   248 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   249 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   250                              <1>     .TrackLayout:
   251                              <1> endstruc
   252                              <1> 
   253                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   254                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   255                              <1> ;Only used in setparams requests. Ignored for getparams 
   256                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   257                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   258                              <1> 
   259                              <1> 
   260                              <1> struc chsIOBlock
   261 00000000 ??                  <1>     .bSpecFuncs     db ?
   262 00000001 ????                <1>     .wStartHead     dw ?
   263 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   264 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   265 00000007 ????                <1>     .wNumSectors    dw ?
   266 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   267                              <1> endstruc
   268                              <1> 
   269                              <1> struc chsFormatBlock
   270 00000000 ??                  <1>     .bSpecFuncs db ?
   271 00000001 ????                <1>     .wStartHead dw ?
   272 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   273                              <1> endstruc
   274                              <1> 
   275                              <1> struc accFlgBlk
   276 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   277 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   278                              <1> endstruc
   279                              <1> 
   280                              <1> struc idParamBlk
   281 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   282 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   283 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   284 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   285                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;File/path length equates.
     8                              <1> MAX_FNAME_FCB   equ 8
     9                              <1> MAX_EXT_FCB     equ 3
    10                              <1> MAX_NAME_FCB    equ MAX_FNAME_FCB + MAX_EXT_FCB
    11                              <1> MAX_NAME_FCBZ   equ MAX_NAME_FCB + 1    ;Space for a null terminator
    12                              <1> ;Values below include the null terminator.
    13                              <1> MAX_FILE    equ 13  ;Maximum length of a filename (includes dot)
    14                              <1> MAX_DRIVE   equ 3   ;Maximum length of a drive string (X:<NUL>)
    15                              <1> MAX_FSPEC   equ 64  ;Maximum length of a path to a file (filespec)
    16                              <1> MAX_PATH    equ 67  ;Maximum length of a fully qualified pathspec
    17                              <1> ;MAX_PATH is X:\<string, maxlen 63 chars>,<null> so 67 chars total.
    18                              <1> ;Use this symbol to check the length of a filename after qualification.
    19                              <1> MAX_PSPEC   equ MAX_PATH - MAX_FILE - 1 ;54 bytes
    20                              <1> ;MAX_PSPEC is the max length of a path with space for a filename!
    21                              <1> ;Remember, filenames for us are just a string of, at most, 13 characters,
    22                              <1> ; which we always resolve into FCB format. Buffers need to make space for
    23                              <1> ; both the dot and terminating null
    24                              <1> ;------------------------------------------------------------------------;
    25                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    26                              <1> ; its file system structure. This is used to locate files and structures
    27                              <1> ; on the device itself and to translate file requests to cluster chains
    28                              <1> ; to LBAs to pass to the disk driver..
    29                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    30                              <1> ; drivers Initialise routine has been called.
    31                              <1> ;------------------------------------------------------------------------;
    32                              <1> struc dpb        ;Drive Parameter Block
    33                              <1> 
    34 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    35 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    36 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    37 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    38 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    39 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    40 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    41 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    42 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    43 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    44 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    45 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    46                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    47 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    48 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    49 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    50 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    51 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    52 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    53                              <1> 
    54                              <1> endstruc
    55                              <1> 
    56                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    57                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    60                              <1> ; All disk pathing requests go via the CDS for that drive.
    61                              <1> ; The default drive is the last accessed drive, this number is stored
    62                              <1> ; in the DOS data area.
    63                              <1> ; The CDS is stored as an array with the offset into the array being 
    64                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    65                              <1> ;
    66                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    67                              <1> ;------------------------------------------------------------------------;
    68                              <1> struc cds       ;Current Directory structure
    69 00000000 <res 43h>           <1>     .sCurrentPath        db MAX_PATH dup (?)    ;Current Directory Path String
    70 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    71 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    72 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    73 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    74 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    75 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    76                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    77                              <1> ; another, we save the number of chars to skip to that deep level).
    78                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    79                              <1> ; Only affects for SUBST drives, not JOIN
    80                              <1> ; Flags: Bit 15 set = Network drive
    81                              <1> ;        Bit 14 set = Physical drive
    82                              <1> ;        Bit 13 set = JOIN'ed drive
    83                              <1> ;        Bit 12 set = SUBST'ed drive
    84                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    85                              <1> endstruc
    86                              <1> ;CDS equates
    87                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    88                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    89                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    90                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    91                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    92                              <1> ;------------------------------------------------------------------------;
    93                              <1> ; The SFT is a way to allow applications to open file handles to files 
    94                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    95                              <1> ; under the first header, and then a second header will be linked to the 
    96                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    97                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    98                              <1> ; using the FCBS= command. Default FCBS=5.
    99                              <1> ;
   100                              <1> ; A file handle describes the file, and the location within the file that
   101                              <1> ; we are reading. The file handle can be manipulated without the file
   102                              <1> ; being in memory, thus allowing the user to access data without needing 
   103                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   104                              <1> ; accessing devices, by treating them as files with their drivers 
   105                              <1> ; responding and translating the manipulations of the file handle itself.
   106                              <1> ; Neither the driver nor the application should see or use the SFT for
   107                              <1> ; the handle, as it is subject to change (and will change when file 
   108                              <1> ; sharing provisions are included). The DOS will make requests to the 
   109                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   110                              <1> ; track of the information in the SFT entry for that handle. 
   111                              <1> ;
   112                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   113                              <1> ; can point to the same file. It all depends on what the applications 
   114                              <1> ; want to do with the File.
   115                              <1> ;
   116                              <1> ; !!!!IMPORTANT!!!!
   117                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   118                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   119                              <1> ;
   120                              <1> ;Each SFT may look like this:
   121                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   122                              <1> ;            |                |
   123                              <1> ;       wNumFiles*sft    wNumFiles*sft
   124                              <1> ;
   125                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   126                              <1> ; System FCBs.
   127                              <1> ;
   128                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   129                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   130                              <1> ;
   131                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   132                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   133                              <1> ;------------------------------------------------------------------------;
   134                              <1> struc sfth   ;System file table header
   135                              <1> ; This is the SFT header.
   136                              <1> ; This structure comes before the start of the first file in the array/table.
   137 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   138 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   139                              <1> endstruc
   140                              <1> 
   141                              <1> struc sft
   142                              <1> ;This is the file struc itself
   143 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   144 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   145 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   146 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   147 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   148 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   149 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   150 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   151 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   152 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   153 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   154 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   155 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   156 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   157 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   158                              <1> ;                       Share Vars
   159 0000003B ????????????????    <1>     .pNextSFT   dq ?    ;Ptr to the next SFT for this file in the chain
   160 00000043 ????????            <1>     .dNetID     dd ?    ;Network ID of the machine (VM) that opened this file
   161 00000047 ????????????????    <1>     .qPID       dq ?    ;Proc ID (PSP) of the program which opened this file
   162 0000004F ????                <1>     .wMFTOffset dw ?    ;Offset to the MFT for this file. 0 means no MFT
   163                              <1> endstruc
   164                              <1> ;Open Mode equates
   165                              <1> ;Access modes   Bits[2:0]
   166                              <1> openRdAcc   equ 0h
   167                              <1> openWrAcc   equ 1h
   168                              <1> openRWAcc   equ 2h
   169                              <1> ;Bit 3 reserved 0
   170                              <1> ;Sharing modes  Bits[6:4]
   171                              <1> openCompat      equ 0h  ;Deny all, compatibility mode
   172                              <1> openDenRWShr    equ 10h ;Deny all, explicity read/write
   173                              <1> openDenWrShr    equ 20h ;Deny writes
   174                              <1> openDenRdShr    equ 30h ;Deny reads
   175                              <1> openDenNoShr    equ 40h ;Don't deny anything!
   176                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   177                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   178                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   179                              <1> openNetFCBShr   equ 70h
   180                              <1> openNoInherit   equ 80h
   181                              <1> 
   182                              <1> ;Bits 8-12 reserved 0
   183                              <1> ;The next two are extended open mode bits! 
   184                              <1> ;Can be set
   185                              <1> openFailOnI24   equ 2000h   ;If set, automatically FAIL all Int 24h
   186                              <1> openFlushWrites equ 4000h   ;If set, commit after each write call.
   187                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   188                              <1> openSFTFCB      equ 8000h   ;If set, file is SFT-FCB.
   189                              <1> 
   190                              <1> ;Attribute Byte
   191                              <1> attrFileRO          equ 1h
   192                              <1> attrFileHidden      equ 2h
   193                              <1> attrFileSys         equ 4h
   194                              <1> attrFileVolLbl      equ 8h
   195                              <1> attrFileDir         equ 10h ;Directory entry
   196                              <1> attrFileArchive     equ 20h
   197                              <1> attrFileChar        equ 40h ;Reserved, never found in dir
   198                              <1> 
   199                              <1> ;Device Info word equates
   200                              <1> ;For a block device, bits [5:0] contain the drive number
   201                              <1> devCharConIn    equ 1h  ;If set, device is CON input
   202                              <1> devCharConOut   equ 2h  ;If set, device is CON output
   203                              <1> devCharNulDev   equ 4h  ;If set, device is NULL device
   204                              <1> devCharClkDev   equ 8h  ;If set, device is CLOCK device
   205                              <1> 
   206                              <1> devCharFastOut  equ 10h ;If set, device supports INT 29h
   207                              <1> devCharBinary   equ 20h ;If set, r/w char device in Binary mode
   208                              <1> devCharNotEOF   equ 40h ;If set, device not yet at end of file
   209                              <1> devDiskNoFlush  equ 40h ;Set if file is synchronised with hard store!
   210                              <1> devCharDev      equ 80h ;If set, it is a char device!
   211                              <1> 
   212                              <1> devDiskI24onFull    equ 100h    ;If set, Int 24h on disk full or disk EOF
   213                              <1> devCharNetSpool equ 800h    ;If set, device is a network spooler
   214                              <1> 
   215                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   216                              <1> devCharNamePipe equ 2000h   ;If set, device is a named pipe
   217                              <1> devDiskNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   218                              <1> devRedir        equ 8000h   ;If set, dev/file is redirected!
   219                              <1> 
   220                              <1> ;Extended open flags. For the var [wEOFlags]
   221                              <1> ;These are not related to the SFT but are used during an extended open
   222                              <1> ; call to keep track of whats going on and thus help build an SFT.
   223                              <1> eoInExtOpen     equ 0001h   ;Doing Extended Open
   224                              <1> eoFailI24       equ 0002h   ;If EO file hard fails, skip and fail Int 24h
   225                              <1> eoFileNoExist   equ 0004h   ;File doesnt exist
   226                              <1> 
   227                              <1> ;Can combine the third option with one of the first two options.
   228                              <1> ;The first two options cannot be combined.
   229                              <1> ; - If only create is selected, then we try to do a create new. If the 
   230                              <1> ;       file exists, this fails with a "File exists" error.
   231                              <1> ;       Acts like a normal create new call. (21/5Bh)
   232                              <1> ;
   233                              <1> ; - If only open is selected then we try to do an open. If the file doesn't
   234                              <1> ;       doesn't exist, this fails with a "File not found" error.
   235                              <1> ;       Acts like a normal open call. (21/3Dh)
   236                              <1> ;
   237                              <1> ; - If only truncate is selected then we try to do a create. If the file
   238                              <1> ;       doesn't exist, this fails a "File not found" error.
   239                              <1> ;       New behaviour.
   240                              <1> ;
   241                              <1> ; - If open and create are selected then we try and open the file. If 
   242                              <1> ;       the open fails due to the file not existing, we create a new file. 
   243                              <1> ;       New behaviour.
   244                              <1> ;
   245                              <1> ; - If truncate and create are selected then we try to truncate the file. 
   246                              <1> ;       If the file doesnt exist then we create a new file instead.
   247                              <1> ;       Acts like a normal create call. (21/3Ch)
   248                              <1> 
   249                              <1> eoActOpen       equ 01h ;Open the file. 
   250                              <1> eoActTruncate   equ 02h ;Truncate an existing file.
   251                              <1> eoActCreate     equ 10h ;Create a file if one doesnt exist.
   252                              <1> ;Extended Open Action Return 
   253                              <1> eoRetActOpen    equ 1   ;Open existing
   254                              <1> eoRetActCreate  equ 2   ;Create new and open
   255                              <1> eoRetActTruncate    equ 3    ;Recreate and open
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   258                              <1> ; to an internal buffer, and then copying it to the specified location
   259                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   260                              <1> ; another request for the same sector from the same device is made, so 
   261                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   262                              <1> ; size, selected according to the largest detected sector size during 
   263                              <1> ; the initial loadup.
   264                              <1> ;
   265                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   266                              <1> ;
   267                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   268                              <1> ;------------------------------------------------------------------------;
   269                              <1> 
   270                              <1> struc bufferHdr
   271 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   272                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   273 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   274 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   275 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   276 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   277 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   278 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   279 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   280                              <1>     .dataarea:             ;Points to the start of the data area
   281                              <1> endstruc
   282                              <1> ;Buffer Flag equates
   283                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   284                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   285                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   286                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   287                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   288                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   289                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   290                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   291                              <1> ;------------------------------------------------------------------------;
   292                              <1> ; Memory control block for each memory arena
   293                              <1> ;------------------------------------------------------------------------;
   294                              <1> struc mcb
   295 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   296 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   297 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   298                              <1>     ;The following byte is reserved outside of sysinit
   299 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   300 0000000E ????                <1>     .reserved   db 2 dup (?) 
   301                              <1>     .program:
   302                              <1> endstruc
   303                              <1> ;MCB equates
   304                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   305                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   306                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   307                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   308                              <1> mcbMarkCtn      equ "M"
   309                              <1> mcbMarkEnd      equ "Z"
   310                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   311                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   312                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   313                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   314                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   315                              <1> mcbSubIFS       equ "I" ;Unused for now
   316                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   317                              <1> mcbSubFCBS      equ "X" ;Unused for now
   318                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   319                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   320                              <1> mcbSubStacks    equ "S" ;Unused for now
   321                              <1> 
   322                              <1> 
   323                              <1> memFirstFit     equ 0   ;First free block goes to application
   324                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   325                              <1> memLastFit      equ 2   ;Last free block goes to application
   326                              <1> 
   327                              <1> ;Owner = Para aligned address => Owning application PSP
   328                              <1> ;...To consider...
   329                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   330                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   331                              <1> ;------------------------------------------------------------------------;
   332                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   333                              <1> ; following order, thus allowing for return values to be placed in the 
   334                              <1> ; registers by accessing the caller register stack frame.
   335                              <1> ;------------------------------------------------------------------------;
   336                              <1> struc callerFrame
   337 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   338 00000008 ????????????????    <1>     .rbx    dq ?    
   339 00000010 ????????????????    <1>     .rcx    dq ?
   340 00000018 ????????????????    <1>     .rdx    dq ?
   341 00000020 ????????????????    <1>     .rsi    dq ?
   342 00000028 ????????????????    <1>     .rdi    dq ?
   343 00000030 ????????????????    <1>     .rbp    dq ?
   344 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   345 00000040 ????????????????    <1>     .r9     dq ?
   346                              <1> ;Pushed by Processor when invoked via Interrupt
   347 00000048 ????????????????    <1>     .rip    dq ?
   348 00000050 ????????????????    <1>     .cs     dq ?
   349 00000058 ????????????????    <1>     .flags  dq ?
   350                              <1> endstruc
   351                              <1> 
   352                              <1> struc dpl
   353                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   354                              <1> ; server calls
   355 00000000 ????????????????    <1>     .rax    dq ?
   356 00000008 ????????????????    <1>     .rbx    dq ?
   357 00000010 ????????????????    <1>     .rcx    dq ?
   358 00000018 ????????????????    <1>     .rdx    dq ?
   359 00000020 ????????????????    <1>     .rsi    dq ?
   360 00000028 ????????????????    <1>     .rdi    dq ?
   361 00000030 ????????????????    <1>     .r8     dq ?
   362 00000038 ????????????????    <1>     .r9     dq ?
   363 00000040 ????????????????    <1>     .align  dq ?
   364 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   365 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   366                              <1> endstruc
   367                              <1> 
   368                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   369 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   370 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   371 00000010 ????????????????    <1>     .newSFTVal      dq ?
   372 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   373 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   374 00000028 ????????????????    <1>     .newLastdrive   dq ?
   375 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   376 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   377 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   378 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   379 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   380 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   381 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   382                              <1> endstruc
   383                              <1> 
   384                              <1> struc filename
   385                              <1> ;8.3 File name struct
   386 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   387 00000008 ??????              <1>     .fExt   db 3 dup (?)
   388                              <1> endstruc
   389                              <1> 
   390                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   391 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   392 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   393 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   394 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   395 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   396 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   397 00000016 ????                <1>     .fileTime   dw ?  ;File time
   398 00000018 ????                <1>     .fileDate   dw ?  ;File date
   399 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   400 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   401                              <1> endstruc
   402                              <1> 
   403                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   404                              <1> struc psp
   405 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   406 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   407 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   408 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   409 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   410 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   411 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   412                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   413                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   414                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   415                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   416                              <1> ; always used and jftSize.
   417                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   418 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   419 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   420 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   421 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   422 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   423 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   424 0000005B ??                  <1>                 db ?  ;Reserved byte
   425                              <1> ;The below are in the same place as in DOS.
   426                              <1>     .cmdLineArgPtr: ;Symbol for future use
   427 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   428 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   429                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   430 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   431 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   432                              <1> endstruc
   433                              <1> 
   434                              <1> struc clkStruc
   435 00000000 ????                <1>     .dateWord   dw ?
   436 00000002 ??                  <1>     .minutes    db ?
   437 00000003 ??                  <1>     .hours      db ?
   438 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   439 00000005 ??                  <1>     .seconds    db ?
   440                              <1> endstruc
   441                              <1> 
   442                              <1> 
   443                              <1> struc extCtryStruc
   444 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   445 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   446 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   447 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   448 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   449                              <1>                         ;0 = month day year hh:mm:ss
   450                              <1>                         ;1 = day month year hh:mm:ss
   451                              <1>                         ;2 = year month day hh:mm:ss
   452 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   453 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   454 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   455 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   456 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   457 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   458                              <1>                         ;0 = Symbol leads, without space
   459                              <1>                         ;1 = Symbol follows, without space
   460                              <1>                         ;2 = Symbol leads, one space
   461                              <1>                         ;3 = Symbol follows, one space
   462                              <1>                         ;4 = Symbol replace decimal separator
   463 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   464 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   465 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   466 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   467 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   468                              <1> endstruc
   469                              <1> 
   470                              <1> struc countryStruc
   471 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   472                              <1>                         ;0 = month day year hh:mm:ss
   473                              <1>                         ;1 = day month year hh:mm:ss
   474                              <1>                         ;2 = year month day hh:mm:ss
   475 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   476 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   477 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   478 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   479 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   480 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   481                              <1>                         ;0 = Symbol leads, without space
   482                              <1>                         ;1 = Symbol follows, without space
   483                              <1>                         ;2 = Symbol leads, one space
   484                              <1>                         ;3 = Symbol follows, one space
   485                              <1>                         ;4 = Symbol replace decimal separator
   486 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   487 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   488 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   489 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   490 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   491                              <1> endstruc
   492                              <1> 
   493                              <1> ;Critical Error AH bitfield equates
   494                              <1> critRead    equ 0h
   495                              <1> critWrite   equ 1h
   496                              <1> critDOS     equ 0h
   497                              <1> critFAT     equ 2h
   498                              <1> critDir     equ 4h
   499                              <1> critData    equ 6h
   500                              <1> critFailOK  equ 8h
   501                              <1> critRetryOK equ 10h
   502                              <1> critIgnorOK equ 20h
   503                              <1> critCharDev equ 80h
   504                              <1> 
   505                              <1> critIgnore  equ 0
   506                              <1> critRetry   equ 1
   507                              <1> critAbort   equ 2
   508                              <1> critFail    equ 3
   509                              <1> 
   510                              <1> ;MISC ASCII control chars
   511                              <1> NUL equ 00h ;^@         | ASCII Null
   512                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   513                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   514                              <1> BEL equ 07h ;^G         | ASCII Bell
   515                              <1> BSP equ 08h ;^H         | ASCII Backspace
   516                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   517                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   518                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   519                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   520                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   521                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   522                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   523                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   524                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   525                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   526                              <1> SPC equ 20h ;Printable  | ASCII Space
   527                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   528                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   529                              <1> 
   530                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   531                              <1> ;Extended Ascii Codes
   532                              <1> eF1     equ 3Bh ;F1 second byte
   533                              <1> eF2     equ 3Ch ;F2 second byte
   534                              <1> eF3     equ 3Dh ;F3 second byte
   535                              <1> eF4     equ 3Eh ;F4 second byte
   536                              <1> eF5     equ 3Fh ;F5 second byte
   537                              <1> eF6     equ 40h ;F6 second byte
   538                              <1> eF7     equ 41h ;F7 second byte
   539                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   540                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   541                              <1> eIns    equ 52h ;Insert second byte
   542                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   543                              <1> 
   544                              <1> ;Default Configuration for the system
   545                              <1> 
   546                              <1> buffersDefault  equ 30
   547                              <1> filesDefault    equ 20
   548                              <1> fcbsDefault     equ 4
   549                              <1> safeFcbsDeflt   equ 0
   550                              <1> lastDriveDeflt  equ 5   
   551                              <1> 
   552                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   553                              <1> ; then the char has this property.
   554                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   555                              <1> termChar    equ 2   ;Terminator char type
   556                              <1> sepChar     equ 4   ;Separator char type
   557                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> ;The next two errors occur because an redir handle has the bit set to do this.
    46                              <1> ;We do not move the SFT in either case so that one can safely examine the
    47                              <1> ; state of the system before the call was made. In the second case,
    48                              <1> ; the user should do a 0 byte write at filesize before anything else to truncate
    49                              <1> ; any pre-allocated clusters.
    50                              <1> errHdlEOF   equ 38  ;Handle will EOF if read proceeds or at EOF. 
    51                              <1> errDskFul   equ 39  ;Disk will fill up if write proceeds or full. 
    52                              <1> 
    53                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    54                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI24     equ 83  ;Fail on Int 24h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error Classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
     1                              <1> ;No externally defined symbols, no internally exposed symbols.
     2                              <1> 
     3                              <1> ;Driver internal equates
     4                              <1> drvBlkTblL      equ 26  ;Space for 26 drive letters!
     5                              <1> ;IOCTL track table size (max number of sectors in a track is 63)
     6                              <1> maxTrackTblSz   equ 63
     7                              <1> maxAcc          equ 5   ;Maximum accesses to a remdev w/o timer/changeline
     8                              <1> 
     9                              <1> struc drvBlk
    10                              <1> ;--------------------------------------------------------------------
    11                              <1> ; Drvblk Header information
    12                              <1> ;--------------------------------------------------------------------
    13 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    14 00000008 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    15 00000009 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    16                              <1> ;--------------------------------------------------------------------
    17                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    18                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    19                              <1> ;  left in those fields... not a problem)
    20                              <1> ;--------------------------------------------------------------------
    21                              <1> .bpb:
    22 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    23 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    24 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    25 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    26 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    27 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
    28 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
    29 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
    30 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
    31 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
    32 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
    33 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
    34                              <1> ;--------------------------------------------------------------------
    35                              <1> ; The below vars are only accessed on FAT32 volumes
    36                              <1> ;--------------------------------------------------------------------
    37 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
    38 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
    39 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
    40 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
    41 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
    42 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
    43                              <1> .endBpb:
    44                              <1> ;--------------------------------------------------------------------
    45                              <1> ; DrvBlk flags
    46                              <1> ;--------------------------------------------------------------------
    47 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
    48 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
    49 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
    50 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
    51                              <1> ;The below word is a legacy thing. It is only used in a CHS based IOCTL call.
    52 00000039 ????                <1>     .wNumCyl    dw ?
    53 0000003B <res 35h>           <1>     .sBkupBPB   db bpb32_size dup (?)   ;Backup of BPB used during format
    54                              <1> .dAccTime:          ;Last media check time if remdev
    55 00000070 ????????            <1>     .wPtnType   dd ?    
    56                              <1> ;--------------------------------------------------------------------
    57                              <1> ; Volume string and id for the drive described by this drvblk
    58                              <1> ;--------------------------------------------------------------------
    59 00000074 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
    60 0000007F ??                  <1>                 db ?            ;Null terminator for string
    61 00000080 ????????            <1>     .volId      dd ?            ;Volume serial number            
    62 00000084 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
    63 0000008C ??                  <1>                 db ?            ;Null terminator for string
    64                              <1> endstruc
    65                              <1> drvBlkBpb_size equ drvBlk.endBpb - drvBlk.bpb
    66                              <1> 
    67                              <1> ;FAT type values
    68                              <1> bpbUnknown  equ 80h ;Unknown FAT
    69                              <1> bpbFat16    equ 40h ;FAT 16 disk
    70                              <1> bpbFat32    equ 20h ;FAT 32 disk
    71                              <1> bpbFat12    equ 10h ;FAT 12 disk
    72                              <1> 
    73                              <1> ;Device Type flags
    74                              <1> type48TPI   equ 0   ;Small floppy format, depreciated
    75                              <1> type96TPI   equ 1   ;Large floppy format, depreciated
    76                              <1> typeSmall   equ 2   ;Super large floppy format, depreciated
    77                              <1> typeHard    equ 5   ;Hard drive
    78                              <1> typeGenRem  equ 7   ;Generic removable medium, default
    79                              <1> 
    80                              <1> ;Device Flag values
    81                              <1> devFixed    equ 1       ;Set if fixed disk 
    82                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
    83                              <1> devLockBpb  equ 4       ;Set if we are not to update BPB on updateBPB calls
    84                              <1> devSameSec  equ 8       ;All sectors in track are same size
    85                              <1> devMulti    equ 10h     ;Physical drive has many logical units (A/B share)
    86                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
    87                              <1> devChgd     equ 40h     ;Dev change detected (set on shared physical drives)
    88                              <1>                         ; Can only be set on remdevs with changeline support!
    89                              <1> devSetDASD  equ 80h     ;Set if we need to set drive DASD params before next fmt.
    90                              <1>                         ; Gets set if new parameters are written to drive!
    91                              <1> devNewParms equ 100h    ;Set if new drive parameters set! Set on IOCTL setparms.
    92                              <1> devUnFmt    equ 200h    ;Disables reads/writes if set
    93                              <1> 
    94                              <1> ;Media byte bits
    95                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
    96                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
    97                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
    98                              <1> 
    99                              <1> ;Partition types
   100                              <1> ptnPrimary  equ 1       ;A primary MBR partition
   101                              <1> ptnLogical  equ 2       ;A logical MBR partition
   102                              <1> ptnActive   equ 80h     ;An active partition
   103                              <1> ptnGpt      equ 4       ;A primary GPT partition
   104                              <1> ptrUnknown  equ 8000h   ;An unknown partition
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E80B340000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E8F8320000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 771F                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 741E                <1>     jz .prnExit 
   513 000004AD 3C0A                <1>     cmp al, drvOUTSTATUS    ;Always report we are busy
   514 000004AF 740A                <1>     je .prnBsy
   515 000004B1 3C10                <1>     cmp al, drvOUTTILBUSY   ;Always report now busy and 0 bytes xfred
   516 000004B3 750E                <1>     jne .prnElse
   517                              <1> ;If we are requested to output until busy, report we are busy
   518                              <1> ; and that we output 0 bytes
   519 000004B5 66C743150000        <1>     mov word [rbx + outTilBusyPkt.wXfrCount], 0 ;Xfr 0 bytes
   520                              <1> ;And fall through to be busy!
   521                              <1> .prnBsy:
   522                              <1> ;Always report we are busy!
   523 000004BB 66C743030002        <1>     mov word [rbx + drvReqPkt.status], drvBsyStatus
   524 000004C1 EB08                <1>     jmp short .prnExit
   525                              <1> .prnElse:
   526                              <1> ;Everything else, device not ready
   527 000004C3 B002                <1>     mov al, drvNotReady
   528                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   529 000004C5 B480                <1>     mov ah, 80h ;Set error bit
   530 000004C7 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   531                              <1> .prnExit:
   532 000004CB 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   533 000004D1 5B                  <1>     pop rbx
   534 000004D2 58                  <1>     pop rax
   535 000004D3 C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> ; This file contains five main routines:
     2                              <1> ; 1) Replacement Int 39h routine (for unhooking interrupts back).
     3                              <1> ; 2) Replacement Int 33h routine.
     4                              <1> ; 3) Int 33h replacement routine.
     5                              <1> ; 4) Driver itself
     6                              <1> ; 5) Int 2Fh Driver backdoor routine
     7                              <1> 
     8 000004D4 0000000000000000    <1> i39Org  dq 0    ;Original BIOS Int 39h to replace on Int 39h
     9 000004DC 0000000000000000    <1> i33Org  dq 0    ;Original BIOS Int 33h to replace on Int 39h.
    10 000004E4 0000000000000000    <1> i2FNext dq 0    ;Previous Int 2Fh handler
    11 000004EC 0000000000000000    <1> i33Next dq 0    ;Current disk driver to call.
    12                              <1> 
    13                              <1> 
    14                              <1> ;DEBUG COMMON ROUTINES!
    15                              <1> drvDbg equ 0
    16                              <1> i33Dbg equ 0
    17                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
    18                              <1> %if drvDbg
    19                              <1> dbgPrintString:
    20                              <1> ;Pass in rsi the string we wanna print and its length in ecx.
    21                              <1> ;Preserves all registers
    22                              <1>     pushfq
    23                              <1>     push rax
    24                              <1> .lp:
    25                              <1>     lodsb
    26                              <1>     test al, al
    27                              <1>     jz .exit
    28                              <1>     call dbgPutch
    29                              <1>     jmp short .lp
    30                              <1> .exit:
    31                              <1>     pop rax
    32                              <1>     popfq
    33                              <1>     return
    34                              <1> 
    35                              <1> dbgCrlf:
    36                              <1> ;Prints a CRLF
    37                              <1>     push rax
    38                              <1>     mov al, 0Ah 
    39                              <1>     call dbgPutch
    40                              <1>     mov al, 0Dh
    41                              <1>     call dbgPutch
    42                              <1>     pop rax
    43                              <1>     return
    44                              <1> 
    45                              <1> dbgPutch:
    46                              <1> ;Input: al = ASCII char to print
    47                              <1>     push rdx
    48                              <1>     mov dx, 0E9h
    49                              <1>     out dx, al
    50                              <1>     ;mov ah, 0Eh
    51                              <1>     ;int 30h
    52                              <1>     pop rdx
    53                              <1>     return
    54                              <1> 
    55                              <1> dbgPrintHexByte:
    56                              <1> ;Print the hex byte in al as a hex value
    57                              <1>     pushfq
    58                              <1>     push rdx
    59                              <1>     push rbx
    60                              <1>     push rax
    61                              <1> 
    62                              <1>     mov dl, al           ;save byte in dl
    63                              <1>     and ax, 00F0h        ;Hi nybble
    64                              <1>     and dx, 000Fh        ;Lo nybble
    65                              <1>     shr ax, 4            ;shift one hex place value pos right
    66                              <1>     call .wrchar
    67                              <1>     mov ax, dx           ;mov lo nybble, to print
    68                              <1>     call .wrchar
    69                              <1> 
    70                              <1>     pop rax
    71                              <1>     pop rbx
    72                              <1>     pop rdx
    73                              <1>     popfq
    74                              <1>     return
    75                              <1> .wrchar:
    76                              <1>     lea rbx, .debascii
    77                              <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    78                              <1>     call dbgPutch
    79                              <1>     return
    80                              <1> .debascii   db "0123456789ABCDEF"
    81                              <1> %endif
    82                              <1> 
    83                              <1> ;Replacement Int 39h routine to replace interrupts these drivers hook.
    84                              <1> dosInt39h:
    85                              <1> ;For now, we just replace int 33h and int 39h back and then jump to i39h
    86 000004F4 B833250000          <1>     mov eax, 2533h
    87 000004F9 488B15DCFFFFFF      <1>     mov rdx, qword [i33Org]
    88 00000500 CD21                <1>     int 21h
    89 00000502 B839250000          <1>     mov eax, 2539h
    90 00000507 488B15C6FFFFFF      <1>     mov rdx, qword [i39Org]
    91 0000050E CD21                <1>     int 21h
    92                              <1> ;And now do the actual warm reboot
    93 00000510 FF25BEFFFFFF        <1>     jmp qword [i39Org]
    94                              <1> 
    95                              <1> ;Replacement Int 33h routine
    96                              <1> dosInt33h:
    97                              <1> ;--------------------------------------------------------------------------
    98                              <1> ;       This is a wrapper around the BIOS Int 33h handler.
    99                              <1> ;--------------------------------------------------------------------------
   100                              <1> ;This routine does the following:
   101                              <1> ;1) Checks if a format request is being made, in which case
   102                              <1> ;   it will ensure that the devSetDASD and devChgd bits are set for all 
   103                              <1> ;   drives for the BIOS drive in dl to ensure that the DOS driver treats
   104                              <1> ;   the DOS drives properly.
   105                              <1> ;
   106                              <1> ; For the most part (CHS is depreciated so we don't talk about it here):
   107                              <1> ;   AH = Function number (05h/85h is FORMAT)
   108                              <1> ;   AL = Number of sectors to xact.
   109                              <1> ;   RBX -> Points to a xfr buffer.
   110                              <1> ;   RCX = Start sector of xft.
   111                              <1> ;   DL = BIOS Drive number to xact on.
   112                              <1> ;--------------------------------------------------------------------------
   113                              <1> ;Enter the DOS driver critical section . When the MSD driver enters this it 
   114                              <1> ; already has the lock so this simply incs the count. If a process attempts 
   115                              <1> ; to bypass DOS and we are already processing a request it gets put on ice.
   116                              <1> ;--------------------------------------------------------------------------
   117                              <1> %if drvDbg and i33Dbg
   117          ******************  <1>  warning: trailing garbage after expression ignored [-w+pp-trailing]
   118                              <1>     call .dbgFun
   119                              <1> %endif
   120                              <1> ;Start by clearing the CF on entry
   121 00000516 80642410FE          <1>     and byte [rsp + 2*8], ~1
   122                              <1> ;Enter the device critical section
   123 0000051B 50                  <1>     push rax
   124 0000051C B802800000          <1>     mov eax, 8002h
   125 00000521 CD2A                <1>     int 2ah
   126 00000523 58                  <1>     pop rax
   127                              <1> ;Now put the retaddr in the var we own 
   128 00000524 8F055F000000        <1>     pop qword [.tmp]
   129                              <1> ;Now check that we are not formatting. If we are, we need to set the bit on
   130                              <1> ; all DOS drives that use this BIOS drive that it has been formatted and 
   131                              <1> ; changed.
   132 0000052A 50                  <1>     push rax    ;Push the function number on stack
   133 0000052B 80E47F              <1>     and ah, 7Fh ;Clear the top bit (as both 05h and 85h are formats)
   134 0000052E 80FC05              <1>     cmp ah, 05h
   135 00000531 7405                <1>     je .format
   136 00000533 80FC07              <1>     cmp ah, 07h ;Undocumented SCSI format?
   137 00000536 750A                <1>     jne .notFormat
   138                              <1> .format:
   139                              <1> ;Here we register the format request!
   140 00000538 B8C0000000          <1>     mov eax, devChgd | devSetDASD   ;Bits to set in flags
   141 0000053D E8D50E0000          <1>     call msdDriver.setBitsForAllDevs
   142                              <1> .notFormat:
   143 00000542 58                  <1>     pop rax     ;Get the function number from stack
   144                              <1> ;Call previous handler and exit irq in this call.
   145 00000543 88153F000000        <1>     mov byte [.drv], dl ;Save the drive we are acting on
   146                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   147                              <1> %if drvDbg
   148                              <1>     push rax
   149                              <1>     push rsi
   150                              <1>     lea rsi, .i33dbgStr1
   151                              <1>     call dbgPrintString
   152                              <1>     mov al, ah
   153                              <1>     call dbgPrintHexByte
   154                              <1>     lea rsi, .i33dbgStr11
   155                              <1>     call dbgPrintString
   156                              <1>     mov al, dl
   157                              <1>     call dbgPrintHexByte
   158                              <1>     call dbgCrlf
   159                              <1>     pop rsi
   160                              <1>     pop rax
   161                              <1> %endif
   162                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   163 00000549 FF159DFFFFFF        <1>     call qword [i33Next]    
   164 0000054F 7327                <1>     jnc .exitI33
   165                              <1> ;We enter here when an error occurs!
   166 00000551 84E4                <1>     test ah, ah ;Error 0? Magical error needs to be cleaned up
   167 00000553 7423                <1>     jz .exitI33
   168                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   169                              <1> %if drvDbg
   170                              <1>     push rsi
   171                              <1>     lea rsi, .i33dbgStr
   172                              <1>     call dbgPrintString
   173                              <1>     pop rsi
   174                              <1>     push rax
   175                              <1>     mov al, ah
   176                              <1>     call dbgPrintHexByte
   177                              <1>     pop rax
   178                              <1>     call dbgCrlf
   179                              <1> %endif
   180                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   181 00000555 80FC06              <1>     cmp ah, 06h         ;Did a swap occur?
   182 00000558 751D                <1>     jne .exitI33Bad     ;All other errors get bubbled up
   183                              <1> ;Here we ensure that on all drives with this BIOS number, we 
   184                              <1> ; register that the swap occured :)
   185 0000055A 50                  <1>     push rax
   186 0000055B 52                  <1>     push rdx
   187 0000055C 0FB61525000000      <1>     movzx edx, byte [.drv]
   188 00000563 F7C280000000        <1>     test edx, 80h       ;Was this a hard disk?
   189 00000569 750A                <1>     jnz .exitI33Weird   ;Just skip setting this bit in this case
   190 0000056B B840000000          <1>     mov eax, devChgd    ;Set the device changed bit on all devices
   191 00000570 E8A20E0000          <1>     call msdDriver.setBitsForAllDevs
   192                              <1> .exitI33Weird:
   193 00000575 5A                  <1>     pop rdx
   194 00000576 58                  <1>     pop rax
   195                              <1> .exitI33Bad:
   196 00000577 F9                  <1>     stc
   197                              <1> .exitI33:
   198                              <1> ;Replace the retaddr back on the stack
   199 00000578 FF350B000000        <1>     push qword [.tmp]
   200                              <1> ;Exit the device critical section now
   201 0000057E 50                  <1>     push rax
   202 0000057F B802810000          <1>     mov eax, 8102h
   203 00000584 CD2A                <1>     int 2ah
   204 00000586 58                  <1>     pop rax
   205                              <1> ;And finally go back to the caller :)
   206                              <1>     return
    13                              <2> %%_ret:
    14 00000587 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> %if drvDbg and i33Dbg
   207          ******************  <1>  warning: trailing garbage after expression ignored [-w+pp-trailing]
   208                              <1> .dbgFun:
   209                              <1>     cmp byte [0700h], -1
   210                              <1>     retne
   211                              <1>     cmp byte [.drv], 0
   212                              <1>     retne
   213                              <1>     pop rax
   214                              <1> ;Now we enter the fake handler.
   215                              <1>     mov byte [0700h], 0
   216                              <1>     ;inc byte [.dbgCnt]
   217                              <1>     ;mov ah, 80h ;Timeout most of the time
   218                              <1>     ;cmp byte [.dbgCnt], 1
   219                              <1>     ;jne .dbgIret
   220                              <1>     mov eax, devChgd    ;Set the device changed bit on all devices
   221                              <1>     call msdDriver.setBitsForAllDevs
   222                              <1>     mov ah, 06h
   223                              <1> .dbgIret:
   224                              <1>     push rsi
   225                              <1>     lea rsi, .dbgStrMsg
   226                              <1>     call dbgPrintString
   227                              <1>     push rax
   228                              <1>     mov al, ah
   229                              <1>     call dbgPrintHexByte
   230                              <1>     pop rax
   231                              <1>     call dbgCrlf
   232                              <1>     pop rsi
   233                              <1>     or byte [rsp + 2*8h], 1 ;Set CF
   234                              <1>     iretq
   235                              <1> .dbgStrMsg db  "[BIOS DEBUG] REPORTING ERROR AH=",0
   236                              <1> .dbgCnt db 0
   237                              <1> %endif
   238                              <1> ;Local data for the main IRQ handler
   239 00000588 00                  <1> .drv    db 0    ;Drive we are acting on
   240 00000589 0000000000000000    <1> .tmp    dq 0
   241                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   242                              <1> %if drvDbg
   243                              <1> .i33dbgStr1     db "[BIOS] Entering BIOS function ",0
   244                              <1> .i33dbgStr11    db "h on drive ",0
   245                              <1> .i33dbgStr db "[BIOS] Int 33h Error detected: ",0
   246                              <1> %endif
   247                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   248                              <1> 
   249                              <1> ;Int 33h replacement routine
   250                              <1> i2fhSwap33h:
   251                              <1> ;Replaces the current int 33h handler and the int 39h replacement handler
   252                              <1> ;Input: ah = 13h
   253                              <1> ;       rdx -> New Int 33h handler.
   254                              <1> ;       rbx -> Value to replace back when system shutdown occurs.
   255                              <1> ;Output:
   256                              <1> ;       rdx -> Replaced Int 33h handler.
   257                              <1> ;       rbx -> Replaced original lowest level Int 33h handler.
   258 00000591 80FC13              <1>     cmp ah, 13h
   259 00000594 0F859F0E0000        <1>     jne msdDriver.i2fDriver ;Goto the driver backdoor if not this handler 
   260 0000059A 4887154BFFFFFF      <1>     xchg qword [i33Next], rdx
   261 000005A1 48871D34FFFFFF      <1>     xchg qword [i33Org], rbx
   262 000005A8 48CF                <1>     iretq
   263                              <1> 
   264                              <1> ; Actual driver here
   265                              <1> msdDriver:
   266 000005AA 50                  <1>     push rax
   267 000005AB 53                  <1>     push rbx
   268 000005AC 51                  <1>     push rcx
   269 000005AD 52                  <1>     push rdx
   270 000005AE 56                  <1>     push rsi
   271 000005AF 57                  <1>     push rdi
   272 000005B0 55                  <1>     push rbp
   273 000005B1 4150                <1>     push r8
   274 000005B3 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the ptr to the req header in rbx
   275 000005BA 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
   276 000005BE 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
   277 000005C4 7741                <1>     ja .errBadCmd                 ;If yes, error!
   278 000005C6 488D2D4D000000      <1>     lea rbp, .fnTbl
   279 000005CD 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
   280 000005D2 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
   281 000005D5 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
   282 000005D7 7417                <1>     jz .exit
   283 000005D9 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
   284 000005DC 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
   285 000005E0 752C                <1>     jne .errBadPkt
   286 000005E2 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
   287 000005E5 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
   288 000005E9 E8F40B0000          <1>     call .setupDrive    ;Returns rbp -> Table entry
   289                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
   290 000005EE FFD6                <1>     call rsi 
   291                              <1> .exit:
   292 000005F0 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get back the req header ptr
   293 000005F7 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
   294 000005FD 4158                <1>     pop r8
   295 000005FF 5D                  <1>     pop rbp
   296 00000600 5F                  <1>     pop rdi
   297 00000601 5E                  <1>     pop rsi
   298 00000602 5A                  <1>     pop rdx
   299 00000603 59                  <1>     pop rcx
   300 00000604 5B                  <1>     pop rbx
   301 00000605 58                  <1>     pop rax
   302 00000606 C3                  <1>     ret
   303                              <1> 
   304                              <1> .errBadCmd:
   305 00000607 B803000000          <1>     mov eax, drvBadCmd
   306 0000060C EB05                <1>     jmp short .writeEntryError
   307                              <1> .errBadPkt:
   308 0000060E B805000000          <1>     mov eax, drvBadDrvReq
   309                              <1> .writeEntryError:
   310                              <1> ;Used for errors in the driver entry
   311 00000613 E8FB000000          <1>     call .errorExit
   312 00000618 EBD6                <1>     jmp short .exit
   313                              <1> 
   314                              <1> 
   315                              <1> .fnTbl:
   316                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
   317                              <1> ; to function, high word is packet size for check
   318                              <1>     ;dw .initShim - .fnTbl        ;Function 0
   319 0000061A 462F                <1>     dw msdInit - .fnTbl
   320 0000061C 1F00                <1>     dw initReqPkt_size
   321 0000061E 1201                <1>     dw .medChk - .fnTbl          ;Function 1
   322 00000620 1700                <1>     dw mediaCheckReqPkt_size
   323 00000622 C301                <1>     dw .buildBPB - .fnTbl        ;Function 2
   324 00000624 1E00                <1>     dw bpbBuildReqPkt_size
   325 00000626 0000                <1>     dw 0                         ;Function 3
   326 00000628 0000                <1>     dw 0
   327 0000062A 4B04                <1>     dw .read - .fnTbl            ;Function 4
   328 0000062C 2A00                <1>     dw ioReqPkt_size
   329 0000062E 0000                <1>     dw 0                         ;Function 5
   330 00000630 0000                <1>     dw 0
   331 00000632 0000                <1>     dw 0                         ;Function 6
   332 00000634 0000                <1>     dw 0
   333 00000636 0000                <1>     dw 0                         ;Function 7
   334 00000638 0000                <1>     dw 0
   335 0000063A 7504                <1>     dw .write - .fnTbl           ;Function 8
   336 0000063C 2A00                <1>     dw ioReqPkt_size
   337 0000063E 7504                <1>     dw .write - .fnTbl           ;Function 9
   338 00000640 2A00                <1>     dw ioReqPkt_size
   339 00000642 0000                <1>     dw 0                         ;Function 10
   340 00000644 0000                <1>     dw 0
   341 00000646 0000                <1>     dw 0                         ;Function 11
   342 00000648 0000                <1>     dw 0
   343 0000064A 0000                <1>     dw 0                         ;Function 12
   344 0000064C 0000                <1>     dw 0
   345 0000064E 9605                <1>     dw .devOpen - .fnTbl         ;Function 13
   346 00000650 0D00                <1>     dw openReqPkt_size
   347 00000652 AC05                <1>     dw .devClose - .fnTbl        ;Function 14
   348 00000654 0D00                <1>     dw closeReqPkt_size
   349 00000656 C205                <1>     dw .remMed - .fnTbl          ;Function 15
   350 00000658 0D00                <1>     dw remMediaReqPkt_size
   351 0000065A 0000                <1>     dw 0                         ;Function 16
   352 0000065C 0000                <1>     dw 0
   353 0000065E 0000                <1>     dw 0                         ;Function 17
   354 00000660 0000                <1>     dw 0
   355 00000662 0000                <1>     dw 0                         ;Function 18
   356 00000664 0000                <1>     dw 0
   357 00000666 D105                <1>     dw .IOCTL - .fnTbl           ;Function 19
   358 00000668 2700                <1>     dw ioctlReqPkt_size
   359 0000066A 0000                <1>     dw 0                         ;Function 20
   360 0000066C 0000                <1>     dw 0
   361 0000066E 0000                <1>     dw 0                         ;Function 21
   362 00000670 0000                <1>     dw 0
   363 00000672 0000                <1>     dw 0                         ;Function 22
   364 00000674 0000                <1>     dw 0
   365 00000676 640B                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   366 00000678 0D00                <1>     dw getDevReqPkt_size
   367 0000067A 9A0B                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   368 0000067C 0D00                <1>     dw setDevReqPkt_size
   369 0000067E A00B                <1>     dw .ioctlQuery - .fnTbl      ;Function 25
   370 00000680 0D00                <1>     dw setDevReqPkt_size
   371                              <1> 
   372                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   373                              <1> .errorXlat:
   374                              <1> ;Jumped to with ah = BIOS error code as reported on function call
   375 00000682 488D3D99000000      <1>     lea rdi, .biosErrTbl
   376 00000689 88E0                <1>     mov al, ah
   377 0000068B B905000000          <1>     mov ecx, errTblLen
   378 00000690 F2AE                <1>     repne scasb
   379 00000692 7505                <1>     jne .exNotFnd
   380 00000694 8A4704              <1>     mov al, byte [rdi + errTblLen - 1] ;Get entry in DOS table now
   381 00000697 EB7A                <1>     jmp short .errorExit
   382                              <1> .exNotFnd:
   383                              <1> ;Come here if the BIOS supplied code was not mapped to anything.
   384                              <1> ; We now get the SCSI code. Only a few cases make sense so
   385                              <1> ; we try and decypher. Else, general fault.
   386 00000699 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   387 0000069D B800010000          <1>     mov eax, 0100h
   388 000006A2 CD33                <1>     int 33h     ;No need to preserve regs across this call 
   389                              <1> ;Device Not Ready
   390 000006A4 B802000000          <1>     mov eax, drvNotReady  ;Device not ready code
   391 000006A9 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   392 000006AC 7465                <1>     je .errorExit
   393 000006AE 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   394 000006B2 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   395                              <1> ;Write Protected
   396 000006B6 B800000000          <1>     mov eax, drvWPErr
   397 000006BB 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   398 000006C0 7451                <1>     je .errorExit
   399                              <1> ;CRC Error
   400 000006C2 B804000000          <1>     mov eax, drvCRCErr     ;CRC error code
   401 000006C7 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   402 000006CC 7445                <1>     je .errorExit
   403 000006CE 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   404 000006D3 743E                <1>     je .errorExit
   405 000006D5 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   406 000006DA 7437                <1>     je .errorExit
   407                              <1> ;Seek Error
   408 000006DC B806000000          <1>     mov eax, drvBadSeek 
   409 000006E1 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   410 000006E4 742D                <1>     je .errorExit
   411                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   412                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   413 000006E6 B807000000          <1>     mov eax, drvBadMed
   414 000006EB 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   415 000006EE 7423                <1>     je .errorExit
   416                              <1> ;Sector Not Found
   417 000006F0 B808000000          <1>     mov eax, drvSecNotFnd     ;Sector not found code
   418 000006F5 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   419 000006F8 7419                <1>     je .errorExit
   420                              <1> ;Write faults
   421 000006FA B80A000000          <1>     mov eax, drvWriteFault     ;Write fault
   422 000006FF 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   423 00000702 740F                <1>     je .errorExit
   424                              <1> ;Read faults
   425 00000704 B80B000000          <1>     mov eax, drvReadFault     ;Read fault
   426 00000709 80F911              <1>     cmp cl, 11h     ;Read error
   427 0000070C 7405                <1>     je .errorExit
   428                              <1> ;General Errors
   429                              <1> .genErrExit:
   430 0000070E B80C000000          <1>     mov eax, drvGenFault     ;Everything else is general error
   431                              <1> .errorExit:     ;Jump to with al=Standard Error code
   432 00000713 B480                <1>     mov ah, 80h ;Set error bit
   433 00000715 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   434 0000071C 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   435 00000720 F9                  <1>     stc         ;Some functions need CF set to error properly
   436                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 00000721 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> ;The xlat table is used for simple error codes.
   438                              <1> ;The more complex stuff requires a further callout to int 33h for the SCSI
   439                              <1> ; error code.
   440                              <1> .biosErrTbl:
   441 00000722 04                  <1>     db 04h  ;Sector not found
   442 00000723 06                  <1>     db 06h  ;Media changed or removed
   443 00000724 10                  <1>     db 10h  ;ECC/CRC error
   444 00000725 40                  <1>     db 40h  ;Seek error
   445 00000726 80                  <1>     db 80h  ;Timeout error
   446                              <1> errTblLen equ $ - .biosErrTbl
   447                              <1> .dosErrTbl:
   448 00000727 08                  <1>     db drvSecNotFnd
   449 00000728 0F                  <1>     db drvBadDskChnge
   450 00000729 04                  <1>     db drvCRCErr
   451 0000072A 06                  <1>     db drvBadSeek
   452 0000072B 02                  <1>     db drvNotReady
   453                              <1> 
   454                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   455                              <1> .medChk:          ;Function 1
   456                              <1> ;Start by placing the label pointer in the slot in the event of a change!
   457 0000072C 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   458 00000730 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   459                              <1> ;Did this drive have its parameters swapped since the last time?
   460 00000734 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devNewParms
   461 0000073A 7416                <1>     jz .mcNoFormat
   462                              <1> ;Reset and apply the different logic now :)
   463 0000073C 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devNewParms   ;Clear this bit
   464 00000742 C605E80D0000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   465 00000749 E8720B0000          <1>     call .checkDevFixed ;If fixed, declare changed!
   466 0000074E 7577                <1>     jnz .mmcChange
   467                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   468 00000750 EB07                <1>     jmp short .mcRem
   469                              <1> .mcNoFormat:
   470 00000752 E8690B0000          <1>     call .checkDevFixed
   471 00000757 7563                <1>     jnz .mmcNoChange
   472                              <1> .mcRem:
   473 00000759 E87E0B0000          <1>     call .setDrvOwner
   474 0000075E E8560B0000          <1>     call .checkHasChangeline
   475 00000763 743F                <1>     jz .mmcNoChangeLine
   476 00000765 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   477                              <1> ;Now we do a BIOS changeline check. 
   478 00000769 E8590B0000          <1>     call .checkMediaChange  ;If we know we changed, skip the check
   479 0000076E 750C                <1>     jnz .mmcVolCheck
   480                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   481                              <1> %if drvDbg
   482                              <1>     push rsi
   483                              <1>     lea rsi, .mcDbgMsg
   484                              <1>     call dbgPrintString
   485                              <1>     pop rsi
   486                              <1> %endif
   487                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   488 00000770 B800160000          <1>     mov eax, 1600h 
   489 00000775 E88E0C0000          <1>     call .callI33h
   490 0000077A 7314                <1>     jnc .mmcNoChangeFnd
   491                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   492                              <1> %if drvDbg
   493                              <1>     push rsi
   494                              <1>     lea rsi, .mcDbgMsg1
   495                              <1>     call dbgPrintString
   496                              <1>     pop rsi
   497                              <1> %endif
   498                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   499                              <1> .mmcVolCheck:
   500                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   501                              <1> %if drvDbg
   502                              <1>     push rsi
   503                              <1>     lea rsi, .mcDbgMsg3
   504                              <1>     call dbgPrintString
   505                              <1>     pop rsi
   506                              <1> %endif
   507                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   508                              <1> ;Here if are checking the volume for its ID.
   509 0000077C E8F7000000          <1>     call .updateBpb ;If this fails, change!
   510 00000781 7244                <1>     jc .mmcChange
   511 00000783 E80B0B0000          <1>     call .checkVolumeSame
   512 00000788 85C0                <1>     test eax, eax
   513 0000078A 7437                <1>     jz .mmcUnsure
   514 0000078C 7839                <1>     js .mmcChange   ;If the sign bit is set, eax = -1. Disk changed!
   515 0000078E EB2C                <1>     jmp short .mmcNoChange
   516                              <1> .mmcNoChangeFnd:
   517                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   518                              <1> %if drvDbg
   519                              <1>     push rsi
   520                              <1>     lea rsi, .mcDbgMsg2
   521                              <1>     call dbgPrintString
   522                              <1>     pop rsi
   523                              <1> %endif
   524                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   525                              <1> ;If the changeline says no change, check that we were the last disk to access
   526                              <1> ; If we were not, we do a time check do time/last access check. If more than
   527                              <1> ; two seconds, have passed, we do a volume check. Else, since the changeline
   528                              <1> ; said no change, we assume that no change!
   529 00000790 8A059B0D0000        <1>     mov al, byte [.bLastDsk]
   530 00000796 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
   531 00000799 7421                <1>     je .mmcNoChange
   532 0000079B E8370C0000          <1>     call .checkTime ;Returns CF=CY if unsure. If unsure, do BPB check
   533 000007A0 72DA                <1>     jc .mmcVolCheck
   534 000007A2 EB18                <1>     jmp short .mmcNoChange    ;Else, we say no change!
   535                              <1> .mmcNoChangeLine:
   536                              <1> ; If last accessed medchecked disk was this one and the time on this 
   537                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   538 000007A4 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   539 000007A7 8605840D0000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   540 000007AD 38057E0D0000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   541 000007B3 750E                <1>     jne .mmcUnsure
   542                              <1> ;Else, now we do the famous time check. 
   543 000007B5 E81D0C0000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   544 000007BA 7207                <1>     jc .mmcUnsure
   545                              <1> .mmcNoChange:
   546                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   547                              <1> %if drvDbg
   548                              <1>     lea rsi, .mmcNoStrD
   549                              <1>     call .mmcDbgCmn
   550                              <1> %endif
   551                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   552 000007BC B801000000          <1>     mov eax, 1
   553 000007C1 EB0F                <1>     jmp short .mmcExit
   554                              <1> 
   555                              <1> .mmcUnsure:
   556                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   557                              <1> %if drvDbg
   558                              <1>     lea rsi, .mmcUnkStrD
   559                              <1>     call .mmcDbgCmn
   560                              <1> %endif
   561                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   562 000007C3 31C0                <1>     xor eax, eax
   563 000007C5 EB0B                <1>     jmp short .mmcExit
   564                              <1>     
   565                              <1> .mmcChange:
   566                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   567                              <1> %if drvDbg
   568                              <1>     lea rsi, .mmcChStrD
   569                              <1>     call .mmcDbgCmn
   570                              <1> %endif
   571                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   572 000007C7 B8FFFFFFFF          <1>     mov eax, -1
   573 000007CC 88055F0D0000        <1>     mov byte [.bLastDsk], al    ;Default to unknown disk if a change occured!
   574                              <1> .mmcExit:
   575 000007D2 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   576 000007D9 88430E              <1>     mov byte [rbx + mediaCheckReqPkt.medret], al
   577                              <1>     return
    13                              <2> %%_ret:
    14 000007DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   578                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   579                              <1> %if drvDbg
   580                              <1> .mmcDbgCmn:
   581                              <1>     push rsi
   582                              <1>     lea rsi, .mmcMedChgStr
   583                              <1>     call dbgPrintString
   584                              <1>     pop rsi
   585                              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   586                              <1>     add al, "A"
   587                              <1>     mov byte [rsi], al
   588                              <1>     call dbgPrintString
   589                              <1>     return
   590                              <1> .mmcNoStrD  db "_ not changed",0Ah,0Dh,0
   591                              <1> .mmcUnkStrD db "_ unknown",0Ah,0Dh,0
   592                              <1> .mmcChStrD  db "_ changed",0Ah,0Dh,0
   593                              <1> 
   594                              <1> .mmcMedChgStr   db "[MEDCHECK] ",0
   595                              <1> .mcDbgMsg db "[MEDCHECK] Doing BIOS medcheck",0Ah,0Dh,0
   596                              <1> .mcDbgMsg1 db "[MEDCHECK] Reported change",0Ah,0Dh,0
   597                              <1> .mcDbgMsg2 db "[MEDCHECK] No Change Reported",0Ah,0Dh,0
   598                              <1> .mcDbgMsg3 db "[MEDCHECK] Doing volume check",0Ah,0Dh,0
   599                              <1> %endif
   600                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   601                              <1> 
   602                              <1> .buildBPB:        ;Function 2
   603                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   604                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   605                              <1> ; the table entry bpb which we will be returning.
   606 000007DD E8DE0A0000          <1>     call .checkDevFixed
   607 000007E2 7517                <1>     jnz .bbpbExit
   608                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   609                              <1> %if drvDbg
   610                              <1>     push rsi
   611                              <1>     lea rsi, .bbpbMsg
   612                              <1>     call dbgPrintString
   613                              <1>     pop rsi
   614                              <1> %endif
   615                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   616                              <1> ;------------------------------------------------------
   617                              <1> ; Here for removable devices only!!
   618                              <1> ;------------------------------------------------------
   619 000007E4 E839000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   620 000007E9 E88A000000          <1>     call .updateBpb ;Fill the BPB entries in the drvBlk
   621                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   622                              <1> %if drvDbg
   623                              <1>     push rsi
   624                              <1>     push rdi
   625                              <1>     lea rsi, .bbpbMsg1
   626                              <1>     lea rdi, .bbpbMsg11
   627                              <1>     cmovc rsi, rdi
   628                              <1>     call dbgPrintString
   629                              <1>     pop rdi
   630                              <1>     pop rsi
   631                              <1> %endif
   632                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   633 000007EE 0F82D4020000        <1>     jc .ioDoErr     ;Errors returned as if from block IO handler
   634 000007F4 E895010000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   635 000007F9 7300                <1>     jnc .bbpbExit
   636                              <1> ;Here we will search the root directory for the volume label only!
   637                              <1> ;The FS string has been setup and volume ID is set to 0.
   638                              <1> ;
   639                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   640                              <1> ;
   641                              <1> .bbpbExit:
   642 000007FB 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the driver ptr
   643 00000802 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   644 00000806 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   645 00000809 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   646 00000810 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   647                              <1>     return
    13                              <2> %%_ret:
    14 00000814 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648                              <1> .bbpbError:
   649 00000815 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   650 00000817 0F84F6FEFFFF        <1>     je .errorExit   
   651 0000081D E960FEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   652                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   653                              <1> %if drvDbg
   654                              <1> .bbpbMsg1 db "[BUILDBPB] BPB Build Ok",0Ah,0Dh,0
   655                              <1> .bbpbMsg11 db "[BUILDBPB] BPB Build Failed",0Ah,0Dh,0
   656                              <1> .bbpbMsg db "[BUILDBPB] Building BPB",0Ah,0Dh,0
   657                              <1> %endif
   658                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   659                              <1> .resetIds:
   660                              <1> ;We reset the volume id string and label to the default for the 
   661                              <1> ; volume before the reset!
   662 00000822 50                  <1>     push rax
   663 00000823 53                  <1>     push rbx
   664 00000824 51                  <1>     push rcx
   665 00000825 56                  <1>     push rsi
   666 00000826 57                  <1>     push rdi
   667                              <1> 
   668                              <1> ;1) Clear volume Id
   669 00000827 C78580000000000000- <1>     mov dword [rbp + drvBlk.volId], 0
   669 00000830 00                  <1>
   670                              <1> ;2) Reset the volume label to default
   671 00000831 488D35EF0C0000      <1>     lea rsi, .defLbl
   672 00000838 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   673 0000083C B90C000000          <1>     mov ecx, 12
   674 00000841 F3A4                <1>     rep movsb
   675                              <1> ;3) Reset the FAT string
   676                              <1> ;Since fat32 indicator is in the middle, compare against it.
   677                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   678 00000843 488D35D40C0000      <1>     lea rsi, .fat32Str
   679 0000084A 488D05BB0C0000      <1>     lea rax, .fat12Str
   680 00000851 488D1DBD0C0000      <1>     lea rbx, .fat16Str
   681 00000858 F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   682 0000085C 480F47F3            <1>     cmova rsi, rbx
   683 00000860 480F42F0            <1>     cmovb rsi, rax
   684 00000864 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   685 0000086B B909000000          <1>     mov ecx, 9
   686 00000870 F3A4                <1>     rep movsb
   687                              <1> 
   688 00000872 5F                  <1>     pop rdi
   689 00000873 5E                  <1>     pop rsi
   690 00000874 59                  <1>     pop rcx
   691 00000875 5B                  <1>     pop rbx
   692 00000876 58                  <1>     pop rax
   693                              <1>     return
    13                              <2> %%_ret:
    14 00000877 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   694                              <1> 
   695                              <1> .updateBpb:
   696                              <1> ;------------------------------------------------------
   697                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   698                              <1> ; or failing, for the BPB indicated by the media byte.
   699                              <1> ;Never called on Fixed devs in normal operation.
   700                              <1> ;------------------------------------------------------
   701                              <1> ;Entered with: 
   702                              <1> ;   rbp -> drvBlk for this drive
   703                              <1> ;------------------------------------------------------
   704                              <1> ;Exited with:
   705                              <1> ;   If CF=NC:
   706                              <1> ;       rbx -> The start of the BPB
   707                              <1> ;       rsi -> End of the BPB. Points to the extSig
   708                              <1> ;               if present.
   709                              <1> ;   Else:
   710                              <1> ;       If ZF=NZ: 
   711                              <1> ;           eax = DOS error code (Invalid BPB detected)
   712                              <1> ;       Else:
   713                              <1> ;           eax = BIOS error code
   714                              <1> ;------------------------------------------------------
   715 00000878 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBpb
   716                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000087E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000880 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   717 00000881 E8AF010000          <1>     call .bbpbReadBS    ;Sets up rbx to point to internal disk buffer
   718                              <1>     retc    ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000886 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000888 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   719                              <1> ;Check we if we have a valid bootsector.
   720 00000889 803B69              <1>     cmp byte [rbx + oemHeader.jump], 069h       ;Direct jump has no NOP
   721 0000088C 7410                <1>     je .ubpbCheckMedOk
   722 0000088E 803BE9              <1>     cmp byte [rbx + oemHeader.jump], 0E9h       ;Near jump has no NOP
   723 00000891 740B                <1>     je .ubpbCheckMedOk
   724 00000893 803BEB              <1>     cmp byte [rbx + oemHeader.jump], 0EBh       ;Short jump has a NOP
   725 00000896 7555                <1>     jne .ubpbOldDisk
   726 00000898 807B0290            <1>     cmp byte [rbx + oemHeader.jump + 2], 090h   ;NOP should be here
   727 0000089C 754F                <1>     jne .ubpbOldDisk
   728                              <1> .ubpbCheckMedOk:
   729 0000089E 8A4315              <1>     mov al, byte [rbx + oemHeader_size + bpb.media] ;Get medbyte from BPB
   730 000008A1 E83A000000          <1>     call .checkMedByt   ;Check if it is 0F0h or geq 0F8h
   731 000008A6 7545                <1>     jnz .ubpbOldDisk    ;If it is not, don't trust the BPB. Read the FAT sector
   732                              <1> ;Now we do the pre DOS 3.2 single sided check and kludge.
   733 000008A8 A801                <1>     test al, 1  ;Double sided bit set on media byte?
   734 000008AA 0F85B2000000        <1>     jnz .ubpbNormalDisk ;If set, proceed as normal.
   735                              <1> ;Here if we have a "single-sided" formatted media.
   736                              <1> ;Check the OEM string. We filter out SCPDOS disks first.
   737 000008B0 817B0353435044      <1>     cmp dword [rbx + oemHeader.oemString], "SCPD"
   738 000008B7 750C                <1>     jne .ubpbNotSCP
   739 000008B9 66817B074F53        <1>     cmp word [rbx + oemHeader.oemString + 4], "OS"
   740 000008BF 0F849D000000        <1>     je .ubpbNormalDisk
   741                              <1> .ubpbNotSCP:
   742                              <1> ;Now blind check version numbers for 16-bit DOS OEM strings.
   743                              <1> ;Search for DOS 2.0, 3.1 and 3.2. These versions have ID's such that 
   744                              <1> ; the version number starts at position 5.
   745                              <1> ;Usually, these BPBs have MSDOS or IBM<SPC><SPC> or OEM<SPC><SPC>
   746                              <1> ; as the OEM string. OEM stands for any three characters used by an
   747                              <1> ; OEM to identify disks they formatted, follows by "x.y" for a major
   748                              <1> ; and minor version number.
   749                              <1> ;Since we cannot enumerate all the OEM strings and can't guarantee
   750                              <1> ; that they have the bug, we will simply check the version number @
   751                              <1> ; position 5 in the string which seems to have been an unofficial 
   752                              <1> ; standard for placing the version number in the OEM string at the 
   753                              <1> ; time. 
   754                              <1> ;The dot in the check helps "guarantee" the number is a version number 
   755                              <1> ; we are possibly interested in.
   756 000008C5 66817B08332E        <1>     cmp word [rbx + oemHeader.oemString + 5], "3."  ;DOS 3?
   757 000008CB 720A                <1>     jb .ubpbAdjustSPC  ;If below, must be "2." or "1." which has bug. Adjust.
   758 000008CD 807B0A32            <1>     cmp byte [rbx + oemHeader.oemString + 7], "2"   ;DOS 3.2?
   759 000008D1 0F838B000000        <1>     jae .ubpbNormalDisk ;If above or equal 3.2, no need for adjustment.
   760                              <1> .ubpbAdjustSPC:
   761                              <1> ;Here we must be pre 16-bit DOS 3.2. Adjust the BPB in memory to have 
   762                              <1> ; a spc value of 1.
   763 000008D7 C6430D01            <1>     mov byte [rbx + oemHeader_size + bpb.secPerClus], 1
   764 000008DB E982000000          <1>     jmp .ubpbNormalDisk ;Now proceed as a normal disk
   765                              <1> .checkMedByt:
   766                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   767                              <1> ; recognise as this is a sign of an unhealthy volume.
   768                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   769                              <1> ;Input: al = Media byte. 
   770                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   771 000008E0 3CF0                <1>     cmp al, 0F0h
   772                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008E2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   773 000008E5 3CF8                <1>     cmp al, 0F8h
   774                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008E7 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008E9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   775 000008EA 38C0                <1>     cmp al, al  ;Set ZF if greater than F8h
   776                              <1>     return
    13                              <2> %%_ret:
    14 000008EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   777                              <1> .ubpbOldDisk:
   778                              <1> ;We accept media bytes 0F9h-0FFh now. 0F8h and 0F0h make no sense here.
   779 000008ED E83D010000          <1>     call .bbpbReadFAT   ;Read the FAT sector now instead
   780                              <1>     retc    ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008F2 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008F4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   781 000008F5 0FB703              <1>     movzx eax, word [rbx]   ;Clear upper bytes
   782 000008F8 25FF0F0000          <1>     and eax, 0FFFh
   783 000008FD 3DF90F0000          <1>     cmp eax, 0FF9h    ;Cannot accept less than 0F9h as we dont know how to handle
   784 00000902 7224                <1>     jb .ubpbErr
   785 00000904 7547                <1>     jne .ubpbOldest ;If not equal to 0F9h, it must be a "normal" disk.
   786                              <1> ;The only way to check which 0F9h we have, is to read the FAT and try to 
   787                              <1> ; find the second FAT, as they are at different "known" sectors. 
   788                              <1> ;First we read sector 4. If we find the 12 bytes 0FFF9h then use the first entry
   789                              <1> ; in the 0F9h table. 
   790                              <1> ;Else, read sector 8. If we find the 12 bytes 0FFF9h there, then use the 
   791                              <1> ; second entry in the 0F9h table.
   792 00000906 488D1DBB1C0000      <1>     lea rbx, .drvBpbTblF9
   793 0000090D E81C000000          <1>     call .upbpFindF9
   794                              <1>     retc                ;If the sector read failed, exit with ZF=ZE!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000912 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000914 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   795 00000915 7452                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   796 00000917 4881C319000000      <1>     add rbx, bpb_size   ;Else, goto next entry
   797 0000091E E80B000000          <1>     call .upbpFindF9    ;And try with this BPB
   798                              <1>     retc                ;If the sector read failed, exit with ZF=ZE!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000923 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000925 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   799 00000926 7441                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   800                              <1> ;Else fall through as we don't know what 0F9h means here.
   801                              <1> .ubpbErr:               
   802                              <1> ;Bad media bytes or BPB go here. Means the media is unknown.
   803 00000928 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code (07h)
   804 0000092A 85C0                <1>     test eax, eax           ;Set ZF=NZ so we indicate a DOS error code!
   805 0000092C F9                  <1>     stc                     ;And set CF=CY to always return error!
   806                              <1>     return
    13                              <2> %%_ret:
    14 0000092D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   807                              <1> .upbpFindF9:
   808                              <1> ;Reads the supposed start of the second FAT sector to search for a FF9h 
   809                              <1> ;Call with rbx -> Table entry for this drive
   810                              <1> ;Returns:   CF=NC and ZF=ZE: Second boot sector found. Use the bpb in rbx.
   811                              <1> ;           CF=NC and ZF=NZ: Second boot sector not found. Goto next entry.
   812                              <1> ;           CF=CY: Disk read failed.
   813 0000092E 0FB74B0B            <1>     movzx ecx, word [rbx + bpb.FATsz16] ;Get number of fat sectors in a FAT
   814 00000932 FFC1                <1>     inc ecx     ;Add one for the reserved sector to get sector !
   815 00000934 53                  <1>     push rbx
   816 00000935 E8FD000000          <1>     call .bbpbReadEp
   817 0000093A 0FB703              <1>     movzx eax, word [rbx]   ;Read the first word
   818 0000093D 5B                  <1>     pop rbx
   819                              <1>     retc            ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000093E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000940 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   820 00000941 25FF0F0000          <1>     and eax, 0FFFh  ;Scan off the upper nybble to get low meaningful 12 bytes
   821 00000946 3DF90F0000          <1>     cmp eax, 0FF9h  ;Is this FF9h as it should be?
   822 0000094B F8                  <1>     clc             ;Since eax can be a random word, force clear CF here.
   823                              <1>     return
    13                              <2> %%_ret:
    14 0000094C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> .ubpbOldest:
   825                              <1> ;Here we build a pretend BPB in the sector buffer pointed to by rbx.
   826                              <1> ;This will then be used to build the internal data structure. 
   827 0000094D 488D1DDE1B0000      <1>     lea rbx, .drvBpbTbl
   828 00000954 2CFA                <1>     sub al, 0FAh    ;Get the offset into the bpb table
   829 00000956 B919000000          <1>     mov ecx, bpb_size
   830 0000095B F7E1                <1>     mul ecx         ;Get byte offset into the bpb table
   831 0000095D 4801C3              <1>     add rbx, rax    ;Point rbx to this bpb in the table
   832 00000960 EB07                <1>     jmp short .ubpbMoveBpb
   833                              <1> .ubpbNormalDisk:
   834 00000962 4881C30B000000      <1>     add rbx, oemHeader_size ;Now point rbx to the BPB itself
   835                              <1> ;Update the drvBlk with info from the BPB.
   836                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   837                              <1> ; are ok before updating the msdTbl entry. 
   838                              <1> .ubpbMoveBpb:
   839 00000969 E858000000          <1>     call .getFATType    ;Fat type is given in edx
   840 0000096E 72B8                <1>     jc .ubpbErr ;Only happens if crucial BPB fields are zero 
   841 00000970 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   842                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   843                              <1> ; if it is present
   844 00000973 B819000000          <1>     mov eax, bpb_size
   845 00000978 B929000000          <1>     mov ecx, bpb32_size - 12    ;BPB32 minus reserved count
   846 0000097D 80FA20              <1>     cmp dl, bpbFat32
   847 00000980 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   848 00000983 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   849 00000986 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   850 0000098A F3A4                <1>     rep movsb        ;Now copy the BPB over!
   851 0000098C F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   852                              <1>     return
    13                              <2> %%_ret:
    14 0000098D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   853                              <1> 
   854                              <1> .moveVolIds:
   855                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   856                              <1> ;Input: rsi -> End of the BPB in sector. rbp -> drvBlk
   857                              <1> ;Output: CF=CY: No volume label in sector found.
   858                              <1> ;        CF=NC: Volume Label in sector found and copied.
   859 0000098E E83B090000          <1>     call .clearMediaChange   ;Start by clearing the changed bit if it was set
   860 00000993 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   861 00000997 752B                <1>     jne .mviNoSig
   862                              <1> ;Else, now we copy the volume information from the extended bs info block
   863 00000999 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   864 0000099C 898580000000        <1>     mov dword [rbp + drvBlk.volId], eax
   865 000009A2 4881C607000000      <1>     add rsi, extBs.volLab
   866 000009A9 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   867 000009AD B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   868 000009B2 F3A4                <1>     rep movsb   
   869                              <1>     ;rsi now points to the filSysType field in the extBs.
   870                              <1>     ;Move rdi to the filSysType field in the drvBlk.
   871 000009B4 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   872 000009BB B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   873 000009C0 F3A4                <1>     rep movsb   
   874                              <1> ;Clear the change bit now
   875 000009C2 F8                  <1>     clc
   876                              <1>     return
    13                              <2> %%_ret:
    14 000009C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   877                              <1> .mviNoSig:
   878 000009C4 F9                  <1>     stc
   879                              <1>     return
    13                              <2> %%_ret:
    14 000009C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   880                              <1> 
   881                              <1> .getFATType:
   882                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   883 000009C6 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   884 000009C9 E362                <1>     jrcxz .bbpbGFTErr
   885 000009CB 89C8                <1>     mov eax, ecx
   886 000009CD FFC8                <1>     dec eax
   887 000009CF 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   888 000009D3 C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   889 000009D6 01D0                <1>     add eax, edx
   890 000009D8 31D2                <1>     xor edx, edx
   891 000009DA F7F1                <1>     div ecx     ;eax = Root Dir sectors
   892 000009DC 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   893 000009DD 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   894 000009E1 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   895 000009E4 85C0                <1>     test eax, eax
   896 000009E6 0F44C2              <1>     cmovz eax, edx
   897 000009E9 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   898 000009ED F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   899 000009EF 85C0                <1>     test eax, eax   ;If either BPB_NumFATs or FATSz is 0, fail!
   900 000009F1 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   901 000009F2 7439                <1>     jz .bbpbGFTErr
   902 000009F4 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   903 000009F8 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   904 000009FA 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   905 000009FC 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   906 00000A00 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   907 00000A03 85C0                <1>     test eax, eax
   908 00000A05 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   909 00000A08 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   910 00000A0A 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   911 00000A0E E31D                <1>     jrcxz .bbpbGFTErr
   912 00000A10 31D2                <1>     xor edx, edx
   913 00000A12 F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   914 00000A14 BA10000000          <1>     mov edx, bpbFat12
   915 00000A19 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   916 00000A1E 720B                <1>     jb .bbpbGFTExit
   917 00000A20 D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   918 00000A22 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   919 00000A27 7302                <1>     jnb .bbpbGFTExit   ;If above or equal, its in FAT32
   920 00000A29 D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   921                              <1> .bbpbGFTExit:
   922 00000A2B F8                  <1>     clc
   923                              <1>     return
    13                              <2> %%_ret:
    14 00000A2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   924                              <1> .bbpbGFTErr:
   925 00000A2D F9                  <1>     stc
   926                              <1>     return
    13                              <2> %%_ret:
    14 00000A2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   927                              <1> 
   928                              <1> .bbpbReadFAT:
   929                              <1> ;Reads the first FAT sector of media we are playing with.
   930 00000A2F 31C9                <1>     xor ecx, ecx
   931 00000A31 FFC1                <1>     inc ecx         ;Read Sector 1...
   932                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   933                              <1> %if drvDbg
   934                              <1>     push rsi
   935                              <1>     lea rsi, .bbpbDbgReadFatStr
   936                              <1>     call dbgPrintString
   937                              <1>     pop rsi
   938                              <1> %endif
   939                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   940 00000A33 EB02                <1>     jmp short .bbpbReadEp
   941                              <1> .bbpbReadBS:
   942                              <1> ;Reads the bootsector of media we are playing with.
   943                              <1> ;If an error occurs, returns CF=CY and ZF=ZE with AH=BIOS error code
   944 00000A35 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   945                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   946                              <1> %if drvDbg
   947                              <1>     push rsi
   948                              <1>     lea rsi, .bbpbDbgReadBSStr
   949                              <1>     call dbgPrintString
   950                              <1>     pop rsi
   951                              <1> %endif
   952                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   953                              <1> .bbpbReadEp:
   954 00000A37 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]
   955 00000A3A 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   956 00000A3E 488D1DED0A0000      <1>     lea rbx, .inBuffer  ;Use the in sector buffer. Ensure ownership.
   957 00000A45 BE05000000          <1>     mov esi, 5
   958                              <1> .bbpbReadLp:
   959 00000A4A B801820000          <1>     mov eax, 8201h  ;LBA Read function (read 1 sector)
   960 00000A4F E8B4090000          <1>     call .callI33h
   961                              <1> %if drvDbg
   962                              <1>     jnc .bbpbDbgReadExit
   963                              <1> %else
   964 00000A54 0F83E3000000        <1>     jnc .bioExit    ;Exit setting up the time and .bLastDsk to this drive
   965                              <1> %endif
   966                              <1> ;Here if an error. AH has the BIOS error code. Return with
   967                              <1> ; ZF=ZE to indicate we are returning a BIOS code!
   968                              <1> ;Reset the drive. WARNING: CRASHES BOCHS
   969 00000A5A E80B010000          <1>     call .bioReset  ;Resets .bLastDsk to -1
   970 00000A5F FFCE                <1>     dec esi
   971 00000A61 75E7                <1>     jnz .bbpbReadLp
   972                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   973                              <1> %if drvDbg
   974                              <1>     push rsi
   975                              <1>     lea rsi, .bbpbDbgReadBadStr
   976                              <1>     call dbgPrintString
   977                              <1>     pop rsi
   978                              <1> %endif
   979                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   980 00000A63 F9                  <1>     stc             ;Now set up the carry flag!
   981                              <1>     return          ; and exit CF=CY and ZF=ZE
    13                              <2> %%_ret:
    14 00000A64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
   983                              <1> %if drvDbg
   984                              <1> .bbpbDbgReadExit:
   985                              <1>     push rsi
   986                              <1>     lea rsi, .bbpbDbgReadOkStr
   987                              <1>     call dbgPrintString
   988                              <1>     pop rsi
   989                              <1>     jmp .bioExit
   990                              <1> 
   991                              <1> .bbpbDbgReadFatStr db "[DRIVER] Reading FAT Sector",0Ah,0Dh,0
   992                              <1> .bbpbDbgReadBSStr db "[DRIVER] Reading Boot Sector",0Ah,0Dh,0
   993                              <1> .bbpbDbgReadOkStr db "[DRIVER] Read OK",0Ah,0Dh,0
   994                              <1> .bbpbDbgReadBadStr db "[DRIVER] Read Bad",0Ah,0Dh,0
   995                              <1> %endif
   996                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   997                              <1> 
   998                              <1> .read:              ;Function 4
   999                              <1> ;Will read one sector at a time.
  1000 00000A65 E82C090000          <1>     call .ioSetVolLbl
  1001 00000A6A E86D080000          <1>     call .setDrvOwner
  1002 00000A6F E8E5070000          <1>     call .checkSwap 
  1003 00000A74 7252                <1>     jc .ioDoErr
  1004 00000A76 E86F000000          <1>     call .bioSetupRegs
  1005                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A7B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A7D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1006                              <1> .msdr0:
  1007 00000A7E B682                <1>     mov dh, 82h  ;LBA Read function
  1008 00000A80 E891000000          <1>     call .blkIO
  1009 00000A85 7241                <1>     jc .ioDoErr
  1010 00000A87 E84C000000          <1>     call .ioAdv
  1011 00000A8C 75F0                <1>     jne .msdr0
  1012                              <1>     return
    13                              <2> %%_ret:
    14 00000A8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1013                              <1> 
  1014                              <1> .write:             ;Function 8/9
  1015                              <1> ;Will write and optionally verify one sector at a time.
  1016 00000A8F E802090000          <1>     call .ioSetVolLbl
  1017 00000A94 E843080000          <1>     call .setDrvOwner
  1018 00000A99 E8BB070000          <1>     call .checkSwap 
  1019 00000A9E 7228                <1>     jc .ioDoErr
  1020 00000AA0 E845000000          <1>     call .bioSetupRegs
  1021                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AA5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AA7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1022                              <1> .msdw0:
  1023 00000AA8 B683                <1>     mov dh, 83h ;LBA Write Sectors
  1024 00000AAA E867000000          <1>     call .blkIO
  1025 00000AAF 7217                <1>     jc .ioDoErr
  1026 00000AB1 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
  1027 00000AB5 7509                <1>     jne .msdw1
  1028 00000AB7 B684                <1>     mov dh, 84h ;LBA Verify Sectors
  1029 00000AB9 E858000000          <1>     call .blkIO
  1030 00000ABE 7208                <1>     jc .ioDoErr
  1031                              <1> .msdw1:
  1032 00000AC0 E813000000          <1>     call .ioAdv
  1033 00000AC5 75E1                <1>     jne .msdw0
  1034                              <1>     return
    13                              <2> %%_ret:
    14 00000AC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1035                              <1> .ioDoErr:
  1036                              <1> ;Come here if after an error in block IO handler.
  1037                              <1> ;If ZF=ZE, disk error occured, the error needs translation so do it.
  1038                              <1> ;Else just return the error code in al
  1039 00000AC8 0F84B4FBFFFF        <1>     jz .errorXlat
  1040 00000ACE E940FCFFFF          <1>     jmp .errorExit
  1041                              <1> 
  1042                              <1> .ioAdvIOCTL:
  1043                              <1> ;Increments the count of sectors transferred in LBA IOCTL operations
  1044                              <1> ;Input/Output: As below except for rdi -> lbaFormatBlock (or lbaIOBlock)
  1045                              <1> ;               Remember, lbaIOBlock is a superset of lbaFormatBlock 
  1046 00000AD3 FE4701              <1>     inc byte [rdi + lbaIOBlock.numSectors]
  1047 00000AD6 EB03                <1>     jmp short .ioAdvCmn
  1048                              <1> .ioAdv:
  1049                              <1> ;Increments the count of sectors transferred in normal read/writes
  1050                              <1> ;Input/Output: As below except for rdi -> ioReqPkt only
  1051 00000AD8 FF4716              <1>     inc dword [rdi + ioReqPkt.tfrlen]    ;One more sector xfred ok!
  1052                              <1> .ioAdvCmn:
  1053                              <1> ;Advances the buffers on successful IO.
  1054                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
  1055                              <1> ;Input: 
  1056                              <1> ;       rbx -> Where we just IO'ed to
  1057                              <1> ;       rcx = LBA sector we just xfred
  1058                              <1> ;       dh  = BIOS function number
  1059                              <1> ;       dl  = BIOS drive number
  1060                              <1> ;       rdi -> ioReqPkt / lbaFormatBlock / lbaIOBlock
  1061                              <1> ;       rbp -> drvBlk
  1062                              <1> ;       esi = Number of sectors to xfr
  1063                              <1> ;Output:
  1064                              <1> ;       rbx -> Where to IO next sector to/from
  1065                              <1> ;       rcx = LBA of next sector to xfer
  1066                              <1> ;       dh  = BIOS function number
  1067                              <1> ;       dl  = BIOS drive number
  1068                              <1> ;       rdi -> ioReqPkt / lbaFormatBlock / lbaIOBlock
  1069                              <1> ;       rbp -> drvBlk
  1070                              <1> ;       esi = Sectors left to xfr.
  1071                              <1> ;       ZF=ZE if esi is 0. Else ZF=NZ.
  1072 00000ADB 50                  <1>     push rax
  1073 00000ADC 48FFC1              <1>     inc rcx     ;Goto next sector
  1074 00000ADF 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
  1075 00000AE3 4801C3              <1>     add rbx, rax  ;Advance the buffer pointer by 1 sector
  1076 00000AE6 FFCE                <1>     dec esi     ;Once this hits 0, we stop the xfr
  1077 00000AE8 58                  <1>     pop rax
  1078                              <1>     return
    13                              <2> %%_ret:
    14 00000AE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1079                              <1> 
  1080                              <1> .bioSetupRegs:
  1081                              <1> ;Sets up sector to read and buffer ptr for block IO call.
  1082                              <1> ;If returns ZF=ZE then xfr 0 sectors, exit immediately
  1083                              <1> ;Input: rbp -> drvBlk
  1084                              <1> ;Output: rdi -> ioReqPkt
  1085                              <1> ;        rbp -> drvBlk
  1086                              <1> ;        rbx -> Transfer buffer
  1087                              <1> ;        rcx = Sector to transfer
  1088                              <1> ;        dl  = BIOS Drive number
  1089                              <1> ;        dword [rdi + ioReqPkt.tfrlen] set to 0
  1090                              <1> ;        esi = Number of sectors to transfer
  1091                              <1> ;        ZF=ZE if esi is 0. Else ZF=NZ.
  1092 00000AEA 488B3D(98010000)    <1>     mov rdi, qword [reqPktPtr]  ;Get ioreqpktptr in rdi
  1093 00000AF1 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
  1094 00000AF4 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
  1095 00000AF8 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
  1096 00000AFC 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum] ;Get BIOS drive number
  1097 00000B00 31F6                <1>     xor esi, esi   ;Setup esi to 0 to init tfrlen to 0
  1098 00000B02 877716              <1>     xchg esi, dword [rdi + ioReqPkt.tfrlen]  ;Get the tfrlen into esi
  1099 00000B05 85F6                <1>     test esi, esi   ;If esi is still 0, avoid doing IO
  1100                              <1>     return
    13                              <2> %%_ret:
    14 00000B07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1101                              <1> 
  1102                              <1> .blkIODirect:    ;Does block IO without sanity checking the sector number
  1103                              <1> ;All registers as below!
  1104 00000B08 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1105 00000B0E 0F8595000000        <1>     jnz .bioUfmted
  1106 00000B14 EB11                <1>     jmp short .biocmn
  1107                              <1> .blkIO:  ;Does block IO for one sector
  1108                              <1> ;Sector count handled by caller.
  1109                              <1> ;All registers marked as input registers must be preserved across the call
  1110                              <1> ; except ah
  1111                              <1> ;Input: ah = BIOS function number
  1112                              <1> ;       rdi -> ioReqPkt             (Normal Read/Write only)
  1113                              <1> ;       rbp -> drvBlk
  1114                              <1> ;       rbx -> Transfer buffer
  1115                              <1> ;       rcx = LBA sector to transfer
  1116                              <1> ;       dh  = BIOS function number
  1117                              <1> ;       dl  = BIOS drive number
  1118                              <1> ;       esi = Sectors left to xfr!  (Normal Read/Write only)
  1119                              <1> ;Output: CF=NC: esi number of sectors xferred.
  1120                              <1> ;        CF=CY: An error ocured. 
  1121                              <1> ;           ZF=NZ: Non-disk error, return the DOS error code in eax
  1122                              <1> ;           ZF=ZE: Disk error, xlat BIOS error code in ah
  1123 00000B16 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1124 00000B1C 0F8587000000        <1>     jnz .bioUfmted
  1125 00000B22 E85A000000          <1>     call .bioSanity ;Sanity check ecx here
  1126                              <1> .biocmn:
  1127 00000B27 56                  <1>     push rsi    ;Save sector count
  1128 00000B28 BE05000000          <1>     mov esi, 5  ;Retry counter five times
  1129                              <1> .biolp:
  1130 00000B2D B001                <1>     mov al, 01h ;Do one sector
  1131 00000B2F 88F4                <1>     mov ah, dh  ;Get the function number into its proper place
  1132 00000B31 E8D2080000          <1>     call .callI33h  ;Preserves all passed regs except eax. eax trashed
  1133 00000B36 7221                <1>     jc .bioError
  1134 00000B38 3C01                <1>     cmp al, 1   ;Did we do one sector?
  1135 00000B3A 7515                <1>     jne .bioNoIO    ;No, try again without calling BIOS error handling
  1136 00000B3C 5E                  <1>     pop rsi ;Rebalance stack
  1137                              <1> .bioExit:
  1138 00000B3D 8815EE090000        <1>     mov byte [.bLastDsk], dl    ;Last DOS disk accessed
  1139 00000B43 E878070000          <1>     call .checkDevFixed
  1140                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B48 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B4A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1141                              <1> ;Below routine saves the registers it trashes
  1142 00000B4B E871080000          <1>     call .setTime   ;Set the current time and clear state for successful IO
  1143                              <1>     return
    13                              <2> %%_ret:
    14 00000B50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1144                              <1> .bioNoIO:
  1145 00000B51 FFCE                <1>     dec esi ;Decrement the retry counter
  1146 00000B53 75D8                <1>     jnz .biolp  ;and try again if we still have retries to do
  1147 00000B55 5E                  <1>     pop rsi ;Now rebalance the stack
  1148                              <1> ;Here we return as if our request was successful but we set esi to zero
  1149                              <1> ; to stop IO processing as the operation isn't reading/writing the sector
  1150                              <1> ; for no erroring reason (should never actually happen as the sanity check 
  1151                              <1> ; should handle this case but _just in case_ ).
  1152 00000B56 31F6                <1>     xor esi, esi
  1153                              <1>     return
    13                              <2> %%_ret:
    14 00000B58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1154                              <1> .bioError:
  1155                              <1> ;Jumped to with ah = BIOS error code
  1156 00000B59 E8AD060000          <1>     call .checkSwapIO
  1157                              <1> ;Reset the drive. WARNING: CRASHES BOCHS. Does E9h check. 
  1158 00000B5E E807000000          <1>     call .bioReset  ;Resets .bLastDsk to -1
  1159 00000B63 FFCE                <1>     dec esi
  1160 00000B65 75C6                <1>     jnz .biolp
  1161 00000B67 5E                  <1>     pop rsi ;Pop the sector count off the stack
  1162                              <1>     ;ZF=ZE set now as esi counted down
  1163 00000B68 F9                  <1>     stc
  1164                              <1>     return
    13                              <2> %%_ret:
    14 00000B69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> .bioReset:
  1166                              <1> ;Resets the drive system for the drive in dl
  1167 00000B6A 50                  <1>     push rax
  1168 00000B6B E4E9                <1>     in al, 0E9h
  1169 00000B6D 3CE9                <1>     cmp al, 0E9h
  1170 00000B6F 7407                <1>     je .bioResetSkip
  1171 00000B71 31C0                <1>     xor eax, eax    ;Do reset
  1172 00000B73 E890080000          <1>     call .callI33h  ;Ignore any errors
  1173                              <1> .bioResetSkip:
  1174 00000B78 C605B2090000FF      <1>     mov byte [.bLastDsk], -1    ;Reset the last disk accessed
  1175 00000B7F 58                  <1>     pop rax
  1176                              <1>     return
    13                              <2> %%_ret:
    14 00000B80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1177                              <1> .bioSanity:
  1178                              <1> ;Input: ecx = Sector we will transact on. rbp -> DrvBlk
  1179                              <1> ;Output: CF=NC, sector ok to xact on
  1180                              <1> ;        CF=CY, doesnt return, fails the call. ZF=ZE always (have DOS code)
  1181                              <1> ;        If the sector fails check, we return from the top level with ZF=ZE
  1182                              <1> ;           to indicate a DOS error code in eax.
  1183 00000B81 A9FF000000          <1>     test eax, 0FFh  ;If the bottom byte is set, it is a IOCTL call.
  1184                              <1>     retnz           ;BIOS checks these for us as IOCTL bypasses partitions.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B86 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B88 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1185 00000B89 50                  <1>     push rax
  1186 00000B8A 53                  <1>     push rbx
  1187 00000B8B 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
  1188 00000B8F 8B5D1F              <1>     mov ebx, dword [rbp + drvBlk.dTotSec32] 
  1189 00000B92 85C0                <1>     test eax, eax
  1190 00000B94 0F44C3              <1>     cmovz eax, ebx  ;The 32 bit count is valid only if 16 bit count is 0
  1191 00000B97 39C1                <1>     cmp ecx, eax    ;This will set CF iff ecx < eax. If eax >= ecx CF=NC.
  1192 00000B99 5B                  <1>     pop rbx
  1193 00000B9A 58                  <1>     pop rax
  1194 00000B9B F5                  <1>     cmc             ;Flip CF from CY to NC if ok and NC to CY if not
  1195                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B9C 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B9E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1196                              <1> ;Now pops the return from the sanity call and falls.
  1197 00000B9F 58                  <1>     pop rax ;Return from block IO with error code in eax below
  1198 00000BA0 B808000000          <1>     mov eax, drvSecNotFnd
  1199                              <1> .bioNoDiskErr:
  1200 00000BA5 85C0                <1>     test eax, eax   ;Clear ZF
  1201 00000BA7 F9                  <1>     stc
  1202                              <1>     return
    13                              <2> %%_ret:
    14 00000BA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1203                              <1> .bioUfmted:
  1204                              <1> ;Returns the DOS error code bad media to caller. 
  1205                              <1> ;Returns CF=CY and ZF=ZE (with eax = DOS error code)
  1206 00000BA9 B807000000          <1>     mov eax, drvBadMed
  1207 00000BAE EBF5                <1>     jmp short .bioNoDiskErr
  1208                              <1> 
  1209                              <1> .devOpen:         ;Function 13
  1210 00000BB0 E804070000          <1>     call .checkHasChangeline
  1211                              <1>     retz    ;Only modify the open and closed counts is a changeline present!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BB5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BB7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1212 00000BB8 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
  1213                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BBE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BC0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1214 00000BC1 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
  1215                              <1>     return
    13                              <2> %%_ret:
    14 00000BC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .devClose:        ;Function 14
  1217 00000BC6 E8EE060000          <1>     call .checkHasChangeline
  1218                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BCB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BCD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1219 00000BCE 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
  1220                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BD4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BD6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1221 00000BD7 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
  1222                              <1>     return
    13                              <2> %%_ret:
    14 00000BDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1223                              <1> .remMed:  ;Function 15
  1224                              <1> ;Sets busy bit if fixed drive!
  1225 00000BDC E8DF060000          <1>     call .checkDevFixed ;Is it fixed?
  1226                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BE1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BE3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1227 00000BE4 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
  1228                              <1>     return
    13                              <2> %%_ret:
    14 00000BEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1229                              <1> 
  1230                              <1> .IOCTL:    ;Function 19
  1231                              <1> ;Implements LBA versions of the CHS functions by setting the high bit
  1232                              <1> ; in the minor code.
  1233 00000BEB B803000000          <1>     mov eax, drvBadCmd
  1234 00000BF0 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]  ;Get CH and CL in one read
  1235 00000BF4 80FD08              <1>     cmp ch, 08h     ;Disk Drive Major Code?
  1236 00000BF7 0F8516FBFFFF        <1>     jne .errorExit  ;If not, exit bad
  1237                              <1> ;Disk Drive IOCTL here
  1238 00000BFD F6C118              <1>     test cl, 18h    ;If either bits 3 or 4 set, fail the call
  1239 00000C00 0F850DFBFFFF        <1>     jnz .errorExit
  1240 00000C06 F6C160              <1>     test cl, 60h    ;One of these two bits MUST be set (bits 5 and 6)
  1241 00000C09 0F8404FBFFFF        <1>     jz .errorExit
  1242 00000C0F 0FB6D1              <1>     movzx edx, cl
  1243 00000C12 81E207FFFFFF        <1>     and edx, ~0F8h   ;Clear bits 3-7 to get table offset
  1244 00000C18 488D3D21000000      <1>     lea rdi, .ioctlTbl
  1245 00000C1F 57                  <1>     push rdi
  1246 00000C20 488D3C97            <1>     lea rdi, qword [rdi + 4*rdx]
  1247 00000C24 F6C120              <1>     test cl, 20h
  1248 00000C27 7407                <1>     jz .ioctlNoRead
  1249 00000C29 4881C702000000      <1>     add rdi, 2  ;If we are doing the read function, goto the next instruction
  1250                              <1> .ioctlNoRead:
  1251 00000C30 0FB717              <1>     movzx edx, word [rdi]   ;Read the word offset
  1252 00000C33 5F                  <1>     pop rdi
  1253 00000C34 4801D7              <1>     add rdi, rdx    ;Add the table base
  1254 00000C37 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]
  1255 00000C3B F6C180              <1>     test cl, 80h    ;Now set the flag for if CHS (ZF=ZE) or LBA (ZF=NZ)
  1256 00000C3E FFE7                <1>     jmp rdi ;And enter the function with the ptr to the ctrl block in rdx
  1257                              <1> .ioctlTbl:
  1258                              <1> ;Note: For the CHS IO functions, we translate the CHS requests into LBA
  1259                              <1> ; requests and then recycle the LBA request code. We do this using the 
  1260                              <1> ; track table. If the sector size of any table entry is neq the 
  1261                              <1> ; device sector size, we fail the request. This is because these requests
  1262                              <1> ; work on a track by track basis.
  1263 00000C40 4300                <1>     dw .ioSetDevParams - .ioctlTbl  ;CL = 40h or CL = C0h, Write IOCTL
  1264 00000C42 4801                <1>     dw .ioGetDevParams - .ioctlTbl  ;CL = 60h or CL = E0h, Read IOCTL
  1265 00000C44 4402                <1>     dw .ioWrite - .ioctlTbl         ;CL = 41h or CL = C1h, Write IOCTL
  1266 00000C46 6E02                <1>     dw .ioRead - .ioctlTbl          ;CL = 61h or CL = E1h, Read IOCTL
  1267 00000C48 7B02                <1>     dw .ioFormat - .ioctlTbl        ;CL = 42h or CL = C2h, Write IOCTL
  1268 00000C4A A302                <1>     dw .ioVerify - .ioctlTbl        ;CL = 62h or CL = E2h, Read IOCTL
  1269 00000C4C 2500                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 43h or CL = C3h, error
  1270 00000C4E 2500                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 63h or CL = E3h, error
  1271 00000C50 2500                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 44h or CL = C4h, error
  1272 00000C52 2500                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 64h or CL = E4h, error
  1273 00000C54 2500                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 45h or CL = C5h, error
  1274 00000C56 2500                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 65h or CL = E5h, error
  1275 00000C58 3D03                <1>     dw .ioSetIds - .ioctlTbl        ;CL = 46h or CL = C6h, Set vol Ids
  1276 00000C5A 8903                <1>     dw .ioGetIds - .ioctlTbl        ;CL = 66h or CL = E6h, Get vol Ids
  1277 00000C5C 1B04                <1>     dw .ioSetAccessFlag - .ioctlTbl ;CL = 47h or CL = C7h, Write IOCTL
  1278 00000C5E 2F04                <1>     dw .ioGetAccessFlag - .ioctlTbl ;CL = 67h or CL = E7h, Read IOCTL
  1279                              <1> .ioctlQTbl:
  1280                              <1> ;Table of Read functions for IOCTL query. We homogenise the minor code 
  1281                              <1> ; value into a CHS level read request and then search for it (by clearing
  1282                              <1> ; bits 7 and 5 from the byte, both optionally set bits).
  1283                              <1> ;If we add a new function, add it to this table pls :)
  1284 00000C60 4041424647          <1>     db 40h, 41h, 42h, 46h, 47h
  1285                              <1> ioctlQTblL equ $ - .ioctlQTbl
  1286                              <1> .iobadCmd:
  1287 00000C65 B803000000          <1>     mov eax, drvBadCmd
  1288 00000C6A E9A4FAFFFF          <1>     jmp .errorExit
  1289                              <1> .iobadCmdLen:
  1290 00000C6F B805000000          <1>     mov eax, drvBadDrvReq
  1291 00000C74 E99AFAFFFF          <1>     jmp .errorExit
  1292                              <1> .iobadMed:
  1293 00000C79 B807000000          <1>     mov eax, drvBadMed
  1294 00000C7E E990FAFFFF          <1>     jmp .errorExit
  1295                              <1> ;---------------------------------------------------------------------------
  1296                              <1> ;               Set Device parameters in CHS and LBA here
  1297                              <1> ;---------------------------------------------------------------------------
  1298                              <1> .ioSetDevParams:
  1299 00000C83 9C                  <1>     pushfq
  1300                              <1> ;If the parameters are swapped, set the flags and indicate the media 
  1301                              <1> ; was swapped (even if not).
  1302 00000C84 66814D374001        <1>     or word [rbp + drvBlk.wDevFlgs], devNewParms | devChgd
  1303 00000C8A 9D                  <1>     popfq
  1304 00000C8B 0F85C8000000        <1>     jnz .lbaSetParams
  1305                              <1> ;Here we set CHS params. 
  1306                              <1> ;Before we trust the table, we check that indeed
  1307                              <1> ; no sector index is past the max sector count and that if the caller
  1308                              <1> ; claimed that all the sectors are of the same size, they really are.    
  1309 00000C91 488D723C            <1>     lea rsi, qword [rdx + chsParamsBlock.TrackLayout]
  1310 00000C95 4889F7              <1>     mov rdi, rsi    ;Save the pointer in rdi
  1311 00000C98 66AD                <1>     lodsw           ;Get the lead word and adv rsi by 2
  1312 00000C9A 0FB7C8              <1>     movzx ecx, ax   ;Get the lead table entry into ax
  1313 00000C9D 81F93F000000        <1>     cmp ecx, maxTrackTblSz
  1314 00000CA3 7460                <1>     jz .iosdpNoTrack   ;Don't touch the tracks bit in this case!
  1315 00000CA5 0F8763FAFFFF        <1>     ja .genErrExit
  1316 00000CAB 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Check the first entry is ok!
  1317 00000CB0 0F8758FAFFFF        <1>     ja .genErrExit
  1318                              <1> .iosdpTblCheckLp:
  1319 00000CB6 AD                  <1>     lodsd   ;Go to next entry
  1320 00000CB7 FFC9                <1>     dec ecx ;And remove from the count
  1321 00000CB9 7420                <1>     jz .iosdpTblCheckEnd
  1322 00000CBB 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Ensure no entry above the max entry value
  1323 00000CC0 0F8748FAFFFF        <1>     ja .genErrExit
  1324 00000CC6 F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec ;All same size?
  1325 00000CC9 74EB                <1>     jz .iosdpTblCheckLp ;If not, skip this check (always check 1=<i<=n)
  1326 00000CCB 668B4602            <1>     mov ax, word [rsi + 2]  ;Else get sector size
  1327 00000CCF 663946FE            <1>     cmp word [rsi - 2], ax  ;And compare with the previous sector size
  1328 00000CD3 0F8535FAFFFF        <1>     jne .genErrExit
  1329 00000CD9 EBDB                <1>     jmp short .iosdpTblCheckLp
  1330                              <1> .iosdpTblCheckEnd:
  1331                              <1> ;Now we set the sector size bit if all tracks same size check was passed.
  1332                              <1> ;If all sectors have the same size but the caller didn't specify this
  1333                              <1> ; bit, we also don't specify this bit.
  1334 00000CDB 66816537F7FF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSameSec    ;Clear bit first
  1335 00000CE1 F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec
  1336 00000CE4 7406                <1>     jz .iosdpNoSetTrackBit
  1337                              <1> ;The only way we got here if the bit was set is that the check passed.
  1338                              <1> ; Set the bit in the device block.
  1339 00000CE6 66814D370800        <1>     or word [rbp + drvBlk.wDevFlgs], devSameSec
  1340                              <1> .iosdpNoSetTrackBit:
  1341                              <1> ;Now we copy the table directly as sector numbers may be purposefully
  1342                              <1> ; interleaved. NO SORTING!!
  1343 00000CEC 4889FE              <1>     mov rsi, rdi    ;Get back the track layout pointer 
  1344 00000CEF 488D3D8A030000      <1>     lea rdi, .ioTrackTbl    ;We overwrite our internal track table
  1345 00000CF6 66AD                <1>     lodsw   ;Get the table length
  1346 00000CF8 0FB7C8              <1>     movzx ecx, ax   ;This many entries
  1347 00000CFB 66AB                <1>     stosw
  1348 00000CFD F3A5                <1>     rep movsd       ;Move the dword entries over
  1349 00000CFF F60202              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncTrk    ;Just tracks?
  1350                              <1>     retnz   ;Return if bit set!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000D02 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000D04 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1351                              <1> .iosdpNoTrack:
  1352                              <1> ;Now we update the rest of the disk metadata.
  1353                              <1> ;Now copy the rest of the bytes and return
  1354 00000D05 0FB74202            <1>     movzx eax, word [rdx + chsParamsBlock.wDevFlgs]
  1355 00000D09 2503000000          <1>     and eax, devFixed | devChgLine  ;Keep only these two bits
  1356 00000D0E 66816537FCFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~(devFixed | devChgLine)   ;Clear em
  1357 00000D14 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax  ;Add those two bits as set
  1358 00000D18 0FB64201            <1>     movzx eax, byte [rdx + chsParamsBlock.bDevType]
  1359 00000D1C 884536              <1>     mov byte [rbp + drvBlk.bDevType], al
  1360 00000D1F 66814D378000        <1>     or word [rbp + drvBlk.wDevFlgs], devSetDASD 
  1361 00000D25 0FB74204            <1>     movzx eax, word [rdx + chsParamsBlock.wNumCyl]
  1362 00000D29 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
  1363                              <1> ;Finally, here we do the BPB magic.
  1364                              <1> ;
  1365                              <1> ;The logic here is that in a format operation, we first update the driver 
  1366                              <1> ; devBlk bpb fields with the new format and set the devLockBpb flag. 
  1367                              <1> ; This is so the bpb isn't updated from the disk when a disk operation is 
  1368                              <1> ; enacted and that the parameters we passed in this call are what are
  1369                              <1> ; reported to DOS whilst the bootsector hasn't been synchronised with 
  1370                              <1> ; the disk.
  1371                              <1> ;
  1372                              <1> ;We then write the bootsector with the new bpb to disk, thus synchronising
  1373                              <1> ; the new bpb parameter block with what is on disk.
  1374                              <1> ;
  1375                              <1> ;Then we call this again, this time, to clear the locking flag as the disk
  1376                              <1> ; is now sychronised with the accurate bpb. We also here can get rid of 
  1377                              <1> ; the old backup bpb and so the second call will replace the backup
  1378                              <1> ; with whatever we pass it (ideally, the same bpb).
  1379                              <1> ;
  1380                              <1> ;This procedure protects us from accidentally making the drive unusable if
  1381                              <1> ; we somehow fail to write the BPB by having updated the drvBlk. The 
  1382                              <1> ; protection occurs by allowing us to restore the backup bpb as the devBlk 
  1383                              <1> ; bpb if the disk synchronisation of the new parameters failed.
  1384 00000D2D F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
  1385 00000D30 7511                <1>     jnz .iosdpSetBPB    ;If bit set, lock the bpb
  1386                              <1> ;Else we update the backup bpb and unlock the main bpb
  1387 00000D32 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sBkupBPB]
  1388 00000D36 B935000000          <1>     mov ecx, bpb32_size
  1389 00000D3B 66816537FBFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devLockBpb   ;Now allow update bpb 
  1390 00000D41 EB0F                <1>     jmp short .iosdpCopy
  1391                              <1> .iosdpSetBPB:
  1392 00000D43 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]   ;Default to the normal BPB in drvblk
  1393 00000D47 B929000000          <1>     mov ecx, drvBlkBpb_size
  1394 00000D4C 66814D370400        <1>     or word [rbp + drvBlk.wDevFlgs], devLockBpb ;Lock the BPB now
  1395                              <1> .iosdpCopy:
  1396 00000D52 488D7207            <1>     lea rsi, qword [rdx + chsParamsBlock.deviceBPB]
  1397 00000D56 F3A4                <1>     rep movsb
  1398                              <1>     return
    13                              <2> %%_ret:
    14 00000D58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1399                              <1> 
  1400                              <1> .lbaSetParams:
  1401                              <1> ;This only sets the sector size and number of sectors in drvBlk.bpb.
  1402                              <1>     ;Set start sector of partition
  1403 00000D59 8B4A18              <1>     mov ecx, dword [rdx + lbaParamsBlock.qStartSector]
  1404 00000D5C 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
  1405                              <1>     ;Set sector size
  1406 00000D5F 8B4A08              <1>     mov ecx, dword [rdx + lbaParamsBlock.qSectorSize]
  1407 00000D62 66894D0A            <1>     mov word [rbp + drvBlk.wBpS], cx
  1408                              <1>     ;Set same device flags as in CHS.
  1409 00000D66 0FB64A02            <1>     movzx ecx, byte [rdx + lbaParamsBlock.wDevFlgs]
  1410 00000D6A 6681E10300          <1>     and cx, devFixed | devChgLine
  1411 00000D6F 66094D37            <1>     or word [rbp + drvBlk.wDevFlgs], cx
  1412                              <1>     ;Set sector information.
  1413 00000D73 8B4A10              <1>     mov ecx, dword [rdx + lbaParamsBlock.qNumSectors]
  1414 00000D76 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
  1415 00000D7C 7605                <1>     jna .lbaSetSmall
  1416 00000D7E 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
  1417 00000D81 31C9                <1>     xor ecx, ecx
  1418                              <1> .lbaSetSmall:
  1419 00000D83 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
  1420                              <1>     return
    13                              <2> %%_ret:
    14 00000D87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1421                              <1> ;---------------------------------------------------------------------------
  1422                              <1> ;               Get Device parameters in CHS and LBA here
  1423                              <1> ;---------------------------------------------------------------------------
  1424                              <1> .ioGetDevParams:
  1425 00000D88 7561                <1>     jnz .lbaGetParams
  1426                              <1> ;Here we get CHS params. 
  1427 00000D8A 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
  1428 00000D8E F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
  1429 00000D91 751F                <1>     jnz .iogdpBkup  ;If set, return the bpb data as is.
  1430 00000D93 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
  1431 00000D99 7517                <1>     jnz .iogdpBkup  ;If it is fixed, return the BPB as is too
  1432 00000D9B E8D8FAFFFF          <1>     call .updateBpb ;Else, gets the BPB from the disk.
  1433 00000DA0 0F8222FDFFFF        <1>     jc .ioDoErr ;Errors returned as if from block IO handler
  1434 00000DA6 E8E3FBFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1435 00000DAB 488D358B070000      <1>     lea rsi, qword [.inBuffer + 11]
  1436                              <1> .iogdpBkup:
  1437                              <1> ;The caller block in memory must have a bpb32_size'ed space for the BPB
  1438                              <1> ; even if it is a FAT16/12 drive. The caller has to assertain the 
  1439                              <1> ; type of BPB it is based information in the common part of the BPB.
  1440 00000DB2 488D7A07            <1>     lea rdi, qword [rdx + chsParamsBlock.deviceBPB]
  1441 00000DB6 B935000000          <1>     mov ecx, bpb32_size
  1442 00000DBB F3A4                <1>     rep movsb
  1443 00000DBD B805000000          <1>     mov eax, typeHard
  1444 00000DC2 B907000000          <1>     mov ecx, typeGenRem
  1445 00000DC7 F6453701            <1>     test byte [rbp + drvBlk.wDevFlgs], devFixed
  1446 00000DCB 0F44C1              <1>     cmovz eax, ecx  ;eax is set to 7 if the dev is removable
  1447 00000DCE 884201              <1>     mov byte [rdx + chsParamsBlock.bDevType], al
  1448 00000DD1 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1449 00000DD5 2503000000          <1>     and eax, devFixed | devChgLine
  1450 00000DDA 66894202            <1>     mov word [rdx + chsParamsBlock.wDevFlgs], ax
  1451 00000DDE C6420600            <1>     mov byte [rdx + chsParamsBlock.bMedTyp], 0
  1452 00000DE2 0FB74539            <1>     movzx eax, word [rbp + drvBlk.wNumCyl]
  1453 00000DE6 66894204            <1>     mov word [rdx + chsParamsBlock.wNumCyl], ax
  1454                              <1>     return
    13                              <2> %%_ret:
    14 00000DEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1455                              <1> 
  1456                              <1> .lbaGetParams:
  1457                              <1> ;Gets more "updated" information on partitions.
  1458                              <1> ;The data returned will always be the partition maximum! For remdevs
  1459                              <1> ; this means up to the whole media size and for fixed disks we are still 
  1460                              <1> ; restricted to the partition size.
  1461 00000DEB B805000000          <1>     mov eax, drvBadDrvReq
  1462 00000DF0 803A20              <1>     cmp byte [rdx + lbaParamsBlock.bSize], lbaParamsBlock_size
  1463 00000DF3 0F851AF9FFFF        <1>     jne .errorExit
  1464 00000DF9 4889D7              <1>     mov rdi, rdx    ;Store the params block ptr in rdi
  1465 00000DFC 807F0102            <1>     cmp byte [rdi + lbaParamsBlock.bSpecFuncs], 2   ;Check get phys call.
  1466 00000E00 0F870DF9FFFF        <1>     ja .errorExit   ;If above 2, error with bad request!
  1467 00000E06 7425                <1>     je .lgpbpbGetPhys
  1468 00000E08 F6470101            <1>     test byte [rdi + lbaParamsBlock.bSpecFuncs], 1  ;Check if we update BPB.
  1469 00000E0C 7539                <1>     jnz .lgpbpbok
  1470 00000E0E 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
  1471 00000E14 7531                <1>     jnz .lgpbpbok  ;If it is fixed, return the BPB as is too
  1472 00000E16 57                  <1>     push rdi    ;Push the param block onto the stack
  1473 00000E17 E85CFAFFFF          <1>     call .updateBpb
  1474 00000E1C 7208                <1>     jc .lgpbpbnotok ;Even if just bad BPB, keep changed bit on!
  1475 00000E1E E86BFBFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1476 00000E23 5F                  <1>     pop rdi     ;Pop param block
  1477 00000E24 EB21                <1>     jmp short .lgpbpbok
  1478                              <1> .lgpbpbnotok:
  1479                              <1> ;If no valid BPB found, and the device removable, return BIOS params for the 
  1480                              <1> ; whole device. We never come here for fixed disks as updateBpb always passes.
  1481 00000E26 5F                  <1>     pop rdi
  1482 00000E27 0F8455F8FFFF        <1>     jz .errorXlat   ;If update returned CF=CY and ZF=ZE, xlat the BIOS code
  1483                              <1> ;We only fall here if on an unformatted removable disk.
  1484                              <1> ;Unformatted means with an unrecognisable BPB.
  1485                              <1> .lgpbpbGetPhys:
  1486 00000E2D 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
  1487 00000E31 B800880000          <1>     mov eax, 8800h  ;Read LBA Device Parameters
  1488 00000E36 CD33                <1>     int 33h         ;Need a naked call as params returned in regs!
  1489 00000E38 0F8244F8FFFF        <1>     jc .errorXlat
  1490 00000E3E 48FFC1              <1>     inc rcx         ;Turn into an absolute count of sectors
  1491 00000E41 31D2                <1>     xor edx, edx    ;0 Hidden sectors on remdevs/unformatted media
  1492                              <1> ;eax = 0 since either not formatted or values may not be ok for CHS calls
  1493 00000E43 89D0                <1>     mov eax, edx     
  1494 00000E45 EB1F                <1>     jmp short .lgpStor
  1495                              <1> .lgpbpbok:
  1496 00000E47 31C0                <1>     xor eax, eax
  1497 00000E49 89C3                <1>     mov ebx, eax
  1498 00000E4B FFC3                <1>     inc ebx
  1499                              <1> ;Here eax=0 and ebx=1.
  1500 00000E4D F6450FFF            <1>     test byte [rbp + drvBlk.bNumFAT], -1    ;If 0 FATs, the FAT is invalid!
  1501 00000E51 0F45C3              <1>     cmovnz eax, ebx                         ;Set if we have a FAT
  1502 00000E54 8B551B              <1>     mov edx, dword [rbp + drvBlk.dHiddSec]
  1503 00000E57 0FB75D0A            <1>     movzx ebx, word [rbp + drvBlk.wBpS]
  1504 00000E5B 0FB74D12            <1>     movzx ecx, word [rbp + drvBlk.wTotSec16]
  1505 00000E5F 85C9                <1>     test ecx, ecx
  1506 00000E61 7503                <1>     jnz .lgpStor
  1507 00000E63 8B4D1F              <1>     mov ecx, dword [rbp + drvBlk.dTotSec32]
  1508                              <1> .lgpStor:
  1509                              <1> ;Enter with:
  1510                              <1> ;ax = 0 if unformatted, 1 if any FAT type (means can call CHS function)
  1511                              <1> ;rbx = Sector size in bytes
  1512                              <1> ;rcx = Last LBA block address + 1 (Count of sectors)
  1513                              <1> ;rdx = Hidden sectors
  1514 00000E66 66894704            <1>     mov word [rdi + lbaParamsBlock.wFSType], ax
  1515 00000E6A 48895F08            <1>     mov qword [rdi + lbaParamsBlock.qSectorSize], rbx
  1516 00000E6E 48894F10            <1>     mov qword [rdi + lbaParamsBlock.qNumSectors], rcx
  1517 00000E72 48895718            <1>     mov qword [rdi + lbaParamsBlock.qStartSector], rdx
  1518 00000E76 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1519 00000E7A 2503000000          <1>     and eax, devFixed | devChgLine
  1520 00000E7F 66894702            <1>     mov word [rdi + lbaParamsBlock.wDevFlgs], ax
  1521                              <1>     return 
    13                              <2> %%_ret:
    14 00000E83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1522                              <1> ;---------------------------------------------------------------------------
  1523                              <1> ;                    CHS IO requests are structured here
  1524                              <1> ;---------------------------------------------------------------------------
  1525                              <1> .ioWrite:
  1526 00000E84 0F85BB000000        <1>     jnz .lbaWrite
  1527                              <1> ;Here for CHS write tracks. 
  1528 00000E8A BB00830000          <1>     mov ebx, 8300h  ;Write sectors
  1529                              <1> .iochsRW:
  1530 00000E8F E86F000000          <1>     call .ioChsToLba
  1531 00000E94 E853000000          <1>     call .ioChsSanity
  1532 00000E99 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector]
  1533 00000E9D 01C1                <1>     add ecx, eax    ;Add the zero based sector number to start of "track"
  1534 00000E9F 0FB77707            <1>     movzx esi, word [rdi + chsIOBlock.wNumSectors]  ;How many sectors to IO on
  1535                              <1> .iochsCmn:
  1536 00000EA3 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1537 00000EA5 488B5F09            <1>     mov rbx, qword [rdi + chsIOBlock.pXferBuffer]   ;And get buffer ptr in rbx
  1538 00000EA9 E9B7000000          <1>     jmp .ioEp
  1539                              <1> .ioRead:
  1540 00000EAE 0F858A000000        <1>     jnz .lbaRead
  1541                              <1> ;Here for CHS read tracks.
  1542 00000EB4 BB00820000          <1>     mov ebx, 8200h  ;Read sectors
  1543 00000EB9 EBD4                <1>     jmp short .iochsRW
  1544                              <1> .ioFormat:
  1545                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1546                              <1> ;
  1547                              <1> ;We start by setting DASD parameters but for now we do nothing so just
  1548                              <1> ; clear the flag.
  1549 00000EBB 9C                  <1>     pushfq
  1550 00000EBC 668165377FFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSetDASD
  1551 00000EC2 9D                  <1>     popfq
  1552                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1553 00000EC3 756F                <1>     jnz .lbaFmt
  1554                              <1> ;Here for CHS format track.
  1555 00000EC5 BB00850000          <1>     mov ebx, 8500h  ;Format sectors
  1556 00000ECA F60201              <1>     test byte [rdx + chsFormatBlock.bSpecFuncs], 1  ;If this bit clear do format
  1557 00000ECD 7404                <1>     jz .iochsFmtCmn
  1558                              <1> ;Else we should respond if the sector table is valid. Since our BIOS is crap
  1559                              <1> ; we always return OK and let the format call fail. This would possibly be
  1560                              <1> ; dangerous but its not since the BIOS CHS emulation is very meh.
  1561 00000ECF C60200              <1>     mov byte [rdx + chsFormatBlock.bSpecFuncs], 0   ;All ok!
  1562                              <1>     return
    13                              <2> %%_ret:
    14 00000ED2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1563                              <1> .iochsFmtCmn:
  1564 00000ED3 E82B000000          <1>     call .ioChsToLba    ;Get the LBA of the first sector of the track in ecx
  1565 00000ED8 0FB77517            <1>     movzx esi, word [rbp + drvBlk.wSecPerTrk]   ;Fmt/Verify this many sectors
  1566 00000EDC 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1567 00000EDE E982000000          <1>     jmp .ioEp
  1568                              <1> .ioVerify:
  1569 00000EE3 7548                <1>     jnz .lbaVerify
  1570                              <1> ;Here for CHS verify track.
  1571 00000EE5 BB00840000          <1>     mov ebx, 8400h
  1572 00000EEA EBE7                <1>     jmp short .iochsFmtCmn
  1573                              <1> 
  1574                              <1> .ioChsSanity:
  1575                              <1> ;Checks that the read/write will be on one track and makes sense.
  1576                              <1> ;Input: ebx = BIOS function to call. Preserved.
  1577                              <1> ;       ecx = LBA of start sector.
  1578                              <1> ;       rdi -> chsIOBlock
  1579                              <1> ;       rbp -> Drive block ptr
  1580 00000EEC 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector] ;Zero based
  1581 00000EF0 FFC0                <1>     inc eax         ;Make it 1 based for the comparison
  1582 00000EF2 66034707            <1>     add ax, word [rdi + chsIOBlock.wNumSectors]
  1583 00000EF6 663B4517            <1>     cmp ax, word [rbp + drvBlk.wSecPerTrk]  ;Does this surpass num sect/trck?
  1584                              <1>     retna
    77                              <2> cret na
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EFA 7701                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EFC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1585                              <1> .ioctlerr:
  1586 00000EFD 5B                  <1>     pop rbx ;Pop the ret addr off the stack and tail to the bad media
  1587 00000EFE E976FDFFFF          <1>     jmp .iobadMed
  1588                              <1> .ioChsToLba:
  1589                              <1> ;Gets the first sector of the track selected by this call.
  1590                              <1> ;Works with the values set in the bpb of drvBlk which isn't ideal...
  1591                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
  1592                              <1> ;Input: ebx = BIOS Function to call. Preserved.
  1593                              <1> ;Output: ecx = eax = LBA address for the first sector of the track
  1594                              <1> ;        rdi -> chsFormatBlock or IOBlock
  1595 00000F03 4889D7              <1>     mov rdi, rdx
  1596 00000F06 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
  1597 00000F0A 0FB74F03            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartCyl]
  1598 00000F0E 663B4D39            <1>     cmp cx, word [rbp + drvBlk.wNumCyl]
  1599 00000F12 73E9                <1>     jae .ioctlerr
  1600 00000F14 FFC1                <1>     inc ecx ;Inc as we get it as a zero based number
  1601 00000F16 F7E1                <1>     mul ecx
  1602 00000F18 0FB74F01            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartHead]
  1603 00000F1C 663B4D19            <1>     cmp cx, word [rbp + drvBlk.wNumHeads]
  1604 00000F20 73DB                <1>     jae .ioctlerr 
  1605 00000F22 01C8                <1>     add eax, ecx
  1606 00000F24 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
  1607 00000F28 F7E1                <1>     mul ecx
  1608 00000F2A 89C1                <1>     mov ecx, eax
  1609                              <1>     return
    13                              <2> %%_ret:
    14 00000F2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1610                              <1> ;---------------------------------------------------------------------------
  1611                              <1> ;                    LBA IO requests are structured here
  1612                              <1> ;---------------------------------------------------------------------------
  1613                              <1> .lbaVerify:
  1614 00000F2D B800840000          <1>     mov eax, 8400h  ;Verify sectors
  1615 00000F32 EB05                <1>     jmp short .lbaFmtCmn
  1616                              <1> .lbaFmt:
  1617 00000F34 B800850000          <1>     mov eax, 8500h  ;Format sectors
  1618                              <1> .lbaFmtCmn:
  1619 00000F39 803A10              <1>     cmp byte [rdx + lbaIOBlock.size], lbaFormatBlock_size
  1620 00000F3C EB13                <1>     jmp short .lbaCmn
  1621                              <1> .lbaRead:
  1622 00000F3E B800820000          <1>     mov eax, 8200h  ;Read sectors
  1623 00000F43 EB05                <1>     jmp short .lbaRWCmn
  1624                              <1> .lbaWrite:
  1625 00000F45 B800830000          <1>     mov eax, 8300h  ;Write sectors
  1626                              <1> .lbaRWCmn:
  1627 00000F4A 488B5A10            <1>     mov rbx, qword [rdx + lbaIOBlock.xferBuffer]
  1628 00000F4E 803A18              <1>     cmp byte [rdx + lbaIOBlock.size], lbaIOBlock_size
  1629                              <1> .lbaCmn:
  1630 00000F51 0F8518FDFFFF        <1>     jne .iobadCmdLen
  1631                              <1> ;Setup the vars for block IO
  1632 00000F57 4889D7              <1>     mov rdi, rdx
  1633                              <1> ;Formally numSectors is a byte and will only be treated as a byte but
  1634                              <1> ; we reserve the following three bytes for future updates to allow
  1635                              <1> ; up to a dword of contiguous sectors to be written in one go.
  1636 00000F5A 31F6                <1>     xor esi, esi
  1637 00000F5C 877701              <1>     xchg esi, dword [rdi + lbaFormatBlock.numSectors]
  1638 00000F5F 8B4F08              <1>     mov ecx, dword [rdi + lbaFormatBlock.startSector]
  1639 00000F62 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]  ;Point to sector in partition
  1640                              <1> .ioEp:
  1641 00000F65 89C2                <1>     mov edx, eax    ;Move the function number into dh (and zero dl)
  1642 00000F67 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
  1643                              <1> .ioLp:
  1644 00000F6A E899FBFFFF          <1>     call .blkIODirect
  1645 00000F6F 0F8253FBFFFF        <1>     jc .ioDoErr
  1646 00000F75 E859FBFFFF          <1>     call .ioAdvIOCTL
  1647 00000F7A 75EE                <1>     jnz .ioLp
  1648                              <1>     return
    13                              <2> %%_ret:
    14 00000F7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1649                              <1> ;---------------------------------------------------------------------------
  1650                              <1> 
  1651                              <1> ;---------------------------------------------------------------------------
  1652                              <1> ;                           Misc GENIO routines 
  1653                              <1> ;---------------------------------------------------------------------------
  1654                              <1> .ioSetIds:
  1655                              <1> ;We get the BS from the disk, write the new metadata and write it
  1656                              <1> ; back to the disk. If the BS is not extended, we error exit with
  1657                              <1> ; unknown media error.
  1658                              <1> ;Input: rbp -> drvBlk
  1659                              <1> ;       rdx -> idParamBlk to set from
  1660 00000F7D 52                  <1>     push rdx    ;Save the ptr to the parameter block
  1661 00000F7E E860000000          <1>     call .ioGetSetSetup ;Return rbx -> Extended Bootsector structure
  1662 00000F83 5A                  <1>     pop rdx
  1663                              <1>     retc    ;If CF=CY, just return. Error info has been setup already
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F84 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F86 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1664                              <1> ;Now we setup the info in the BS we just read and write the BS back.
  1665                              <1> ;rbx points to the extBS structure
  1666 00000F87 B917000000          <1>     mov ecx, 4+11+8 ;Lengths of ID, Label and FS string 
  1667 00000F8C 488D7202            <1>     lea rsi, qword [rdx + idParamBlk.volId]
  1668 00000F90 488D7B03            <1>     lea rdi, qword [rbx + extBs.volId]
  1669 00000F94 F3A4                <1>     rep movsb
  1670                              <1> ;Now write the bootsector back
  1671 00000F96 31C9                <1>     xor ecx, ecx    ;Write Sector 0...
  1672 00000F98 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]
  1673 00000F9B 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
  1674 00000F9F 488D1D8C050000      <1>     lea rbx, .inBuffer  ;Use the in sector buffer.
  1675 00000FA6 BE05000000          <1>     mov esi, 5
  1676                              <1> .iosidLp:
  1677 00000FAB B801830000          <1>     mov eax, 8301h  ;LBA Write function (write 1 sector)
  1678 00000FB0 E853040000          <1>     call .callI33h
  1679 00000FB5 0F8382FBFFFF        <1>     jnc .bioExit   ;Setup the last access time and disk and return to caller
  1680                              <1> ;Here if an error. AH has the BIOS error code. Return with
  1681                              <1> ; ZF=ZE to indicate we are returning a BIOS code!
  1682 00000FBB E8AAFBFFFF          <1>     call .bioReset  ;Reset the drive. Saves error code in ah
  1683 00000FC0 FFCE                <1>     dec esi
  1684 00000FC2 75E7                <1>     jnz .iosidLp
  1685                              <1> ;Exit by translating BIOS error to DOS error and putting it in the reqpkt.
  1686                              <1> ; We return to the caller directly. The rest call sets the last drive to -1.
  1687                              <1> ; Dont update time fields.
  1688 00000FC4 E9B9F6FFFF          <1>     jmp .errorXlat 
  1689                              <1> 
  1690                              <1> .ioGetIds:
  1691                              <1> ;We get the BS from the disk and populate the field from the BS.
  1692                              <1> ;Input: rbp -> drvBlk
  1693                              <1> ;       rdx -> idParamBlk to set from
  1694 00000FC9 52                  <1>     push rdx    ;Save the ptr to the parameter block
  1695 00000FCA E814000000          <1>     call .ioGetSetSetup ;Return rbx -> Extended Bootsector structure
  1696 00000FCF 5A                  <1>     pop rdx
  1697                              <1>     retc    ;If CF=CY, just return. Error info has been setup already
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000FD0 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000FD2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1698                              <1> ;rbx points to the extBS structure
  1699 00000FD3 B917000000          <1>     mov ecx, 4+11+8 ;Lengths of ID, Label and FS string 
  1700 00000FD8 488D7A02            <1>     lea rdi, qword [rdx + idParamBlk.volId]
  1701 00000FDC 488D7303            <1>     lea rsi, qword [rbx + extBs.volId]
  1702 00000FE0 F3A4                <1>     rep movsb
  1703                              <1>     return
    13                              <2> %%_ret:
    14 00000FE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1704                              <1> 
  1705                              <1> .ioGetSetSetup:
  1706                              <1> ;Reads a bootsector in for us and checks it's the right kind of thing
  1707                              <1> ; for us to do this op on. All failures set up the return information
  1708                              <1> ; for us.
  1709                              <1> ;Sets up the BIOS/DOS error translation on hard error for us.
  1710 00000FE3 E852000000          <1>     call .ioIdCheckChange   ;Do this to ensure no fail in the read below
  1711 00000FE8 E848FAFFFF          <1>     call .bbpbReadBS        ;Read BS for the drive in rbp. sets rbx to buffer
  1712 00000FED 7244                <1>     jc .iogssHardErr        ;This returns CF=CY and ZF=ZE
  1713                              <1> ;Just do a quick jump check here too to make sure we're a decent BPB.
  1714 00000FEF 803B69              <1>     cmp byte [rbx + oemHeader.jump], 069h       ;Direct jump has no NOP
  1715 00000FF2 7410                <1>     je .iogssOk
  1716 00000FF4 803BE9              <1>     cmp byte [rbx + oemHeader.jump], 0E9h       ;Near jump has no NOP
  1717 00000FF7 740B                <1>     je .iogssOk
  1718 00000FF9 803BEB              <1>     cmp byte [rbx + oemHeader.jump], 0EBh       ;Short jump has a NOP
  1719 00000FFC 752E                <1>     jne .iogssBadBS
  1720 00000FFE 807B0290            <1>     cmp byte [rbx + oemHeader.jump + 2], 090h   ;NOP should be here
  1721 00001002 7528                <1>     jne .iogssBadBS
  1722                              <1> .iogssOk:
  1723 00001004 4881C30B000000      <1>     add rbx, oemHeader_size ;Point rbx to the bpb itself
  1724 0000100B E8B6F9FFFF          <1>     call .getFATType    ;Get in dl if we are FAT32 or CF=CY if bad
  1725 00001010 721A                <1>     jc .iogssBadBS
  1726 00001012 80FA20              <1>     cmp dl, bpbFat32    ;Did we get a FAT32 disk?
  1727 00001015 B819000000          <1>     mov eax, bpb_size
  1728 0000101A B935000000          <1>     mov ecx, bpb32_size
  1729 0000101F 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
  1730 00001022 4801CB              <1>     add rbx, rcx        ;Move rbx to point to the extended signature
  1731 00001025 807B0229            <1>     cmp byte [rbx + extBs.bootSig], extBsSig    ;Check ext boot sig?
  1732                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001029 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000102B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1733                              <1> .iogssBadBS:
  1734                              <1> ;Bad bootsectors come through here
  1735 0000102C B807000000          <1>     mov eax, drvBadMed
  1736 00001031 85C0                <1>     test eax, eax   ;Make ZF=NZ for ioDoErr to route us correctly
  1737                              <1> .iogssHardErr:
  1738 00001033 E890FAFFFF          <1>     call .ioDoErr   ;xlat BIOS code if needed (ZF=ZE). Setup for Error return
  1739 00001038 F9                  <1>     stc
  1740                              <1>     return
    13                              <2> %%_ret:
    14 00001039 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1741                              <1> 
  1742                              <1> .ioIdCheckChange:
  1743                              <1> ;We don't want to trigger an error (a disk swap error) on BIOS io so first
  1744                              <1> ; do a quick media check. If the media has been changed, the BIOS wrapper
  1745                              <1> ; will set the flag for all drives for us.
  1746 0000103A E881020000          <1>     call .checkDevFixed ;If fixed, just return
  1747                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000103F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001041 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1748 00001042 E872020000          <1>     call .checkHasChangeline
  1749                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001047 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001049 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1750 0000104A 52                  <1>     push rdx
  1751 0000104B 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
  1752 0000104F B800160000          <1>     mov eax, 1600h
  1753 00001054 E8AF030000          <1>     call .callI33h
  1754                              <1> ;I33 wrapper sets the device changed bit on all devs if a change detected
  1755                              <1>     ;jnc .ioidccExit
  1756                              <1>     ;mov eax, devChgd    ;Set the device changed bit on all devices
  1757                              <1>     ;call .setBitsForAllDevs
  1758                              <1> ;.ioidccExit:
  1759 00001059 5A                  <1>     pop rdx
  1760                              <1>     return
    13                              <2> %%_ret:
    14 0000105A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1761                              <1> 
  1762                              <1> .ioSetAccessFlag:
  1763                              <1> ;Sets/Clears the unformatted bit of a device block.
  1764 0000105B F64201FF            <1>     test byte [rdx + accFlgBlk.bAccMode], -1
  1765 0000105F 7407                <1>     jz .iosafNoAcc
  1766                              <1> ;Enables access if the access mode is non-zero
  1767 00001061 66816537FFFD        <1>     and word [rbp + drvBlk.wDevFlgs], ~devUnFmt
  1768                              <1>     return
    13                              <2> %%_ret:
    14 00001067 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1769                              <1> .iosafNoAcc:
  1770                              <1> ;Disables access if the access mode is zero 
  1771 00001068 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt
  1772                              <1>     return
    13                              <2> %%_ret:
    14 0000106E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1773                              <1> .ioGetAccessFlag:
  1774                              <1> ;Gets the state of the unformatted bit of a device block
  1775 0000106F C6420100            <1>     mov byte [rdx + accFlgBlk.bAccMode], 0  ;Init to clear, no access
  1776 00001073 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1777                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001079 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000107B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1778 0000107C FE4201              <1>     inc byte [rdx + accFlgBlk.bAccMode] ;If bit clear, set mode to access ok!
  1779                              <1>     return
    13                              <2> %%_ret:
    14 0000107F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1780                              <1> 
  1781                              <1> .ioTrackTbl:
  1782 00001080 3F00                <1>     dw maxTrackTblSz    ;Have a maximum of 63 sectors per track
  1783                              <1> ;Each row is a pair of words:
  1784                              <1> ;   dw Sector number, Sector size
  1785 00001082 01000002            <1>     dw 1, 200h
  1786 00001086 02000002            <1>     dw 2, 200h
  1787 0000108A 03000002            <1>     dw 3, 200h
  1788 0000108E 04000002            <1>     dw 4, 200h
  1789 00001092 05000002            <1>     dw 5, 200h
  1790 00001096 06000002            <1>     dw 6, 200h
  1791 0000109A 07000002            <1>     dw 7, 200h
  1792 0000109E 08000002            <1>     dw 8, 200h
  1793 000010A2 09000002            <1>     dw 9, 200h
  1794 000010A6 0A000002            <1>     dw 10, 200h
  1795 000010AA 0B000002            <1>     dw 11, 200h
  1796 000010AE 0C000002            <1>     dw 12, 200h
  1797 000010B2 0D000002            <1>     dw 13, 200h
  1798 000010B6 0E000002            <1>     dw 14, 200h
  1799 000010BA 0F000002            <1>     dw 15, 200h
  1800 000010BE 10000002            <1>     dw 16, 200h
  1801 000010C2 11000002            <1>     dw 17, 200h
  1802 000010C6 12000002            <1>     dw 18, 200h
  1803 000010CA 13000002            <1>     dw 19, 200h
  1804 000010CE 14000002            <1>     dw 20, 200h
  1805 000010D2 15000002            <1>     dw 21, 200h
  1806 000010D6 16000002            <1>     dw 22, 200h
  1807 000010DA 17000002            <1>     dw 23, 200h
  1808 000010DE 18000002            <1>     dw 24, 200h
  1809 000010E2 19000002            <1>     dw 25, 200h
  1810 000010E6 1A000002            <1>     dw 26, 200h
  1811 000010EA 1B000002            <1>     dw 27, 200h
  1812 000010EE 1C000002            <1>     dw 28, 200h
  1813 000010F2 1D000002            <1>     dw 29, 200h
  1814 000010F6 1E000002            <1>     dw 30, 200h
  1815 000010FA 1F000002            <1>     dw 31, 200h
  1816 000010FE 20000002            <1>     dw 32, 200h
  1817 00001102 21000002            <1>     dw 33, 200h
  1818 00001106 22000002            <1>     dw 34, 200h
  1819 0000110A 23000002            <1>     dw 35, 200h
  1820 0000110E 24000002            <1>     dw 36, 200h
  1821 00001112 25000002            <1>     dw 37, 200h
  1822 00001116 26000002            <1>     dw 38, 200h
  1823 0000111A 27000002            <1>     dw 39, 200h
  1824 0000111E 28000002            <1>     dw 40, 200h
  1825 00001122 29000002            <1>     dw 41, 200h
  1826 00001126 2A000002            <1>     dw 42, 200h
  1827 0000112A 2B000002            <1>     dw 43, 200h
  1828 0000112E 2C000002            <1>     dw 44, 200h
  1829 00001132 2D000002            <1>     dw 45, 200h
  1830 00001136 2E000002            <1>     dw 46, 200h
  1831 0000113A 2F000002            <1>     dw 47, 200h
  1832 0000113E 30000002            <1>     dw 48, 200h
  1833 00001142 31000002            <1>     dw 49, 200h
  1834 00001146 32000002            <1>     dw 50, 200h
  1835 0000114A 33000002            <1>     dw 51, 200h
  1836 0000114E 34000002            <1>     dw 52, 200h
  1837 00001152 35000002            <1>     dw 53, 200h
  1838 00001156 36000002            <1>     dw 54, 200h
  1839 0000115A 37000002            <1>     dw 55, 200h
  1840 0000115E 38000002            <1>     dw 56, 200h
  1841 00001162 39000002            <1>     dw 57, 200h
  1842 00001166 3A000002            <1>     dw 58, 200h
  1843 0000116A 3B000002            <1>     dw 59, 200h
  1844 0000116E 3C000002            <1>     dw 60, 200h
  1845 00001172 3D000002            <1>     dw 61, 200h
  1846 00001176 3E000002            <1>     dw 62, 200h
  1847 0000117A 3F000002            <1>     dw 63, 200h
  1848                              <1> 
  1849                              <1> .getLogicalDev:   ;Function 23
  1850                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
  1851                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
  1852 0000117E 31C0                <1>     xor eax, eax
  1853 00001180 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1854 00001186 7428                <1>     jz .gldExit
  1855 00001188 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
  1856 0000118C 488D2D67140000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
  1857                              <1> .gldLp:
  1858 00001193 384508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
  1859 00001196 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
  1860 0000119B 75F6                <1>     jne .gldLp
  1861 0000119D 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
  1862 000011A3 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
  1863 000011A8 74E9                <1>     jz .gldLp 
  1864 000011AA 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
  1865 000011AE FFC0                <1>     inc eax ;Make it 1 based
  1866                              <1> .gldExit:
  1867 000011B0 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
  1868                              <1>     return
    13                              <2> %%_ret:
    14 000011B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1869                              <1> 
  1870                              <1> .setLogicalDev:   ;Function 24
  1871 000011B4 E823010000          <1>     call .setDrvOwner  ;Set the unit as the owner of this BIOS drive!
  1872                              <1>     return
    13                              <2> %%_ret:
    14 000011B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1873                              <1> 
  1874                              <1> .ioctlQuery:      ;Function 25
  1875                              <1> ;Called with a Generic IOCTL packet in rbx
  1876                              <1> ;We check to see that major/minor codes are valid functions for us.
  1877                              <1> ;Major code is always 08h
  1878 000011BA 807B0D08            <1>     cmp byte [rbx + ioctlReqPkt.majfun], 08h
  1879 000011BE 751B                <1>     jne .ioctlQErr
  1880 000011C0 0FB6430E            <1>     movzx eax, byte [rbx + ioctlReqPkt.minfun]
  1881 000011C4 A890                <1>     test al, 90h    ;If either of these bits are set, dont recognise func
  1882 000011C6 7513                <1>     jnz .ioctlQErr
  1883                              <1> ;Convert LBA functions to CHS and Writes functions to Read functions
  1884 000011C8 245F                <1>     and al, 5Fh ;Turn off bits 7 and 5, bot optionally set
  1885 000011CA B905000000          <1>     mov ecx, ioctlQTblL
  1886 000011CF 488D3D8AFAFFFF      <1>     lea rdi, .ioctlQTbl ;Table up near IOCTL table
  1887 000011D6 F2AE                <1>     repne scasb
  1888                              <1>     rete    ;Just return if found
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011D8 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011DA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1889                              <1> .ioctlQErr:
  1890                              <1> ;Here we set the error code. We dont recognise the IOCTL command.
  1891 000011DB B003                <1>     mov al, drvBadCmd
  1892 000011DD E931F5FFFF          <1>     jmp .errorExit
  1893                              <1> 
  1894                              <1> .setupDrive:
  1895                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
  1896                              <1> ; sets up internal vars according to it. 
  1897                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
  1898                              <1> ;Output: rbp = Points to the drvBlk
  1899 000011E2 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
  1900                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011E6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011E8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1901 000011E9 488D2D0A140000      <1>     lea rbp, .drvBlkTbl
  1902                              <1> .sdChk:
  1903 000011F0 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
  1904                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011F3 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011F5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1905 000011F6 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1906 000011FA 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1907 00001201 75ED                <1>     jne .sdChk  ;Keep looping until end of table
  1908 00001203 58                  <1>     pop rax     ;Pop return address off the stack
  1909 00001204 B007                <1>     mov al, drvBadMed
  1910 00001206 E908F4FFFF          <1>     jmp .writeEntryError
  1911                              <1> 
  1912                              <1> .checkSwapIO:
  1913                              <1> ;Checks if the reason for an error mid IO operation was
  1914                              <1> ; really media being swapped.
  1915 0000120B E8B0000000          <1>     call .checkDevFixed ;If the dev is fixed, skip checking swap
  1916                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001210 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001212 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1917 00001213 80FC06              <1>     cmp ah, 06h         ;ah = 06 is BIOS Drive changed error code 
  1918                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001216 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001218 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1919                              <1> ;Here the BIOS is reporting that the media was swapped. Check the media
  1920                              <1> ; to see if the drive really was swapped. 
  1921                              <1> ;We start by checking the open count. If it is zero, we never report
  1922                              <1> ; an illegal disk swap. This prevents this error from being thrown
  1923                              <1> ; if no files are open.
  1924 00001219 E8B7000000          <1>     call .checkOpen ;If opcnt = 0, ignore this error.
  1925                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000121E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001220 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1926                              <1> ;Here, if we determine that a media swap occured, we must report a 
  1927                              <1> ; bad disk change. That means, unsure or no swap simply return the 
  1928                              <1> ; error code. 
  1929 00001221 53                  <1>     push rbx
  1930 00001222 51                  <1>     push rcx
  1931 00001223 52                  <1>     push rdx
  1932 00001224 56                  <1>     push rsi
  1933 00001225 57                  <1>     push rdi
  1934 00001226 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get original meddesc byte
  1935 0000122A 50                  <1>     push rax                                ;and save it on the stack
  1936 0000122B E848F6FFFF          <1>     call .updateBpb     ;Update the BPB, if ok, rsi -> extBS  
  1937 00001230 7222                <1>     jc .csiogetbpberr   ;If error in getting the BPB, bubble it up
  1938 00001232 58                  <1>     pop rax             ;Get back the FAT byte in al
  1939 00001233 E856000000          <1>     call .checkFATSame  ;Returns status in eax
  1940 00001238 85C0                <1>     test eax, eax       ;Set sign bit to exit via bad disk change exit
  1941 0000123A B800060000          <1>     mov eax, 0600h      ;Else, return Changeline detected (ah = 06h)
  1942                              <1> .csioExit:
  1943 0000123F 5F                  <1>     pop rdi
  1944 00001240 5E                  <1>     pop rsi
  1945 00001241 5A                  <1>     pop rdx
  1946 00001242 59                  <1>     pop rcx
  1947 00001243 5B                  <1>     pop rbx
  1948                              <1> ;Return if returning disk swap status unsure or no swap!
  1949                              <1> ;Return if updateBPB failed. Error code for this in ah
  1950                              <1>     retns
    85                              <2> cret ns
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001244 7801                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001246 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1951                              <1> ;Fall through if disk swap check returns swapped! Bad Disk change error!
  1952                              <1> ;Restore the stack to return directly to driver error handler and not caller. 
  1953                              <1> ;Place DOS error code into al
  1954 00001247 58                  <1>     pop rax ;Pop check io swap return address
  1955 00001248 58                  <1>     pop rax ;Pop do io function return address
  1956 00001249 58                  <1>     pop rax ;Pop read/write function return address
  1957 0000124A B80F000000          <1>     mov eax, drvBadDskChnge
  1958 0000124F E9BFF4FFFF          <1>     jmp .errorExit
  1959                              <1> .csiogetbpberr:
  1960                              <1> ;Return the error code from updateBPB
  1961 00001254 5B                  <1>     pop rbx             ;Pop the FAT byte off the stack, preserving ah = error
  1962 00001255 31DB                <1>     xor ebx, ebx        ;Clear SF
  1963 00001257 EBE6                <1>     jmp short .csioExit ;and return with rax = Error code from updatebpb
  1964                              <1>     
  1965                              <1> .checkSwap:
  1966                              <1> ;Checks if the media represented by drvBlk has been swapped when it 
  1967                              <1> ; shouldn't've been swapped.
  1968                              <1> ;Input: rbp -> drvBlk to check for
  1969                              <1> ;Output: CF=NC: All ok.
  1970                              <1> ;        CF=CY: Error in getting updated BPB. 
  1971                              <1> ;               ZF=ZE: AH = BIOS error code
  1972                              <1> ;               ZF=NZ: AL = DOS error code
  1973                              <1> ;   If an illegal disk swap is detected, then this call returns directly
  1974                              <1> ;   and doesnt bubble up to the caller. 
  1975 00001259 E862000000          <1>     call .checkDevFixed ;If the dev is fixed, skip checking swap
  1976                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000125E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001260 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1977 00001261 E86F000000          <1>     call .checkOpen
  1978                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001266 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001268 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1979 00001269 E859000000          <1>     call .checkMediaChange
  1980                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000126E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001270 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1981                              <1> ;Since the open count is non-zero and a media swap has been seen (since
  1982                              <1> ; the flag was set) we update the BPB and check if the media is the 
  1983                              <1> ; same as the previous media. 
  1984 00001271 E802F6FFFF          <1>     call .updateBpb     ;Update the BPB. Destroys rbx and rsi!
  1985                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001276 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001278 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1986 00001279 E815000000          <1>     call .checkVolumeSame
  1987 0000127E 85C0                <1>     test eax, eax
  1988                              <1>     retns   ;If the sign bit is not set (i.e. unsure or no change) return ok
    85                              <2> cret ns
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001280 7801                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001282 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1989                              <1> ;Else, we now return a bad disk change!
  1990 00001283 58                  <1>     pop rax ;Pop original return address off the stack
  1991 00001284 B80F000000          <1>     mov eax, drvBadDskChnge  ;Driver error code
  1992 00001289 E985F4FFFF          <1>     jmp .errorExit  ;Place error code in packet and return
  1993                              <1> 
  1994                              <1> ;Input for the below two functions:
  1995                              <1> ;   rsi -> extBS of the BPB that was just read in!
  1996                              <1> ;Output: eax = 0 means unsure, eax = 1 means no change, eax = -1 means change!
  1997                              <1> ;           Do not rely on flags as extBsSig may be something random!
  1998                              <1> .checkFATSame:
  1999                              <1> ;At this point, we are unsure of the media swap status. 
  2000 0000128E 3A4514              <1>     cmp al, byte [rbp + drvBlk.bMedDesc]
  2001 00001291 751D                <1>     jne .cvsChange  ;If they are not equal, there mustve been a change
  2002                              <1> ;The FAT media byte is the same so how about literally anything else?
  2003                              <1> .checkVolumeSame:
  2004                              <1> ;If the volume has an extended BPB, we check the serial number. If they are 
  2005                              <1> ; the same, we then say no change. Else, the volume has changed. 
  2006                              <1> ;Else, we report unknown. 
  2007                              <1> ;----------------------------------------------------------------------------
  2008                              <1> ;TODO: In the outer else, replace with a read of the filesystem volume label
  2009                              <1> ;      and implement in buildBPB a routine to read the volume label from the
  2010                              <1> ;      root directory of whatever drive.
  2011                              <1> ;----------------------------------------------------------------------------
  2012 00001293 31C0                <1>     xor eax, eax    ;Start off unsure
  2013 00001295 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
  2014                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001299 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000129B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2015                              <1> ;Here if we have an extended boot signature. 
  2016                              <1> ; Check the volume ids are equal
  2017 0000129C 50                  <1>     push rax
  2018 0000129D 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
  2019 000012A0 398580000000        <1>     cmp dword [rbp + drvBlk.volId], eax
  2020 000012A6 58                  <1>     pop rax
  2021 000012A7 7507                <1>     jne .cvsChange
  2022                              <1> .cvsNoChange:
  2023 000012A9 FFC0                <1>     inc eax         ;Make eax = 1, no change
  2024 000012AB E91E000000          <1>     jmp .clearMediaChange    ;Exit tail calling through this function
  2025                              <1> .cvsChange:
  2026 000012B0 FFC8                <1>     dec eax ;Make eax = -1, change
  2027 000012B2 880579020000        <1>     mov byte [.bLastDsk], al    ;Ensure we do a media check next time
  2028                              <1>     return
    13                              <2> %%_ret:
    14 000012B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2029                              <1> 
  2030                              <1> .checkHasChangeline:
  2031                              <1> ;Input: rbp -> drvBlk to check if it has a changeline
  2032                              <1> ;Output: ZF=ZE: Drive has no changeline support
  2033                              <1> ;        ZF=NZ: Drive has changeline support
  2034 000012B9 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
  2035                              <1>     return
    13                              <2> %%_ret:
    14 000012BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2036                              <1> 
  2037                              <1> .checkDevFixed:
  2038                              <1> ;Input: rbp -> drvBlk to check if fixed media or not
  2039                              <1> ;Output: ZF=ZE: Not fixed
  2040                              <1> ;        ZF=NZ: Fixed
  2041 000012C0 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
  2042                              <1>     return
    13                              <2> %%_ret:
    14 000012C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2043                              <1> 
  2044                              <1> .checkMediaChange:
  2045                              <1> ;Input: rbp -> drvBlk to check changed flag for
  2046                              <1> ;Output: ZF=ZE: No change
  2047                              <1> ;        ZF=NZ: Change
  2048 000012C7 66F745374000        <1>     test word [rbp + drvBlk.wDevFlgs], devChgd
  2049                              <1>     return
    13                              <2> %%_ret:
    14 000012CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2050                              <1> 
  2051                              <1> .clearMediaChange:
  2052                              <1> ;Input: rbp -> drvBlk to clear the devChanged bit for
  2053 000012CE 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devChgd
  2054                              <1> ;~~~~~~~~~~~~~~~~DEBUG~~~~~~~~~~~~~~~~
  2055                              <1> %if drvDbg
  2056                              <1>     push rsi
  2057                              <1>     lea rsi, .cmcstr
  2058                              <1>     call dbgPrintString
  2059                              <1>     pop rsi
  2060                              <1>     push rax
  2061                              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  2062                              <1>     add al, "A"
  2063                              <1>     call dbgPutch
  2064                              <1>     pop rax
  2065                              <1>     call dbgCrlf
  2066                              <1>     return
  2067                              <1> .cmcstr db "[DRIVER] Media Change bit cleared for drive ",0
  2068                              <1> %endif
  2069                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  2070                              <1>     return
    13                              <2> %%_ret:
    14 000012D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2071                              <1> 
  2072                              <1> .checkOpen:
  2073                              <1> ;Input: rbp -> drvBlk to check open count for
  2074                              <1> ;Output: ZF=ZE: Open count is 0
  2075                              <1> ;        ZF=NZ: Open count geq 0
  2076 000012D5 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
  2077                              <1>     return
    13                              <2> %%_ret:
    14 000012DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2078                              <1> 
  2079                              <1> .setDrvOwner:
  2080                              <1> ;If the drive is shared and the DOS drive pointed to by rbp is not the owner
  2081                              <1> ; of the BIOS drive, makes the DOS drive the owner.
  2082                              <1> ;Displays the swap drive message unless intercepted by the 2Fh/4A00h callback.
  2083                              <1> ;The device must already be setup in rbp for this to work.
  2084                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
  2085 000012DC 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
  2086                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000012E2 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000012E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2087 000012E5 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  2088                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000012EB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000012ED C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2089                              <1> ;Else, now we find the current owner of this drive letter :)
  2090 000012EE 8A4508              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
  2091 000012F1 488D3D02130000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
  2092                              <1> .cdtLp:
  2093 000012F8 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2094 000012FF 746B                <1>     je .cdtBadExit
  2095 00001301 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
  2096 00001304 740D                <1>     je .cdtNextEntry
  2097 00001306 384708              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
  2098 00001309 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
  2099                              <1>     ;Now we check if this is the current owner of the device?
  2100 0000130B 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
  2101 00001311 7505                <1>     jnz .cdtDevFnd
  2102                              <1> .cdtNextEntry:
  2103 00001313 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
  2104 00001316 EBE0                <1>     jmp short .cdtLp
  2105                              <1> .cdtDevFnd:
  2106                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
  2107                              <1> ; device) gains ownership.
  2108 00001318 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
  2109 0000131E 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
  2110                              <1> ;If a set map request, don't prompt the message!
  2111 00001324 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
  2112                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001328 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000132A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2113                              <1> 
  2114                              <1> ;Broadcast the disk-swap message for multitaskers to hook
  2115                              <1> ; and issue message (and skip the "not multitasking friendly"
  2116                              <1> ; section below)
  2117 0000132B 8A7709              <1>     mov dh, byte [rdi + drvBlk.bDOSNum] ;Unit that has lost ownership
  2118 0000132E 8A5509              <1>     mov dl, byte [rbp + drvBlk.bDOSNum] ;Unit that has gained ownership
  2119 00001331 31C9                <1>     xor ecx, ecx
  2120 00001333 B8004A0000          <1>     mov eax, 4A00h
  2121 00001338 CD2F                <1>     int 2Fh         ;If either ecx or cx = -1, return
  2122 0000133A 0FBFC9              <1>     movsx ecx, cx   ;Convert 16-bit responses to 32-bit
  2123 0000133D FFC1                <1>     inc ecx         ;If ecx = -1, we return
  2124                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000133F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001341 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2125                              <1> 
  2126                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  2127 00001342 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  2128 00001345 0441                <1>     add al, "A" ;Convert to a letter
  2129 00001347 88059B010000        <1>     mov byte [.strikeMsgLetter], al
  2130 0000134D 488D357C010000      <1>     lea rsi, .strikeMsg
  2131 00001354 B93C000000          <1>     mov ecx, .strikeMsgL
  2132                              <1> .cdtPrint:
  2133 00001359 AC                  <1>     lodsb   ;Get the char in al, inc rsi
  2134 0000135A CD29                <1>     int 29h ;Print char in al
  2135 0000135C FFC9                <1>     dec ecx
  2136 0000135E 75F9                <1>     jnz .cdtPrint
  2137                              <1> 
  2138 00001360 E821000000          <1>     call .cdtCleanKeyb  ;Clean the buffer!
  2139 00001365 E80E000000          <1>     call .cdtAwaitKeyb  ;Await until a char ready in a friendly way :)
  2140                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  2141                              <1> 
  2142 0000136A F8                  <1>     clc ;Indicate goodness through CF
  2143                              <1>     return
    13                              <2> %%_ret:
    14 0000136B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2144                              <1> .cdtBadExit:
  2145 0000136C 58                  <1>     pop rax
  2146 0000136D B807000000          <1>     mov eax, drvBadMed
  2147 00001372 F9                  <1>     stc ;Indicate badness through CF
  2148 00001373 E99BF3FFFF          <1>     jmp .errorExit
  2149                              <1> 
  2150                              <1> .cdtAwaitKeyb:
  2151 00001378 B800010000          <1>     mov eax, 0100h
  2152 0000137D CD36                <1>     int 36h ;If return ZF=ZE, we have no char in the buffer. Loop until we do!
  2153 0000137F 74F7                <1>     jz .cdtAwaitKeyb
  2154 00001381 31C0                <1>     xor eax, eax
  2155 00001383 CD36                <1>     int 36h ;Now pull the char!
  2156                              <1>     return
    13                              <2> %%_ret:
    14 00001385 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2157                              <1> .cdtCleanKeyb:
  2158 00001386 B800010000          <1>     mov eax, 0100h
  2159 0000138B CD36                <1>     int 36h ;If return ZF=NZ we have a char in the buffer, pull it!
  2160                              <1>     retz    ;Else ZF=ZE, no char, ready to await the keypress.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000138D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000138F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2161 00001390 31C0                <1>     xor eax, eax    ;Pull the char in the buffer from buffer
  2162 00001392 CD36                <1>     int 36h
  2163 00001394 EBF0                <1>     jmp short .cdtCleanKeyb
  2164                              <1> 
  2165                              <1> .ioSetVolLbl:
  2166                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
  2167                              <1> ;Input: rbx -> io request packet
  2168                              <1> ;       rbp -> drvBlk to get volume ID from
  2169                              <1> ;Output: Pointer placed in io request packet
  2170 00001396 50                  <1>     push rax
  2171 00001397 488D4574            <1>     lea rax, qword [rbp + drvBlk.volLab]    ;Get the volLbl from the BPB
  2172 0000139B 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
  2173 0000139F 58                  <1>     pop rax
  2174 000013A0 C3                  <1>     ret
  2175                              <1> 
  2176                              <1> .getTime:
  2177                              <1> ;Gets the current time in a format ready to be used for disk access.
  2178 000013A1 31C0                <1>     xor eax, eax
  2179 000013A3 CD3A                <1>     int 3Ah
  2180 000013A5 0FB7D2              <1>     movzx edx, dx
  2181 000013A8 C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
  2182 000013AB 09D1                <1>     or ecx, edx ;Store the current time count into ecx
  2183 000013AD 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
  2184 000013AF 740E                <1>     jz .stStore
  2185 000013B1 0FB6C0              <1>     movzx eax, al
  2186 000013B4 51                  <1>     push rcx    ;Save the current time count
  2187 000013B5 B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
  2188 000013BA F7E1                <1>     mul ecx
  2189 000013BC 59                  <1>     pop rcx
  2190 000013BD 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
  2191                              <1> .stStore:
  2192 000013BF F8                  <1>     clc
  2193                              <1>     return
    13                              <2> %%_ret:
    14 000013C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2194                              <1> 
  2195                              <1> .setTime:
  2196                              <1> ;Sets the current time to the disk drive and resets the access counter
  2197                              <1> ;Preserves all registers and edits .bAccCnt and .dAccTime for rbp -> drvBlk
  2198 000013C1 50                  <1>     push rax
  2199 000013C2 51                  <1>     push rcx
  2200 000013C3 52                  <1>     push rdx
  2201 000013C4 E8D8FFFFFF          <1>     call .getTime   ;Return in ecx the time. eax and edx trashed.
  2202 000013C9 894D70              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
  2203 000013CC C6055D01000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
  2204 000013D3 5A                  <1>     pop rdx
  2205 000013D4 59                  <1>     pop rcx
  2206 000013D5 58                  <1>     pop rax
  2207                              <1>     return
    13                              <2> %%_ret:
    14 000013D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2208                              <1> 
  2209                              <1> .checkTime:
  2210                              <1> ;Does the time/access count check :)
  2211                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
  2212 000013D7 E8C5FFFFFF          <1>     call .getTime   ;Returns in ecx the current time
  2213 000013DC 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
  2214 000013DE 7517                <1>     jnz .ctOk
  2215 000013E0 FE054A010000        <1>     inc byte [.bAccCnt]
  2216 000013E6 803D4301000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
  2217 000013ED 7217                <1>     jb .ctNoChange
  2218 000013EF FE0D3B010000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
  2219 000013F5 EB0D                <1>     jmp short .ctMaybeCh
  2220                              <1> .ctOk:
  2221 000013F7 8B5570              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
  2222                              <1> ;ecx = time of current check, adjusted for day rollovers 
  2223 000013FA 29D1                <1>     sub ecx, edx    
  2224 000013FC 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
  2225 00001402 7602                <1>     jbe .ctNoChange
  2226                              <1> .ctMaybeCh:
  2227 00001404 F9                  <1>     stc
  2228                              <1>     return
    13                              <2> %%_ret:
    14 00001405 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2229                              <1> .ctNoChange:
  2230 00001406 F8                  <1>     clc
  2231                              <1>     return
    13                              <2> %%_ret:
    14 00001407 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2232                              <1> 
  2233                              <1> .callI33h:
  2234                              <1> ;Wraps all i33 calls allowing me to preserve all that I need to preserve
  2235                              <1> ; across these calls. Only allows returning values in ax.
  2236 00001408 53                  <1>     push rbx
  2237 00001409 51                  <1>     push rcx
  2238 0000140A 52                  <1>     push rdx
  2239 0000140B 56                  <1>     push rsi
  2240 0000140C 57                  <1>     push rdi
  2241 0000140D 55                  <1>     push rbp
  2242 0000140E CD33                <1>     int 33h
  2243 00001410 5D                  <1>     pop rbp
  2244 00001411 5F                  <1>     pop rdi
  2245 00001412 5E                  <1>     pop rsi
  2246 00001413 5A                  <1>     pop rdx
  2247 00001414 59                  <1>     pop rcx
  2248 00001415 5B                  <1>     pop rbx
  2249                              <1>     return
    13                              <2> %%_ret:
    14 00001416 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2250                              <1> 
  2251                              <1> .setBitsForAllDevs:
  2252                              <1> ;Sets the selected bits for all devices with a particular BIOS number.
  2253                              <1> ;Input: ax = Bits to set in wDevFlgs
  2254                              <1> ;       dl = BIOS drive number
  2255 00001417 55                  <1>     push rbp
  2256 00001418 9C                  <1>     pushfq
  2257 00001419 488D2DDA110000      <1>     lea rbp, .drvBlkTbl
  2258                              <1> .sbfadLp:
  2259 00001420 385508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], dl
  2260 00001423 7504                <1>     jne .sbfadNext
  2261 00001425 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax
  2262                              <1> .sbfadNext:
  2263 00001429 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  2264 0000142D 4881FDFFFFFFFF      <1>     cmp rbp, -1
  2265 00001434 75EA                <1>     jne .sbfadLp
  2266                              <1> .sbfadExit:
  2267 00001436 9D                  <1>     popfq
  2268 00001437 5D                  <1>     pop rbp
  2269                              <1>     return
    13                              <2> %%_ret:
    14 00001438 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2270                              <1> 
  2271                              <1> .i2fDriver:
  2272                              <1> ;Back door into the block driver :)
  2273 00001439 80FC08              <1>     cmp ah, 08h
  2274 0000143C 7510                <1>     jne .i2fNotUs
  2275 0000143E 84C0                <1>     test al, al ;AL=00, Install check
  2276 00001440 7412                <1>     jz .i2fCheck
  2277 00001442 3C01                <1>     cmp al, 01  ;AL=01, Add block device
  2278 00001444 7412                <1>     je .i2fAddTbl
  2279 00001446 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
  2280 00001448 745D                <1>     je .i2fExec
  2281 0000144A 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
  2282 0000144C 7479                <1>     je .i2fGivTbl
  2283                              <1> .i2fNotUs:
  2284 0000144E FF2590F0FFFF        <1>     jmp qword [i2FNext]
  2285                              <1> .i2fCheck:
  2286 00001454 B0FF                <1>     mov al, -1  ;Indicate installed!
  2287 00001456 48CF                <1>     iretq
  2288                              <1> .i2fAddTbl:
  2289                              <1> ;Adds a new entry to the drive chain and updates the multiownership bits
  2290                              <1> ; as it does :)
  2291                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
  2292                              <1> ;Destroy rax, rbx and rsi
  2293 00001458 488D359B110000      <1>     lea rsi, .drvBlkTbl
  2294 0000145F 0FB64708            <1>     movzx eax, byte [rdi + drvBlk.bBIOSNum]
  2295                              <1> .i2fATLp:
  2296 00001463 384608              <1>     cmp byte [rsi + drvBlk.bBIOSNum], al
  2297 00001466 7526                <1>     jne .i2fATNext
  2298                              <1> ;Set that the two disks are multi owned. New cannot own the drive
  2299                              <1> ; and make sure that the new drive has the accurate changeline bit set
  2300 00001468 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti       ;Both drives now multi!
  2301 0000146E 66814F371000        <1>     or word [rdi + drvBlk.wDevFlgs], devMulti
  2302 00001474 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv    ;New cant own drv
  2303                              <1> ;Changeline check.
  2304 0000147A 66816737FDFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devChgLine   ;Assume no changeline
  2305 00001480 66F746370200        <1>     test word [rsi + drvBlk.wDevFlgs], devChgLine   ;Do we really have cline?
  2306 00001486 7406                <1>     jz .i2fATNext   ;Skip adding the bit if not
  2307 00001488 66814F370200        <1>     or word [rdi + drvBlk.wDevFlgs], devChgLine     ;Add if we do 
  2308                              <1> .i2fATNext:
  2309 0000148E 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;Check if we @ end of table
  2310 00001495 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink] ;Walk if not
  2311 00001499 75C8                <1>     jne .i2fATLp    ;And go again if not
  2312 0000149B 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi ;Else, link rdi onto the end
  2313 0000149E 48C707FFFFFFFF      <1>     mov qword [rdi + drvBlk.pLink], -1  ;And terminate list @ rdi now :)
  2314 000014A5 48CF                <1>     iretq
  2315                              <1> .i2fExec:
  2316                              <1> ;We make a small change in that we clean up the flags from the stack
  2317                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
  2318                              <1> ; as no useful information is ever passed in the flags from a driver
  2319                              <1> ; so by doing so, any ported applications which do an additional pop
  2320                              <1> ; from the stack to balance the stack will not be harmed by this.
  2321 000014A7 50                  <1>     push rax
  2322 000014A8 B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
  2323 000014AD CD2A                <1>     int 2Ah
  2324                              <1> 
  2325 000014AF 53                  <1>     push rbx
  2326 000014B0 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx  ;Save the ptr in var since we own it now :)
  2327 000014B7 E8EEF0FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
  2328 000014BC 5B                  <1>     pop rbx
  2329                              <1> 
  2330 000014BD B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
  2331 000014C2 CD2A                <1>     int 2Ah
  2332 000014C4 58                  <1>     pop rax
  2333 000014C5 48CF                <1>     iretq
  2334                              <1> .i2fGivTbl:
  2335                              <1> ;Output: rdi -> drvBlkTbl
  2336 000014C7 488D3D2C110000      <1>     lea rdi, .drvBlkTbl
  2337 000014CE 48CF                <1>     iretq
  2338                              <1> 
  2339 000014D0 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert disk for drive "
  2339 000014D9 6469736B20666F7220- <1>
  2339 000014E2 647269766520        <1>
  2340 000014E8 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
  2340 000014F1 72696B650D0A616E79- <1>
  2340 000014FA 206B6579207768656E- <1>
  2340 00001503 2072656164790D0A0A  <1>
  2341                              <1> .strikeMsgL equ $ - .strikeMsg
  2342                              <1> 
  2343 0000150C 464154313220202000  <1> .fat12Str   db "FAT12   ",0
  2344 00001515 464154313620202000  <1> .fat16Str   db "FAT16   ",0
  2345 0000151E 464154333220202000  <1> .fat32Str   db "FAT32   ",0
  2346 00001527 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
  2347                              <1> 
  2348 00001530 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
  2349 00001531 FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check/IO.
  2350                              <1> 
  2351                              <1> ;Keep this @ 4096 for hotplugging a 4096 dev that needs 512 byte pseudo
  2352                              <1> ; access. 
  2353                              <1> ;Access to this buffer should be mediated through a critical section... 
  2354                              <1> ; but this driver doesnt need to be reentrant yet.
  2355 00001532 000000000000000000- <1> .inBuffer   db 4096 dup (0)  
  2355 0000153B 000000000000000000- <1>
  2355 00001544 000000000000000000- <1>
  2355 0000154D 000000000000000000- <1>
  2355 00001556 000000000000000000- <1>
  2355 0000155F 000000000000000000- <1>
  2355 00001568 000000000000000000- <1>
  2355 00001571 000000000000000000- <1>
  2355 0000157A 000000000000000000- <1>
  2355 00001583 000000000000000000- <1>
  2355 0000158C 000000000000000000- <1>
  2355 00001595 000000000000000000- <1>
  2355 0000159E 000000000000000000- <1>
  2355 000015A7 000000000000000000- <1>
  2355 000015B0 000000000000000000- <1>
  2355 000015B9 000000000000000000- <1>
  2355 000015C2 000000000000000000- <1>
  2355 000015CB 000000000000000000- <1>
  2355 000015D4 000000000000000000- <1>
  2355 000015DD 000000000000000000- <1>
  2355 000015E6 000000000000000000- <1>
  2355 000015EF 000000000000000000- <1>
  2355 000015F8 000000000000000000- <1>
  2355 00001601 000000000000000000- <1>
  2355 0000160A 000000000000000000- <1>
  2355 00001613 000000000000000000- <1>
  2355 0000161C 000000000000000000- <1>
  2355 00001625 000000000000000000- <1>
  2355 0000162E 000000000000000000- <1>
  2355 00001637 000000000000000000- <1>
  2355 00001640 000000000000000000- <1>
  2355 00001649 000000000000000000- <1>
  2355 00001652 000000000000000000- <1>
  2355 0000165B 000000000000000000- <1>
  2355 00001664 000000000000000000- <1>
  2355 0000166D 000000000000000000- <1>
  2355 00001676 000000000000000000- <1>
  2355 0000167F 000000000000000000- <1>
  2355 00001688 000000000000000000- <1>
  2355 00001691 000000000000000000- <1>
  2355 0000169A 000000000000000000- <1>
  2355 000016A3 000000000000000000- <1>
  2355 000016AC 000000000000000000- <1>
  2355 000016B5 000000000000000000- <1>
  2355 000016BE 000000000000000000- <1>
  2355 000016C7 000000000000000000- <1>
  2355 000016D0 000000000000000000- <1>
  2355 000016D9 000000000000000000- <1>
  2355 000016E2 000000000000000000- <1>
  2355 000016EB 000000000000000000- <1>
  2355 000016F4 000000000000000000- <1>
  2355 000016FD 000000000000000000- <1>
  2355 00001706 000000000000000000- <1>
  2355 0000170F 000000000000000000- <1>
  2355 00001718 000000000000000000- <1>
  2355 00001721 000000000000000000- <1>
  2355 0000172A 000000000000000000- <1>
  2355 00001733 000000000000000000- <1>
  2355 0000173C 000000000000000000- <1>
  2355 00001745 000000000000000000- <1>
  2355 0000174E 000000000000000000- <1>
  2355 00001757 000000000000000000- <1>
  2355 00001760 000000000000000000- <1>
  2355 00001769 000000000000000000- <1>
  2355 00001772 000000000000000000- <1>
  2355 0000177B 000000000000000000- <1>
  2355 00001784 000000000000000000- <1>
  2355 0000178D 000000000000000000- <1>
  2355 00001796 000000000000000000- <1>
  2355 0000179F 000000000000000000- <1>
  2355 000017A8 000000000000000000- <1>
  2355 000017B1 000000000000000000- <1>
  2355 000017BA 000000000000000000- <1>
  2355 000017C3 000000000000000000- <1>
  2355 000017CC 000000000000000000- <1>
  2355 000017D5 000000000000000000- <1>
  2355 000017DE 000000000000000000- <1>
  2355 000017E7 000000000000000000- <1>
  2355 000017F0 000000000000000000- <1>
  2355 000017F9 000000000000000000- <1>
  2355 00001802 000000000000000000- <1>
  2355 0000180B 000000000000000000- <1>
  2355 00001814 000000000000000000- <1>
  2355 0000181D 000000000000000000- <1>
  2355 00001826 000000000000000000- <1>
  2355 0000182F 000000000000000000- <1>
  2355 00001838 000000000000000000- <1>
  2355 00001841 000000000000000000- <1>
  2355 0000184A 000000000000000000- <1>
  2355 00001853 000000000000000000- <1>
  2355 0000185C 000000000000000000- <1>
  2355 00001865 000000000000000000- <1>
  2355 0000186E 000000000000000000- <1>
  2355 00001877 000000000000000000- <1>
  2355 00001880 000000000000000000- <1>
  2355 00001889 000000000000000000- <1>
  2355 00001892 000000000000000000- <1>
  2355 0000189B 000000000000000000- <1>
  2355 000018A4 000000000000000000- <1>
  2355 000018AD 000000000000000000- <1>
  2355 000018B6 000000000000000000- <1>
  2355 000018BF 000000000000000000- <1>
  2355 000018C8 000000000000000000- <1>
  2355 000018D1 000000000000000000- <1>
  2355 000018DA 000000000000000000- <1>
  2355 000018E3 000000000000000000- <1>
  2355 000018EC 000000000000000000- <1>
  2355 000018F5 000000000000000000- <1>
  2355 000018FE 000000000000000000- <1>
  2355 00001907 000000000000000000- <1>
  2355 00001910 000000000000000000- <1>
  2355 00001919 000000000000000000- <1>
  2355 00001922 000000000000000000- <1>
  2355 0000192B 000000000000000000- <1>
  2355 00001934 000000000000000000- <1>
  2355 0000193D 000000000000000000- <1>
  2355 00001946 000000000000000000- <1>
  2355 0000194F 000000000000000000- <1>
  2355 00001958 000000000000000000- <1>
  2355 00001961 000000000000000000- <1>
  2355 0000196A 000000000000000000- <1>
  2355 00001973 000000000000000000- <1>
  2355 0000197C 000000000000000000- <1>
  2355 00001985 000000000000000000- <1>
  2355 0000198E 000000000000000000- <1>
  2355 00001997 000000000000000000- <1>
  2355 000019A0 000000000000000000- <1>
  2355 000019A9 000000000000000000- <1>
  2355 000019B2 000000000000000000- <1>
  2355 000019BB 000000000000000000- <1>
  2355 000019C4 000000000000000000- <1>
  2355 000019CD 000000000000000000- <1>
  2355 000019D6 000000000000000000- <1>
  2355 000019DF 000000000000000000- <1>
  2355 000019E8 000000000000000000- <1>
  2355 000019F1 000000000000000000- <1>
  2355 000019FA 000000000000000000- <1>
  2355 00001A03 000000000000000000- <1>
  2355 00001A0C 000000000000000000- <1>
  2355 00001A15 000000000000000000- <1>
  2355 00001A1E 000000000000000000- <1>
  2355 00001A27 000000000000000000- <1>
  2355 00001A30 000000000000000000- <1>
  2355 00001A39 000000000000000000- <1>
  2355 00001A42 000000000000000000- <1>
  2355 00001A4B 000000000000000000- <1>
  2355 00001A54 000000000000000000- <1>
  2355 00001A5D 000000000000000000- <1>
  2355 00001A66 000000000000000000- <1>
  2355 00001A6F 000000000000000000- <1>
  2355 00001A78 000000000000000000- <1>
  2355 00001A81 000000000000000000- <1>
  2355 00001A8A 000000000000000000- <1>
  2355 00001A93 000000000000000000- <1>
  2355 00001A9C 000000000000000000- <1>
  2355 00001AA5 000000000000000000- <1>
  2355 00001AAE 000000000000000000- <1>
  2355 00001AB7 000000000000000000- <1>
  2355 00001AC0 000000000000000000- <1>
  2355 00001AC9 000000000000000000- <1>
  2355 00001AD2 000000000000000000- <1>
  2355 00001ADB 000000000000000000- <1>
  2355 00001AE4 000000000000000000- <1>
  2355 00001AED 000000000000000000- <1>
  2355 00001AF6 000000000000000000- <1>
  2355 00001AFF 000000000000000000- <1>
  2355 00001B08 000000000000000000- <1>
  2355 00001B11 000000000000000000- <1>
  2355 00001B1A 000000000000000000- <1>
  2355 00001B23 000000000000000000- <1>
  2355 00001B2C 000000000000000000- <1>
  2355 00001B35 000000000000000000- <1>
  2355 00001B3E 000000000000000000- <1>
  2355 00001B47 000000000000000000- <1>
  2355 00001B50 000000000000000000- <1>
  2355 00001B59 000000000000000000- <1>
  2355 00001B62 000000000000000000- <1>
  2355 00001B6B 000000000000000000- <1>
  2355 00001B74 000000000000000000- <1>
  2355 00001B7D 000000000000000000- <1>
  2355 00001B86 000000000000000000- <1>
  2355 00001B8F 000000000000000000- <1>
  2355 00001B98 000000000000000000- <1>
  2355 00001BA1 000000000000000000- <1>
  2355 00001BAA 000000000000000000- <1>
  2355 00001BB3 000000000000000000- <1>
  2355 00001BBC 000000000000000000- <1>
  2355 00001BC5 000000000000000000- <1>
  2355 00001BCE 000000000000000000- <1>
  2355 00001BD7 000000000000000000- <1>
  2355 00001BE0 000000000000000000- <1>
  2355 00001BE9 000000000000000000- <1>
  2355 00001BF2 000000000000000000- <1>
  2355 00001BFB 000000000000000000- <1>
  2355 00001C04 000000000000000000- <1>
  2355 00001C0D 000000000000000000- <1>
  2355 00001C16 000000000000000000- <1>
  2355 00001C1F 000000000000000000- <1>
  2355 00001C28 000000000000000000- <1>
  2355 00001C31 000000000000000000- <1>
  2355 00001C3A 000000000000000000- <1>
  2355 00001C43 000000000000000000- <1>
  2355 00001C4C 000000000000000000- <1>
  2355 00001C55 000000000000000000- <1>
  2355 00001C5E 000000000000000000- <1>
  2355 00001C67 000000000000000000- <1>
  2355 00001C70 000000000000000000- <1>
  2355 00001C79 000000000000000000- <1>
  2355 00001C82 000000000000000000- <1>
  2355 00001C8B 000000000000000000- <1>
  2355 00001C94 000000000000000000- <1>
  2355 00001C9D 000000000000000000- <1>
  2355 00001CA6 000000000000000000- <1>
  2355 00001CAF 000000000000000000- <1>
  2355 00001CB8 000000000000000000- <1>
  2355 00001CC1 000000000000000000- <1>
  2355 00001CCA 000000000000000000- <1>
  2355 00001CD3 000000000000000000- <1>
  2355 00001CDC 000000000000000000- <1>
  2355 00001CE5 000000000000000000- <1>
  2355 00001CEE 000000000000000000- <1>
  2355 00001CF7 000000000000000000- <1>
  2355 00001D00 000000000000000000- <1>
  2355 00001D09 000000000000000000- <1>
  2355 00001D12 000000000000000000- <1>
  2355 00001D1B 000000000000000000- <1>
  2355 00001D24 000000000000000000- <1>
  2355 00001D2D 000000000000000000- <1>
  2355 00001D36 000000000000000000- <1>
  2355 00001D3F 000000000000000000- <1>
  2355 00001D48 000000000000000000- <1>
  2355 00001D51 000000000000000000- <1>
  2355 00001D5A 000000000000000000- <1>
  2355 00001D63 000000000000000000- <1>
  2355 00001D6C 000000000000000000- <1>
  2355 00001D75 000000000000000000- <1>
  2355 00001D7E 000000000000000000- <1>
  2355 00001D87 000000000000000000- <1>
  2355 00001D90 000000000000000000- <1>
  2355 00001D99 000000000000000000- <1>
  2355 00001DA2 000000000000000000- <1>
  2355 00001DAB 000000000000000000- <1>
  2355 00001DB4 000000000000000000- <1>
  2355 00001DBD 000000000000000000- <1>
  2355 00001DC6 000000000000000000- <1>
  2355 00001DCF 000000000000000000- <1>
  2355 00001DD8 000000000000000000- <1>
  2355 00001DE1 000000000000000000- <1>
  2355 00001DEA 000000000000000000- <1>
  2355 00001DF3 000000000000000000- <1>
  2355 00001DFC 000000000000000000- <1>
  2355 00001E05 000000000000000000- <1>
  2355 00001E0E 000000000000000000- <1>
  2355 00001E17 000000000000000000- <1>
  2355 00001E20 000000000000000000- <1>
  2355 00001E29 000000000000000000- <1>
  2355 00001E32 000000000000000000- <1>
  2355 00001E3B 000000000000000000- <1>
  2355 00001E44 000000000000000000- <1>
  2355 00001E4D 000000000000000000- <1>
  2355 00001E56 000000000000000000- <1>
  2355 00001E5F 000000000000000000- <1>
  2355 00001E68 000000000000000000- <1>
  2355 00001E71 000000000000000000- <1>
  2355 00001E7A 000000000000000000- <1>
  2355 00001E83 000000000000000000- <1>
  2355 00001E8C 000000000000000000- <1>
  2355 00001E95 000000000000000000- <1>
  2355 00001E9E 000000000000000000- <1>
  2355 00001EA7 000000000000000000- <1>
  2355 00001EB0 000000000000000000- <1>
  2355 00001EB9 000000000000000000- <1>
  2355 00001EC2 000000000000000000- <1>
  2355 00001ECB 000000000000000000- <1>
  2355 00001ED4 000000000000000000- <1>
  2355 00001EDD 000000000000000000- <1>
  2355 00001EE6 000000000000000000- <1>
  2355 00001EEF 000000000000000000- <1>
  2355 00001EF8 000000000000000000- <1>
  2355 00001F01 000000000000000000- <1>
  2355 00001F0A 000000000000000000- <1>
  2355 00001F13 000000000000000000- <1>
  2355 00001F1C 000000000000000000- <1>
  2355 00001F25 000000000000000000- <1>
  2355 00001F2E 000000000000000000- <1>
  2355 00001F37 000000000000000000- <1>
  2355 00001F40 000000000000000000- <1>
  2355 00001F49 000000000000000000- <1>
  2355 00001F52 000000000000000000- <1>
  2355 00001F5B 000000000000000000- <1>
  2355 00001F64 000000000000000000- <1>
  2355 00001F6D 000000000000000000- <1>
  2355 00001F76 000000000000000000- <1>
  2355 00001F7F 000000000000000000- <1>
  2355 00001F88 000000000000000000- <1>
  2355 00001F91 000000000000000000- <1>
  2355 00001F9A 000000000000000000- <1>
  2355 00001FA3 000000000000000000- <1>
  2355 00001FAC 000000000000000000- <1>
  2355 00001FB5 000000000000000000- <1>
  2355 00001FBE 000000000000000000- <1>
  2355 00001FC7 000000000000000000- <1>
  2355 00001FD0 000000000000000000- <1>
  2355 00001FD9 000000000000000000- <1>
  2355 00001FE2 000000000000000000- <1>
  2355 00001FEB 000000000000000000- <1>
  2355 00001FF4 000000000000000000- <1>
  2355 00001FFD 000000000000000000- <1>
  2355 00002006 000000000000000000- <1>
  2355 0000200F 000000000000000000- <1>
  2355 00002018 000000000000000000- <1>
  2355 00002021 000000000000000000- <1>
  2355 0000202A 000000000000000000- <1>
  2355 00002033 000000000000000000- <1>
  2355 0000203C 000000000000000000- <1>
  2355 00002045 000000000000000000- <1>
  2355 0000204E 000000000000000000- <1>
  2355 00002057 000000000000000000- <1>
  2355 00002060 000000000000000000- <1>
  2355 00002069 000000000000000000- <1>
  2355 00002072 000000000000000000- <1>
  2355 0000207B 000000000000000000- <1>
  2355 00002084 000000000000000000- <1>
  2355 0000208D 000000000000000000- <1>
  2355 00002096 000000000000000000- <1>
  2355 0000209F 000000000000000000- <1>
  2355 000020A8 000000000000000000- <1>
  2355 000020B1 000000000000000000- <1>
  2355 000020BA 000000000000000000- <1>
  2355 000020C3 000000000000000000- <1>
  2355 000020CC 000000000000000000- <1>
  2355 000020D5 000000000000000000- <1>
  2355 000020DE 000000000000000000- <1>
  2355 000020E7 000000000000000000- <1>
  2355 000020F0 000000000000000000- <1>
  2355 000020F9 000000000000000000- <1>
  2355 00002102 000000000000000000- <1>
  2355 0000210B 000000000000000000- <1>
  2355 00002114 000000000000000000- <1>
  2355 0000211D 000000000000000000- <1>
  2355 00002126 000000000000000000- <1>
  2355 0000212F 000000000000000000- <1>
  2355 00002138 000000000000000000- <1>
  2355 00002141 000000000000000000- <1>
  2355 0000214A 000000000000000000- <1>
  2355 00002153 000000000000000000- <1>
  2355 0000215C 000000000000000000- <1>
  2355 00002165 000000000000000000- <1>
  2355 0000216E 000000000000000000- <1>
  2355 00002177 000000000000000000- <1>
  2355 00002180 000000000000000000- <1>
  2355 00002189 000000000000000000- <1>
  2355 00002192 000000000000000000- <1>
  2355 0000219B 000000000000000000- <1>
  2355 000021A4 000000000000000000- <1>
  2355 000021AD 000000000000000000- <1>
  2355 000021B6 000000000000000000- <1>
  2355 000021BF 000000000000000000- <1>
  2355 000021C8 000000000000000000- <1>
  2355 000021D1 000000000000000000- <1>
  2355 000021DA 000000000000000000- <1>
  2355 000021E3 000000000000000000- <1>
  2355 000021EC 000000000000000000- <1>
  2355 000021F5 000000000000000000- <1>
  2355 000021FE 000000000000000000- <1>
  2355 00002207 000000000000000000- <1>
  2355 00002210 000000000000000000- <1>
  2355 00002219 000000000000000000- <1>
  2355 00002222 000000000000000000- <1>
  2355 0000222B 000000000000000000- <1>
  2355 00002234 000000000000000000- <1>
  2355 0000223D 000000000000000000- <1>
  2355 00002246 000000000000000000- <1>
  2355 0000224F 000000000000000000- <1>
  2355 00002258 000000000000000000- <1>
  2355 00002261 000000000000000000- <1>
  2355 0000226A 000000000000000000- <1>
  2355 00002273 000000000000000000- <1>
  2355 0000227C 000000000000000000- <1>
  2355 00002285 000000000000000000- <1>
  2355 0000228E 000000000000000000- <1>
  2355 00002297 000000000000000000- <1>
  2355 000022A0 000000000000000000- <1>
  2355 000022A9 000000000000000000- <1>
  2355 000022B2 000000000000000000- <1>
  2355 000022BB 000000000000000000- <1>
  2355 000022C4 000000000000000000- <1>
  2355 000022CD 000000000000000000- <1>
  2355 000022D6 000000000000000000- <1>
  2355 000022DF 000000000000000000- <1>
  2355 000022E8 000000000000000000- <1>
  2355 000022F1 000000000000000000- <1>
  2355 000022FA 000000000000000000- <1>
  2355 00002303 000000000000000000- <1>
  2355 0000230C 000000000000000000- <1>
  2355 00002315 000000000000000000- <1>
  2355 0000231E 000000000000000000- <1>
  2355 00002327 000000000000000000- <1>
  2355 00002330 000000000000000000- <1>
  2355 00002339 000000000000000000- <1>
  2355 00002342 000000000000000000- <1>
  2355 0000234B 000000000000000000- <1>
  2355 00002354 000000000000000000- <1>
  2355 0000235D 000000000000000000- <1>
  2355 00002366 000000000000000000- <1>
  2355 0000236F 000000000000000000- <1>
  2355 00002378 000000000000000000- <1>
  2355 00002381 000000000000000000- <1>
  2355 0000238A 000000000000000000- <1>
  2355 00002393 000000000000000000- <1>
  2355 0000239C 000000000000000000- <1>
  2355 000023A5 000000000000000000- <1>
  2355 000023AE 000000000000000000- <1>
  2355 000023B7 000000000000000000- <1>
  2355 000023C0 000000000000000000- <1>
  2355 000023C9 000000000000000000- <1>
  2355 000023D2 000000000000000000- <1>
  2355 000023DB 000000000000000000- <1>
  2355 000023E4 000000000000000000- <1>
  2355 000023ED 000000000000000000- <1>
  2355 000023F6 000000000000000000- <1>
  2355 000023FF 000000000000000000- <1>
  2355 00002408 000000000000000000- <1>
  2355 00002411 000000000000000000- <1>
  2355 0000241A 000000000000000000- <1>
  2355 00002423 000000000000000000- <1>
  2355 0000242C 000000000000000000- <1>
  2355 00002435 000000000000000000- <1>
  2355 0000243E 000000000000000000- <1>
  2355 00002447 000000000000000000- <1>
  2355 00002450 000000000000000000- <1>
  2355 00002459 000000000000000000- <1>
  2355 00002462 000000000000000000- <1>
  2355 0000246B 000000000000000000- <1>
  2355 00002474 000000000000000000- <1>
  2355 0000247D 000000000000000000- <1>
  2355 00002486 000000000000000000- <1>
  2355 0000248F 000000000000000000- <1>
  2355 00002498 000000000000000000- <1>
  2355 000024A1 000000000000000000- <1>
  2355 000024AA 000000000000000000- <1>
  2355 000024B3 000000000000000000- <1>
  2355 000024BC 000000000000000000- <1>
  2355 000024C5 000000000000000000- <1>
  2355 000024CE 000000000000000000- <1>
  2355 000024D7 000000000000000000- <1>
  2355 000024E0 000000000000000000- <1>
  2355 000024E9 000000000000000000- <1>
  2355 000024F2 000000000000000000- <1>
  2355 000024FB 000000000000000000- <1>
  2355 00002504 000000000000000000- <1>
  2355 0000250D 000000000000000000- <1>
  2355 00002516 000000000000000000- <1>
  2355 0000251F 000000000000000000- <1>
  2355 00002528 000000000000000000- <1>
  2355 00002531 00                  <1>
  2356                              <1> 
  2357                              <1> .drvBpbTbl:
  2358                              <1> ;Table of BPBs from FAh-FFh
  2359                              <1>     istruc bpb
  2360 00002532 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2361 00002534 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2362 00002535 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2363 00002537 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2364 00002538 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2365 0000253A 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  2366 0000253C FA                  <1>         at .media,      db 0FAh ;Media descriptor byte
  2367 0000253D 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  2368 0000253F 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2369 00002541 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  2370 00002543 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2371 00002547 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2372                              <1>     iend
  2373                              <1>     istruc bpb
  2374 0000254B 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2375 0000254D 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2376 0000254E 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2377 00002550 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2378 00002551 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2379 00002553 0005                <1>         at .totSec16,   dw 1280 ;Number of sectors on medium
  2380 00002555 FB                  <1>         at .media,      db 0FBh ;Media descriptor byte
  2381 00002556 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  2382 00002558 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2383 0000255A 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2384 0000255C 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2385 00002560 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2386                              <1>     iend
  2387                              <1>     istruc bpb
  2388 00002564 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2389 00002566 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2390 00002567 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2391 00002569 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2392 0000256A 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  2393 0000256C 6801                <1>         at .totSec16,   dw 360  ;Number of sectors on medium
  2394 0000256E FC                  <1>         at .media,      db 0FCh ;Media descriptor byte
  2395 0000256F 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  2396 00002571 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  2397 00002573 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  2398 00002575 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2399 00002579 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2400                              <1>     iend
  2401                              <1>     istruc bpb
  2402 0000257D 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2403 0000257F 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2404 00002580 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2405 00002582 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2406 00002583 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2407 00002585 D002                <1>         at .totSec16,   dw 720  ;Number of sectors on medium
  2408 00002587 FD                  <1>         at .media,      db 0FDh ;Media descriptor byte
  2409 00002588 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  2410 0000258A 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  2411 0000258C 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2412 0000258E 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2413 00002592 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2414                              <1>     iend
  2415                              <1>     istruc bpb
  2416 00002596 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2417 00002598 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2418 00002599 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2419 0000259B 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2420 0000259C 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  2421 0000259E 4001                <1>         at .totSec16,   dw 320  ;Number of sectors on medium
  2422 000025A0 FE                  <1>         at .media,      db 0FEh ;Media descriptor byte
  2423 000025A1 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  2424 000025A3 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2425 000025A5 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  2426 000025A7 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2427 000025AB 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2428                              <1>     iend
  2429                              <1>     istruc bpb
  2430 000025AF 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2431 000025B1 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2432 000025B2 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2433 000025B4 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2434 000025B5 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2435 000025B7 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  2436 000025B9 FF                  <1>         at .media,      db 0FFh ;Media descriptor byte
  2437 000025BA 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  2438 000025BC 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  2439 000025BE 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2440 000025C0 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2441 000025C4 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2442                              <1>     iend
  2443                              <1> .drvBpbTblF9:
  2444                              <1> ;Contains the special F9 BPBs
  2445                              <1>     istruc bpb  ;720Kb 3.5" floppies
  2446 000025C8 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2447 000025CA 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  2448 000025CB 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2449 000025CD 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2450 000025CE 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  2451 000025D0 A005                <1>         at .totSec16,   dw 1440 ;Number of sectors on medium
  2452 000025D2 F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  2453 000025D3 0300                <1>         at .FATsz16,    dw 3    ;Number of sectors per FAT
  2454 000025D5 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  2455 000025D7 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2456 000025D9 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2457 000025DD 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2458                              <1>     iend
  2459                              <1>     istruc bpb  ;1.2Mb 5.25" floppies
  2460 000025E1 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  2461 000025E3 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  2462 000025E4 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  2463 000025E6 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  2464 000025E7 E000                <1>         at .rootEntCnt, dw 224  ;Number of 32 byte entries in Root directory
  2465 000025E9 6009                <1>         at .totSec16,   dw 2400 ;Number of sectors on medium
  2466 000025EB F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  2467 000025EC 0700                <1>         at .FATsz16,    dw 7    ;Number of sectors per FAT
  2468 000025EE 0F00                <1>         at .secPerTrk,  dw 15   ;Number of sectors per "track"
  2469 000025F0 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  2470 000025F2 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  2471 000025F6 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  2472                              <1>     iend
  2473                              <1> 
  2474                              <1> .drvBlkTbl:
  2475                              <1> ;All drives start with Sectors/Cluster as -1 to indicate not initialised.
  2476                              <1> ;All drives start with Media Descripter as 0 (invalid type)
  2477                              <1> ;All drives start with dAccTime at -1 to force "uncertain" read for remdevs
  2478                              <1> ;All drives present 63 Cylinders (only valid as a field on fixed disks)
  2479                              <1> ;All drives have as an alt BPB, a 1.44Mb 3.5" Floppy.
  2480                              <1>     %assign i 0
  2481                              <1>     %rep drvBlkTblL
  2482                              <1>     istruc drvBlk
  2483                              <1>         at .pLink,      dq -1   ;End of table marker
  2484                              <1>         at .bBIOSNum,   db i    ;DOS drive number
  2485                              <1>         at .bDOSNum,    db i    ;BIOS drives default to removable
  2486                              <1> ;Do a FAT12/16 BPB in FAT32 format
  2487                              <1>         at .wBpS,       dw 200h
  2488                              <1>         at .bSpC,       db -1       
  2489                              <1>         at .wResC,      dw 0001h
  2490                              <1>         at .bNumFAT,    db 02h
  2491                              <1>         at .wRtCntNum,  dw 00E0h    
  2492                              <1>         at .wTotSec16,  dw 0B40h    
  2493                              <1>         at .bMedDesc,   db 00h    
  2494                              <1>         at .wFATsz16,   dw 0009h    
  2495                              <1>         at .wSecPerTrk, dw 0012h    
  2496                              <1>         at .wNumHeads,  dw 0002h    
  2497                              <1>         at .dHiddSec,   dd 0    
  2498                              <1>         at .dTotSec32,  dd 0     
  2499                              <1> ;FAT 32 fields. All zeros
  2500                              <1>         at .FATsz32,    dd 0
  2501                              <1>         at .extFlags,   dw 0
  2502                              <1>         at .FSver,      dw 0
  2503                              <1>         at .RootClus,   dd 0
  2504                              <1>         at .FSinfo,     dw 0
  2505                              <1>         at .BkBootSec,  dw 0
  2506                              <1> ;DrvBlk Flags
  2507                              <1>         at .bBpbType,   db bpbFat12
  2508                              <1>         at .wOpenCnt,   dw 0
  2509                              <1>         at .bDevType,   db typeGenRem   ;Init to generic removable device
  2510                              <1>         at .wDevFlgs,   dw 0
  2511                              <1>         at .wNumCyl,    dw 63   
  2512                              <1>         istruc bpb32
  2513                              <1>             at .bytsPerSec, dw 200h
  2514                              <1>             at .secPerClus, db 01h
  2515                              <1>             at .revdSecCnt, dw 0001h
  2516                              <1>             at .numFATs,    db 02h    
  2517                              <1>             at .rootEntCnt, dw 00E0h    
  2518                              <1>             at .totSec16,   dw 0B40h    
  2519                              <1>             at .media,      db 0F0h    
  2520                              <1>             at .FATsz16,    dw 0009h    
  2521                              <1>             at .secPerTrk,  dw 0012h    
  2522                              <1>             at .numHeads,   dw 0002h    
  2523                              <1>             at .hiddSec,    dd 0    
  2524                              <1>             at .totSec32,   dd 0     
  2525                              <1>             at .FATsz32,    dd 0
  2526                              <1>             at .extFlags,   dw 0
  2527                              <1>             at .FSver,      dw 0
  2528                              <1>             at .RootClus,   dd 0
  2529                              <1>             at .FSinfo,     dw 0
  2530                              <1>             at .BkBootSec,  dw 0
  2531                              <1>             at .reserved,   db 12 dup (0) 
  2532                              <1>         iend
  2533                              <1>         at .dAccTime,   dd -1 
  2534                              <1>         at .volLab,     db "NO NAME    ",0
  2535                              <1>         at .volId,      dd 0    ;Vol ID of 0
  2536                              <1>         at .filSysType, db "FAT12   ",0
  2537                              <1>     iend
  2538                              <1>         %assign i i+1
  2539                              <1>     %endrep
  2482                              <2>  istruc drvBlk
  2483 000025FA FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002602 00                  <2>  at .bBIOSNum, db i
  2485 00002603 00                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002604 0002                <2>  at .wBpS, dw 200h
  2488 00002606 FF                  <2>  at .bSpC, db -1
  2489 00002607 0100                <2>  at .wResC, dw 0001h
  2490 00002609 02                  <2>  at .bNumFAT, db 02h
  2491 0000260A E000                <2>  at .wRtCntNum, dw 00E0h
  2492 0000260C 400B                <2>  at .wTotSec16, dw 0B40h
  2493 0000260E 00                  <2>  at .bMedDesc, db 00h
  2494 0000260F 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002611 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002613 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002615 00000000            <2>  at .dHiddSec, dd 0
  2498 00002619 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 0000261D 00000000            <2>  at .FATsz32, dd 0
  2501 00002621 0000                <2>  at .extFlags, dw 0
  2502 00002623 0000                <2>  at .FSver, dw 0
  2503 00002625 00000000            <2>  at .RootClus, dd 0
  2504 00002629 0000                <2>  at .FSinfo, dw 0
  2505 0000262B 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 0000262D 10                  <2>  at .bBpbType, db bpbFat12
  2508 0000262E 0000                <2>  at .wOpenCnt, dw 0
  2509 00002630 07                  <2>  at .bDevType, db typeGenRem
  2510 00002631 0000                <2>  at .wDevFlgs, dw 0
  2511 00002633 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002635 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002637 01                  <2>  at .secPerClus, db 01h
  2515 00002638 0100                <2>  at .revdSecCnt, dw 0001h
  2516 0000263A 02                  <2>  at .numFATs, db 02h
  2517 0000263B E000                <2>  at .rootEntCnt, dw 00E0h
  2518 0000263D 400B                <2>  at .totSec16, dw 0B40h
  2519 0000263F F0                  <2>  at .media, db 0F0h
  2520 00002640 0900                <2>  at .FATsz16, dw 0009h
  2521 00002642 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002644 0200                <2>  at .numHeads, dw 0002h
  2523 00002646 00000000            <2>  at .hiddSec, dd 0
  2524 0000264A 00000000            <2>  at .totSec32, dd 0
  2525 0000264E 00000000            <2>  at .FATsz32, dd 0
  2526 00002652 0000                <2>  at .extFlags, dw 0
  2527 00002654 0000                <2>  at .FSver, dw 0
  2528 00002656 00000000            <2>  at .RootClus, dd 0
  2529 0000265A 0000                <2>  at .FSinfo, dw 0
  2530 0000265C 0000                <2>  at .BkBootSec, dw 0
  2531 0000265E 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002667 000000              <2>
  2532                              <2>  iend
  2533 0000266A FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 0000266E 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002677 202000              <2>
  2535 0000267A 00000000            <2>  at .volId, dd 0
  2536 0000267E 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002687 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 0000268F 01                  <2>  at .bBIOSNum, db i
  2485 00002690 01                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002691 0002                <2>  at .wBpS, dw 200h
  2488 00002693 FF                  <2>  at .bSpC, db -1
  2489 00002694 0100                <2>  at .wResC, dw 0001h
  2490 00002696 02                  <2>  at .bNumFAT, db 02h
  2491 00002697 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002699 400B                <2>  at .wTotSec16, dw 0B40h
  2493 0000269B 00                  <2>  at .bMedDesc, db 00h
  2494 0000269C 0900                <2>  at .wFATsz16, dw 0009h
  2495 0000269E 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 000026A0 0200                <2>  at .wNumHeads, dw 0002h
  2497 000026A2 00000000            <2>  at .dHiddSec, dd 0
  2498 000026A6 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 000026AA 00000000            <2>  at .FATsz32, dd 0
  2501 000026AE 0000                <2>  at .extFlags, dw 0
  2502 000026B0 0000                <2>  at .FSver, dw 0
  2503 000026B2 00000000            <2>  at .RootClus, dd 0
  2504 000026B6 0000                <2>  at .FSinfo, dw 0
  2505 000026B8 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 000026BA 10                  <2>  at .bBpbType, db bpbFat12
  2508 000026BB 0000                <2>  at .wOpenCnt, dw 0
  2509 000026BD 07                  <2>  at .bDevType, db typeGenRem
  2510 000026BE 0000                <2>  at .wDevFlgs, dw 0
  2511 000026C0 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 000026C2 0002                <2>  at .bytsPerSec, dw 200h
  2514 000026C4 01                  <2>  at .secPerClus, db 01h
  2515 000026C5 0100                <2>  at .revdSecCnt, dw 0001h
  2516 000026C7 02                  <2>  at .numFATs, db 02h
  2517 000026C8 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 000026CA 400B                <2>  at .totSec16, dw 0B40h
  2519 000026CC F0                  <2>  at .media, db 0F0h
  2520 000026CD 0900                <2>  at .FATsz16, dw 0009h
  2521 000026CF 1200                <2>  at .secPerTrk, dw 0012h
  2522 000026D1 0200                <2>  at .numHeads, dw 0002h
  2523 000026D3 00000000            <2>  at .hiddSec, dd 0
  2524 000026D7 00000000            <2>  at .totSec32, dd 0
  2525 000026DB 00000000            <2>  at .FATsz32, dd 0
  2526 000026DF 0000                <2>  at .extFlags, dw 0
  2527 000026E1 0000                <2>  at .FSver, dw 0
  2528 000026E3 00000000            <2>  at .RootClus, dd 0
  2529 000026E7 0000                <2>  at .FSinfo, dw 0
  2530 000026E9 0000                <2>  at .BkBootSec, dw 0
  2531 000026EB 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 000026F4 000000              <2>
  2532                              <2>  iend
  2533 000026F7 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 000026FB 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002704 202000              <2>
  2535 00002707 00000000            <2>  at .volId, dd 0
  2536 0000270B 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002714 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 0000271C 02                  <2>  at .bBIOSNum, db i
  2485 0000271D 02                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 0000271E 0002                <2>  at .wBpS, dw 200h
  2488 00002720 FF                  <2>  at .bSpC, db -1
  2489 00002721 0100                <2>  at .wResC, dw 0001h
  2490 00002723 02                  <2>  at .bNumFAT, db 02h
  2491 00002724 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002726 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002728 00                  <2>  at .bMedDesc, db 00h
  2494 00002729 0900                <2>  at .wFATsz16, dw 0009h
  2495 0000272B 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 0000272D 0200                <2>  at .wNumHeads, dw 0002h
  2497 0000272F 00000000            <2>  at .dHiddSec, dd 0
  2498 00002733 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002737 00000000            <2>  at .FATsz32, dd 0
  2501 0000273B 0000                <2>  at .extFlags, dw 0
  2502 0000273D 0000                <2>  at .FSver, dw 0
  2503 0000273F 00000000            <2>  at .RootClus, dd 0
  2504 00002743 0000                <2>  at .FSinfo, dw 0
  2505 00002745 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002747 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002748 0000                <2>  at .wOpenCnt, dw 0
  2509 0000274A 07                  <2>  at .bDevType, db typeGenRem
  2510 0000274B 0000                <2>  at .wDevFlgs, dw 0
  2511 0000274D 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 0000274F 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002751 01                  <2>  at .secPerClus, db 01h
  2515 00002752 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002754 02                  <2>  at .numFATs, db 02h
  2517 00002755 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002757 400B                <2>  at .totSec16, dw 0B40h
  2519 00002759 F0                  <2>  at .media, db 0F0h
  2520 0000275A 0900                <2>  at .FATsz16, dw 0009h
  2521 0000275C 1200                <2>  at .secPerTrk, dw 0012h
  2522 0000275E 0200                <2>  at .numHeads, dw 0002h
  2523 00002760 00000000            <2>  at .hiddSec, dd 0
  2524 00002764 00000000            <2>  at .totSec32, dd 0
  2525 00002768 00000000            <2>  at .FATsz32, dd 0
  2526 0000276C 0000                <2>  at .extFlags, dw 0
  2527 0000276E 0000                <2>  at .FSver, dw 0
  2528 00002770 00000000            <2>  at .RootClus, dd 0
  2529 00002774 0000                <2>  at .FSinfo, dw 0
  2530 00002776 0000                <2>  at .BkBootSec, dw 0
  2531 00002778 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002781 000000              <2>
  2532                              <2>  iend
  2533 00002784 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002788 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002791 202000              <2>
  2535 00002794 00000000            <2>  at .volId, dd 0
  2536 00002798 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 000027A1 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 000027A9 03                  <2>  at .bBIOSNum, db i
  2485 000027AA 03                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 000027AB 0002                <2>  at .wBpS, dw 200h
  2488 000027AD FF                  <2>  at .bSpC, db -1
  2489 000027AE 0100                <2>  at .wResC, dw 0001h
  2490 000027B0 02                  <2>  at .bNumFAT, db 02h
  2491 000027B1 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 000027B3 400B                <2>  at .wTotSec16, dw 0B40h
  2493 000027B5 00                  <2>  at .bMedDesc, db 00h
  2494 000027B6 0900                <2>  at .wFATsz16, dw 0009h
  2495 000027B8 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 000027BA 0200                <2>  at .wNumHeads, dw 0002h
  2497 000027BC 00000000            <2>  at .dHiddSec, dd 0
  2498 000027C0 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 000027C4 00000000            <2>  at .FATsz32, dd 0
  2501 000027C8 0000                <2>  at .extFlags, dw 0
  2502 000027CA 0000                <2>  at .FSver, dw 0
  2503 000027CC 00000000            <2>  at .RootClus, dd 0
  2504 000027D0 0000                <2>  at .FSinfo, dw 0
  2505 000027D2 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 000027D4 10                  <2>  at .bBpbType, db bpbFat12
  2508 000027D5 0000                <2>  at .wOpenCnt, dw 0
  2509 000027D7 07                  <2>  at .bDevType, db typeGenRem
  2510 000027D8 0000                <2>  at .wDevFlgs, dw 0
  2511 000027DA 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 000027DC 0002                <2>  at .bytsPerSec, dw 200h
  2514 000027DE 01                  <2>  at .secPerClus, db 01h
  2515 000027DF 0100                <2>  at .revdSecCnt, dw 0001h
  2516 000027E1 02                  <2>  at .numFATs, db 02h
  2517 000027E2 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 000027E4 400B                <2>  at .totSec16, dw 0B40h
  2519 000027E6 F0                  <2>  at .media, db 0F0h
  2520 000027E7 0900                <2>  at .FATsz16, dw 0009h
  2521 000027E9 1200                <2>  at .secPerTrk, dw 0012h
  2522 000027EB 0200                <2>  at .numHeads, dw 0002h
  2523 000027ED 00000000            <2>  at .hiddSec, dd 0
  2524 000027F1 00000000            <2>  at .totSec32, dd 0
  2525 000027F5 00000000            <2>  at .FATsz32, dd 0
  2526 000027F9 0000                <2>  at .extFlags, dw 0
  2527 000027FB 0000                <2>  at .FSver, dw 0
  2528 000027FD 00000000            <2>  at .RootClus, dd 0
  2529 00002801 0000                <2>  at .FSinfo, dw 0
  2530 00002803 0000                <2>  at .BkBootSec, dw 0
  2531 00002805 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 0000280E 000000              <2>
  2532                              <2>  iend
  2533 00002811 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002815 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 0000281E 202000              <2>
  2535 00002821 00000000            <2>  at .volId, dd 0
  2536 00002825 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 0000282E FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002836 04                  <2>  at .bBIOSNum, db i
  2485 00002837 04                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002838 0002                <2>  at .wBpS, dw 200h
  2488 0000283A FF                  <2>  at .bSpC, db -1
  2489 0000283B 0100                <2>  at .wResC, dw 0001h
  2490 0000283D 02                  <2>  at .bNumFAT, db 02h
  2491 0000283E E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002840 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002842 00                  <2>  at .bMedDesc, db 00h
  2494 00002843 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002845 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002847 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002849 00000000            <2>  at .dHiddSec, dd 0
  2498 0000284D 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002851 00000000            <2>  at .FATsz32, dd 0
  2501 00002855 0000                <2>  at .extFlags, dw 0
  2502 00002857 0000                <2>  at .FSver, dw 0
  2503 00002859 00000000            <2>  at .RootClus, dd 0
  2504 0000285D 0000                <2>  at .FSinfo, dw 0
  2505 0000285F 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002861 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002862 0000                <2>  at .wOpenCnt, dw 0
  2509 00002864 07                  <2>  at .bDevType, db typeGenRem
  2510 00002865 0000                <2>  at .wDevFlgs, dw 0
  2511 00002867 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002869 0002                <2>  at .bytsPerSec, dw 200h
  2514 0000286B 01                  <2>  at .secPerClus, db 01h
  2515 0000286C 0100                <2>  at .revdSecCnt, dw 0001h
  2516 0000286E 02                  <2>  at .numFATs, db 02h
  2517 0000286F E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002871 400B                <2>  at .totSec16, dw 0B40h
  2519 00002873 F0                  <2>  at .media, db 0F0h
  2520 00002874 0900                <2>  at .FATsz16, dw 0009h
  2521 00002876 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002878 0200                <2>  at .numHeads, dw 0002h
  2523 0000287A 00000000            <2>  at .hiddSec, dd 0
  2524 0000287E 00000000            <2>  at .totSec32, dd 0
  2525 00002882 00000000            <2>  at .FATsz32, dd 0
  2526 00002886 0000                <2>  at .extFlags, dw 0
  2527 00002888 0000                <2>  at .FSver, dw 0
  2528 0000288A 00000000            <2>  at .RootClus, dd 0
  2529 0000288E 0000                <2>  at .FSinfo, dw 0
  2530 00002890 0000                <2>  at .BkBootSec, dw 0
  2531 00002892 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 0000289B 000000              <2>
  2532                              <2>  iend
  2533 0000289E FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 000028A2 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 000028AB 202000              <2>
  2535 000028AE 00000000            <2>  at .volId, dd 0
  2536 000028B2 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 000028BB FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 000028C3 05                  <2>  at .bBIOSNum, db i
  2485 000028C4 05                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 000028C5 0002                <2>  at .wBpS, dw 200h
  2488 000028C7 FF                  <2>  at .bSpC, db -1
  2489 000028C8 0100                <2>  at .wResC, dw 0001h
  2490 000028CA 02                  <2>  at .bNumFAT, db 02h
  2491 000028CB E000                <2>  at .wRtCntNum, dw 00E0h
  2492 000028CD 400B                <2>  at .wTotSec16, dw 0B40h
  2493 000028CF 00                  <2>  at .bMedDesc, db 00h
  2494 000028D0 0900                <2>  at .wFATsz16, dw 0009h
  2495 000028D2 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 000028D4 0200                <2>  at .wNumHeads, dw 0002h
  2497 000028D6 00000000            <2>  at .dHiddSec, dd 0
  2498 000028DA 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 000028DE 00000000            <2>  at .FATsz32, dd 0
  2501 000028E2 0000                <2>  at .extFlags, dw 0
  2502 000028E4 0000                <2>  at .FSver, dw 0
  2503 000028E6 00000000            <2>  at .RootClus, dd 0
  2504 000028EA 0000                <2>  at .FSinfo, dw 0
  2505 000028EC 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 000028EE 10                  <2>  at .bBpbType, db bpbFat12
  2508 000028EF 0000                <2>  at .wOpenCnt, dw 0
  2509 000028F1 07                  <2>  at .bDevType, db typeGenRem
  2510 000028F2 0000                <2>  at .wDevFlgs, dw 0
  2511 000028F4 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 000028F6 0002                <2>  at .bytsPerSec, dw 200h
  2514 000028F8 01                  <2>  at .secPerClus, db 01h
  2515 000028F9 0100                <2>  at .revdSecCnt, dw 0001h
  2516 000028FB 02                  <2>  at .numFATs, db 02h
  2517 000028FC E000                <2>  at .rootEntCnt, dw 00E0h
  2518 000028FE 400B                <2>  at .totSec16, dw 0B40h
  2519 00002900 F0                  <2>  at .media, db 0F0h
  2520 00002901 0900                <2>  at .FATsz16, dw 0009h
  2521 00002903 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002905 0200                <2>  at .numHeads, dw 0002h
  2523 00002907 00000000            <2>  at .hiddSec, dd 0
  2524 0000290B 00000000            <2>  at .totSec32, dd 0
  2525 0000290F 00000000            <2>  at .FATsz32, dd 0
  2526 00002913 0000                <2>  at .extFlags, dw 0
  2527 00002915 0000                <2>  at .FSver, dw 0
  2528 00002917 00000000            <2>  at .RootClus, dd 0
  2529 0000291B 0000                <2>  at .FSinfo, dw 0
  2530 0000291D 0000                <2>  at .BkBootSec, dw 0
  2531 0000291F 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002928 000000              <2>
  2532                              <2>  iend
  2533 0000292B FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 0000292F 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002938 202000              <2>
  2535 0000293B 00000000            <2>  at .volId, dd 0
  2536 0000293F 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002948 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002950 06                  <2>  at .bBIOSNum, db i
  2485 00002951 06                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002952 0002                <2>  at .wBpS, dw 200h
  2488 00002954 FF                  <2>  at .bSpC, db -1
  2489 00002955 0100                <2>  at .wResC, dw 0001h
  2490 00002957 02                  <2>  at .bNumFAT, db 02h
  2491 00002958 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 0000295A 400B                <2>  at .wTotSec16, dw 0B40h
  2493 0000295C 00                  <2>  at .bMedDesc, db 00h
  2494 0000295D 0900                <2>  at .wFATsz16, dw 0009h
  2495 0000295F 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002961 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002963 00000000            <2>  at .dHiddSec, dd 0
  2498 00002967 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 0000296B 00000000            <2>  at .FATsz32, dd 0
  2501 0000296F 0000                <2>  at .extFlags, dw 0
  2502 00002971 0000                <2>  at .FSver, dw 0
  2503 00002973 00000000            <2>  at .RootClus, dd 0
  2504 00002977 0000                <2>  at .FSinfo, dw 0
  2505 00002979 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 0000297B 10                  <2>  at .bBpbType, db bpbFat12
  2508 0000297C 0000                <2>  at .wOpenCnt, dw 0
  2509 0000297E 07                  <2>  at .bDevType, db typeGenRem
  2510 0000297F 0000                <2>  at .wDevFlgs, dw 0
  2511 00002981 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002983 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002985 01                  <2>  at .secPerClus, db 01h
  2515 00002986 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002988 02                  <2>  at .numFATs, db 02h
  2517 00002989 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 0000298B 400B                <2>  at .totSec16, dw 0B40h
  2519 0000298D F0                  <2>  at .media, db 0F0h
  2520 0000298E 0900                <2>  at .FATsz16, dw 0009h
  2521 00002990 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002992 0200                <2>  at .numHeads, dw 0002h
  2523 00002994 00000000            <2>  at .hiddSec, dd 0
  2524 00002998 00000000            <2>  at .totSec32, dd 0
  2525 0000299C 00000000            <2>  at .FATsz32, dd 0
  2526 000029A0 0000                <2>  at .extFlags, dw 0
  2527 000029A2 0000                <2>  at .FSver, dw 0
  2528 000029A4 00000000            <2>  at .RootClus, dd 0
  2529 000029A8 0000                <2>  at .FSinfo, dw 0
  2530 000029AA 0000                <2>  at .BkBootSec, dw 0
  2531 000029AC 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 000029B5 000000              <2>
  2532                              <2>  iend
  2533 000029B8 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 000029BC 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 000029C5 202000              <2>
  2535 000029C8 00000000            <2>  at .volId, dd 0
  2536 000029CC 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 000029D5 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 000029DD 07                  <2>  at .bBIOSNum, db i
  2485 000029DE 07                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 000029DF 0002                <2>  at .wBpS, dw 200h
  2488 000029E1 FF                  <2>  at .bSpC, db -1
  2489 000029E2 0100                <2>  at .wResC, dw 0001h
  2490 000029E4 02                  <2>  at .bNumFAT, db 02h
  2491 000029E5 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 000029E7 400B                <2>  at .wTotSec16, dw 0B40h
  2493 000029E9 00                  <2>  at .bMedDesc, db 00h
  2494 000029EA 0900                <2>  at .wFATsz16, dw 0009h
  2495 000029EC 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 000029EE 0200                <2>  at .wNumHeads, dw 0002h
  2497 000029F0 00000000            <2>  at .dHiddSec, dd 0
  2498 000029F4 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 000029F8 00000000            <2>  at .FATsz32, dd 0
  2501 000029FC 0000                <2>  at .extFlags, dw 0
  2502 000029FE 0000                <2>  at .FSver, dw 0
  2503 00002A00 00000000            <2>  at .RootClus, dd 0
  2504 00002A04 0000                <2>  at .FSinfo, dw 0
  2505 00002A06 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002A08 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002A09 0000                <2>  at .wOpenCnt, dw 0
  2509 00002A0B 07                  <2>  at .bDevType, db typeGenRem
  2510 00002A0C 0000                <2>  at .wDevFlgs, dw 0
  2511 00002A0E 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002A10 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002A12 01                  <2>  at .secPerClus, db 01h
  2515 00002A13 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002A15 02                  <2>  at .numFATs, db 02h
  2517 00002A16 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002A18 400B                <2>  at .totSec16, dw 0B40h
  2519 00002A1A F0                  <2>  at .media, db 0F0h
  2520 00002A1B 0900                <2>  at .FATsz16, dw 0009h
  2521 00002A1D 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002A1F 0200                <2>  at .numHeads, dw 0002h
  2523 00002A21 00000000            <2>  at .hiddSec, dd 0
  2524 00002A25 00000000            <2>  at .totSec32, dd 0
  2525 00002A29 00000000            <2>  at .FATsz32, dd 0
  2526 00002A2D 0000                <2>  at .extFlags, dw 0
  2527 00002A2F 0000                <2>  at .FSver, dw 0
  2528 00002A31 00000000            <2>  at .RootClus, dd 0
  2529 00002A35 0000                <2>  at .FSinfo, dw 0
  2530 00002A37 0000                <2>  at .BkBootSec, dw 0
  2531 00002A39 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002A42 000000              <2>
  2532                              <2>  iend
  2533 00002A45 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002A49 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002A52 202000              <2>
  2535 00002A55 00000000            <2>  at .volId, dd 0
  2536 00002A59 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002A62 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002A6A 08                  <2>  at .bBIOSNum, db i
  2485 00002A6B 08                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002A6C 0002                <2>  at .wBpS, dw 200h
  2488 00002A6E FF                  <2>  at .bSpC, db -1
  2489 00002A6F 0100                <2>  at .wResC, dw 0001h
  2490 00002A71 02                  <2>  at .bNumFAT, db 02h
  2491 00002A72 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002A74 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002A76 00                  <2>  at .bMedDesc, db 00h
  2494 00002A77 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002A79 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002A7B 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002A7D 00000000            <2>  at .dHiddSec, dd 0
  2498 00002A81 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002A85 00000000            <2>  at .FATsz32, dd 0
  2501 00002A89 0000                <2>  at .extFlags, dw 0
  2502 00002A8B 0000                <2>  at .FSver, dw 0
  2503 00002A8D 00000000            <2>  at .RootClus, dd 0
  2504 00002A91 0000                <2>  at .FSinfo, dw 0
  2505 00002A93 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002A95 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002A96 0000                <2>  at .wOpenCnt, dw 0
  2509 00002A98 07                  <2>  at .bDevType, db typeGenRem
  2510 00002A99 0000                <2>  at .wDevFlgs, dw 0
  2511 00002A9B 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002A9D 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002A9F 01                  <2>  at .secPerClus, db 01h
  2515 00002AA0 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002AA2 02                  <2>  at .numFATs, db 02h
  2517 00002AA3 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002AA5 400B                <2>  at .totSec16, dw 0B40h
  2519 00002AA7 F0                  <2>  at .media, db 0F0h
  2520 00002AA8 0900                <2>  at .FATsz16, dw 0009h
  2521 00002AAA 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002AAC 0200                <2>  at .numHeads, dw 0002h
  2523 00002AAE 00000000            <2>  at .hiddSec, dd 0
  2524 00002AB2 00000000            <2>  at .totSec32, dd 0
  2525 00002AB6 00000000            <2>  at .FATsz32, dd 0
  2526 00002ABA 0000                <2>  at .extFlags, dw 0
  2527 00002ABC 0000                <2>  at .FSver, dw 0
  2528 00002ABE 00000000            <2>  at .RootClus, dd 0
  2529 00002AC2 0000                <2>  at .FSinfo, dw 0
  2530 00002AC4 0000                <2>  at .BkBootSec, dw 0
  2531 00002AC6 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002ACF 000000              <2>
  2532                              <2>  iend
  2533 00002AD2 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002AD6 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002ADF 202000              <2>
  2535 00002AE2 00000000            <2>  at .volId, dd 0
  2536 00002AE6 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002AEF FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002AF7 09                  <2>  at .bBIOSNum, db i
  2485 00002AF8 09                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002AF9 0002                <2>  at .wBpS, dw 200h
  2488 00002AFB FF                  <2>  at .bSpC, db -1
  2489 00002AFC 0100                <2>  at .wResC, dw 0001h
  2490 00002AFE 02                  <2>  at .bNumFAT, db 02h
  2491 00002AFF E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002B01 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002B03 00                  <2>  at .bMedDesc, db 00h
  2494 00002B04 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002B06 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002B08 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002B0A 00000000            <2>  at .dHiddSec, dd 0
  2498 00002B0E 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002B12 00000000            <2>  at .FATsz32, dd 0
  2501 00002B16 0000                <2>  at .extFlags, dw 0
  2502 00002B18 0000                <2>  at .FSver, dw 0
  2503 00002B1A 00000000            <2>  at .RootClus, dd 0
  2504 00002B1E 0000                <2>  at .FSinfo, dw 0
  2505 00002B20 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002B22 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002B23 0000                <2>  at .wOpenCnt, dw 0
  2509 00002B25 07                  <2>  at .bDevType, db typeGenRem
  2510 00002B26 0000                <2>  at .wDevFlgs, dw 0
  2511 00002B28 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002B2A 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002B2C 01                  <2>  at .secPerClus, db 01h
  2515 00002B2D 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002B2F 02                  <2>  at .numFATs, db 02h
  2517 00002B30 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002B32 400B                <2>  at .totSec16, dw 0B40h
  2519 00002B34 F0                  <2>  at .media, db 0F0h
  2520 00002B35 0900                <2>  at .FATsz16, dw 0009h
  2521 00002B37 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002B39 0200                <2>  at .numHeads, dw 0002h
  2523 00002B3B 00000000            <2>  at .hiddSec, dd 0
  2524 00002B3F 00000000            <2>  at .totSec32, dd 0
  2525 00002B43 00000000            <2>  at .FATsz32, dd 0
  2526 00002B47 0000                <2>  at .extFlags, dw 0
  2527 00002B49 0000                <2>  at .FSver, dw 0
  2528 00002B4B 00000000            <2>  at .RootClus, dd 0
  2529 00002B4F 0000                <2>  at .FSinfo, dw 0
  2530 00002B51 0000                <2>  at .BkBootSec, dw 0
  2531 00002B53 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002B5C 000000              <2>
  2532                              <2>  iend
  2533 00002B5F FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002B63 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002B6C 202000              <2>
  2535 00002B6F 00000000            <2>  at .volId, dd 0
  2536 00002B73 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002B7C FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002B84 0A                  <2>  at .bBIOSNum, db i
  2485 00002B85 0A                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002B86 0002                <2>  at .wBpS, dw 200h
  2488 00002B88 FF                  <2>  at .bSpC, db -1
  2489 00002B89 0100                <2>  at .wResC, dw 0001h
  2490 00002B8B 02                  <2>  at .bNumFAT, db 02h
  2491 00002B8C E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002B8E 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002B90 00                  <2>  at .bMedDesc, db 00h
  2494 00002B91 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002B93 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002B95 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002B97 00000000            <2>  at .dHiddSec, dd 0
  2498 00002B9B 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002B9F 00000000            <2>  at .FATsz32, dd 0
  2501 00002BA3 0000                <2>  at .extFlags, dw 0
  2502 00002BA5 0000                <2>  at .FSver, dw 0
  2503 00002BA7 00000000            <2>  at .RootClus, dd 0
  2504 00002BAB 0000                <2>  at .FSinfo, dw 0
  2505 00002BAD 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002BAF 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002BB0 0000                <2>  at .wOpenCnt, dw 0
  2509 00002BB2 07                  <2>  at .bDevType, db typeGenRem
  2510 00002BB3 0000                <2>  at .wDevFlgs, dw 0
  2511 00002BB5 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002BB7 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002BB9 01                  <2>  at .secPerClus, db 01h
  2515 00002BBA 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002BBC 02                  <2>  at .numFATs, db 02h
  2517 00002BBD E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002BBF 400B                <2>  at .totSec16, dw 0B40h
  2519 00002BC1 F0                  <2>  at .media, db 0F0h
  2520 00002BC2 0900                <2>  at .FATsz16, dw 0009h
  2521 00002BC4 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002BC6 0200                <2>  at .numHeads, dw 0002h
  2523 00002BC8 00000000            <2>  at .hiddSec, dd 0
  2524 00002BCC 00000000            <2>  at .totSec32, dd 0
  2525 00002BD0 00000000            <2>  at .FATsz32, dd 0
  2526 00002BD4 0000                <2>  at .extFlags, dw 0
  2527 00002BD6 0000                <2>  at .FSver, dw 0
  2528 00002BD8 00000000            <2>  at .RootClus, dd 0
  2529 00002BDC 0000                <2>  at .FSinfo, dw 0
  2530 00002BDE 0000                <2>  at .BkBootSec, dw 0
  2531 00002BE0 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002BE9 000000              <2>
  2532                              <2>  iend
  2533 00002BEC FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002BF0 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002BF9 202000              <2>
  2535 00002BFC 00000000            <2>  at .volId, dd 0
  2536 00002C00 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002C09 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002C11 0B                  <2>  at .bBIOSNum, db i
  2485 00002C12 0B                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002C13 0002                <2>  at .wBpS, dw 200h
  2488 00002C15 FF                  <2>  at .bSpC, db -1
  2489 00002C16 0100                <2>  at .wResC, dw 0001h
  2490 00002C18 02                  <2>  at .bNumFAT, db 02h
  2491 00002C19 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002C1B 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002C1D 00                  <2>  at .bMedDesc, db 00h
  2494 00002C1E 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002C20 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002C22 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002C24 00000000            <2>  at .dHiddSec, dd 0
  2498 00002C28 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002C2C 00000000            <2>  at .FATsz32, dd 0
  2501 00002C30 0000                <2>  at .extFlags, dw 0
  2502 00002C32 0000                <2>  at .FSver, dw 0
  2503 00002C34 00000000            <2>  at .RootClus, dd 0
  2504 00002C38 0000                <2>  at .FSinfo, dw 0
  2505 00002C3A 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002C3C 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002C3D 0000                <2>  at .wOpenCnt, dw 0
  2509 00002C3F 07                  <2>  at .bDevType, db typeGenRem
  2510 00002C40 0000                <2>  at .wDevFlgs, dw 0
  2511 00002C42 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002C44 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002C46 01                  <2>  at .secPerClus, db 01h
  2515 00002C47 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002C49 02                  <2>  at .numFATs, db 02h
  2517 00002C4A E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002C4C 400B                <2>  at .totSec16, dw 0B40h
  2519 00002C4E F0                  <2>  at .media, db 0F0h
  2520 00002C4F 0900                <2>  at .FATsz16, dw 0009h
  2521 00002C51 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002C53 0200                <2>  at .numHeads, dw 0002h
  2523 00002C55 00000000            <2>  at .hiddSec, dd 0
  2524 00002C59 00000000            <2>  at .totSec32, dd 0
  2525 00002C5D 00000000            <2>  at .FATsz32, dd 0
  2526 00002C61 0000                <2>  at .extFlags, dw 0
  2527 00002C63 0000                <2>  at .FSver, dw 0
  2528 00002C65 00000000            <2>  at .RootClus, dd 0
  2529 00002C69 0000                <2>  at .FSinfo, dw 0
  2530 00002C6B 0000                <2>  at .BkBootSec, dw 0
  2531 00002C6D 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002C76 000000              <2>
  2532                              <2>  iend
  2533 00002C79 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002C7D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002C86 202000              <2>
  2535 00002C89 00000000            <2>  at .volId, dd 0
  2536 00002C8D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002C96 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002C9E 0C                  <2>  at .bBIOSNum, db i
  2485 00002C9F 0C                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002CA0 0002                <2>  at .wBpS, dw 200h
  2488 00002CA2 FF                  <2>  at .bSpC, db -1
  2489 00002CA3 0100                <2>  at .wResC, dw 0001h
  2490 00002CA5 02                  <2>  at .bNumFAT, db 02h
  2491 00002CA6 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002CA8 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002CAA 00                  <2>  at .bMedDesc, db 00h
  2494 00002CAB 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002CAD 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002CAF 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002CB1 00000000            <2>  at .dHiddSec, dd 0
  2498 00002CB5 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002CB9 00000000            <2>  at .FATsz32, dd 0
  2501 00002CBD 0000                <2>  at .extFlags, dw 0
  2502 00002CBF 0000                <2>  at .FSver, dw 0
  2503 00002CC1 00000000            <2>  at .RootClus, dd 0
  2504 00002CC5 0000                <2>  at .FSinfo, dw 0
  2505 00002CC7 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002CC9 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002CCA 0000                <2>  at .wOpenCnt, dw 0
  2509 00002CCC 07                  <2>  at .bDevType, db typeGenRem
  2510 00002CCD 0000                <2>  at .wDevFlgs, dw 0
  2511 00002CCF 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002CD1 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002CD3 01                  <2>  at .secPerClus, db 01h
  2515 00002CD4 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002CD6 02                  <2>  at .numFATs, db 02h
  2517 00002CD7 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002CD9 400B                <2>  at .totSec16, dw 0B40h
  2519 00002CDB F0                  <2>  at .media, db 0F0h
  2520 00002CDC 0900                <2>  at .FATsz16, dw 0009h
  2521 00002CDE 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002CE0 0200                <2>  at .numHeads, dw 0002h
  2523 00002CE2 00000000            <2>  at .hiddSec, dd 0
  2524 00002CE6 00000000            <2>  at .totSec32, dd 0
  2525 00002CEA 00000000            <2>  at .FATsz32, dd 0
  2526 00002CEE 0000                <2>  at .extFlags, dw 0
  2527 00002CF0 0000                <2>  at .FSver, dw 0
  2528 00002CF2 00000000            <2>  at .RootClus, dd 0
  2529 00002CF6 0000                <2>  at .FSinfo, dw 0
  2530 00002CF8 0000                <2>  at .BkBootSec, dw 0
  2531 00002CFA 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002D03 000000              <2>
  2532                              <2>  iend
  2533 00002D06 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002D0A 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002D13 202000              <2>
  2535 00002D16 00000000            <2>  at .volId, dd 0
  2536 00002D1A 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002D23 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002D2B 0D                  <2>  at .bBIOSNum, db i
  2485 00002D2C 0D                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002D2D 0002                <2>  at .wBpS, dw 200h
  2488 00002D2F FF                  <2>  at .bSpC, db -1
  2489 00002D30 0100                <2>  at .wResC, dw 0001h
  2490 00002D32 02                  <2>  at .bNumFAT, db 02h
  2491 00002D33 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002D35 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002D37 00                  <2>  at .bMedDesc, db 00h
  2494 00002D38 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002D3A 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002D3C 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002D3E 00000000            <2>  at .dHiddSec, dd 0
  2498 00002D42 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002D46 00000000            <2>  at .FATsz32, dd 0
  2501 00002D4A 0000                <2>  at .extFlags, dw 0
  2502 00002D4C 0000                <2>  at .FSver, dw 0
  2503 00002D4E 00000000            <2>  at .RootClus, dd 0
  2504 00002D52 0000                <2>  at .FSinfo, dw 0
  2505 00002D54 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002D56 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002D57 0000                <2>  at .wOpenCnt, dw 0
  2509 00002D59 07                  <2>  at .bDevType, db typeGenRem
  2510 00002D5A 0000                <2>  at .wDevFlgs, dw 0
  2511 00002D5C 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002D5E 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002D60 01                  <2>  at .secPerClus, db 01h
  2515 00002D61 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002D63 02                  <2>  at .numFATs, db 02h
  2517 00002D64 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002D66 400B                <2>  at .totSec16, dw 0B40h
  2519 00002D68 F0                  <2>  at .media, db 0F0h
  2520 00002D69 0900                <2>  at .FATsz16, dw 0009h
  2521 00002D6B 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002D6D 0200                <2>  at .numHeads, dw 0002h
  2523 00002D6F 00000000            <2>  at .hiddSec, dd 0
  2524 00002D73 00000000            <2>  at .totSec32, dd 0
  2525 00002D77 00000000            <2>  at .FATsz32, dd 0
  2526 00002D7B 0000                <2>  at .extFlags, dw 0
  2527 00002D7D 0000                <2>  at .FSver, dw 0
  2528 00002D7F 00000000            <2>  at .RootClus, dd 0
  2529 00002D83 0000                <2>  at .FSinfo, dw 0
  2530 00002D85 0000                <2>  at .BkBootSec, dw 0
  2531 00002D87 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002D90 000000              <2>
  2532                              <2>  iend
  2533 00002D93 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002D97 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002DA0 202000              <2>
  2535 00002DA3 00000000            <2>  at .volId, dd 0
  2536 00002DA7 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002DB0 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002DB8 0E                  <2>  at .bBIOSNum, db i
  2485 00002DB9 0E                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002DBA 0002                <2>  at .wBpS, dw 200h
  2488 00002DBC FF                  <2>  at .bSpC, db -1
  2489 00002DBD 0100                <2>  at .wResC, dw 0001h
  2490 00002DBF 02                  <2>  at .bNumFAT, db 02h
  2491 00002DC0 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002DC2 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002DC4 00                  <2>  at .bMedDesc, db 00h
  2494 00002DC5 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002DC7 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002DC9 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002DCB 00000000            <2>  at .dHiddSec, dd 0
  2498 00002DCF 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002DD3 00000000            <2>  at .FATsz32, dd 0
  2501 00002DD7 0000                <2>  at .extFlags, dw 0
  2502 00002DD9 0000                <2>  at .FSver, dw 0
  2503 00002DDB 00000000            <2>  at .RootClus, dd 0
  2504 00002DDF 0000                <2>  at .FSinfo, dw 0
  2505 00002DE1 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002DE3 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002DE4 0000                <2>  at .wOpenCnt, dw 0
  2509 00002DE6 07                  <2>  at .bDevType, db typeGenRem
  2510 00002DE7 0000                <2>  at .wDevFlgs, dw 0
  2511 00002DE9 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002DEB 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002DED 01                  <2>  at .secPerClus, db 01h
  2515 00002DEE 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002DF0 02                  <2>  at .numFATs, db 02h
  2517 00002DF1 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002DF3 400B                <2>  at .totSec16, dw 0B40h
  2519 00002DF5 F0                  <2>  at .media, db 0F0h
  2520 00002DF6 0900                <2>  at .FATsz16, dw 0009h
  2521 00002DF8 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002DFA 0200                <2>  at .numHeads, dw 0002h
  2523 00002DFC 00000000            <2>  at .hiddSec, dd 0
  2524 00002E00 00000000            <2>  at .totSec32, dd 0
  2525 00002E04 00000000            <2>  at .FATsz32, dd 0
  2526 00002E08 0000                <2>  at .extFlags, dw 0
  2527 00002E0A 0000                <2>  at .FSver, dw 0
  2528 00002E0C 00000000            <2>  at .RootClus, dd 0
  2529 00002E10 0000                <2>  at .FSinfo, dw 0
  2530 00002E12 0000                <2>  at .BkBootSec, dw 0
  2531 00002E14 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002E1D 000000              <2>
  2532                              <2>  iend
  2533 00002E20 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002E24 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002E2D 202000              <2>
  2535 00002E30 00000000            <2>  at .volId, dd 0
  2536 00002E34 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002E3D FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002E45 0F                  <2>  at .bBIOSNum, db i
  2485 00002E46 0F                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002E47 0002                <2>  at .wBpS, dw 200h
  2488 00002E49 FF                  <2>  at .bSpC, db -1
  2489 00002E4A 0100                <2>  at .wResC, dw 0001h
  2490 00002E4C 02                  <2>  at .bNumFAT, db 02h
  2491 00002E4D E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002E4F 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002E51 00                  <2>  at .bMedDesc, db 00h
  2494 00002E52 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002E54 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002E56 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002E58 00000000            <2>  at .dHiddSec, dd 0
  2498 00002E5C 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002E60 00000000            <2>  at .FATsz32, dd 0
  2501 00002E64 0000                <2>  at .extFlags, dw 0
  2502 00002E66 0000                <2>  at .FSver, dw 0
  2503 00002E68 00000000            <2>  at .RootClus, dd 0
  2504 00002E6C 0000                <2>  at .FSinfo, dw 0
  2505 00002E6E 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002E70 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002E71 0000                <2>  at .wOpenCnt, dw 0
  2509 00002E73 07                  <2>  at .bDevType, db typeGenRem
  2510 00002E74 0000                <2>  at .wDevFlgs, dw 0
  2511 00002E76 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002E78 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002E7A 01                  <2>  at .secPerClus, db 01h
  2515 00002E7B 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002E7D 02                  <2>  at .numFATs, db 02h
  2517 00002E7E E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002E80 400B                <2>  at .totSec16, dw 0B40h
  2519 00002E82 F0                  <2>  at .media, db 0F0h
  2520 00002E83 0900                <2>  at .FATsz16, dw 0009h
  2521 00002E85 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002E87 0200                <2>  at .numHeads, dw 0002h
  2523 00002E89 00000000            <2>  at .hiddSec, dd 0
  2524 00002E8D 00000000            <2>  at .totSec32, dd 0
  2525 00002E91 00000000            <2>  at .FATsz32, dd 0
  2526 00002E95 0000                <2>  at .extFlags, dw 0
  2527 00002E97 0000                <2>  at .FSver, dw 0
  2528 00002E99 00000000            <2>  at .RootClus, dd 0
  2529 00002E9D 0000                <2>  at .FSinfo, dw 0
  2530 00002E9F 0000                <2>  at .BkBootSec, dw 0
  2531 00002EA1 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002EAA 000000              <2>
  2532                              <2>  iend
  2533 00002EAD FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002EB1 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002EBA 202000              <2>
  2535 00002EBD 00000000            <2>  at .volId, dd 0
  2536 00002EC1 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002ECA FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002ED2 10                  <2>  at .bBIOSNum, db i
  2485 00002ED3 10                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002ED4 0002                <2>  at .wBpS, dw 200h
  2488 00002ED6 FF                  <2>  at .bSpC, db -1
  2489 00002ED7 0100                <2>  at .wResC, dw 0001h
  2490 00002ED9 02                  <2>  at .bNumFAT, db 02h
  2491 00002EDA E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002EDC 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002EDE 00                  <2>  at .bMedDesc, db 00h
  2494 00002EDF 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002EE1 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002EE3 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002EE5 00000000            <2>  at .dHiddSec, dd 0
  2498 00002EE9 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002EED 00000000            <2>  at .FATsz32, dd 0
  2501 00002EF1 0000                <2>  at .extFlags, dw 0
  2502 00002EF3 0000                <2>  at .FSver, dw 0
  2503 00002EF5 00000000            <2>  at .RootClus, dd 0
  2504 00002EF9 0000                <2>  at .FSinfo, dw 0
  2505 00002EFB 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002EFD 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002EFE 0000                <2>  at .wOpenCnt, dw 0
  2509 00002F00 07                  <2>  at .bDevType, db typeGenRem
  2510 00002F01 0000                <2>  at .wDevFlgs, dw 0
  2511 00002F03 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002F05 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002F07 01                  <2>  at .secPerClus, db 01h
  2515 00002F08 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002F0A 02                  <2>  at .numFATs, db 02h
  2517 00002F0B E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002F0D 400B                <2>  at .totSec16, dw 0B40h
  2519 00002F0F F0                  <2>  at .media, db 0F0h
  2520 00002F10 0900                <2>  at .FATsz16, dw 0009h
  2521 00002F12 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002F14 0200                <2>  at .numHeads, dw 0002h
  2523 00002F16 00000000            <2>  at .hiddSec, dd 0
  2524 00002F1A 00000000            <2>  at .totSec32, dd 0
  2525 00002F1E 00000000            <2>  at .FATsz32, dd 0
  2526 00002F22 0000                <2>  at .extFlags, dw 0
  2527 00002F24 0000                <2>  at .FSver, dw 0
  2528 00002F26 00000000            <2>  at .RootClus, dd 0
  2529 00002F2A 0000                <2>  at .FSinfo, dw 0
  2530 00002F2C 0000                <2>  at .BkBootSec, dw 0
  2531 00002F2E 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002F37 000000              <2>
  2532                              <2>  iend
  2533 00002F3A FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002F3E 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002F47 202000              <2>
  2535 00002F4A 00000000            <2>  at .volId, dd 0
  2536 00002F4E 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002F57 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002F5F 11                  <2>  at .bBIOSNum, db i
  2485 00002F60 11                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002F61 0002                <2>  at .wBpS, dw 200h
  2488 00002F63 FF                  <2>  at .bSpC, db -1
  2489 00002F64 0100                <2>  at .wResC, dw 0001h
  2490 00002F66 02                  <2>  at .bNumFAT, db 02h
  2491 00002F67 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002F69 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002F6B 00                  <2>  at .bMedDesc, db 00h
  2494 00002F6C 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002F6E 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002F70 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002F72 00000000            <2>  at .dHiddSec, dd 0
  2498 00002F76 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00002F7A 00000000            <2>  at .FATsz32, dd 0
  2501 00002F7E 0000                <2>  at .extFlags, dw 0
  2502 00002F80 0000                <2>  at .FSver, dw 0
  2503 00002F82 00000000            <2>  at .RootClus, dd 0
  2504 00002F86 0000                <2>  at .FSinfo, dw 0
  2505 00002F88 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00002F8A 10                  <2>  at .bBpbType, db bpbFat12
  2508 00002F8B 0000                <2>  at .wOpenCnt, dw 0
  2509 00002F8D 07                  <2>  at .bDevType, db typeGenRem
  2510 00002F8E 0000                <2>  at .wDevFlgs, dw 0
  2511 00002F90 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00002F92 0002                <2>  at .bytsPerSec, dw 200h
  2514 00002F94 01                  <2>  at .secPerClus, db 01h
  2515 00002F95 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00002F97 02                  <2>  at .numFATs, db 02h
  2517 00002F98 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00002F9A 400B                <2>  at .totSec16, dw 0B40h
  2519 00002F9C F0                  <2>  at .media, db 0F0h
  2520 00002F9D 0900                <2>  at .FATsz16, dw 0009h
  2521 00002F9F 1200                <2>  at .secPerTrk, dw 0012h
  2522 00002FA1 0200                <2>  at .numHeads, dw 0002h
  2523 00002FA3 00000000            <2>  at .hiddSec, dd 0
  2524 00002FA7 00000000            <2>  at .totSec32, dd 0
  2525 00002FAB 00000000            <2>  at .FATsz32, dd 0
  2526 00002FAF 0000                <2>  at .extFlags, dw 0
  2527 00002FB1 0000                <2>  at .FSver, dw 0
  2528 00002FB3 00000000            <2>  at .RootClus, dd 0
  2529 00002FB7 0000                <2>  at .FSinfo, dw 0
  2530 00002FB9 0000                <2>  at .BkBootSec, dw 0
  2531 00002FBB 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00002FC4 000000              <2>
  2532                              <2>  iend
  2533 00002FC7 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00002FCB 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00002FD4 202000              <2>
  2535 00002FD7 00000000            <2>  at .volId, dd 0
  2536 00002FDB 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00002FE4 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00002FEC 12                  <2>  at .bBIOSNum, db i
  2485 00002FED 12                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00002FEE 0002                <2>  at .wBpS, dw 200h
  2488 00002FF0 FF                  <2>  at .bSpC, db -1
  2489 00002FF1 0100                <2>  at .wResC, dw 0001h
  2490 00002FF3 02                  <2>  at .bNumFAT, db 02h
  2491 00002FF4 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00002FF6 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00002FF8 00                  <2>  at .bMedDesc, db 00h
  2494 00002FF9 0900                <2>  at .wFATsz16, dw 0009h
  2495 00002FFB 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00002FFD 0200                <2>  at .wNumHeads, dw 0002h
  2497 00002FFF 00000000            <2>  at .dHiddSec, dd 0
  2498 00003003 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00003007 00000000            <2>  at .FATsz32, dd 0
  2501 0000300B 0000                <2>  at .extFlags, dw 0
  2502 0000300D 0000                <2>  at .FSver, dw 0
  2503 0000300F 00000000            <2>  at .RootClus, dd 0
  2504 00003013 0000                <2>  at .FSinfo, dw 0
  2505 00003015 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00003017 10                  <2>  at .bBpbType, db bpbFat12
  2508 00003018 0000                <2>  at .wOpenCnt, dw 0
  2509 0000301A 07                  <2>  at .bDevType, db typeGenRem
  2510 0000301B 0000                <2>  at .wDevFlgs, dw 0
  2511 0000301D 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 0000301F 0002                <2>  at .bytsPerSec, dw 200h
  2514 00003021 01                  <2>  at .secPerClus, db 01h
  2515 00003022 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00003024 02                  <2>  at .numFATs, db 02h
  2517 00003025 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00003027 400B                <2>  at .totSec16, dw 0B40h
  2519 00003029 F0                  <2>  at .media, db 0F0h
  2520 0000302A 0900                <2>  at .FATsz16, dw 0009h
  2521 0000302C 1200                <2>  at .secPerTrk, dw 0012h
  2522 0000302E 0200                <2>  at .numHeads, dw 0002h
  2523 00003030 00000000            <2>  at .hiddSec, dd 0
  2524 00003034 00000000            <2>  at .totSec32, dd 0
  2525 00003038 00000000            <2>  at .FATsz32, dd 0
  2526 0000303C 0000                <2>  at .extFlags, dw 0
  2527 0000303E 0000                <2>  at .FSver, dw 0
  2528 00003040 00000000            <2>  at .RootClus, dd 0
  2529 00003044 0000                <2>  at .FSinfo, dw 0
  2530 00003046 0000                <2>  at .BkBootSec, dw 0
  2531 00003048 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00003051 000000              <2>
  2532                              <2>  iend
  2533 00003054 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00003058 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00003061 202000              <2>
  2535 00003064 00000000            <2>  at .volId, dd 0
  2536 00003068 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00003071 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00003079 13                  <2>  at .bBIOSNum, db i
  2485 0000307A 13                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 0000307B 0002                <2>  at .wBpS, dw 200h
  2488 0000307D FF                  <2>  at .bSpC, db -1
  2489 0000307E 0100                <2>  at .wResC, dw 0001h
  2490 00003080 02                  <2>  at .bNumFAT, db 02h
  2491 00003081 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00003083 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00003085 00                  <2>  at .bMedDesc, db 00h
  2494 00003086 0900                <2>  at .wFATsz16, dw 0009h
  2495 00003088 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 0000308A 0200                <2>  at .wNumHeads, dw 0002h
  2497 0000308C 00000000            <2>  at .dHiddSec, dd 0
  2498 00003090 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00003094 00000000            <2>  at .FATsz32, dd 0
  2501 00003098 0000                <2>  at .extFlags, dw 0
  2502 0000309A 0000                <2>  at .FSver, dw 0
  2503 0000309C 00000000            <2>  at .RootClus, dd 0
  2504 000030A0 0000                <2>  at .FSinfo, dw 0
  2505 000030A2 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 000030A4 10                  <2>  at .bBpbType, db bpbFat12
  2508 000030A5 0000                <2>  at .wOpenCnt, dw 0
  2509 000030A7 07                  <2>  at .bDevType, db typeGenRem
  2510 000030A8 0000                <2>  at .wDevFlgs, dw 0
  2511 000030AA 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 000030AC 0002                <2>  at .bytsPerSec, dw 200h
  2514 000030AE 01                  <2>  at .secPerClus, db 01h
  2515 000030AF 0100                <2>  at .revdSecCnt, dw 0001h
  2516 000030B1 02                  <2>  at .numFATs, db 02h
  2517 000030B2 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 000030B4 400B                <2>  at .totSec16, dw 0B40h
  2519 000030B6 F0                  <2>  at .media, db 0F0h
  2520 000030B7 0900                <2>  at .FATsz16, dw 0009h
  2521 000030B9 1200                <2>  at .secPerTrk, dw 0012h
  2522 000030BB 0200                <2>  at .numHeads, dw 0002h
  2523 000030BD 00000000            <2>  at .hiddSec, dd 0
  2524 000030C1 00000000            <2>  at .totSec32, dd 0
  2525 000030C5 00000000            <2>  at .FATsz32, dd 0
  2526 000030C9 0000                <2>  at .extFlags, dw 0
  2527 000030CB 0000                <2>  at .FSver, dw 0
  2528 000030CD 00000000            <2>  at .RootClus, dd 0
  2529 000030D1 0000                <2>  at .FSinfo, dw 0
  2530 000030D3 0000                <2>  at .BkBootSec, dw 0
  2531 000030D5 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 000030DE 000000              <2>
  2532                              <2>  iend
  2533 000030E1 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 000030E5 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 000030EE 202000              <2>
  2535 000030F1 00000000            <2>  at .volId, dd 0
  2536 000030F5 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 000030FE FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00003106 14                  <2>  at .bBIOSNum, db i
  2485 00003107 14                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00003108 0002                <2>  at .wBpS, dw 200h
  2488 0000310A FF                  <2>  at .bSpC, db -1
  2489 0000310B 0100                <2>  at .wResC, dw 0001h
  2490 0000310D 02                  <2>  at .bNumFAT, db 02h
  2491 0000310E E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00003110 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00003112 00                  <2>  at .bMedDesc, db 00h
  2494 00003113 0900                <2>  at .wFATsz16, dw 0009h
  2495 00003115 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00003117 0200                <2>  at .wNumHeads, dw 0002h
  2497 00003119 00000000            <2>  at .dHiddSec, dd 0
  2498 0000311D 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00003121 00000000            <2>  at .FATsz32, dd 0
  2501 00003125 0000                <2>  at .extFlags, dw 0
  2502 00003127 0000                <2>  at .FSver, dw 0
  2503 00003129 00000000            <2>  at .RootClus, dd 0
  2504 0000312D 0000                <2>  at .FSinfo, dw 0
  2505 0000312F 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00003131 10                  <2>  at .bBpbType, db bpbFat12
  2508 00003132 0000                <2>  at .wOpenCnt, dw 0
  2509 00003134 07                  <2>  at .bDevType, db typeGenRem
  2510 00003135 0000                <2>  at .wDevFlgs, dw 0
  2511 00003137 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00003139 0002                <2>  at .bytsPerSec, dw 200h
  2514 0000313B 01                  <2>  at .secPerClus, db 01h
  2515 0000313C 0100                <2>  at .revdSecCnt, dw 0001h
  2516 0000313E 02                  <2>  at .numFATs, db 02h
  2517 0000313F E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00003141 400B                <2>  at .totSec16, dw 0B40h
  2519 00003143 F0                  <2>  at .media, db 0F0h
  2520 00003144 0900                <2>  at .FATsz16, dw 0009h
  2521 00003146 1200                <2>  at .secPerTrk, dw 0012h
  2522 00003148 0200                <2>  at .numHeads, dw 0002h
  2523 0000314A 00000000            <2>  at .hiddSec, dd 0
  2524 0000314E 00000000            <2>  at .totSec32, dd 0
  2525 00003152 00000000            <2>  at .FATsz32, dd 0
  2526 00003156 0000                <2>  at .extFlags, dw 0
  2527 00003158 0000                <2>  at .FSver, dw 0
  2528 0000315A 00000000            <2>  at .RootClus, dd 0
  2529 0000315E 0000                <2>  at .FSinfo, dw 0
  2530 00003160 0000                <2>  at .BkBootSec, dw 0
  2531 00003162 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 0000316B 000000              <2>
  2532                              <2>  iend
  2533 0000316E FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00003172 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 0000317B 202000              <2>
  2535 0000317E 00000000            <2>  at .volId, dd 0
  2536 00003182 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 0000318B FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00003193 15                  <2>  at .bBIOSNum, db i
  2485 00003194 15                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00003195 0002                <2>  at .wBpS, dw 200h
  2488 00003197 FF                  <2>  at .bSpC, db -1
  2489 00003198 0100                <2>  at .wResC, dw 0001h
  2490 0000319A 02                  <2>  at .bNumFAT, db 02h
  2491 0000319B E000                <2>  at .wRtCntNum, dw 00E0h
  2492 0000319D 400B                <2>  at .wTotSec16, dw 0B40h
  2493 0000319F 00                  <2>  at .bMedDesc, db 00h
  2494 000031A0 0900                <2>  at .wFATsz16, dw 0009h
  2495 000031A2 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 000031A4 0200                <2>  at .wNumHeads, dw 0002h
  2497 000031A6 00000000            <2>  at .dHiddSec, dd 0
  2498 000031AA 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 000031AE 00000000            <2>  at .FATsz32, dd 0
  2501 000031B2 0000                <2>  at .extFlags, dw 0
  2502 000031B4 0000                <2>  at .FSver, dw 0
  2503 000031B6 00000000            <2>  at .RootClus, dd 0
  2504 000031BA 0000                <2>  at .FSinfo, dw 0
  2505 000031BC 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 000031BE 10                  <2>  at .bBpbType, db bpbFat12
  2508 000031BF 0000                <2>  at .wOpenCnt, dw 0
  2509 000031C1 07                  <2>  at .bDevType, db typeGenRem
  2510 000031C2 0000                <2>  at .wDevFlgs, dw 0
  2511 000031C4 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 000031C6 0002                <2>  at .bytsPerSec, dw 200h
  2514 000031C8 01                  <2>  at .secPerClus, db 01h
  2515 000031C9 0100                <2>  at .revdSecCnt, dw 0001h
  2516 000031CB 02                  <2>  at .numFATs, db 02h
  2517 000031CC E000                <2>  at .rootEntCnt, dw 00E0h
  2518 000031CE 400B                <2>  at .totSec16, dw 0B40h
  2519 000031D0 F0                  <2>  at .media, db 0F0h
  2520 000031D1 0900                <2>  at .FATsz16, dw 0009h
  2521 000031D3 1200                <2>  at .secPerTrk, dw 0012h
  2522 000031D5 0200                <2>  at .numHeads, dw 0002h
  2523 000031D7 00000000            <2>  at .hiddSec, dd 0
  2524 000031DB 00000000            <2>  at .totSec32, dd 0
  2525 000031DF 00000000            <2>  at .FATsz32, dd 0
  2526 000031E3 0000                <2>  at .extFlags, dw 0
  2527 000031E5 0000                <2>  at .FSver, dw 0
  2528 000031E7 00000000            <2>  at .RootClus, dd 0
  2529 000031EB 0000                <2>  at .FSinfo, dw 0
  2530 000031ED 0000                <2>  at .BkBootSec, dw 0
  2531 000031EF 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 000031F8 000000              <2>
  2532                              <2>  iend
  2533 000031FB FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 000031FF 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00003208 202000              <2>
  2535 0000320B 00000000            <2>  at .volId, dd 0
  2536 0000320F 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00003218 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 00003220 16                  <2>  at .bBIOSNum, db i
  2485 00003221 16                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 00003222 0002                <2>  at .wBpS, dw 200h
  2488 00003224 FF                  <2>  at .bSpC, db -1
  2489 00003225 0100                <2>  at .wResC, dw 0001h
  2490 00003227 02                  <2>  at .bNumFAT, db 02h
  2491 00003228 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 0000322A 400B                <2>  at .wTotSec16, dw 0B40h
  2493 0000322C 00                  <2>  at .bMedDesc, db 00h
  2494 0000322D 0900                <2>  at .wFATsz16, dw 0009h
  2495 0000322F 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 00003231 0200                <2>  at .wNumHeads, dw 0002h
  2497 00003233 00000000            <2>  at .dHiddSec, dd 0
  2498 00003237 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 0000323B 00000000            <2>  at .FATsz32, dd 0
  2501 0000323F 0000                <2>  at .extFlags, dw 0
  2502 00003241 0000                <2>  at .FSver, dw 0
  2503 00003243 00000000            <2>  at .RootClus, dd 0
  2504 00003247 0000                <2>  at .FSinfo, dw 0
  2505 00003249 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 0000324B 10                  <2>  at .bBpbType, db bpbFat12
  2508 0000324C 0000                <2>  at .wOpenCnt, dw 0
  2509 0000324E 07                  <2>  at .bDevType, db typeGenRem
  2510 0000324F 0000                <2>  at .wDevFlgs, dw 0
  2511 00003251 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 00003253 0002                <2>  at .bytsPerSec, dw 200h
  2514 00003255 01                  <2>  at .secPerClus, db 01h
  2515 00003256 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00003258 02                  <2>  at .numFATs, db 02h
  2517 00003259 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 0000325B 400B                <2>  at .totSec16, dw 0B40h
  2519 0000325D F0                  <2>  at .media, db 0F0h
  2520 0000325E 0900                <2>  at .FATsz16, dw 0009h
  2521 00003260 1200                <2>  at .secPerTrk, dw 0012h
  2522 00003262 0200                <2>  at .numHeads, dw 0002h
  2523 00003264 00000000            <2>  at .hiddSec, dd 0
  2524 00003268 00000000            <2>  at .totSec32, dd 0
  2525 0000326C 00000000            <2>  at .FATsz32, dd 0
  2526 00003270 0000                <2>  at .extFlags, dw 0
  2527 00003272 0000                <2>  at .FSver, dw 0
  2528 00003274 00000000            <2>  at .RootClus, dd 0
  2529 00003278 0000                <2>  at .FSinfo, dw 0
  2530 0000327A 0000                <2>  at .BkBootSec, dw 0
  2531 0000327C 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00003285 000000              <2>
  2532                              <2>  iend
  2533 00003288 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 0000328C 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00003295 202000              <2>
  2535 00003298 00000000            <2>  at .volId, dd 0
  2536 0000329C 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 000032A5 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 000032AD 17                  <2>  at .bBIOSNum, db i
  2485 000032AE 17                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 000032AF 0002                <2>  at .wBpS, dw 200h
  2488 000032B1 FF                  <2>  at .bSpC, db -1
  2489 000032B2 0100                <2>  at .wResC, dw 0001h
  2490 000032B4 02                  <2>  at .bNumFAT, db 02h
  2491 000032B5 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 000032B7 400B                <2>  at .wTotSec16, dw 0B40h
  2493 000032B9 00                  <2>  at .bMedDesc, db 00h
  2494 000032BA 0900                <2>  at .wFATsz16, dw 0009h
  2495 000032BC 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 000032BE 0200                <2>  at .wNumHeads, dw 0002h
  2497 000032C0 00000000            <2>  at .dHiddSec, dd 0
  2498 000032C4 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 000032C8 00000000            <2>  at .FATsz32, dd 0
  2501 000032CC 0000                <2>  at .extFlags, dw 0
  2502 000032CE 0000                <2>  at .FSver, dw 0
  2503 000032D0 00000000            <2>  at .RootClus, dd 0
  2504 000032D4 0000                <2>  at .FSinfo, dw 0
  2505 000032D6 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 000032D8 10                  <2>  at .bBpbType, db bpbFat12
  2508 000032D9 0000                <2>  at .wOpenCnt, dw 0
  2509 000032DB 07                  <2>  at .bDevType, db typeGenRem
  2510 000032DC 0000                <2>  at .wDevFlgs, dw 0
  2511 000032DE 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 000032E0 0002                <2>  at .bytsPerSec, dw 200h
  2514 000032E2 01                  <2>  at .secPerClus, db 01h
  2515 000032E3 0100                <2>  at .revdSecCnt, dw 0001h
  2516 000032E5 02                  <2>  at .numFATs, db 02h
  2517 000032E6 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 000032E8 400B                <2>  at .totSec16, dw 0B40h
  2519 000032EA F0                  <2>  at .media, db 0F0h
  2520 000032EB 0900                <2>  at .FATsz16, dw 0009h
  2521 000032ED 1200                <2>  at .secPerTrk, dw 0012h
  2522 000032EF 0200                <2>  at .numHeads, dw 0002h
  2523 000032F1 00000000            <2>  at .hiddSec, dd 0
  2524 000032F5 00000000            <2>  at .totSec32, dd 0
  2525 000032F9 00000000            <2>  at .FATsz32, dd 0
  2526 000032FD 0000                <2>  at .extFlags, dw 0
  2527 000032FF 0000                <2>  at .FSver, dw 0
  2528 00003301 00000000            <2>  at .RootClus, dd 0
  2529 00003305 0000                <2>  at .FSinfo, dw 0
  2530 00003307 0000                <2>  at .BkBootSec, dw 0
  2531 00003309 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 00003312 000000              <2>
  2532                              <2>  iend
  2533 00003315 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00003319 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 00003322 202000              <2>
  2535 00003325 00000000            <2>  at .volId, dd 0
  2536 00003329 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 00003332 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 0000333A 18                  <2>  at .bBIOSNum, db i
  2485 0000333B 18                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 0000333C 0002                <2>  at .wBpS, dw 200h
  2488 0000333E FF                  <2>  at .bSpC, db -1
  2489 0000333F 0100                <2>  at .wResC, dw 0001h
  2490 00003341 02                  <2>  at .bNumFAT, db 02h
  2491 00003342 E000                <2>  at .wRtCntNum, dw 00E0h
  2492 00003344 400B                <2>  at .wTotSec16, dw 0B40h
  2493 00003346 00                  <2>  at .bMedDesc, db 00h
  2494 00003347 0900                <2>  at .wFATsz16, dw 0009h
  2495 00003349 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 0000334B 0200                <2>  at .wNumHeads, dw 0002h
  2497 0000334D 00000000            <2>  at .dHiddSec, dd 0
  2498 00003351 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 00003355 00000000            <2>  at .FATsz32, dd 0
  2501 00003359 0000                <2>  at .extFlags, dw 0
  2502 0000335B 0000                <2>  at .FSver, dw 0
  2503 0000335D 00000000            <2>  at .RootClus, dd 0
  2504 00003361 0000                <2>  at .FSinfo, dw 0
  2505 00003363 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 00003365 10                  <2>  at .bBpbType, db bpbFat12
  2508 00003366 0000                <2>  at .wOpenCnt, dw 0
  2509 00003368 07                  <2>  at .bDevType, db typeGenRem
  2510 00003369 0000                <2>  at .wDevFlgs, dw 0
  2511 0000336B 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 0000336D 0002                <2>  at .bytsPerSec, dw 200h
  2514 0000336F 01                  <2>  at .secPerClus, db 01h
  2515 00003370 0100                <2>  at .revdSecCnt, dw 0001h
  2516 00003372 02                  <2>  at .numFATs, db 02h
  2517 00003373 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00003375 400B                <2>  at .totSec16, dw 0B40h
  2519 00003377 F0                  <2>  at .media, db 0F0h
  2520 00003378 0900                <2>  at .FATsz16, dw 0009h
  2521 0000337A 1200                <2>  at .secPerTrk, dw 0012h
  2522 0000337C 0200                <2>  at .numHeads, dw 0002h
  2523 0000337E 00000000            <2>  at .hiddSec, dd 0
  2524 00003382 00000000            <2>  at .totSec32, dd 0
  2525 00003386 00000000            <2>  at .FATsz32, dd 0
  2526 0000338A 0000                <2>  at .extFlags, dw 0
  2527 0000338C 0000                <2>  at .FSver, dw 0
  2528 0000338E 00000000            <2>  at .RootClus, dd 0
  2529 00003392 0000                <2>  at .FSinfo, dw 0
  2530 00003394 0000                <2>  at .BkBootSec, dw 0
  2531 00003396 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 0000339F 000000              <2>
  2532                              <2>  iend
  2533 000033A2 FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 000033A6 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 000033AF 202000              <2>
  2535 000033B2 00000000            <2>  at .volId, dd 0
  2536 000033B6 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
  2482                              <2>  istruc drvBlk
  2483 000033BF FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  2484 000033C7 19                  <2>  at .bBIOSNum, db i
  2485 000033C8 19                  <2>  at .bDOSNum, db i
  2486                              <2> 
  2487 000033C9 0002                <2>  at .wBpS, dw 200h
  2488 000033CB FF                  <2>  at .bSpC, db -1
  2489 000033CC 0100                <2>  at .wResC, dw 0001h
  2490 000033CE 02                  <2>  at .bNumFAT, db 02h
  2491 000033CF E000                <2>  at .wRtCntNum, dw 00E0h
  2492 000033D1 400B                <2>  at .wTotSec16, dw 0B40h
  2493 000033D3 00                  <2>  at .bMedDesc, db 00h
  2494 000033D4 0900                <2>  at .wFATsz16, dw 0009h
  2495 000033D6 1200                <2>  at .wSecPerTrk, dw 0012h
  2496 000033D8 0200                <2>  at .wNumHeads, dw 0002h
  2497 000033DA 00000000            <2>  at .dHiddSec, dd 0
  2498 000033DE 00000000            <2>  at .dTotSec32, dd 0
  2499                              <2> 
  2500 000033E2 00000000            <2>  at .FATsz32, dd 0
  2501 000033E6 0000                <2>  at .extFlags, dw 0
  2502 000033E8 0000                <2>  at .FSver, dw 0
  2503 000033EA 00000000            <2>  at .RootClus, dd 0
  2504 000033EE 0000                <2>  at .FSinfo, dw 0
  2505 000033F0 0000                <2>  at .BkBootSec, dw 0
  2506                              <2> 
  2507 000033F2 10                  <2>  at .bBpbType, db bpbFat12
  2508 000033F3 0000                <2>  at .wOpenCnt, dw 0
  2509 000033F5 07                  <2>  at .bDevType, db typeGenRem
  2510 000033F6 0000                <2>  at .wDevFlgs, dw 0
  2511 000033F8 3F00                <2>  at .wNumCyl, dw 63
  2512                              <2>  istruc bpb32
  2513 000033FA 0002                <2>  at .bytsPerSec, dw 200h
  2514 000033FC 01                  <2>  at .secPerClus, db 01h
  2515 000033FD 0100                <2>  at .revdSecCnt, dw 0001h
  2516 000033FF 02                  <2>  at .numFATs, db 02h
  2517 00003400 E000                <2>  at .rootEntCnt, dw 00E0h
  2518 00003402 400B                <2>  at .totSec16, dw 0B40h
  2519 00003404 F0                  <2>  at .media, db 0F0h
  2520 00003405 0900                <2>  at .FATsz16, dw 0009h
  2521 00003407 1200                <2>  at .secPerTrk, dw 0012h
  2522 00003409 0200                <2>  at .numHeads, dw 0002h
  2523 0000340B 00000000            <2>  at .hiddSec, dd 0
  2524 0000340F 00000000            <2>  at .totSec32, dd 0
  2525 00003413 00000000            <2>  at .FATsz32, dd 0
  2526 00003417 0000                <2>  at .extFlags, dw 0
  2527 00003419 0000                <2>  at .FSver, dw 0
  2528 0000341B 00000000            <2>  at .RootClus, dd 0
  2529 0000341F 0000                <2>  at .FSinfo, dw 0
  2530 00003421 0000                <2>  at .BkBootSec, dw 0
  2531 00003423 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2531 0000342C 000000              <2>
  2532                              <2>  iend
  2533 0000342F FFFFFFFF            <2>  at .dAccTime, dd -1
  2534 00003433 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2534 0000343C 202000              <2>
  2535 0000343F 00000000            <2>  at .volId, dd 0
  2536 00003443 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2537                              <2>  iend
  2538                              <2>  %assign i i+1
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 0000344C 0F010D23000000      <1>     sidt [myIdt]
     8 00003453 0FB6C0              <1>     movzx eax, al
     9 00003456 4892                <1>     xchg rdx, rax
    10 00003458 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 0000345C 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00003463 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00003466 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 0000346A 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 0000346E 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00003472 894208              <1>     mov dword [rdx + 8], eax
    17 00003475 C3                  <1>     ret
    18                              <1> myIdt:
    19 00003476 0000                <1> .limit  dw 0
    20 00003478 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00003480 50                  <1>     push rax
    25 00003481 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00003482 51                  <1>     push rcx
    27 00003483 52                  <1>     push rdx
    28 00003484 488D15E7CCFFFF      <1>     lea rdx, qword [fastOutput]
    29 0000348B B829000000          <1>     mov eax, 29h
    30 00003490 E8B7FFFFFF          <1>     call installInterrupt
    31 00003495 488D15DECCFFFF      <1>     lea rdx, qword [ctrlBreak]
    32 0000349C B83B000000          <1>     mov eax, 3Bh
    33 000034A1 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 000034A6 B401                <1>     mov ah, 01      ;Get buffer status
    36 000034A8 CD36                <1>     int 36h
    37 000034AA 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 000034AC 30E4                <1>     xor ah, ah
    39 000034AE CD36                <1>     int 36h ;Read key to flush from buffer
    40 000034B0 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 000034B2 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 000034B7 CD30                <1>     int 30h
    44 000034B9 B402                <1>     mov ah, 02h
    45 000034BB 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 000034BD 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 000034BF CD30                <1>     int 30h
    48 000034C1 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 000034C3 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 000034C8 CD30                <1>     int 30h
    51 000034CA 5A                  <1>     pop rdx
    52 000034CB 59                  <1>     pop rcx
    53 000034CC 5B                  <1>     pop rbx
    54 000034CD 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 000034CE 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 000034D4 50                  <1>     push rax
    59 000034D5 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 000034DC 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 000034E0 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 000034E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 000034E2 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 000034E3 B402                <1>     mov ah, 02  ;Read RTC Time
    70 000034E5 CD3A                <1>     int 3Ah
    71 000034E7 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 000034E9 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 000034EC E84D000000          <1>     call .bcd2Bin
    75 000034F1 88C5                <1>     mov ch, al
    76 000034F3 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 000034F6 E843000000          <1>     call .bcd2Bin
    78 000034FB 88C1                <1>     mov cl, al
    79 000034FD 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 00003500 E839000000          <1>     call .bcd2Bin
    81 00003505 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 00003507 89C2                <1>     mov edx, eax
    83 00003509 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 0000350B CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 0000350D B404                <1>     mov ah, 04  ;Read RTC Date
    90 0000350F CD3A                <1>     int 3Ah
    91 00003511 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 00003513 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 00003516 E823000000          <1>     call .bcd2Bin
    95 0000351B 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 0000351E 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 00003524 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 00003527 E812000000          <1>     call .bcd2Bin
    99 0000352C 88C6                <1>     mov dh, al  
   100 0000352E 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 00003531 E808000000          <1>     call .bcd2Bin
   102 00003536 88C2                <1>     mov dl, al
   103 00003538 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 0000353A CD21                <1>     int 21h
   105 0000353C EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 0000353E 51                  <1>     push rcx
   109 0000353F 89C1                <1>     mov ecx, eax
   110 00003541 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 00003546 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 0000354C 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 0000354F C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 00003552 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 00003554 FFC9                <1>     dec ecx
   117 00003556 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 00003558 59                  <1>     pop rcx
   120 00003559 C3                  <1>     ret
   121                              <1> .clkEnd:
   122 0000355A 5B                  <1>     pop rbx ;Get the pointer back
   123 0000355B E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;Start by setting up the interrupt vectors!
   136 00003560 B839350000          <1>     mov eax, 3539h  ;Get original Int 39h
   137 00003565 CD21                <1>     int 21h
   138 00003567 48891D66CFFFFF      <1>     mov qword [i39Org], rbx
   139 0000356E B839250000          <1>     mov eax, 2539h  ;Setup our handler
   140 00003573 488D157ACFFFFF      <1>     lea rdx, dosInt39h
   141 0000357A CD21                <1>     int 21h
   142                              <1> 
   143 0000357C B833350000          <1>     mov eax, 3533h  ;Get original Int 33h
   144 00003581 CD21                <1>     int 21h
   145 00003583 48891D52CFFFFF      <1>     mov qword [i33Org], rbx
   146 0000358A 48891D5BCFFFFF      <1>     mov qword [i33Next], rbx    ;This is also the low level handler
   147 00003591 B833250000          <1>     mov eax, 2533h  ;Setup our handler
   148 00003596 488D1579CFFFFF      <1>     lea rdx, dosInt33h
   149 0000359D CD21                <1>     int 21h
   150                              <1> 
   151 0000359F B82F350000          <1>     mov eax, 352Fh  ;Get previous Int 2Fh handler
   152 000035A4 CD21                <1>     int 21h
   153 000035A6 48891D37CFFFFF      <1>     mov qword [i2FNext], rbx
   154 000035AD B82F250000          <1>     mov eax, 252Fh
   155 000035B2 488D15D8CFFFFF      <1>     lea rdx, i2fhSwap33h
   156 000035B9 CD21                <1>     int 21h
   157                              <1> 
   158                              <1> 
   159                              <1> ;Then set up the link pointers to the load address of the 
   160                              <1> ; drive table.
   161 000035BB B919000000          <1>     mov ecx, drvBlkTblL - 1
   162 000035C0 488D2D33F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   163 000035C7 4889EE              <1>     mov rsi, rbp
   164                              <1> .dskTblLp:
   165 000035CA 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   166 000035CD 4881C68D000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   167 000035D4 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   168 000035D7 FFC9                <1>     dec ecx                 ;Decrement the count
   169 000035D9 75EF                <1>     jnz .dskTblLp
   170 000035DB 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   171                              <1> ;Now get number of Int 33h information packed in r8
   172 000035E2 CD31                <1>     int 31h
   173                              <1>     ;Returns:
   174                              <1>     ;r8[Byte 0] = Number of COM ports
   175                              <1>     ;r8[Byte 1] = Number of fixed disks
   176                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   177                              <1>     ;r8[Byte 3] = Number of Int 33h units
   178 000035E4 4C890547DFFFFF      <1>     mov qword [msdDriver.inBuffer], r8   
   179 000035EB 0FB60543DFFFFF      <1>     movzx eax, byte [msdDriver.inBuffer + 3]
   180 000035F2 85C0                <1>     test eax, eax
   181 000035F4 0F84DA010000        <1>     jz .noDevs
   182 000035FA 0FB61D32DFFFFF      <1>     movzx ebx, byte [msdDriver.inBuffer + 1]
   183 00003601 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   184 00003603 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   185 00003609 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   186 0000360F C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   187                              <1> ;Start by doing fixed disks.
   188 00003616 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   189 00003618 745D                <1>     jz .doRem
   190 0000361A C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   191 00003621 C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   192                              <1> .hdLp:
   193                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   194                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   195 00003628 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   196 0000362A E8A2030000          <1>     call .ptnUpdateBpb
   197 0000362F 7211                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   198                              <1> ;The odd case where there is a BPB on the hard disk :)
   199 00003631 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   200 00003635 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   201 0000363B E833030000          <1>     call .advDiskPtrs
   202 00003640 EB17                <1>     jmp short .fatDiskOk
   203                              <1> .mbrFnd:
   204 00003642 751C                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   205                              <1> ;Now reread sector 0 (it might have been overwritten by a attempted FAT read)
   206 00003644 E8ECD3FFFF          <1>     call msdDriver.bbpbReadBS
   207                              <1> ;Now we check if we have a valid MBR signature.
   208 00003649 66813DDEE0FFFF55AA  <1>     cmp word [msdDriver.inBuffer + mbr.mbrSig], 0AA55h
   209 00003652 750C                <1>     jne .gotoNextDisk
   210 00003654 E89D010000          <1>     call .processMbr    ;This disk is done.
   211                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   212                              <1> .fatDiskOk:
   213                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   214 00003659 E80D030000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   215 0000365E 7417                <1>     je .doRem
   216                              <1> .gotoNextDisk:
   217 00003660 FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   218 00003666 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   219 0000366D 247F                <1>     and al, ~80h    ;Drop the upper bit
   220 0000366F 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   221 00003675 75B1                <1>     jne .hdLp
   222                              <1> ;------------------------------------------------
   223                              <1> ;   Here we start doing removable devices
   224                              <1> ;------------------------------------------------
   225                              <1> .doRem:
   226 00003677 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   227 0000367E 8805(01000000)      <1>     mov byte [fixPtn], al
   228 00003684 C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   229 0000368B C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   230 00003692 803D(02000000)00    <1>     cmp byte [remDrv], 0
   231 00003699 0F8426010000        <1>     je .noRems
   232                              <1> .remLp:
   233 0000369F 31C9                <1>     xor ecx, ecx        ;Load sector 0 of the disk
   234 000036A1 E82B030000          <1>     call .ptnUpdateBpb  ;If can't get a BPB, its ok. Remdevs here :)
   235 000036A6 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   236 000036AA B800880000          <1>     mov eax, 8800h      ;Get disk parameters for changeline status in eax
   237 000036AF CD33                <1>     int 33h
   238 000036B1 7221                <1>     jc .remSkipDisk     ;If we cant query the drive, then we skip this.
   239 000036B3 A910000000          <1>     test eax, 10h       ;Set if we have changeline support
   240 000036B8 7406                <1>     jz .remNext
   241 000036BA 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   242                              <1> .remNext:
   243 000036C0 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   244 000036C6 E8A8020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   245 000036CB 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   246 000036D2 742C                <1>     je .msdExit
   247                              <1> .remSkipDisk:
   248 000036D4 FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   249 000036DA 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   250 000036E1 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   251 000036E7 7417                <1>     je .msdExit
   252 000036E9 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   253 000036EB 72B2                <1>     jb .remLp                   ;If not, do normal processing.
   254                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   255                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   256                              <1> ; to go past the letters assigned to the fixed disk.
   257 000036ED 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   258 000036F3 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   259 000036F5 8805(04000000)      <1>     mov byte [dosDrv], al
   260 000036FB E99FFFFFFF          <1>     jmp .remLp
   261                              <1> .msdExit:
   262 00003700 F605(00000000)FF    <1>     test byte [physVol], -1 ;Did we fail to initialise ANY devices?
   263 00003707 0F84C7000000        <1>     jz .noDevs  ;If so, we pretend we have two drives and hope defaults work!
   264 0000370D F605(00000000)FF    <1>     test byte [physVol], -1
   265 00003714 0F84AB000000        <1>     jz .noRems
   266 0000371A 803D(02000000)01    <1>     cmp byte [remDrv], 1
   267 00003721 7539                <1>     jne .skipSingle
   268                              <1> ;Here we do the A: >-< B: jank.
   269                              <1> ;We know rbp points to what should the block for B:. The block for A:
   270                              <1> ; is right behind it.
   271                              <1> .doSingle:
   272 00003723 4889EE              <1>     mov rsi, rbp
   273 00003726 4881EE8D000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   274 0000372D 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   275                              <1> ;Now we transfer the BIOS number and set drive number to 1
   276 00003733 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bBIOSNum]
   277 00003737 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   278 0000373A C6450901            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   279 0000373E 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   280 00003742 4881C60A000000      <1>     add rsi, drvBlk.bpb
   281 00003749 B983000000          <1>     mov ecx, (drvBlk_size - 10)  ;8 bytes Link ptr and 2 id bytes
   282 0000374E F3A4                <1>     rep movsb
   283 00003750 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   284 00003756 FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   285                              <1> .skipSingle:
   286 0000375C 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   287 00003763 53                  <1>     push rbx    ;Save this count on the stack
   288 00003764 FFCB                <1>     dec ebx     ;Turn into an offset into the table
   289 00003766 B88D000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   290 0000376B F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   291 0000376D 488D3586EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   292 00003774 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   293 0000377C 488D1D(66000000)    <1>     lea rbx, bpbArray
   294                              <1> .buildBPBArrayLp:
   295 00003783 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   296 00003787 0FB64609            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   297 0000378B 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   298 0000378F 4889F7              <1>     mov rdi, rsi                            ;Save this ptr before walking
   299 00003792 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Now walk the table
   300 00003795 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   301 0000379C 75E5                <1>     jne .buildBPBArrayLp    ;No... keep going
   302 0000379E 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   303                              <1> ;
   304                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   305                              <1> ;
   306 000037A1 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the request packet ptr back
   307                              <1> ;All previous drivers return the "worst case" eject pointer. Here we return
   308                              <1> ; the real eject pointer
   309 000037A8 4881C78D000000      <1>     add rdi, drvBlk_size    ;Mov rdi past end of last drvBlk 2 first free byte
   310 000037AF 48897B0E            <1>     mov qword [rbx + initReqPkt.endptr], rdi    ;save as real eject point
   311 000037B3 58                  <1>     pop rax         ;Get back the number of detected volumes
   312 000037B4 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   313 000037B7 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   314 000037BB 66C70556CEFFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   315                              <1>     return
    13                              <2> %%_ret:
    14 000037C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> .noRems:
   317                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   318                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   319                              <1> ; we just did the first remdev. This drive gets registered as having
   320                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   321 000037C5 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   322 000037C9 FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   323                              <1> ;Here we setup A: drive to be a pretend 1.44Mb drive
   324 000037CF E94FFFFFFF          <1>     jmp .doSingle
   325                              <1> .noDevs:
   326                              <1> ;If we have no drives, then suppose we have two default drives
   327                              <1> ; A: and B: which are NOT the same!
   328 000037D4 C605(00000000)02    <1>     mov byte [physVol], 2   ;Identify entries A and B of system Ok!
   329                              <1> ;Now set them as their own owners and not shared status.
   330 000037DB 488D3518EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl
   331 000037E2 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   332 000037E8 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]
   333 000037EB 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   334 000037F1 E966FFFFFF          <1>     jmp .skipSingle
   335                              <1> ;------------------------
   336                              <1> ; Procedures for init
   337                              <1> ;------------------------
   338                              <1> 
   339                              <1> .processMbr:
   340                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   341                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   342 000037F6 E8A4010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   343                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   344                              <1> ; ptn. We process it, invalidate the entry then start again
   345 000037FB 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   346 00003802 7539                <1>     jne .pmbrNoHack
   347 00003804 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   348 0000380B B904000000          <1>     mov ecx, 4
   349                              <1> .pmbrHackLp:
   350 00003810 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   351 00003813 740D                <1>     je .pmbrHackFnd
   352                              <1> .pmbrHackRet:
   353 00003815 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   354 0000381C FFC9                <1>     dec ecx
   355 0000381E 75F0                <1>     jnz .pmbrHackLp
   356 00003820 EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   357                              <1> .pmbrHackFnd:
   358 00003822 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   359 00003826 E831020000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   360 0000382B 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   361 0000382D C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   362 00003834 E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   363                              <1> ;Ignore any read errors, but we start again.
   364 00003839 C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   365                              <1> ;Now we fall down and start again
   366                              <1> .pmbrNoHack:
   367 0000383D C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   368 00003844 488D35(06000000)    <1>     lea rsi, mbrE
   369                              <1> .pmbrLp:
   370 0000384B 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   371 0000384E E817020000          <1>     call .checkMbrPtnType
   372 00003853 7551                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   373 00003855 E802020000          <1>     call .checkDataPtn
   374 0000385A 740A                <1>     je .pmbrDodata
   375 0000385C E85E000000          <1>     call .processEPtn   ;Here we process EBR
   376                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003861 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003863 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   377 00003864 EB38                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   378                              <1> .pmbrDodata:
   379 00003866 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   380 00003869 E863010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   381 0000386E 730E                <1>     jnc .pmbrOk
   382                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003870 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003872 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   383                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   384 00003873 E8D6000000          <1>     call .getUfmtSize
   385 00003878 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   386                              <1> .pmbrOk:
   387 0000387E 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   388 00003884 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   389 00003888 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   390 0000388B 2580000000          <1>     and eax, ptnActive
   391 00003890 0D01000000          <1>     or eax, ptnPrimary
   392 00003895 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   393 00003899 E8D5000000          <1>     call .advDiskPtrs
   394                              <1> .pmbrXtrejoin:
   395 0000389E E8C8000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   396                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000038A3 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000038A5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   397                              <1> .pmbrNext:
   398 000038A6 FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   399 000038AC 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   400                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000038B3 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000038B5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   401 000038B6 4881C610000000      <1>     add rsi, mbrEntry_size
   402 000038BD EB8C                <1>     jmp short .pmbrLp
   403                              <1> 
   404                              <1> .processEPtn:
   405                              <1> ;Process all logical process in an extended partition. rsi points to
   406                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   407                              <1> ;Thus we always know the "root" sector of this extended partition.
   408 000038BF 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   409                              <1> .peplp:
   410 000038C2 E8F4000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   411                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000038C7 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000038C9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   412 000038CA 66813D5DDEFFFF55AA  <1>     cmp word [msdDriver.inBuffer + ebr.mbrSig], 0AA55h
   413 000038D3 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   414 000038D5 F9                  <1>     stc
   415                              <1>     return
    13                              <2> %%_ret:
    14 000038D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> .pep1:
   417 000038D7 E8B2000000          <1>     call .copyEbr       ;Save the EBR
   418                              <1> ;Now we check the saved EBR is valid.
   419 000038DC 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   420 000038E3 E86C010000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   421 000038E8 7551                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   422 000038EA 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   423 000038F1 E866010000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   424 000038F6 7443                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   425                              <1> ;Now we get the absolute start sector of this partition.
   426 000038F8 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   427 000038FE E8CE000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB (preserves sector number)
   428 00003903 730E                <1>     jnc .pepOk
   429                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003905 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003907 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   430                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   431 00003908 E841000000          <1>     call .getUfmtSize
   432 0000390D 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   433                              <1> .pepOk:
   434                              <1> ;If here, this partition will be given a CDS entry.
   435                              <1> ;Now we go to the next logical partition in the extended partition and
   436                              <1> ; move to the next drive
   437 00003913 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   438 00003919 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   439 0000391D 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   440 00003920 2580000000          <1>     and eax, ptnActive
   441 00003925 0D02000000          <1>     or eax, ptnLogical
   442 0000392A 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   443 0000392E E840000000          <1>     call .advDiskPtrs
   444 00003933 E833000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   445                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003938 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000393A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   446                              <1> .pepNextEbr:
   447                              <1> ;Else we now walk the disk linked list.
   448 0000393B 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   449 00003941 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   450                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003943 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003945 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   451 00003946 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   452 00003949 E974FFFFFF          <1>     jmp .peplp
   453                              <1> 
   454                              <1> .getUfmtSize:
   455                              <1> ;Moves the partition geometry information into drvBlk from MBR. This is only
   456                              <1> ; a necessity if the medium doesn't have a trustworthy BPB. Doesn't touch CHS 
   457                              <1> ; stuff because bleugh. That can be computed by FORMAT.
   458                              <1> ;
   459                              <1> ;This is done so that unformatted partitions are mounted by DOS. They cannot 
   460                              <1> ; be used, and so needs to be FORMATed. Thus, NumFAT=0 should only really 
   461                              <1> ; happen on hard drive partitions at boot.
   462                              <1> ;
   463                              <1> ;Input: rsi -> MBR/EBR entry for this partition
   464                              <1> ;       rbp -> drvBlk for this drive we are setting up
   465                              <1> ;       rcx = Sector number of the start of the partition
   466                              <1> ;
   467                              <1> ;Output: The following fields in the drvBlk are filled in
   468                              <1> ;       bNumFAT = Number of FATs on partition (0 as unformatted)
   469                              <1> ;       dHiddSec = Starting sector of the partition
   470                              <1> ;       dTotSec32 = 32 bit size of partition (if large enough)
   471                              <1> ;       wTotSec16 = 16 bit size of partition or 0 if 32 bit in use
   472 0000394E C6450F00            <1>     mov byte [rbp + drvBlk.bNumFAT], 0 ;Indicate no FATs on ufmt ptn.
   473 00003952 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx  ;Set start sector of partition
   474 00003955 8B4E0C              <1>     mov ecx, dword [rsi + mbrEntry.numSectors]
   475 00003958 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   476 0000395E 7605                <1>     jbe .gpgSmol
   477 00003960 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   478 00003963 31C9                <1>     xor ecx, ecx
   479                              <1> .gpgSmol:
   480 00003965 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   481 00003969 F8                  <1>     clc
   482                              <1>     return
    13                              <2> %%_ret:
    14 0000396A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> .physCheckEnd:
   485 0000396B 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   486                              <1>     return
    13                              <2> %%_ret:
    14 00003972 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   487                              <1> 
   488                              <1> .advDiskPtrs:
   489 00003973 E88E000000          <1>     call .getNumCyl     ;Computes the number of cylinders in the BPB
   490 00003978 E8C1000000          <1>     call .xfrBkupBpb    ;Finish drvBlk init by transfering dfltBPB
   491 0000397D 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   492 00003981 FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   493 00003987 FE05(00000000)      <1>     inc byte [physVol]
   494                              <1>     return
    13                              <2> %%_ret:
    14 0000398D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> .copyEbr:
   497                              <1> ;Copies the EBR from the EBR sector in the buffer
   498 0000398E 51                  <1>     push rcx
   499 0000398F 56                  <1>     push rsi
   500 00003990 57                  <1>     push rdi
   501 00003991 488D3D(06000000)    <1>     lea rdi, mbrE
   502 00003998 B920000000          <1>     mov ecx, 2*mbrEntry_size
   503 0000399D EB0F                <1>     jmp short .cpmbr
   504                              <1> .copyMbr:
   505                              <1> ;Copies the MBR from the MBR sector in the buffer
   506 0000399F 51                  <1>     push rcx
   507 000039A0 56                  <1>     push rsi
   508 000039A1 57                  <1>     push rdi
   509 000039A2 488D3D(06000000)    <1>     lea rdi, mbrE
   510 000039A9 B940000000          <1>     mov ecx, 4*mbrEntry_size
   511                              <1> .cpmbr:
   512 000039AE 488D353BDDFFFF      <1>     lea rsi, qword [msdDriver.inBuffer + mbr.mbrEntry1]
   513 000039B5 F3A4                <1>     rep movsb
   514 000039B7 5F                  <1>     pop rdi
   515 000039B8 5E                  <1>     pop rsi
   516 000039B9 59                  <1>     pop rcx
   517                              <1>     return
    13                              <2> %%_ret:
    14 000039BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> .readSector:
   520                              <1> ;Input: ecx = Sector to read
   521 000039BB 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   522 000039C2 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   523 000039C7 488D1D64DBFFFF      <1>     lea rbx, msdDriver.inBuffer
   524 000039CE CD33                <1>     int 33h
   525                              <1>     return
    13                              <2> %%_ret:
    14 000039D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> .ptnUpdateBpb:
   528                              <1> ;Setups up the call for below on the current partition.
   529                              <1> ;Input: ecx = Number of hidden sectors (preserved)
   530                              <1> ;Output:
   531                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   532                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   533                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   534 000039D1 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   535 000039D7 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   536 000039DA 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   537 000039E1 884509              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   538 000039E4 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   539 000039EB 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   540 000039EE 51                  <1>     push rcx
   541 000039EF 56                  <1>     push rsi    ;Save the mbr entry ptr
   542 000039F0 E883CEFFFF          <1>     call msdDriver.updateBpb
   543 000039F5 7209                <1>     jc .pubBad
   544 000039F7 E892CFFFFF          <1>     call msdDriver.moveVolIds
   545 000039FC 5E                  <1>     pop rsi
   546 000039FD 59                  <1>     pop rcx
   547 000039FE F8                  <1>     clc         ;Always clean even if no ids
   548                              <1>     return
    13                              <2> %%_ret:
    14 000039FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .pubBad:
   550 00003A00 5E                  <1>     pop rsi
   551 00003A01 59                  <1>     pop rcx
   552 00003A02 3C07                <1>     cmp al, drvBadMed ;Bad Partition?
   553 00003A04 F9                  <1>     stc         ;Ensure we set the CF again
   554                              <1>     return
    13                              <2> %%_ret:
    14 00003A05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> .getNumCyl:
   557                              <1> ;Computes the number of cylinders on the media. Not really to be used.
   558                              <1> ;Input: rbp -> drvBlk
   559 00003A06 50                  <1>     push rax
   560 00003A07 51                  <1>     push rcx
   561 00003A08 52                  <1>     push rdx
   562 00003A09 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
   563 00003A0D 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
   564 00003A11 F7E1                <1>     mul ecx ;Get sectors per cylinder in eax. edx = 0
   565 00003A13 85C0                <1>     test eax, eax   ;If ax is 0, store zero! Phoney CHS data in BPB.
   566 00003A15 7414                <1>     jz .gncExit     ;This prevents CHS IOCTL from occuring.
   567 00003A17 89C1                <1>     mov ecx, eax    ;Save this number in ecx
   568 00003A19 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   569 00003A1D 85C0                <1>     test eax, eax   ;If this is zero, get the 32 bit count of sectors
   570 00003A1F 0F44451F            <1>     cmovz eax, dword [rbp + drvBlk.dTotSec32]
   571 00003A23 F7F1                <1>     div ecx     ;sectors/(sectors/cylinder) = whole cylinders in eax
   572 00003A25 85D2                <1>     test edx, edx
   573 00003A27 7402                <1>     jz .gncExit
   574 00003A29 FFC0                <1>     inc eax     ;Inc the cylinder count to account for not whole divide
   575                              <1> .gncExit:
   576 00003A2B BAFFFF0000          <1>     mov edx, 0FFFFh   ;A default Max cylinder value, since CHS is for floppies.
   577 00003A30 39D0                <1>     cmp eax, edx
   578 00003A32 0F47C2              <1>     cmova eax, edx
   579 00003A35 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   580 00003A39 F8                  <1>     clc ;Ensure CF is clear
   581 00003A3A 5A                  <1>     pop rdx
   582 00003A3B 59                  <1>     pop rcx
   583 00003A3C 58                  <1>     pop rax
   584                              <1>     return
    13                              <2> %%_ret:
    14 00003A3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> .xfrBkupBpb:
   587                              <1> ;Makes a copy of the reported bpb in the drvBlk for formatting backups
   588 00003A3E 51                  <1>     push rcx
   589 00003A3F 56                  <1>     push rsi
   590 00003A40 57                  <1>     push rdi
   591 00003A41 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
   592 00003A45 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sBkupBPB]
   593 00003A49 B929000000          <1>     mov ecx, drvBlkBpb_size
   594 00003A4E F3A4                <1>     rep movsb
   595 00003A50 5F                  <1>     pop rdi
   596 00003A51 5E                  <1>     pop rsi
   597 00003A52 59                  <1>     pop rcx
   598                              <1>     return
    13                              <2> %%_ret:
    14 00003A53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> .checkEbrPtnType:
   601                              <1> ;Input: al = Partition type
   602                              <1> ;Output: ZF=ZE => Valid partition type found
   603                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   604 00003A54 E811000000          <1>     call .checkMbrPtnType
   605                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003A59 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003A5B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   606                              <1> .checkDataPtn:
   607 00003A5C 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   608 00003A5E 7407                <1>     je .ceptBad
   609 00003A60 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   610 00003A62 7403                <1>     je .ceptBad
   611 00003A64 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   612                              <1>     return
    13                              <2> %%_ret:
    14 00003A66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> .ceptBad:
   614 00003A67 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   615                              <1>     return
    13                              <2> %%_ret:
    14 00003A69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> .checkMbrPtnType:
   618                              <1> ;Input: al = Partition type
   619                              <1> ;Output: ZF=ZE => Valid partition type found
   620                              <1> ;        ZF=NZ => Not a valid partition type
   621 00003A6A 51                  <1>     push rcx
   622 00003A6B 57                  <1>     push rdi
   623 00003A6C 488D3D0A000000      <1>     lea rdi, .ptnTbl
   624 00003A73 B909000000          <1>     mov ecx, .ptnTblL
   625 00003A78 F2AE                <1>     repne scasb ;Find the entry in al
   626 00003A7A 5F                  <1>     pop rdi
   627 00003A7B 59                  <1>     pop rcx
   628                              <1>     return
    13                              <2> %%_ret:
    14 00003A7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> ;Table contents:
   631                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   632                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   633                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   634                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   635                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   636                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   637                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   638                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   639 00003A7D 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   640                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw devDrvChar | devDrvFastOut | devDrvConOut | devDrvConIn
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw devDrvChar
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw devDrvChar | devDrvOutToBsy | devDrvIOCTL    ;Dont really support IOCTL
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw devDrvChar | devDrvClockDev
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 C008                <1>     dw devDrvOpClRem | devDrvIOCTLQ | devDrvIOCTL
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [AA05000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw devDrvChar
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw devDrvChar
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw devDrvChar
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw devDrvChar
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw devDrvChar | devDrvOutToBsy | devDrvIOCTL    ;Dont really support IOCTL
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw devDrvChar | devDrvOutToBsy | devDrvIOCTL    ;Dont really support IOCTL
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw devDrvChar | devDrvOutToBsy | devDrvIOCTL    ;Dont really support IOCTL
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqPktPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     5                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     6 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     7 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     8 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
     9 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    10 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    11 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    12 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    13 00000066 <res D0h>           <1> bpbArray    dq drvBlkTblL dup (?)
    38 00000136 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+4+2 passes

