     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rets 0
    81                              <1> cret s
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retns 0
    85                              <1> cret ns
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL    equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvNotIBM    equ 2000h ;If set, buffer in Build BPB is scratch space
    70                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    71                              <1>     devDrvIOCTLRW   equ 4000h ;If set, IOCTL Read/Write supported
    72                              <1>     devDrvChar      equ 8000h ;If set, Char device
    73                              <1> ;Bit 0 1=console input
    74                              <1> ;    1 1=console output (character devices)
    75                              <1> ;    2 1=NUL device
    76                              <1> ;    3 1=CLOCK device
    77                              <1> ;    4 1=Int 29 output (CON)
    78                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    79                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    80                              <1> ;   11 1=open/close/removable media supported (3.0+)
    81                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    82                              <1> ;      1=media descriptor in FAT required (block devices)
    83                              <1> ;   14 1=IOCTL supported
    84                              <1> ;   15 0=block device
    85                              <1> ;      1=character device
    86                              <1> 
    87                              <1> ;Driver structures
    88                              <1> 
    89                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    90                              <1> 
    91                              <1>     .hdrlen db ?  ;Length of the request header
    92                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    93                              <1>     .cmdcde db ?  ;Command code
    94                              <1>     .status dw ?  ;Status word
    95                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    96                              <1> 
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> struc drvReqPkt
   100                              <1>     drvReqPktM
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   101                              <1> endstruc
   102                              <1> 
   103                              <1> struc initReqPkt  ;Init Request Packet
   104                              <1> 
   105                              <1>     drvReqPktM   ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   106 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   107 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   108 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   109 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   114                              <1> 
   115                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   116 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   117 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   118 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   123                              <1> 
   124                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   125 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   126 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   127 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   128                              <1> 
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc ioReqPkt   ;IO Request Packet
   132                              <1> 
   133                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   134 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   135 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   136 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   137 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   138 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   143                              <1>     
   144                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   145 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   146                              <1> 
   147                              <1> endstruc
   148                              <1> 
   149                              <1> struc statusReqPkt   ;Status Request Packet
   150                              <1> 
   151                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   152                              <1> 
   153                              <1> endstruc
   154                              <1> 
   155                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   156                              <1> 
   157                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   158                              <1>      
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc openReqPkt ;Open Device Request Packet
   162                              <1> 
   163                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   164                              <1>      
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc closeReqPkt ;Close Device Request Packet
   168                              <1> 
   169                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   170                              <1>      
   171                              <1> endstruc
   172                              <1> 
   173                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   174                              <1> 
   175                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   176                              <1>      
   177                              <1> endstruc
   178                              <1> 
   179                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   180                              <1> 
   181                              <1>     drvReqPktM    ;Common Driver Header Macro  
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   182 0000000D ??                  <1>     .majfun db ?  ;Major function number
   183 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   184 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   185 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   186 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   187                              <1> 
   188                              <1> endstruc
   189                              <1> 
   190                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   191                              <1>     
   192                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   193                              <1> 
   194                              <1> endstruc
   195                              <1> 
   196                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   197                              <1>     
   198                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   199                              <1> 
   200                              <1> endstruc
   201                              <1> ;IOCTL structs
   202                              <1> 
   203                              <1> struc lbaParamsBlock
   204 00000000 ??                  <1>     .bSize          db ?
   205 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   206                              <1>                             ;1 = Get current saved drive info w/o updating
   207                              <1>                             ;2 = Get physical parameters of the medium
   208                              <1>                             ;Only meaningful on get. Set must have this as 0
   209 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   210 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   211                              <1>                             ; If one, can use CHS functions with returned vals
   212 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   213 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   214 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   215                              <1> ;The below is the absolute start sector of the partition. It is the 
   216                              <1> ; partition at which to find the BPB.
   217 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   218                              <1> endstruc
   219                              <1> 
   220                              <1> struc lbaIOBlock
   221 00000000 ??                  <1>     .size           db ?
   222 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   223 00000002 ????????????        <1>     .res            db 6 dup (?)
   224 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start write at
   225 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   226                              <1> endstruc
   227                              <1> 
   228                              <1> struc lbaFormatBlock
   229 00000000 ??                  <1>     .size           db ?
   230 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   231 00000002 ????????????        <1>     .res            db 6 dup (?)
   232 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start format at
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc chsParamsBlock
   236 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   237 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   238 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   239 00000004 ????                <1>     .wNumCyl    dw ?
   240 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   241 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   242                              <1>     .TrackLayout:
   243                              <1> endstruc
   244                              <1> 
   245                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   246                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   247                              <1> ;Only used in setparams requests. Ignored for getparams 
   248                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   249                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   250                              <1> 
   251                              <1> 
   252                              <1> struc chsIOBlock
   253 00000000 ??                  <1>     .bSpecFuncs     db ?
   254 00000001 ????                <1>     .wStartHead     dw ?
   255 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   256 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   257 00000007 ????                <1>     .wNumSectors    dw ?
   258 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   259                              <1> endstruc
   260                              <1> 
   261                              <1> struc chsFormatBlock
   262 00000000 ??                  <1>     .bSpecFuncs db ?
   263 00000001 ????                <1>     .wStartHead dw ?
   264 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   265                              <1> endstruc
   266                              <1> 
   267                              <1> struc accFlgBlk
   268 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   269 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc idParamBlk
   273 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   274 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   275 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   276 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   277                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
     1                              <1> ;No externally defined symbols, no internally exposed symbols.
     2                              <1> 
     3                              <1> ;Driver internal equates
     4                              <1> drvBlkTblL      equ 26  ;Space for 26 drive letters!
     5                              <1> ;IOCTL track table size (max number of sectors in a track is 63)
     6                              <1> maxTrackTblSz   equ 63
     7                              <1> maxAcc          equ 5   ;Maximum accesses to a remdev w/o timer/changeline
     8                              <1> 
     9                              <1> struc drvBlk
    10                              <1> ;--------------------------------------------------------------------
    11                              <1> ; Drvblk Header information
    12                              <1> ;--------------------------------------------------------------------
    13 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    14 00000008 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    15 00000009 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    16                              <1> ;--------------------------------------------------------------------
    17                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    18                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    19                              <1> ;  left in those fields... not a problem)
    20                              <1> ;--------------------------------------------------------------------
    21                              <1> .bpb:
    22 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    23 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    24 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    25 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    26 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    27 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
    28 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
    29 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
    30 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
    31 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
    32 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
    33 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
    34                              <1> ;--------------------------------------------------------------------
    35                              <1> ; The below vars are only accessed on FAT32 volumes
    36                              <1> ;--------------------------------------------------------------------
    37 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
    38 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
    39 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
    40 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
    41 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
    42 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
    43                              <1> .endBpb:
    44                              <1> ;--------------------------------------------------------------------
    45                              <1> ; DrvBlk flags
    46                              <1> ;--------------------------------------------------------------------
    47 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
    48 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
    49 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
    50 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
    51                              <1> ;The below word is a legacy thing. It is only used in a CHS based IOCTL call.
    52 00000039 ????                <1>     .wNumCyl    dw ?
    53 0000003B <res 35h>           <1>     .sBkupBPB   db bpb32_size dup (?)   ;Backup of BPB used during format
    54                              <1> .dAccTime:          ;Last media check time if remdev
    55 00000070 ????????            <1>     .wPtnType   dd ?    
    56                              <1> ;--------------------------------------------------------------------
    57                              <1> ; Volume string and id for the drive described by this drvblk
    58                              <1> ;--------------------------------------------------------------------
    59 00000074 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
    60 0000007F ??                  <1>                 db ?            ;Null terminator for string
    61 00000080 ????????            <1>     .volId      dd ?            ;Volume serial number            
    62 00000084 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
    63 0000008C ??                  <1>                 db ?            ;Null terminator for string
    64                              <1> endstruc
    65                              <1> drvBlkBpb_size equ drvBlk.endBpb - drvBlk.bpb
    66                              <1> 
    67                              <1> ;FAT type values
    68                              <1> bpbUnknown  equ 80h ;Unknown FAT
    69                              <1> bpbFat16    equ 40h ;FAT 16 disk
    70                              <1> bpbFat32    equ 20h ;FAT 32 disk
    71                              <1> bpbFat12    equ 10h ;FAT 12 disk
    72                              <1> 
    73                              <1> ;Device Type flags
    74                              <1> type48TPI   equ 0   ;Small floppy format, depreciated
    75                              <1> type96TPI   equ 1   ;Large floppy format, depreciated
    76                              <1> typeSmall   equ 2   ;Super large floppy format, depreciated
    77                              <1> typeHard    equ 5   ;Hard drive
    78                              <1> typeGenRem  equ 7   ;Generic removable medium, default
    79                              <1> 
    80                              <1> ;Device Flag values
    81                              <1> devFixed    equ 1       ;Set if fixed disk 
    82                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
    83                              <1> devLockBpb  equ 4       ;Set if we are not to update BPB on updateBPB calls
    84                              <1> devSameSec  equ 8       ;All sectors in track are same size
    85                              <1> devMulti    equ 10h     ;Physical drive has many logical units (A/B share)
    86                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
    87                              <1> devChgd     equ 40h     ;Dev change detected (set on shared physical drives)
    88                              <1>                         ; Can only be set on remdevs with changeline support!
    89                              <1> devSetDASD  equ 80h     ;Set if we need to set drive DASD params before next fmt.
    90                              <1>                         ; Gets set if new parameters are written to drive!
    91                              <1> devNewParms equ 100h    ;Set if new drive parameters set! Set on IOCTL setparms.
    92                              <1> devUnFmt    equ 200h    ;Disables reads/writes if set
    93                              <1> 
    94                              <1> ;Media byte bits
    95                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
    96                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
    97                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
    98                              <1> 
    99                              <1> ;Partition types
   100                              <1> ptnPrimary  equ 1       ;A primary MBR partition
   101                              <1> ptnLogical  equ 2       ;A logical MBR partition
   102                              <1> ptnActive   equ 80h     ;An active partition
   103                              <1> ptnGpt      equ 4       ;A primary GPT partition
   104                              <1> ptrUnknown  equ 8000h   ;An unknown partition
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E87D320000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E86A310000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 7408                <1>     jz .prnExit 
   513                              <1>     ;Everything else, device not ready
   514 000004AD B002                <1>     mov al, drvNotReady
   515                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   516 000004AF B480                <1>     mov ah, 80h ;Set error bit
   517 000004B1 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   518                              <1> .prnExit:
   519 000004B5 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   520 000004BB 5B                  <1>     pop rbx
   521 000004BC 58                  <1>     pop rax
   522 000004BD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> ; This file contains five main routines:
     2                              <1> ; 1) Replacement Int 39h routine (for unhooking interrupts back).
     3                              <1> ; 2) Replacement Int 33h routine.
     4                              <1> ; 3) Int 33h replacement routine.
     5                              <1> ; 4) Driver itself
     6                              <1> ; 5) Int 2Fh Driver backdoor routine
     7                              <1> 
     8 000004BE 0000000000000000    <1> i39Org  dq 0    ;Original BIOS Int 39h to replace on Int 39h
     9 000004C6 0000000000000000    <1> i33Org  dq 0    ;Original BIOS Int 33h to replace on Int 39h.
    10 000004CE 0000000000000000    <1> i2FNext dq 0    ;Previous Int 2Fh handler
    11 000004D6 0000000000000000    <1> i33Next dq 0    ;Current disk driver to call.
    12                              <1> 
    13                              <1> ;Replacement Int 39h routine to replace interrupts these drivers hook.
    14                              <1> dosInt39h:
    15                              <1> ;For now, we just replace int 33h and int 39h back and then jump to i39h
    16 000004DE B833250000          <1>     mov eax, 2533h
    17 000004E3 488B15DCFFFFFF      <1>     mov rdx, qword [i33Org]
    18 000004EA CD21                <1>     int 21h
    19 000004EC B839250000          <1>     mov eax, 2539h
    20 000004F1 488B15C6FFFFFF      <1>     mov rdx, qword [i39Org]
    21 000004F8 CD21                <1>     int 21h
    22                              <1> ;And now do the actual warm reboot
    23 000004FA FF25BEFFFFFF        <1>     jmp qword [i39Org]
    24                              <1> 
    25                              <1> ;Replacement Int 33h routine
    26                              <1> dosInt33h:
    27                              <1> ;--------------------------------------------------------------------------
    28                              <1> ;       This is a wrapper around the BIOS Int 33h handler.
    29                              <1> ;--------------------------------------------------------------------------
    30                              <1> ;This routine does the following:
    31                              <1> ;1) Checks if a format request is being made, in which case
    32                              <1> ;   it will ensure that the devSetDASD and devChgd bits are set for all 
    33                              <1> ;   drives for the BIOS drive in dl to ensure that the DOS driver treats
    34                              <1> ;   the DOS drives properly.
    35                              <1> ;
    36                              <1> ; For the most part (CHS is depreciated so we don't talk about it here):
    37                              <1> ;   AH = Function number (05h/85h is FORMAT)
    38                              <1> ;   AL = Number of sectors to xact.
    39                              <1> ;   RBX -> Points to a xfr buffer.
    40                              <1> ;   RCX = Start sector of xft.
    41                              <1> ;   DL = BIOS Drive number to xact on.
    42                              <1> ;--------------------------------------------------------------------------
    43                              <1> ;Enter the DOS driver critical section . When the MSD driver enters this it 
    44                              <1> ; already has the lock so this simply incs the count. If a process attempts 
    45                              <1> ; to bypass DOS and we are already processing a request it gets put on ice.
    46                              <1> ;--------------------------------------------------------------------------
    47                              <1> ;Start by clearing the CF on entry
    48 00000500 80642410FE          <1>     and byte [rsp + 2*8], ~1
    49                              <1> ;Enter the device critical section
    50 00000505 50                  <1>     push rax
    51 00000506 B802800000          <1>     mov eax, 8002h
    52 0000050B CD2A                <1>     int 2ah
    53 0000050D 58                  <1>     pop rax
    54                              <1> ;Now put the retaddr in the var we own 
    55 0000050E 8F0552000000        <1>     pop qword [.tmp]
    56                              <1> ;Now check that we are not formatting. If we are, we need to set the bit on
    57                              <1> ; all DOS drives that use this BIOS drive that it has been formatted and 
    58                              <1> ; changed.
    59 00000514 50                  <1>     push rax    ;Push the function number on stack
    60 00000515 80E47F              <1>     and ah, 7Fh ;Clear the top bit (as both 05h and 85h are formats)
    61 00000518 80FC05              <1>     cmp ah, 05h
    62 0000051B 7405                <1>     je .format
    63 0000051D 80FC07              <1>     cmp ah, 07h ;Undocumented SCSI format?
    64 00000520 750A                <1>     jne .notFormat
    65                              <1> .format:
    66                              <1> ;Here we register the format request!
    67 00000522 B8C0000000          <1>     mov eax, devChgd | devSetDASD   ;Bits to set in flags
    68 00000527 E85D0D0000          <1>     call msdDriver.setBitsForAllDevs
    69                              <1> .notFormat:
    70 0000052C 58                  <1>     pop rax     ;Get the function number from stack
    71                              <1> ;Call previous handler and exit irq in this call.
    72 0000052D 881532000000        <1>     mov byte [.drv], dl ;Save the drive we are acting on
    73 00000533 FF159DFFFFFF        <1>     call qword [i33Next]    
    74 00000539 731A                <1>     jnc .exitI33
    75 0000053B 80FC06              <1>     cmp ah, 06h     ;Did a swap occur?
    76 0000053E 7515                <1>     jne .exitI33    ;All other errors get bubbled up
    77                              <1> ;Here we ensure that on all drives with this BIOS number, we 
    78                              <1> ; register that the swap occured :)
    79 00000540 50                  <1>     push rax
    80 00000541 52                  <1>     push rdx
    81 00000542 0FB6151C000000      <1>     movzx edx, byte [.drv]
    82 00000549 B840000000          <1>     mov eax, devChgd    ;Set the device changed bit on all devices
    83 0000054E E8360D0000          <1>     call msdDriver.setBitsForAllDevs
    84 00000553 5A                  <1>     pop rdx
    85 00000554 58                  <1>     pop rax
    86                              <1> .exitI33:
    87                              <1> ;Replace the retaddr back on the stack
    88 00000555 FF350B000000        <1>     push qword [.tmp]
    89                              <1> ;Exit the device critical section now
    90 0000055B 50                  <1>     push rax
    91 0000055C B802810000          <1>     mov eax, 8102h
    92 00000561 CD2A                <1>     int 2ah
    93 00000563 58                  <1>     pop rax
    94                              <1> ;And finally go back to the caller :)
    95                              <1>     return
    13                              <2> %%_ret:
    14 00000564 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    96                              <1> ;Local data for the main IRQ handler
    97 00000565 00                  <1> .drv    db 0    ;Drive we are acting on
    98 00000566 0000000000000000    <1> .tmp    dq 0
    99                              <1> 
   100                              <1> ;Int 33h replacement routine
   101                              <1> i2fhSwap33h:
   102                              <1> ;Replaces the current int 33h handler and the int 39h replacement handler
   103                              <1> ;Input: ah = 13h
   104                              <1> ;       rdx -> New Int 33h handler.
   105                              <1> ;       rbx -> Value to replace back when system shutdown occurs.
   106                              <1> ;Output:
   107                              <1> ;       rdx -> Replaced Int 33h handler.
   108                              <1> ;       rbx -> Replaced original lowest level Int 33h handler.
   109 0000056E 80FC13              <1>     cmp ah, 13h
   110 00000571 0F85340D0000        <1>     jne msdDriver.i2fDriver ;Goto the driver backdoor if not this handler 
   111 00000577 48871558FFFFFF      <1>     xchg qword [i33Next], rdx
   112 0000057E 48871D41FFFFFF      <1>     xchg qword [i33Org], rbx
   113 00000585 48CF                <1>     iretq
   114                              <1> 
   115                              <1> ; Actual driver here
   116                              <1> msdDriver:
   117 00000587 50                  <1>     push rax
   118 00000588 53                  <1>     push rbx
   119 00000589 51                  <1>     push rcx
   120 0000058A 52                  <1>     push rdx
   121 0000058B 56                  <1>     push rsi
   122 0000058C 57                  <1>     push rdi
   123 0000058D 55                  <1>     push rbp
   124 0000058E 4150                <1>     push r8
   125 00000590 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the ptr to the req header in rbx
   126 00000597 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
   127 0000059B 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
   128 000005A1 7741                <1>     ja .errBadCmd                 ;If yes, error!
   129 000005A3 488D2D4D000000      <1>     lea rbp, .fnTbl
   130 000005AA 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
   131 000005AF 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
   132 000005B2 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
   133 000005B4 7417                <1>     jz .exit
   134 000005B6 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
   135 000005B9 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
   136 000005BD 752C                <1>     jne .errBadPkt
   137 000005BF 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
   138 000005C2 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
   139 000005C6 E89B0A0000          <1>     call .setupDrive    ;Returns rbp -> Table entry
   140                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
   141 000005CB FFD6                <1>     call rsi 
   142                              <1> .exit:
   143 000005CD 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get back the req header ptr
   144 000005D4 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
   145 000005DA 4158                <1>     pop r8
   146 000005DC 5D                  <1>     pop rbp
   147 000005DD 5F                  <1>     pop rdi
   148 000005DE 5E                  <1>     pop rsi
   149 000005DF 5A                  <1>     pop rdx
   150 000005E0 59                  <1>     pop rcx
   151 000005E1 5B                  <1>     pop rbx
   152 000005E2 58                  <1>     pop rax
   153 000005E3 C3                  <1>     ret
   154                              <1> 
   155                              <1> .errBadCmd:
   156 000005E4 B803000000          <1>     mov eax, drvBadCmd
   157 000005E9 EB05                <1>     jmp short .writeEntryError
   158                              <1> .errBadPkt:
   159 000005EB B805000000          <1>     mov eax, drvBadDrvReq
   160                              <1> .writeEntryError:
   161                              <1> ;Used for errors in the driver entry
   162 000005F0 E8F6000000          <1>     call .errorExit
   163 000005F5 EBD6                <1>     jmp short .exit
   164                              <1> 
   165                              <1> 
   166                              <1> .fnTbl:
   167                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
   168                              <1> ; to function, high word is packet size for check
   169                              <1>     ;dw .initShim - .fnTbl        ;Function 0
   170 000005F7 DB2D                <1>     dw msdInit - .fnTbl
   171 000005F9 1F00                <1>     dw initReqPkt_size
   172 000005FB 0C01                <1>     dw .medChk - .fnTbl          ;Function 1
   173 000005FD 1700                <1>     dw mediaCheckReqPkt_size
   174 000005FF 9301                <1>     dw .buildBPB - .fnTbl        ;Function 2
   175 00000601 1E00                <1>     dw bpbBuildReqPkt_size
   176 00000603 0000                <1>     dw 0                         ;Function 3
   177 00000605 0000                <1>     dw 0
   178 00000607 1C04                <1>     dw .read - .fnTbl            ;Function 4
   179 00000609 2A00                <1>     dw ioReqPkt_size
   180 0000060B 0000                <1>     dw 0                         ;Function 5
   181 0000060D 0000                <1>     dw 0
   182 0000060F 0000                <1>     dw 0                         ;Function 6
   183 00000611 0000                <1>     dw 0
   184 00000613 0000                <1>     dw 0                         ;Function 7
   185 00000615 0000                <1>     dw 0
   186 00000617 4C04                <1>     dw .write - .fnTbl           ;Function 8
   187 00000619 2A00                <1>     dw ioReqPkt_size
   188 0000061B 4C04                <1>     dw .write - .fnTbl           ;Function 9
   189 0000061D 2A00                <1>     dw ioReqPkt_size
   190 0000061F 0000                <1>     dw 0                         ;Function 10
   191 00000621 0000                <1>     dw 0
   192 00000623 0000                <1>     dw 0                         ;Function 11
   193 00000625 0000                <1>     dw 0
   194 00000627 0000                <1>     dw 0                         ;Function 12
   195 00000629 0000                <1>     dw 0
   196 0000062B 6205                <1>     dw .devOpen - .fnTbl         ;Function 13
   197 0000062D 0D00                <1>     dw openReqPkt_size
   198 0000062F 7005                <1>     dw .devClose - .fnTbl        ;Function 14
   199 00000631 0D00                <1>     dw closeReqPkt_size
   200 00000633 7E05                <1>     dw .remMed - .fnTbl          ;Function 15
   201 00000635 0D00                <1>     dw remMediaReqPkt_size
   202 00000637 0000                <1>     dw 0                         ;Function 16
   203 00000639 0000                <1>     dw 0
   204 0000063B 0000                <1>     dw 0                         ;Function 17
   205 0000063D 0000                <1>     dw 0
   206 0000063F 0000                <1>     dw 0                         ;Function 18
   207 00000641 0000                <1>     dw 0
   208 00000643 8D05                <1>     dw .IOCTL - .fnTbl           ;Function 19
   209 00000645 2700                <1>     dw ioctlReqPkt_size
   210 00000647 0000                <1>     dw 0                         ;Function 20
   211 00000649 0000                <1>     dw 0
   212 0000064B 0000                <1>     dw 0                         ;Function 21
   213 0000064D 0000                <1>     dw 0
   214 0000064F 0000                <1>     dw 0                         ;Function 22
   215 00000651 0000                <1>     dw 0
   216 00000653 330A                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   217 00000655 0D00                <1>     dw getDevReqPkt_size
   218 00000657 690A                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   219 00000659 0D00                <1>     dw setDevReqPkt_size
   220                              <1> 
   221                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   222                              <1> .errorXlat:
   223                              <1> ;Jumped to with ah = BIOS error code as reported on function call
   224 0000065B 488D3D97000000      <1>     lea rdi, .biosErrTbl
   225 00000662 88E0                <1>     mov al, ah
   226 00000664 B905000000          <1>     mov ecx, errTblLen
   227 00000669 F2AE                <1>     repne scasb
   228 0000066B 7505                <1>     jne .exNotFnd
   229 0000066D 8A4704              <1>     mov al, byte [rdi + errTblLen - 1] ;Get entry in DOS table now
   230 00000670 EB79                <1>     jmp short .errorExit
   231                              <1> .exNotFnd:
   232                              <1> ;Come here if the BIOS supplied code was not mapped to anything.
   233                              <1> ; We now get the SCSI code. Only a few cases make sense so
   234                              <1> ; we try and decypher. Else, general fault.
   235 00000672 B800010000          <1>     mov eax, 0100h
   236 00000677 E8FE0B0000          <1>     call .callI33h
   237                              <1> ;Device Not Ready
   238 0000067C B802000000          <1>     mov eax, drvNotReady  ;Device not ready code
   239 00000681 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   240 00000684 7465                <1>     je .errorExit
   241 00000686 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   242 0000068A 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   243                              <1> ;Write Protected
   244 0000068E B800000000          <1>     mov eax, drvWPErr
   245 00000693 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   246 00000698 7451                <1>     je .errorExit
   247                              <1> ;CRC Error
   248 0000069A B804000000          <1>     mov eax, drvCRCErr     ;CRC error code
   249 0000069F 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   250 000006A4 7445                <1>     je .errorExit
   251 000006A6 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   252 000006AB 743E                <1>     je .errorExit
   253 000006AD 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   254 000006B2 7437                <1>     je .errorExit
   255                              <1> ;Seek Error
   256 000006B4 B806000000          <1>     mov eax, drvBadSeek 
   257 000006B9 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   258 000006BC 742D                <1>     je .errorExit
   259                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   260                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   261 000006BE B807000000          <1>     mov eax, drvBadMed
   262 000006C3 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   263 000006C6 7423                <1>     je .errorExit
   264                              <1> ;Sector Not Found
   265 000006C8 B808000000          <1>     mov eax, drvSecNotFnd     ;Sector not found code
   266 000006CD 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   267 000006D0 7419                <1>     je .errorExit
   268                              <1> ;Write faults
   269 000006D2 B80A000000          <1>     mov eax, drvWriteFault     ;Write fault
   270 000006D7 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   271 000006DA 740F                <1>     je .errorExit
   272                              <1> ;Read faults
   273 000006DC B80B000000          <1>     mov eax, drvReadFault     ;Read fault
   274 000006E1 80F911              <1>     cmp cl, 11h     ;Read error
   275 000006E4 7405                <1>     je .errorExit
   276                              <1> ;General Errors
   277                              <1> .genErrExit:
   278 000006E6 B80C000000          <1>     mov eax, drvGenFault     ;Everything else is general error
   279                              <1> .errorExit:     ;Jump to with al=Standard Error code
   280 000006EB B480                <1>     mov ah, 80h ;Set error bit
   281 000006ED 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   282 000006F4 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   283                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 000006F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> ;The xlat table is used for simple error codes.
   285                              <1> ;The more complex stuff requires a further callout to int 33h for the SCSI
   286                              <1> ; error code.
   287                              <1> .biosErrTbl:
   288 000006F9 04                  <1>     db 04h  ;Sector not found
   289 000006FA 06                  <1>     db 06h  ;Media changed or removed
   290 000006FB 10                  <1>     db 10h  ;ECC/CRC error
   291 000006FC 40                  <1>     db 40h  ;Seek error
   292 000006FD 80                  <1>     db 80h  ;Timeout error
   293                              <1> errTblLen equ $ - .biosErrTbl
   294                              <1> .dosErrTbl:
   295 000006FE 08                  <1>     db drvSecNotFnd
   296 000006FF 0F                  <1>     db drvBadDskChnge
   297 00000700 04                  <1>     db drvCRCErr
   298 00000701 06                  <1>     db drvBadSeek
   299 00000702 02                  <1>     db drvNotReady
   300                              <1> 
   301                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   302                              <1> .medChk:          ;Function 1
   303                              <1> ;Did this drive have its parameters swapped since the last time?
   304 00000703 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devNewParms
   305 00000709 7416                <1>     jz .mcNoFormat
   306                              <1> ;Reset and apply the different logic now :)
   307 0000070B 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devNewParms   ;Clear this bit
   308 00000711 C6058B0C0000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   309 00000718 E81C0A0000          <1>     call .checkDevFixed ;If fixed, declare changed!
   310 0000071D 7557                <1>     jnz .mmcChange
   311                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   312 0000071F EB07                <1>     jmp short .mcRem
   313                              <1> .mcNoFormat:
   314 00000721 E8130A0000          <1>     call .checkDevFixed
   315 00000726 7544                <1>     jnz .mmcNoChange
   316                              <1> .mcRem:
   317 00000728 E8210A0000          <1>     call .checkDevType
   318 0000072D 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
   319 00000733 741F                <1>     jz .mmcNoChangeLine
   320 00000735 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   321                              <1> ;Now we do a BIOS changeline check. We rely on it for drives with changeline.
   322                              <1> ;Start by setting the lastDsk to unknown since this only makes sense for
   323                              <1> ; disks without changeline support
   324 00000738 C605640C0000FF      <1>     mov byte [.bLastDsk], -1
   325 0000073F E8FC090000          <1>     call .checkMediaChange
   326 00000744 7530                <1>     jnz .mmcChange
   327 00000746 B800160000          <1>     mov eax, 1600h 
   328 0000074B E82A0B0000          <1>     call .callI33h
   329                              <1> ;Use IBM BIOS style reporting of changeline!
   330 00000750 7224                <1>     jc .mmcChange   ;If an error occurs/dev swapped, report changed!
   331 00000752 EB18                <1>     jmp short .mmcNoChange
   332                              <1> .mmcNoChangeLine:
   333                              <1> ; If last accessed medchecked disk was this one and the time on this 
   334                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   335 00000754 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   336 00000757 8605460C0000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   337 0000075D 3805400C0000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   338 00000763 750C                <1>     jne .mmcUnsure
   339                              <1> ;Else, now we do the famous time check. 
   340 00000765 E8DF0A0000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   341 0000076A 7205                <1>     jc .mmcUnsure
   342                              <1> .mmcNoChange:
   343 0000076C C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   344                              <1>     return
    13                              <2> %%_ret:
    14 00000770 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   345                              <1> .mmcUnsure:
   346 00000771 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   347                              <1>     return
    13                              <2> %%_ret:
    14 00000775 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   348                              <1> .mmcChange:
   349                              <1> ;Always store the volume label if we have a volume change.
   350 00000776 C605260C0000FF      <1>     mov byte [.bLastDsk], -1    ;Default to unknown disk if a change occured!
   351 0000077D 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   352 00000781 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   353 00000785 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   354                              <1>     return
    13                              <2> %%_ret:
    14 00000789 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> 
   356                              <1> .buildBPB:        ;Function 2
   357                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   358                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   359                              <1> ; the table entry bpb which we will be returning.
   360 0000078A E8AA090000          <1>     call .checkDevFixed
   361 0000078F 7517                <1>     jnz .bbpbExit
   362                              <1> ;------------------------------------------------------
   363                              <1> ; Here for removable devices only!!
   364                              <1> ;------------------------------------------------------
   365 00000791 E839000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   366 00000796 E88A000000          <1>     call .updateBpb ;Fill the BPB entries in the drvBlk
   367 0000079B 0F82E4020000        <1>     jc .ioDoErr     ;Errors returned as if from block IO handler
   368 000007A1 E895010000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   369 000007A6 7300                <1>     jnc .bbpbExit
   370                              <1> ;Here we will search the root directory for the volume label only!
   371                              <1> ;The FS string has been setup and volume ID is set to 0.
   372                              <1> ;
   373                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   374                              <1> ;
   375                              <1> .bbpbExit:
   376 000007A8 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the driver ptr
   377 000007AF 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   378 000007B3 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   379 000007B6 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   380 000007BD 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   381                              <1>     return
    13                              <2> %%_ret:
    14 000007C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> .bbpbError:
   383 000007C2 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   384 000007C4 0F8421FFFFFF        <1>     je .errorExit   
   385 000007CA E98CFEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   386                              <1> 
   387                              <1> .resetIds:
   388                              <1> ;We reset the volume id string and label to the default for the 
   389                              <1> ; volume before the reset!
   390 000007CF 50                  <1>     push rax
   391 000007D0 53                  <1>     push rbx
   392 000007D1 51                  <1>     push rcx
   393 000007D2 56                  <1>     push rsi
   394 000007D3 57                  <1>     push rdi
   395                              <1> 
   396                              <1> ;1) Clear volume Id
   397 000007D4 C78580000000000000- <1>     mov dword [rbp + drvBlk.volId], 0
   397 000007DD 00                  <1>
   398                              <1> ;2) Reset the volume label to default
   399 000007DE 488D35B40B0000      <1>     lea rsi, .defLbl
   400 000007E5 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   401 000007E9 B90C000000          <1>     mov ecx, 12
   402 000007EE F3A4                <1>     rep movsb
   403                              <1> ;3) Reset the FAT string
   404                              <1> ;Since fat32 indicator is in the middle, compare against it.
   405                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   406 000007F0 488D35990B0000      <1>     lea rsi, .fat32Str
   407 000007F7 488D05800B0000      <1>     lea rax, .fat12Str
   408 000007FE 488D1D820B0000      <1>     lea rbx, .fat16Str
   409 00000805 F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   410 00000809 480F47F3            <1>     cmova rsi, rbx
   411 0000080D 480F42F0            <1>     cmovb rsi, rax
   412 00000811 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   413 00000818 B909000000          <1>     mov ecx, 9
   414 0000081D F3A4                <1>     rep movsb
   415                              <1> 
   416 0000081F 5F                  <1>     pop rdi
   417 00000820 5E                  <1>     pop rsi
   418 00000821 59                  <1>     pop rcx
   419 00000822 5B                  <1>     pop rbx
   420 00000823 58                  <1>     pop rax
   421                              <1>     return
    13                              <2> %%_ret:
    14 00000824 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> 
   423                              <1> .updateBpb:
   424                              <1> ;------------------------------------------------------
   425                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   426                              <1> ; or failing, for the BPB indicated by the media byte.
   427                              <1> ;Never called on Fixed devs in normal operation.
   428                              <1> ;------------------------------------------------------
   429                              <1> ;Entered with: 
   430                              <1> ;   rbp -> drvBlk for this drive
   431                              <1> ;------------------------------------------------------
   432                              <1> ;Exited with:
   433                              <1> ;   If CF=NC:
   434                              <1> ;       rbx -> The start of the BPB
   435                              <1> ;       rsi -> End of the BPB. Points to the extSig
   436                              <1> ;               if present.
   437                              <1> ;   Else:
   438                              <1> ;       If ZF=NZ: 
   439                              <1> ;           eax = DOS error code (Invalid BPB detected)
   440                              <1> ;       Else:
   441                              <1> ;           eax = BIOS error code
   442                              <1> ;------------------------------------------------------
   443 00000825 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBpb
   444                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000082B 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000082D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   445 0000082E E8B0010000          <1>     call .bbpbReadBS    ;Sets up rbx to point to internal disk buffer
   446                              <1>     retc    ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000833 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000835 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   447                              <1> ;Check we if we have a valid bootsector.
   448 00000836 803B69              <1>     cmp byte [rbx + oemHeader.jump], 069h       ;Direct jump has no NOP
   449 00000839 7410                <1>     je .ubpbCheckMedOk
   450 0000083B 803BE9              <1>     cmp byte [rbx + oemHeader.jump], 0E9h       ;Near jump has no NOP
   451 0000083E 740B                <1>     je .ubpbCheckMedOk
   452 00000840 803BEB              <1>     cmp byte [rbx + oemHeader.jump], 0EBh       ;Short jump has a NOP
   453 00000843 7555                <1>     jne .ubpbOldDisk
   454 00000845 807B0290            <1>     cmp byte [rbx + oemHeader.jump + 2], 090h   ;NOP should be here
   455 00000849 754F                <1>     jne .ubpbOldDisk
   456                              <1> .ubpbCheckMedOk:
   457 0000084B 8A4315              <1>     mov al, byte [rbx + oemHeader_size + bpb.media] ;Get medbyte from BPB
   458 0000084E E83A000000          <1>     call .checkMedByt   ;Check if it is 0F0h or geq 0F8h
   459 00000853 7545                <1>     jnz .ubpbOldDisk    ;If it is not, don't trust the BPB. Read the FAT sector
   460                              <1> ;Now we do the pre DOS 3.2 single sided check and kludge.
   461 00000855 A801                <1>     test al, 1  ;Double sided bit set on media byte?
   462 00000857 0F85B2000000        <1>     jnz .ubpbNormalDisk ;If set, proceed as normal.
   463                              <1> ;Here if we have a "single-sided" formatted media.
   464                              <1> ;Check the OEM string. We filter out SCPDOS disks first.
   465 0000085D 817B0353435044      <1>     cmp dword [rbx + oemHeader.oemString], "SCPD"
   466 00000864 750C                <1>     jne .ubpbNotSCP
   467 00000866 66817B074F53        <1>     cmp word [rbx + oemHeader.oemString + 4], "OS"
   468 0000086C 0F849D000000        <1>     je .ubpbNormalDisk
   469                              <1> .ubpbNotSCP:
   470                              <1> ;Now blind check version numbers for 16-bit DOS OEM strings.
   471                              <1> ;Search for DOS 2.0, 3.1 and 3.2. These versions have ID's such that 
   472                              <1> ; the version number starts at position 5.
   473                              <1> ;Usually, these BPBs have MSDOS or IBM<SPC><SPC> or OEM<SPC><SPC>
   474                              <1> ; as the OEM string. OEM stands for any three characters used by an
   475                              <1> ; OEM to identify disks they formatted, follows by "x.y" for a major
   476                              <1> ; and minor version number.
   477                              <1> ;Since we cannot enumerate all the OEM strings and can't guarantee
   478                              <1> ; that they have the bug, we will simply check the version number @
   479                              <1> ; position 5 in the string which seems to have been an unofficial 
   480                              <1> ; standard for placing the version number in the OEM string at the 
   481                              <1> ; time. 
   482                              <1> ;The dot in the check helps "guarantee" the number is a version number 
   483                              <1> ; we are possibly interested in.
   484 00000872 66817B08332E        <1>     cmp word [rbx + oemHeader.oemString + 5], "3."  ;DOS 3?
   485 00000878 720A                <1>     jb .ubpbAdjustSPC  ;If below, must be "2." or "1." which has bug. Adjust.
   486 0000087A 807B0A32            <1>     cmp byte [rbx + oemHeader.oemString + 7], "2"   ;DOS 3.2?
   487 0000087E 0F838B000000        <1>     jae .ubpbNormalDisk ;If above or equal 3.2, no need for adjustment.
   488                              <1> .ubpbAdjustSPC:
   489                              <1> ;Here we must be pre 16-bit DOS 3.2. Adjust the BPB in memory to have 
   490                              <1> ; a spc value of 1.
   491 00000884 C6430D01            <1>     mov byte [rbx + oemHeader_size + bpb.secPerClus], 1
   492 00000888 E982000000          <1>     jmp .ubpbNormalDisk ;Now proceed as a normal disk
   493                              <1> .checkMedByt:
   494                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   495                              <1> ; recognise as this is a sign of an unhealthy volume.
   496                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   497                              <1> ;Input: al = Media byte. 
   498                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   499 0000088D 3CF0                <1>     cmp al, 0F0h
   500                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000088F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000891 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   501 00000892 3CF8                <1>     cmp al, 0F8h
   502                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000894 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000896 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   503 00000897 38C0                <1>     cmp al, al  ;Set ZF if greater than F8h
   504                              <1>     return
    13                              <2> %%_ret:
    14 00000899 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> .ubpbOldDisk:
   506                              <1> ;We accept media bytes 0F9h-0FFh now. 0F8h and 0F0h make no sense here.
   507 0000089A E83E010000          <1>     call .bbpbReadFAT   ;Read the FAT sector now instead
   508                              <1>     retc    ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000089F 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008A1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   509 000008A2 0FB703              <1>     movzx eax, word [rbx]   ;Clear upper bytes
   510 000008A5 25FF0F0000          <1>     and eax, 0FFFh
   511 000008AA 3DF90F0000          <1>     cmp eax, 0FF9h    ;Cannot accept less than 0F9h as we dont know how to handle
   512 000008AF 7224                <1>     jb .ubpbErr
   513 000008B1 7547                <1>     jne .ubpbOldest ;If not equal to 0F9h, it must be a "normal" disk.
   514                              <1> ;The only way to check which 0F9h we have, is to read the FAT and try to 
   515                              <1> ; find the second FAT, as they are at different "known" sectors. 
   516                              <1> ;First we read sector 4. If we find the 12 bytes 0FFF9h then use the first entry
   517                              <1> ; in the 0F9h table. 
   518                              <1> ;Else, read sector 8. If we find the 12 bytes 0FFF9h there, then use the 
   519                              <1> ; second entry in the 0F9h table.
   520 000008B3 488D1D801B0000      <1>     lea rbx, .drvBpbTblF9
   521 000008BA E81C000000          <1>     call .upbpFindF9
   522                              <1>     retc                ;If the sector read failed, exit with ZF=ZE!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008BF 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008C1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   523 000008C2 7452                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   524 000008C4 4881C319000000      <1>     add rbx, bpb_size   ;Else, goto next entry
   525 000008CB E80B000000          <1>     call .upbpFindF9    ;And try with this BPB
   526                              <1>     retc                ;If the sector read failed, exit with ZF=ZE!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008D0 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008D2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   527 000008D3 7441                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   528                              <1> ;Else fall through as we don't know what 0F9h means here.
   529                              <1> .ubpbErr:               
   530                              <1> ;Bad media bytes or BPB go here. Means the media is unknown.
   531 000008D5 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code (07h)
   532 000008D7 85C0                <1>     test eax, eax           ;Set ZF=NZ so we indicate a DOS error code!
   533 000008D9 F9                  <1>     stc                     ;And set CF=CY to always return error!
   534                              <1>     return
    13                              <2> %%_ret:
    14 000008DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> .upbpFindF9:
   536                              <1> ;Reads the supposed start of the second FAT sector to search for a FF9h 
   537                              <1> ;Call with rbx -> Table entry for this drive
   538                              <1> ;Returns:   CF=NC and ZF=ZE: Second boot sector found. Use the bpb in rbx.
   539                              <1> ;           CF=NC and ZF=NZ: Second boot sector not found. Goto next entry.
   540                              <1> ;           CF=CY: Disk read failed.
   541 000008DB 0FB74B0B            <1>     movzx ecx, word [rbx + bpb.FATsz16] ;Get number of fat sectors in a FAT
   542 000008DF FFC1                <1>     inc ecx     ;Add one for the reserved sector to get sector !
   543 000008E1 53                  <1>     push rbx
   544 000008E2 E8FE000000          <1>     call .bbpbReadEp
   545 000008E7 0FB703              <1>     movzx eax, word [rbx]   ;Read the first word
   546 000008EA 5B                  <1>     pop rbx
   547                              <1>     retc            ;If an error occured, return ZF=ZE
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008EB 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008ED C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   548 000008EE 25FF0F0000          <1>     and eax, 0FFFh  ;Scan off the upper nybble to get low meaningful 12 bytes
   549 000008F3 3DF90F0000          <1>     cmp eax, 0FF9h  ;Is this FF9h as it should be?
   550 000008F8 F8                  <1>     clc             ;Since eax can be a random word, force clear CF here.
   551                              <1>     return
    13                              <2> %%_ret:
    14 000008F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> .ubpbOldest:
   553                              <1> ;Here we build a pretend BPB in the sector buffer pointed to by rbx.
   554                              <1> ;This will then be used to build the internal data structure. 
   555 000008FA 488D1DA31A0000      <1>     lea rbx, .drvBpbTbl
   556 00000901 2CFA                <1>     sub al, 0FAh    ;Get the offset into the bpb table
   557 00000903 B919000000          <1>     mov ecx, bpb_size
   558 00000908 F7E1                <1>     mul ecx         ;Get byte offset into the bpb table
   559 0000090A 4801C3              <1>     add rbx, rax    ;Point rbx to this bpb in the table
   560 0000090D EB07                <1>     jmp short .ubpbMoveBpb
   561                              <1> .ubpbNormalDisk:
   562 0000090F 4881C30B000000      <1>     add rbx, oemHeader_size ;Now point rbx to the BPB itself
   563                              <1> ;Update the drvBlk with info from the BPB.
   564                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   565                              <1> ; are ok before updating the msdTbl entry. 
   566                              <1> .ubpbMoveBpb:
   567 00000916 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   568 00000919 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   569 0000091D E852000000          <1>     call .getFATType    ;Fat type is given in edx
   570 00000922 72B1                <1>     jc .ubpbErr ;Only happens if crucial BPB fields are zero 
   571 00000924 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   572                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   573                              <1> ; if it is present
   574 00000927 B819000000          <1>     mov eax, bpb_size
   575 0000092C B929000000          <1>     mov ecx, bpb32_size - 12    ;BPB32 minus reserved count
   576 00000931 80FA20              <1>     cmp dl, bpbFat32
   577 00000934 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   578 00000937 F3A4                <1>     rep movsb        ;Now copy the BPB over!
   579 00000939 F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   580                              <1>     return
    13                              <2> %%_ret:
    14 0000093A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   581                              <1> 
   582                              <1> .moveVolIds:
   583                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   584                              <1> ;Input: rsi -> End of the BPB in sector. rbp -> drvBlk
   585                              <1> ;Output: CF=CY: No volume label in sector found.
   586                              <1> ;        CF=NC: Volume Label in sector found and copied.
   587 0000093B 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   588 0000093F 7531                <1>     jne .mviNoSig
   589                              <1> ;Else, now we copy the volume information from the extended bs info block
   590 00000941 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   591 00000944 898580000000        <1>     mov dword [rbp + drvBlk.volId], eax
   592 0000094A 4881C607000000      <1>     add rsi, extBs.volLab
   593 00000951 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   594 00000955 B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   595 0000095A F3A4                <1>     rep movsb   
   596                              <1>     ;rsi now points to the filSysType field in the extBs.
   597                              <1>     ;Move rdi to the filSysType field in the drvBlk.
   598 0000095C 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   599 00000963 B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   600 00000968 F3A4                <1>     rep movsb   
   601                              <1> ;Clear the change bit for this DOS drive as we have here a good BPB
   602 0000096A 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devChgd
   603 00000970 F8                  <1>     clc
   604                              <1>     return
    13                              <2> %%_ret:
    14 00000971 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   605                              <1> .mviNoSig:
   606 00000972 F9                  <1>     stc
   607                              <1>     return
    13                              <2> %%_ret:
    14 00000973 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> .getFATType:
   610                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   611 00000974 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   612 00000977 E362                <1>     jrcxz .bbpbGFTErr
   613 00000979 89C8                <1>     mov eax, ecx
   614 0000097B FFC8                <1>     dec eax
   615 0000097D 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   616 00000981 C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   617 00000984 01D0                <1>     add eax, edx
   618 00000986 31D2                <1>     xor edx, edx
   619 00000988 F7F1                <1>     div ecx     ;eax = Root Dir sectors
   620 0000098A 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   621 0000098B 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   622 0000098F 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   623 00000992 85C0                <1>     test eax, eax
   624 00000994 0F44C2              <1>     cmovz eax, edx
   625 00000997 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   626 0000099B F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   627 0000099D 85C0                <1>     test eax, eax   ;If either BPB_NumFATs or FATSz is 0, fail!
   628 0000099F 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   629 000009A0 7439                <1>     jz .bbpbGFTErr
   630 000009A2 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   631 000009A6 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   632 000009A8 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   633 000009AA 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   634 000009AE 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   635 000009B1 85C0                <1>     test eax, eax
   636 000009B3 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   637 000009B6 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   638 000009B8 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   639 000009BC E31D                <1>     jrcxz .bbpbGFTErr
   640 000009BE 31D2                <1>     xor edx, edx
   641 000009C0 F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   642 000009C2 BA10000000          <1>     mov edx, bpbFat12
   643 000009C7 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   644 000009CC 720B                <1>     jb .bbpbGFTExit
   645 000009CE D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   646 000009D0 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   647 000009D5 7302                <1>     jnb .bbpbGFTExit   ;If above or equal, its in FAT32
   648 000009D7 D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   649                              <1> .bbpbGFTExit:
   650 000009D9 F8                  <1>     clc
   651                              <1>     return
    13                              <2> %%_ret:
    14 000009DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> .bbpbGFTErr:
   653 000009DB F9                  <1>     stc
   654                              <1>     return
    13                              <2> %%_ret:
    14 000009DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   655                              <1> 
   656                              <1> .bbpbReadFAT:
   657                              <1> ;Reads the first FAT sector of media we are playing with.
   658 000009DD 31C9                <1>     xor ecx, ecx
   659 000009DF FFC1                <1>     inc ecx         ;Read Sector 1...
   660 000009E1 EB02                <1>     jmp short .bbpbReadEp
   661                              <1> .bbpbReadBS:
   662                              <1> ;Reads the bootsector of media we are playing with.
   663 000009E3 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   664                              <1> .bbpbReadEp:
   665 000009E5 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]
   666 000009E8 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   667 000009EC 488D1DB1090000      <1>     lea rbx, .inBuffer  ;Use the in sector buffer. Ensure ownership.
   668 000009F3 BE05000000          <1>     mov esi, 5
   669                              <1> .bbpbReadLp:
   670 000009F8 B801820000          <1>     mov eax, 8201h  ;LBA Read function (read 1 sector)
   671 000009FD E878080000          <1>     call .callI33h
   672 00000A02 0F83DE000000        <1>     jnc .bioExit
   673                              <1> ;Here if an error. AH has the BIOS error code. Return with
   674                              <1> ; ZF=ZE to indicate we are returning a BIOS code!
   675 00000A08 E806010000          <1>     call .bioReset  ;Reset the drive. WARNING: CRASHES BOCHS
   676 00000A0D FFCE                <1>     dec esi
   677 00000A0F 75E7                <1>     jnz .bbpbReadLp
   678 00000A11 F9                  <1>     stc
   679                              <1>     return
    13                              <2> %%_ret:
    14 00000A12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> .read:              ;Function 4
   682                              <1> ;Will read one sector at a time.
   683 00000A13 E8F0070000          <1>     call .ioSetVolLbl
   684 00000A18 E831070000          <1>     call .checkDevType
   685 00000A1D E8BF060000          <1>     call .checkSwap 
   686 00000A22 7261                <1>     jc .ioDoErr
   687 00000A24 4889DF              <1>     mov rdi, rbx    ;Move ioreqpktptr to rdi
   688 00000A27 E873000000          <1>     call .bioSetupRegs
   689                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A2C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A2E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   690                              <1> .msdr0:
   691 00000A2F B800820000          <1>     mov eax, 8200h  ;LBA Read function
   692 00000A34 E888000000          <1>     call .blkIO
   693 00000A39 724A                <1>     jc .ioDoErr
   694 00000A3B E850000000          <1>     call .ioAdv
   695 00000A40 75ED                <1>     jne .msdr0
   696                              <1>     return
    13                              <2> %%_ret:
    14 00000A42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> 
   698                              <1> .write:             ;Function 8/9
   699                              <1> ;Will write and optionally verify one sector at a time.
   700 00000A43 E8C0070000          <1>     call .ioSetVolLbl
   701 00000A48 E801070000          <1>     call .checkDevType
   702 00000A4D E88F060000          <1>     call .checkSwap 
   703 00000A52 7231                <1>     jc .ioDoErr
   704 00000A54 4889DF              <1>     mov rdi, rbx    ;Move ioreqpktptr to rdi
   705 00000A57 E843000000          <1>     call .bioSetupRegs
   706                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A5C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A5E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   707                              <1> .msdw0:
   708 00000A5F B800830000          <1>     mov eax, 8300h ;LBA Write Sectors
   709 00000A64 E858000000          <1>     call .blkIO
   710 00000A69 721A                <1>     jc .ioDoErr
   711 00000A6B 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
   712 00000A6F 750C                <1>     jne .msdw1
   713 00000A71 B800840000          <1>     mov eax, 8400h ;LBA Verify Sectors
   714 00000A76 E846000000          <1>     call .blkIO
   715 00000A7B 7208                <1>     jc .ioDoErr
   716                              <1> .msdw1:
   717 00000A7D E80E000000          <1>     call .ioAdv
   718 00000A82 75DB                <1>     jne .msdw0
   719                              <1>     return
    13                              <2> %%_ret:
    14 00000A84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   720                              <1> .ioDoErr:
   721                              <1> ;Come here if after an error in block IO handler.
   722                              <1> ;If ZF=ZE, disk error occured, the error needs translation so do it.
   723                              <1> ;Else just return the error code in al
   724 00000A85 0F84D0FBFFFF        <1>     jz .errorXlat
   725 00000A8B E95BFCFFFF          <1>     jmp .errorExit
   726                              <1> 
   727                              <1> .ioAdv:
   728                              <1> ;Advances the buffers on successful IO. 
   729                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
   730                              <1> ;Input: 
   731                              <1> ;       rbx -> Where we just IO'ed to
   732                              <1> ;       rcx = LBA sector we just xfred
   733                              <1> ;       dl  = BIOS drive number
   734                              <1> ;       rdi -> ioReqPkt
   735                              <1> ;       rbp -> drvBlk
   736                              <1> ;       esi = Number of sectors to xfr
   737                              <1> ;Output:
   738                              <1> ;       rbx -> Where to IO next sector to/from
   739                              <1> ;       rcx = LBA of next sector to xfer
   740                              <1> ;       dl  = BIOS drive number
   741                              <1> ;       rdi -> ioReqPkt
   742                              <1> ;       rbp -> drvBlk
   743                              <1> ;       esi = Sectors left to xfr.
   744                              <1> ;       ZF=ZE if esi is 0. Else ZF=NZ.
   745 00000A90 50                  <1>     push rax
   746 00000A91 48FFC1              <1>     inc rcx     ;Goto next sector
   747 00000A94 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
   748 00000A98 4801C3              <1>     add rbx, rax  ;Advance the buffer pointer by 1 sector
   749 00000A9B FFCE                <1>     dec esi     ;Once this hits 0, we stop the xfr
   750 00000A9D 58                  <1>     pop rax
   751                              <1>     return
    13                              <2> %%_ret:
    14 00000A9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   752                              <1> 
   753                              <1> .bioSetupRegs:
   754                              <1> ;Sets up sector to read and buffer ptr for block IO call.
   755                              <1> ;If returns ZF=ZE then xfr 0 sectors, exit immediately
   756                              <1> ;Input: rdi -> ioReqPkt
   757                              <1> ;       rbp -> drvBlk
   758                              <1> ;Output: rdi -> ioReqPkt
   759                              <1> ;        rbp -> drvBlk
   760                              <1> ;        rbx -> Transfer buffer
   761                              <1> ;        rcx = Sector to transfer
   762                              <1> ;        esi = Number of sectors to transfer
   763                              <1> ;        ZF=ZE if esi is 0. Else ZF=NZ.
   764 00000A9F 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
   765 00000AA2 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   766 00000AA6 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   767 00000AAA 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS drive number
   768 00000AAD 8B7716              <1>     mov esi, dword [rdi + ioReqPkt.tfrlen]  ;Get the tfrlen into esi
   769 00000AB0 85F6                <1>     test esi, esi                           ;If this is 0, avoid IO
   770                              <1>     return
    13                              <2> %%_ret:
    14 00000AB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   771                              <1> 
   772                              <1> .blkIODirect:    ;Does block IO without sanity checking the sector number
   773                              <1> ;All registers as below!
   774 00000AB3 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   775 00000AB9 0F8593000000        <1>     jnz .bioUfmted
   776 00000ABF EB11                <1>     jmp short .biocmn
   777                              <1> .blkIO:  ;Does block IO for one sector
   778                              <1> ;Sector count handled by caller.
   779                              <1> ;All registers marked as input registers must be preserved across the call
   780                              <1> ; except ah
   781                              <1> ;Input: ah = BIOS function number
   782                              <1> ;       rdi -> ioReqPkt             (Normal Read/Write only)
   783                              <1> ;       rbp -> drvBlk
   784                              <1> ;       rbx -> Transfer buffer
   785                              <1> ;       rcx = LBA sector to transfer
   786                              <1> ;       dl  = BIOS drive number
   787                              <1> ;       esi = Sectors left to xfr!  (Normal Read/Write only)
   788                              <1> ;Output: CF=NC: esi number of sectors xferred.
   789                              <1> ;        CF=CY: An error ocured. 
   790                              <1> ;           ZF=NZ: Non-disk error, return the DOS error code in eax
   791                              <1> ;           ZF=ZE: Disk error, xlat BIOS error code in ah
   792 00000AC1 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   793 00000AC7 0F8585000000        <1>     jnz .bioUfmted
   794 00000ACD E858000000          <1>     call .bioSanity ;Sanity check ecx here
   795                              <1> .biocmn:
   796 00000AD2 56                  <1>     push rsi    ;Save sector count
   797 00000AD3 BE05000000          <1>     mov esi, 5  ;Retry counter five times
   798                              <1> .biolp:
   799 00000AD8 B001                <1>     mov al, 01h ;Do one sector 
   800 00000ADA E89B070000          <1>     call .callI33h  ;Preserves all passed regs except eax
   801 00000ADF 7221                <1>     jc .bioError
   802 00000AE1 3C01                <1>     cmp al, 1   ;Did we do one sector?
   803 00000AE3 7515                <1>     jne .bioNoIO    ;No, try again without calling BIOS error handling
   804 00000AE5 5E                  <1>     pop rsi ;Rebalance stack
   805                              <1> .bioExit:
   806                              <1>     ;mov dl, byte [rbp + drvBlk.bDOSNum]
   807 00000AE6 8815B7080000        <1>     mov byte [.bLastDsk], dl    ;Last DOS disk accessed
   808 00000AEC E848060000          <1>     call .checkDevFixed
   809                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AF1 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AF3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   810                              <1> ;Below routine saves the registers it trashes
   811 00000AF4 E83A070000          <1>     call .setTime   ;Set the current time and clear state for successful IO
   812                              <1>     return
    13                              <2> %%_ret:
    14 00000AF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   813                              <1> .bioNoIO:
   814 00000AFA FFCE                <1>     dec esi ;Decrement the retry counter
   815 00000AFC 75DA                <1>     jnz .biolp  ;and try again if we still have retries to do
   816 00000AFE 5E                  <1>     pop rsi ;Now rebalance the stack
   817                              <1> ;Here we return as if our request was successful but we set esi to zero
   818                              <1> ; to stop IO processing as the operation isn't reading/writing the sector
   819                              <1> ; for no erroring reason (should never actually happen as the sanity check 
   820                              <1> ; should handle this case but _just in case_ ).
   821 00000AFF 31F6                <1>     xor esi, esi
   822                              <1>     return
    13                              <2> %%_ret:
    14 00000B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   823                              <1> .bioError:
   824                              <1> ;Jumped to with ah = BIOS error code
   825 00000B02 E888050000          <1>     call .checkSwapIO
   826 00000B07 E807000000          <1>     call .bioReset  ;Reset the drive. WARNING: CRASHES BOCHS. Does E9h check
   827 00000B0C FFCE                <1>     dec esi
   828 00000B0E 75C8                <1>     jnz .biolp
   829 00000B10 5E                  <1>     pop rsi ;Pop the sector count off the stack
   830                              <1>     ;ZF=ZE set now as esi counted down
   831 00000B11 F9                  <1>     stc
   832                              <1>     return
    13                              <2> %%_ret:
    14 00000B12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> .bioReset:
   834                              <1> ;Resets the drive system for the drive in dl
   835 00000B13 50                  <1>     push rax
   836 00000B14 E4E9                <1>     in al, 0E9h
   837 00000B16 3CE9                <1>     cmp al, 0E9h
   838 00000B18 740E                <1>     je .bioResetSkip
   839 00000B1A 31C0                <1>     xor eax, eax    ;Do reset
   840 00000B1C E859070000          <1>     call .callI33h  ;Ignore any errors
   841 00000B21 C6057B080000FF      <1>     mov byte [.bLastDsk], -1    ;Reset the last disk accessed
   842                              <1> .bioResetSkip:
   843 00000B28 58                  <1>     pop rax
   844                              <1>     return
    13                              <2> %%_ret:
    14 00000B29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   845                              <1> .bioSanity:
   846                              <1> ;Input: ecx = Sector we will transact on. rbp -> DrvBlk
   847                              <1> ;Output: CF=NC, sector ok to xact on
   848                              <1> ;        CF=CY, doesnt return, fails the call. ZF=ZE always (have DOS code)
   849                              <1> ;        If the sector fails check, we return from the top level with ZF=ZE
   850                              <1> ;           to indicate a DOS error code in eax.
   851 00000B2A A9FF000000          <1>     test eax, 0FFh  ;If the bottom byte is set, it is a IOCTL call.
   852                              <1>     retnz           ;BIOS checks these for us as IOCTL bypasses partitions.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B2F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B31 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   853 00000B32 50                  <1>     push rax
   854 00000B33 53                  <1>     push rbx
   855 00000B34 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   856 00000B38 8B5D1F              <1>     mov ebx, dword [rbp + drvBlk.dTotSec32] 
   857 00000B3B 85C0                <1>     test eax, eax
   858 00000B3D 0F44C3              <1>     cmovz eax, ebx  ;The 32 bit count is valid only if 16 bit count is 0
   859 00000B40 39C1                <1>     cmp ecx, eax    ;This will set CF iff ecx < eax. If eax >= ecx CF=NC.
   860 00000B42 5B                  <1>     pop rbx
   861 00000B43 58                  <1>     pop rax
   862 00000B44 F5                  <1>     cmc             ;Flip CF from CY to NC if ok and NC to CY if not
   863                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B45 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B47 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   864                              <1> ;Now pops the return from the sanity call and falls.
   865 00000B48 58                  <1>     pop rax ;Return from block IO with error code in eax below
   866 00000B49 B808000000          <1>     mov eax, drvSecNotFnd
   867                              <1> .bioNoDiskErr:
   868 00000B4E 85C0                <1>     test eax, eax   ;Clear ZF
   869 00000B50 F9                  <1>     stc
   870                              <1>     return
    13                              <2> %%_ret:
    14 00000B51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   871                              <1> .bioUfmted:
   872                              <1> ;Returns the DOS error code bad media to caller. 
   873                              <1> ;Returns CF=CY and ZF=ZE (with eax = DOS error code)
   874 00000B52 B807000000          <1>     mov eax, drvBadMed
   875 00000B57 EBF5                <1>     jmp short .bioNoDiskErr
   876                              <1> 
   877                              <1> .devOpen:         ;Function 13
   878 00000B59 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
   879                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B5F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B61 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   880 00000B62 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
   881                              <1>     return
    13                              <2> %%_ret:
    14 00000B66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   882                              <1> .devClose:        ;Function 14
   883 00000B67 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
   884                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B6D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B6F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   885 00000B70 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
   886                              <1>     return
    13                              <2> %%_ret:
    14 00000B74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   887                              <1> .remMed:  ;Function 15
   888                              <1> ;Sets busy bit if fixed drive!
   889 00000B75 E8BF050000          <1>     call .checkDevFixed ;Is it fixed?
   890                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B7A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B7C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   891 00000B7D 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
   892                              <1>     return
    13                              <2> %%_ret:
    14 00000B83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> 
   894                              <1> .IOCTL:    ;Function 19
   895                              <1> ;Implements LBA versions of the CHS functions by setting the high bit
   896                              <1> ; in the minor code.
   897 00000B84 B803000000          <1>     mov eax, drvBadCmd
   898 00000B89 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]  ;Get CH and CL in one read
   899 00000B8D 80FD08              <1>     cmp ch, 08h     ;Disk Drive Major Code?
   900 00000B90 0F8555FBFFFF        <1>     jne .errorExit  ;If not, exit bad
   901                              <1> ;Disk Drive IOCTL here
   902 00000B96 F6C118              <1>     test cl, 18h    ;If either bits 3 or 4 set, fail the call
   903 00000B99 0F854CFBFFFF        <1>     jnz .errorExit
   904 00000B9F F6C160              <1>     test cl, 60h    ;One of these two bits MUST be set (bits 5 and 6)
   905 00000BA2 0F8443FBFFFF        <1>     jz .errorExit
   906 00000BA8 0FB6D1              <1>     movzx edx, cl
   907 00000BAB 81E207FFFFFF        <1>     and edx, ~0F8h   ;Clear bits 3-7 to get table offset
   908 00000BB1 488D3D21000000      <1>     lea rdi, .ioctlTbl
   909 00000BB8 57                  <1>     push rdi
   910 00000BB9 488D3C97            <1>     lea rdi, qword [rdi + 4*rdx]
   911 00000BBD F6C120              <1>     test cl, 20h
   912 00000BC0 7407                <1>     jz .ioctlNoRead
   913 00000BC2 4881C702000000      <1>     add rdi, 2  ;If we are doing the read function, goto the next instruction
   914                              <1> .ioctlNoRead:
   915 00000BC9 0FB717              <1>     movzx edx, word [rdi]   ;Read the word offset
   916 00000BCC 5F                  <1>     pop rdi
   917 00000BCD 4801D7              <1>     add rdi, rdx    ;Add the table base
   918 00000BD0 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]
   919 00000BD4 F6C180              <1>     test cl, 80h    ;Now set the flag for if CHS (ZF=ZE) or LBA (ZF=NZ)
   920 00000BD7 FFE7                <1>     jmp rdi ;And enter the function with the ptr to the ctrl block in rdx
   921                              <1> .ioctlTbl:
   922                              <1> ;Note: For the CHS IO functions, we translate the CHS requests into LBA
   923                              <1> ; requests and then recycle the LBA request code. We do this using the 
   924                              <1> ; track table. If the sector size of any table entry is neq the 
   925                              <1> ; device sector size, we fail the request. This is because these requests
   926                              <1> ; work on a track by track basis.
   927 00000BD9 3E00                <1>     dw .ioSetDevParams - .ioctlTbl  ;CL = 40h or CL = C0h, Write IOCTL
   928 00000BDB 4301                <1>     dw .ioGetDevParams - .ioctlTbl  ;CL = 60h or CL = E0h, Read IOCTL
   929 00000BDD 3102                <1>     dw .ioWrite - .ioctlTbl         ;CL = 41h or CL = C1h, Write IOCTL
   930 00000BDF 5B02                <1>     dw .ioRead - .ioctlTbl          ;CL = 61h or CL = E1h, Read IOCTL
   931 00000BE1 6802                <1>     dw .ioFormat - .ioctlTbl        ;CL = 42h or CL = C2h, Write IOCTL
   932 00000BE3 9002                <1>     dw .ioVerify - .ioctlTbl        ;CL = 62h or CL = E2h, Read IOCTL
   933 00000BE5 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 43h or CL = C3h, error
   934 00000BE7 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 63h or CL = E3h, error
   935 00000BE9 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 44h or CL = C4h, error
   936 00000BEB 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 64h or CL = E4h, error
   937 00000BED 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 45h or CL = C5h, error
   938 00000BEF 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 65h or CL = E5h, error
   939 00000BF1 2903                <1>     dw .ioSetIds - .ioctlTbl        ;CL = 46h or CL = C6h, Set vol Ids
   940 00000BF3 2903                <1>     dw .ioGetIds - .ioctlTbl        ;CL = 66h or CL = E6h, Get vol Ids
   941 00000BF5 2E03                <1>     dw .ioSetAccessFlag - .ioctlTbl ;CL = 47h or CL = C7h, Write IOCTL
   942 00000BF7 4203                <1>     dw .ioGetAccessFlag - .ioctlTbl ;CL = 67h or CL = E7h, Read IOCTL
   943                              <1> .iobadCmd:
   944 00000BF9 B803000000          <1>     mov eax, drvBadCmd
   945 00000BFE E9E8FAFFFF          <1>     jmp .errorExit
   946                              <1> .iobadCmdLen:
   947 00000C03 B805000000          <1>     mov eax, drvBadDrvReq
   948 00000C08 E9DEFAFFFF          <1>     jmp .errorExit
   949                              <1> .iobadMed:
   950 00000C0D B807000000          <1>     mov eax, drvBadMed
   951 00000C12 E9D4FAFFFF          <1>     jmp .errorExit
   952                              <1> ;---------------------------------------------------------------------------
   953                              <1> ;               Set Device parameters in CHS and LBA here
   954                              <1> ;---------------------------------------------------------------------------
   955                              <1> .ioSetDevParams:
   956 00000C17 9C                  <1>     pushfq
   957                              <1> ;If the parameters are swapped, set the flags and indicate the media 
   958                              <1> ; was swapped (even if not).
   959 00000C18 66814D374001        <1>     or word [rbp + drvBlk.wDevFlgs], devNewParms | devChgd
   960 00000C1E 9D                  <1>     popfq
   961 00000C1F 0F85C8000000        <1>     jnz .lbaSetParams
   962                              <1> ;Here we set CHS params. 
   963                              <1> ;Before we trust the table, we check that indeed
   964                              <1> ; no sector index is past the max sector count and that if the caller
   965                              <1> ; claimed that all the sectors are of the same size, they really are.    
   966 00000C25 488D723C            <1>     lea rsi, qword [rdx + chsParamsBlock.TrackLayout]
   967 00000C29 4889F7              <1>     mov rdi, rsi    ;Save the pointer in rdi
   968 00000C2C 66AD                <1>     lodsw           ;Get the lead word and adv rsi by 2
   969 00000C2E 0FB7C8              <1>     movzx ecx, ax   ;Get the lead table entry into ax
   970 00000C31 81F93F000000        <1>     cmp ecx, maxTrackTblSz
   971 00000C37 7460                <1>     jz .iosdpNoTrack   ;Don't touch the tracks bit in this case!
   972 00000C39 0F87A7FAFFFF        <1>     ja .genErrExit
   973 00000C3F 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Check the first entry is ok!
   974 00000C44 0F879CFAFFFF        <1>     ja .genErrExit
   975                              <1> .iosdpTblCheckLp:
   976 00000C4A AD                  <1>     lodsd   ;Go to next entry
   977 00000C4B FFC9                <1>     dec ecx ;And remove from the count
   978 00000C4D 7420                <1>     jz .iosdpTblCheckEnd
   979 00000C4F 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Ensure no entry above the max entry value
   980 00000C54 0F878CFAFFFF        <1>     ja .genErrExit
   981 00000C5A F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec ;All same size?
   982 00000C5D 74EB                <1>     jz .iosdpTblCheckLp ;If not, skip this check (always check 1=<i<=n)
   983 00000C5F 668B4602            <1>     mov ax, word [rsi + 2]  ;Else get sector size
   984 00000C63 663946FE            <1>     cmp word [rsi - 2], ax  ;And compare with the previous sector size
   985 00000C67 0F8579FAFFFF        <1>     jne .genErrExit
   986 00000C6D EBDB                <1>     jmp short .iosdpTblCheckLp
   987                              <1> .iosdpTblCheckEnd:
   988                              <1> ;Now we set the sector size bit if all tracks same size check was passed.
   989                              <1> ;If all sectors have the same size but the caller didn't specify this
   990                              <1> ; bit, we also don't specify this bit.
   991 00000C6F 66816537F7FF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSameSec    ;Clear bit first
   992 00000C75 F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec
   993 00000C78 7406                <1>     jz .iosdpNoSetTrackBit
   994                              <1> ;The only way we got here if the bit was set is that the check passed.
   995                              <1> ; Set the bit in the device block.
   996 00000C7A 66814D370800        <1>     or word [rbp + drvBlk.wDevFlgs], devSameSec
   997                              <1> .iosdpNoSetTrackBit:
   998                              <1> ;Now we copy the table directly as sector numbers may be purposefully
   999                              <1> ; interleaved. NO SORTING!!
  1000 00000C80 4889FE              <1>     mov rsi, rdi    ;Get back the track layout pointer 
  1001 00000C83 488D3DA2020000      <1>     lea rdi, .ioTrackTbl    ;We overwrite our internal track table
  1002 00000C8A 66AD                <1>     lodsw   ;Get the table length
  1003 00000C8C 0FB7C8              <1>     movzx ecx, ax   ;This many entries
  1004 00000C8F 66AB                <1>     stosw
  1005 00000C91 F3A5                <1>     rep movsd       ;Move the dword entries over
  1006 00000C93 F60202              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncTrk    ;Just tracks?
  1007                              <1>     retnz   ;Return if bit set!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C96 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C98 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1008                              <1> .iosdpNoTrack:
  1009                              <1> ;Now we update the rest of the disk metadata.
  1010                              <1> ;Now copy the rest of the bytes and return
  1011 00000C99 0FB74202            <1>     movzx eax, word [rdx + chsParamsBlock.wDevFlgs]
  1012 00000C9D 2503000000          <1>     and eax, devFixed | devChgLine  ;Keep only these two bits
  1013 00000CA2 66816537FCFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~(devFixed | devChgLine)   ;Clear em
  1014 00000CA8 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax  ;Add those two bits as set
  1015 00000CAC 0FB64201            <1>     movzx eax, byte [rdx + chsParamsBlock.bDevType]
  1016 00000CB0 884536              <1>     mov byte [rbp + drvBlk.bDevType], al
  1017 00000CB3 66814D378000        <1>     or word [rbp + drvBlk.wDevFlgs], devSetDASD 
  1018 00000CB9 0FB74204            <1>     movzx eax, word [rdx + chsParamsBlock.wNumCyl]
  1019 00000CBD 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
  1020                              <1> ;Finally, here we do the BPB magic.
  1021                              <1> ;
  1022                              <1> ;The logic here is that in a format operation, we first update the driver 
  1023                              <1> ; devBlk bpb fields with the new format and set the devLockBpb flag. 
  1024                              <1> ; This is so the bpb isn't updated from the disk when a disk operation is 
  1025                              <1> ; enacted and that the parameters we passed in this call are what are
  1026                              <1> ; reported to DOS whilst the bootsector hasn't been synchronised with 
  1027                              <1> ; the disk.
  1028                              <1> ;
  1029                              <1> ;We then write the bootsector with the new bpb to disk, thus synchronising
  1030                              <1> ; the new bpb parameter block with what is on disk.
  1031                              <1> ;
  1032                              <1> ;Then we call this again, this time, to clear the locking flag as the disk
  1033                              <1> ; is now sychronised with the accurate bpb. We also here can get rid of 
  1034                              <1> ; the old backup bpb and so the second call will replace the backup
  1035                              <1> ; with whatever we pass it (ideally, the same bpb).
  1036                              <1> ;
  1037                              <1> ;This procedure protects us from accidentally making the drive unusable if
  1038                              <1> ; we somehow fail to write the BPB by having updated the drvBlk. The 
  1039                              <1> ; protection occurs by allowing us to restore the backup bpb as the devBlk 
  1040                              <1> ; bpb if the disk synchronisation of the new parameters failed.
  1041 00000CC1 F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
  1042 00000CC4 7511                <1>     jnz .iosdpSetBPB    ;If bit set, lock the bpb
  1043                              <1> ;Else we update the backup bpb and unlock the main bpb
  1044 00000CC6 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sBkupBPB]
  1045 00000CCA B935000000          <1>     mov ecx, bpb32_size
  1046 00000CCF 66816537FBFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devLockBpb   ;Now allow update bpb 
  1047 00000CD5 EB0F                <1>     jmp short .iosdpCopy
  1048                              <1> .iosdpSetBPB:
  1049 00000CD7 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]   ;Default to the normal BPB in drvblk
  1050 00000CDB B929000000          <1>     mov ecx, drvBlkBpb_size
  1051 00000CE0 66814D370400        <1>     or word [rbp + drvBlk.wDevFlgs], devLockBpb ;Lock the BPB now
  1052                              <1> .iosdpCopy:
  1053 00000CE6 488D7207            <1>     lea rsi, qword [rdx + chsParamsBlock.deviceBPB]
  1054 00000CEA F3A4                <1>     rep movsb
  1055                              <1>     return
    13                              <2> %%_ret:
    14 00000CEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1056                              <1> 
  1057                              <1> .lbaSetParams:
  1058                              <1> ;This only sets the sector size and number of sectors in drvBlk.bpb.
  1059                              <1>     ;Set start sector of partition
  1060 00000CED 8B4A18              <1>     mov ecx, dword [rdx + lbaParamsBlock.qStartSector]
  1061 00000CF0 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
  1062                              <1>     ;Set sector size
  1063 00000CF3 8B4A08              <1>     mov ecx, dword [rdx + lbaParamsBlock.qSectorSize]
  1064 00000CF6 66894D0A            <1>     mov word [rbp + drvBlk.wBpS], cx
  1065                              <1>     ;Set same device flags as in CHS.
  1066 00000CFA 0FB64A02            <1>     movzx ecx, byte [rdx + lbaParamsBlock.wDevFlgs]
  1067 00000CFE 6681E10300          <1>     and cx, devFixed | devChgLine
  1068 00000D03 66094D37            <1>     or word [rbp + drvBlk.wDevFlgs], cx
  1069                              <1>     ;Set sector information.
  1070 00000D07 8B4A10              <1>     mov ecx, dword [rdx + lbaParamsBlock.qNumSectors]
  1071 00000D0A 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
  1072 00000D10 7605                <1>     jna .lbaSetSmall
  1073 00000D12 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
  1074 00000D15 31C9                <1>     xor ecx, ecx
  1075                              <1> .lbaSetSmall:
  1076 00000D17 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
  1077                              <1>     return
    13                              <2> %%_ret:
    14 00000D1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1078                              <1> ;---------------------------------------------------------------------------
  1079                              <1> ;               Get Device parameters in CHS and LBA here
  1080                              <1> ;---------------------------------------------------------------------------
  1081                              <1> .ioGetDevParams:
  1082 00000D1C 7559                <1>     jnz .lbaGetParams
  1083                              <1> ;Here we get CHS params. 
  1084 00000D1E 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
  1085 00000D22 F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
  1086 00000D25 7517                <1>     jnz .iogdpBkup  ;If set, return the bpb data as is.
  1087 00000D27 E8F9FAFFFF          <1>     call .updateBpb ;Else, gets the BPB from the disk.
  1088 00000D2C 0F8253FDFFFF        <1>     jc .ioDoErr ;Errors returned as if from block IO handler
  1089 00000D32 E804FCFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1090 00000D37 488D3571060000      <1>     lea rsi, qword [.inBuffer + 11]
  1091                              <1> .iogdpBkup:
  1092                              <1> ;The caller block in memory must have a bpb32_size'ed space for the BPB
  1093                              <1> ; even if it is a FAT16/12 drive. The caller has to assertain the 
  1094                              <1> ; type of BPB it is based information in the common part of the BPB.
  1095 00000D3E 488D7A07            <1>     lea rdi, qword [rdx + chsParamsBlock.deviceBPB]
  1096 00000D42 B935000000          <1>     mov ecx, bpb32_size
  1097 00000D47 F3A4                <1>     rep movsb
  1098 00000D49 B805000000          <1>     mov eax, typeHard
  1099 00000D4E B907000000          <1>     mov ecx, typeGenRem
  1100 00000D53 F6453701            <1>     test byte [rbp + drvBlk.wDevFlgs], devFixed
  1101 00000D57 0F44C1              <1>     cmovz eax, ecx  ;eax is set to 7 if the dev is removable
  1102 00000D5A 884201              <1>     mov byte [rdx + chsParamsBlock.bDevType], al
  1103 00000D5D 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1104 00000D61 2503000000          <1>     and eax, devFixed | devChgLine
  1105 00000D66 66894202            <1>     mov word [rdx + chsParamsBlock.wDevFlgs], ax
  1106 00000D6A C6420600            <1>     mov byte [rdx + chsParamsBlock.bMedTyp], 0
  1107 00000D6E 0FB74539            <1>     movzx eax, word [rbp + drvBlk.wNumCyl]
  1108 00000D72 66894204            <1>     mov word [rdx + chsParamsBlock.wNumCyl], ax
  1109                              <1>     return
    13                              <2> %%_ret:
    14 00000D76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1110                              <1> 
  1111                              <1> .lbaGetParams:
  1112                              <1> ;Gets more "updated" information on partitions.
  1113                              <1> ;The data returned will always be the partition maximum! For remdevs
  1114                              <1> ; this means up to the whole media size and for fixed disks we are still 
  1115                              <1> ; restricted to the partition size.
  1116 00000D77 B805000000          <1>     mov eax, drvBadDrvReq
  1117 00000D7C 803A20              <1>     cmp byte [rdx + lbaParamsBlock.bSize], lbaParamsBlock_size
  1118 00000D7F 0F8566F9FFFF        <1>     jne .errorExit
  1119 00000D85 4889D7              <1>     mov rdi, rdx    ;Store the params block ptr in rdi
  1120 00000D88 807F0102            <1>     cmp byte [rdi + lbaParamsBlock.bSpecFuncs], 2   ;Check get phys call.
  1121 00000D8C 0F8759F9FFFF        <1>     ja .errorExit   ;If above 2, error with bad request!
  1122 00000D92 741F                <1>     je .lgpbpbGetPhys
  1123 00000D94 F6470101            <1>     test byte [rdi + lbaParamsBlock.bSpecFuncs], 1  ;Check if we update BPB.
  1124 00000D98 7533                <1>     jnz .lgpbpbok
  1125 00000D9A 57                  <1>     push rdi    ;Push the param block onto the stack
  1126 00000D9B E885FAFFFF          <1>     call .updateBpb
  1127 00000DA0 7208                <1>     jc .lgpbpbnotok ;Even if just bad BPB, keep changed bit on!
  1128 00000DA2 E894FBFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1129 00000DA7 5F                  <1>     pop rdi     ;Pop param block
  1130 00000DA8 EB23                <1>     jmp short .lgpbpbok
  1131                              <1> .lgpbpbnotok:
  1132                              <1> ;If no valid BPB found, and the device removable, return BIOS params for the 
  1133                              <1> ; whole device. We never come here for fixed disks as updateBpb always passes.
  1134 00000DAA 5F                  <1>     pop rdi
  1135 00000DAB 3C07                <1>     cmp al, drvBadMed   ;If remdev has bad media, get bios attribs.
  1136 00000DAD 0F8538F9FFFF        <1>     jne .errorExit
  1137                              <1> ;We only fall here if on an unformatted removable disk.
  1138                              <1> ;Unformatted means with an unrecognisable BPB.
  1139                              <1> .lgpbpbGetPhys:
  1140 00000DB3 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
  1141 00000DB7 B800880000          <1>     mov eax, 8800h  ;Read LBA Device Parameters
  1142 00000DBC CD33                <1>     int 33h
  1143 00000DBE 0F8297F8FFFF        <1>     jc .errorXlat
  1144 00000DC4 48FFC1              <1>     inc rcx         ;Turn into an absolute count of sectors
  1145 00000DC7 31D2                <1>     xor edx, edx    ;0 Hidden sectors on remdevs/unformatted media
  1146                              <1> ;eax = 0 since either not formatted or values may not be ok for CHS calls
  1147 00000DC9 89D0                <1>     mov eax, edx     
  1148 00000DCB EB1F                <1>     jmp short .lgpStor
  1149                              <1> .lgpbpbok:
  1150 00000DCD 31C0                <1>     xor eax, eax
  1151 00000DCF 89C3                <1>     mov ebx, eax
  1152 00000DD1 FFC3                <1>     inc ebx
  1153                              <1> ;Here eax=0 and ebx=1.
  1154 00000DD3 F6450FFF            <1>     test byte [rbp + drvBlk.bNumFAT], -1    ;If 0 FATs, the FAT is invalid!
  1155 00000DD7 0F45C3              <1>     cmovnz eax, ebx                         ;Set if we have a FAT
  1156 00000DDA 8B551B              <1>     mov edx, dword [rbp + drvBlk.dHiddSec]
  1157 00000DDD 0FB75D0A            <1>     movzx ebx, word [rbp + drvBlk.wBpS]
  1158 00000DE1 0FB74D12            <1>     movzx ecx, word [rbp + drvBlk.wTotSec16]
  1159 00000DE5 85C9                <1>     test ecx, ecx
  1160 00000DE7 7503                <1>     jnz .lgpStor
  1161 00000DE9 8B4D1F              <1>     mov ecx, dword [rbp + drvBlk.dTotSec32]
  1162                              <1> .lgpStor:
  1163                              <1> ;Enter with:
  1164                              <1> ;ax = 0 if unformatted, 1 if any FAT type (means can call CHS function)
  1165                              <1> ;rbx = Sector size in bytes
  1166                              <1> ;rcx = Last LBA block address + 1 (Count of sectors)
  1167                              <1> ;rdx = Hidden sectors
  1168 00000DEC 66894704            <1>     mov word [rdi + lbaParamsBlock.wFSType], ax
  1169 00000DF0 48895F08            <1>     mov qword [rdi + lbaParamsBlock.qSectorSize], rbx
  1170 00000DF4 48894F10            <1>     mov qword [rdi + lbaParamsBlock.qNumSectors], rcx
  1171 00000DF8 48895718            <1>     mov qword [rdi + lbaParamsBlock.qStartSector], rdx
  1172 00000DFC 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1173 00000E00 2503000000          <1>     and eax, devFixed | devChgLine
  1174 00000E05 66894702            <1>     mov word [rdi + lbaParamsBlock.wDevFlgs], ax
  1175                              <1>     return 
    13                              <2> %%_ret:
    14 00000E09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1176                              <1> ;---------------------------------------------------------------------------
  1177                              <1> ;                    CHS IO requests are structured here
  1178                              <1> ;---------------------------------------------------------------------------
  1179                              <1> .ioWrite:
  1180 00000E0A 0F85BB000000        <1>     jnz .lbaWrite
  1181                              <1> ;Here for CHS write tracks. 
  1182 00000E10 BB00830000          <1>     mov ebx, 8300h  ;Write sectors
  1183                              <1> .iochsRW:
  1184 00000E15 E86F000000          <1>     call .ioChsToLba
  1185 00000E1A E853000000          <1>     call .ioChsSanity
  1186 00000E1F 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector]
  1187 00000E23 01C1                <1>     add ecx, eax    ;Add the zero based sector number to start of "track"
  1188 00000E25 0FB77707            <1>     movzx esi, word [rdi + chsIOBlock.wNumSectors]  ;How many sectors to IO on
  1189                              <1> .iochsCmn:
  1190 00000E29 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1191 00000E2B 488B5F09            <1>     mov rbx, qword [rdi + chsIOBlock.pXferBuffer]   ;And get buffer ptr in rbx
  1192 00000E2F E9B6000000          <1>     jmp .ioEp
  1193                              <1> .ioRead:
  1194 00000E34 0F858A000000        <1>     jnz .lbaRead
  1195                              <1> ;Here for CHS read tracks.
  1196 00000E3A BB00820000          <1>     mov ebx, 8200h  ;Read sectors
  1197 00000E3F EBD4                <1>     jmp short .iochsRW
  1198                              <1> .ioFormat:
  1199                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1200                              <1> ;
  1201                              <1> ;We start by setting DASD parameters but for now we do nothing so just
  1202                              <1> ; clear the flag.
  1203 00000E41 9C                  <1>     pushfq
  1204 00000E42 668165377FFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSetDASD
  1205 00000E48 9D                  <1>     popfq
  1206                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1207 00000E49 756F                <1>     jnz .lbaFmt
  1208                              <1> ;Here for CHS format track.
  1209 00000E4B BB00850000          <1>     mov ebx, 8500h  ;Format sectors
  1210 00000E50 F60201              <1>     test byte [rdx + chsFormatBlock.bSpecFuncs], 1  ;If this bit clear do format
  1211 00000E53 7404                <1>     jz .iochsFmtCmn
  1212                              <1> ;Else we should respond if the sector table is valid. Since our BIOS is crap
  1213                              <1> ; we always return OK and let the format call fail. This would possibly be
  1214                              <1> ; dangerous but its not since the BIOS CHS emulation is very meh.
  1215 00000E55 C60200              <1>     mov byte [rdx + chsFormatBlock.bSpecFuncs], 0   ;All ok!
  1216                              <1>     return
    13                              <2> %%_ret:
    14 00000E58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> .iochsFmtCmn:
  1218 00000E59 E82B000000          <1>     call .ioChsToLba    ;Get the LBA of the first sector of the track in ecx
  1219 00000E5E 0FB77517            <1>     movzx esi, word [rbp + drvBlk.wSecPerTrk]   ;Fmt/Verify this many sectors
  1220 00000E62 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1221 00000E64 E981000000          <1>     jmp .ioEp
  1222                              <1> .ioVerify:
  1223 00000E69 7548                <1>     jnz .lbaVerify
  1224                              <1> ;Here for CHS verify track.
  1225 00000E6B BB00840000          <1>     mov ebx, 8400h
  1226 00000E70 EBE7                <1>     jmp short .iochsFmtCmn
  1227                              <1> 
  1228                              <1> .ioChsSanity:
  1229                              <1> ;Checks that the read/write will be on one track and makes sense.
  1230                              <1> ;Input: ebx = BIOS function to call. Preserved.
  1231                              <1> ;       ecx = LBA of start sector.
  1232                              <1> ;       rdi -> chsIOBlock
  1233                              <1> ;       rbp -> Drive block ptr
  1234 00000E72 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector] ;Zero based
  1235 00000E76 FFC0                <1>     inc eax         ;Make it 1 based for the comparison
  1236 00000E78 66034707            <1>     add ax, word [rdi + chsIOBlock.wNumSectors]
  1237 00000E7C 663B4517            <1>     cmp ax, word [rbp + drvBlk.wSecPerTrk]  ;Does this surpass num sect/trck?
  1238                              <1>     retna
    77                              <2> cret na
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000E80 7701                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000E82 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1239                              <1> .ioctlerr:
  1240 00000E83 5B                  <1>     pop rbx ;Pop the ret addr off the stack and tail to the bad media
  1241 00000E84 E984FDFFFF          <1>     jmp .iobadMed
  1242                              <1> .ioChsToLba:
  1243                              <1> ;Gets the first sector of the track selected by this call.
  1244                              <1> ;Works with the values set in the bpb of drvBlk which isn't ideal...
  1245                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
  1246                              <1> ;Input: ebx = BIOS Function to call. Preserved.
  1247                              <1> ;Output: ecx = eax = LBA address for the first sector of the track
  1248                              <1> ;        rdi -> chsFormatBlock or IOBlock
  1249 00000E89 4889D7              <1>     mov rdi, rdx
  1250 00000E8C 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
  1251 00000E90 0FB74F03            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartCyl]
  1252 00000E94 663B4D39            <1>     cmp cx, word [rbp + drvBlk.wNumCyl]
  1253 00000E98 73E9                <1>     jae .ioctlerr
  1254 00000E9A FFC1                <1>     inc ecx ;Inc as we get it as a zero based number
  1255 00000E9C F7E1                <1>     mul ecx
  1256 00000E9E 0FB74F01            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartHead]
  1257 00000EA2 663B4D19            <1>     cmp cx, word [rbp + drvBlk.wNumHeads]
  1258 00000EA6 73DB                <1>     jae .ioctlerr 
  1259 00000EA8 01C8                <1>     add eax, ecx
  1260 00000EAA 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
  1261 00000EAE F7E1                <1>     mul ecx
  1262 00000EB0 89C1                <1>     mov ecx, eax
  1263                              <1>     return
    13                              <2> %%_ret:
    14 00000EB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1264                              <1> ;---------------------------------------------------------------------------
  1265                              <1> ;                    LBA IO requests are structured here
  1266                              <1> ;---------------------------------------------------------------------------
  1267                              <1> .lbaVerify:
  1268 00000EB3 B800840000          <1>     mov eax, 8400h  ;Verify sectors
  1269 00000EB8 EB05                <1>     jmp short .lbaFmtCmn
  1270                              <1> .lbaFmt:
  1271 00000EBA B800850000          <1>     mov eax, 8500h  ;Format sectors
  1272                              <1> .lbaFmtCmn:
  1273 00000EBF 803A10              <1>     cmp byte [rdx + lbaIOBlock.size], lbaFormatBlock_size
  1274 00000EC2 EB13                <1>     jmp short .lbaCmn
  1275                              <1> .lbaRead:
  1276 00000EC4 B800820000          <1>     mov eax, 8200h  ;Read sectors
  1277 00000EC9 EB05                <1>     jmp short .lbaRWCmn
  1278                              <1> .lbaWrite:
  1279 00000ECB B800830000          <1>     mov eax, 8300h  ;Write sectors
  1280                              <1> .lbaRWCmn:
  1281 00000ED0 488B5A10            <1>     mov rbx, qword [rdx + lbaIOBlock.xferBuffer]
  1282 00000ED4 803A18              <1>     cmp byte [rdx + lbaIOBlock.size], lbaIOBlock_size
  1283                              <1> .lbaCmn:
  1284 00000ED7 0F8526FDFFFF        <1>     jne .iobadCmdLen
  1285                              <1> ;Setup the vars for block IO
  1286 00000EDD 4889D7              <1>     mov rdi, rdx
  1287 00000EE0 0FB77701            <1>     movzx esi, word [rdi + lbaFormatBlock.numSectors]
  1288 00000EE4 8B4F08              <1>     mov ecx, dword [rdi + lbaFormatBlock.startSector]
  1289 00000EE7 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]  ;Point to sector in partition
  1290                              <1> .ioEp:
  1291 00000EEA 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
  1292                              <1> .ioLp:
  1293 00000EED 50                  <1>     push rax        ;Always preserve the function number we are using
  1294 00000EEE E8C0FBFFFF          <1>     call .blkIODirect
  1295 00000EF3 58                  <1>     pop rax
  1296 00000EF4 0F828BFBFFFF        <1>     jc .ioDoErr
  1297 00000EFA E891FBFFFF          <1>     call .ioAdv
  1298 00000EFF 75EC                <1>     jnz .ioLp
  1299                              <1>     return
    13                              <2> %%_ret:
    14 00000F01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1300                              <1> ;---------------------------------------------------------------------------
  1301                              <1> 
  1302                              <1> ;---------------------------------------------------------------------------
  1303                              <1> ;                           Misc GENIO routines 
  1304                              <1> ;---------------------------------------------------------------------------
  1305                              <1> .ioSetIds:
  1306                              <1> .ioGetIds:
  1307 00000F02 E9F2FCFFFF          <1>     jmp .iobadCmd
  1308                              <1> .ioSetAccessFlag:
  1309                              <1> ;Sets/Clears the unformatted bit of a device block.
  1310 00000F07 F64201FF            <1>     test byte [rdx + accFlgBlk.bAccMode], -1
  1311 00000F0B 7407                <1>     jz .iosafNoAcc
  1312                              <1> ;Enables access if the access mode is non-zero
  1313 00000F0D 66816537FFFD        <1>     and word [rbp + drvBlk.wDevFlgs], ~devUnFmt
  1314                              <1>     return
    13                              <2> %%_ret:
    14 00000F13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1315                              <1> .iosafNoAcc:
  1316                              <1> ;Disables access if the access mode is zero 
  1317 00000F14 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt
  1318                              <1>     return
    13                              <2> %%_ret:
    14 00000F1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1319                              <1> .ioGetAccessFlag:
  1320                              <1> ;Gets the state of the unformatted bit of a device block
  1321 00000F1B C6420100            <1>     mov byte [rdx + accFlgBlk.bAccMode], 0  ;Init to clear, no access
  1322 00000F1F 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1323                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F25 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F27 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1324 00000F28 FE4201              <1>     inc byte [rdx + accFlgBlk.bAccMode] ;If bit clear, set mode to access ok!
  1325                              <1>     return
    13                              <2> %%_ret:
    14 00000F2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1326                              <1> 
  1327                              <1> .ioTrackTbl:
  1328 00000F2C 3F00                <1>     dw maxTrackTblSz    ;Have a maximum of 63 sectors per track
  1329                              <1> ;Each row is a pair of words:
  1330                              <1> ;   dw Sector number, Sector size
  1331 00000F2E 01000002            <1>     dw 1, 200h
  1332 00000F32 02000002            <1>     dw 2, 200h
  1333 00000F36 03000002            <1>     dw 3, 200h
  1334 00000F3A 04000002            <1>     dw 4, 200h
  1335 00000F3E 05000002            <1>     dw 5, 200h
  1336 00000F42 06000002            <1>     dw 6, 200h
  1337 00000F46 07000002            <1>     dw 7, 200h
  1338 00000F4A 08000002            <1>     dw 8, 200h
  1339 00000F4E 09000002            <1>     dw 9, 200h
  1340 00000F52 0A000002            <1>     dw 10, 200h
  1341 00000F56 0B000002            <1>     dw 11, 200h
  1342 00000F5A 0C000002            <1>     dw 12, 200h
  1343 00000F5E 0D000002            <1>     dw 13, 200h
  1344 00000F62 0E000002            <1>     dw 14, 200h
  1345 00000F66 0F000002            <1>     dw 15, 200h
  1346 00000F6A 10000002            <1>     dw 16, 200h
  1347 00000F6E 11000002            <1>     dw 17, 200h
  1348 00000F72 12000002            <1>     dw 18, 200h
  1349 00000F76 13000002            <1>     dw 19, 200h
  1350 00000F7A 14000002            <1>     dw 20, 200h
  1351 00000F7E 15000002            <1>     dw 21, 200h
  1352 00000F82 16000002            <1>     dw 22, 200h
  1353 00000F86 17000002            <1>     dw 23, 200h
  1354 00000F8A 18000002            <1>     dw 24, 200h
  1355 00000F8E 19000002            <1>     dw 25, 200h
  1356 00000F92 1A000002            <1>     dw 26, 200h
  1357 00000F96 1B000002            <1>     dw 27, 200h
  1358 00000F9A 1C000002            <1>     dw 28, 200h
  1359 00000F9E 1D000002            <1>     dw 29, 200h
  1360 00000FA2 1E000002            <1>     dw 30, 200h
  1361 00000FA6 1F000002            <1>     dw 31, 200h
  1362 00000FAA 20000002            <1>     dw 32, 200h
  1363 00000FAE 21000002            <1>     dw 33, 200h
  1364 00000FB2 22000002            <1>     dw 34, 200h
  1365 00000FB6 23000002            <1>     dw 35, 200h
  1366 00000FBA 24000002            <1>     dw 36, 200h
  1367 00000FBE 25000002            <1>     dw 37, 200h
  1368 00000FC2 26000002            <1>     dw 38, 200h
  1369 00000FC6 27000002            <1>     dw 39, 200h
  1370 00000FCA 28000002            <1>     dw 40, 200h
  1371 00000FCE 29000002            <1>     dw 41, 200h
  1372 00000FD2 2A000002            <1>     dw 42, 200h
  1373 00000FD6 2B000002            <1>     dw 43, 200h
  1374 00000FDA 2C000002            <1>     dw 44, 200h
  1375 00000FDE 2D000002            <1>     dw 45, 200h
  1376 00000FE2 2E000002            <1>     dw 46, 200h
  1377 00000FE6 2F000002            <1>     dw 47, 200h
  1378 00000FEA 30000002            <1>     dw 48, 200h
  1379 00000FEE 31000002            <1>     dw 49, 200h
  1380 00000FF2 32000002            <1>     dw 50, 200h
  1381 00000FF6 33000002            <1>     dw 51, 200h
  1382 00000FFA 34000002            <1>     dw 52, 200h
  1383 00000FFE 35000002            <1>     dw 53, 200h
  1384 00001002 36000002            <1>     dw 54, 200h
  1385 00001006 37000002            <1>     dw 55, 200h
  1386 0000100A 38000002            <1>     dw 56, 200h
  1387 0000100E 39000002            <1>     dw 57, 200h
  1388 00001012 3A000002            <1>     dw 58, 200h
  1389 00001016 3B000002            <1>     dw 59, 200h
  1390 0000101A 3C000002            <1>     dw 60, 200h
  1391 0000101E 3D000002            <1>     dw 61, 200h
  1392 00001022 3E000002            <1>     dw 62, 200h
  1393 00001026 3F000002            <1>     dw 63, 200h
  1394                              <1> 
  1395                              <1> .getLogicalDev:   ;Function 23
  1396                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
  1397                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
  1398 0000102A 31C0                <1>     xor eax, eax
  1399 0000102C 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1400 00001032 7428                <1>     jz .gldExit
  1401 00001034 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
  1402 00001038 488D2D2D140000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
  1403                              <1> .gldLp:
  1404 0000103F 384508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
  1405 00001042 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
  1406 00001047 75F6                <1>     jne .gldLp
  1407 00001049 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
  1408 0000104F 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
  1409 00001054 74E9                <1>     jz .gldLp 
  1410 00001056 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
  1411 0000105A FFC0                <1>     inc eax ;Make it 1 based
  1412                              <1> .gldExit:
  1413 0000105C 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
  1414                              <1>     return
    13                              <2> %%_ret:
    14 0000105F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1415                              <1> 
  1416                              <1> .setLogicalDev:   ;Function 24
  1417 00001060 E8E9000000          <1>     call .checkDevType  ;Set the unit as the owner of this BIOS drive!
  1418                              <1>     return
    13                              <2> %%_ret:
    14 00001065 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1419                              <1> 
  1420                              <1> .setupDrive:
  1421                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
  1422                              <1> ; sets up internal vars according to it. 
  1423                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
  1424                              <1> ;Output: rbp = Points to the drvBlk
  1425 00001066 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
  1426                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000106A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000106C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1427 0000106D 488D2DF8130000      <1>     lea rbp, .drvBlkTbl
  1428                              <1> .sdChk:
  1429 00001074 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
  1430                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001077 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001079 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1431 0000107A 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1432 0000107E 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1433 00001085 75ED                <1>     jne .sdChk  ;Keep looping until end of table
  1434 00001087 58                  <1>     pop rax     ;Pop return address off the stack
  1435 00001088 B007                <1>     mov al, drvBadMed
  1436 0000108A E961F5FFFF          <1>     jmp .writeEntryError
  1437                              <1> 
  1438                              <1> .checkSwapIO:
  1439                              <1> ;Checks if the reason for an error mid IO operation was
  1440                              <1> ; really media being swapped.
  1441 0000108F E8A5000000          <1>     call .checkDevFixed ;If the dev is fixed, skip checking swap
  1442                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001094 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001096 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1443 00001097 80FC06              <1>     cmp ah, 06h         ;ah = 06 is BIOS Drive changed error code 
  1444                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000109A 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000109C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1445                              <1> ;Here the BIOS is reporting that the media was swapped. Check the media
  1446                              <1> ; to see if the drive really was swapped. 
  1447                              <1> ;We start by checking the open count. If it is zero, we never report
  1448                              <1> ; an illegal disk swap. This prevents this error from being thrown
  1449                              <1> ; if no files are open.
  1450 0000109D E8A5000000          <1>     call .checkOpen ;If opcnt = 0, ignore this error.
  1451                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010A2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010A4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1452                              <1> ;Here, if we determine that a media swap occured, we must report a 
  1453                              <1> ; bad disk change. That means, unsure or no swap simply return the 
  1454                              <1> ; error code. 
  1455 000010A5 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get original meddesc byte
  1456 000010A9 50                  <1>     push rax                                ;and save it on the stack
  1457 000010AA E822000000          <1>     call .csiogetbpb    ;Now get new bpb
  1458 000010AF 7217                <1>     jc .csiogetbpberr   ;If error in getting the BPB, bubble it up
  1459 000010B1 58                  <1>     pop rax             ;Get back the FAT byte in al
  1460 000010B2 E85A000000          <1>     call .checkFATSame  ;Returns status in eax
  1461 000010B7 7803                <1>     js .csioBadDskChg
  1462                              <1> .csioExit:
  1463 000010B9 B406                <1>     mov ah, 06h         ;Maintain the BIOS error code here
  1464                              <1>     return
    13                              <2> %%_ret:
    14 000010BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1465                              <1> .csioBadDskChg:
  1466                              <1> ;Restore the stack to return directly to DOS and not caller. 
  1467                              <1> ;Place DOS error code into al
  1468 000010BC 58                  <1>     pop rax
  1469 000010BD 58                  <1>     pop rax
  1470 000010BE B80F000000          <1>     mov eax, drvBadDskChnge
  1471 000010C3 E923F6FFFF          <1>     jmp .errorExit
  1472                              <1> .csiogetbpberr:
  1473                              <1> ;Return the error code from getbpb
  1474                              <1> ;Drop the saved media byte from the stack
  1475 000010C8 4881C408000000      <1>     add rsp, 8
  1476 000010CF F9                  <1>     stc
  1477                              <1>     return      ;and return with rax = Error code from updatebpb
    13                              <2> %%_ret:
    14 000010D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1478                              <1> .csiogetbpb:
  1479                              <1> ;Saves the IO registers for use across the updatebpb call and calls
  1480                              <1> ; the get bpb function
  1481 000010D1 53                  <1>     push rbx    
  1482 000010D2 51                  <1>     push rcx
  1483 000010D3 52                  <1>     push rdx
  1484 000010D4 56                  <1>     push rsi
  1485 000010D5 57                  <1>     push rdi
  1486 000010D6 E84AF7FFFF          <1>     call .updateBpb ;Update the BPB
  1487 000010DB 5F                  <1>     pop rdi
  1488 000010DC 5E                  <1>     pop rsi
  1489 000010DD 5A                  <1>     pop rdx
  1490 000010DE 59                  <1>     pop rcx
  1491 000010DF 5B                  <1>     pop rbx
  1492                              <1>     return
    13                              <2> %%_ret:
    14 000010E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1493                              <1>     
  1494                              <1> .checkSwap:
  1495                              <1> ;Checks if the media represented by drvBlk has been swapped when it 
  1496                              <1> ; shouldn't've been swapped.
  1497                              <1> ;Input: rbp -> drvBlk to check for
  1498                              <1> ;Output: CF=NC: All ok.
  1499                              <1> ;        CF=CY: Error in getting updated BPB. 
  1500                              <1> ;               AL = BIOS error code
  1501                              <1> ;   If an illegal disk swap is detected, then this call returns directly
  1502                              <1> ;   and doesnt bubble up to the caller. 
  1503 000010E1 E853000000          <1>     call .checkDevFixed ;If the dev is fixed, skip checking swap
  1504                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010E6 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010E8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1505                              <1>     ;cmp byte [0700h], -1
  1506                              <1>     ;je .dbg
  1507 000010E9 E859000000          <1>     call .checkOpen
  1508                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010EE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010F0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1509 000010F1 E84A000000          <1>     call .checkMediaChange
  1510                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010F6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010F8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1511                              <1> ;Since the open count is non-zero and a media swap has been seen (since
  1512                              <1> ; the flag was set) we update the BPB and check if the media is the 
  1513                              <1> ; same as the previous media. 
  1514 000010F9 E827F7FFFF          <1>     call .updateBpb     ;Update the BPB
  1515                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010FE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001100 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1516 00001101 E810000000          <1>     call .checkVolumeSame
  1517                              <1>     retns   ;If the sign bit is not set (i.e. unsure or no change) return ok
    85                              <2> cret ns
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001106 7801                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001108 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1518                              <1> ;.dbg:
  1519                              <1> ;Else, we now return a bad disk change!
  1520 00001109 58                  <1>     pop rax ;Pop original return address off the stack
  1521 0000110A B00F                <1>     mov al, drvBadDskChnge  ;Driver error code
  1522 0000110C E9DAF5FFFF          <1>     jmp .errorExit  ;Place error code in packet and return
  1523                              <1> 
  1524                              <1> .checkFATSame:
  1525                              <1> ;At this point, we are unsure of the media swap status. 
  1526 00001111 3A4514              <1>     cmp al, byte [rbp + drvBlk.bMedDesc]
  1527 00001114 7519                <1>     jne .cvsChange  ;If they are not equal, there mustve been a change
  1528                              <1> ;The FAT media byte is the same so how about literally anything else?
  1529                              <1> .checkVolumeSame:
  1530                              <1> ;If the volume has an extended BPB, we check the serial number. If they are 
  1531                              <1> ; the same, we then say no change. Else, the volume has changed. 
  1532                              <1> ;Else, we report unknown. 
  1533                              <1> ;----------------------------------------------------------------------------
  1534                              <1> ;TODO: In the outer else, replace with a read of the filesystem volume label
  1535                              <1> ;      and implement in buildBPB a routine to read the volume label from the
  1536                              <1> ;      root directory of whatever drive.
  1537                              <1> ;----------------------------------------------------------------------------
  1538 00001116 31C0                <1>     xor eax, eax    ;Set eax = 0, unsure
  1539 00001118 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
  1540                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000111C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000111E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1541                              <1> ;Here if we have an extended boot signature. 
  1542                              <1> ; Check the volume ids are equal
  1543 0000111F 50                  <1>     push rax
  1544 00001120 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
  1545 00001123 398580000000        <1>     cmp dword [rbp + drvBlk.volId], eax
  1546 00001129 58                  <1>     pop rax
  1547 0000112A 7503                <1>     jne .cvsChange
  1548                              <1> .cvsNoChange:
  1549 0000112C FFC0                <1>     inc eax ;Make eax = 1, no change
  1550                              <1>     return
    13                              <2> %%_ret:
    14 0000112E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1551                              <1> .cvsChange:
  1552 0000112F FFC8                <1>     dec eax ;Make eax = -1, change
  1553 00001131 C6056B020000FF      <1>     mov byte [.bLastDsk], -1    ;Ensure we do a media check next time
  1554                              <1>     return
    13                              <2> %%_ret:
    14 00001138 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1555                              <1> 
  1556                              <1> .checkDevFixed:
  1557                              <1> ;Input: rbp -> drvBlk to check if fixed media or not
  1558                              <1> ;Output: ZF=ZE: Not fixed
  1559                              <1> ;        ZF=NZ: Fixed
  1560 00001139 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
  1561                              <1>     return
    13                              <2> %%_ret:
    14 0000113F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1562                              <1> 
  1563                              <1> .checkMediaChange:
  1564                              <1> ;Input: rbp -> drvBlk to check changed flag for
  1565                              <1> ;Output: ZF=ZE: No change
  1566                              <1> ;        ZF=NZ: Change
  1567 00001140 66F745374000        <1>     test word [rbp + drvBlk.wDevFlgs], devChgd
  1568                              <1>     return
    13                              <2> %%_ret:
    14 00001146 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1569                              <1> 
  1570                              <1> .checkOpen:
  1571                              <1> ;Input: rbp -> drvBlk to check open count for
  1572                              <1> ;Output: ZF=ZE: Open count is 0
  1573                              <1> ;        ZF=NZ: Open count geq 0
  1574 00001147 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
  1575                              <1>     return
    13                              <2> %%_ret:
    14 0000114D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1576                              <1> 
  1577                              <1> .checkDevType:
  1578                              <1> ;Checks if we need to display the swap drive message and displays it if so.
  1579                              <1> ;The device must already be setup in rbp (and var) for this to work.
  1580                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
  1581 0000114E 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
  1582                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001154 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001156 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1583 00001157 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1584                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000115D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000115F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1585                              <1> ;Else, now we find the current owner of this drive letter :)
  1586 00001160 8A4508              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
  1587 00001163 488D3D02130000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
  1588                              <1> .cdtLp:
  1589 0000116A 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1590 00001171 746B                <1>     je .cdtBadExit
  1591 00001173 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
  1592 00001176 740D                <1>     je .cdtNextEntry
  1593 00001178 384708              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
  1594 0000117B 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
  1595                              <1>     ;Now we check if this is the current owner of the device?
  1596 0000117D 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
  1597 00001183 7505                <1>     jnz .cdtDevFnd
  1598                              <1> .cdtNextEntry:
  1599 00001185 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
  1600 00001188 EBE0                <1>     jmp short .cdtLp
  1601                              <1> .cdtDevFnd:
  1602                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
  1603                              <1> ; device) gains ownership.
  1604 0000118A 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
  1605 00001190 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
  1606                              <1> ;If a set map request, don't prompt the message!
  1607 00001196 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
  1608                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000119A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000119C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1609                              <1> 
  1610                              <1> ;Broadcast the disk-swap message for multitaskers to hook
  1611                              <1> ; and issue message (and skip the "not multitasking friendly"
  1612                              <1> ; section below)
  1613 0000119D 8A7709              <1>     mov dh, byte [rdi + drvBlk.bDOSNum] ;Unit that has lost ownership
  1614 000011A0 8A5509              <1>     mov dl, byte [rbp + drvBlk.bDOSNum] ;Unit that has gained ownership
  1615 000011A3 31C9                <1>     xor ecx, ecx
  1616 000011A5 B8004A0000          <1>     mov eax, 4A00h
  1617 000011AA CD2F                <1>     int 2Fh         ;If either ecx or cx = -1, return
  1618 000011AC 0FBFC9              <1>     movsx ecx, cx   ;Convert 16-bit responses to 32-bit
  1619 000011AF FFC1                <1>     inc ecx         ;If ecx = -1, we return
  1620                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011B1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011B3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1621                              <1> 
  1622                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1623 000011B4 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  1624 000011B7 0441                <1>     add al, "A" ;Convert to a letter
  1625 000011B9 88059B010000        <1>     mov byte [.strikeMsgLetter], al
  1626 000011BF 488D357C010000      <1>     lea rsi, .strikeMsg
  1627 000011C6 B93C000000          <1>     mov ecx, .strikeMsgL
  1628                              <1> .cdtPrint:
  1629 000011CB AC                  <1>     lodsb   ;Get the char in al, inc rsi
  1630 000011CC CD29                <1>     int 29h ;Print char in al
  1631 000011CE FFC9                <1>     dec ecx
  1632 000011D0 75F9                <1>     jnz .cdtPrint
  1633                              <1> 
  1634 000011D2 E821000000          <1>     call .cdtCleanKeyb  ;Clean the buffer!
  1635 000011D7 E80E000000          <1>     call .cdtAwaitKeyb  ;Await until a char ready in a friendly way :)
  1636                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1637                              <1> 
  1638 000011DC F8                  <1>     clc ;Indicate goodness through CF
  1639                              <1>     return
    13                              <2> %%_ret:
    14 000011DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1640                              <1> .cdtBadExit:
  1641 000011DE 58                  <1>     pop rax
  1642 000011DF B807000000          <1>     mov eax, drvBadMed
  1643 000011E4 F9                  <1>     stc ;Indicate badness through CF
  1644 000011E5 E901F5FFFF          <1>     jmp .errorExit
  1645                              <1> 
  1646                              <1> .cdtAwaitKeyb:
  1647 000011EA B800010000          <1>     mov eax, 0100h
  1648 000011EF CD36                <1>     int 36h ;If return ZF=ZE, we have no char in the buffer. Loop until we do!
  1649 000011F1 74F7                <1>     jz .cdtAwaitKeyb
  1650 000011F3 31C0                <1>     xor eax, eax
  1651 000011F5 CD36                <1>     int 36h ;Now pull the char!
  1652                              <1>     return
    13                              <2> %%_ret:
    14 000011F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1653                              <1> .cdtCleanKeyb:
  1654 000011F8 B800010000          <1>     mov eax, 0100h
  1655 000011FD CD36                <1>     int 36h ;If return ZF=NZ we have a char in the buffer, pull it!
  1656                              <1>     retz    ;Else ZF=ZE, no char, ready to await the keypress.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011FF 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001201 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1657 00001202 31C0                <1>     xor eax, eax    ;Pull the char in the buffer from buffer
  1658 00001204 CD36                <1>     int 36h
  1659 00001206 EBF0                <1>     jmp short .cdtCleanKeyb
  1660                              <1> 
  1661                              <1> .ioSetVolLbl:
  1662                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
  1663                              <1> ;Input: rbx -> io request packet
  1664                              <1> ;       rbp -> drvBlk to get volume ID from
  1665                              <1> ;Output: Pointer placed in io request packet
  1666 00001208 50                  <1>     push rax
  1667 00001209 488D4574            <1>     lea rax, qword [rbp + drvBlk.volLab]    ;Get the volLbl from the BPB
  1668 0000120D 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
  1669 00001211 58                  <1>     pop rax
  1670 00001212 C3                  <1>     ret
  1671                              <1> 
  1672                              <1> .getTime:
  1673                              <1> ;Gets the current time in a format ready to be used for disk access.
  1674 00001213 31C0                <1>     xor eax, eax
  1675 00001215 CD3A                <1>     int 3Ah
  1676 00001217 0FB7D2              <1>     movzx edx, dx
  1677 0000121A C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
  1678 0000121D 09D1                <1>     or ecx, edx ;Store the current time count into ecx
  1679 0000121F 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
  1680 00001221 740E                <1>     jz .stStore
  1681 00001223 0FB6C0              <1>     movzx eax, al
  1682 00001226 51                  <1>     push rcx    ;Save the current time count
  1683 00001227 B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
  1684 0000122C F7E1                <1>     mul ecx
  1685 0000122E 59                  <1>     pop rcx
  1686 0000122F 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
  1687                              <1> .stStore:
  1688 00001231 F8                  <1>     clc
  1689                              <1>     return
    13                              <2> %%_ret:
    14 00001232 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1690                              <1> 
  1691                              <1> .setTime:
  1692                              <1> ;Sets the current time to the disk drive and resets the access counter
  1693                              <1> ;Preserves all registers and edits .bAccCnt and .dAccTime for rbp -> drvBlk
  1694 00001233 50                  <1>     push rax
  1695 00001234 51                  <1>     push rcx
  1696 00001235 52                  <1>     push rdx
  1697 00001236 E8D8FFFFFF          <1>     call .getTime   ;Return in ecx the time. eax and edx trashed.
  1698 0000123B 894D70              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
  1699 0000123E C6055D01000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
  1700 00001245 5A                  <1>     pop rdx
  1701 00001246 59                  <1>     pop rcx
  1702 00001247 58                  <1>     pop rax
  1703                              <1>     return
    13                              <2> %%_ret:
    14 00001248 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1704                              <1> 
  1705                              <1> .checkTime:
  1706                              <1> ;Does the time/access count check :)
  1707                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
  1708 00001249 E8C5FFFFFF          <1>     call .getTime   ;Returns in ecx the current time
  1709 0000124E 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
  1710 00001250 7517                <1>     jnz .ctOk
  1711 00001252 FE054A010000        <1>     inc byte [.bAccCnt]
  1712 00001258 803D4301000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
  1713 0000125F 7217                <1>     jb .ctNoChange
  1714 00001261 FE0D3B010000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
  1715 00001267 EB0D                <1>     jmp short .ctMaybeCh
  1716                              <1> .ctOk:
  1717 00001269 8B5570              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
  1718                              <1> ;ecx = time of current check, adjusted for day rollovers 
  1719 0000126C 29D1                <1>     sub ecx, edx    
  1720 0000126E 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
  1721 00001274 7602                <1>     jbe .ctNoChange
  1722                              <1> .ctMaybeCh:
  1723 00001276 F9                  <1>     stc
  1724                              <1>     return
    13                              <2> %%_ret:
    14 00001277 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1725                              <1> .ctNoChange:
  1726 00001278 F8                  <1>     clc
  1727                              <1>     return
    13                              <2> %%_ret:
    14 00001279 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1728                              <1> 
  1729                              <1> .callI33h:
  1730                              <1> ;Wraps all i33 calls allowing me to preserve all that I need to preserve
  1731                              <1> ; across these calls. Only allows returning values in ax.
  1732 0000127A 53                  <1>     push rbx
  1733 0000127B 51                  <1>     push rcx
  1734 0000127C 52                  <1>     push rdx
  1735 0000127D 56                  <1>     push rsi
  1736 0000127E 57                  <1>     push rdi
  1737 0000127F 55                  <1>     push rbp
  1738 00001280 CD33                <1>     int 33h
  1739 00001282 5D                  <1>     pop rbp
  1740 00001283 5F                  <1>     pop rdi
  1741 00001284 5E                  <1>     pop rsi
  1742 00001285 5A                  <1>     pop rdx
  1743 00001286 59                  <1>     pop rcx
  1744 00001287 5B                  <1>     pop rbx
  1745                              <1>     return
    13                              <2> %%_ret:
    14 00001288 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1746                              <1> 
  1747                              <1> .setBitsForAllDevs:
  1748                              <1> ;Sets the selected bits for all devices with a particular BIOS number.
  1749                              <1> ;Input: ax = Bits to set in wDevFlgs
  1750                              <1> ;       dl = BIOS drive number
  1751 00001289 55                  <1>     push rbp
  1752 0000128A 9C                  <1>     pushfq
  1753 0000128B 488D2DDA110000      <1>     lea rbp, .drvBlkTbl
  1754                              <1> .sbfadLp:
  1755 00001292 385508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], dl
  1756 00001295 7504                <1>     jne .sbfadNext
  1757 00001297 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax
  1758                              <1> .sbfadNext:
  1759 0000129B 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1760 0000129F 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1761 000012A6 75EA                <1>     jne .sbfadLp
  1762                              <1> .sbfadExit:
  1763 000012A8 9D                  <1>     popfq
  1764 000012A9 5D                  <1>     pop rbp
  1765                              <1>     return
    13                              <2> %%_ret:
    14 000012AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1766                              <1> 
  1767                              <1> .i2fDriver:
  1768                              <1> ;Back door into the block driver :)
  1769 000012AB 80FC08              <1>     cmp ah, 08h
  1770 000012AE 7510                <1>     jne .i2fNotUs
  1771 000012B0 84C0                <1>     test al, al ;AL=00, Install check
  1772 000012B2 7412                <1>     jz .i2fCheck
  1773 000012B4 3C01                <1>     cmp al, 01  ;AL=01, Add block device
  1774 000012B6 7412                <1>     je .i2fAddTbl
  1775 000012B8 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
  1776 000012BA 745D                <1>     je .i2fExec
  1777 000012BC 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
  1778 000012BE 7479                <1>     je .i2fGivTbl
  1779                              <1> .i2fNotUs:
  1780 000012C0 FF2508F2FFFF        <1>     jmp qword [i2FNext]
  1781                              <1> .i2fCheck:
  1782 000012C6 B0FF                <1>     mov al, -1  ;Indicate installed!
  1783 000012C8 48CF                <1>     iretq
  1784                              <1> .i2fAddTbl:
  1785                              <1> ;Adds a new entry to the drive chain and updates the multiownership bits
  1786                              <1> ; as it does :)
  1787                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
  1788                              <1> ;Destroy rax, rbx and rsi
  1789 000012CA 488D359B110000      <1>     lea rsi, .drvBlkTbl
  1790 000012D1 0FB64708            <1>     movzx eax, byte [rdi + drvBlk.bBIOSNum]
  1791                              <1> .i2fATLp:
  1792 000012D5 384608              <1>     cmp byte [rsi + drvBlk.bBIOSNum], al
  1793 000012D8 7526                <1>     jne .i2fATNext
  1794                              <1> ;Set that the two disks are multi owned. New cannot own the drive
  1795                              <1> ; and make sure that the new drive has the accurate changeline bit set
  1796 000012DA 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti       ;Both drives now multi!
  1797 000012E0 66814F371000        <1>     or word [rdi + drvBlk.wDevFlgs], devMulti
  1798 000012E6 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv    ;New cant own drv
  1799                              <1> ;Changeline check.
  1800 000012EC 66816737FDFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devChgLine   ;Assume no changeline
  1801 000012F2 66F746370200        <1>     test word [rsi + drvBlk.wDevFlgs], devChgLine   ;Do we really have cline?
  1802 000012F8 7406                <1>     jz .i2fATNext   ;Skip adding the bit if not
  1803 000012FA 66814F370200        <1>     or word [rdi + drvBlk.wDevFlgs], devChgLine     ;Add if we do 
  1804                              <1> .i2fATNext:
  1805 00001300 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;Check if we @ end of table
  1806 00001307 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink] ;Walk if not
  1807 0000130B 75C8                <1>     jne .i2fATLp    ;And go again if not
  1808 0000130D 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi ;Else, link rdi onto the end
  1809 00001310 48C707FFFFFFFF      <1>     mov qword [rdi + drvBlk.pLink], -1  ;And terminate list @ rdi now :)
  1810 00001317 48CF                <1>     iretq
  1811                              <1> .i2fExec:
  1812                              <1> ;We make a small change in that we clean up the flags from the stack
  1813                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
  1814                              <1> ; as no useful information is ever passed in the flags from a driver
  1815                              <1> ; so by doing so, any ported applications which do an additional pop
  1816                              <1> ; from the stack to balance the stack will not be harmed by this.
  1817 00001319 50                  <1>     push rax
  1818 0000131A B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
  1819 0000131F CD2A                <1>     int 2Ah
  1820                              <1> 
  1821 00001321 53                  <1>     push rbx
  1822 00001322 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx  ;Save the ptr in var since we own it now :)
  1823 00001329 E859F2FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
  1824 0000132E 5B                  <1>     pop rbx
  1825                              <1> 
  1826 0000132F B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
  1827 00001334 CD2A                <1>     int 2Ah
  1828 00001336 58                  <1>     pop rax
  1829 00001337 48CF                <1>     iretq
  1830                              <1> .i2fGivTbl:
  1831                              <1> ;Output: rdi -> drvBlkTbl
  1832 00001339 488D3D2C110000      <1>     lea rdi, .drvBlkTbl
  1833 00001340 48CF                <1>     iretq
  1834                              <1> 
  1835 00001342 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert disk for drive "
  1835 0000134B 6469736B20666F7220- <1>
  1835 00001354 647269766520        <1>
  1836 0000135A 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
  1836 00001363 72696B650D0A616E79- <1>
  1836 0000136C 206B6579207768656E- <1>
  1836 00001375 2072656164790D0A0A  <1>
  1837                              <1> .strikeMsgL equ $ - .strikeMsg
  1838                              <1> 
  1839 0000137E 464154313220202000  <1> .fat12Str   db "FAT12   ",0
  1840 00001387 464154313620202000  <1> .fat16Str   db "FAT16   ",0
  1841 00001390 464154333220202000  <1> .fat32Str   db "FAT32   ",0
  1842 00001399 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
  1843                              <1> 
  1844 000013A2 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
  1845 000013A3 FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check/IO.
  1846                              <1> 
  1847                              <1> ;Keep this @ 4096 for hotplugging a 4096 dev that needs 512 byte pseudo
  1848                              <1> ; access. 
  1849                              <1> ;Access to this buffer should be mediated through a critical section... 
  1850                              <1> ; but this driver doesnt need to be reentrant yet.
  1851 000013A4 000000000000000000- <1> .inBuffer   db 4096 dup (0)  
  1851 000013AD 000000000000000000- <1>
  1851 000013B6 000000000000000000- <1>
  1851 000013BF 000000000000000000- <1>
  1851 000013C8 000000000000000000- <1>
  1851 000013D1 000000000000000000- <1>
  1851 000013DA 000000000000000000- <1>
  1851 000013E3 000000000000000000- <1>
  1851 000013EC 000000000000000000- <1>
  1851 000013F5 000000000000000000- <1>
  1851 000013FE 000000000000000000- <1>
  1851 00001407 000000000000000000- <1>
  1851 00001410 000000000000000000- <1>
  1851 00001419 000000000000000000- <1>
  1851 00001422 000000000000000000- <1>
  1851 0000142B 000000000000000000- <1>
  1851 00001434 000000000000000000- <1>
  1851 0000143D 000000000000000000- <1>
  1851 00001446 000000000000000000- <1>
  1851 0000144F 000000000000000000- <1>
  1851 00001458 000000000000000000- <1>
  1851 00001461 000000000000000000- <1>
  1851 0000146A 000000000000000000- <1>
  1851 00001473 000000000000000000- <1>
  1851 0000147C 000000000000000000- <1>
  1851 00001485 000000000000000000- <1>
  1851 0000148E 000000000000000000- <1>
  1851 00001497 000000000000000000- <1>
  1851 000014A0 000000000000000000- <1>
  1851 000014A9 000000000000000000- <1>
  1851 000014B2 000000000000000000- <1>
  1851 000014BB 000000000000000000- <1>
  1851 000014C4 000000000000000000- <1>
  1851 000014CD 000000000000000000- <1>
  1851 000014D6 000000000000000000- <1>
  1851 000014DF 000000000000000000- <1>
  1851 000014E8 000000000000000000- <1>
  1851 000014F1 000000000000000000- <1>
  1851 000014FA 000000000000000000- <1>
  1851 00001503 000000000000000000- <1>
  1851 0000150C 000000000000000000- <1>
  1851 00001515 000000000000000000- <1>
  1851 0000151E 000000000000000000- <1>
  1851 00001527 000000000000000000- <1>
  1851 00001530 000000000000000000- <1>
  1851 00001539 000000000000000000- <1>
  1851 00001542 000000000000000000- <1>
  1851 0000154B 000000000000000000- <1>
  1851 00001554 000000000000000000- <1>
  1851 0000155D 000000000000000000- <1>
  1851 00001566 000000000000000000- <1>
  1851 0000156F 000000000000000000- <1>
  1851 00001578 000000000000000000- <1>
  1851 00001581 000000000000000000- <1>
  1851 0000158A 000000000000000000- <1>
  1851 00001593 000000000000000000- <1>
  1851 0000159C 000000000000000000- <1>
  1851 000015A5 000000000000000000- <1>
  1851 000015AE 000000000000000000- <1>
  1851 000015B7 000000000000000000- <1>
  1851 000015C0 000000000000000000- <1>
  1851 000015C9 000000000000000000- <1>
  1851 000015D2 000000000000000000- <1>
  1851 000015DB 000000000000000000- <1>
  1851 000015E4 000000000000000000- <1>
  1851 000015ED 000000000000000000- <1>
  1851 000015F6 000000000000000000- <1>
  1851 000015FF 000000000000000000- <1>
  1851 00001608 000000000000000000- <1>
  1851 00001611 000000000000000000- <1>
  1851 0000161A 000000000000000000- <1>
  1851 00001623 000000000000000000- <1>
  1851 0000162C 000000000000000000- <1>
  1851 00001635 000000000000000000- <1>
  1851 0000163E 000000000000000000- <1>
  1851 00001647 000000000000000000- <1>
  1851 00001650 000000000000000000- <1>
  1851 00001659 000000000000000000- <1>
  1851 00001662 000000000000000000- <1>
  1851 0000166B 000000000000000000- <1>
  1851 00001674 000000000000000000- <1>
  1851 0000167D 000000000000000000- <1>
  1851 00001686 000000000000000000- <1>
  1851 0000168F 000000000000000000- <1>
  1851 00001698 000000000000000000- <1>
  1851 000016A1 000000000000000000- <1>
  1851 000016AA 000000000000000000- <1>
  1851 000016B3 000000000000000000- <1>
  1851 000016BC 000000000000000000- <1>
  1851 000016C5 000000000000000000- <1>
  1851 000016CE 000000000000000000- <1>
  1851 000016D7 000000000000000000- <1>
  1851 000016E0 000000000000000000- <1>
  1851 000016E9 000000000000000000- <1>
  1851 000016F2 000000000000000000- <1>
  1851 000016FB 000000000000000000- <1>
  1851 00001704 000000000000000000- <1>
  1851 0000170D 000000000000000000- <1>
  1851 00001716 000000000000000000- <1>
  1851 0000171F 000000000000000000- <1>
  1851 00001728 000000000000000000- <1>
  1851 00001731 000000000000000000- <1>
  1851 0000173A 000000000000000000- <1>
  1851 00001743 000000000000000000- <1>
  1851 0000174C 000000000000000000- <1>
  1851 00001755 000000000000000000- <1>
  1851 0000175E 000000000000000000- <1>
  1851 00001767 000000000000000000- <1>
  1851 00001770 000000000000000000- <1>
  1851 00001779 000000000000000000- <1>
  1851 00001782 000000000000000000- <1>
  1851 0000178B 000000000000000000- <1>
  1851 00001794 000000000000000000- <1>
  1851 0000179D 000000000000000000- <1>
  1851 000017A6 000000000000000000- <1>
  1851 000017AF 000000000000000000- <1>
  1851 000017B8 000000000000000000- <1>
  1851 000017C1 000000000000000000- <1>
  1851 000017CA 000000000000000000- <1>
  1851 000017D3 000000000000000000- <1>
  1851 000017DC 000000000000000000- <1>
  1851 000017E5 000000000000000000- <1>
  1851 000017EE 000000000000000000- <1>
  1851 000017F7 000000000000000000- <1>
  1851 00001800 000000000000000000- <1>
  1851 00001809 000000000000000000- <1>
  1851 00001812 000000000000000000- <1>
  1851 0000181B 000000000000000000- <1>
  1851 00001824 000000000000000000- <1>
  1851 0000182D 000000000000000000- <1>
  1851 00001836 000000000000000000- <1>
  1851 0000183F 000000000000000000- <1>
  1851 00001848 000000000000000000- <1>
  1851 00001851 000000000000000000- <1>
  1851 0000185A 000000000000000000- <1>
  1851 00001863 000000000000000000- <1>
  1851 0000186C 000000000000000000- <1>
  1851 00001875 000000000000000000- <1>
  1851 0000187E 000000000000000000- <1>
  1851 00001887 000000000000000000- <1>
  1851 00001890 000000000000000000- <1>
  1851 00001899 000000000000000000- <1>
  1851 000018A2 000000000000000000- <1>
  1851 000018AB 000000000000000000- <1>
  1851 000018B4 000000000000000000- <1>
  1851 000018BD 000000000000000000- <1>
  1851 000018C6 000000000000000000- <1>
  1851 000018CF 000000000000000000- <1>
  1851 000018D8 000000000000000000- <1>
  1851 000018E1 000000000000000000- <1>
  1851 000018EA 000000000000000000- <1>
  1851 000018F3 000000000000000000- <1>
  1851 000018FC 000000000000000000- <1>
  1851 00001905 000000000000000000- <1>
  1851 0000190E 000000000000000000- <1>
  1851 00001917 000000000000000000- <1>
  1851 00001920 000000000000000000- <1>
  1851 00001929 000000000000000000- <1>
  1851 00001932 000000000000000000- <1>
  1851 0000193B 000000000000000000- <1>
  1851 00001944 000000000000000000- <1>
  1851 0000194D 000000000000000000- <1>
  1851 00001956 000000000000000000- <1>
  1851 0000195F 000000000000000000- <1>
  1851 00001968 000000000000000000- <1>
  1851 00001971 000000000000000000- <1>
  1851 0000197A 000000000000000000- <1>
  1851 00001983 000000000000000000- <1>
  1851 0000198C 000000000000000000- <1>
  1851 00001995 000000000000000000- <1>
  1851 0000199E 000000000000000000- <1>
  1851 000019A7 000000000000000000- <1>
  1851 000019B0 000000000000000000- <1>
  1851 000019B9 000000000000000000- <1>
  1851 000019C2 000000000000000000- <1>
  1851 000019CB 000000000000000000- <1>
  1851 000019D4 000000000000000000- <1>
  1851 000019DD 000000000000000000- <1>
  1851 000019E6 000000000000000000- <1>
  1851 000019EF 000000000000000000- <1>
  1851 000019F8 000000000000000000- <1>
  1851 00001A01 000000000000000000- <1>
  1851 00001A0A 000000000000000000- <1>
  1851 00001A13 000000000000000000- <1>
  1851 00001A1C 000000000000000000- <1>
  1851 00001A25 000000000000000000- <1>
  1851 00001A2E 000000000000000000- <1>
  1851 00001A37 000000000000000000- <1>
  1851 00001A40 000000000000000000- <1>
  1851 00001A49 000000000000000000- <1>
  1851 00001A52 000000000000000000- <1>
  1851 00001A5B 000000000000000000- <1>
  1851 00001A64 000000000000000000- <1>
  1851 00001A6D 000000000000000000- <1>
  1851 00001A76 000000000000000000- <1>
  1851 00001A7F 000000000000000000- <1>
  1851 00001A88 000000000000000000- <1>
  1851 00001A91 000000000000000000- <1>
  1851 00001A9A 000000000000000000- <1>
  1851 00001AA3 000000000000000000- <1>
  1851 00001AAC 000000000000000000- <1>
  1851 00001AB5 000000000000000000- <1>
  1851 00001ABE 000000000000000000- <1>
  1851 00001AC7 000000000000000000- <1>
  1851 00001AD0 000000000000000000- <1>
  1851 00001AD9 000000000000000000- <1>
  1851 00001AE2 000000000000000000- <1>
  1851 00001AEB 000000000000000000- <1>
  1851 00001AF4 000000000000000000- <1>
  1851 00001AFD 000000000000000000- <1>
  1851 00001B06 000000000000000000- <1>
  1851 00001B0F 000000000000000000- <1>
  1851 00001B18 000000000000000000- <1>
  1851 00001B21 000000000000000000- <1>
  1851 00001B2A 000000000000000000- <1>
  1851 00001B33 000000000000000000- <1>
  1851 00001B3C 000000000000000000- <1>
  1851 00001B45 000000000000000000- <1>
  1851 00001B4E 000000000000000000- <1>
  1851 00001B57 000000000000000000- <1>
  1851 00001B60 000000000000000000- <1>
  1851 00001B69 000000000000000000- <1>
  1851 00001B72 000000000000000000- <1>
  1851 00001B7B 000000000000000000- <1>
  1851 00001B84 000000000000000000- <1>
  1851 00001B8D 000000000000000000- <1>
  1851 00001B96 000000000000000000- <1>
  1851 00001B9F 000000000000000000- <1>
  1851 00001BA8 000000000000000000- <1>
  1851 00001BB1 000000000000000000- <1>
  1851 00001BBA 000000000000000000- <1>
  1851 00001BC3 000000000000000000- <1>
  1851 00001BCC 000000000000000000- <1>
  1851 00001BD5 000000000000000000- <1>
  1851 00001BDE 000000000000000000- <1>
  1851 00001BE7 000000000000000000- <1>
  1851 00001BF0 000000000000000000- <1>
  1851 00001BF9 000000000000000000- <1>
  1851 00001C02 000000000000000000- <1>
  1851 00001C0B 000000000000000000- <1>
  1851 00001C14 000000000000000000- <1>
  1851 00001C1D 000000000000000000- <1>
  1851 00001C26 000000000000000000- <1>
  1851 00001C2F 000000000000000000- <1>
  1851 00001C38 000000000000000000- <1>
  1851 00001C41 000000000000000000- <1>
  1851 00001C4A 000000000000000000- <1>
  1851 00001C53 000000000000000000- <1>
  1851 00001C5C 000000000000000000- <1>
  1851 00001C65 000000000000000000- <1>
  1851 00001C6E 000000000000000000- <1>
  1851 00001C77 000000000000000000- <1>
  1851 00001C80 000000000000000000- <1>
  1851 00001C89 000000000000000000- <1>
  1851 00001C92 000000000000000000- <1>
  1851 00001C9B 000000000000000000- <1>
  1851 00001CA4 000000000000000000- <1>
  1851 00001CAD 000000000000000000- <1>
  1851 00001CB6 000000000000000000- <1>
  1851 00001CBF 000000000000000000- <1>
  1851 00001CC8 000000000000000000- <1>
  1851 00001CD1 000000000000000000- <1>
  1851 00001CDA 000000000000000000- <1>
  1851 00001CE3 000000000000000000- <1>
  1851 00001CEC 000000000000000000- <1>
  1851 00001CF5 000000000000000000- <1>
  1851 00001CFE 000000000000000000- <1>
  1851 00001D07 000000000000000000- <1>
  1851 00001D10 000000000000000000- <1>
  1851 00001D19 000000000000000000- <1>
  1851 00001D22 000000000000000000- <1>
  1851 00001D2B 000000000000000000- <1>
  1851 00001D34 000000000000000000- <1>
  1851 00001D3D 000000000000000000- <1>
  1851 00001D46 000000000000000000- <1>
  1851 00001D4F 000000000000000000- <1>
  1851 00001D58 000000000000000000- <1>
  1851 00001D61 000000000000000000- <1>
  1851 00001D6A 000000000000000000- <1>
  1851 00001D73 000000000000000000- <1>
  1851 00001D7C 000000000000000000- <1>
  1851 00001D85 000000000000000000- <1>
  1851 00001D8E 000000000000000000- <1>
  1851 00001D97 000000000000000000- <1>
  1851 00001DA0 000000000000000000- <1>
  1851 00001DA9 000000000000000000- <1>
  1851 00001DB2 000000000000000000- <1>
  1851 00001DBB 000000000000000000- <1>
  1851 00001DC4 000000000000000000- <1>
  1851 00001DCD 000000000000000000- <1>
  1851 00001DD6 000000000000000000- <1>
  1851 00001DDF 000000000000000000- <1>
  1851 00001DE8 000000000000000000- <1>
  1851 00001DF1 000000000000000000- <1>
  1851 00001DFA 000000000000000000- <1>
  1851 00001E03 000000000000000000- <1>
  1851 00001E0C 000000000000000000- <1>
  1851 00001E15 000000000000000000- <1>
  1851 00001E1E 000000000000000000- <1>
  1851 00001E27 000000000000000000- <1>
  1851 00001E30 000000000000000000- <1>
  1851 00001E39 000000000000000000- <1>
  1851 00001E42 000000000000000000- <1>
  1851 00001E4B 000000000000000000- <1>
  1851 00001E54 000000000000000000- <1>
  1851 00001E5D 000000000000000000- <1>
  1851 00001E66 000000000000000000- <1>
  1851 00001E6F 000000000000000000- <1>
  1851 00001E78 000000000000000000- <1>
  1851 00001E81 000000000000000000- <1>
  1851 00001E8A 000000000000000000- <1>
  1851 00001E93 000000000000000000- <1>
  1851 00001E9C 000000000000000000- <1>
  1851 00001EA5 000000000000000000- <1>
  1851 00001EAE 000000000000000000- <1>
  1851 00001EB7 000000000000000000- <1>
  1851 00001EC0 000000000000000000- <1>
  1851 00001EC9 000000000000000000- <1>
  1851 00001ED2 000000000000000000- <1>
  1851 00001EDB 000000000000000000- <1>
  1851 00001EE4 000000000000000000- <1>
  1851 00001EED 000000000000000000- <1>
  1851 00001EF6 000000000000000000- <1>
  1851 00001EFF 000000000000000000- <1>
  1851 00001F08 000000000000000000- <1>
  1851 00001F11 000000000000000000- <1>
  1851 00001F1A 000000000000000000- <1>
  1851 00001F23 000000000000000000- <1>
  1851 00001F2C 000000000000000000- <1>
  1851 00001F35 000000000000000000- <1>
  1851 00001F3E 000000000000000000- <1>
  1851 00001F47 000000000000000000- <1>
  1851 00001F50 000000000000000000- <1>
  1851 00001F59 000000000000000000- <1>
  1851 00001F62 000000000000000000- <1>
  1851 00001F6B 000000000000000000- <1>
  1851 00001F74 000000000000000000- <1>
  1851 00001F7D 000000000000000000- <1>
  1851 00001F86 000000000000000000- <1>
  1851 00001F8F 000000000000000000- <1>
  1851 00001F98 000000000000000000- <1>
  1851 00001FA1 000000000000000000- <1>
  1851 00001FAA 000000000000000000- <1>
  1851 00001FB3 000000000000000000- <1>
  1851 00001FBC 000000000000000000- <1>
  1851 00001FC5 000000000000000000- <1>
  1851 00001FCE 000000000000000000- <1>
  1851 00001FD7 000000000000000000- <1>
  1851 00001FE0 000000000000000000- <1>
  1851 00001FE9 000000000000000000- <1>
  1851 00001FF2 000000000000000000- <1>
  1851 00001FFB 000000000000000000- <1>
  1851 00002004 000000000000000000- <1>
  1851 0000200D 000000000000000000- <1>
  1851 00002016 000000000000000000- <1>
  1851 0000201F 000000000000000000- <1>
  1851 00002028 000000000000000000- <1>
  1851 00002031 000000000000000000- <1>
  1851 0000203A 000000000000000000- <1>
  1851 00002043 000000000000000000- <1>
  1851 0000204C 000000000000000000- <1>
  1851 00002055 000000000000000000- <1>
  1851 0000205E 000000000000000000- <1>
  1851 00002067 000000000000000000- <1>
  1851 00002070 000000000000000000- <1>
  1851 00002079 000000000000000000- <1>
  1851 00002082 000000000000000000- <1>
  1851 0000208B 000000000000000000- <1>
  1851 00002094 000000000000000000- <1>
  1851 0000209D 000000000000000000- <1>
  1851 000020A6 000000000000000000- <1>
  1851 000020AF 000000000000000000- <1>
  1851 000020B8 000000000000000000- <1>
  1851 000020C1 000000000000000000- <1>
  1851 000020CA 000000000000000000- <1>
  1851 000020D3 000000000000000000- <1>
  1851 000020DC 000000000000000000- <1>
  1851 000020E5 000000000000000000- <1>
  1851 000020EE 000000000000000000- <1>
  1851 000020F7 000000000000000000- <1>
  1851 00002100 000000000000000000- <1>
  1851 00002109 000000000000000000- <1>
  1851 00002112 000000000000000000- <1>
  1851 0000211B 000000000000000000- <1>
  1851 00002124 000000000000000000- <1>
  1851 0000212D 000000000000000000- <1>
  1851 00002136 000000000000000000- <1>
  1851 0000213F 000000000000000000- <1>
  1851 00002148 000000000000000000- <1>
  1851 00002151 000000000000000000- <1>
  1851 0000215A 000000000000000000- <1>
  1851 00002163 000000000000000000- <1>
  1851 0000216C 000000000000000000- <1>
  1851 00002175 000000000000000000- <1>
  1851 0000217E 000000000000000000- <1>
  1851 00002187 000000000000000000- <1>
  1851 00002190 000000000000000000- <1>
  1851 00002199 000000000000000000- <1>
  1851 000021A2 000000000000000000- <1>
  1851 000021AB 000000000000000000- <1>
  1851 000021B4 000000000000000000- <1>
  1851 000021BD 000000000000000000- <1>
  1851 000021C6 000000000000000000- <1>
  1851 000021CF 000000000000000000- <1>
  1851 000021D8 000000000000000000- <1>
  1851 000021E1 000000000000000000- <1>
  1851 000021EA 000000000000000000- <1>
  1851 000021F3 000000000000000000- <1>
  1851 000021FC 000000000000000000- <1>
  1851 00002205 000000000000000000- <1>
  1851 0000220E 000000000000000000- <1>
  1851 00002217 000000000000000000- <1>
  1851 00002220 000000000000000000- <1>
  1851 00002229 000000000000000000- <1>
  1851 00002232 000000000000000000- <1>
  1851 0000223B 000000000000000000- <1>
  1851 00002244 000000000000000000- <1>
  1851 0000224D 000000000000000000- <1>
  1851 00002256 000000000000000000- <1>
  1851 0000225F 000000000000000000- <1>
  1851 00002268 000000000000000000- <1>
  1851 00002271 000000000000000000- <1>
  1851 0000227A 000000000000000000- <1>
  1851 00002283 000000000000000000- <1>
  1851 0000228C 000000000000000000- <1>
  1851 00002295 000000000000000000- <1>
  1851 0000229E 000000000000000000- <1>
  1851 000022A7 000000000000000000- <1>
  1851 000022B0 000000000000000000- <1>
  1851 000022B9 000000000000000000- <1>
  1851 000022C2 000000000000000000- <1>
  1851 000022CB 000000000000000000- <1>
  1851 000022D4 000000000000000000- <1>
  1851 000022DD 000000000000000000- <1>
  1851 000022E6 000000000000000000- <1>
  1851 000022EF 000000000000000000- <1>
  1851 000022F8 000000000000000000- <1>
  1851 00002301 000000000000000000- <1>
  1851 0000230A 000000000000000000- <1>
  1851 00002313 000000000000000000- <1>
  1851 0000231C 000000000000000000- <1>
  1851 00002325 000000000000000000- <1>
  1851 0000232E 000000000000000000- <1>
  1851 00002337 000000000000000000- <1>
  1851 00002340 000000000000000000- <1>
  1851 00002349 000000000000000000- <1>
  1851 00002352 000000000000000000- <1>
  1851 0000235B 000000000000000000- <1>
  1851 00002364 000000000000000000- <1>
  1851 0000236D 000000000000000000- <1>
  1851 00002376 000000000000000000- <1>
  1851 0000237F 000000000000000000- <1>
  1851 00002388 000000000000000000- <1>
  1851 00002391 000000000000000000- <1>
  1851 0000239A 000000000000000000- <1>
  1851 000023A3 00                  <1>
  1852                              <1> 
  1853                              <1> .drvBpbTbl:
  1854                              <1> ;Table of BPBs from FAh-FFh
  1855                              <1>     istruc bpb
  1856 000023A4 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1857 000023A6 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1858 000023A7 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1859 000023A9 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1860 000023AA 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1861 000023AC 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  1862 000023AE FA                  <1>         at .media,      db 0FAh ;Media descriptor byte
  1863 000023AF 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  1864 000023B1 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1865 000023B3 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  1866 000023B5 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1867 000023B9 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1868                              <1>     iend
  1869                              <1>     istruc bpb
  1870 000023BD 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1871 000023BF 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1872 000023C0 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1873 000023C2 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1874 000023C3 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1875 000023C5 0005                <1>         at .totSec16,   dw 1280 ;Number of sectors on medium
  1876 000023C7 FB                  <1>         at .media,      db 0FBh ;Media descriptor byte
  1877 000023C8 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  1878 000023CA 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1879 000023CC 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1880 000023CE 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1881 000023D2 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1882                              <1>     iend
  1883                              <1>     istruc bpb
  1884 000023D6 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1885 000023D8 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1886 000023D9 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1887 000023DB 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1888 000023DC 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  1889 000023DE 6801                <1>         at .totSec16,   dw 360  ;Number of sectors on medium
  1890 000023E0 FC                  <1>         at .media,      db 0FCh ;Media descriptor byte
  1891 000023E1 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  1892 000023E3 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  1893 000023E5 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  1894 000023E7 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1895 000023EB 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1896                              <1>     iend
  1897                              <1>     istruc bpb
  1898 000023EF 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1899 000023F1 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1900 000023F2 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1901 000023F4 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1902 000023F5 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1903 000023F7 D002                <1>         at .totSec16,   dw 720  ;Number of sectors on medium
  1904 000023F9 FD                  <1>         at .media,      db 0FDh ;Media descriptor byte
  1905 000023FA 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  1906 000023FC 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  1907 000023FE 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1908 00002400 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1909 00002404 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1910                              <1>     iend
  1911                              <1>     istruc bpb
  1912 00002408 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1913 0000240A 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1914 0000240B 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1915 0000240D 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1916 0000240E 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  1917 00002410 4001                <1>         at .totSec16,   dw 320  ;Number of sectors on medium
  1918 00002412 FE                  <1>         at .media,      db 0FEh ;Media descriptor byte
  1919 00002413 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  1920 00002415 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1921 00002417 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  1922 00002419 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1923 0000241D 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1924                              <1>     iend
  1925                              <1>     istruc bpb
  1926 00002421 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1927 00002423 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1928 00002424 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1929 00002426 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1930 00002427 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1931 00002429 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  1932 0000242B FF                  <1>         at .media,      db 0FFh ;Media descriptor byte
  1933 0000242C 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  1934 0000242E 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1935 00002430 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1936 00002432 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1937 00002436 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1938                              <1>     iend
  1939                              <1> .drvBpbTblF9:
  1940                              <1> ;Contains the special F9 BPBs
  1941                              <1>     istruc bpb  ;720Kb 3.5" floppies
  1942 0000243A 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1943 0000243C 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1944 0000243D 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1945 0000243F 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1946 00002440 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1947 00002442 A005                <1>         at .totSec16,   dw 1440 ;Number of sectors on medium
  1948 00002444 F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  1949 00002445 0300                <1>         at .FATsz16,    dw 3    ;Number of sectors per FAT
  1950 00002447 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  1951 00002449 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1952 0000244B 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1953 0000244F 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1954                              <1>     iend
  1955                              <1>     istruc bpb  ;1.2Mb 5.25" floppies
  1956 00002453 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1957 00002455 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1958 00002456 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1959 00002458 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1960 00002459 E000                <1>         at .rootEntCnt, dw 224  ;Number of 32 byte entries in Root directory
  1961 0000245B 6009                <1>         at .totSec16,   dw 2400 ;Number of sectors on medium
  1962 0000245D F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  1963 0000245E 0700                <1>         at .FATsz16,    dw 7    ;Number of sectors per FAT
  1964 00002460 0F00                <1>         at .secPerTrk,  dw 15   ;Number of sectors per "track"
  1965 00002462 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1966 00002464 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1967 00002468 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1968                              <1>     iend
  1969                              <1> 
  1970                              <1> .drvBlkTbl:
  1971                              <1> ;All drives start with Sectors/Cluster as -1 to indicate not initialised.
  1972                              <1> ;All drives start with Media Descripter as 0 (invalid type)
  1973                              <1> ;All drives start with dAccTime at -1 to force "uncertain" read for remdevs
  1974                              <1> ;All drives present 63 Cylinders (only valid as a field on fixed disks)
  1975                              <1> ;All drives have as an alt BPB, a 1.44Mb 3.5" Floppy.
  1976                              <1>     %assign i 0
  1977                              <1>     %rep drvBlkTblL
  1978                              <1>     istruc drvBlk
  1979                              <1>         at .pLink,      dq -1   ;End of table marker
  1980                              <1>         at .bBIOSNum,   db i    ;DOS drive number
  1981                              <1>         at .bDOSNum,    db i    ;BIOS drives default to removable
  1982                              <1> ;Do a FAT12/16 BPB in FAT32 format
  1983                              <1>         at .wBpS,       dw 200h
  1984                              <1>         at .bSpC,       db -1       
  1985                              <1>         at .wResC,      dw 0001h
  1986                              <1>         at .bNumFAT,    db 02h
  1987                              <1>         at .wRtCntNum,  dw 00E0h    
  1988                              <1>         at .wTotSec16,  dw 0B40h    
  1989                              <1>         at .bMedDesc,   db 00h    
  1990                              <1>         at .wFATsz16,   dw 0009h    
  1991                              <1>         at .wSecPerTrk, dw 0012h    
  1992                              <1>         at .wNumHeads,  dw 0002h    
  1993                              <1>         at .dHiddSec,   dd 0    
  1994                              <1>         at .dTotSec32,  dd 0     
  1995                              <1> ;FAT 32 fields. All zeros
  1996                              <1>         at .FATsz32,    dd 0
  1997                              <1>         at .extFlags,   dw 0
  1998                              <1>         at .FSver,      dw 0
  1999                              <1>         at .RootClus,   dd 0
  2000                              <1>         at .FSinfo,     dw 0
  2001                              <1>         at .BkBootSec,  dw 0
  2002                              <1> ;DrvBlk Flags
  2003                              <1>         at .bBpbType,   db bpbFat12
  2004                              <1>         at .wOpenCnt,   dw 0
  2005                              <1>         at .bDevType,   db typeGenRem   ;Init to generic removable device
  2006                              <1>         at .wDevFlgs,   dw 0
  2007                              <1>         at .wNumCyl,    dw 63   
  2008                              <1>         istruc bpb32
  2009                              <1>             at .bytsPerSec, dw 200h
  2010                              <1>             at .secPerClus, db 01h
  2011                              <1>             at .revdSecCnt, dw 0001h
  2012                              <1>             at .numFATs,    db 02h    
  2013                              <1>             at .rootEntCnt, dw 00E0h    
  2014                              <1>             at .totSec16,   dw 0B40h    
  2015                              <1>             at .media,      db 0F0h    
  2016                              <1>             at .FATsz16,    dw 0009h    
  2017                              <1>             at .secPerTrk,  dw 0012h    
  2018                              <1>             at .numHeads,   dw 0002h    
  2019                              <1>             at .hiddSec,    dd 0    
  2020                              <1>             at .totSec32,   dd 0     
  2021                              <1>             at .FATsz32,    dd 0
  2022                              <1>             at .extFlags,   dw 0
  2023                              <1>             at .FSver,      dw 0
  2024                              <1>             at .RootClus,   dd 0
  2025                              <1>             at .FSinfo,     dw 0
  2026                              <1>             at .BkBootSec,  dw 0
  2027                              <1>             at .reserved,   db 12 dup (0) 
  2028                              <1>         iend
  2029                              <1>         at .dAccTime,   dd -1 
  2030                              <1>         at .volLab,     db "NO NAME    ",0
  2031                              <1>         at .volId,      dd 0    ;Vol ID of 0
  2032                              <1>         at .filSysType, db "FAT12   ",0
  2033                              <1>     iend
  2034                              <1>         %assign i i+1
  2035                              <1>     %endrep
  1978                              <2>  istruc drvBlk
  1979 0000246C FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002474 00                  <2>  at .bBIOSNum, db i
  1981 00002475 00                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002476 0002                <2>  at .wBpS, dw 200h
  1984 00002478 FF                  <2>  at .bSpC, db -1
  1985 00002479 0100                <2>  at .wResC, dw 0001h
  1986 0000247B 02                  <2>  at .bNumFAT, db 02h
  1987 0000247C E000                <2>  at .wRtCntNum, dw 00E0h
  1988 0000247E 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002480 00                  <2>  at .bMedDesc, db 00h
  1990 00002481 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002483 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002485 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002487 00000000            <2>  at .dHiddSec, dd 0
  1994 0000248B 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 0000248F 00000000            <2>  at .FATsz32, dd 0
  1997 00002493 0000                <2>  at .extFlags, dw 0
  1998 00002495 0000                <2>  at .FSver, dw 0
  1999 00002497 00000000            <2>  at .RootClus, dd 0
  2000 0000249B 0000                <2>  at .FSinfo, dw 0
  2001 0000249D 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 0000249F 10                  <2>  at .bBpbType, db bpbFat12
  2004 000024A0 0000                <2>  at .wOpenCnt, dw 0
  2005 000024A2 07                  <2>  at .bDevType, db typeGenRem
  2006 000024A3 0000                <2>  at .wDevFlgs, dw 0
  2007 000024A5 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 000024A7 0002                <2>  at .bytsPerSec, dw 200h
  2010 000024A9 01                  <2>  at .secPerClus, db 01h
  2011 000024AA 0100                <2>  at .revdSecCnt, dw 0001h
  2012 000024AC 02                  <2>  at .numFATs, db 02h
  2013 000024AD E000                <2>  at .rootEntCnt, dw 00E0h
  2014 000024AF 400B                <2>  at .totSec16, dw 0B40h
  2015 000024B1 F0                  <2>  at .media, db 0F0h
  2016 000024B2 0900                <2>  at .FATsz16, dw 0009h
  2017 000024B4 1200                <2>  at .secPerTrk, dw 0012h
  2018 000024B6 0200                <2>  at .numHeads, dw 0002h
  2019 000024B8 00000000            <2>  at .hiddSec, dd 0
  2020 000024BC 00000000            <2>  at .totSec32, dd 0
  2021 000024C0 00000000            <2>  at .FATsz32, dd 0
  2022 000024C4 0000                <2>  at .extFlags, dw 0
  2023 000024C6 0000                <2>  at .FSver, dw 0
  2024 000024C8 00000000            <2>  at .RootClus, dd 0
  2025 000024CC 0000                <2>  at .FSinfo, dw 0
  2026 000024CE 0000                <2>  at .BkBootSec, dw 0
  2027 000024D0 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 000024D9 000000              <2>
  2028                              <2>  iend
  2029 000024DC FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 000024E0 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 000024E9 202000              <2>
  2031 000024EC 00000000            <2>  at .volId, dd 0
  2032 000024F0 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 000024F9 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002501 01                  <2>  at .bBIOSNum, db i
  1981 00002502 01                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002503 0002                <2>  at .wBpS, dw 200h
  1984 00002505 FF                  <2>  at .bSpC, db -1
  1985 00002506 0100                <2>  at .wResC, dw 0001h
  1986 00002508 02                  <2>  at .bNumFAT, db 02h
  1987 00002509 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 0000250B 400B                <2>  at .wTotSec16, dw 0B40h
  1989 0000250D 00                  <2>  at .bMedDesc, db 00h
  1990 0000250E 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002510 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002512 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002514 00000000            <2>  at .dHiddSec, dd 0
  1994 00002518 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 0000251C 00000000            <2>  at .FATsz32, dd 0
  1997 00002520 0000                <2>  at .extFlags, dw 0
  1998 00002522 0000                <2>  at .FSver, dw 0
  1999 00002524 00000000            <2>  at .RootClus, dd 0
  2000 00002528 0000                <2>  at .FSinfo, dw 0
  2001 0000252A 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 0000252C 10                  <2>  at .bBpbType, db bpbFat12
  2004 0000252D 0000                <2>  at .wOpenCnt, dw 0
  2005 0000252F 07                  <2>  at .bDevType, db typeGenRem
  2006 00002530 0000                <2>  at .wDevFlgs, dw 0
  2007 00002532 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002534 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002536 01                  <2>  at .secPerClus, db 01h
  2011 00002537 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002539 02                  <2>  at .numFATs, db 02h
  2013 0000253A E000                <2>  at .rootEntCnt, dw 00E0h
  2014 0000253C 400B                <2>  at .totSec16, dw 0B40h
  2015 0000253E F0                  <2>  at .media, db 0F0h
  2016 0000253F 0900                <2>  at .FATsz16, dw 0009h
  2017 00002541 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002543 0200                <2>  at .numHeads, dw 0002h
  2019 00002545 00000000            <2>  at .hiddSec, dd 0
  2020 00002549 00000000            <2>  at .totSec32, dd 0
  2021 0000254D 00000000            <2>  at .FATsz32, dd 0
  2022 00002551 0000                <2>  at .extFlags, dw 0
  2023 00002553 0000                <2>  at .FSver, dw 0
  2024 00002555 00000000            <2>  at .RootClus, dd 0
  2025 00002559 0000                <2>  at .FSinfo, dw 0
  2026 0000255B 0000                <2>  at .BkBootSec, dw 0
  2027 0000255D 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002566 000000              <2>
  2028                              <2>  iend
  2029 00002569 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 0000256D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002576 202000              <2>
  2031 00002579 00000000            <2>  at .volId, dd 0
  2032 0000257D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002586 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 0000258E 02                  <2>  at .bBIOSNum, db i
  1981 0000258F 02                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002590 0002                <2>  at .wBpS, dw 200h
  1984 00002592 FF                  <2>  at .bSpC, db -1
  1985 00002593 0100                <2>  at .wResC, dw 0001h
  1986 00002595 02                  <2>  at .bNumFAT, db 02h
  1987 00002596 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002598 400B                <2>  at .wTotSec16, dw 0B40h
  1989 0000259A 00                  <2>  at .bMedDesc, db 00h
  1990 0000259B 0900                <2>  at .wFATsz16, dw 0009h
  1991 0000259D 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 0000259F 0200                <2>  at .wNumHeads, dw 0002h
  1993 000025A1 00000000            <2>  at .dHiddSec, dd 0
  1994 000025A5 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 000025A9 00000000            <2>  at .FATsz32, dd 0
  1997 000025AD 0000                <2>  at .extFlags, dw 0
  1998 000025AF 0000                <2>  at .FSver, dw 0
  1999 000025B1 00000000            <2>  at .RootClus, dd 0
  2000 000025B5 0000                <2>  at .FSinfo, dw 0
  2001 000025B7 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 000025B9 10                  <2>  at .bBpbType, db bpbFat12
  2004 000025BA 0000                <2>  at .wOpenCnt, dw 0
  2005 000025BC 07                  <2>  at .bDevType, db typeGenRem
  2006 000025BD 0000                <2>  at .wDevFlgs, dw 0
  2007 000025BF 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 000025C1 0002                <2>  at .bytsPerSec, dw 200h
  2010 000025C3 01                  <2>  at .secPerClus, db 01h
  2011 000025C4 0100                <2>  at .revdSecCnt, dw 0001h
  2012 000025C6 02                  <2>  at .numFATs, db 02h
  2013 000025C7 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 000025C9 400B                <2>  at .totSec16, dw 0B40h
  2015 000025CB F0                  <2>  at .media, db 0F0h
  2016 000025CC 0900                <2>  at .FATsz16, dw 0009h
  2017 000025CE 1200                <2>  at .secPerTrk, dw 0012h
  2018 000025D0 0200                <2>  at .numHeads, dw 0002h
  2019 000025D2 00000000            <2>  at .hiddSec, dd 0
  2020 000025D6 00000000            <2>  at .totSec32, dd 0
  2021 000025DA 00000000            <2>  at .FATsz32, dd 0
  2022 000025DE 0000                <2>  at .extFlags, dw 0
  2023 000025E0 0000                <2>  at .FSver, dw 0
  2024 000025E2 00000000            <2>  at .RootClus, dd 0
  2025 000025E6 0000                <2>  at .FSinfo, dw 0
  2026 000025E8 0000                <2>  at .BkBootSec, dw 0
  2027 000025EA 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 000025F3 000000              <2>
  2028                              <2>  iend
  2029 000025F6 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 000025FA 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002603 202000              <2>
  2031 00002606 00000000            <2>  at .volId, dd 0
  2032 0000260A 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002613 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 0000261B 03                  <2>  at .bBIOSNum, db i
  1981 0000261C 03                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 0000261D 0002                <2>  at .wBpS, dw 200h
  1984 0000261F FF                  <2>  at .bSpC, db -1
  1985 00002620 0100                <2>  at .wResC, dw 0001h
  1986 00002622 02                  <2>  at .bNumFAT, db 02h
  1987 00002623 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002625 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002627 00                  <2>  at .bMedDesc, db 00h
  1990 00002628 0900                <2>  at .wFATsz16, dw 0009h
  1991 0000262A 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 0000262C 0200                <2>  at .wNumHeads, dw 0002h
  1993 0000262E 00000000            <2>  at .dHiddSec, dd 0
  1994 00002632 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002636 00000000            <2>  at .FATsz32, dd 0
  1997 0000263A 0000                <2>  at .extFlags, dw 0
  1998 0000263C 0000                <2>  at .FSver, dw 0
  1999 0000263E 00000000            <2>  at .RootClus, dd 0
  2000 00002642 0000                <2>  at .FSinfo, dw 0
  2001 00002644 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002646 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002647 0000                <2>  at .wOpenCnt, dw 0
  2005 00002649 07                  <2>  at .bDevType, db typeGenRem
  2006 0000264A 0000                <2>  at .wDevFlgs, dw 0
  2007 0000264C 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 0000264E 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002650 01                  <2>  at .secPerClus, db 01h
  2011 00002651 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002653 02                  <2>  at .numFATs, db 02h
  2013 00002654 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002656 400B                <2>  at .totSec16, dw 0B40h
  2015 00002658 F0                  <2>  at .media, db 0F0h
  2016 00002659 0900                <2>  at .FATsz16, dw 0009h
  2017 0000265B 1200                <2>  at .secPerTrk, dw 0012h
  2018 0000265D 0200                <2>  at .numHeads, dw 0002h
  2019 0000265F 00000000            <2>  at .hiddSec, dd 0
  2020 00002663 00000000            <2>  at .totSec32, dd 0
  2021 00002667 00000000            <2>  at .FATsz32, dd 0
  2022 0000266B 0000                <2>  at .extFlags, dw 0
  2023 0000266D 0000                <2>  at .FSver, dw 0
  2024 0000266F 00000000            <2>  at .RootClus, dd 0
  2025 00002673 0000                <2>  at .FSinfo, dw 0
  2026 00002675 0000                <2>  at .BkBootSec, dw 0
  2027 00002677 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002680 000000              <2>
  2028                              <2>  iend
  2029 00002683 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002687 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002690 202000              <2>
  2031 00002693 00000000            <2>  at .volId, dd 0
  2032 00002697 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 000026A0 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 000026A8 04                  <2>  at .bBIOSNum, db i
  1981 000026A9 04                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 000026AA 0002                <2>  at .wBpS, dw 200h
  1984 000026AC FF                  <2>  at .bSpC, db -1
  1985 000026AD 0100                <2>  at .wResC, dw 0001h
  1986 000026AF 02                  <2>  at .bNumFAT, db 02h
  1987 000026B0 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 000026B2 400B                <2>  at .wTotSec16, dw 0B40h
  1989 000026B4 00                  <2>  at .bMedDesc, db 00h
  1990 000026B5 0900                <2>  at .wFATsz16, dw 0009h
  1991 000026B7 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 000026B9 0200                <2>  at .wNumHeads, dw 0002h
  1993 000026BB 00000000            <2>  at .dHiddSec, dd 0
  1994 000026BF 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 000026C3 00000000            <2>  at .FATsz32, dd 0
  1997 000026C7 0000                <2>  at .extFlags, dw 0
  1998 000026C9 0000                <2>  at .FSver, dw 0
  1999 000026CB 00000000            <2>  at .RootClus, dd 0
  2000 000026CF 0000                <2>  at .FSinfo, dw 0
  2001 000026D1 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 000026D3 10                  <2>  at .bBpbType, db bpbFat12
  2004 000026D4 0000                <2>  at .wOpenCnt, dw 0
  2005 000026D6 07                  <2>  at .bDevType, db typeGenRem
  2006 000026D7 0000                <2>  at .wDevFlgs, dw 0
  2007 000026D9 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 000026DB 0002                <2>  at .bytsPerSec, dw 200h
  2010 000026DD 01                  <2>  at .secPerClus, db 01h
  2011 000026DE 0100                <2>  at .revdSecCnt, dw 0001h
  2012 000026E0 02                  <2>  at .numFATs, db 02h
  2013 000026E1 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 000026E3 400B                <2>  at .totSec16, dw 0B40h
  2015 000026E5 F0                  <2>  at .media, db 0F0h
  2016 000026E6 0900                <2>  at .FATsz16, dw 0009h
  2017 000026E8 1200                <2>  at .secPerTrk, dw 0012h
  2018 000026EA 0200                <2>  at .numHeads, dw 0002h
  2019 000026EC 00000000            <2>  at .hiddSec, dd 0
  2020 000026F0 00000000            <2>  at .totSec32, dd 0
  2021 000026F4 00000000            <2>  at .FATsz32, dd 0
  2022 000026F8 0000                <2>  at .extFlags, dw 0
  2023 000026FA 0000                <2>  at .FSver, dw 0
  2024 000026FC 00000000            <2>  at .RootClus, dd 0
  2025 00002700 0000                <2>  at .FSinfo, dw 0
  2026 00002702 0000                <2>  at .BkBootSec, dw 0
  2027 00002704 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 0000270D 000000              <2>
  2028                              <2>  iend
  2029 00002710 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002714 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 0000271D 202000              <2>
  2031 00002720 00000000            <2>  at .volId, dd 0
  2032 00002724 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 0000272D FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002735 05                  <2>  at .bBIOSNum, db i
  1981 00002736 05                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002737 0002                <2>  at .wBpS, dw 200h
  1984 00002739 FF                  <2>  at .bSpC, db -1
  1985 0000273A 0100                <2>  at .wResC, dw 0001h
  1986 0000273C 02                  <2>  at .bNumFAT, db 02h
  1987 0000273D E000                <2>  at .wRtCntNum, dw 00E0h
  1988 0000273F 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002741 00                  <2>  at .bMedDesc, db 00h
  1990 00002742 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002744 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002746 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002748 00000000            <2>  at .dHiddSec, dd 0
  1994 0000274C 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002750 00000000            <2>  at .FATsz32, dd 0
  1997 00002754 0000                <2>  at .extFlags, dw 0
  1998 00002756 0000                <2>  at .FSver, dw 0
  1999 00002758 00000000            <2>  at .RootClus, dd 0
  2000 0000275C 0000                <2>  at .FSinfo, dw 0
  2001 0000275E 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002760 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002761 0000                <2>  at .wOpenCnt, dw 0
  2005 00002763 07                  <2>  at .bDevType, db typeGenRem
  2006 00002764 0000                <2>  at .wDevFlgs, dw 0
  2007 00002766 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002768 0002                <2>  at .bytsPerSec, dw 200h
  2010 0000276A 01                  <2>  at .secPerClus, db 01h
  2011 0000276B 0100                <2>  at .revdSecCnt, dw 0001h
  2012 0000276D 02                  <2>  at .numFATs, db 02h
  2013 0000276E E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002770 400B                <2>  at .totSec16, dw 0B40h
  2015 00002772 F0                  <2>  at .media, db 0F0h
  2016 00002773 0900                <2>  at .FATsz16, dw 0009h
  2017 00002775 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002777 0200                <2>  at .numHeads, dw 0002h
  2019 00002779 00000000            <2>  at .hiddSec, dd 0
  2020 0000277D 00000000            <2>  at .totSec32, dd 0
  2021 00002781 00000000            <2>  at .FATsz32, dd 0
  2022 00002785 0000                <2>  at .extFlags, dw 0
  2023 00002787 0000                <2>  at .FSver, dw 0
  2024 00002789 00000000            <2>  at .RootClus, dd 0
  2025 0000278D 0000                <2>  at .FSinfo, dw 0
  2026 0000278F 0000                <2>  at .BkBootSec, dw 0
  2027 00002791 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 0000279A 000000              <2>
  2028                              <2>  iend
  2029 0000279D FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 000027A1 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 000027AA 202000              <2>
  2031 000027AD 00000000            <2>  at .volId, dd 0
  2032 000027B1 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 000027BA FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 000027C2 06                  <2>  at .bBIOSNum, db i
  1981 000027C3 06                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 000027C4 0002                <2>  at .wBpS, dw 200h
  1984 000027C6 FF                  <2>  at .bSpC, db -1
  1985 000027C7 0100                <2>  at .wResC, dw 0001h
  1986 000027C9 02                  <2>  at .bNumFAT, db 02h
  1987 000027CA E000                <2>  at .wRtCntNum, dw 00E0h
  1988 000027CC 400B                <2>  at .wTotSec16, dw 0B40h
  1989 000027CE 00                  <2>  at .bMedDesc, db 00h
  1990 000027CF 0900                <2>  at .wFATsz16, dw 0009h
  1991 000027D1 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 000027D3 0200                <2>  at .wNumHeads, dw 0002h
  1993 000027D5 00000000            <2>  at .dHiddSec, dd 0
  1994 000027D9 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 000027DD 00000000            <2>  at .FATsz32, dd 0
  1997 000027E1 0000                <2>  at .extFlags, dw 0
  1998 000027E3 0000                <2>  at .FSver, dw 0
  1999 000027E5 00000000            <2>  at .RootClus, dd 0
  2000 000027E9 0000                <2>  at .FSinfo, dw 0
  2001 000027EB 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 000027ED 10                  <2>  at .bBpbType, db bpbFat12
  2004 000027EE 0000                <2>  at .wOpenCnt, dw 0
  2005 000027F0 07                  <2>  at .bDevType, db typeGenRem
  2006 000027F1 0000                <2>  at .wDevFlgs, dw 0
  2007 000027F3 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 000027F5 0002                <2>  at .bytsPerSec, dw 200h
  2010 000027F7 01                  <2>  at .secPerClus, db 01h
  2011 000027F8 0100                <2>  at .revdSecCnt, dw 0001h
  2012 000027FA 02                  <2>  at .numFATs, db 02h
  2013 000027FB E000                <2>  at .rootEntCnt, dw 00E0h
  2014 000027FD 400B                <2>  at .totSec16, dw 0B40h
  2015 000027FF F0                  <2>  at .media, db 0F0h
  2016 00002800 0900                <2>  at .FATsz16, dw 0009h
  2017 00002802 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002804 0200                <2>  at .numHeads, dw 0002h
  2019 00002806 00000000            <2>  at .hiddSec, dd 0
  2020 0000280A 00000000            <2>  at .totSec32, dd 0
  2021 0000280E 00000000            <2>  at .FATsz32, dd 0
  2022 00002812 0000                <2>  at .extFlags, dw 0
  2023 00002814 0000                <2>  at .FSver, dw 0
  2024 00002816 00000000            <2>  at .RootClus, dd 0
  2025 0000281A 0000                <2>  at .FSinfo, dw 0
  2026 0000281C 0000                <2>  at .BkBootSec, dw 0
  2027 0000281E 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002827 000000              <2>
  2028                              <2>  iend
  2029 0000282A FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 0000282E 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002837 202000              <2>
  2031 0000283A 00000000            <2>  at .volId, dd 0
  2032 0000283E 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002847 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 0000284F 07                  <2>  at .bBIOSNum, db i
  1981 00002850 07                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002851 0002                <2>  at .wBpS, dw 200h
  1984 00002853 FF                  <2>  at .bSpC, db -1
  1985 00002854 0100                <2>  at .wResC, dw 0001h
  1986 00002856 02                  <2>  at .bNumFAT, db 02h
  1987 00002857 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002859 400B                <2>  at .wTotSec16, dw 0B40h
  1989 0000285B 00                  <2>  at .bMedDesc, db 00h
  1990 0000285C 0900                <2>  at .wFATsz16, dw 0009h
  1991 0000285E 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002860 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002862 00000000            <2>  at .dHiddSec, dd 0
  1994 00002866 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 0000286A 00000000            <2>  at .FATsz32, dd 0
  1997 0000286E 0000                <2>  at .extFlags, dw 0
  1998 00002870 0000                <2>  at .FSver, dw 0
  1999 00002872 00000000            <2>  at .RootClus, dd 0
  2000 00002876 0000                <2>  at .FSinfo, dw 0
  2001 00002878 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 0000287A 10                  <2>  at .bBpbType, db bpbFat12
  2004 0000287B 0000                <2>  at .wOpenCnt, dw 0
  2005 0000287D 07                  <2>  at .bDevType, db typeGenRem
  2006 0000287E 0000                <2>  at .wDevFlgs, dw 0
  2007 00002880 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002882 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002884 01                  <2>  at .secPerClus, db 01h
  2011 00002885 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002887 02                  <2>  at .numFATs, db 02h
  2013 00002888 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 0000288A 400B                <2>  at .totSec16, dw 0B40h
  2015 0000288C F0                  <2>  at .media, db 0F0h
  2016 0000288D 0900                <2>  at .FATsz16, dw 0009h
  2017 0000288F 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002891 0200                <2>  at .numHeads, dw 0002h
  2019 00002893 00000000            <2>  at .hiddSec, dd 0
  2020 00002897 00000000            <2>  at .totSec32, dd 0
  2021 0000289B 00000000            <2>  at .FATsz32, dd 0
  2022 0000289F 0000                <2>  at .extFlags, dw 0
  2023 000028A1 0000                <2>  at .FSver, dw 0
  2024 000028A3 00000000            <2>  at .RootClus, dd 0
  2025 000028A7 0000                <2>  at .FSinfo, dw 0
  2026 000028A9 0000                <2>  at .BkBootSec, dw 0
  2027 000028AB 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 000028B4 000000              <2>
  2028                              <2>  iend
  2029 000028B7 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 000028BB 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 000028C4 202000              <2>
  2031 000028C7 00000000            <2>  at .volId, dd 0
  2032 000028CB 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 000028D4 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 000028DC 08                  <2>  at .bBIOSNum, db i
  1981 000028DD 08                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 000028DE 0002                <2>  at .wBpS, dw 200h
  1984 000028E0 FF                  <2>  at .bSpC, db -1
  1985 000028E1 0100                <2>  at .wResC, dw 0001h
  1986 000028E3 02                  <2>  at .bNumFAT, db 02h
  1987 000028E4 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 000028E6 400B                <2>  at .wTotSec16, dw 0B40h
  1989 000028E8 00                  <2>  at .bMedDesc, db 00h
  1990 000028E9 0900                <2>  at .wFATsz16, dw 0009h
  1991 000028EB 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 000028ED 0200                <2>  at .wNumHeads, dw 0002h
  1993 000028EF 00000000            <2>  at .dHiddSec, dd 0
  1994 000028F3 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 000028F7 00000000            <2>  at .FATsz32, dd 0
  1997 000028FB 0000                <2>  at .extFlags, dw 0
  1998 000028FD 0000                <2>  at .FSver, dw 0
  1999 000028FF 00000000            <2>  at .RootClus, dd 0
  2000 00002903 0000                <2>  at .FSinfo, dw 0
  2001 00002905 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002907 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002908 0000                <2>  at .wOpenCnt, dw 0
  2005 0000290A 07                  <2>  at .bDevType, db typeGenRem
  2006 0000290B 0000                <2>  at .wDevFlgs, dw 0
  2007 0000290D 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 0000290F 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002911 01                  <2>  at .secPerClus, db 01h
  2011 00002912 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002914 02                  <2>  at .numFATs, db 02h
  2013 00002915 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002917 400B                <2>  at .totSec16, dw 0B40h
  2015 00002919 F0                  <2>  at .media, db 0F0h
  2016 0000291A 0900                <2>  at .FATsz16, dw 0009h
  2017 0000291C 1200                <2>  at .secPerTrk, dw 0012h
  2018 0000291E 0200                <2>  at .numHeads, dw 0002h
  2019 00002920 00000000            <2>  at .hiddSec, dd 0
  2020 00002924 00000000            <2>  at .totSec32, dd 0
  2021 00002928 00000000            <2>  at .FATsz32, dd 0
  2022 0000292C 0000                <2>  at .extFlags, dw 0
  2023 0000292E 0000                <2>  at .FSver, dw 0
  2024 00002930 00000000            <2>  at .RootClus, dd 0
  2025 00002934 0000                <2>  at .FSinfo, dw 0
  2026 00002936 0000                <2>  at .BkBootSec, dw 0
  2027 00002938 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002941 000000              <2>
  2028                              <2>  iend
  2029 00002944 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002948 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002951 202000              <2>
  2031 00002954 00000000            <2>  at .volId, dd 0
  2032 00002958 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002961 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002969 09                  <2>  at .bBIOSNum, db i
  1981 0000296A 09                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 0000296B 0002                <2>  at .wBpS, dw 200h
  1984 0000296D FF                  <2>  at .bSpC, db -1
  1985 0000296E 0100                <2>  at .wResC, dw 0001h
  1986 00002970 02                  <2>  at .bNumFAT, db 02h
  1987 00002971 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002973 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002975 00                  <2>  at .bMedDesc, db 00h
  1990 00002976 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002978 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 0000297A 0200                <2>  at .wNumHeads, dw 0002h
  1993 0000297C 00000000            <2>  at .dHiddSec, dd 0
  1994 00002980 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002984 00000000            <2>  at .FATsz32, dd 0
  1997 00002988 0000                <2>  at .extFlags, dw 0
  1998 0000298A 0000                <2>  at .FSver, dw 0
  1999 0000298C 00000000            <2>  at .RootClus, dd 0
  2000 00002990 0000                <2>  at .FSinfo, dw 0
  2001 00002992 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002994 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002995 0000                <2>  at .wOpenCnt, dw 0
  2005 00002997 07                  <2>  at .bDevType, db typeGenRem
  2006 00002998 0000                <2>  at .wDevFlgs, dw 0
  2007 0000299A 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 0000299C 0002                <2>  at .bytsPerSec, dw 200h
  2010 0000299E 01                  <2>  at .secPerClus, db 01h
  2011 0000299F 0100                <2>  at .revdSecCnt, dw 0001h
  2012 000029A1 02                  <2>  at .numFATs, db 02h
  2013 000029A2 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 000029A4 400B                <2>  at .totSec16, dw 0B40h
  2015 000029A6 F0                  <2>  at .media, db 0F0h
  2016 000029A7 0900                <2>  at .FATsz16, dw 0009h
  2017 000029A9 1200                <2>  at .secPerTrk, dw 0012h
  2018 000029AB 0200                <2>  at .numHeads, dw 0002h
  2019 000029AD 00000000            <2>  at .hiddSec, dd 0
  2020 000029B1 00000000            <2>  at .totSec32, dd 0
  2021 000029B5 00000000            <2>  at .FATsz32, dd 0
  2022 000029B9 0000                <2>  at .extFlags, dw 0
  2023 000029BB 0000                <2>  at .FSver, dw 0
  2024 000029BD 00000000            <2>  at .RootClus, dd 0
  2025 000029C1 0000                <2>  at .FSinfo, dw 0
  2026 000029C3 0000                <2>  at .BkBootSec, dw 0
  2027 000029C5 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 000029CE 000000              <2>
  2028                              <2>  iend
  2029 000029D1 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 000029D5 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 000029DE 202000              <2>
  2031 000029E1 00000000            <2>  at .volId, dd 0
  2032 000029E5 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 000029EE FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 000029F6 0A                  <2>  at .bBIOSNum, db i
  1981 000029F7 0A                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 000029F8 0002                <2>  at .wBpS, dw 200h
  1984 000029FA FF                  <2>  at .bSpC, db -1
  1985 000029FB 0100                <2>  at .wResC, dw 0001h
  1986 000029FD 02                  <2>  at .bNumFAT, db 02h
  1987 000029FE E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002A00 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002A02 00                  <2>  at .bMedDesc, db 00h
  1990 00002A03 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002A05 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002A07 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002A09 00000000            <2>  at .dHiddSec, dd 0
  1994 00002A0D 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002A11 00000000            <2>  at .FATsz32, dd 0
  1997 00002A15 0000                <2>  at .extFlags, dw 0
  1998 00002A17 0000                <2>  at .FSver, dw 0
  1999 00002A19 00000000            <2>  at .RootClus, dd 0
  2000 00002A1D 0000                <2>  at .FSinfo, dw 0
  2001 00002A1F 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002A21 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002A22 0000                <2>  at .wOpenCnt, dw 0
  2005 00002A24 07                  <2>  at .bDevType, db typeGenRem
  2006 00002A25 0000                <2>  at .wDevFlgs, dw 0
  2007 00002A27 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002A29 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002A2B 01                  <2>  at .secPerClus, db 01h
  2011 00002A2C 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002A2E 02                  <2>  at .numFATs, db 02h
  2013 00002A2F E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002A31 400B                <2>  at .totSec16, dw 0B40h
  2015 00002A33 F0                  <2>  at .media, db 0F0h
  2016 00002A34 0900                <2>  at .FATsz16, dw 0009h
  2017 00002A36 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002A38 0200                <2>  at .numHeads, dw 0002h
  2019 00002A3A 00000000            <2>  at .hiddSec, dd 0
  2020 00002A3E 00000000            <2>  at .totSec32, dd 0
  2021 00002A42 00000000            <2>  at .FATsz32, dd 0
  2022 00002A46 0000                <2>  at .extFlags, dw 0
  2023 00002A48 0000                <2>  at .FSver, dw 0
  2024 00002A4A 00000000            <2>  at .RootClus, dd 0
  2025 00002A4E 0000                <2>  at .FSinfo, dw 0
  2026 00002A50 0000                <2>  at .BkBootSec, dw 0
  2027 00002A52 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002A5B 000000              <2>
  2028                              <2>  iend
  2029 00002A5E FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002A62 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002A6B 202000              <2>
  2031 00002A6E 00000000            <2>  at .volId, dd 0
  2032 00002A72 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002A7B FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002A83 0B                  <2>  at .bBIOSNum, db i
  1981 00002A84 0B                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002A85 0002                <2>  at .wBpS, dw 200h
  1984 00002A87 FF                  <2>  at .bSpC, db -1
  1985 00002A88 0100                <2>  at .wResC, dw 0001h
  1986 00002A8A 02                  <2>  at .bNumFAT, db 02h
  1987 00002A8B E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002A8D 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002A8F 00                  <2>  at .bMedDesc, db 00h
  1990 00002A90 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002A92 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002A94 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002A96 00000000            <2>  at .dHiddSec, dd 0
  1994 00002A9A 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002A9E 00000000            <2>  at .FATsz32, dd 0
  1997 00002AA2 0000                <2>  at .extFlags, dw 0
  1998 00002AA4 0000                <2>  at .FSver, dw 0
  1999 00002AA6 00000000            <2>  at .RootClus, dd 0
  2000 00002AAA 0000                <2>  at .FSinfo, dw 0
  2001 00002AAC 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002AAE 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002AAF 0000                <2>  at .wOpenCnt, dw 0
  2005 00002AB1 07                  <2>  at .bDevType, db typeGenRem
  2006 00002AB2 0000                <2>  at .wDevFlgs, dw 0
  2007 00002AB4 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002AB6 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002AB8 01                  <2>  at .secPerClus, db 01h
  2011 00002AB9 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002ABB 02                  <2>  at .numFATs, db 02h
  2013 00002ABC E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002ABE 400B                <2>  at .totSec16, dw 0B40h
  2015 00002AC0 F0                  <2>  at .media, db 0F0h
  2016 00002AC1 0900                <2>  at .FATsz16, dw 0009h
  2017 00002AC3 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002AC5 0200                <2>  at .numHeads, dw 0002h
  2019 00002AC7 00000000            <2>  at .hiddSec, dd 0
  2020 00002ACB 00000000            <2>  at .totSec32, dd 0
  2021 00002ACF 00000000            <2>  at .FATsz32, dd 0
  2022 00002AD3 0000                <2>  at .extFlags, dw 0
  2023 00002AD5 0000                <2>  at .FSver, dw 0
  2024 00002AD7 00000000            <2>  at .RootClus, dd 0
  2025 00002ADB 0000                <2>  at .FSinfo, dw 0
  2026 00002ADD 0000                <2>  at .BkBootSec, dw 0
  2027 00002ADF 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002AE8 000000              <2>
  2028                              <2>  iend
  2029 00002AEB FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002AEF 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002AF8 202000              <2>
  2031 00002AFB 00000000            <2>  at .volId, dd 0
  2032 00002AFF 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002B08 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002B10 0C                  <2>  at .bBIOSNum, db i
  1981 00002B11 0C                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002B12 0002                <2>  at .wBpS, dw 200h
  1984 00002B14 FF                  <2>  at .bSpC, db -1
  1985 00002B15 0100                <2>  at .wResC, dw 0001h
  1986 00002B17 02                  <2>  at .bNumFAT, db 02h
  1987 00002B18 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002B1A 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002B1C 00                  <2>  at .bMedDesc, db 00h
  1990 00002B1D 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002B1F 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002B21 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002B23 00000000            <2>  at .dHiddSec, dd 0
  1994 00002B27 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002B2B 00000000            <2>  at .FATsz32, dd 0
  1997 00002B2F 0000                <2>  at .extFlags, dw 0
  1998 00002B31 0000                <2>  at .FSver, dw 0
  1999 00002B33 00000000            <2>  at .RootClus, dd 0
  2000 00002B37 0000                <2>  at .FSinfo, dw 0
  2001 00002B39 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002B3B 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002B3C 0000                <2>  at .wOpenCnt, dw 0
  2005 00002B3E 07                  <2>  at .bDevType, db typeGenRem
  2006 00002B3F 0000                <2>  at .wDevFlgs, dw 0
  2007 00002B41 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002B43 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002B45 01                  <2>  at .secPerClus, db 01h
  2011 00002B46 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002B48 02                  <2>  at .numFATs, db 02h
  2013 00002B49 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002B4B 400B                <2>  at .totSec16, dw 0B40h
  2015 00002B4D F0                  <2>  at .media, db 0F0h
  2016 00002B4E 0900                <2>  at .FATsz16, dw 0009h
  2017 00002B50 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002B52 0200                <2>  at .numHeads, dw 0002h
  2019 00002B54 00000000            <2>  at .hiddSec, dd 0
  2020 00002B58 00000000            <2>  at .totSec32, dd 0
  2021 00002B5C 00000000            <2>  at .FATsz32, dd 0
  2022 00002B60 0000                <2>  at .extFlags, dw 0
  2023 00002B62 0000                <2>  at .FSver, dw 0
  2024 00002B64 00000000            <2>  at .RootClus, dd 0
  2025 00002B68 0000                <2>  at .FSinfo, dw 0
  2026 00002B6A 0000                <2>  at .BkBootSec, dw 0
  2027 00002B6C 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002B75 000000              <2>
  2028                              <2>  iend
  2029 00002B78 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002B7C 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002B85 202000              <2>
  2031 00002B88 00000000            <2>  at .volId, dd 0
  2032 00002B8C 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002B95 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002B9D 0D                  <2>  at .bBIOSNum, db i
  1981 00002B9E 0D                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002B9F 0002                <2>  at .wBpS, dw 200h
  1984 00002BA1 FF                  <2>  at .bSpC, db -1
  1985 00002BA2 0100                <2>  at .wResC, dw 0001h
  1986 00002BA4 02                  <2>  at .bNumFAT, db 02h
  1987 00002BA5 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002BA7 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002BA9 00                  <2>  at .bMedDesc, db 00h
  1990 00002BAA 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002BAC 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002BAE 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002BB0 00000000            <2>  at .dHiddSec, dd 0
  1994 00002BB4 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002BB8 00000000            <2>  at .FATsz32, dd 0
  1997 00002BBC 0000                <2>  at .extFlags, dw 0
  1998 00002BBE 0000                <2>  at .FSver, dw 0
  1999 00002BC0 00000000            <2>  at .RootClus, dd 0
  2000 00002BC4 0000                <2>  at .FSinfo, dw 0
  2001 00002BC6 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002BC8 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002BC9 0000                <2>  at .wOpenCnt, dw 0
  2005 00002BCB 07                  <2>  at .bDevType, db typeGenRem
  2006 00002BCC 0000                <2>  at .wDevFlgs, dw 0
  2007 00002BCE 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002BD0 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002BD2 01                  <2>  at .secPerClus, db 01h
  2011 00002BD3 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002BD5 02                  <2>  at .numFATs, db 02h
  2013 00002BD6 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002BD8 400B                <2>  at .totSec16, dw 0B40h
  2015 00002BDA F0                  <2>  at .media, db 0F0h
  2016 00002BDB 0900                <2>  at .FATsz16, dw 0009h
  2017 00002BDD 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002BDF 0200                <2>  at .numHeads, dw 0002h
  2019 00002BE1 00000000            <2>  at .hiddSec, dd 0
  2020 00002BE5 00000000            <2>  at .totSec32, dd 0
  2021 00002BE9 00000000            <2>  at .FATsz32, dd 0
  2022 00002BED 0000                <2>  at .extFlags, dw 0
  2023 00002BEF 0000                <2>  at .FSver, dw 0
  2024 00002BF1 00000000            <2>  at .RootClus, dd 0
  2025 00002BF5 0000                <2>  at .FSinfo, dw 0
  2026 00002BF7 0000                <2>  at .BkBootSec, dw 0
  2027 00002BF9 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002C02 000000              <2>
  2028                              <2>  iend
  2029 00002C05 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002C09 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002C12 202000              <2>
  2031 00002C15 00000000            <2>  at .volId, dd 0
  2032 00002C19 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002C22 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002C2A 0E                  <2>  at .bBIOSNum, db i
  1981 00002C2B 0E                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002C2C 0002                <2>  at .wBpS, dw 200h
  1984 00002C2E FF                  <2>  at .bSpC, db -1
  1985 00002C2F 0100                <2>  at .wResC, dw 0001h
  1986 00002C31 02                  <2>  at .bNumFAT, db 02h
  1987 00002C32 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002C34 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002C36 00                  <2>  at .bMedDesc, db 00h
  1990 00002C37 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002C39 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002C3B 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002C3D 00000000            <2>  at .dHiddSec, dd 0
  1994 00002C41 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002C45 00000000            <2>  at .FATsz32, dd 0
  1997 00002C49 0000                <2>  at .extFlags, dw 0
  1998 00002C4B 0000                <2>  at .FSver, dw 0
  1999 00002C4D 00000000            <2>  at .RootClus, dd 0
  2000 00002C51 0000                <2>  at .FSinfo, dw 0
  2001 00002C53 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002C55 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002C56 0000                <2>  at .wOpenCnt, dw 0
  2005 00002C58 07                  <2>  at .bDevType, db typeGenRem
  2006 00002C59 0000                <2>  at .wDevFlgs, dw 0
  2007 00002C5B 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002C5D 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002C5F 01                  <2>  at .secPerClus, db 01h
  2011 00002C60 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002C62 02                  <2>  at .numFATs, db 02h
  2013 00002C63 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002C65 400B                <2>  at .totSec16, dw 0B40h
  2015 00002C67 F0                  <2>  at .media, db 0F0h
  2016 00002C68 0900                <2>  at .FATsz16, dw 0009h
  2017 00002C6A 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002C6C 0200                <2>  at .numHeads, dw 0002h
  2019 00002C6E 00000000            <2>  at .hiddSec, dd 0
  2020 00002C72 00000000            <2>  at .totSec32, dd 0
  2021 00002C76 00000000            <2>  at .FATsz32, dd 0
  2022 00002C7A 0000                <2>  at .extFlags, dw 0
  2023 00002C7C 0000                <2>  at .FSver, dw 0
  2024 00002C7E 00000000            <2>  at .RootClus, dd 0
  2025 00002C82 0000                <2>  at .FSinfo, dw 0
  2026 00002C84 0000                <2>  at .BkBootSec, dw 0
  2027 00002C86 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002C8F 000000              <2>
  2028                              <2>  iend
  2029 00002C92 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002C96 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002C9F 202000              <2>
  2031 00002CA2 00000000            <2>  at .volId, dd 0
  2032 00002CA6 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002CAF FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002CB7 0F                  <2>  at .bBIOSNum, db i
  1981 00002CB8 0F                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002CB9 0002                <2>  at .wBpS, dw 200h
  1984 00002CBB FF                  <2>  at .bSpC, db -1
  1985 00002CBC 0100                <2>  at .wResC, dw 0001h
  1986 00002CBE 02                  <2>  at .bNumFAT, db 02h
  1987 00002CBF E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002CC1 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002CC3 00                  <2>  at .bMedDesc, db 00h
  1990 00002CC4 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002CC6 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002CC8 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002CCA 00000000            <2>  at .dHiddSec, dd 0
  1994 00002CCE 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002CD2 00000000            <2>  at .FATsz32, dd 0
  1997 00002CD6 0000                <2>  at .extFlags, dw 0
  1998 00002CD8 0000                <2>  at .FSver, dw 0
  1999 00002CDA 00000000            <2>  at .RootClus, dd 0
  2000 00002CDE 0000                <2>  at .FSinfo, dw 0
  2001 00002CE0 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002CE2 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002CE3 0000                <2>  at .wOpenCnt, dw 0
  2005 00002CE5 07                  <2>  at .bDevType, db typeGenRem
  2006 00002CE6 0000                <2>  at .wDevFlgs, dw 0
  2007 00002CE8 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002CEA 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002CEC 01                  <2>  at .secPerClus, db 01h
  2011 00002CED 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002CEF 02                  <2>  at .numFATs, db 02h
  2013 00002CF0 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002CF2 400B                <2>  at .totSec16, dw 0B40h
  2015 00002CF4 F0                  <2>  at .media, db 0F0h
  2016 00002CF5 0900                <2>  at .FATsz16, dw 0009h
  2017 00002CF7 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002CF9 0200                <2>  at .numHeads, dw 0002h
  2019 00002CFB 00000000            <2>  at .hiddSec, dd 0
  2020 00002CFF 00000000            <2>  at .totSec32, dd 0
  2021 00002D03 00000000            <2>  at .FATsz32, dd 0
  2022 00002D07 0000                <2>  at .extFlags, dw 0
  2023 00002D09 0000                <2>  at .FSver, dw 0
  2024 00002D0B 00000000            <2>  at .RootClus, dd 0
  2025 00002D0F 0000                <2>  at .FSinfo, dw 0
  2026 00002D11 0000                <2>  at .BkBootSec, dw 0
  2027 00002D13 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002D1C 000000              <2>
  2028                              <2>  iend
  2029 00002D1F FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002D23 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002D2C 202000              <2>
  2031 00002D2F 00000000            <2>  at .volId, dd 0
  2032 00002D33 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002D3C FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002D44 10                  <2>  at .bBIOSNum, db i
  1981 00002D45 10                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002D46 0002                <2>  at .wBpS, dw 200h
  1984 00002D48 FF                  <2>  at .bSpC, db -1
  1985 00002D49 0100                <2>  at .wResC, dw 0001h
  1986 00002D4B 02                  <2>  at .bNumFAT, db 02h
  1987 00002D4C E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002D4E 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002D50 00                  <2>  at .bMedDesc, db 00h
  1990 00002D51 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002D53 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002D55 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002D57 00000000            <2>  at .dHiddSec, dd 0
  1994 00002D5B 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002D5F 00000000            <2>  at .FATsz32, dd 0
  1997 00002D63 0000                <2>  at .extFlags, dw 0
  1998 00002D65 0000                <2>  at .FSver, dw 0
  1999 00002D67 00000000            <2>  at .RootClus, dd 0
  2000 00002D6B 0000                <2>  at .FSinfo, dw 0
  2001 00002D6D 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002D6F 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002D70 0000                <2>  at .wOpenCnt, dw 0
  2005 00002D72 07                  <2>  at .bDevType, db typeGenRem
  2006 00002D73 0000                <2>  at .wDevFlgs, dw 0
  2007 00002D75 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002D77 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002D79 01                  <2>  at .secPerClus, db 01h
  2011 00002D7A 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002D7C 02                  <2>  at .numFATs, db 02h
  2013 00002D7D E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002D7F 400B                <2>  at .totSec16, dw 0B40h
  2015 00002D81 F0                  <2>  at .media, db 0F0h
  2016 00002D82 0900                <2>  at .FATsz16, dw 0009h
  2017 00002D84 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002D86 0200                <2>  at .numHeads, dw 0002h
  2019 00002D88 00000000            <2>  at .hiddSec, dd 0
  2020 00002D8C 00000000            <2>  at .totSec32, dd 0
  2021 00002D90 00000000            <2>  at .FATsz32, dd 0
  2022 00002D94 0000                <2>  at .extFlags, dw 0
  2023 00002D96 0000                <2>  at .FSver, dw 0
  2024 00002D98 00000000            <2>  at .RootClus, dd 0
  2025 00002D9C 0000                <2>  at .FSinfo, dw 0
  2026 00002D9E 0000                <2>  at .BkBootSec, dw 0
  2027 00002DA0 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002DA9 000000              <2>
  2028                              <2>  iend
  2029 00002DAC FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002DB0 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002DB9 202000              <2>
  2031 00002DBC 00000000            <2>  at .volId, dd 0
  2032 00002DC0 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002DC9 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002DD1 11                  <2>  at .bBIOSNum, db i
  1981 00002DD2 11                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002DD3 0002                <2>  at .wBpS, dw 200h
  1984 00002DD5 FF                  <2>  at .bSpC, db -1
  1985 00002DD6 0100                <2>  at .wResC, dw 0001h
  1986 00002DD8 02                  <2>  at .bNumFAT, db 02h
  1987 00002DD9 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002DDB 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002DDD 00                  <2>  at .bMedDesc, db 00h
  1990 00002DDE 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002DE0 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002DE2 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002DE4 00000000            <2>  at .dHiddSec, dd 0
  1994 00002DE8 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002DEC 00000000            <2>  at .FATsz32, dd 0
  1997 00002DF0 0000                <2>  at .extFlags, dw 0
  1998 00002DF2 0000                <2>  at .FSver, dw 0
  1999 00002DF4 00000000            <2>  at .RootClus, dd 0
  2000 00002DF8 0000                <2>  at .FSinfo, dw 0
  2001 00002DFA 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002DFC 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002DFD 0000                <2>  at .wOpenCnt, dw 0
  2005 00002DFF 07                  <2>  at .bDevType, db typeGenRem
  2006 00002E00 0000                <2>  at .wDevFlgs, dw 0
  2007 00002E02 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002E04 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002E06 01                  <2>  at .secPerClus, db 01h
  2011 00002E07 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002E09 02                  <2>  at .numFATs, db 02h
  2013 00002E0A E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002E0C 400B                <2>  at .totSec16, dw 0B40h
  2015 00002E0E F0                  <2>  at .media, db 0F0h
  2016 00002E0F 0900                <2>  at .FATsz16, dw 0009h
  2017 00002E11 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002E13 0200                <2>  at .numHeads, dw 0002h
  2019 00002E15 00000000            <2>  at .hiddSec, dd 0
  2020 00002E19 00000000            <2>  at .totSec32, dd 0
  2021 00002E1D 00000000            <2>  at .FATsz32, dd 0
  2022 00002E21 0000                <2>  at .extFlags, dw 0
  2023 00002E23 0000                <2>  at .FSver, dw 0
  2024 00002E25 00000000            <2>  at .RootClus, dd 0
  2025 00002E29 0000                <2>  at .FSinfo, dw 0
  2026 00002E2B 0000                <2>  at .BkBootSec, dw 0
  2027 00002E2D 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002E36 000000              <2>
  2028                              <2>  iend
  2029 00002E39 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002E3D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002E46 202000              <2>
  2031 00002E49 00000000            <2>  at .volId, dd 0
  2032 00002E4D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002E56 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002E5E 12                  <2>  at .bBIOSNum, db i
  1981 00002E5F 12                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002E60 0002                <2>  at .wBpS, dw 200h
  1984 00002E62 FF                  <2>  at .bSpC, db -1
  1985 00002E63 0100                <2>  at .wResC, dw 0001h
  1986 00002E65 02                  <2>  at .bNumFAT, db 02h
  1987 00002E66 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002E68 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002E6A 00                  <2>  at .bMedDesc, db 00h
  1990 00002E6B 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002E6D 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002E6F 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002E71 00000000            <2>  at .dHiddSec, dd 0
  1994 00002E75 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002E79 00000000            <2>  at .FATsz32, dd 0
  1997 00002E7D 0000                <2>  at .extFlags, dw 0
  1998 00002E7F 0000                <2>  at .FSver, dw 0
  1999 00002E81 00000000            <2>  at .RootClus, dd 0
  2000 00002E85 0000                <2>  at .FSinfo, dw 0
  2001 00002E87 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002E89 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002E8A 0000                <2>  at .wOpenCnt, dw 0
  2005 00002E8C 07                  <2>  at .bDevType, db typeGenRem
  2006 00002E8D 0000                <2>  at .wDevFlgs, dw 0
  2007 00002E8F 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002E91 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002E93 01                  <2>  at .secPerClus, db 01h
  2011 00002E94 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002E96 02                  <2>  at .numFATs, db 02h
  2013 00002E97 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002E99 400B                <2>  at .totSec16, dw 0B40h
  2015 00002E9B F0                  <2>  at .media, db 0F0h
  2016 00002E9C 0900                <2>  at .FATsz16, dw 0009h
  2017 00002E9E 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002EA0 0200                <2>  at .numHeads, dw 0002h
  2019 00002EA2 00000000            <2>  at .hiddSec, dd 0
  2020 00002EA6 00000000            <2>  at .totSec32, dd 0
  2021 00002EAA 00000000            <2>  at .FATsz32, dd 0
  2022 00002EAE 0000                <2>  at .extFlags, dw 0
  2023 00002EB0 0000                <2>  at .FSver, dw 0
  2024 00002EB2 00000000            <2>  at .RootClus, dd 0
  2025 00002EB6 0000                <2>  at .FSinfo, dw 0
  2026 00002EB8 0000                <2>  at .BkBootSec, dw 0
  2027 00002EBA 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002EC3 000000              <2>
  2028                              <2>  iend
  2029 00002EC6 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002ECA 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002ED3 202000              <2>
  2031 00002ED6 00000000            <2>  at .volId, dd 0
  2032 00002EDA 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002EE3 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002EEB 13                  <2>  at .bBIOSNum, db i
  1981 00002EEC 13                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002EED 0002                <2>  at .wBpS, dw 200h
  1984 00002EEF FF                  <2>  at .bSpC, db -1
  1985 00002EF0 0100                <2>  at .wResC, dw 0001h
  1986 00002EF2 02                  <2>  at .bNumFAT, db 02h
  1987 00002EF3 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002EF5 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002EF7 00                  <2>  at .bMedDesc, db 00h
  1990 00002EF8 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002EFA 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002EFC 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002EFE 00000000            <2>  at .dHiddSec, dd 0
  1994 00002F02 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002F06 00000000            <2>  at .FATsz32, dd 0
  1997 00002F0A 0000                <2>  at .extFlags, dw 0
  1998 00002F0C 0000                <2>  at .FSver, dw 0
  1999 00002F0E 00000000            <2>  at .RootClus, dd 0
  2000 00002F12 0000                <2>  at .FSinfo, dw 0
  2001 00002F14 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002F16 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002F17 0000                <2>  at .wOpenCnt, dw 0
  2005 00002F19 07                  <2>  at .bDevType, db typeGenRem
  2006 00002F1A 0000                <2>  at .wDevFlgs, dw 0
  2007 00002F1C 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002F1E 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002F20 01                  <2>  at .secPerClus, db 01h
  2011 00002F21 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002F23 02                  <2>  at .numFATs, db 02h
  2013 00002F24 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002F26 400B                <2>  at .totSec16, dw 0B40h
  2015 00002F28 F0                  <2>  at .media, db 0F0h
  2016 00002F29 0900                <2>  at .FATsz16, dw 0009h
  2017 00002F2B 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002F2D 0200                <2>  at .numHeads, dw 0002h
  2019 00002F2F 00000000            <2>  at .hiddSec, dd 0
  2020 00002F33 00000000            <2>  at .totSec32, dd 0
  2021 00002F37 00000000            <2>  at .FATsz32, dd 0
  2022 00002F3B 0000                <2>  at .extFlags, dw 0
  2023 00002F3D 0000                <2>  at .FSver, dw 0
  2024 00002F3F 00000000            <2>  at .RootClus, dd 0
  2025 00002F43 0000                <2>  at .FSinfo, dw 0
  2026 00002F45 0000                <2>  at .BkBootSec, dw 0
  2027 00002F47 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002F50 000000              <2>
  2028                              <2>  iend
  2029 00002F53 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002F57 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002F60 202000              <2>
  2031 00002F63 00000000            <2>  at .volId, dd 0
  2032 00002F67 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002F70 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00002F78 14                  <2>  at .bBIOSNum, db i
  1981 00002F79 14                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00002F7A 0002                <2>  at .wBpS, dw 200h
  1984 00002F7C FF                  <2>  at .bSpC, db -1
  1985 00002F7D 0100                <2>  at .wResC, dw 0001h
  1986 00002F7F 02                  <2>  at .bNumFAT, db 02h
  1987 00002F80 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00002F82 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00002F84 00                  <2>  at .bMedDesc, db 00h
  1990 00002F85 0900                <2>  at .wFATsz16, dw 0009h
  1991 00002F87 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00002F89 0200                <2>  at .wNumHeads, dw 0002h
  1993 00002F8B 00000000            <2>  at .dHiddSec, dd 0
  1994 00002F8F 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00002F93 00000000            <2>  at .FATsz32, dd 0
  1997 00002F97 0000                <2>  at .extFlags, dw 0
  1998 00002F99 0000                <2>  at .FSver, dw 0
  1999 00002F9B 00000000            <2>  at .RootClus, dd 0
  2000 00002F9F 0000                <2>  at .FSinfo, dw 0
  2001 00002FA1 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00002FA3 10                  <2>  at .bBpbType, db bpbFat12
  2004 00002FA4 0000                <2>  at .wOpenCnt, dw 0
  2005 00002FA6 07                  <2>  at .bDevType, db typeGenRem
  2006 00002FA7 0000                <2>  at .wDevFlgs, dw 0
  2007 00002FA9 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00002FAB 0002                <2>  at .bytsPerSec, dw 200h
  2010 00002FAD 01                  <2>  at .secPerClus, db 01h
  2011 00002FAE 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00002FB0 02                  <2>  at .numFATs, db 02h
  2013 00002FB1 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00002FB3 400B                <2>  at .totSec16, dw 0B40h
  2015 00002FB5 F0                  <2>  at .media, db 0F0h
  2016 00002FB6 0900                <2>  at .FATsz16, dw 0009h
  2017 00002FB8 1200                <2>  at .secPerTrk, dw 0012h
  2018 00002FBA 0200                <2>  at .numHeads, dw 0002h
  2019 00002FBC 00000000            <2>  at .hiddSec, dd 0
  2020 00002FC0 00000000            <2>  at .totSec32, dd 0
  2021 00002FC4 00000000            <2>  at .FATsz32, dd 0
  2022 00002FC8 0000                <2>  at .extFlags, dw 0
  2023 00002FCA 0000                <2>  at .FSver, dw 0
  2024 00002FCC 00000000            <2>  at .RootClus, dd 0
  2025 00002FD0 0000                <2>  at .FSinfo, dw 0
  2026 00002FD2 0000                <2>  at .BkBootSec, dw 0
  2027 00002FD4 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00002FDD 000000              <2>
  2028                              <2>  iend
  2029 00002FE0 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00002FE4 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00002FED 202000              <2>
  2031 00002FF0 00000000            <2>  at .volId, dd 0
  2032 00002FF4 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00002FFD FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00003005 15                  <2>  at .bBIOSNum, db i
  1981 00003006 15                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00003007 0002                <2>  at .wBpS, dw 200h
  1984 00003009 FF                  <2>  at .bSpC, db -1
  1985 0000300A 0100                <2>  at .wResC, dw 0001h
  1986 0000300C 02                  <2>  at .bNumFAT, db 02h
  1987 0000300D E000                <2>  at .wRtCntNum, dw 00E0h
  1988 0000300F 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00003011 00                  <2>  at .bMedDesc, db 00h
  1990 00003012 0900                <2>  at .wFATsz16, dw 0009h
  1991 00003014 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00003016 0200                <2>  at .wNumHeads, dw 0002h
  1993 00003018 00000000            <2>  at .dHiddSec, dd 0
  1994 0000301C 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00003020 00000000            <2>  at .FATsz32, dd 0
  1997 00003024 0000                <2>  at .extFlags, dw 0
  1998 00003026 0000                <2>  at .FSver, dw 0
  1999 00003028 00000000            <2>  at .RootClus, dd 0
  2000 0000302C 0000                <2>  at .FSinfo, dw 0
  2001 0000302E 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00003030 10                  <2>  at .bBpbType, db bpbFat12
  2004 00003031 0000                <2>  at .wOpenCnt, dw 0
  2005 00003033 07                  <2>  at .bDevType, db typeGenRem
  2006 00003034 0000                <2>  at .wDevFlgs, dw 0
  2007 00003036 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00003038 0002                <2>  at .bytsPerSec, dw 200h
  2010 0000303A 01                  <2>  at .secPerClus, db 01h
  2011 0000303B 0100                <2>  at .revdSecCnt, dw 0001h
  2012 0000303D 02                  <2>  at .numFATs, db 02h
  2013 0000303E E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00003040 400B                <2>  at .totSec16, dw 0B40h
  2015 00003042 F0                  <2>  at .media, db 0F0h
  2016 00003043 0900                <2>  at .FATsz16, dw 0009h
  2017 00003045 1200                <2>  at .secPerTrk, dw 0012h
  2018 00003047 0200                <2>  at .numHeads, dw 0002h
  2019 00003049 00000000            <2>  at .hiddSec, dd 0
  2020 0000304D 00000000            <2>  at .totSec32, dd 0
  2021 00003051 00000000            <2>  at .FATsz32, dd 0
  2022 00003055 0000                <2>  at .extFlags, dw 0
  2023 00003057 0000                <2>  at .FSver, dw 0
  2024 00003059 00000000            <2>  at .RootClus, dd 0
  2025 0000305D 0000                <2>  at .FSinfo, dw 0
  2026 0000305F 0000                <2>  at .BkBootSec, dw 0
  2027 00003061 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 0000306A 000000              <2>
  2028                              <2>  iend
  2029 0000306D FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00003071 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 0000307A 202000              <2>
  2031 0000307D 00000000            <2>  at .volId, dd 0
  2032 00003081 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 0000308A FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00003092 16                  <2>  at .bBIOSNum, db i
  1981 00003093 16                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00003094 0002                <2>  at .wBpS, dw 200h
  1984 00003096 FF                  <2>  at .bSpC, db -1
  1985 00003097 0100                <2>  at .wResC, dw 0001h
  1986 00003099 02                  <2>  at .bNumFAT, db 02h
  1987 0000309A E000                <2>  at .wRtCntNum, dw 00E0h
  1988 0000309C 400B                <2>  at .wTotSec16, dw 0B40h
  1989 0000309E 00                  <2>  at .bMedDesc, db 00h
  1990 0000309F 0900                <2>  at .wFATsz16, dw 0009h
  1991 000030A1 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 000030A3 0200                <2>  at .wNumHeads, dw 0002h
  1993 000030A5 00000000            <2>  at .dHiddSec, dd 0
  1994 000030A9 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 000030AD 00000000            <2>  at .FATsz32, dd 0
  1997 000030B1 0000                <2>  at .extFlags, dw 0
  1998 000030B3 0000                <2>  at .FSver, dw 0
  1999 000030B5 00000000            <2>  at .RootClus, dd 0
  2000 000030B9 0000                <2>  at .FSinfo, dw 0
  2001 000030BB 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 000030BD 10                  <2>  at .bBpbType, db bpbFat12
  2004 000030BE 0000                <2>  at .wOpenCnt, dw 0
  2005 000030C0 07                  <2>  at .bDevType, db typeGenRem
  2006 000030C1 0000                <2>  at .wDevFlgs, dw 0
  2007 000030C3 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 000030C5 0002                <2>  at .bytsPerSec, dw 200h
  2010 000030C7 01                  <2>  at .secPerClus, db 01h
  2011 000030C8 0100                <2>  at .revdSecCnt, dw 0001h
  2012 000030CA 02                  <2>  at .numFATs, db 02h
  2013 000030CB E000                <2>  at .rootEntCnt, dw 00E0h
  2014 000030CD 400B                <2>  at .totSec16, dw 0B40h
  2015 000030CF F0                  <2>  at .media, db 0F0h
  2016 000030D0 0900                <2>  at .FATsz16, dw 0009h
  2017 000030D2 1200                <2>  at .secPerTrk, dw 0012h
  2018 000030D4 0200                <2>  at .numHeads, dw 0002h
  2019 000030D6 00000000            <2>  at .hiddSec, dd 0
  2020 000030DA 00000000            <2>  at .totSec32, dd 0
  2021 000030DE 00000000            <2>  at .FATsz32, dd 0
  2022 000030E2 0000                <2>  at .extFlags, dw 0
  2023 000030E4 0000                <2>  at .FSver, dw 0
  2024 000030E6 00000000            <2>  at .RootClus, dd 0
  2025 000030EA 0000                <2>  at .FSinfo, dw 0
  2026 000030EC 0000                <2>  at .BkBootSec, dw 0
  2027 000030EE 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 000030F7 000000              <2>
  2028                              <2>  iend
  2029 000030FA FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 000030FE 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00003107 202000              <2>
  2031 0000310A 00000000            <2>  at .volId, dd 0
  2032 0000310E 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00003117 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 0000311F 17                  <2>  at .bBIOSNum, db i
  1981 00003120 17                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 00003121 0002                <2>  at .wBpS, dw 200h
  1984 00003123 FF                  <2>  at .bSpC, db -1
  1985 00003124 0100                <2>  at .wResC, dw 0001h
  1986 00003126 02                  <2>  at .bNumFAT, db 02h
  1987 00003127 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00003129 400B                <2>  at .wTotSec16, dw 0B40h
  1989 0000312B 00                  <2>  at .bMedDesc, db 00h
  1990 0000312C 0900                <2>  at .wFATsz16, dw 0009h
  1991 0000312E 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 00003130 0200                <2>  at .wNumHeads, dw 0002h
  1993 00003132 00000000            <2>  at .dHiddSec, dd 0
  1994 00003136 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 0000313A 00000000            <2>  at .FATsz32, dd 0
  1997 0000313E 0000                <2>  at .extFlags, dw 0
  1998 00003140 0000                <2>  at .FSver, dw 0
  1999 00003142 00000000            <2>  at .RootClus, dd 0
  2000 00003146 0000                <2>  at .FSinfo, dw 0
  2001 00003148 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 0000314A 10                  <2>  at .bBpbType, db bpbFat12
  2004 0000314B 0000                <2>  at .wOpenCnt, dw 0
  2005 0000314D 07                  <2>  at .bDevType, db typeGenRem
  2006 0000314E 0000                <2>  at .wDevFlgs, dw 0
  2007 00003150 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 00003152 0002                <2>  at .bytsPerSec, dw 200h
  2010 00003154 01                  <2>  at .secPerClus, db 01h
  2011 00003155 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00003157 02                  <2>  at .numFATs, db 02h
  2013 00003158 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 0000315A 400B                <2>  at .totSec16, dw 0B40h
  2015 0000315C F0                  <2>  at .media, db 0F0h
  2016 0000315D 0900                <2>  at .FATsz16, dw 0009h
  2017 0000315F 1200                <2>  at .secPerTrk, dw 0012h
  2018 00003161 0200                <2>  at .numHeads, dw 0002h
  2019 00003163 00000000            <2>  at .hiddSec, dd 0
  2020 00003167 00000000            <2>  at .totSec32, dd 0
  2021 0000316B 00000000            <2>  at .FATsz32, dd 0
  2022 0000316F 0000                <2>  at .extFlags, dw 0
  2023 00003171 0000                <2>  at .FSver, dw 0
  2024 00003173 00000000            <2>  at .RootClus, dd 0
  2025 00003177 0000                <2>  at .FSinfo, dw 0
  2026 00003179 0000                <2>  at .BkBootSec, dw 0
  2027 0000317B 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00003184 000000              <2>
  2028                              <2>  iend
  2029 00003187 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 0000318B 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00003194 202000              <2>
  2031 00003197 00000000            <2>  at .volId, dd 0
  2032 0000319B 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 000031A4 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 000031AC 18                  <2>  at .bBIOSNum, db i
  1981 000031AD 18                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 000031AE 0002                <2>  at .wBpS, dw 200h
  1984 000031B0 FF                  <2>  at .bSpC, db -1
  1985 000031B1 0100                <2>  at .wResC, dw 0001h
  1986 000031B3 02                  <2>  at .bNumFAT, db 02h
  1987 000031B4 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 000031B6 400B                <2>  at .wTotSec16, dw 0B40h
  1989 000031B8 00                  <2>  at .bMedDesc, db 00h
  1990 000031B9 0900                <2>  at .wFATsz16, dw 0009h
  1991 000031BB 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 000031BD 0200                <2>  at .wNumHeads, dw 0002h
  1993 000031BF 00000000            <2>  at .dHiddSec, dd 0
  1994 000031C3 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 000031C7 00000000            <2>  at .FATsz32, dd 0
  1997 000031CB 0000                <2>  at .extFlags, dw 0
  1998 000031CD 0000                <2>  at .FSver, dw 0
  1999 000031CF 00000000            <2>  at .RootClus, dd 0
  2000 000031D3 0000                <2>  at .FSinfo, dw 0
  2001 000031D5 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 000031D7 10                  <2>  at .bBpbType, db bpbFat12
  2004 000031D8 0000                <2>  at .wOpenCnt, dw 0
  2005 000031DA 07                  <2>  at .bDevType, db typeGenRem
  2006 000031DB 0000                <2>  at .wDevFlgs, dw 0
  2007 000031DD 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 000031DF 0002                <2>  at .bytsPerSec, dw 200h
  2010 000031E1 01                  <2>  at .secPerClus, db 01h
  2011 000031E2 0100                <2>  at .revdSecCnt, dw 0001h
  2012 000031E4 02                  <2>  at .numFATs, db 02h
  2013 000031E5 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 000031E7 400B                <2>  at .totSec16, dw 0B40h
  2015 000031E9 F0                  <2>  at .media, db 0F0h
  2016 000031EA 0900                <2>  at .FATsz16, dw 0009h
  2017 000031EC 1200                <2>  at .secPerTrk, dw 0012h
  2018 000031EE 0200                <2>  at .numHeads, dw 0002h
  2019 000031F0 00000000            <2>  at .hiddSec, dd 0
  2020 000031F4 00000000            <2>  at .totSec32, dd 0
  2021 000031F8 00000000            <2>  at .FATsz32, dd 0
  2022 000031FC 0000                <2>  at .extFlags, dw 0
  2023 000031FE 0000                <2>  at .FSver, dw 0
  2024 00003200 00000000            <2>  at .RootClus, dd 0
  2025 00003204 0000                <2>  at .FSinfo, dw 0
  2026 00003206 0000                <2>  at .BkBootSec, dw 0
  2027 00003208 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 00003211 000000              <2>
  2028                              <2>  iend
  2029 00003214 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 00003218 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 00003221 202000              <2>
  2031 00003224 00000000            <2>  at .volId, dd 0
  2032 00003228 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
  1978                              <2>  istruc drvBlk
  1979 00003231 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1980 00003239 19                  <2>  at .bBIOSNum, db i
  1981 0000323A 19                  <2>  at .bDOSNum, db i
  1982                              <2> 
  1983 0000323B 0002                <2>  at .wBpS, dw 200h
  1984 0000323D FF                  <2>  at .bSpC, db -1
  1985 0000323E 0100                <2>  at .wResC, dw 0001h
  1986 00003240 02                  <2>  at .bNumFAT, db 02h
  1987 00003241 E000                <2>  at .wRtCntNum, dw 00E0h
  1988 00003243 400B                <2>  at .wTotSec16, dw 0B40h
  1989 00003245 00                  <2>  at .bMedDesc, db 00h
  1990 00003246 0900                <2>  at .wFATsz16, dw 0009h
  1991 00003248 1200                <2>  at .wSecPerTrk, dw 0012h
  1992 0000324A 0200                <2>  at .wNumHeads, dw 0002h
  1993 0000324C 00000000            <2>  at .dHiddSec, dd 0
  1994 00003250 00000000            <2>  at .dTotSec32, dd 0
  1995                              <2> 
  1996 00003254 00000000            <2>  at .FATsz32, dd 0
  1997 00003258 0000                <2>  at .extFlags, dw 0
  1998 0000325A 0000                <2>  at .FSver, dw 0
  1999 0000325C 00000000            <2>  at .RootClus, dd 0
  2000 00003260 0000                <2>  at .FSinfo, dw 0
  2001 00003262 0000                <2>  at .BkBootSec, dw 0
  2002                              <2> 
  2003 00003264 10                  <2>  at .bBpbType, db bpbFat12
  2004 00003265 0000                <2>  at .wOpenCnt, dw 0
  2005 00003267 07                  <2>  at .bDevType, db typeGenRem
  2006 00003268 0000                <2>  at .wDevFlgs, dw 0
  2007 0000326A 3F00                <2>  at .wNumCyl, dw 63
  2008                              <2>  istruc bpb32
  2009 0000326C 0002                <2>  at .bytsPerSec, dw 200h
  2010 0000326E 01                  <2>  at .secPerClus, db 01h
  2011 0000326F 0100                <2>  at .revdSecCnt, dw 0001h
  2012 00003271 02                  <2>  at .numFATs, db 02h
  2013 00003272 E000                <2>  at .rootEntCnt, dw 00E0h
  2014 00003274 400B                <2>  at .totSec16, dw 0B40h
  2015 00003276 F0                  <2>  at .media, db 0F0h
  2016 00003277 0900                <2>  at .FATsz16, dw 0009h
  2017 00003279 1200                <2>  at .secPerTrk, dw 0012h
  2018 0000327B 0200                <2>  at .numHeads, dw 0002h
  2019 0000327D 00000000            <2>  at .hiddSec, dd 0
  2020 00003281 00000000            <2>  at .totSec32, dd 0
  2021 00003285 00000000            <2>  at .FATsz32, dd 0
  2022 00003289 0000                <2>  at .extFlags, dw 0
  2023 0000328B 0000                <2>  at .FSver, dw 0
  2024 0000328D 00000000            <2>  at .RootClus, dd 0
  2025 00003291 0000                <2>  at .FSinfo, dw 0
  2026 00003293 0000                <2>  at .BkBootSec, dw 0
  2027 00003295 000000000000000000- <2>  at .reserved, db 12 dup (0)
  2027 0000329E 000000              <2>
  2028                              <2>  iend
  2029 000032A1 FFFFFFFF            <2>  at .dAccTime, dd -1
  2030 000032A5 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  2030 000032AE 202000              <2>
  2031 000032B1 00000000            <2>  at .volId, dd 0
  2032 000032B5 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  2033                              <2>  iend
  2034                              <2>  %assign i i+1
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 000032BE 0F010D23000000      <1>     sidt [myIdt]
     8 000032C5 0FB6C0              <1>     movzx eax, al
     9 000032C8 4892                <1>     xchg rdx, rax
    10 000032CA 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 000032CE 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 000032D5 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 000032D8 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 000032DC 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 000032E0 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 000032E4 894208              <1>     mov dword [rdx + 8], eax
    17 000032E7 C3                  <1>     ret
    18                              <1> myIdt:
    19 000032E8 0000                <1> .limit  dw 0
    20 000032EA 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 000032F2 50                  <1>     push rax
    25 000032F3 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 000032F4 51                  <1>     push rcx
    27 000032F5 52                  <1>     push rdx
    28 000032F6 488D1575CEFFFF      <1>     lea rdx, qword [fastOutput]
    29 000032FD B829000000          <1>     mov eax, 29h
    30 00003302 E8B7FFFFFF          <1>     call installInterrupt
    31 00003307 488D156CCEFFFF      <1>     lea rdx, qword [ctrlBreak]
    32 0000330E B83B000000          <1>     mov eax, 3Bh
    33 00003313 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00003318 B401                <1>     mov ah, 01      ;Get buffer status
    36 0000331A CD36                <1>     int 36h
    37 0000331C 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 0000331E 30E4                <1>     xor ah, ah
    39 00003320 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00003322 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00003324 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00003329 CD30                <1>     int 30h
    44 0000332B B402                <1>     mov ah, 02h
    45 0000332D 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 0000332F 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00003331 CD30                <1>     int 30h
    48 00003333 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00003335 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 0000333A CD30                <1>     int 30h
    51 0000333C 5A                  <1>     pop rdx
    52 0000333D 59                  <1>     pop rcx
    53 0000333E 5B                  <1>     pop rbx
    54 0000333F 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 00003340 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 00003346 50                  <1>     push rax
    59 00003347 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 0000334E 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 00003352 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 00003353 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 00003354 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 00003355 B402                <1>     mov ah, 02  ;Read RTC Time
    70 00003357 CD3A                <1>     int 3Ah
    71 00003359 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 0000335B 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 0000335E E84D000000          <1>     call .bcd2Bin
    75 00003363 88C5                <1>     mov ch, al
    76 00003365 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 00003368 E843000000          <1>     call .bcd2Bin
    78 0000336D 88C1                <1>     mov cl, al
    79 0000336F 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 00003372 E839000000          <1>     call .bcd2Bin
    81 00003377 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 00003379 89C2                <1>     mov edx, eax
    83 0000337B B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 0000337D CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 0000337F B404                <1>     mov ah, 04  ;Read RTC Date
    90 00003381 CD3A                <1>     int 3Ah
    91 00003383 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 00003385 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 00003388 E823000000          <1>     call .bcd2Bin
    95 0000338D 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 00003390 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 00003396 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 00003399 E812000000          <1>     call .bcd2Bin
    99 0000339E 88C6                <1>     mov dh, al  
   100 000033A0 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 000033A3 E808000000          <1>     call .bcd2Bin
   102 000033A8 88C2                <1>     mov dl, al
   103 000033AA B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 000033AC CD21                <1>     int 21h
   105 000033AE EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 000033B0 51                  <1>     push rcx
   109 000033B1 89C1                <1>     mov ecx, eax
   110 000033B3 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 000033B8 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 000033BE 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 000033C1 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 000033C4 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 000033C6 FFC9                <1>     dec ecx
   117 000033C8 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 000033CA 59                  <1>     pop rcx
   120 000033CB C3                  <1>     ret
   121                              <1> .clkEnd:
   122 000033CC 5B                  <1>     pop rbx ;Get the pointer back
   123 000033CD E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;Start by setting up the interrupt vectors!
   136 000033D2 B839350000          <1>     mov eax, 3539h  ;Get original Int 39h
   137 000033D7 CD21                <1>     int 21h
   138 000033D9 48891DDED0FFFF      <1>     mov qword [i39Org], rbx
   139 000033E0 B839250000          <1>     mov eax, 2539h  ;Setup our handler
   140 000033E5 488D15F2D0FFFF      <1>     lea rdx, dosInt39h
   141 000033EC CD21                <1>     int 21h
   142                              <1> 
   143 000033EE B833350000          <1>     mov eax, 3533h  ;Get original Int 33h
   144 000033F3 CD21                <1>     int 21h
   145 000033F5 48891DCAD0FFFF      <1>     mov qword [i33Org], rbx
   146 000033FC 48891DD3D0FFFF      <1>     mov qword [i33Next], rbx    ;This is also the low level handler
   147 00003403 B833250000          <1>     mov eax, 2533h  ;Setup our handler
   148 00003408 488D15F1D0FFFF      <1>     lea rdx, dosInt33h
   149 0000340F CD21                <1>     int 21h
   150                              <1> 
   151 00003411 B82F350000          <1>     mov eax, 352Fh  ;Get previous Int 2Fh handler
   152 00003416 CD21                <1>     int 21h
   153 00003418 48891DAFD0FFFF      <1>     mov qword [i2FNext], rbx
   154 0000341F B82F250000          <1>     mov eax, 252Fh
   155 00003424 488D1543D1FFFF      <1>     lea rdx, i2fhSwap33h
   156 0000342B CD21                <1>     int 21h
   157                              <1> 
   158                              <1> 
   159                              <1> ;Then set up the link pointers to the load address of the 
   160                              <1> ; drive table.
   161 0000342D B919000000          <1>     mov ecx, drvBlkTblL - 1
   162 00003432 488D2D33F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   163 00003439 4889EE              <1>     mov rsi, rbp
   164                              <1> .dskTblLp:
   165 0000343C 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   166 0000343F 4881C68D000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   167 00003446 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   168 00003449 FFC9                <1>     dec ecx                 ;Decrement the count
   169 0000344B 75EF                <1>     jnz .dskTblLp
   170 0000344D 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   171                              <1> ;Now get number of Int 33h information packed in r8
   172 00003454 CD31                <1>     int 31h
   173                              <1>     ;Returns:
   174                              <1>     ;r8[Byte 0] = Number of COM ports
   175                              <1>     ;r8[Byte 1] = Number of fixed disks
   176                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   177                              <1>     ;r8[Byte 3] = Number of Int 33h units
   178 00003456 4C890547DFFFFF      <1>     mov qword [msdDriver.inBuffer], r8   
   179 0000345D 0FB60543DFFFFF      <1>     movzx eax, byte [msdDriver.inBuffer + 3]
   180 00003464 85C0                <1>     test eax, eax
   181 00003466 0F84DA010000        <1>     jz .noDevs
   182 0000346C 0FB61D32DFFFFF      <1>     movzx ebx, byte [msdDriver.inBuffer + 1]
   183 00003473 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   184 00003475 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   185 0000347B 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   186 00003481 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   187                              <1> ;Start by doing fixed disks.
   188 00003488 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   189 0000348A 745D                <1>     jz .doRem
   190 0000348C C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   191 00003493 C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   192                              <1> .hdLp:
   193                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   194                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   195 0000349A 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   196 0000349C E8A2030000          <1>     call .ptnUpdateBpb
   197 000034A1 7211                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   198                              <1> ;The odd case where there is a BPB on the hard disk :)
   199 000034A3 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   200 000034A7 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   201 000034AD E833030000          <1>     call .advDiskPtrs
   202 000034B2 EB17                <1>     jmp short .fatDiskOk
   203                              <1> .mbrFnd:
   204 000034B4 751C                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   205                              <1> ;Now reread sector 0 (it might have been overwritten by a attempted FAT read)
   206 000034B6 E828D5FFFF          <1>     call msdDriver.bbpbReadBS
   207                              <1> ;Now we check if we have a valid MBR signature.
   208 000034BB 66813DDEE0FFFF55AA  <1>     cmp word [msdDriver.inBuffer + mbr.mbrSig], 0AA55h
   209 000034C4 750C                <1>     jne .gotoNextDisk
   210 000034C6 E89D010000          <1>     call .processMbr    ;This disk is done.
   211                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   212                              <1> .fatDiskOk:
   213                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   214 000034CB E80D030000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   215 000034D0 7417                <1>     je .doRem
   216                              <1> .gotoNextDisk:
   217 000034D2 FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   218 000034D8 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   219 000034DF 247F                <1>     and al, ~80h    ;Drop the upper bit
   220 000034E1 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   221 000034E7 75B1                <1>     jne .hdLp
   222                              <1> ;------------------------------------------------
   223                              <1> ;   Here we start doing removable devices
   224                              <1> ;------------------------------------------------
   225                              <1> .doRem:
   226 000034E9 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   227 000034F0 8805(01000000)      <1>     mov byte [fixPtn], al
   228 000034F6 C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   229 000034FD C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   230 00003504 803D(02000000)00    <1>     cmp byte [remDrv], 0
   231 0000350B 0F8426010000        <1>     je .noRems
   232                              <1> .remLp:
   233 00003511 31C9                <1>     xor ecx, ecx        ;Load sector 0 of the disk
   234 00003513 E82B030000          <1>     call .ptnUpdateBpb  ;If can't get a BPB, its ok. Remdevs here :)
   235 00003518 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   236 0000351C B800880000          <1>     mov eax, 8800h      ;Get disk parameters for changeline status in eax
   237 00003521 CD33                <1>     int 33h
   238 00003523 7221                <1>     jc .remSkipDisk     ;If we cant query the drive, then we skip this.
   239 00003525 A910000000          <1>     test eax, 10h       ;Set if we have changeline support
   240 0000352A 7406                <1>     jz .remNext
   241 0000352C 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   242                              <1> .remNext:
   243 00003532 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   244 00003538 E8A8020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   245 0000353D 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   246 00003544 742C                <1>     je .msdExit
   247                              <1> .remSkipDisk:
   248 00003546 FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   249 0000354C 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   250 00003553 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   251 00003559 7417                <1>     je .msdExit
   252 0000355B 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   253 0000355D 72B2                <1>     jb .remLp                   ;If not, do normal processing.
   254                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   255                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   256                              <1> ; to go past the letters assigned to the fixed disk.
   257 0000355F 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   258 00003565 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   259 00003567 8805(04000000)      <1>     mov byte [dosDrv], al
   260 0000356D E99FFFFFFF          <1>     jmp .remLp
   261                              <1> .msdExit:
   262 00003572 F605(00000000)FF    <1>     test byte [physVol], -1 ;Did we fail to initialise ANY devices?
   263 00003579 0F84C7000000        <1>     jz .noDevs  ;If so, we pretend we have two drives and hope defaults work!
   264 0000357F F605(00000000)FF    <1>     test byte [physVol], -1
   265 00003586 0F84AB000000        <1>     jz .noRems
   266 0000358C 803D(02000000)01    <1>     cmp byte [remDrv], 1
   267 00003593 7539                <1>     jne .skipSingle
   268                              <1> ;Here we do the A: >-< B: jank.
   269                              <1> ;We know rbp points to what should the block for B:. The block for A:
   270                              <1> ; is right behind it.
   271                              <1> .doSingle:
   272 00003595 4889EE              <1>     mov rsi, rbp
   273 00003598 4881EE8D000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   274 0000359F 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   275                              <1> ;Now we transfer the BIOS number and set drive number to 1
   276 000035A5 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bBIOSNum]
   277 000035A9 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   278 000035AC C6450901            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   279 000035B0 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   280 000035B4 4881C60A000000      <1>     add rsi, drvBlk.bpb
   281 000035BB B983000000          <1>     mov ecx, (drvBlk_size - 10)  ;8 bytes Link ptr and 2 id bytes
   282 000035C0 F3A4                <1>     rep movsb
   283 000035C2 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   284 000035C8 FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   285                              <1> .skipSingle:
   286 000035CE 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   287 000035D5 53                  <1>     push rbx    ;Save this count on the stack
   288 000035D6 FFCB                <1>     dec ebx     ;Turn into an offset into the table
   289 000035D8 B88D000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   290 000035DD F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   291 000035DF 488D3586EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   292 000035E6 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   293 000035EE 488D1D(66000000)    <1>     lea rbx, bpbArray
   294                              <1> .buildBPBArrayLp:
   295 000035F5 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   296 000035F9 0FB64609            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   297 000035FD 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   298 00003601 4889F7              <1>     mov rdi, rsi                            ;Save this ptr before walking
   299 00003604 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Now walk the table
   300 00003607 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   301 0000360E 75E5                <1>     jne .buildBPBArrayLp    ;No... keep going
   302 00003610 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   303                              <1> ;
   304                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   305                              <1> ;
   306 00003613 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the request packet ptr back
   307                              <1> ;All previous drivers return the "worst case" eject pointer. Here we return
   308                              <1> ; the real eject pointer
   309 0000361A 4881C78D000000      <1>     add rdi, drvBlk_size    ;Mov rdi past end of last drvBlk 2 first free byte
   310 00003621 48897B0E            <1>     mov qword [rbx + initReqPkt.endptr], rdi    ;save as real eject point
   311 00003625 58                  <1>     pop rax         ;Get back the number of detected volumes
   312 00003626 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   313 00003629 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   314 0000362D 66C705C1CFFFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   315                              <1>     return
    13                              <2> %%_ret:
    14 00003636 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> .noRems:
   317                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   318                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   319                              <1> ; we just did the first remdev. This drive gets registered as having
   320                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   321 00003637 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   322 0000363B FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   323                              <1> ;Here we setup A: drive to be a pretend 1.44Mb drive
   324 00003641 E94FFFFFFF          <1>     jmp .doSingle
   325                              <1> .noDevs:
   326                              <1> ;If we have no drives, then suppose we have two default drives
   327                              <1> ; A: and B: which are NOT the same!
   328 00003646 C605(00000000)02    <1>     mov byte [physVol], 2   ;Identify entries A and B of system Ok!
   329                              <1> ;Now set them as their own owners and not shared status.
   330 0000364D 488D3518EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl
   331 00003654 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   332 0000365A 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]
   333 0000365D 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   334 00003663 E966FFFFFF          <1>     jmp .skipSingle
   335                              <1> ;------------------------
   336                              <1> ; Procedures for init
   337                              <1> ;------------------------
   338                              <1> 
   339                              <1> .processMbr:
   340                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   341                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   342 00003668 E8A4010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   343                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   344                              <1> ; ptn. We process it, invalidate the entry then start again
   345 0000366D 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   346 00003674 7539                <1>     jne .pmbrNoHack
   347 00003676 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   348 0000367D B904000000          <1>     mov ecx, 4
   349                              <1> .pmbrHackLp:
   350 00003682 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   351 00003685 740D                <1>     je .pmbrHackFnd
   352                              <1> .pmbrHackRet:
   353 00003687 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   354 0000368E FFC9                <1>     dec ecx
   355 00003690 75F0                <1>     jnz .pmbrHackLp
   356 00003692 EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   357                              <1> .pmbrHackFnd:
   358 00003694 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   359 00003698 E831020000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   360 0000369D 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   361 0000369F C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   362 000036A6 E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   363                              <1> ;Ignore any read errors, but we start again.
   364 000036AB C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   365                              <1> ;Now we fall down and start again
   366                              <1> .pmbrNoHack:
   367 000036AF C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   368 000036B6 488D35(06000000)    <1>     lea rsi, mbrE
   369                              <1> .pmbrLp:
   370 000036BD 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   371 000036C0 E817020000          <1>     call .checkMbrPtnType
   372 000036C5 7551                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   373 000036C7 E802020000          <1>     call .checkDataPtn
   374 000036CC 740A                <1>     je .pmbrDodata
   375 000036CE E85E000000          <1>     call .processEPtn   ;Here we process EBR
   376                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000036D3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000036D5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   377 000036D6 EB38                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   378                              <1> .pmbrDodata:
   379 000036D8 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   380 000036DB E863010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   381 000036E0 730E                <1>     jnc .pmbrOk
   382                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000036E2 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000036E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   383                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   384 000036E5 E8D6000000          <1>     call .getUfmtSize
   385 000036EA 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   386                              <1> .pmbrOk:
   387 000036F0 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   388 000036F6 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   389 000036FA 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   390 000036FD 2580000000          <1>     and eax, ptnActive
   391 00003702 0D01000000          <1>     or eax, ptnPrimary
   392 00003707 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   393 0000370B E8D5000000          <1>     call .advDiskPtrs
   394                              <1> .pmbrXtrejoin:
   395 00003710 E8C8000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   396                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003715 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003717 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   397                              <1> .pmbrNext:
   398 00003718 FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   399 0000371E 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   400                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003725 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003727 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   401 00003728 4881C610000000      <1>     add rsi, mbrEntry_size
   402 0000372F EB8C                <1>     jmp short .pmbrLp
   403                              <1> 
   404                              <1> .processEPtn:
   405                              <1> ;Process all logical process in an extended partition. rsi points to
   406                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   407                              <1> ;Thus we always know the "root" sector of this extended partition.
   408 00003731 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   409                              <1> .peplp:
   410 00003734 E8F4000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   411                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003739 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000373B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   412 0000373C 66813D5DDEFFFF55AA  <1>     cmp word [msdDriver.inBuffer + ebr.mbrSig], 0AA55h
   413 00003745 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   414 00003747 F9                  <1>     stc
   415                              <1>     return
    13                              <2> %%_ret:
    14 00003748 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> .pep1:
   417 00003749 E8B2000000          <1>     call .copyEbr       ;Save the EBR
   418                              <1> ;Now we check the saved EBR is valid.
   419 0000374E 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   420 00003755 E86C010000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   421 0000375A 7551                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   422 0000375C 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   423 00003763 E866010000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   424 00003768 7443                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   425                              <1> ;Now we get the absolute start sector of this partition.
   426 0000376A 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   427 00003770 E8CE000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB (preserves sector number)
   428 00003775 730E                <1>     jnc .pepOk
   429                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003777 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003779 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   430                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   431 0000377A E841000000          <1>     call .getUfmtSize
   432 0000377F 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   433                              <1> .pepOk:
   434                              <1> ;If here, this partition will be given a CDS entry.
   435                              <1> ;Now we go to the next logical partition in the extended partition and
   436                              <1> ; move to the next drive
   437 00003785 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   438 0000378B C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   439 0000378F 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   440 00003792 2580000000          <1>     and eax, ptnActive
   441 00003797 0D02000000          <1>     or eax, ptnLogical
   442 0000379C 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   443 000037A0 E840000000          <1>     call .advDiskPtrs
   444 000037A5 E833000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   445                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000037AA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000037AC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   446                              <1> .pepNextEbr:
   447                              <1> ;Else we now walk the disk linked list.
   448 000037AD 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   449 000037B3 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   450                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000037B5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000037B7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   451 000037B8 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   452 000037BB E974FFFFFF          <1>     jmp .peplp
   453                              <1> 
   454                              <1> .getUfmtSize:
   455                              <1> ;Moves the partition geometry information into drvBlk from MBR. This is only
   456                              <1> ; a necessity if the medium doesn't have a trustworthy BPB. Doesn't touch CHS 
   457                              <1> ; stuff because bleugh. That can be computed by FORMAT.
   458                              <1> ;
   459                              <1> ;This is done so that unformatted partitions are mounted by DOS. They cannot 
   460                              <1> ; be used, and so needs to be FORMATed. Thus, NumFAT=0 should only really 
   461                              <1> ; happen on hard drive partitions at boot.
   462                              <1> ;
   463                              <1> ;Input: rsi -> MBR/EBR entry for this partition
   464                              <1> ;       rbp -> drvBlk for this drive we are setting up
   465                              <1> ;       rcx = Sector number of the start of the partition
   466                              <1> ;
   467                              <1> ;Output: The following fields in the drvBlk are filled in
   468                              <1> ;       bNumFAT = Number of FATs on partition (0 as unformatted)
   469                              <1> ;       dHiddSec = Starting sector of the partition
   470                              <1> ;       dTotSec32 = 32 bit size of partition (if large enough)
   471                              <1> ;       wTotSec16 = 16 bit size of partition or 0 if 32 bit in use
   472 000037C0 C6450F00            <1>     mov byte [rbp + drvBlk.bNumFAT], 0 ;Indicate no FATs on ufmt ptn.
   473 000037C4 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx  ;Set start sector of partition
   474 000037C7 8B4E0C              <1>     mov ecx, dword [rsi + mbrEntry.numSectors]
   475 000037CA 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   476 000037D0 7605                <1>     jbe .gpgSmol
   477 000037D2 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   478 000037D5 31C9                <1>     xor ecx, ecx
   479                              <1> .gpgSmol:
   480 000037D7 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   481 000037DB F8                  <1>     clc
   482                              <1>     return
    13                              <2> %%_ret:
    14 000037DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> .physCheckEnd:
   485 000037DD 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   486                              <1>     return
    13                              <2> %%_ret:
    14 000037E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   487                              <1> 
   488                              <1> .advDiskPtrs:
   489 000037E5 E88E000000          <1>     call .getNumCyl     ;Computes the number of cylinders in the BPB
   490 000037EA E8C1000000          <1>     call .xfrBkupBpb    ;Finish drvBlk init by transfering dfltBPB
   491 000037EF 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   492 000037F3 FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   493 000037F9 FE05(00000000)      <1>     inc byte [physVol]
   494                              <1>     return
    13                              <2> %%_ret:
    14 000037FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> .copyEbr:
   497                              <1> ;Copies the EBR from the EBR sector in the buffer
   498 00003800 51                  <1>     push rcx
   499 00003801 56                  <1>     push rsi
   500 00003802 57                  <1>     push rdi
   501 00003803 488D3D(06000000)    <1>     lea rdi, mbrE
   502 0000380A B920000000          <1>     mov ecx, 2*mbrEntry_size
   503 0000380F EB0F                <1>     jmp short .cpmbr
   504                              <1> .copyMbr:
   505                              <1> ;Copies the MBR from the MBR sector in the buffer
   506 00003811 51                  <1>     push rcx
   507 00003812 56                  <1>     push rsi
   508 00003813 57                  <1>     push rdi
   509 00003814 488D3D(06000000)    <1>     lea rdi, mbrE
   510 0000381B B940000000          <1>     mov ecx, 4*mbrEntry_size
   511                              <1> .cpmbr:
   512 00003820 488D353BDDFFFF      <1>     lea rsi, qword [msdDriver.inBuffer + mbr.mbrEntry1]
   513 00003827 F3A4                <1>     rep movsb
   514 00003829 5F                  <1>     pop rdi
   515 0000382A 5E                  <1>     pop rsi
   516 0000382B 59                  <1>     pop rcx
   517                              <1>     return
    13                              <2> %%_ret:
    14 0000382C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> .readSector:
   520                              <1> ;Input: ecx = Sector to read
   521 0000382D 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   522 00003834 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   523 00003839 488D1D64DBFFFF      <1>     lea rbx, msdDriver.inBuffer
   524 00003840 CD33                <1>     int 33h
   525                              <1>     return
    13                              <2> %%_ret:
    14 00003842 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> .ptnUpdateBpb:
   528                              <1> ;Setups up the call for below on the current partition.
   529                              <1> ;Input: ecx = Number of hidden sectors (preserved)
   530                              <1> ;Output:
   531                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   532                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   533                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   534 00003843 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   535 00003849 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   536 0000384C 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   537 00003853 884509              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   538 00003856 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   539 0000385D 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   540 00003860 51                  <1>     push rcx
   541 00003861 56                  <1>     push rsi    ;Save the mbr entry ptr
   542 00003862 E8BECFFFFF          <1>     call msdDriver.updateBpb
   543 00003867 7209                <1>     jc .pubBad
   544 00003869 E8CDD0FFFF          <1>     call msdDriver.moveVolIds
   545 0000386E 5E                  <1>     pop rsi
   546 0000386F 59                  <1>     pop rcx
   547 00003870 F8                  <1>     clc         ;Always clean even if no ids
   548                              <1>     return
    13                              <2> %%_ret:
    14 00003871 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .pubBad:
   550 00003872 5E                  <1>     pop rsi
   551 00003873 59                  <1>     pop rcx
   552 00003874 3C07                <1>     cmp al, drvBadMed ;Bad Partition?
   553 00003876 F9                  <1>     stc         ;Ensure we set the CF again
   554                              <1>     return
    13                              <2> %%_ret:
    14 00003877 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> .getNumCyl:
   557                              <1> ;Computes the number of cylinders on the media. Not really to be used.
   558                              <1> ;Input: rbp -> drvBlk
   559 00003878 50                  <1>     push rax
   560 00003879 51                  <1>     push rcx
   561 0000387A 52                  <1>     push rdx
   562 0000387B 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
   563 0000387F 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
   564 00003883 F7E1                <1>     mul ecx ;Get sectors per cylinder in eax. edx = 0
   565 00003885 85C0                <1>     test eax, eax   ;If ax is 0, store zero! Phoney CHS data in BPB.
   566 00003887 7414                <1>     jz .gncExit     ;This prevents CHS IOCTL from occuring.
   567 00003889 89C1                <1>     mov ecx, eax    ;Save this number in ecx
   568 0000388B 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   569 0000388F 85C0                <1>     test eax, eax   ;If this is zero, get the 32 bit count of sectors
   570 00003891 0F44451F            <1>     cmovz eax, dword [rbp + drvBlk.dTotSec32]
   571 00003895 F7F1                <1>     div ecx     ;sectors/(sectors/cylinder) = whole cylinders in eax
   572 00003897 85D2                <1>     test edx, edx
   573 00003899 7402                <1>     jz .gncExit
   574 0000389B FFC0                <1>     inc eax     ;Inc the cylinder count to account for not whole divide
   575                              <1> .gncExit:
   576 0000389D BAFFFF0000          <1>     mov edx, 0FFFFh   ;A default Max cylinder value, since CHS is for floppies.
   577 000038A2 39D0                <1>     cmp eax, edx
   578 000038A4 0F47C2              <1>     cmova eax, edx
   579 000038A7 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   580 000038AB F8                  <1>     clc ;Ensure CF is clear
   581 000038AC 5A                  <1>     pop rdx
   582 000038AD 59                  <1>     pop rcx
   583 000038AE 58                  <1>     pop rax
   584                              <1>     return
    13                              <2> %%_ret:
    14 000038AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> .xfrBkupBpb:
   587                              <1> ;Makes a copy of the reported bpb in the drvBlk for formatting backups
   588 000038B0 51                  <1>     push rcx
   589 000038B1 56                  <1>     push rsi
   590 000038B2 57                  <1>     push rdi
   591 000038B3 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
   592 000038B7 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sBkupBPB]
   593 000038BB B929000000          <1>     mov ecx, drvBlkBpb_size
   594 000038C0 F3A4                <1>     rep movsb
   595 000038C2 5F                  <1>     pop rdi
   596 000038C3 5E                  <1>     pop rsi
   597 000038C4 59                  <1>     pop rcx
   598                              <1>     return
    13                              <2> %%_ret:
    14 000038C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> .checkEbrPtnType:
   601                              <1> ;Input: al = Partition type
   602                              <1> ;Output: ZF=ZE => Valid partition type found
   603                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   604 000038C6 E811000000          <1>     call .checkMbrPtnType
   605                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000038CB 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000038CD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   606                              <1> .checkDataPtn:
   607 000038CE 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   608 000038D0 7407                <1>     je .ceptBad
   609 000038D2 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   610 000038D4 7403                <1>     je .ceptBad
   611 000038D6 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   612                              <1>     return
    13                              <2> %%_ret:
    14 000038D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> .ceptBad:
   614 000038D9 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   615                              <1>     return
    13                              <2> %%_ret:
    14 000038DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> .checkMbrPtnType:
   618                              <1> ;Input: al = Partition type
   619                              <1> ;Output: ZF=ZE => Valid partition type found
   620                              <1> ;        ZF=NZ => Not a valid partition type
   621 000038DC 51                  <1>     push rcx
   622 000038DD 57                  <1>     push rdi
   623 000038DE 488D3D0A000000      <1>     lea rdi, .ptnTbl
   624 000038E5 B909000000          <1>     mov ecx, .ptnTblL
   625 000038EA F2AE                <1>     repne scasb ;Find the entry in al
   626 000038EC 5F                  <1>     pop rdi
   627 000038ED 59                  <1>     pop rcx
   628                              <1>     return
    13                              <2> %%_ret:
    14 000038EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> ;Table contents:
   631                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   632                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   633                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   634                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   635                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   636                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   637                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   638                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   639 000038EF 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   640                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [8705000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqPktPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     5                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     6 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     7 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     8 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
     9 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    10 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    11 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    12 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    13 00000066 <res D0h>           <1> bpbArray    dq drvBlkTblL dup (?)
    38 00000136 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+4+2 passes

