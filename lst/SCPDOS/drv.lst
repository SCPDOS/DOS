     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen db ?  ;Length of the request header
    90                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde db ?  ;Command code
    92                              <1>     .status dw ?  ;Status word
    93                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqPkt
    98                              <1>     drvReqPktM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqPktM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   104 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   114 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   123 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   132 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqPktM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   180 0000000D ??                  <1>     .majfun db ?  ;Major function number
   181 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> ;IOCTL structs
   200                              <1> 
   201                              <1> struc lbaParamsBlock
   202 00000000 ??                  <1>     .size           db ?
   203 00000001 ??                  <1>     .bSpecFuncs     db ?    ;Bit[0] clear means get updated drive info. 
   204                              <1>                             ;Bit[0] set means get current drive info.
   205                              <1>                             ;Only meaningful on read. Set must have this as 0.
   206 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   207 00000004 ????????            <1>     .res            db 4 dup (?)
   208 00000008 ????????????????    <1>     .sectorSize     dq ?    ;Only the lower word is valid here
   209 00000010 ????????????????    <1>     .numSectors     dq ?    ;Only the lower dword is valid here
   210                              <1> ;The below is the absolute start sector of the partition. It is the 
   211                              <1> ; partition at which to find the BPB.
   212 00000018 ????????????????    <1>     .startSector    dq ?    ;Only the lower dword is valid here.
   213                              <1> endstruc
   214                              <1> 
   215                              <1> struc lbaIOBlock
   216 00000000 ??                  <1>     .size           db ?
   217 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   218 00000002 ????????????        <1>     .res            db 6 dup (?)
   219 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start write at
   220 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   221                              <1> endstruc
   222                              <1> 
   223                              <1> struc lbaFormatBlock
   224 00000000 ??                  <1>     .size           db ?
   225 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   226 00000002 ????????????        <1>     .res            db 6 dup (?)
   227 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start format at
   228                              <1> endstruc
   229                              <1> 
   230                              <1> struc chsParamsBlock
   231 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   232 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   233 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   234 00000004 ????                <1>     .wNumCyl    dw ?
   235 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   236 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   237                              <1>     .TrackLayout:
   238                              <1> endstruc
   239                              <1> 
   240                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   241                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   242                              <1> ;Only used in setparams requests. Ignored for getparams 
   243                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   244                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   245                              <1> 
   246                              <1> 
   247                              <1> struc chsIOBlock
   248 00000000 ??                  <1>     .bSpecFuncs     db ?
   249 00000001 ????                <1>     .wStartHead     dw ?
   250 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   251 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   252 00000007 ????                <1>     .wNumSectors    dw ?
   253 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   254                              <1> endstruc
   255                              <1> 
   256                              <1> struc chsFormatBlock
   257 00000000 ??                  <1>     .bSpecFuncs db ?
   258 00000001 ????                <1>     .wStartHead dw ?
   259 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   260                              <1> endstruc
   261                              <1> 
   262                              <1> struc accFlgBlk
   263 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   264 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   265                              <1> endstruc
   266                              <1> 
   267                              <1> struc idParamBlk
   268 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   269 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   270 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   271 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   272                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB
    19 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    20 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    21 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    22 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    23 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    24 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    25 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    26 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    27 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    28 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    29 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    30 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc extBs
    34                              <1> ;Extended bootsector structure. If present, comes immediately after 
    35                              <1> ; BPB in bootsector
    36 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    37 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    38 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    39 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    40 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    41 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    42                              <1> endstruc
    43                              <1> extBsSig    equ 29h
    44                              <1> 
    45                              <1> struc bpb32       ;FAT 32 BPB
    46 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    47 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    48 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    49 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    50 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    51 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    52 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    53 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    54 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    55 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    56 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    57 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    58 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    59 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    60 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    61 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    62 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    63 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    64 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    65                              <1> endstruc
    66                              <1> 
    67                              <1> struc FSInfo
    68 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    69 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    70 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    71 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    72 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    73 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    74 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> fsInfoSig1  equ 041615252h
    78                              <1> fsInfoSig2  equ 061417272h
    79                              <1> fsInfoSig3  equ 0AA550000h
    80                              <1> 
    81                              <1> struc mbr
    82 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    83 000001B8 ????????            <1>     .diskID     dd ?
    84 000001BC ????                <1>     .reserved   dw ?
    85 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    86 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    87 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    88 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    89 000001FE ????                <1>     .mbrSig     dw ?
    90                              <1> endstruc
    91                              <1> 
    92                              <1> struc ebr   ;A special type of MBR
    93 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    94 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
    95 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
    96 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
    97 000001FE ????                <1>     .mbrSig     dw ?
    98                              <1> endstruc
    99                              <1> 
   100                              <1> struc mbrEntry
   101 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   102 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   103 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   104 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   105 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   106 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   107                              <1> endstruc
   108                              <1> 
   109                              <1> struc fatDirEntry
   110 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   111 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   112 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   113 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   114 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   115 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   116 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   117 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   118 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   119 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   120 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   121 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139                              <1>     ;.jmpBoot                db 3 dup (?)
   140                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   141                              <1> ;BPB starts here
   142 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   143 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   144 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   145 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   146 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   147 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   148 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   149 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   150 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   151 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   152 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   153 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   154 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   155 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   156 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   157 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   158 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
     1                              <1> ;No externally defined symbols, no internally exposed symbols.
     2                              <1> 
     3                              <1> ;Driver internal equates
     4                              <1> drvBlkTblL      equ 26  ;Space for 26 drive letters!
     5                              <1> ;IOCTL track table size (max number of sectors in a track is 63)
     6                              <1> maxTrackTblSz   equ 63
     7                              <1> maxAcc          equ 5   ;Maximum accesses to a remdev w/o timer/changeline
     8                              <1> 
     9                              <1> struc drvBlk
    10                              <1> ;--------------------------------------------------------------------
    11                              <1> ; Drvblk Header information
    12                              <1> ;--------------------------------------------------------------------
    13 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    14 00000008 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    15 00000009 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    16                              <1> ;--------------------------------------------------------------------
    17                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    18                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    19                              <1> ;  left in those fields... not a problem)
    20                              <1> ;--------------------------------------------------------------------
    21                              <1> .bpb:
    22 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    23 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    24 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    25 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    26 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    27 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
    28 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
    29 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
    30 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
    31 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
    32 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
    33 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
    34                              <1> ;--------------------------------------------------------------------
    35                              <1> ; The below vars are only accessed on FAT32 volumes
    36                              <1> ;--------------------------------------------------------------------
    37 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
    38 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
    39 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
    40 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
    41 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
    42 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
    43                              <1> ;--------------------------------------------------------------------
    44                              <1> ; DrvBlk flags
    45                              <1> ;--------------------------------------------------------------------
    46 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
    47 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
    48 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
    49 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
    50                              <1> ;The below word is a legacy thing. It is only used in a CHS based IOCTL call.
    51 00000039 ????                <1>     .wNumCyl    dw ?
    52 0000003B <res 35h>           <1>     .sDfltBPB   db bpb32_size dup (?)   ;Default capacity BPB for drive
    53                              <1> .dAccTime:          ;Last media check time if remdev
    54 00000070 ????????            <1>     .wPtnType   dd ?    
    55                              <1> ;--------------------------------------------------------------------
    56                              <1> ; Volume string and id for the drive described by this drvblk
    57                              <1> ;--------------------------------------------------------------------
    58 00000074 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
    59 0000007F ??                  <1>                 db ?            ;Null terminator for string
    60 00000080 ????????            <1>     .volId      dd ?            ;Volume serial number            
    61 00000084 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
    62 0000008C ??                  <1>                 db ?            ;Null terminator for string
    63                              <1> endstruc
    64                              <1> 
    65                              <1> ;FAT type values
    66                              <1> bpbDskOff   equ 80h ;All Disk accesses return Not Ready (Unrecognised FAT)
    67                              <1> bpbFat16    equ 40h ;FAT 16 disk
    68                              <1> bpbFat32    equ 20h ;FAT 32 disk
    69                              <1> bpbFat12    equ 10h ;FAT 12 disk
    70                              <1> 
    71                              <1> ;Device Flag values
    72                              <1> devFixed    equ 1       ;Set if fixed disk 
    73                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
    74                              <1> devLockBPB  equ 4       ;Makes BuildBPB not build a BPB if set
    75                              <1> devSameSec  equ 8       ;All sectors in track are same size
    76                              <1> devMulti    equ 10h     ;Physical drive has many logical units (A/B share)
    77                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
    78                              <1> devChgd     equ 40h     ;Dev change detected (set on shared physical drives)
    79                              <1>                         ; Can only be set on remdevs with changeline support!
    80                              <1> devSetDASD  equ 80h     ;Set if we need to set drive DASD params before next fmt.
    81                              <1>                         ; Gets set if new parameters are written to drive!
    82                              <1> devNewParms equ 100h    ;Set if new drive parameters set! Set on IOCTL setparms.
    83                              <1> devUnFmt    equ 200h    ;Disables reads/writes if set
    84                              <1> 
    85                              <1> ;Media byte bits
    86                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
    87                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
    88                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
    89                              <1> 
    90                              <1> ;Partition types
    91                              <1> ptnPrimary  equ 1       ;A primary MBR partition
    92                              <1> ptnLogical  equ 2       ;A logical MBR partition
    93                              <1> ptnActive   equ 80h     ;An active partition
    94                              <1> ptnGpt      equ 4       ;A primary GPT partition
    95                              <1> ptrUnknown  equ 8000h   ;An unknown partition
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E8C02F0000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E8AD2E0000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 7408                <1>     jz .prnExit 
   513                              <1>     ;Everything else, device not ready
   514 000004AD B002                <1>     mov al, drvNotReady
   515                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   516 000004AF B480                <1>     mov ah, 80h ;Set error bit
   517 000004B1 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   518                              <1> .prnExit:
   519 000004B5 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   520 000004BB 5B                  <1>     pop rbx
   521 000004BC 58                  <1>     pop rax
   522 000004BD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> ; This file contains five main routines:
     2                              <1> ; 1) Replacement Int 39h routine (for unhooking interrupts back).
     3                              <1> ; 2) Replacement Int 33h routine.
     4                              <1> ; 3) Int 33h replacement routine.
     5                              <1> ; 4) Driver itself
     6                              <1> ; 5) Int 2Fh Driver backdoor routine
     7                              <1> 
     8 000004BE 0000000000000000    <1> i39Org  dq 0    ;Original BIOS Int 39h to replace on Int 39h
     9 000004C6 0000000000000000    <1> i33Org  dq 0    ;Original BIOS Int 33h to replace on Int 39h.
    10 000004CE 0000000000000000    <1> i2FNext dq 0    ;Previous Int 2Fh handler
    11 000004D6 0000000000000000    <1> i33Next dq 0    ;Current disk driver to call.
    12                              <1> 
    13                              <1> ;Replacement Int 39h routine to replace interrupts these drivers hook.
    14                              <1> dosInt39h:
    15                              <1> ;For now, we just replace int 33h and int 39h back and then jump to i39h
    16 000004DE B833250000          <1>     mov eax, 2533h
    17 000004E3 488B15DCFFFFFF      <1>     mov rdx, qword [i33Org]
    18 000004EA CD21                <1>     int 21h
    19 000004EC B839250000          <1>     mov eax, 2539h
    20 000004F1 488B15C6FFFFFF      <1>     mov rdx, qword [i39Org]
    21 000004F8 CD21                <1>     int 21h
    22                              <1> ;And now do the actual warm reboot
    23 000004FA FF25BEFFFFFF        <1>     jmp qword [i39Org]
    24                              <1> 
    25                              <1> ;Replacement Int 33h routine
    26                              <1> dosInt33h:
    27                              <1> ;--------------------------------------------------------------------------
    28                              <1> ;       This is a wrapper around the BIOS Int 33h handler.
    29                              <1> ;--------------------------------------------------------------------------
    30                              <1> ;This routine does the following:
    31                              <1> ;1) Checks if a format request is being made, in which case
    32                              <1> ;   it will ensure that the devSetDASD and devChgd bits are set for all 
    33                              <1> ;   drives for the BIOS drive in dl to ensure that the DOS driver treats
    34                              <1> ;   the DOS drives properly.
    35                              <1> ;
    36                              <1> ; For the most part (CHS is depreciated so we don't talk about it here):
    37                              <1> ;   AH = Function number (05h/85h is FORMAT)
    38                              <1> ;   AL = Number of sectors to xact.
    39                              <1> ;   RBX -> Points to a xfr buffer.
    40                              <1> ;   RCX = Start sector of xft.
    41                              <1> ;   DL = BIOS Drive number to xact on.
    42                              <1> ;--------------------------------------------------------------------------
    43                              <1> ;Enter the DOS driver critical section . When the MSD driver enters this it 
    44                              <1> ; already has the lock so this simply incs the count. If a process attempts 
    45                              <1> ; to bypass DOS and we are already processing a request it gets put on ice.
    46                              <1> ;--------------------------------------------------------------------------
    47                              <1> ;Start by clearing the CF on entry
    48 00000500 80642410FE          <1>     and byte [rsp + 2*8], ~1
    49                              <1> ;Enter the device critical section
    50 00000505 50                  <1>     push rax
    51 00000506 B802800000          <1>     mov eax, 8002h
    52 0000050B CD2A                <1>     int 2ah
    53 0000050D 58                  <1>     pop rax
    54                              <1> ;Now put the retaddr in the var we own 
    55 0000050E 8F0552000000        <1>     pop qword [.tmp]
    56                              <1> ;Now check that we are not formatting. If we are, we need to set the bit on
    57                              <1> ; all DOS drives that use this BIOS drive that it has been formatted and 
    58                              <1> ; changed.
    59 00000514 50                  <1>     push rax    ;Push the function number on stack
    60 00000515 80E47F              <1>     and ah, 7Fh ;Clear the top bit (as both 05h and 85h are formats)
    61 00000518 80FC05              <1>     cmp ah, 05h
    62 0000051B 7405                <1>     je .format
    63 0000051D 80FC07              <1>     cmp ah, 07h ;Undocumented SCSI format?
    64 00000520 750A                <1>     jne .notFormat
    65                              <1> .format:
    66                              <1> ;Here we register the format request!
    67 00000522 B8C0000000          <1>     mov eax, devChgd | devSetDASD   ;Bits to set in flags
    68 00000527 E86D0B0000          <1>     call msdDriver.setBitsForAllDevs
    69                              <1> .notFormat:
    70 0000052C 58                  <1>     pop rax     ;Get the function number from stack
    71                              <1> ;Call previous handler and exit irq in this call.
    72 0000052D 881532000000        <1>     mov byte [.drv], dl ;Save the drive we are acting on
    73 00000533 FF159DFFFFFF        <1>     call qword [i33Next]    
    74 00000539 731A                <1>     jnc .exitI33
    75 0000053B 80FC06              <1>     cmp ah, 06h     ;Did a swap occur?
    76 0000053E 7515                <1>     jne .exitI33    ;All other errors get bubbled up
    77                              <1> ;Here we ensure that on all drives with this BIOS number, we 
    78                              <1> ; register that the swap occured :)
    79 00000540 50                  <1>     push rax
    80 00000541 52                  <1>     push rdx
    81 00000542 0FB6151C000000      <1>     movzx edx, byte [.drv]
    82 00000549 B840000000          <1>     mov eax, devChgd    ;Set the device changed bit on all devices
    83 0000054E E8460B0000          <1>     call msdDriver.setBitsForAllDevs
    84 00000553 5A                  <1>     pop rdx
    85 00000554 58                  <1>     pop rax
    86                              <1> .exitI33:
    87                              <1> ;Replace the retaddr back on the stack
    88 00000555 FF350B000000        <1>     push qword [.tmp]
    89                              <1> ;Exit the device critical section now
    90 0000055B 50                  <1>     push rax
    91 0000055C B802810000          <1>     mov eax, 8102h
    92 00000561 CD2A                <1>     int 2ah
    93 00000563 58                  <1>     pop rax
    94                              <1> ;And finally go back to the caller :)
    95                              <1>     return
    13                              <2> %%_ret:
    14 00000564 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    96                              <1> ;Local data for the main IRQ handler
    97 00000565 00                  <1> .drv    db 0    ;Drive we are acting ok
    98 00000566 0000000000000000    <1> .tmp    dq 0
    99                              <1> 
   100                              <1> ;Int 33h replacement routine
   101                              <1> i2fhSwap33h:
   102                              <1> ;Replaces the current int 33h handler and the int 39h replacement handler
   103                              <1> ;Input: ah = 13h
   104                              <1> ;       rdx -> New Int 33h handler.
   105                              <1> ;       rbx -> Value to replace back when system shutdown occurs.
   106                              <1> ;Output:
   107                              <1> ;       rdx -> Replaced Int 33h handler.
   108                              <1> ;       rbx -> Replaced original lowest level Int 33h handler.
   109 0000056E 80FC13              <1>     cmp ah, 13h
   110 00000571 0F85440B0000        <1>     jne msdDriver.i2fDriver ;Goto the driver backdoor if not this handler 
   111 00000577 48871558FFFFFF      <1>     xchg qword [i33Next], rdx
   112 0000057E 48871D41FFFFFF      <1>     xchg qword [i33Org], rbx
   113 00000585 48CF                <1>     iretq
   114                              <1> 
   115                              <1> ; Actual driver here
   116                              <1> msdDriver:
   117 00000587 50                  <1>     push rax
   118 00000588 53                  <1>     push rbx
   119 00000589 51                  <1>     push rcx
   120 0000058A 52                  <1>     push rdx
   121 0000058B 56                  <1>     push rsi
   122 0000058C 57                  <1>     push rdi
   123 0000058D 55                  <1>     push rbp
   124 0000058E 4150                <1>     push r8
   125 00000590 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the ptr to the req header in rbx
   126 00000597 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
   127 0000059B 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
   128 000005A1 7741                <1>     ja .errBadCmd                 ;If yes, error!
   129 000005A3 488D2D4D000000      <1>     lea rbp, .fnTbl
   130 000005AA 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
   131 000005AF 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
   132 000005B2 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
   133 000005B4 7417                <1>     jz .exit
   134 000005B6 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
   135 000005B9 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
   136 000005BD 752C                <1>     jne .errBadPkt
   137 000005BF 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
   138 000005C2 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
   139 000005C6 E887090000          <1>     call .setupDrive    ;Returns rbp -> Table entry
   140                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
   141 000005CB FFD6                <1>     call rsi 
   142                              <1> .exit:
   143 000005CD 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get back the req header ptr
   144 000005D4 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
   145 000005DA 4158                <1>     pop r8
   146 000005DC 5D                  <1>     pop rbp
   147 000005DD 5F                  <1>     pop rdi
   148 000005DE 5E                  <1>     pop rsi
   149 000005DF 5A                  <1>     pop rdx
   150 000005E0 59                  <1>     pop rcx
   151 000005E1 5B                  <1>     pop rbx
   152 000005E2 58                  <1>     pop rax
   153 000005E3 C3                  <1>     ret
   154                              <1> 
   155                              <1> .errBadCmd:
   156 000005E4 B803000000          <1>     mov eax, drvBadCmd
   157 000005E9 EB05                <1>     jmp short .writeEntryError
   158                              <1> .errBadPkt:
   159 000005EB B805000000          <1>     mov eax, drvBadDrvReq
   160                              <1> .writeEntryError:
   161                              <1> ;Used for errors in the driver entry
   162 000005F0 E8E0000000          <1>     call .errorExit
   163 000005F5 EBD6                <1>     jmp short .exit
   164                              <1> 
   165                              <1> 
   166                              <1> .fnTbl:
   167                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
   168                              <1> ; to function, high word is packet size for check
   169                              <1>     ;dw .initShim - .fnTbl        ;Function 0
   170 000005F7 1E2B                <1>     dw msdInit - .fnTbl
   171 000005F9 1F00                <1>     dw initReqPkt_size
   172 000005FB EC00                <1>     dw .medChk - .fnTbl          ;Function 1
   173 000005FD 1700                <1>     dw mediaCheckReqPkt_size
   174 000005FF 7601                <1>     dw .buildBPB - .fnTbl        ;Function 2
   175 00000601 1E00                <1>     dw bpbBuildReqPkt_size
   176 00000603 4303                <1>     dw .IOCTLRead - .fnTbl       ;Function 3
   177 00000605 2A00                <1>     dw ioReqPkt_size
   178 00000607 4403                <1>     dw .read - .fnTbl            ;Function 4
   179 00000609 2A00                <1>     dw ioReqPkt_size
   180 0000060B 0000                <1>     dw 0                         ;Function 5
   181 0000060D 0000                <1>     dw 0
   182 0000060F 0000                <1>     dw 0                         ;Function 6
   183 00000611 0000                <1>     dw 0
   184 00000613 0000                <1>     dw 0                         ;Function 7
   185 00000615 0000                <1>     dw 0
   186 00000617 6D03                <1>     dw .write - .fnTbl           ;Function 8
   187 00000619 2A00                <1>     dw ioReqPkt_size
   188 0000061B 6D03                <1>     dw .write - .fnTbl           ;Function 9
   189 0000061D 2A00                <1>     dw ioReqPkt_size
   190 0000061F 0000                <1>     dw 0                         ;Function 10
   191 00000621 0000                <1>     dw 0
   192 00000623 0000                <1>     dw 0                         ;Function 11
   193 00000625 0000                <1>     dw 0
   194 00000627 4303                <1>     dw .IOCTLWrite - .fnTbl      ;Function 12
   195 00000629 2A00                <1>     dw ioReqPkt_size
   196 0000062B 5F04                <1>     dw .devOpen - .fnTbl         ;Function 13
   197 0000062D 0D00                <1>     dw openReqPkt_size
   198 0000062F 6D04                <1>     dw .devClose - .fnTbl        ;Function 14
   199 00000631 0D00                <1>     dw closeReqPkt_size
   200 00000633 7B04                <1>     dw .remMed - .fnTbl          ;Function 15
   201 00000635 0D00                <1>     dw remMediaReqPkt_size
   202 00000637 0000                <1>     dw 0                         ;Function 16
   203 00000639 0000                <1>     dw 0
   204 0000063B 0000                <1>     dw 0                         ;Function 17
   205 0000063D 0000                <1>     dw 0
   206 0000063F 0000                <1>     dw 0                         ;Function 18
   207 00000641 0000                <1>     dw 0
   208 00000643 8B04                <1>     dw .IOCTL - .fnTbl           ;Function 19
   209 00000645 2700                <1>     dw ioctlReqPkt_size
   210 00000647 0000                <1>     dw 0                         ;Function 20
   211 00000649 0000                <1>     dw 0
   212 0000064B 0000                <1>     dw 0                         ;Function 21
   213 0000064D 0000                <1>     dw 0
   214 0000064F 0000                <1>     dw 0                         ;Function 22
   215 00000651 0000                <1>     dw 0
   216 00000653 1F09                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   217 00000655 0D00                <1>     dw getDevReqPkt_size
   218 00000657 5509                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   219 00000659 0D00                <1>     dw setDevReqPkt_size
   220                              <1> 
   221                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   222                              <1> .errorXlat:
   223 0000065B 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   224 00000662 B800010000          <1>     mov eax, 0100h
   225 00000667 E81E0A0000          <1>     call .callI33h ;Read status of last operation
   226 0000066C 7265                <1>     jc .genErrExit
   227                              <1> .ioError:   ;Jumped to from the block IO proc with rbx -> reqHdr already
   228 0000066E 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
   229 00000671 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   230 00000673 7460                <1>     je .errorExit 
   231 00000675 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   232 00000677 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   233 0000067A 7459                <1>     je .errorExit 
   234 0000067C 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   235 0000067F 7454                <1>     je .errorExit
   236                              <1> ;Device Not Ready
   237 00000681 B002                <1>     mov al, 02h  ;Device not ready code
   238 00000683 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   239 00000686 744D                <1>     je .errorExit
   240 00000688 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   241 0000068C 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   242                              <1> ;Write Protected
   243 00000690 30C0                <1>     xor al, al
   244 00000692 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   245 00000697 743C                <1>     je .errorExit
   246                              <1> ;CRC Error
   247 00000699 B004                <1>     mov al, 04h     ;CRC error code
   248 0000069B 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   249 000006A0 7433                <1>     je .errorExit
   250 000006A2 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   251 000006A7 742C                <1>     je .errorExit
   252 000006A9 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   253 000006AE 7425                <1>     je .errorExit
   254                              <1> ;Seek Error
   255 000006B0 B006                <1>     mov al, 06h     ;Seek error code
   256 000006B2 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   257 000006B5 741E                <1>     je .errorExit
   258                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   259                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   260 000006B7 B007                <1>     mov al, 07h
   261 000006B9 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   262 000006BC 7417                <1>     je .errorExit
   263                              <1> ;Sector Not Found
   264 000006BE B008                <1>     mov al, 08h     ;Sector not found code
   265 000006C0 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   266 000006C3 7410                <1>     je .errorExit
   267                              <1> ;Write faults
   268 000006C5 B00A                <1>     mov al, 0Ah     ;Write fault
   269 000006C7 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   270 000006CA 7409                <1>     je .errorExit
   271                              <1> ;Read faults
   272 000006CC B00B                <1>     mov al, 0Bh     ;Read fault
   273 000006CE 80F911              <1>     cmp cl, 11h     ;Read error
   274 000006D1 7402                <1>     je .errorExit
   275                              <1> ;General Errors
   276                              <1> .genErrExit:
   277 000006D3 B00C                <1>     mov al, drvGenFault     ;Everything else is general error
   278                              <1> .errorExit:     ;Jump to with al=Standard Error code
   279 000006D5 B480                <1>     mov ah, 80h ;Set error bit
   280 000006D7 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   281 000006DE 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   282                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 000006E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   285                              <1> .medChk:          ;Function 1
   286                              <1> ;Did this drive have its parameters swapped since the last time?
   287 000006E3 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devNewParms
   288 000006E9 7417                <1>     jz .mcNoFormat
   289                              <1> ;Reset and apply the different logic now :)
   290 000006EB 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devNewParms   ;Clear this bit
   291 000006F1 C605B60A0000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   292 000006F8 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;If fixed, declare changed!
   293 000006FE 7559                <1>     jnz .mmcChange
   294                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   295 00000700 EB08                <1>     jmp short .mcRem
   296                              <1> .mcNoFormat:
   297 00000702 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   298 00000708 7545                <1>     jnz .mmcNoChange
   299                              <1> .mcRem:
   300 0000070A E86C080000          <1>     call .checkDevType
   301 0000070F 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
   302 00000715 7520                <1>     jnz .mmcNoChangeLine
   303 00000717 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   304                              <1> ;Now we do a BIOS changeline check. We rely on it for drives with changeline.
   305                              <1> ;Start by setting the lastDsk to unknown since this only makes sense for
   306                              <1> ; disks without changeline support
   307 0000071A C6058D0A0000FF      <1>     mov byte [.bLastDsk], -1
   308 00000721 66F745374000        <1>     test word [rbp + drvBlk.wDevFlgs], devChgd  ;Was the changed bit set?
   309 00000727 7530                <1>     jnz .mmcChange
   310 00000729 B800160000          <1>     mov eax, 1600h 
   311 0000072E E857090000          <1>     call .callI33h
   312                              <1> ;Use IBM BIOS style reporting of changeline!
   313 00000733 7224                <1>     jc .mmcChange   ;If an error occurs/dev swapped, report changed!
   314 00000735 EB18                <1>     jmp short .mmcNoChange
   315                              <1> .mmcNoChangeLine:
   316                              <1> ; If last accessed medchecked disk was this one and the time on this 
   317                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   318 00000737 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   319 0000073A 86056E0A0000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   320 00000740 3805680A0000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   321 00000746 750C                <1>     jne .mmcUnsure
   322                              <1> ;Else, now we do the famous time check. 
   323 00000748 E80C090000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   324 0000074D 7205                <1>     jc .mmcUnsure
   325                              <1> .mmcNoChange:
   326 0000074F C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   327                              <1>     return
    13                              <2> %%_ret:
    14 00000753 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .mmcUnsure:
   329 00000754 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   330                              <1>     return
    13                              <2> %%_ret:
    14 00000758 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> .mmcChange:
   332                              <1> ;Always store the volume label if we have a volume change.
   333 00000759 C6054E0A0000FF      <1>     mov byte [.bLastDsk], -1    ;Default to unknown disk if a change occured!
   334 00000760 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   335 00000764 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   336 00000768 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   337                              <1>     return
    13                              <2> %%_ret:
    14 0000076C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> 
   339                              <1> .buildBPB:        ;Function 2
   340                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   341                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   342                              <1> ; the table entry bpb which we will be returning.
   343 0000076D 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   344 00000773 7517                <1>     jnz .bbpbExit
   345                              <1> ;------------------------------------------------------
   346                              <1> ; Here for removable devices only!!
   347                              <1> ;------------------------------------------------------
   348 00000775 E839000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   349 0000077A E88A000000          <1>     call .updateBpb ;Fill the BPB entries in the drvBlk
   350 0000077F 0F821A020000        <1>     jc .ioDoErr     ;Errors returned as if from block IO handler
   351 00000785 E8E1000000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   352 0000078A 7300                <1>     jnc .bbpbExit
   353                              <1> ;Here we will search the root directory for the volume label only!
   354                              <1> ;The FS string has been setup and volume ID is set to 0.
   355                              <1> ;
   356                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   357                              <1> ;
   358                              <1> .bbpbExit:
   359 0000078C 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the driver ptr
   360 00000793 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   361 00000797 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   362 0000079A 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   363 000007A1 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   364                              <1>     return
    13                              <2> %%_ret:
    14 000007A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   365                              <1> .bbpbError:
   366 000007A6 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   367 000007A8 0F8427FFFFFF        <1>     je .errorExit   
   368 000007AE E9A8FEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   369                              <1> 
   370                              <1> .resetIds:
   371                              <1> ;We reset the volume id string and label to the default for the 
   372                              <1> ; volume before the reset!
   373 000007B3 50                  <1>     push rax
   374 000007B4 53                  <1>     push rbx
   375 000007B5 51                  <1>     push rcx
   376 000007B6 56                  <1>     push rsi
   377 000007B7 57                  <1>     push rdi
   378                              <1> 
   379                              <1> ;1) Clear volume Id
   380 000007B8 C78580000000000000- <1>     mov dword [rbp + drvBlk.volId], 0
   380 000007C1 00                  <1>
   381                              <1> ;2) Reset the volume label to default
   382 000007C2 488D35DB090000      <1>     lea rsi, .defLbl
   383 000007C9 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   384 000007CD B90C000000          <1>     mov ecx, 12
   385 000007D2 F3A4                <1>     rep movsb
   386                              <1> ;3) Reset the FAT string
   387                              <1> ;Since fat32 indicator is in the middle, compare against it.
   388                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   389 000007D4 488D35C0090000      <1>     lea rsi, .fat32Str
   390 000007DB 488D05A7090000      <1>     lea rax, .fat12Str
   391 000007E2 488D1DA9090000      <1>     lea rbx, .fat16Str
   392 000007E9 F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   393 000007ED 480F47F3            <1>     cmova rsi, rbx
   394 000007F1 480F42F0            <1>     cmovb rsi, rax
   395 000007F5 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   396 000007FC B909000000          <1>     mov ecx, 9
   397 00000801 F3A4                <1>     rep movsb
   398                              <1> 
   399 00000803 5F                  <1>     pop rdi
   400 00000804 5E                  <1>     pop rsi
   401 00000805 59                  <1>     pop rcx
   402 00000806 5B                  <1>     pop rbx
   403 00000807 58                  <1>     pop rax
   404                              <1>     return
    13                              <2> %%_ret:
    14 00000808 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> .updateBpb:
   407                              <1> ;------------------------------------------------------
   408                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   409                              <1> ; or failing, for the BPB indicated by the media byte.
   410                              <1> ;Never called on Fixed devs in normal operation.
   411                              <1> ;------------------------------------------------------
   412                              <1> ;Entered with: 
   413                              <1> ;   rbp -> drvBlk for this drive
   414                              <1> ;------------------------------------------------------
   415                              <1> 
   416 00000809 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBPB
   417                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000080F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000811 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   418 00000812 E809010000          <1>     call .bbpbReadBS    ;Sets up rbx to point to internal disk buffer
   419                              <1>     retc    ;If an error occured, ZF setup according to block IO
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000817 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000819 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   420                              <1> ;Check we if we have a valid bootsector.
   421 0000081A 803B69              <1>     cmp byte [rbx], 069h   ;Direct jump has no NOP
   422 0000081D 7416                <1>     je .newDisk
   423 0000081F 803BE9              <1>     cmp byte [rbx], 0E9h    ;Short jump has no NOP
   424 00000822 7411                <1>     je .newDisk
   425 00000824 807B0290            <1>     cmp byte [rbx + 2], 090h  ;NOP
   426 00000828 7505                <1>     jne .oldDisk
   427 0000082A 803BEB              <1>     cmp byte [rbx], 0EBh      ;JMP SHORT
   428 0000082D 7406                <1>     je .newDisk
   429                              <1> .oldDisk:
   430                              <1>     ;call .bbpbReadFAT   ;Read the FAT sector now instead
   431                              <1>     ;retc    ;If an error occured, ZF setup according to block IO
   432                              <1>     ;mov ax, word [rbx]
   433                              <1>     ;and ax, 0FFFh
   434                              <1>     ;cmp ah, 0Fh     ;High byte must be 0Fh at this point.
   435                              <1>     ;jne .bbpbErr
   436                              <1>     ;call .bbpbCheckMedByt   ;Checks media byte to be valid
   437                              <1>     ;jnz .bbpbErr
   438                              <1>     ;cmp al, 0F0h    ;0F0h and 0F8h are not acceptable here as they need BPB
   439                              <1>     ;je .bbpbErr
   440                              <1>     ;cmp al, 0F8h
   441                              <1>     ;je .bbpbErr
   442                              <1> .bbpbErr:
   443                              <1> ;Bad media bytes or BPB go here. Means the media is unknown.
   444 0000082F B007                <1>     mov al, drvBadMed       ;Default to unknown media error code
   445 00000831 85C0                <1>     test eax, eax           ;Clear ZF so we return the right error code
   446 00000833 F9                  <1>     stc
   447                              <1>     return
    13                              <2> %%_ret:
    14 00000834 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .newDisk:
   449 00000835 4881C30B000000      <1>     add rbx, 11 ;Now point rbx to the BPB itself
   450 0000083C 8A430A              <1>     mov al, byte [rbx + bpb.media]
   451 0000083F E8C9000000          <1>     call .bbpbCheckMedByt
   452 00000844 75E9                <1>     jnz .bbpbErr
   453                              <1> ;Update the drvBlk with info from the BPB.
   454                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   455                              <1> ; are ok before updating the msdTbl entry. 
   456                              <1> .bbpbMoveBpb:
   457 00000846 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   458 00000849 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   459 0000084D E852000000          <1>     call .bbpbGetFATType    ;Fat type is given in edx
   460 00000852 72DB                <1>     jc .bbpbErr ;Only happens if crucial BPB fields are zero 
   461 00000854 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   462                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   463                              <1> ; if it is present
   464 00000857 B819000000          <1>     mov eax, bpb_size
   465 0000085C B929000000          <1>     mov ecx, bpb32_size - 12    ;BPB32 minus reserved count
   466 00000861 80FA20              <1>     cmp dl, bpbFat32
   467 00000864 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   468 00000867 F3A4                <1>     rep movsb        ;Now copy the BPB over!
   469 00000869 F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   470                              <1>     return
    13                              <2> %%_ret:
    14 0000086A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   471                              <1> 
   472                              <1> .moveVolIds:
   473                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   474                              <1> ;Input: rsi -> End of the BPB in sector. rbp -> drvBlk
   475                              <1> ;Output: CF=CY: No volume label in sector found.
   476                              <1> ;        CF=NC: Volume Label in sector found and copied.
   477 0000086B 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   478 0000086F 7531                <1>     jne .mviNoSig
   479                              <1> ;Else, now we copy the volume information from the extended bs info block
   480 00000871 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   481 00000874 898580000000        <1>     mov dword [rbp + drvBlk.volId], eax
   482 0000087A 4881C607000000      <1>     add rsi, extBs.volLab
   483 00000881 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   484 00000885 B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   485 0000088A F3A4                <1>     rep movsb   
   486                              <1>     ;rsi now points to the filSysType field in the extBs.
   487                              <1>     ;Move rdi to the filSysType field in the drvBlk.
   488 0000088C 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   489 00000893 B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   490 00000898 F3A4                <1>     rep movsb   
   491                              <1> ;Clear the change bit for this DOS drive as we have here a good BPB
   492 0000089A 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devChgd
   493 000008A0 F8                  <1>     clc
   494                              <1>     return
    13                              <2> %%_ret:
    14 000008A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> .mviNoSig:
   496 000008A2 F9                  <1>     stc
   497                              <1>     return
    13                              <2> %%_ret:
    14 000008A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   498                              <1> 
   499                              <1> .bbpbGetFATType:
   500                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   501 000008A4 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   502 000008A7 E362                <1>     jrcxz .bbpbGFTErr
   503 000008A9 89C8                <1>     mov eax, ecx
   504 000008AB FFC8                <1>     dec eax
   505 000008AD 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   506 000008B1 C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   507 000008B4 01D0                <1>     add eax, edx
   508 000008B6 31D2                <1>     xor edx, edx
   509 000008B8 F7F1                <1>     div ecx     ;eax = Root Dir sectors
   510 000008BA 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   511 000008BB 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   512 000008BF 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   513 000008C2 85C0                <1>     test eax, eax
   514 000008C4 0F44C2              <1>     cmovz eax, edx
   515 000008C7 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   516 000008CB F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   517 000008CD 85C0                <1>     test eax, eax   ;If either BPB_NumFATs or FATSz is 0, fail!
   518 000008CF 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   519 000008D0 7439                <1>     jz .bbpbGFTErr
   520 000008D2 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   521 000008D6 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   522 000008D8 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   523 000008DA 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   524 000008DE 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   525 000008E1 85C0                <1>     test eax, eax
   526 000008E3 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   527 000008E6 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   528 000008E8 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   529 000008EC E31D                <1>     jrcxz .bbpbGFTErr
   530 000008EE 31D2                <1>     xor edx, edx
   531 000008F0 F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   532 000008F2 BA10000000          <1>     mov edx, bpbFat12
   533 000008F7 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   534 000008FC 720B                <1>     jb .bbpbGFTExit
   535 000008FE D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   536 00000900 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   537 00000905 7302                <1>     jnb .bbpbGFTExit   ;If above or equal, its in FAT32
   538 00000907 D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   539                              <1> .bbpbGFTExit:
   540 00000909 F8                  <1>     clc
   541                              <1>     return
    13                              <2> %%_ret:
    14 0000090A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> .bbpbGFTErr:
   543 0000090B F9                  <1>     stc
   544                              <1>     return
    13                              <2> %%_ret:
    14 0000090C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> .bbpbCheckMedByt:
   547                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   548                              <1> ; recognise as this is a sign of an unhealthy volume.
   549                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   550                              <1> ;Values 0FAh, 0F8h and 0F0h NEED to come from BPB. If found from FAT, then 
   551                              <1> ; do not accept the volume!
   552                              <1> ;Input: al = Media byte. 
   553                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   554 0000090D 3CF0                <1>     cmp al, 0F0h
   555                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000090F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000911 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   556 00000912 3CF8                <1>     cmp al, 0F8h
   557                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000914 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000916 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   558 00000917 38C0                <1>     cmp al, al  ;Set ZF if greater than F8h
   559                              <1>     return
    13                              <2> %%_ret:
    14 00000919 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> .bbpbReadFAT:
   562                              <1> ;Reads the first FAT sector of media we are playing with.
   563 0000091A 31C9                <1>     xor ecx, ecx
   564 0000091C FFC1                <1>     inc ecx         ;Read Sector 1...
   565 0000091E EB02                <1>     jmp short .bbpbReadEp
   566                              <1> .bbpbReadBS:
   567                              <1> ;Reads the bootsector of media we are playing with.
   568 00000920 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   569                              <1> .bbpbReadEp:
   570 00000922 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]
   571 00000925 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   572 00000929 B800820000          <1>     mov eax, 8200h  ;LBA Read function
   573 0000092E 488D1D7A080000      <1>     lea rbx, .inBuffer  ;Use the in sector buffer. Ensure ownership.
   574                              <1> ;Do block IO w/o checking the validity of ecx as hidden sectors
   575                              <1> ; has already been setup correctly at this point.
   576 00000935 E993000000          <1>     jmp .blkIODirect     ;Does the Block IO, do tail call
   577                              <1> 
   578                              <1> .IOCTLRead:         ;Function 3, returns immediately
   579                              <1> .IOCTLWrite:        ;Function 12, returns done
   580                              <1>     return
    13                              <2> %%_ret:
    14 0000093A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   581                              <1> 
   582                              <1> .read:              ;Function 4
   583                              <1> ;Will read one sector at a time.
   584 0000093B E8DE060000          <1>     call .ioSetVolLbl
   585 00000940 E836060000          <1>     call .checkDevType
   586 00000945 4889DF              <1>     mov rdi, rbx
   587 00000948 E86C000000          <1>     call .bioSetupRegs
   588                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000094D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000094F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   589                              <1> .msdr0:
   590 00000950 B800820000          <1>     mov eax, 8200h  ;LBA Read function
   591 00000955 E87D000000          <1>     call .blkIO
   592 0000095A 7243                <1>     jc .ioDoErr
   593 0000095C E849000000          <1>     call .ioAdv
   594 00000961 75ED                <1>     jne .msdr0
   595                              <1>     return
    13                              <2> %%_ret:
    14 00000963 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> .write:             ;Function 8/9
   598                              <1> ;Will write and optionally verify one sector at a time.
   599 00000964 E8B5060000          <1>     call .ioSetVolLbl
   600 00000969 E80D060000          <1>     call .checkDevType
   601 0000096E 4889DF              <1>     mov rdi, rbx
   602 00000971 E843000000          <1>     call .bioSetupRegs
   603                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000976 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000978 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   604                              <1> .msdw0:
   605 00000979 B800830000          <1>     mov eax, 8300h ;LBA Write Sectors
   606 0000097E E854000000          <1>     call .blkIO
   607 00000983 721A                <1>     jc .ioDoErr
   608 00000985 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
   609 00000989 750C                <1>     jne .msdw1
   610 0000098B B800840000          <1>     mov eax, 8400h ;LBA Verify Sectors
   611 00000990 E842000000          <1>     call .blkIO
   612 00000995 7208                <1>     jc .ioDoErr
   613                              <1> .msdw1:
   614 00000997 E80E000000          <1>     call .ioAdv
   615 0000099C 75DB                <1>     jne .msdw0
   616                              <1>     return
    13                              <2> %%_ret:
    14 0000099E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   617                              <1> .ioDoErr:
   618                              <1> ;Come here if after an error in block IO handler.
   619                              <1> ;If ZF=ZE, disk error occured, the error needs translation so do it.
   620                              <1> ;Else just return the error code in al
   621 0000099F 0F84C9FCFFFF        <1>     jz .ioError
   622 000009A5 E92BFDFFFF          <1>     jmp .errorExit
   623                              <1> 
   624                              <1> .ioAdv:
   625                              <1> ;Advances the buffers on successful IO. 
   626                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
   627                              <1> ;Input: 
   628                              <1> ;       rbx -> Where we just IO'ed to
   629                              <1> ;       rcx = LBA sector we just xfred
   630                              <1> ;       dl  = BIOS drive number
   631                              <1> ;       rdi -> ioReqPkt
   632                              <1> ;       rbp -> drvBlk
   633                              <1> ;       esi = Number of sectors to xfr
   634                              <1> ;Output:
   635                              <1> ;       rbx -> Where to IO next sector to/from
   636                              <1> ;       rcx = LBA of next sector to xfer
   637                              <1> ;       dl  = BIOS drive number
   638                              <1> ;       rdi -> ioReqPkt
   639                              <1> ;       rbp -> drvBlk
   640                              <1> ;       esi = Sectors left to xfr.
   641                              <1> ;       ZF=ZE if esi is 0. Else ZF=NZ.
   642 000009AA 50                  <1>     push rax
   643 000009AB 48FFC1              <1>     inc rcx     ;Goto next sector
   644 000009AE 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
   645 000009B2 4801C3              <1>     add rbx, rax  ;Advance the buffer pointer by 1 sector
   646 000009B5 FFCE                <1>     dec esi     ;Once this hits 0, we stop the xfr
   647 000009B7 58                  <1>     pop rax
   648                              <1>     return
    13                              <2> %%_ret:
    14 000009B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   649                              <1> 
   650                              <1> .bioSetupRegs:
   651                              <1> ;Sets up sector to read and buffer ptr for block IO call.
   652                              <1> ;If returns ZF=ZE then xfr 0 sectors, exit immediately
   653                              <1> ;Output: rdi -> ioReqPkt
   654                              <1> ;        rbp -> drvBlk
   655                              <1> ;        rbx -> Transfer buffer
   656                              <1> ;        rcx = Sector to transfer
   657                              <1> ;        esi = Number of sectors to transfer
   658                              <1> ;        ZF=ZE if esi is 0. Else ZF=NZ.
   659 000009B9 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
   660 000009BC 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   661 000009C0 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   662 000009C4 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS drive number
   663 000009C7 8B7716              <1>     mov esi, dword [rdi + ioReqPkt.tfrlen]  ;Get the tfrlen into esi
   664 000009CA 85F6                <1>     test esi, esi                           ;If this is 0, avoid IO
   665                              <1>     return
    13                              <2> %%_ret:
    14 000009CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   666                              <1> 
   667                              <1> .blkIODirect:    ;Does block IO without sanity checking the sector number
   668                              <1> ;All registers as below!
   669 000009CD 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   670 000009D3 757A                <1>     jnz .bioufmted
   671 000009D5 EB0D                <1>     jmp short .biocmn
   672                              <1> .blkIO:  ;Does block IO
   673                              <1> ;Sector count handled by caller.
   674                              <1> ;All registers marked as input registers must be preserved across the call
   675                              <1> ; except ah
   676                              <1> ;Input: ah = BIOS function number
   677                              <1> ;       rdi -> ioReqPkt             (Normal Read/Write only)
   678                              <1> ;       rbp -> drvBlk
   679                              <1> ;       rbx -> Transfer buffer
   680                              <1> ;       rcx = LBA sector to transfer
   681                              <1> ;       dl  = BIOS drive number
   682                              <1> ;       esi = Sectors left to xfr!  (Normal Read/Write only)
   683                              <1> ;Output: CF=NC: Sector xferred.
   684                              <1> ;        CF=CY: An error ocured. 
   685                              <1> ;           ZF=NZ: Non-disk error, return the error code in eax
   686                              <1> ;           ZF=ZY: Disk error, xlat error code
   687 000009D7 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   688 000009DD 7570                <1>     jnz .bioufmted
   689 000009DF E843000000          <1>     call .bioSanity ;Sanity check ecx here
   690                              <1> .biocmn:
   691 000009E4 56                  <1>     push rsi    ;Save sector count
   692 000009E5 BE05000000          <1>     mov esi, 5  ;Retry counter five times
   693                              <1> .biolp:
   694 000009EA B001                <1>     mov al, 01h ;Do one sector at a time 
   695 000009EC E899060000          <1>     call .callI33h
   696 000009F1 7221                <1>     jc .bioError
   697 000009F3 3C01                <1>     cmp al, 1   ;Did we read one sector?
   698 000009F5 751D                <1>     jne .bioError
   699 000009F7 5E                  <1>     pop rsi ;Rebalance stack
   700                              <1> .bioExit:
   701 000009F8 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   702 000009FB 8805AD070000        <1>     mov byte [.bLastDsk], al    ;Last DOS disk accessed
   703 00000A01 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   704                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A07 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A09 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   705                              <1> ;Ensure we set the time of the operation w/o modifying the registers.
   706                              <1> ;Routine trashes ecx and edx so save!
   707 00000A0A 51                  <1>     push rcx
   708 00000A0B 52                  <1>     push rdx
   709 00000A0C E838060000          <1>     call .setTime   ;Set the current time and clear state for successful IO
   710 00000A11 5A                  <1>     pop rdx
   711 00000A12 59                  <1>     pop rcx
   712                              <1>     return
    13                              <2> %%_ret:
    14 00000A13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   713                              <1> .bioError:
   714                              <1>     ;xor eax, eax    ;Reset disk: CRASHES BOCHS
   715 00000A14 52                  <1>     push rdx    ;Preserve drive number. All other regs preserved
   716 00000A15 B800010000          <1>     mov eax, 0100h
   717 00000A1A E86B060000          <1>     call .callI33h ;Read status of last operation
   718 00000A1F 5A                  <1>     pop rdx     ;Get back drive number.
   719 00000A20 FFCE                <1>     dec esi
   720 00000A22 75C6                <1>     jnz .biolp
   721 00000A24 5E                  <1>     pop rsi ;Pop the sector count off the stack
   722                              <1>     ;ZF=ZE set now as esi counted down
   723 00000A25 F9                  <1>     stc
   724                              <1>     return
    13                              <2> %%_ret:
    14 00000A26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> .bioSanity:
   726                              <1> ;Input: ecx = Sector we will transact on. rbp -> DrvBlk
   727                              <1> ;Output: CF=NC, sector ok to xact on
   728                              <1> ;        CF=CY, doesnt return, fails the call
   729 00000A27 A9FF000000          <1>     test eax, 0FFh  ;If the bottom byte is set, it is a IOCTL call.
   730                              <1>     retnz           ;BIOS checks these for us as IOCTL bypasses partitions.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A2C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A2E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   731 00000A2F 50                  <1>     push rax
   732 00000A30 53                  <1>     push rbx
   733 00000A31 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   734 00000A35 8B5D1F              <1>     mov ebx, dword [rbp + drvBlk.dTotSec32] 
   735 00000A38 85C0                <1>     test eax, eax
   736 00000A3A 0F44C3              <1>     cmovz eax, ebx  ;The 32 bit count is valid only if 16 bit count is 0
   737 00000A3D 39C1                <1>     cmp ecx, eax    ;This will set CF iff ecx < eax. If eax >= ecx CF=NC.
   738 00000A3F 5B                  <1>     pop rbx
   739 00000A40 58                  <1>     pop rax
   740 00000A41 F5                  <1>     cmc             ;Flip CF from CY to NC if ok and NC to CY if not
   741                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A42 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A44 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   742                              <1> ;Now pops the return from the sanity call and falls.
   743 00000A45 58                  <1>     pop rax ;Return from block IO with error code in eax below
   744 00000A46 B808000000          <1>     mov eax, drvSecNotFnd
   745                              <1> .bioNoDiskErr:
   746 00000A4B 85C0                <1>     test eax, eax   ;Clear ZF
   747 00000A4D F9                  <1>     stc
   748                              <1>     return
    13                              <2> %%_ret:
    14 00000A4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> .bioufmted:
   750 00000A4F B807000000          <1>     mov eax, drvBadMed
   751 00000A54 EBF5                <1>     jmp short .bioNoDiskErr
   752                              <1> 
   753                              <1> .devOpen:         ;Function 13
   754 00000A56 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
   755                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A5C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A5E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   756 00000A5F 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
   757                              <1>     return
    13                              <2> %%_ret:
    14 00000A63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> .devClose:        ;Function 14
   759 00000A64 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
   760                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A6A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A6C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   761 00000A6D 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
   762                              <1>     return
    13                              <2> %%_ret:
    14 00000A71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .remMed:  ;Function 15
   764                              <1> ;Sets busy bit if fixed drive!
   765 00000A72 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;Is it fixed?
   766                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A78 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A7A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   767 00000A7B 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
   768                              <1>     return
    13                              <2> %%_ret:
    14 00000A81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   769                              <1> 
   770                              <1> .IOCTL:    ;Function 19
   771                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   772                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params).
   773 00000A82 B803000000          <1>     mov eax, drvBadCmd
   774 00000A87 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]  ;Get CH and CL in one read
   775 00000A8B 80FD08              <1>     cmp ch, 08h     ;Disk Drive Major Code?
   776 00000A8E 0F8541FCFFFF        <1>     jne .errorExit  ;If not, exit bad
   777                              <1> ;Disk Drive IOCTL here
   778 00000A94 F6C112              <1>     test cl, 12h    ;If either bits 2 or 4 set, fail the call
   779 00000A97 0F8538FCFFFF        <1>     jnz .errorExit
   780 00000A9D F6C160              <1>     test cl, 60h    ;One of these two bits MUST be set (bits 5 and 6)
   781 00000AA0 0F842FFCFFFF        <1>     jz .errorExit
   782 00000AA6 0FB6D1              <1>     movzx edx, cl
   783 00000AA9 81E27FFFFFFF        <1>     and edx, ~80h   ;Clear the upper bit.
   784 00000AAF 81FA07000000        <1>     cmp edx, 7
   785 00000AB5 7505                <1>     jne .ioctlNoAccess
   786 00000AB7 BA03000000          <1>     mov edx, 3  ;Move the offset instead into edx
   787                              <1> .ioctlNoAccess:
   788 00000ABC 488D3D21000000      <1>     lea rdi, .ioctlTbl
   789 00000AC3 57                  <1>     push rdi
   790 00000AC4 488D3C97            <1>     lea rdi, qword [rdi + 4*rdx]
   791 00000AC8 F6C120              <1>     test cl, 20h
   792 00000ACB 7507                <1>     jne .ioctlNoRead
   793 00000ACD 4881C702000000      <1>     add rdi, 2  ;If we are doing the read function, goto the next instruction
   794                              <1> .ioctlNoRead:
   795 00000AD4 0FB717              <1>     movzx edx, word [rdi]   ;Read the word offset
   796 00000AD7 5F                  <1>     pop rdi
   797 00000AD8 4801D7              <1>     add rdi, rdx    ;Add the table base
   798 00000ADB 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]
   799 00000ADF F6C180              <1>     test cl, 80h    ;Now set the flag for if CHS (ZF=ZE) or LBA (ZF=NZ)
   800 00000AE2 FFE7                <1>     jmp rdi ;And enter the function with the ptr to the ctrl block in rdx
   801                              <1> .ioctlTbl:
   802                              <1> ;Note: For the CHS IO functions, we translate the CHS requests into LBA
   803                              <1> ; requests and then recycle the LBA request code. We do this using the 
   804                              <1> ; track table. If the sector size of any table entry is neq the 
   805                              <1> ; device sector size, we fail the request. This is because these requests
   806                              <1> ; work on a track by track basis.
   807 00000AE4 3E00                <1>     dw .ioSetDevParams - .ioctlTbl  ;CL = 40h or CL = C0h, Write IOCTL
   808 00000AE6 4201                <1>     dw .ioGetDevParams - .ioctlTbl  ;CL = 60h or CL = E0h, Read IOCTL
   809 00000AE8 1202                <1>     dw .ioWrite - .ioctlTbl         ;CL = 41h or CL = C1h, Write IOCTL
   810 00000AEA 3C02                <1>     dw .ioRead - .ioctlTbl          ;CL = 61h or CL = E1h, Read IOCTL
   811 00000AEC 4902                <1>     dw .ioFormat - .ioctlTbl        ;CL = 42h or CL = C2h, Write IOCTL
   812 00000AEE 7102                <1>     dw .ioVerify - .ioctlTbl        ;CL = 62h or CL = E2h, Read IOCTL
   813 00000AF0 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 43h or CL = C3h, error
   814 00000AF2 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 63h or CL = E3h, error
   815 00000AF4 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 44h or CL = C4h, error
   816 00000AF6 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 64h or CL = E4h, error
   817 00000AF8 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 45h or CL = C5h, error
   818 00000AFA 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 65h or CL = E5h, error
   819 00000AFC 0A03                <1>     dw .ioSetIds - .ioctlTbl        ;CL = 46h or CL = C6h, Set vol Ids
   820 00000AFE 0A03                <1>     dw .ioGetIds - .ioctlTbl        ;CL = 66h or CL = E6h, Get vol Ids
   821 00000B00 0F03                <1>     dw .ioSetAccessFlag - .ioctlTbl ;CL = 47h or CL = C7h, Write IOCTL
   822 00000B02 2303                <1>     dw .ioGetAccessFlag - .ioctlTbl ;CL = 67h or CL = E7h, Read IOCTL
   823                              <1> .iobadCmd:
   824 00000B04 B803000000          <1>     mov eax, drvBadCmd
   825 00000B09 E9C7FBFFFF          <1>     jmp .errorExit
   826                              <1> .iobadCmdLen:
   827 00000B0E B805000000          <1>     mov eax, drvBadDrvReq
   828 00000B13 E9BDFBFFFF          <1>     jmp .errorExit
   829                              <1> .iobadMed:
   830 00000B18 B807000000          <1>     mov eax, drvBadMed
   831 00000B1D E9B3FBFFFF          <1>     jmp .errorExit
   832                              <1> ;---------------------------------------------------------------------------
   833                              <1> ;               Set Device parameters in CHS and LBA here
   834                              <1> ;---------------------------------------------------------------------------
   835                              <1> .ioSetDevParams:
   836 00000B22 9C                  <1>     pushfq
   837                              <1> ;If the parameters are swapped, set the flags and indicate the media 
   838                              <1> ; was swapped (even if not).
   839 00000B23 66814D374001        <1>     or word [rbp + drvBlk.wDevFlgs], devNewParms | devChgd
   840 00000B29 9D                  <1>     popfq
   841 00000B2A 0F85C7000000        <1>     jnz .lbaSetParams
   842                              <1> ;Here we set CHS params. 
   843                              <1> ;Before we trust the table, we check that indeed
   844                              <1> ; no sector index is past the max sector count and that if the caller
   845                              <1> ; claimed that all the sectors are of the same size, they really are.    
   846 00000B30 488D723C            <1>     lea rsi, qword [rdx + chsParamsBlock.TrackLayout]
   847 00000B34 4889F7              <1>     mov rdi, rsi    ;Save the pointer in rdi
   848 00000B37 66AB                <1>     stosw           ;Get the lead word and adv rsi by 2
   849 00000B39 0FB7C8              <1>     movzx ecx, ax   ;Get the lead table entry
   850 00000B3C 81F93F000000        <1>     cmp ecx, maxTrackTblSz
   851 00000B42 0F878BFBFFFF        <1>     ja .genErrExit
   852 00000B48 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Check the first entry is ok!
   853 00000B4D 0F8780FBFFFF        <1>     ja .genErrExit
   854                              <1> .iosdpTblCheckLp:
   855 00000B53 AD                  <1>     lodsd   ;Go to next entry
   856 00000B54 FFC9                <1>     dec ecx ;And remove from the count
   857 00000B56 7420                <1>     jz .iosdpTblCheckEnd
   858 00000B58 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Ensure no entry above the max entry value
   859 00000B5D 0F8770FBFFFF        <1>     ja .genErrExit
   860 00000B63 F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec ;All same size?
   861 00000B66 74EB                <1>     jz .iosdpTblCheckLp ;If not, skip this check (always check 1=<i<=n)
   862 00000B68 668B4602            <1>     mov ax, word [rsi + 2]  ;Else get sector size
   863 00000B6C 663946FE            <1>     cmp word [rsi - 2], ax  ;And compare with the previous sector size
   864 00000B70 0F855DFBFFFF        <1>     jne .genErrExit
   865 00000B76 EBDB                <1>     jmp short .iosdpTblCheckLp
   866                              <1> .iosdpTblCheckEnd:
   867                              <1> ;Now we set the sector size bit if all tracks same size check was passed.
   868                              <1> ;If all sectors have the same size but the caller didn't specify this
   869                              <1> ; bit, we also don't specify this bit.
   870 00000B78 66816537F7FF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSameSec    ;Clear bit first
   871 00000B7E F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec
   872 00000B81 7406                <1>     jz .iosdpNoSetTrackBit
   873                              <1> ;The only way we got here if the bit was set is that the check passed.
   874                              <1> ; Set the bit in the device block.
   875 00000B83 66814D370800        <1>     or word [rbp + drvBlk.wDevFlgs], devSameSec
   876                              <1> .iosdpNoSetTrackBit:
   877                              <1> ;Now we copy the table directly as sector numbers may be purposefully
   878                              <1> ; interleaved. NO SORTING!!
   879 00000B89 4889FE              <1>     mov rsi, rdi    ;Get back the track layout pointer 
   880 00000B8C 488D3D85020000      <1>     lea rdi, .ioTrackTbl    ;We overwrite our internal track table
   881 00000B93 66AD                <1>     lodsw   ;Get the table length
   882 00000B95 0FB7C8              <1>     movzx ecx, ax   ;This many entries
   883 00000B98 66AB                <1>     stosw
   884 00000B9A F3A5                <1>     rep movsd       ;Move the dword entries over
   885 00000B9C F60202              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncTrk    ;Just tracks?
   886                              <1>     retnz   ;Return if bit set!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B9F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BA1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   887                              <1> ;Now we update the rest of the disk metadata.
   888 00000BA2 488D7207            <1>     lea rsi, qword [rdx + chsParamsBlock.deviceBPB]
   889 00000BA6 56                  <1>     push rsi
   890 00000BA7 B935000000          <1>     mov ecx, bpb32_size
   891 00000BAC 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sDfltBPB]
   892 00000BB0 F3A4                <1>     rep movsb   ;Move the default BPB over
   893 00000BB2 5B                  <1>     pop rbx
   894 00000BB3 E88EFCFFFF          <1>     call .bbpbMoveBpb   ;Now set the real BPB and the lock flag
   895 00000BB8 E8AEFCFFFF          <1>     call .moveVolIds    ;And move the volume ids if possible
   896                              <1> ;Now setup the lock BPB bit
   897 00000BBD 66816537FBFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devLockBPB
   898 00000BC3 F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
   899 00000BC6 7406                <1>     jz .iosdpNoSetBPBDflt
   900 00000BC8 66814D370400        <1>     or word [rbp + drvBlk.wDevFlgs], devLockBPB
   901                              <1> .iosdpNoSetBPBDflt:
   902                              <1> ;Now copy the rest of the bytes and return
   903 00000BCE 0FB74202            <1>     movzx eax, word [rdx + chsParamsBlock.wDevFlgs]
   904 00000BD2 2503000000          <1>     and eax, devFixed | devChgLine  ;Keep only these two bits
   905 00000BD7 66816537FCFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~(devFixed | devChgLine)   ;Clear em
   906 00000BDD 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax  ;Add those two bits as set
   907 00000BE1 0FB64201            <1>     movzx eax, byte [rdx + chsParamsBlock.bDevType]
   908 00000BE5 884536              <1>     mov byte [rbp + drvBlk.bDevType], al
   909 00000BE8 66814D378000        <1>     or word [rbp + drvBlk.wDevFlgs], devSetDASD 
   910 00000BEE 0FB74204            <1>     movzx eax, word [rdx + chsParamsBlock.wNumCyl]
   911 00000BF2 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   912                              <1>     ;movzx eax, byte [rdx + chsParamsBlock.bMedTyp]
   913                              <1>     ;mov byte [rbp + drvBlk.bMedTyp], al
   914                              <1>     return
    13                              <2> %%_ret:
    14 00000BF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   915                              <1> 
   916                              <1> .lbaSetParams:
   917                              <1> ;This only sets the sector size and number of sectors in drvBlk.bpb.
   918                              <1>     ;Set start sector of partition
   919 00000BF7 8B4A18              <1>     mov ecx, dword [rdx + lbaParamsBlock.startSector]
   920 00000BFA 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   921                              <1>     ;Set sector size
   922 00000BFD 8B4A08              <1>     mov ecx, dword [rdx + lbaParamsBlock.sectorSize]
   923 00000C00 66894D0A            <1>     mov word [rbp + drvBlk.wBpS], cx
   924                              <1>     ;Set same device flags as in CHS.
   925 00000C04 0FB64A02            <1>     movzx ecx, byte [rdx + lbaParamsBlock.wDevFlgs]
   926 00000C08 6681E10300          <1>     and cx, devFixed | devChgLine
   927 00000C0D 66094D37            <1>     or word [rbp + drvBlk.wDevFlgs], cx
   928                              <1>     ;Set sector information.
   929 00000C11 8B4A10              <1>     mov ecx, dword [rdx + lbaParamsBlock.numSectors]
   930 00000C14 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   931 00000C1A 7605                <1>     jna .lbaSetSmall
   932 00000C1C 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   933 00000C1F 31C9                <1>     xor ecx, ecx
   934                              <1> .lbaSetSmall:
   935 00000C21 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   936                              <1>     return
    13                              <2> %%_ret:
    14 00000C25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   937                              <1> ;---------------------------------------------------------------------------
   938                              <1> ;               Get Device parameters in CHS and LBA here
   939                              <1> ;---------------------------------------------------------------------------
   940                              <1> .ioGetDevParams:
   941 00000C26 7559                <1>     jnz .lbaGetParams
   942                              <1> ;Here we get CHS params. Doesn't do a build BPB call to be easy.
   943 00000C28 488D753B            <1>     lea rsi, qword [rbp + drvBlk.sDfltBPB]
   944 00000C2C F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], 1  ;Bit 0?
   945 00000C2F 7517                <1>     jnz .iogdpDflt
   946 00000C31 E8D3FBFFFF          <1>     call .updateBpb ;Gets the BPB to the internal disk buffer
   947 00000C36 0F8263FDFFFF        <1>     jc .ioDoErr ;Errors returned as if from block IO handler
   948 00000C3C E82AFCFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   949 00000C41 488D3572050000      <1>     lea rsi, qword [.inBuffer + 11]
   950                              <1> .iogdpDflt:
   951 00000C48 488B7A07            <1>     mov rdi, qword [rdx + chsParamsBlock.deviceBPB]
   952 00000C4C B935000000          <1>     mov ecx, bpb32_size
   953 00000C51 F3A4                <1>     rep movsb
   954 00000C53 B805000000          <1>     mov eax, 5
   955 00000C58 B907000000          <1>     mov ecx, 7
   956 00000C5D F6453701            <1>     test byte [rbp + drvBlk.wDevFlgs], devFixed
   957 00000C61 0F44C1              <1>     cmovz eax, ecx  ;eax is set to 7 if the dev is removable
   958 00000C64 884201              <1>     mov byte [rdx + chsParamsBlock.bDevType], al
   959 00000C67 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
   960 00000C6B 2503000000          <1>     and eax, devFixed | devChgLine
   961 00000C70 66894202            <1>     mov word [rdx + chsParamsBlock.wDevFlgs], ax
   962 00000C74 C6420600            <1>     mov byte [rdx + chsParamsBlock.bMedTyp], 0
   963 00000C78 0FB74539            <1>     movzx eax, word [rbp + drvBlk.wNumCyl]
   964 00000C7C 66894204            <1>     mov word [rdx + chsParamsBlock.wNumCyl], ax
   965                              <1>     return
    13                              <2> %%_ret:
    14 00000C80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   966                              <1> 
   967                              <1> .lbaGetParams:
   968                              <1> ;Gets more "updated" information on partitions.
   969                              <1> ;The data returned will always be the partition maximum! For remdevs
   970                              <1> ; this means up to the whole media size and for fixed disks we are still 
   971                              <1> ; restricted to the partition size.
   972 00000C81 B805000000          <1>     mov eax, drvBadDrvReq
   973 00000C86 48813A20000000      <1>     cmp qword [rdx + lbaParamsBlock.size], lbaParamsBlock_size
   974 00000C8D 0F8542FAFFFF        <1>     jne .errorExit
   975 00000C93 4889D7              <1>     mov rdi, rdx    ;Store the params block ptr in rdi
   976 00000C96 F6470101            <1>     test byte [rdi + lbaParamsBlock.bSpecFuncs], 1
   977 00000C9A 752E                <1>     jnz .lgpbpbok
   978 00000C9C 57                  <1>     push rdi    ;Push the param block onto the stack
   979 00000C9D E867FBFFFF          <1>     call .updateBpb
   980 00000CA2 7208                <1>     jc .lgpbpbnotok ;Even if just bad BPB, keep changed bit on!
   981 00000CA4 E8C2FBFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   982 00000CA9 5F                  <1>     pop rdi     ;Pop param block
   983 00000CAA EB1E                <1>     jmp short .lgpbpbok
   984                              <1> .lgpbpbnotok:
   985                              <1> ;If no valid BPB found, and the device removable, return BIOS params for the 
   986                              <1> ; whole device. We never come here for fixed disks as updateBpb always passes.
   987 00000CAC 5F                  <1>     pop rdi
   988 00000CAD 3C07                <1>     cmp al, drvBadMed   ;If remdev has bad media, get bios attribs.
   989 00000CAF 0F8520FAFFFF        <1>     jne .errorExit
   990                              <1> ;We only come here if on an unformatted removable disk.
   991                              <1> ;Unformatted means with an unrecognisable BPB.
   992 00000CB5 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   993 00000CB9 B800880000          <1>     mov eax, 8800h  ;Read LBA Device Parameters
   994 00000CBE CD33                <1>     int 33h
   995 00000CC0 0F8295F9FFFF        <1>     jc .errorXlat
   996 00000CC6 31D2                <1>     xor edx, edx    ;0 Hidden sectors on remdevs/unformatted media
   997 00000CC8 EB12                <1>     jmp short .lgpStor
   998                              <1> .lgpbpbok:
   999 00000CCA 8B551B              <1>     mov edx, dword [rbp + drvBlk.dHiddSec]
  1000 00000CCD 0FB75D0A            <1>     movzx ebx, word [rbp + drvBlk.wBpS]
  1001 00000CD1 0FB74D12            <1>     movzx ecx, word [rbp + drvBlk.wTotSec16]
  1002 00000CD5 85C9                <1>     test ecx, ecx
  1003 00000CD7 7503                <1>     jnz .lgpStor
  1004 00000CD9 8B4D1F              <1>     mov ecx, dword [rbp + drvBlk.dTotSec32]
  1005                              <1> .lgpStor:
  1006                              <1> ;Enter with:
  1007                              <1> ;rbx = Sector size in bytes
  1008                              <1> ;rcx = Last LBA block
  1009                              <1> ;rdx = Hidden sectors
  1010 00000CDC 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1011 00000CE0 2503000000          <1>     and eax, devFixed | devChgLine
  1012 00000CE5 66894702            <1>     mov word [rdi + lbaParamsBlock.wDevFlgs], ax
  1013 00000CE9 48895F08            <1>     mov qword [rdi + lbaParamsBlock.sectorSize], rbx
  1014 00000CED 48894F10            <1>     mov qword [rdi + lbaParamsBlock.numSectors], rcx
  1015 00000CF1 48895718            <1>     mov qword [rdi + lbaParamsBlock.startSector], rdx
  1016                              <1>     return 
    13                              <2> %%_ret:
    14 00000CF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1017                              <1> ;---------------------------------------------------------------------------
  1018                              <1> ;                    CHS IO requests are structured here
  1019                              <1> ;---------------------------------------------------------------------------
  1020                              <1> .ioWrite:
  1021 00000CF6 0F85BB000000        <1>     jnz .lbaWrite
  1022                              <1> ;Here for CHS write tracks. 
  1023 00000CFC BB00830000          <1>     mov ebx, 8300h  ;Write sectors
  1024                              <1> .iochsRW:
  1025 00000D01 E86F000000          <1>     call .ioChsToLba
  1026 00000D06 E853000000          <1>     call .ioChsSanity
  1027 00000D0B 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector]
  1028 00000D0F 01C1                <1>     add ecx, eax    ;Add the zero based sector number to start of "track"
  1029 00000D11 0FB77707            <1>     movzx esi, word [rdi + chsIOBlock.wNumSectors]  ;How many sectors to IO on
  1030                              <1> .iochsCmn:
  1031 00000D15 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1032 00000D17 488B5F09            <1>     mov rbx, qword [rdi + chsIOBlock.pXferBuffer]   ;And get buffer ptr in rbx
  1033 00000D1B E9B6000000          <1>     jmp .ioEp
  1034                              <1> .ioRead:
  1035 00000D20 0F858A000000        <1>     jnz .lbaRead
  1036                              <1> ;Here for CHS read tracks.
  1037 00000D26 BB00820000          <1>     mov ebx, 8200h  ;Read sectors
  1038 00000D2B EBD4                <1>     jmp short .iochsRW
  1039                              <1> .ioFormat:
  1040                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1041                              <1> ;
  1042                              <1> ;We start by setting DASD parameters but for now we do nothing so just
  1043                              <1> ; clear the flag.
  1044 00000D2D 9C                  <1>     pushfq
  1045 00000D2E 668165377FFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSetDASD
  1046 00000D34 9D                  <1>     popfq
  1047                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1048 00000D35 756F                <1>     jnz .lbaFmt
  1049                              <1> ;Here for CHS format track.
  1050 00000D37 BB00850000          <1>     mov ebx, 8500h  ;Format sectors
  1051 00000D3C F60201              <1>     test byte [rdx + chsFormatBlock.bSpecFuncs], 1  ;If this bit clear do format
  1052 00000D3F 7404                <1>     jz .iochsFmtCmn
  1053                              <1> ;Else we should respond if the sector table is valid. Since our BIOS is crap
  1054                              <1> ; we always return OK and let the format call fail. This would possibly be
  1055                              <1> ; dangerous but its not since the BIOS CHS emulation is very meh.
  1056 00000D41 C60200              <1>     mov byte [rdx + chsFormatBlock.bSpecFuncs], 0   ;All ok!
  1057                              <1>     return
    13                              <2> %%_ret:
    14 00000D44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1058                              <1> .iochsFmtCmn:
  1059 00000D45 E82B000000          <1>     call .ioChsToLba    ;Get the LBA of the first sector of the track in ecx
  1060 00000D4A 0FB77517            <1>     movzx esi, word [rbp + drvBlk.wSecPerTrk]   ;Fmt/Verify this many sectors
  1061 00000D4E 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1062 00000D50 E981000000          <1>     jmp .ioEp
  1063                              <1> .ioVerify:
  1064 00000D55 7548                <1>     jnz .lbaVerify
  1065                              <1> ;Here for CHS verify track.
  1066 00000D57 BB00840000          <1>     mov ebx, 8400h
  1067 00000D5C EBE7                <1>     jmp short .iochsFmtCmn
  1068                              <1> 
  1069                              <1> .ioChsSanity:
  1070                              <1> ;Checks that the read/write will be on one track and makes sense.
  1071                              <1> ;Input: ebx = BIOS function to call. Preserved.
  1072                              <1> ;       ecx = LBA of start sector.
  1073                              <1> ;       rdi -> chsIOBlock
  1074                              <1> ;       rbp -> Drive block ptr
  1075 00000D5E 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector] ;Zero based
  1076 00000D62 FFC0                <1>     inc eax         ;Make it 1 based for the comparison
  1077 00000D64 66034707            <1>     add ax, word [rdi + chsIOBlock.wNumSectors]
  1078 00000D68 663B4517            <1>     cmp ax, word [rbp + drvBlk.wSecPerTrk]  ;Does this surpass num sect/trck?
  1079                              <1>     retna
    77                              <2> cret na
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000D6C 7701                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000D6E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1080                              <1> .ioctlerr:
  1081 00000D6F 5B                  <1>     pop rbx ;Pop the ret addr off the stack and tail to the bad media
  1082 00000D70 E9A3FDFFFF          <1>     jmp .iobadMed
  1083                              <1> .ioChsToLba:
  1084                              <1> ;Gets the first sector of the track selected by this call.
  1085                              <1> ;Works with the values set in the bpb of drvBlk which isn't ideal...
  1086                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
  1087                              <1> ;Input: ebx = BIOS Function to call. Preserved.
  1088                              <1> ;Output: ecx = eax = LBA address for the first sector of the track
  1089                              <1> ;        rdi -> chsFormatBlock or IOBlock
  1090 00000D75 4889D7              <1>     mov rdi, rdx
  1091 00000D78 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
  1092 00000D7C 0FB74F03            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartCyl]
  1093 00000D80 663B4D39            <1>     cmp cx, word [rbp + drvBlk.wNumCyl]
  1094 00000D84 73E9                <1>     jae .ioctlerr
  1095 00000D86 FFC1                <1>     inc ecx ;Inc as we get it as a zero based number
  1096 00000D88 F7E1                <1>     mul ecx
  1097 00000D8A 0FB74F01            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartHead]
  1098 00000D8E 663B4D19            <1>     cmp cx, word [rbp + drvBlk.wNumHeads]
  1099 00000D92 73DB                <1>     jae .ioctlerr 
  1100 00000D94 01C8                <1>     add eax, ecx
  1101 00000D96 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
  1102 00000D9A F7E1                <1>     mul ecx
  1103 00000D9C 89C1                <1>     mov ecx, eax
  1104                              <1>     return
    13                              <2> %%_ret:
    14 00000D9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1105                              <1> ;---------------------------------------------------------------------------
  1106                              <1> ;                    LBA IO requests are structured here
  1107                              <1> ;---------------------------------------------------------------------------
  1108                              <1> .lbaVerify:
  1109 00000D9F B800840000          <1>     mov eax, 8400h  ;Verify sectors
  1110 00000DA4 EB05                <1>     jmp short .lbaFmtCmn
  1111                              <1> .lbaFmt:
  1112 00000DA6 B800850000          <1>     mov eax, 8500h  ;Format sectors
  1113                              <1> .lbaFmtCmn:
  1114 00000DAB 803A10              <1>     cmp byte [rdx + lbaIOBlock.size], lbaFormatBlock_size
  1115 00000DAE EB13                <1>     jmp short .lbaCmn
  1116                              <1> .lbaRead:
  1117 00000DB0 B800820000          <1>     mov eax, 8200h  ;Read sectors
  1118 00000DB5 EB05                <1>     jmp short .lbaRWCmn
  1119                              <1> .lbaWrite:
  1120 00000DB7 B800830000          <1>     mov eax, 8300h  ;Write sectors
  1121                              <1> .lbaRWCmn:
  1122 00000DBC 488B5A10            <1>     mov rbx, qword [rdx + lbaIOBlock.xferBuffer]
  1123 00000DC0 803A18              <1>     cmp byte [rdx + lbaIOBlock.size], lbaIOBlock_size
  1124                              <1> .lbaCmn:
  1125 00000DC3 0F8545FDFFFF        <1>     jne .iobadCmdLen
  1126                              <1> ;Setup the vars for block IO
  1127 00000DC9 4889D7              <1>     mov rdi, rdx
  1128 00000DCC 0FB77701            <1>     movzx esi, word [rdi + lbaFormatBlock.numSectors]
  1129 00000DD0 8B4F08              <1>     mov ecx, dword [rdi + lbaFormatBlock.startSector]
  1130 00000DD3 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]  ;Point to sector in partition
  1131                              <1> .ioEp:
  1132 00000DD6 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
  1133                              <1> .ioLp:
  1134 00000DD9 50                  <1>     push rax        ;Always preserve the function number we are using
  1135 00000DDA E8EEFBFFFF          <1>     call .blkIODirect
  1136 00000DDF 58                  <1>     pop rax
  1137 00000DE0 0F82B9FBFFFF        <1>     jc .ioDoErr
  1138 00000DE6 E8BFFBFFFF          <1>     call .ioAdv
  1139 00000DEB 75EC                <1>     jnz .ioLp
  1140                              <1>     return
    13                              <2> %%_ret:
    14 00000DED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1141                              <1> ;---------------------------------------------------------------------------
  1142                              <1> 
  1143                              <1> ;---------------------------------------------------------------------------
  1144                              <1> ;                           Misc GENIO routines 
  1145                              <1> ;---------------------------------------------------------------------------
  1146                              <1> .ioSetIds:
  1147                              <1> .ioGetIds:
  1148 00000DEE E911FDFFFF          <1>     jmp .iobadCmd
  1149                              <1> .ioSetAccessFlag:
  1150                              <1> ;Sets/Clears the unformatted bit of a device block.
  1151 00000DF3 F64201FF            <1>     test byte [rdx + accFlgBlk.bAccMode], -1
  1152 00000DF7 7407                <1>     jz .iosafNoAcc
  1153                              <1> ;Enables access if the access mode is non-zero
  1154 00000DF9 66816537FFFD        <1>     and word [rbp + drvBlk.wDevFlgs], ~devUnFmt
  1155                              <1>     return
    13                              <2> %%_ret:
    14 00000DFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1156                              <1> .iosafNoAcc:
  1157                              <1> ;Disables access if the access mode is zero 
  1158 00000E00 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt
  1159                              <1>     return
    13                              <2> %%_ret:
    14 00000E06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1160                              <1> .ioGetAccessFlag:
  1161                              <1> ;Gets the state of the unformatted bit of a device block
  1162 00000E07 C6420100            <1>     mov byte [rdx + accFlgBlk.bAccMode], 0  ;Init to clear, no access
  1163 00000E0B 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1164                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000E11 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000E13 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1165 00000E14 FE4201              <1>     inc byte [rdx + accFlgBlk.bAccMode] ;If bit clear, set mode to access ok!
  1166                              <1>     return
    13                              <2> %%_ret:
    14 00000E17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1167                              <1> 
  1168                              <1> .ioTrackTbl:
  1169 00000E18 3F00                <1>     dw maxTrackTblSz    ;Have a maximum of 63 sectors per track
  1170                              <1> ;Each row is a pair of words:
  1171                              <1> ;   dw Sector number, Sector size
  1172 00000E1A 01000002            <1>     dw 1, 200h
  1173 00000E1E 02000002            <1>     dw 2, 200h
  1174 00000E22 03000002            <1>     dw 3, 200h
  1175 00000E26 04000002            <1>     dw 4, 200h
  1176 00000E2A 05000002            <1>     dw 5, 200h
  1177 00000E2E 06000002            <1>     dw 6, 200h
  1178 00000E32 07000002            <1>     dw 7, 200h
  1179 00000E36 08000002            <1>     dw 8, 200h
  1180 00000E3A 09000002            <1>     dw 9, 200h
  1181 00000E3E 0A000002            <1>     dw 10, 200h
  1182 00000E42 0B000002            <1>     dw 11, 200h
  1183 00000E46 0C000002            <1>     dw 12, 200h
  1184 00000E4A 0D000002            <1>     dw 13, 200h
  1185 00000E4E 0E000002            <1>     dw 14, 200h
  1186 00000E52 0F000002            <1>     dw 15, 200h
  1187 00000E56 10000002            <1>     dw 16, 200h
  1188 00000E5A 11000002            <1>     dw 17, 200h
  1189 00000E5E 12000002            <1>     dw 18, 200h
  1190 00000E62 13000002            <1>     dw 19, 200h
  1191 00000E66 14000002            <1>     dw 20, 200h
  1192 00000E6A 15000002            <1>     dw 21, 200h
  1193 00000E6E 16000002            <1>     dw 22, 200h
  1194 00000E72 17000002            <1>     dw 23, 200h
  1195 00000E76 18000002            <1>     dw 24, 200h
  1196 00000E7A 19000002            <1>     dw 25, 200h
  1197 00000E7E 1A000002            <1>     dw 26, 200h
  1198 00000E82 1B000002            <1>     dw 27, 200h
  1199 00000E86 1C000002            <1>     dw 28, 200h
  1200 00000E8A 1D000002            <1>     dw 29, 200h
  1201 00000E8E 1E000002            <1>     dw 30, 200h
  1202 00000E92 1F000002            <1>     dw 31, 200h
  1203 00000E96 20000002            <1>     dw 32, 200h
  1204 00000E9A 21000002            <1>     dw 33, 200h
  1205 00000E9E 22000002            <1>     dw 34, 200h
  1206 00000EA2 23000002            <1>     dw 35, 200h
  1207 00000EA6 24000002            <1>     dw 36, 200h
  1208 00000EAA 25000002            <1>     dw 37, 200h
  1209 00000EAE 26000002            <1>     dw 38, 200h
  1210 00000EB2 27000002            <1>     dw 39, 200h
  1211 00000EB6 28000002            <1>     dw 40, 200h
  1212 00000EBA 29000002            <1>     dw 41, 200h
  1213 00000EBE 2A000002            <1>     dw 42, 200h
  1214 00000EC2 2B000002            <1>     dw 43, 200h
  1215 00000EC6 2C000002            <1>     dw 44, 200h
  1216 00000ECA 2D000002            <1>     dw 45, 200h
  1217 00000ECE 2E000002            <1>     dw 46, 200h
  1218 00000ED2 2F000002            <1>     dw 47, 200h
  1219 00000ED6 30000002            <1>     dw 48, 200h
  1220 00000EDA 31000002            <1>     dw 49, 200h
  1221 00000EDE 32000002            <1>     dw 50, 200h
  1222 00000EE2 33000002            <1>     dw 51, 200h
  1223 00000EE6 34000002            <1>     dw 52, 200h
  1224 00000EEA 35000002            <1>     dw 53, 200h
  1225 00000EEE 36000002            <1>     dw 54, 200h
  1226 00000EF2 37000002            <1>     dw 55, 200h
  1227 00000EF6 38000002            <1>     dw 56, 200h
  1228 00000EFA 39000002            <1>     dw 57, 200h
  1229 00000EFE 3A000002            <1>     dw 58, 200h
  1230 00000F02 3B000002            <1>     dw 59, 200h
  1231 00000F06 3C000002            <1>     dw 60, 200h
  1232 00000F0A 3D000002            <1>     dw 61, 200h
  1233 00000F0E 3E000002            <1>     dw 62, 200h
  1234 00000F12 3F000002            <1>     dw 63, 200h
  1235                              <1> 
  1236                              <1> .getLogicalDev:   ;Function 23
  1237                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
  1238                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
  1239 00000F16 31C0                <1>     xor eax, eax
  1240 00000F18 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1241 00000F1E 7428                <1>     jz .gldExit
  1242 00000F20 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
  1243 00000F24 488D2D84120000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
  1244                              <1> .gldLp:
  1245 00000F2B 384508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
  1246 00000F2E 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
  1247 00000F33 75F6                <1>     jne .gldLp
  1248 00000F35 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
  1249 00000F3B 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
  1250 00000F40 74E9                <1>     jz .gldLp 
  1251 00000F42 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
  1252 00000F46 FFC0                <1>     inc eax ;Make it 1 based
  1253                              <1> .gldExit:
  1254 00000F48 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
  1255                              <1>     return
    13                              <2> %%_ret:
    14 00000F4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1256                              <1> 
  1257                              <1> .setLogicalDev:   ;Function 24
  1258 00000F4C E82A000000          <1>     call .checkDevType  ;Set the unit as the owner of this BIOS drive!
  1259                              <1>     return
    13                              <2> %%_ret:
    14 00000F51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1260                              <1> 
  1261                              <1> .setupDrive:
  1262                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
  1263                              <1> ; sets up internal vars according to it. 
  1264                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
  1265                              <1> ;Output: rbp = Points to the drvBlk
  1266 00000F52 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
  1267                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F56 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F58 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1268 00000F59 488D2D4F120000      <1>     lea rbp, .drvBlkTbl
  1269                              <1> .sdChk:
  1270 00000F60 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
  1271                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F63 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F65 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1272 00000F66 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1273 00000F6A 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1274 00000F71 75ED                <1>     jne .sdChk  ;Keep looping until end of table
  1275 00000F73 58                  <1>     pop rax     ;Pop return address off the stack
  1276 00000F74 B007                <1>     mov al, drvBadMed
  1277 00000F76 E975F6FFFF          <1>     jmp .writeEntryError
  1278                              <1> 
  1279                              <1> .checkDevType:
  1280                              <1> ;Checks if we need to display the swap drive message and displays it if so.
  1281                              <1> ;The device must already be setup in rbp (and var) for this to work.
  1282                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
  1283 00000F7B 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
  1284                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F81 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F83 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1285 00000F84 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1286                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F8A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F8C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1287                              <1> ;Else, now we find the current owner of this drive letter :)
  1288 00000F8D 8A4508              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
  1289 00000F90 488D3D18120000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
  1290                              <1> .cdtLp:
  1291 00000F97 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1292 00000F9E 7454                <1>     je .cdtBadExit
  1293 00000FA0 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
  1294 00000FA3 740D                <1>     je .cdtNextEntry
  1295 00000FA5 384708              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
  1296 00000FA8 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
  1297                              <1>     ;Now we check if this is the current owner of the device?
  1298 00000FAA 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
  1299 00000FB0 7505                <1>     jnz .cdtDevFnd
  1300                              <1> .cdtNextEntry:
  1301 00000FB2 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
  1302 00000FB5 EBE0                <1>     jmp short .cdtLp
  1303                              <1> .cdtDevFnd:
  1304                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
  1305                              <1> ; device) gains ownership.
  1306 00000FB7 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
  1307 00000FBD 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
  1308                              <1> ;If a set map request, don't prompt the message!
  1309 00000FC3 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
  1310                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000FC7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000FC9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1311                              <1> 
  1312                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1313 00000FCA 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  1314 00000FCD 0441                <1>     add al, "A" ;Convert to a letter
  1315 00000FCF 880590010000        <1>     mov byte [.strikeMsgLetter], al
  1316 00000FD5 488D3576010000      <1>     lea rsi, .strikeMsg
  1317 00000FDC B937000000          <1>     mov ecx, .strikeMsgL
  1318                              <1> .cdtPrint:
  1319 00000FE1 AC                  <1>     lodsb   ;Get the char in al, inc rsi
  1320 00000FE2 CD29                <1>     int 29h ;Print char in al
  1321 00000FE4 FFC9                <1>     dec ecx
  1322 00000FE6 75F9                <1>     jnz .cdtPrint
  1323                              <1> 
  1324 00000FE8 E821000000          <1>     call .cdtCleanKeyb  ;Clean the buffer!
  1325 00000FED E80E000000          <1>     call .cdtAwaitKeyb  ;Await until a char ready in a friendly way :)
  1326                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1327                              <1> 
  1328 00000FF2 F8                  <1>     clc ;Indicate goodness through CF
  1329                              <1>     return
    13                              <2> %%_ret:
    14 00000FF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1330                              <1> .cdtBadExit:
  1331 00000FF4 58                  <1>     pop rax
  1332 00000FF5 B807000000          <1>     mov eax, drvBadMed
  1333 00000FFA F9                  <1>     stc ;Indicate badness through CF
  1334 00000FFB E9D5F6FFFF          <1>     jmp .errorExit
  1335                              <1> 
  1336                              <1> .cdtAwaitKeyb:
  1337 00001000 B800010000          <1>     mov eax, 0100h
  1338 00001005 CD36                <1>     int 36h ;If return ZF=ZE, we have no char in the buffer. Loop until we do!
  1339 00001007 74F7                <1>     jz .cdtAwaitKeyb
  1340 00001009 31C0                <1>     xor eax, eax
  1341 0000100B CD36                <1>     int 36h ;Now pull the char!
  1342                              <1>     return
    13                              <2> %%_ret:
    14 0000100D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1343                              <1> .cdtCleanKeyb:
  1344 0000100E B800010000          <1>     mov eax, 0100h
  1345 00001013 CD36                <1>     int 36h ;If return ZF=NZ we have a char in the buffer, pull it!
  1346                              <1>     retz    ;Else ZF=ZE, no char, ready to await the keypress.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001015 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001017 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1347 00001018 31C0                <1>     xor eax, eax    ;Pull the char in the buffer from buffer
  1348 0000101A CD36                <1>     int 36h
  1349 0000101C EBF0                <1>     jmp short .cdtCleanKeyb
  1350                              <1> 
  1351                              <1> .ioSetVolLbl:
  1352                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
  1353                              <1> ;Input: rbx -> io request packet
  1354                              <1> ;       rbp -> drvBlk to get volume ID from
  1355                              <1> ;Output: Pointer placed in io request packet
  1356 0000101E 50                  <1>     push rax
  1357 0000101F 488D4574            <1>     lea rax, qword [rbp + drvBlk.volLab]    ;Get the volLbl from the BPB
  1358 00001023 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
  1359 00001027 58                  <1>     pop rax
  1360 00001028 C3                  <1>     ret
  1361                              <1> 
  1362                              <1> .getTime:
  1363                              <1> ;Gets the current time in a format ready to be used for disk access.
  1364 00001029 31C0                <1>     xor eax, eax
  1365 0000102B CD3A                <1>     int 3Ah
  1366 0000102D 0FB7D2              <1>     movzx edx, dx
  1367 00001030 C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
  1368 00001033 09D1                <1>     or ecx, edx ;Store the current time count into ecx
  1369 00001035 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
  1370 00001037 740E                <1>     jz .stStore
  1371 00001039 0FB6C0              <1>     movzx eax, al
  1372 0000103C 51                  <1>     push rcx    ;Save the current time count
  1373 0000103D B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
  1374 00001042 F7E1                <1>     mul ecx
  1375 00001044 59                  <1>     pop rcx
  1376 00001045 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
  1377                              <1> .stStore:
  1378 00001047 F8                  <1>     clc
  1379                              <1>     return
    13                              <2> %%_ret:
    14 00001048 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1380                              <1> 
  1381                              <1> .setTime:
  1382                              <1> ;Sets the current time to the disk drive and resets the access counter
  1383 00001049 E8DBFFFFFF          <1>     call .getTime
  1384 0000104E 894D70              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
  1385 00001051 C6055501000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
  1386                              <1>     return
    13                              <2> %%_ret:
    14 00001058 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1387                              <1> 
  1388                              <1> .checkTime:
  1389                              <1> ;Does the time/access count check :)
  1390                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
  1391 00001059 E8CBFFFFFF          <1>     call .getTime   ;Returns in ecx the current time
  1392 0000105E 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
  1393 00001060 7517                <1>     jnz .ctOk
  1394 00001062 FE0545010000        <1>     inc byte [.bAccCnt]
  1395 00001068 803D3E01000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
  1396 0000106F 7217                <1>     jb .ctNoChange
  1397 00001071 FE0D36010000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
  1398 00001077 EB0D                <1>     jmp short .ctMaybeCh
  1399                              <1> .ctOk:
  1400 00001079 8B5570              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
  1401                              <1> ;ecx = time of current check, adjusted for day rollovers 
  1402 0000107C 29D1                <1>     sub ecx, edx    
  1403 0000107E 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
  1404 00001084 7602                <1>     jbe .ctNoChange
  1405                              <1> .ctMaybeCh:
  1406 00001086 F9                  <1>     stc
  1407                              <1>     return
    13                              <2> %%_ret:
    14 00001087 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1408                              <1> .ctNoChange:
  1409 00001088 F8                  <1>     clc
  1410                              <1>     return
    13                              <2> %%_ret:
    14 00001089 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1411                              <1> 
  1412                              <1> .callI33h:
  1413                              <1> ;Wraps all i33 calls allowing me to preserve all that I need to preserve
  1414                              <1> ; across these calls. Only allows returning values in ax.
  1415 0000108A 53                  <1>     push rbx
  1416 0000108B 51                  <1>     push rcx
  1417 0000108C 52                  <1>     push rdx
  1418 0000108D 56                  <1>     push rsi
  1419 0000108E 57                  <1>     push rdi
  1420 0000108F 55                  <1>     push rbp
  1421 00001090 CD33                <1>     int 33h
  1422 00001092 5D                  <1>     pop rbp
  1423 00001093 5F                  <1>     pop rdi
  1424 00001094 5E                  <1>     pop rsi
  1425 00001095 5A                  <1>     pop rdx
  1426 00001096 59                  <1>     pop rcx
  1427 00001097 5B                  <1>     pop rbx
  1428                              <1>     return
    13                              <2> %%_ret:
    14 00001098 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1429                              <1> 
  1430                              <1> .setBitsForAllDevs:
  1431                              <1> ;Sets the selected bits for all devices with a particular BIOS number.
  1432                              <1> ;Input: ax = Bits to set in wDevFlgs
  1433                              <1> ;       dl = BIOS drive number
  1434 00001099 55                  <1>     push rbp
  1435 0000109A 9C                  <1>     pushfq
  1436 0000109B 488D2D0D110000      <1>     lea rbp, .drvBlkTbl
  1437                              <1> .sbfadLp:
  1438 000010A2 385508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], dl
  1439 000010A5 7504                <1>     jne .sbfadNext
  1440 000010A7 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax
  1441                              <1> .sbfadNext:
  1442 000010AB 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1443 000010AF 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1444 000010B6 75EA                <1>     jne .sbfadLp
  1445                              <1> .sbfadExit:
  1446 000010B8 9D                  <1>     popfq
  1447 000010B9 5D                  <1>     pop rbp
  1448                              <1>     return
    13                              <2> %%_ret:
    14 000010BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1449                              <1> 
  1450                              <1> .i2fDriver:
  1451                              <1> ;Back door into the block driver :)
  1452 000010BB 80FC08              <1>     cmp ah, 08h
  1453 000010BE 7510                <1>     jne .i2fNotUs
  1454 000010C0 84C0                <1>     test al, al ;AL=00, Install check
  1455 000010C2 7412                <1>     jz .i2fCheck
  1456 000010C4 3C01                <1>     cmp al, 01  ;AL=01, Add block device
  1457 000010C6 7412                <1>     je .i2fAddTbl
  1458 000010C8 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
  1459 000010CA 745D                <1>     je .i2fExec
  1460 000010CC 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
  1461 000010CE 7479                <1>     je .i2fGivTbl
  1462                              <1> .i2fNotUs:
  1463 000010D0 FF25F8F3FFFF        <1>     jmp qword [i2FNext]
  1464                              <1> .i2fCheck:
  1465 000010D6 B0FF                <1>     mov al, -1  ;Indicate installed!
  1466 000010D8 48CF                <1>     iretq
  1467                              <1> .i2fAddTbl:
  1468                              <1> ;Adds a new entry to the drive chain and updates the multiownership bits
  1469                              <1> ; as it does :)
  1470                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
  1471                              <1> ;Destroy rax, rbx and rsi
  1472 000010DA 488D35CE100000      <1>     lea rsi, .drvBlkTbl
  1473 000010E1 0FB64708            <1>     movzx eax, byte [rdi + drvBlk.bBIOSNum]
  1474                              <1> .i2fATLp:
  1475 000010E5 384608              <1>     cmp byte [rsi + drvBlk.bBIOSNum], al
  1476 000010E8 7526                <1>     jne .i2fATNext
  1477                              <1> ;Set that the two disks are multi owned. New cannot own the drive
  1478                              <1> ; and make sure that the new drive has the accurate changeline bit set
  1479 000010EA 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti       ;Both drives now multi!
  1480 000010F0 66814F371000        <1>     or word [rdi + drvBlk.wDevFlgs], devMulti
  1481 000010F6 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv    ;New cant own drv
  1482                              <1> ;Changeline check.
  1483 000010FC 66816737FDFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devChgLine   ;Assume no changeline
  1484 00001102 66F746370200        <1>     test word [rsi + drvBlk.wDevFlgs], devChgLine   ;Do we really have cline?
  1485 00001108 7406                <1>     jz .i2fATNext   ;Skip adding the bit if not
  1486 0000110A 66814F370200        <1>     or word [rdi + drvBlk.wDevFlgs], devChgLine     ;Add if we do 
  1487                              <1> .i2fATNext:
  1488 00001110 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;Check if we @ end of table
  1489 00001117 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink] ;Walk if not
  1490 0000111B 75C8                <1>     jne .i2fATLp    ;And go again if not
  1491 0000111D 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi ;Else, link rdi onto the end
  1492 00001120 48C707FFFFFFFF      <1>     mov qword [rdi + drvBlk.pLink], -1  ;And terminate list @ rdi now :)
  1493 00001127 48CF                <1>     iretq
  1494                              <1> .i2fExec:
  1495                              <1> ;We make a small change in that we clean up the flags from the stack
  1496                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
  1497                              <1> ; as no useful information is ever passed in the flags from a driver
  1498                              <1> ; so by doing so, any ported applications which do an additional pop
  1499                              <1> ; from the stack to balance the stack will not be harmed by this.
  1500 00001129 50                  <1>     push rax
  1501 0000112A B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
  1502 0000112F CD2A                <1>     int 2Ah
  1503                              <1> 
  1504 00001131 53                  <1>     push rbx
  1505 00001132 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx  ;Save the ptr in var since we own it now :)
  1506 00001139 E849F4FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
  1507 0000113E 5B                  <1>     pop rbx
  1508                              <1> 
  1509 0000113F B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
  1510 00001144 CD2A                <1>     int 2Ah
  1511 00001146 58                  <1>     pop rax
  1512 00001147 48CF                <1>     iretq
  1513                              <1> .i2fGivTbl:
  1514                              <1> ;Output: rdi -> drvBlkTbl
  1515 00001149 488D3D5F100000      <1>     lea rdi, .drvBlkTbl
  1516 00001150 48CF                <1>     iretq
  1517                              <1> 
  1518 00001152 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert for drive "
  1518 0000115B 666F72206472697665- <1>
  1518 00001164 20                  <1>
  1519 00001165 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
  1519 0000116E 72696B650D0A616E79- <1>
  1519 00001177 206B6579207768656E- <1>
  1519 00001180 2072656164790D0A0A  <1>
  1520                              <1> .strikeMsgL equ $ - .strikeMsg
  1521                              <1> 
  1522 00001189 464154313220202000  <1> .fat12Str   db "FAT12   ",0
  1523 00001192 464154313620202000  <1> .fat16Str   db "FAT16   ",0
  1524 0000119B 464154333220202000  <1> .fat32Str   db "FAT32   ",0
  1525 000011A4 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
  1526                              <1> 
  1527 000011AD 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
  1528 000011AE FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check/IO.
  1529                              <1> 
  1530                              <1> ;Keep this @ 4096 for hotplugging a 4096 dev that needs 512 byte pseudo
  1531                              <1> ; access. 
  1532                              <1> ;Access to this buffer should be mediated through a critical section... 
  1533                              <1> ; but this driver doesnt need to be reentrant yet.
  1534 000011AF 000000000000000000- <1> .inBuffer   db 4096 dup (0)  
  1534 000011B8 000000000000000000- <1>
  1534 000011C1 000000000000000000- <1>
  1534 000011CA 000000000000000000- <1>
  1534 000011D3 000000000000000000- <1>
  1534 000011DC 000000000000000000- <1>
  1534 000011E5 000000000000000000- <1>
  1534 000011EE 000000000000000000- <1>
  1534 000011F7 000000000000000000- <1>
  1534 00001200 000000000000000000- <1>
  1534 00001209 000000000000000000- <1>
  1534 00001212 000000000000000000- <1>
  1534 0000121B 000000000000000000- <1>
  1534 00001224 000000000000000000- <1>
  1534 0000122D 000000000000000000- <1>
  1534 00001236 000000000000000000- <1>
  1534 0000123F 000000000000000000- <1>
  1534 00001248 000000000000000000- <1>
  1534 00001251 000000000000000000- <1>
  1534 0000125A 000000000000000000- <1>
  1534 00001263 000000000000000000- <1>
  1534 0000126C 000000000000000000- <1>
  1534 00001275 000000000000000000- <1>
  1534 0000127E 000000000000000000- <1>
  1534 00001287 000000000000000000- <1>
  1534 00001290 000000000000000000- <1>
  1534 00001299 000000000000000000- <1>
  1534 000012A2 000000000000000000- <1>
  1534 000012AB 000000000000000000- <1>
  1534 000012B4 000000000000000000- <1>
  1534 000012BD 000000000000000000- <1>
  1534 000012C6 000000000000000000- <1>
  1534 000012CF 000000000000000000- <1>
  1534 000012D8 000000000000000000- <1>
  1534 000012E1 000000000000000000- <1>
  1534 000012EA 000000000000000000- <1>
  1534 000012F3 000000000000000000- <1>
  1534 000012FC 000000000000000000- <1>
  1534 00001305 000000000000000000- <1>
  1534 0000130E 000000000000000000- <1>
  1534 00001317 000000000000000000- <1>
  1534 00001320 000000000000000000- <1>
  1534 00001329 000000000000000000- <1>
  1534 00001332 000000000000000000- <1>
  1534 0000133B 000000000000000000- <1>
  1534 00001344 000000000000000000- <1>
  1534 0000134D 000000000000000000- <1>
  1534 00001356 000000000000000000- <1>
  1534 0000135F 000000000000000000- <1>
  1534 00001368 000000000000000000- <1>
  1534 00001371 000000000000000000- <1>
  1534 0000137A 000000000000000000- <1>
  1534 00001383 000000000000000000- <1>
  1534 0000138C 000000000000000000- <1>
  1534 00001395 000000000000000000- <1>
  1534 0000139E 000000000000000000- <1>
  1534 000013A7 000000000000000000- <1>
  1534 000013B0 000000000000000000- <1>
  1534 000013B9 000000000000000000- <1>
  1534 000013C2 000000000000000000- <1>
  1534 000013CB 000000000000000000- <1>
  1534 000013D4 000000000000000000- <1>
  1534 000013DD 000000000000000000- <1>
  1534 000013E6 000000000000000000- <1>
  1534 000013EF 000000000000000000- <1>
  1534 000013F8 000000000000000000- <1>
  1534 00001401 000000000000000000- <1>
  1534 0000140A 000000000000000000- <1>
  1534 00001413 000000000000000000- <1>
  1534 0000141C 000000000000000000- <1>
  1534 00001425 000000000000000000- <1>
  1534 0000142E 000000000000000000- <1>
  1534 00001437 000000000000000000- <1>
  1534 00001440 000000000000000000- <1>
  1534 00001449 000000000000000000- <1>
  1534 00001452 000000000000000000- <1>
  1534 0000145B 000000000000000000- <1>
  1534 00001464 000000000000000000- <1>
  1534 0000146D 000000000000000000- <1>
  1534 00001476 000000000000000000- <1>
  1534 0000147F 000000000000000000- <1>
  1534 00001488 000000000000000000- <1>
  1534 00001491 000000000000000000- <1>
  1534 0000149A 000000000000000000- <1>
  1534 000014A3 000000000000000000- <1>
  1534 000014AC 000000000000000000- <1>
  1534 000014B5 000000000000000000- <1>
  1534 000014BE 000000000000000000- <1>
  1534 000014C7 000000000000000000- <1>
  1534 000014D0 000000000000000000- <1>
  1534 000014D9 000000000000000000- <1>
  1534 000014E2 000000000000000000- <1>
  1534 000014EB 000000000000000000- <1>
  1534 000014F4 000000000000000000- <1>
  1534 000014FD 000000000000000000- <1>
  1534 00001506 000000000000000000- <1>
  1534 0000150F 000000000000000000- <1>
  1534 00001518 000000000000000000- <1>
  1534 00001521 000000000000000000- <1>
  1534 0000152A 000000000000000000- <1>
  1534 00001533 000000000000000000- <1>
  1534 0000153C 000000000000000000- <1>
  1534 00001545 000000000000000000- <1>
  1534 0000154E 000000000000000000- <1>
  1534 00001557 000000000000000000- <1>
  1534 00001560 000000000000000000- <1>
  1534 00001569 000000000000000000- <1>
  1534 00001572 000000000000000000- <1>
  1534 0000157B 000000000000000000- <1>
  1534 00001584 000000000000000000- <1>
  1534 0000158D 000000000000000000- <1>
  1534 00001596 000000000000000000- <1>
  1534 0000159F 000000000000000000- <1>
  1534 000015A8 000000000000000000- <1>
  1534 000015B1 000000000000000000- <1>
  1534 000015BA 000000000000000000- <1>
  1534 000015C3 000000000000000000- <1>
  1534 000015CC 000000000000000000- <1>
  1534 000015D5 000000000000000000- <1>
  1534 000015DE 000000000000000000- <1>
  1534 000015E7 000000000000000000- <1>
  1534 000015F0 000000000000000000- <1>
  1534 000015F9 000000000000000000- <1>
  1534 00001602 000000000000000000- <1>
  1534 0000160B 000000000000000000- <1>
  1534 00001614 000000000000000000- <1>
  1534 0000161D 000000000000000000- <1>
  1534 00001626 000000000000000000- <1>
  1534 0000162F 000000000000000000- <1>
  1534 00001638 000000000000000000- <1>
  1534 00001641 000000000000000000- <1>
  1534 0000164A 000000000000000000- <1>
  1534 00001653 000000000000000000- <1>
  1534 0000165C 000000000000000000- <1>
  1534 00001665 000000000000000000- <1>
  1534 0000166E 000000000000000000- <1>
  1534 00001677 000000000000000000- <1>
  1534 00001680 000000000000000000- <1>
  1534 00001689 000000000000000000- <1>
  1534 00001692 000000000000000000- <1>
  1534 0000169B 000000000000000000- <1>
  1534 000016A4 000000000000000000- <1>
  1534 000016AD 000000000000000000- <1>
  1534 000016B6 000000000000000000- <1>
  1534 000016BF 000000000000000000- <1>
  1534 000016C8 000000000000000000- <1>
  1534 000016D1 000000000000000000- <1>
  1534 000016DA 000000000000000000- <1>
  1534 000016E3 000000000000000000- <1>
  1534 000016EC 000000000000000000- <1>
  1534 000016F5 000000000000000000- <1>
  1534 000016FE 000000000000000000- <1>
  1534 00001707 000000000000000000- <1>
  1534 00001710 000000000000000000- <1>
  1534 00001719 000000000000000000- <1>
  1534 00001722 000000000000000000- <1>
  1534 0000172B 000000000000000000- <1>
  1534 00001734 000000000000000000- <1>
  1534 0000173D 000000000000000000- <1>
  1534 00001746 000000000000000000- <1>
  1534 0000174F 000000000000000000- <1>
  1534 00001758 000000000000000000- <1>
  1534 00001761 000000000000000000- <1>
  1534 0000176A 000000000000000000- <1>
  1534 00001773 000000000000000000- <1>
  1534 0000177C 000000000000000000- <1>
  1534 00001785 000000000000000000- <1>
  1534 0000178E 000000000000000000- <1>
  1534 00001797 000000000000000000- <1>
  1534 000017A0 000000000000000000- <1>
  1534 000017A9 000000000000000000- <1>
  1534 000017B2 000000000000000000- <1>
  1534 000017BB 000000000000000000- <1>
  1534 000017C4 000000000000000000- <1>
  1534 000017CD 000000000000000000- <1>
  1534 000017D6 000000000000000000- <1>
  1534 000017DF 000000000000000000- <1>
  1534 000017E8 000000000000000000- <1>
  1534 000017F1 000000000000000000- <1>
  1534 000017FA 000000000000000000- <1>
  1534 00001803 000000000000000000- <1>
  1534 0000180C 000000000000000000- <1>
  1534 00001815 000000000000000000- <1>
  1534 0000181E 000000000000000000- <1>
  1534 00001827 000000000000000000- <1>
  1534 00001830 000000000000000000- <1>
  1534 00001839 000000000000000000- <1>
  1534 00001842 000000000000000000- <1>
  1534 0000184B 000000000000000000- <1>
  1534 00001854 000000000000000000- <1>
  1534 0000185D 000000000000000000- <1>
  1534 00001866 000000000000000000- <1>
  1534 0000186F 000000000000000000- <1>
  1534 00001878 000000000000000000- <1>
  1534 00001881 000000000000000000- <1>
  1534 0000188A 000000000000000000- <1>
  1534 00001893 000000000000000000- <1>
  1534 0000189C 000000000000000000- <1>
  1534 000018A5 000000000000000000- <1>
  1534 000018AE 000000000000000000- <1>
  1534 000018B7 000000000000000000- <1>
  1534 000018C0 000000000000000000- <1>
  1534 000018C9 000000000000000000- <1>
  1534 000018D2 000000000000000000- <1>
  1534 000018DB 000000000000000000- <1>
  1534 000018E4 000000000000000000- <1>
  1534 000018ED 000000000000000000- <1>
  1534 000018F6 000000000000000000- <1>
  1534 000018FF 000000000000000000- <1>
  1534 00001908 000000000000000000- <1>
  1534 00001911 000000000000000000- <1>
  1534 0000191A 000000000000000000- <1>
  1534 00001923 000000000000000000- <1>
  1534 0000192C 000000000000000000- <1>
  1534 00001935 000000000000000000- <1>
  1534 0000193E 000000000000000000- <1>
  1534 00001947 000000000000000000- <1>
  1534 00001950 000000000000000000- <1>
  1534 00001959 000000000000000000- <1>
  1534 00001962 000000000000000000- <1>
  1534 0000196B 000000000000000000- <1>
  1534 00001974 000000000000000000- <1>
  1534 0000197D 000000000000000000- <1>
  1534 00001986 000000000000000000- <1>
  1534 0000198F 000000000000000000- <1>
  1534 00001998 000000000000000000- <1>
  1534 000019A1 000000000000000000- <1>
  1534 000019AA 000000000000000000- <1>
  1534 000019B3 000000000000000000- <1>
  1534 000019BC 000000000000000000- <1>
  1534 000019C5 000000000000000000- <1>
  1534 000019CE 000000000000000000- <1>
  1534 000019D7 000000000000000000- <1>
  1534 000019E0 000000000000000000- <1>
  1534 000019E9 000000000000000000- <1>
  1534 000019F2 000000000000000000- <1>
  1534 000019FB 000000000000000000- <1>
  1534 00001A04 000000000000000000- <1>
  1534 00001A0D 000000000000000000- <1>
  1534 00001A16 000000000000000000- <1>
  1534 00001A1F 000000000000000000- <1>
  1534 00001A28 000000000000000000- <1>
  1534 00001A31 000000000000000000- <1>
  1534 00001A3A 000000000000000000- <1>
  1534 00001A43 000000000000000000- <1>
  1534 00001A4C 000000000000000000- <1>
  1534 00001A55 000000000000000000- <1>
  1534 00001A5E 000000000000000000- <1>
  1534 00001A67 000000000000000000- <1>
  1534 00001A70 000000000000000000- <1>
  1534 00001A79 000000000000000000- <1>
  1534 00001A82 000000000000000000- <1>
  1534 00001A8B 000000000000000000- <1>
  1534 00001A94 000000000000000000- <1>
  1534 00001A9D 000000000000000000- <1>
  1534 00001AA6 000000000000000000- <1>
  1534 00001AAF 000000000000000000- <1>
  1534 00001AB8 000000000000000000- <1>
  1534 00001AC1 000000000000000000- <1>
  1534 00001ACA 000000000000000000- <1>
  1534 00001AD3 000000000000000000- <1>
  1534 00001ADC 000000000000000000- <1>
  1534 00001AE5 000000000000000000- <1>
  1534 00001AEE 000000000000000000- <1>
  1534 00001AF7 000000000000000000- <1>
  1534 00001B00 000000000000000000- <1>
  1534 00001B09 000000000000000000- <1>
  1534 00001B12 000000000000000000- <1>
  1534 00001B1B 000000000000000000- <1>
  1534 00001B24 000000000000000000- <1>
  1534 00001B2D 000000000000000000- <1>
  1534 00001B36 000000000000000000- <1>
  1534 00001B3F 000000000000000000- <1>
  1534 00001B48 000000000000000000- <1>
  1534 00001B51 000000000000000000- <1>
  1534 00001B5A 000000000000000000- <1>
  1534 00001B63 000000000000000000- <1>
  1534 00001B6C 000000000000000000- <1>
  1534 00001B75 000000000000000000- <1>
  1534 00001B7E 000000000000000000- <1>
  1534 00001B87 000000000000000000- <1>
  1534 00001B90 000000000000000000- <1>
  1534 00001B99 000000000000000000- <1>
  1534 00001BA2 000000000000000000- <1>
  1534 00001BAB 000000000000000000- <1>
  1534 00001BB4 000000000000000000- <1>
  1534 00001BBD 000000000000000000- <1>
  1534 00001BC6 000000000000000000- <1>
  1534 00001BCF 000000000000000000- <1>
  1534 00001BD8 000000000000000000- <1>
  1534 00001BE1 000000000000000000- <1>
  1534 00001BEA 000000000000000000- <1>
  1534 00001BF3 000000000000000000- <1>
  1534 00001BFC 000000000000000000- <1>
  1534 00001C05 000000000000000000- <1>
  1534 00001C0E 000000000000000000- <1>
  1534 00001C17 000000000000000000- <1>
  1534 00001C20 000000000000000000- <1>
  1534 00001C29 000000000000000000- <1>
  1534 00001C32 000000000000000000- <1>
  1534 00001C3B 000000000000000000- <1>
  1534 00001C44 000000000000000000- <1>
  1534 00001C4D 000000000000000000- <1>
  1534 00001C56 000000000000000000- <1>
  1534 00001C5F 000000000000000000- <1>
  1534 00001C68 000000000000000000- <1>
  1534 00001C71 000000000000000000- <1>
  1534 00001C7A 000000000000000000- <1>
  1534 00001C83 000000000000000000- <1>
  1534 00001C8C 000000000000000000- <1>
  1534 00001C95 000000000000000000- <1>
  1534 00001C9E 000000000000000000- <1>
  1534 00001CA7 000000000000000000- <1>
  1534 00001CB0 000000000000000000- <1>
  1534 00001CB9 000000000000000000- <1>
  1534 00001CC2 000000000000000000- <1>
  1534 00001CCB 000000000000000000- <1>
  1534 00001CD4 000000000000000000- <1>
  1534 00001CDD 000000000000000000- <1>
  1534 00001CE6 000000000000000000- <1>
  1534 00001CEF 000000000000000000- <1>
  1534 00001CF8 000000000000000000- <1>
  1534 00001D01 000000000000000000- <1>
  1534 00001D0A 000000000000000000- <1>
  1534 00001D13 000000000000000000- <1>
  1534 00001D1C 000000000000000000- <1>
  1534 00001D25 000000000000000000- <1>
  1534 00001D2E 000000000000000000- <1>
  1534 00001D37 000000000000000000- <1>
  1534 00001D40 000000000000000000- <1>
  1534 00001D49 000000000000000000- <1>
  1534 00001D52 000000000000000000- <1>
  1534 00001D5B 000000000000000000- <1>
  1534 00001D64 000000000000000000- <1>
  1534 00001D6D 000000000000000000- <1>
  1534 00001D76 000000000000000000- <1>
  1534 00001D7F 000000000000000000- <1>
  1534 00001D88 000000000000000000- <1>
  1534 00001D91 000000000000000000- <1>
  1534 00001D9A 000000000000000000- <1>
  1534 00001DA3 000000000000000000- <1>
  1534 00001DAC 000000000000000000- <1>
  1534 00001DB5 000000000000000000- <1>
  1534 00001DBE 000000000000000000- <1>
  1534 00001DC7 000000000000000000- <1>
  1534 00001DD0 000000000000000000- <1>
  1534 00001DD9 000000000000000000- <1>
  1534 00001DE2 000000000000000000- <1>
  1534 00001DEB 000000000000000000- <1>
  1534 00001DF4 000000000000000000- <1>
  1534 00001DFD 000000000000000000- <1>
  1534 00001E06 000000000000000000- <1>
  1534 00001E0F 000000000000000000- <1>
  1534 00001E18 000000000000000000- <1>
  1534 00001E21 000000000000000000- <1>
  1534 00001E2A 000000000000000000- <1>
  1534 00001E33 000000000000000000- <1>
  1534 00001E3C 000000000000000000- <1>
  1534 00001E45 000000000000000000- <1>
  1534 00001E4E 000000000000000000- <1>
  1534 00001E57 000000000000000000- <1>
  1534 00001E60 000000000000000000- <1>
  1534 00001E69 000000000000000000- <1>
  1534 00001E72 000000000000000000- <1>
  1534 00001E7B 000000000000000000- <1>
  1534 00001E84 000000000000000000- <1>
  1534 00001E8D 000000000000000000- <1>
  1534 00001E96 000000000000000000- <1>
  1534 00001E9F 000000000000000000- <1>
  1534 00001EA8 000000000000000000- <1>
  1534 00001EB1 000000000000000000- <1>
  1534 00001EBA 000000000000000000- <1>
  1534 00001EC3 000000000000000000- <1>
  1534 00001ECC 000000000000000000- <1>
  1534 00001ED5 000000000000000000- <1>
  1534 00001EDE 000000000000000000- <1>
  1534 00001EE7 000000000000000000- <1>
  1534 00001EF0 000000000000000000- <1>
  1534 00001EF9 000000000000000000- <1>
  1534 00001F02 000000000000000000- <1>
  1534 00001F0B 000000000000000000- <1>
  1534 00001F14 000000000000000000- <1>
  1534 00001F1D 000000000000000000- <1>
  1534 00001F26 000000000000000000- <1>
  1534 00001F2F 000000000000000000- <1>
  1534 00001F38 000000000000000000- <1>
  1534 00001F41 000000000000000000- <1>
  1534 00001F4A 000000000000000000- <1>
  1534 00001F53 000000000000000000- <1>
  1534 00001F5C 000000000000000000- <1>
  1534 00001F65 000000000000000000- <1>
  1534 00001F6E 000000000000000000- <1>
  1534 00001F77 000000000000000000- <1>
  1534 00001F80 000000000000000000- <1>
  1534 00001F89 000000000000000000- <1>
  1534 00001F92 000000000000000000- <1>
  1534 00001F9B 000000000000000000- <1>
  1534 00001FA4 000000000000000000- <1>
  1534 00001FAD 000000000000000000- <1>
  1534 00001FB6 000000000000000000- <1>
  1534 00001FBF 000000000000000000- <1>
  1534 00001FC8 000000000000000000- <1>
  1534 00001FD1 000000000000000000- <1>
  1534 00001FDA 000000000000000000- <1>
  1534 00001FE3 000000000000000000- <1>
  1534 00001FEC 000000000000000000- <1>
  1534 00001FF5 000000000000000000- <1>
  1534 00001FFE 000000000000000000- <1>
  1534 00002007 000000000000000000- <1>
  1534 00002010 000000000000000000- <1>
  1534 00002019 000000000000000000- <1>
  1534 00002022 000000000000000000- <1>
  1534 0000202B 000000000000000000- <1>
  1534 00002034 000000000000000000- <1>
  1534 0000203D 000000000000000000- <1>
  1534 00002046 000000000000000000- <1>
  1534 0000204F 000000000000000000- <1>
  1534 00002058 000000000000000000- <1>
  1534 00002061 000000000000000000- <1>
  1534 0000206A 000000000000000000- <1>
  1534 00002073 000000000000000000- <1>
  1534 0000207C 000000000000000000- <1>
  1534 00002085 000000000000000000- <1>
  1534 0000208E 000000000000000000- <1>
  1534 00002097 000000000000000000- <1>
  1534 000020A0 000000000000000000- <1>
  1534 000020A9 000000000000000000- <1>
  1534 000020B2 000000000000000000- <1>
  1534 000020BB 000000000000000000- <1>
  1534 000020C4 000000000000000000- <1>
  1534 000020CD 000000000000000000- <1>
  1534 000020D6 000000000000000000- <1>
  1534 000020DF 000000000000000000- <1>
  1534 000020E8 000000000000000000- <1>
  1534 000020F1 000000000000000000- <1>
  1534 000020FA 000000000000000000- <1>
  1534 00002103 000000000000000000- <1>
  1534 0000210C 000000000000000000- <1>
  1534 00002115 000000000000000000- <1>
  1534 0000211E 000000000000000000- <1>
  1534 00002127 000000000000000000- <1>
  1534 00002130 000000000000000000- <1>
  1534 00002139 000000000000000000- <1>
  1534 00002142 000000000000000000- <1>
  1534 0000214B 000000000000000000- <1>
  1534 00002154 000000000000000000- <1>
  1534 0000215D 000000000000000000- <1>
  1534 00002166 000000000000000000- <1>
  1534 0000216F 000000000000000000- <1>
  1534 00002178 000000000000000000- <1>
  1534 00002181 000000000000000000- <1>
  1534 0000218A 000000000000000000- <1>
  1534 00002193 000000000000000000- <1>
  1534 0000219C 000000000000000000- <1>
  1534 000021A5 000000000000000000- <1>
  1534 000021AE 00                  <1>
  1535                              <1> 
  1536                              <1> .drvBlkTbl:
  1537                              <1>     ;db drvBlkTblL*drvBlk_size dup (0)
  1538                              <1> ;Have all drives default to a 1.44Mb partition
  1539                              <1>     %assign i 0
  1540                              <1>     %rep drvBlkTblL
  1541                              <1>     istruc drvBlk
  1542                              <1>         at .pLink,      dq -1   ;End of table marker
  1543                              <1>         at .bBIOSNum,   db i    ;DOS drive number
  1544                              <1>         at .bDOSNum,    db i    ;BIOS drives default to removable
  1545                              <1> ;Do a FAT12/16 BPB in FAT32 format
  1546                              <1>         at .wBpS,       dw 200h
  1547                              <1>         at .bSpC,       db 01h
  1548                              <1>         at .wResC,      dw 0001h
  1549                              <1>         at .bNumFAT,    db 02h    
  1550                              <1>         at .wRtCntNum,  dw 00E0h    
  1551                              <1>         at .wTotSec16,  dw 0B40h    
  1552                              <1>         at .bMedDesc,   db 0F0h    
  1553                              <1>         at .wFATsz16,   dw 0009h    
  1554                              <1>         at .wSecPerTrk, dw 0012h    
  1555                              <1>         at .wNumHeads,  dw 0002h    
  1556                              <1>         at .dHiddSec,   dd 0    
  1557                              <1>         at .dTotSec32,  dd 0     
  1558                              <1> ;FAT 32 fields. All zeros
  1559                              <1>         at .FATsz32,    dd 0
  1560                              <1>         at .extFlags,   dw 0
  1561                              <1>         at .FSver,      dw 0
  1562                              <1>         at .RootClus,   dd 0
  1563                              <1>         at .FSinfo,     dw 0
  1564                              <1>         at .BkBootSec,  dw 0
  1565                              <1> ;DrvBlk Flags
  1566                              <1>         at .bBpbType,   db bpbFat12
  1567                              <1>         at .wOpenCnt,   dw 0
  1568                              <1>         at .bDevType,   db 0
  1569                              <1>         at .wDevFlgs,   dw 0
  1570                              <1>         at .wNumCyl,    dw 63   ;63 Cylinders
  1571                              <1>         istruc bpb32
  1572                              <1>             at .bytsPerSec, dw 200h
  1573                              <1>             at .secPerClus, db 01h
  1574                              <1>             at .revdSecCnt, dw 0001h
  1575                              <1>             at .numFATs,    db 02h    
  1576                              <1>             at .rootEntCnt, dw 00E0h    
  1577                              <1>             at .totSec16,   dw 0B40h    
  1578                              <1>             at .media,      db 0F0h    
  1579                              <1>             at .FATsz16,    dw 0009h    
  1580                              <1>             at .secPerTrk,  dw 0012h    
  1581                              <1>             at .numHeads,   dw 0002h    
  1582                              <1>             at .hiddSec,    dd 0    
  1583                              <1>             at .totSec32,   dd 0     
  1584                              <1>             at .FATsz32,    dd 0
  1585                              <1>             at .extFlags,   dw 0
  1586                              <1>             at .FSver,      dw 0
  1587                              <1>             at .RootClus,   dd 0
  1588                              <1>             at .FSinfo,     dw 0
  1589                              <1>             at .BkBootSec,  dw 0
  1590                              <1>             at .reserved,   db 12 dup (0) 
  1591                              <1>         iend
  1592                              <1>         at .dAccTime,   dd 0
  1593                              <1>         at .volLab,     db "NO NAME    ",0
  1594                              <1>         at .volId,      dd 0    ;Vol ID of 0
  1595                              <1>         at .filSysType, db "FAT12   ",0
  1596                              <1>     iend
  1597                              <1>         %assign i i+1
  1598                              <1>     %endrep
  1541                              <2>  istruc drvBlk
  1542 000021AF FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 000021B7 00                  <2>  at .bBIOSNum, db i
  1544 000021B8 00                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 000021B9 0002                <2>  at .wBpS, dw 200h
  1547 000021BB 01                  <2>  at .bSpC, db 01h
  1548 000021BC 0100                <2>  at .wResC, dw 0001h
  1549 000021BE 02                  <2>  at .bNumFAT, db 02h
  1550 000021BF E000                <2>  at .wRtCntNum, dw 00E0h
  1551 000021C1 400B                <2>  at .wTotSec16, dw 0B40h
  1552 000021C3 F0                  <2>  at .bMedDesc, db 0F0h
  1553 000021C4 0900                <2>  at .wFATsz16, dw 0009h
  1554 000021C6 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 000021C8 0200                <2>  at .wNumHeads, dw 0002h
  1556 000021CA 00000000            <2>  at .dHiddSec, dd 0
  1557 000021CE 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 000021D2 00000000            <2>  at .FATsz32, dd 0
  1560 000021D6 0000                <2>  at .extFlags, dw 0
  1561 000021D8 0000                <2>  at .FSver, dw 0
  1562 000021DA 00000000            <2>  at .RootClus, dd 0
  1563 000021DE 0000                <2>  at .FSinfo, dw 0
  1564 000021E0 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 000021E2 10                  <2>  at .bBpbType, db bpbFat12
  1567 000021E3 0000                <2>  at .wOpenCnt, dw 0
  1568 000021E5 00                  <2>  at .bDevType, db 0
  1569 000021E6 0000                <2>  at .wDevFlgs, dw 0
  1570 000021E8 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 000021EA 0002                <2>  at .bytsPerSec, dw 200h
  1573 000021EC 01                  <2>  at .secPerClus, db 01h
  1574 000021ED 0100                <2>  at .revdSecCnt, dw 0001h
  1575 000021EF 02                  <2>  at .numFATs, db 02h
  1576 000021F0 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 000021F2 400B                <2>  at .totSec16, dw 0B40h
  1578 000021F4 F0                  <2>  at .media, db 0F0h
  1579 000021F5 0900                <2>  at .FATsz16, dw 0009h
  1580 000021F7 1200                <2>  at .secPerTrk, dw 0012h
  1581 000021F9 0200                <2>  at .numHeads, dw 0002h
  1582 000021FB 00000000            <2>  at .hiddSec, dd 0
  1583 000021FF 00000000            <2>  at .totSec32, dd 0
  1584 00002203 00000000            <2>  at .FATsz32, dd 0
  1585 00002207 0000                <2>  at .extFlags, dw 0
  1586 00002209 0000                <2>  at .FSver, dw 0
  1587 0000220B 00000000            <2>  at .RootClus, dd 0
  1588 0000220F 0000                <2>  at .FSinfo, dw 0
  1589 00002211 0000                <2>  at .BkBootSec, dw 0
  1590 00002213 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 0000221C 000000              <2>
  1591                              <2>  iend
  1592 0000221F 00000000            <2>  at .dAccTime, dd 0
  1593 00002223 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 0000222C 202000              <2>
  1594 0000222F 00000000            <2>  at .volId, dd 0
  1595 00002233 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 0000223C FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002244 01                  <2>  at .bBIOSNum, db i
  1544 00002245 01                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002246 0002                <2>  at .wBpS, dw 200h
  1547 00002248 01                  <2>  at .bSpC, db 01h
  1548 00002249 0100                <2>  at .wResC, dw 0001h
  1549 0000224B 02                  <2>  at .bNumFAT, db 02h
  1550 0000224C E000                <2>  at .wRtCntNum, dw 00E0h
  1551 0000224E 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002250 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002251 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002253 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002255 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002257 00000000            <2>  at .dHiddSec, dd 0
  1557 0000225B 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 0000225F 00000000            <2>  at .FATsz32, dd 0
  1560 00002263 0000                <2>  at .extFlags, dw 0
  1561 00002265 0000                <2>  at .FSver, dw 0
  1562 00002267 00000000            <2>  at .RootClus, dd 0
  1563 0000226B 0000                <2>  at .FSinfo, dw 0
  1564 0000226D 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 0000226F 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002270 0000                <2>  at .wOpenCnt, dw 0
  1568 00002272 00                  <2>  at .bDevType, db 0
  1569 00002273 0000                <2>  at .wDevFlgs, dw 0
  1570 00002275 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002277 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002279 01                  <2>  at .secPerClus, db 01h
  1574 0000227A 0100                <2>  at .revdSecCnt, dw 0001h
  1575 0000227C 02                  <2>  at .numFATs, db 02h
  1576 0000227D E000                <2>  at .rootEntCnt, dw 00E0h
  1577 0000227F 400B                <2>  at .totSec16, dw 0B40h
  1578 00002281 F0                  <2>  at .media, db 0F0h
  1579 00002282 0900                <2>  at .FATsz16, dw 0009h
  1580 00002284 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002286 0200                <2>  at .numHeads, dw 0002h
  1582 00002288 00000000            <2>  at .hiddSec, dd 0
  1583 0000228C 00000000            <2>  at .totSec32, dd 0
  1584 00002290 00000000            <2>  at .FATsz32, dd 0
  1585 00002294 0000                <2>  at .extFlags, dw 0
  1586 00002296 0000                <2>  at .FSver, dw 0
  1587 00002298 00000000            <2>  at .RootClus, dd 0
  1588 0000229C 0000                <2>  at .FSinfo, dw 0
  1589 0000229E 0000                <2>  at .BkBootSec, dw 0
  1590 000022A0 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 000022A9 000000              <2>
  1591                              <2>  iend
  1592 000022AC 00000000            <2>  at .dAccTime, dd 0
  1593 000022B0 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 000022B9 202000              <2>
  1594 000022BC 00000000            <2>  at .volId, dd 0
  1595 000022C0 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 000022C9 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 000022D1 02                  <2>  at .bBIOSNum, db i
  1544 000022D2 02                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 000022D3 0002                <2>  at .wBpS, dw 200h
  1547 000022D5 01                  <2>  at .bSpC, db 01h
  1548 000022D6 0100                <2>  at .wResC, dw 0001h
  1549 000022D8 02                  <2>  at .bNumFAT, db 02h
  1550 000022D9 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 000022DB 400B                <2>  at .wTotSec16, dw 0B40h
  1552 000022DD F0                  <2>  at .bMedDesc, db 0F0h
  1553 000022DE 0900                <2>  at .wFATsz16, dw 0009h
  1554 000022E0 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 000022E2 0200                <2>  at .wNumHeads, dw 0002h
  1556 000022E4 00000000            <2>  at .dHiddSec, dd 0
  1557 000022E8 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 000022EC 00000000            <2>  at .FATsz32, dd 0
  1560 000022F0 0000                <2>  at .extFlags, dw 0
  1561 000022F2 0000                <2>  at .FSver, dw 0
  1562 000022F4 00000000            <2>  at .RootClus, dd 0
  1563 000022F8 0000                <2>  at .FSinfo, dw 0
  1564 000022FA 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 000022FC 10                  <2>  at .bBpbType, db bpbFat12
  1567 000022FD 0000                <2>  at .wOpenCnt, dw 0
  1568 000022FF 00                  <2>  at .bDevType, db 0
  1569 00002300 0000                <2>  at .wDevFlgs, dw 0
  1570 00002302 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002304 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002306 01                  <2>  at .secPerClus, db 01h
  1574 00002307 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002309 02                  <2>  at .numFATs, db 02h
  1576 0000230A E000                <2>  at .rootEntCnt, dw 00E0h
  1577 0000230C 400B                <2>  at .totSec16, dw 0B40h
  1578 0000230E F0                  <2>  at .media, db 0F0h
  1579 0000230F 0900                <2>  at .FATsz16, dw 0009h
  1580 00002311 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002313 0200                <2>  at .numHeads, dw 0002h
  1582 00002315 00000000            <2>  at .hiddSec, dd 0
  1583 00002319 00000000            <2>  at .totSec32, dd 0
  1584 0000231D 00000000            <2>  at .FATsz32, dd 0
  1585 00002321 0000                <2>  at .extFlags, dw 0
  1586 00002323 0000                <2>  at .FSver, dw 0
  1587 00002325 00000000            <2>  at .RootClus, dd 0
  1588 00002329 0000                <2>  at .FSinfo, dw 0
  1589 0000232B 0000                <2>  at .BkBootSec, dw 0
  1590 0000232D 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002336 000000              <2>
  1591                              <2>  iend
  1592 00002339 00000000            <2>  at .dAccTime, dd 0
  1593 0000233D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002346 202000              <2>
  1594 00002349 00000000            <2>  at .volId, dd 0
  1595 0000234D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002356 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 0000235E 03                  <2>  at .bBIOSNum, db i
  1544 0000235F 03                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002360 0002                <2>  at .wBpS, dw 200h
  1547 00002362 01                  <2>  at .bSpC, db 01h
  1548 00002363 0100                <2>  at .wResC, dw 0001h
  1549 00002365 02                  <2>  at .bNumFAT, db 02h
  1550 00002366 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002368 400B                <2>  at .wTotSec16, dw 0B40h
  1552 0000236A F0                  <2>  at .bMedDesc, db 0F0h
  1553 0000236B 0900                <2>  at .wFATsz16, dw 0009h
  1554 0000236D 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 0000236F 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002371 00000000            <2>  at .dHiddSec, dd 0
  1557 00002375 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002379 00000000            <2>  at .FATsz32, dd 0
  1560 0000237D 0000                <2>  at .extFlags, dw 0
  1561 0000237F 0000                <2>  at .FSver, dw 0
  1562 00002381 00000000            <2>  at .RootClus, dd 0
  1563 00002385 0000                <2>  at .FSinfo, dw 0
  1564 00002387 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002389 10                  <2>  at .bBpbType, db bpbFat12
  1567 0000238A 0000                <2>  at .wOpenCnt, dw 0
  1568 0000238C 00                  <2>  at .bDevType, db 0
  1569 0000238D 0000                <2>  at .wDevFlgs, dw 0
  1570 0000238F 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002391 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002393 01                  <2>  at .secPerClus, db 01h
  1574 00002394 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002396 02                  <2>  at .numFATs, db 02h
  1576 00002397 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002399 400B                <2>  at .totSec16, dw 0B40h
  1578 0000239B F0                  <2>  at .media, db 0F0h
  1579 0000239C 0900                <2>  at .FATsz16, dw 0009h
  1580 0000239E 1200                <2>  at .secPerTrk, dw 0012h
  1581 000023A0 0200                <2>  at .numHeads, dw 0002h
  1582 000023A2 00000000            <2>  at .hiddSec, dd 0
  1583 000023A6 00000000            <2>  at .totSec32, dd 0
  1584 000023AA 00000000            <2>  at .FATsz32, dd 0
  1585 000023AE 0000                <2>  at .extFlags, dw 0
  1586 000023B0 0000                <2>  at .FSver, dw 0
  1587 000023B2 00000000            <2>  at .RootClus, dd 0
  1588 000023B6 0000                <2>  at .FSinfo, dw 0
  1589 000023B8 0000                <2>  at .BkBootSec, dw 0
  1590 000023BA 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 000023C3 000000              <2>
  1591                              <2>  iend
  1592 000023C6 00000000            <2>  at .dAccTime, dd 0
  1593 000023CA 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 000023D3 202000              <2>
  1594 000023D6 00000000            <2>  at .volId, dd 0
  1595 000023DA 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 000023E3 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 000023EB 04                  <2>  at .bBIOSNum, db i
  1544 000023EC 04                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 000023ED 0002                <2>  at .wBpS, dw 200h
  1547 000023EF 01                  <2>  at .bSpC, db 01h
  1548 000023F0 0100                <2>  at .wResC, dw 0001h
  1549 000023F2 02                  <2>  at .bNumFAT, db 02h
  1550 000023F3 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 000023F5 400B                <2>  at .wTotSec16, dw 0B40h
  1552 000023F7 F0                  <2>  at .bMedDesc, db 0F0h
  1553 000023F8 0900                <2>  at .wFATsz16, dw 0009h
  1554 000023FA 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 000023FC 0200                <2>  at .wNumHeads, dw 0002h
  1556 000023FE 00000000            <2>  at .dHiddSec, dd 0
  1557 00002402 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002406 00000000            <2>  at .FATsz32, dd 0
  1560 0000240A 0000                <2>  at .extFlags, dw 0
  1561 0000240C 0000                <2>  at .FSver, dw 0
  1562 0000240E 00000000            <2>  at .RootClus, dd 0
  1563 00002412 0000                <2>  at .FSinfo, dw 0
  1564 00002414 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002416 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002417 0000                <2>  at .wOpenCnt, dw 0
  1568 00002419 00                  <2>  at .bDevType, db 0
  1569 0000241A 0000                <2>  at .wDevFlgs, dw 0
  1570 0000241C 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 0000241E 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002420 01                  <2>  at .secPerClus, db 01h
  1574 00002421 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002423 02                  <2>  at .numFATs, db 02h
  1576 00002424 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002426 400B                <2>  at .totSec16, dw 0B40h
  1578 00002428 F0                  <2>  at .media, db 0F0h
  1579 00002429 0900                <2>  at .FATsz16, dw 0009h
  1580 0000242B 1200                <2>  at .secPerTrk, dw 0012h
  1581 0000242D 0200                <2>  at .numHeads, dw 0002h
  1582 0000242F 00000000            <2>  at .hiddSec, dd 0
  1583 00002433 00000000            <2>  at .totSec32, dd 0
  1584 00002437 00000000            <2>  at .FATsz32, dd 0
  1585 0000243B 0000                <2>  at .extFlags, dw 0
  1586 0000243D 0000                <2>  at .FSver, dw 0
  1587 0000243F 00000000            <2>  at .RootClus, dd 0
  1588 00002443 0000                <2>  at .FSinfo, dw 0
  1589 00002445 0000                <2>  at .BkBootSec, dw 0
  1590 00002447 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002450 000000              <2>
  1591                              <2>  iend
  1592 00002453 00000000            <2>  at .dAccTime, dd 0
  1593 00002457 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002460 202000              <2>
  1594 00002463 00000000            <2>  at .volId, dd 0
  1595 00002467 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002470 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002478 05                  <2>  at .bBIOSNum, db i
  1544 00002479 05                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 0000247A 0002                <2>  at .wBpS, dw 200h
  1547 0000247C 01                  <2>  at .bSpC, db 01h
  1548 0000247D 0100                <2>  at .wResC, dw 0001h
  1549 0000247F 02                  <2>  at .bNumFAT, db 02h
  1550 00002480 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002482 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002484 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002485 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002487 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002489 0200                <2>  at .wNumHeads, dw 0002h
  1556 0000248B 00000000            <2>  at .dHiddSec, dd 0
  1557 0000248F 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002493 00000000            <2>  at .FATsz32, dd 0
  1560 00002497 0000                <2>  at .extFlags, dw 0
  1561 00002499 0000                <2>  at .FSver, dw 0
  1562 0000249B 00000000            <2>  at .RootClus, dd 0
  1563 0000249F 0000                <2>  at .FSinfo, dw 0
  1564 000024A1 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 000024A3 10                  <2>  at .bBpbType, db bpbFat12
  1567 000024A4 0000                <2>  at .wOpenCnt, dw 0
  1568 000024A6 00                  <2>  at .bDevType, db 0
  1569 000024A7 0000                <2>  at .wDevFlgs, dw 0
  1570 000024A9 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 000024AB 0002                <2>  at .bytsPerSec, dw 200h
  1573 000024AD 01                  <2>  at .secPerClus, db 01h
  1574 000024AE 0100                <2>  at .revdSecCnt, dw 0001h
  1575 000024B0 02                  <2>  at .numFATs, db 02h
  1576 000024B1 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 000024B3 400B                <2>  at .totSec16, dw 0B40h
  1578 000024B5 F0                  <2>  at .media, db 0F0h
  1579 000024B6 0900                <2>  at .FATsz16, dw 0009h
  1580 000024B8 1200                <2>  at .secPerTrk, dw 0012h
  1581 000024BA 0200                <2>  at .numHeads, dw 0002h
  1582 000024BC 00000000            <2>  at .hiddSec, dd 0
  1583 000024C0 00000000            <2>  at .totSec32, dd 0
  1584 000024C4 00000000            <2>  at .FATsz32, dd 0
  1585 000024C8 0000                <2>  at .extFlags, dw 0
  1586 000024CA 0000                <2>  at .FSver, dw 0
  1587 000024CC 00000000            <2>  at .RootClus, dd 0
  1588 000024D0 0000                <2>  at .FSinfo, dw 0
  1589 000024D2 0000                <2>  at .BkBootSec, dw 0
  1590 000024D4 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 000024DD 000000              <2>
  1591                              <2>  iend
  1592 000024E0 00000000            <2>  at .dAccTime, dd 0
  1593 000024E4 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 000024ED 202000              <2>
  1594 000024F0 00000000            <2>  at .volId, dd 0
  1595 000024F4 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 000024FD FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002505 06                  <2>  at .bBIOSNum, db i
  1544 00002506 06                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002507 0002                <2>  at .wBpS, dw 200h
  1547 00002509 01                  <2>  at .bSpC, db 01h
  1548 0000250A 0100                <2>  at .wResC, dw 0001h
  1549 0000250C 02                  <2>  at .bNumFAT, db 02h
  1550 0000250D E000                <2>  at .wRtCntNum, dw 00E0h
  1551 0000250F 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002511 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002512 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002514 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002516 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002518 00000000            <2>  at .dHiddSec, dd 0
  1557 0000251C 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002520 00000000            <2>  at .FATsz32, dd 0
  1560 00002524 0000                <2>  at .extFlags, dw 0
  1561 00002526 0000                <2>  at .FSver, dw 0
  1562 00002528 00000000            <2>  at .RootClus, dd 0
  1563 0000252C 0000                <2>  at .FSinfo, dw 0
  1564 0000252E 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002530 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002531 0000                <2>  at .wOpenCnt, dw 0
  1568 00002533 00                  <2>  at .bDevType, db 0
  1569 00002534 0000                <2>  at .wDevFlgs, dw 0
  1570 00002536 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002538 0002                <2>  at .bytsPerSec, dw 200h
  1573 0000253A 01                  <2>  at .secPerClus, db 01h
  1574 0000253B 0100                <2>  at .revdSecCnt, dw 0001h
  1575 0000253D 02                  <2>  at .numFATs, db 02h
  1576 0000253E E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002540 400B                <2>  at .totSec16, dw 0B40h
  1578 00002542 F0                  <2>  at .media, db 0F0h
  1579 00002543 0900                <2>  at .FATsz16, dw 0009h
  1580 00002545 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002547 0200                <2>  at .numHeads, dw 0002h
  1582 00002549 00000000            <2>  at .hiddSec, dd 0
  1583 0000254D 00000000            <2>  at .totSec32, dd 0
  1584 00002551 00000000            <2>  at .FATsz32, dd 0
  1585 00002555 0000                <2>  at .extFlags, dw 0
  1586 00002557 0000                <2>  at .FSver, dw 0
  1587 00002559 00000000            <2>  at .RootClus, dd 0
  1588 0000255D 0000                <2>  at .FSinfo, dw 0
  1589 0000255F 0000                <2>  at .BkBootSec, dw 0
  1590 00002561 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 0000256A 000000              <2>
  1591                              <2>  iend
  1592 0000256D 00000000            <2>  at .dAccTime, dd 0
  1593 00002571 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 0000257A 202000              <2>
  1594 0000257D 00000000            <2>  at .volId, dd 0
  1595 00002581 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 0000258A FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002592 07                  <2>  at .bBIOSNum, db i
  1544 00002593 07                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002594 0002                <2>  at .wBpS, dw 200h
  1547 00002596 01                  <2>  at .bSpC, db 01h
  1548 00002597 0100                <2>  at .wResC, dw 0001h
  1549 00002599 02                  <2>  at .bNumFAT, db 02h
  1550 0000259A E000                <2>  at .wRtCntNum, dw 00E0h
  1551 0000259C 400B                <2>  at .wTotSec16, dw 0B40h
  1552 0000259E F0                  <2>  at .bMedDesc, db 0F0h
  1553 0000259F 0900                <2>  at .wFATsz16, dw 0009h
  1554 000025A1 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 000025A3 0200                <2>  at .wNumHeads, dw 0002h
  1556 000025A5 00000000            <2>  at .dHiddSec, dd 0
  1557 000025A9 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 000025AD 00000000            <2>  at .FATsz32, dd 0
  1560 000025B1 0000                <2>  at .extFlags, dw 0
  1561 000025B3 0000                <2>  at .FSver, dw 0
  1562 000025B5 00000000            <2>  at .RootClus, dd 0
  1563 000025B9 0000                <2>  at .FSinfo, dw 0
  1564 000025BB 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 000025BD 10                  <2>  at .bBpbType, db bpbFat12
  1567 000025BE 0000                <2>  at .wOpenCnt, dw 0
  1568 000025C0 00                  <2>  at .bDevType, db 0
  1569 000025C1 0000                <2>  at .wDevFlgs, dw 0
  1570 000025C3 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 000025C5 0002                <2>  at .bytsPerSec, dw 200h
  1573 000025C7 01                  <2>  at .secPerClus, db 01h
  1574 000025C8 0100                <2>  at .revdSecCnt, dw 0001h
  1575 000025CA 02                  <2>  at .numFATs, db 02h
  1576 000025CB E000                <2>  at .rootEntCnt, dw 00E0h
  1577 000025CD 400B                <2>  at .totSec16, dw 0B40h
  1578 000025CF F0                  <2>  at .media, db 0F0h
  1579 000025D0 0900                <2>  at .FATsz16, dw 0009h
  1580 000025D2 1200                <2>  at .secPerTrk, dw 0012h
  1581 000025D4 0200                <2>  at .numHeads, dw 0002h
  1582 000025D6 00000000            <2>  at .hiddSec, dd 0
  1583 000025DA 00000000            <2>  at .totSec32, dd 0
  1584 000025DE 00000000            <2>  at .FATsz32, dd 0
  1585 000025E2 0000                <2>  at .extFlags, dw 0
  1586 000025E4 0000                <2>  at .FSver, dw 0
  1587 000025E6 00000000            <2>  at .RootClus, dd 0
  1588 000025EA 0000                <2>  at .FSinfo, dw 0
  1589 000025EC 0000                <2>  at .BkBootSec, dw 0
  1590 000025EE 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 000025F7 000000              <2>
  1591                              <2>  iend
  1592 000025FA 00000000            <2>  at .dAccTime, dd 0
  1593 000025FE 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002607 202000              <2>
  1594 0000260A 00000000            <2>  at .volId, dd 0
  1595 0000260E 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002617 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 0000261F 08                  <2>  at .bBIOSNum, db i
  1544 00002620 08                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002621 0002                <2>  at .wBpS, dw 200h
  1547 00002623 01                  <2>  at .bSpC, db 01h
  1548 00002624 0100                <2>  at .wResC, dw 0001h
  1549 00002626 02                  <2>  at .bNumFAT, db 02h
  1550 00002627 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002629 400B                <2>  at .wTotSec16, dw 0B40h
  1552 0000262B F0                  <2>  at .bMedDesc, db 0F0h
  1553 0000262C 0900                <2>  at .wFATsz16, dw 0009h
  1554 0000262E 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002630 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002632 00000000            <2>  at .dHiddSec, dd 0
  1557 00002636 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 0000263A 00000000            <2>  at .FATsz32, dd 0
  1560 0000263E 0000                <2>  at .extFlags, dw 0
  1561 00002640 0000                <2>  at .FSver, dw 0
  1562 00002642 00000000            <2>  at .RootClus, dd 0
  1563 00002646 0000                <2>  at .FSinfo, dw 0
  1564 00002648 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 0000264A 10                  <2>  at .bBpbType, db bpbFat12
  1567 0000264B 0000                <2>  at .wOpenCnt, dw 0
  1568 0000264D 00                  <2>  at .bDevType, db 0
  1569 0000264E 0000                <2>  at .wDevFlgs, dw 0
  1570 00002650 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002652 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002654 01                  <2>  at .secPerClus, db 01h
  1574 00002655 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002657 02                  <2>  at .numFATs, db 02h
  1576 00002658 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 0000265A 400B                <2>  at .totSec16, dw 0B40h
  1578 0000265C F0                  <2>  at .media, db 0F0h
  1579 0000265D 0900                <2>  at .FATsz16, dw 0009h
  1580 0000265F 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002661 0200                <2>  at .numHeads, dw 0002h
  1582 00002663 00000000            <2>  at .hiddSec, dd 0
  1583 00002667 00000000            <2>  at .totSec32, dd 0
  1584 0000266B 00000000            <2>  at .FATsz32, dd 0
  1585 0000266F 0000                <2>  at .extFlags, dw 0
  1586 00002671 0000                <2>  at .FSver, dw 0
  1587 00002673 00000000            <2>  at .RootClus, dd 0
  1588 00002677 0000                <2>  at .FSinfo, dw 0
  1589 00002679 0000                <2>  at .BkBootSec, dw 0
  1590 0000267B 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002684 000000              <2>
  1591                              <2>  iend
  1592 00002687 00000000            <2>  at .dAccTime, dd 0
  1593 0000268B 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002694 202000              <2>
  1594 00002697 00000000            <2>  at .volId, dd 0
  1595 0000269B 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 000026A4 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 000026AC 09                  <2>  at .bBIOSNum, db i
  1544 000026AD 09                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 000026AE 0002                <2>  at .wBpS, dw 200h
  1547 000026B0 01                  <2>  at .bSpC, db 01h
  1548 000026B1 0100                <2>  at .wResC, dw 0001h
  1549 000026B3 02                  <2>  at .bNumFAT, db 02h
  1550 000026B4 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 000026B6 400B                <2>  at .wTotSec16, dw 0B40h
  1552 000026B8 F0                  <2>  at .bMedDesc, db 0F0h
  1553 000026B9 0900                <2>  at .wFATsz16, dw 0009h
  1554 000026BB 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 000026BD 0200                <2>  at .wNumHeads, dw 0002h
  1556 000026BF 00000000            <2>  at .dHiddSec, dd 0
  1557 000026C3 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 000026C7 00000000            <2>  at .FATsz32, dd 0
  1560 000026CB 0000                <2>  at .extFlags, dw 0
  1561 000026CD 0000                <2>  at .FSver, dw 0
  1562 000026CF 00000000            <2>  at .RootClus, dd 0
  1563 000026D3 0000                <2>  at .FSinfo, dw 0
  1564 000026D5 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 000026D7 10                  <2>  at .bBpbType, db bpbFat12
  1567 000026D8 0000                <2>  at .wOpenCnt, dw 0
  1568 000026DA 00                  <2>  at .bDevType, db 0
  1569 000026DB 0000                <2>  at .wDevFlgs, dw 0
  1570 000026DD 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 000026DF 0002                <2>  at .bytsPerSec, dw 200h
  1573 000026E1 01                  <2>  at .secPerClus, db 01h
  1574 000026E2 0100                <2>  at .revdSecCnt, dw 0001h
  1575 000026E4 02                  <2>  at .numFATs, db 02h
  1576 000026E5 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 000026E7 400B                <2>  at .totSec16, dw 0B40h
  1578 000026E9 F0                  <2>  at .media, db 0F0h
  1579 000026EA 0900                <2>  at .FATsz16, dw 0009h
  1580 000026EC 1200                <2>  at .secPerTrk, dw 0012h
  1581 000026EE 0200                <2>  at .numHeads, dw 0002h
  1582 000026F0 00000000            <2>  at .hiddSec, dd 0
  1583 000026F4 00000000            <2>  at .totSec32, dd 0
  1584 000026F8 00000000            <2>  at .FATsz32, dd 0
  1585 000026FC 0000                <2>  at .extFlags, dw 0
  1586 000026FE 0000                <2>  at .FSver, dw 0
  1587 00002700 00000000            <2>  at .RootClus, dd 0
  1588 00002704 0000                <2>  at .FSinfo, dw 0
  1589 00002706 0000                <2>  at .BkBootSec, dw 0
  1590 00002708 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002711 000000              <2>
  1591                              <2>  iend
  1592 00002714 00000000            <2>  at .dAccTime, dd 0
  1593 00002718 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002721 202000              <2>
  1594 00002724 00000000            <2>  at .volId, dd 0
  1595 00002728 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002731 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002739 0A                  <2>  at .bBIOSNum, db i
  1544 0000273A 0A                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 0000273B 0002                <2>  at .wBpS, dw 200h
  1547 0000273D 01                  <2>  at .bSpC, db 01h
  1548 0000273E 0100                <2>  at .wResC, dw 0001h
  1549 00002740 02                  <2>  at .bNumFAT, db 02h
  1550 00002741 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002743 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002745 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002746 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002748 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 0000274A 0200                <2>  at .wNumHeads, dw 0002h
  1556 0000274C 00000000            <2>  at .dHiddSec, dd 0
  1557 00002750 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002754 00000000            <2>  at .FATsz32, dd 0
  1560 00002758 0000                <2>  at .extFlags, dw 0
  1561 0000275A 0000                <2>  at .FSver, dw 0
  1562 0000275C 00000000            <2>  at .RootClus, dd 0
  1563 00002760 0000                <2>  at .FSinfo, dw 0
  1564 00002762 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002764 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002765 0000                <2>  at .wOpenCnt, dw 0
  1568 00002767 00                  <2>  at .bDevType, db 0
  1569 00002768 0000                <2>  at .wDevFlgs, dw 0
  1570 0000276A 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 0000276C 0002                <2>  at .bytsPerSec, dw 200h
  1573 0000276E 01                  <2>  at .secPerClus, db 01h
  1574 0000276F 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002771 02                  <2>  at .numFATs, db 02h
  1576 00002772 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002774 400B                <2>  at .totSec16, dw 0B40h
  1578 00002776 F0                  <2>  at .media, db 0F0h
  1579 00002777 0900                <2>  at .FATsz16, dw 0009h
  1580 00002779 1200                <2>  at .secPerTrk, dw 0012h
  1581 0000277B 0200                <2>  at .numHeads, dw 0002h
  1582 0000277D 00000000            <2>  at .hiddSec, dd 0
  1583 00002781 00000000            <2>  at .totSec32, dd 0
  1584 00002785 00000000            <2>  at .FATsz32, dd 0
  1585 00002789 0000                <2>  at .extFlags, dw 0
  1586 0000278B 0000                <2>  at .FSver, dw 0
  1587 0000278D 00000000            <2>  at .RootClus, dd 0
  1588 00002791 0000                <2>  at .FSinfo, dw 0
  1589 00002793 0000                <2>  at .BkBootSec, dw 0
  1590 00002795 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 0000279E 000000              <2>
  1591                              <2>  iend
  1592 000027A1 00000000            <2>  at .dAccTime, dd 0
  1593 000027A5 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 000027AE 202000              <2>
  1594 000027B1 00000000            <2>  at .volId, dd 0
  1595 000027B5 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 000027BE FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 000027C6 0B                  <2>  at .bBIOSNum, db i
  1544 000027C7 0B                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 000027C8 0002                <2>  at .wBpS, dw 200h
  1547 000027CA 01                  <2>  at .bSpC, db 01h
  1548 000027CB 0100                <2>  at .wResC, dw 0001h
  1549 000027CD 02                  <2>  at .bNumFAT, db 02h
  1550 000027CE E000                <2>  at .wRtCntNum, dw 00E0h
  1551 000027D0 400B                <2>  at .wTotSec16, dw 0B40h
  1552 000027D2 F0                  <2>  at .bMedDesc, db 0F0h
  1553 000027D3 0900                <2>  at .wFATsz16, dw 0009h
  1554 000027D5 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 000027D7 0200                <2>  at .wNumHeads, dw 0002h
  1556 000027D9 00000000            <2>  at .dHiddSec, dd 0
  1557 000027DD 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 000027E1 00000000            <2>  at .FATsz32, dd 0
  1560 000027E5 0000                <2>  at .extFlags, dw 0
  1561 000027E7 0000                <2>  at .FSver, dw 0
  1562 000027E9 00000000            <2>  at .RootClus, dd 0
  1563 000027ED 0000                <2>  at .FSinfo, dw 0
  1564 000027EF 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 000027F1 10                  <2>  at .bBpbType, db bpbFat12
  1567 000027F2 0000                <2>  at .wOpenCnt, dw 0
  1568 000027F4 00                  <2>  at .bDevType, db 0
  1569 000027F5 0000                <2>  at .wDevFlgs, dw 0
  1570 000027F7 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 000027F9 0002                <2>  at .bytsPerSec, dw 200h
  1573 000027FB 01                  <2>  at .secPerClus, db 01h
  1574 000027FC 0100                <2>  at .revdSecCnt, dw 0001h
  1575 000027FE 02                  <2>  at .numFATs, db 02h
  1576 000027FF E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002801 400B                <2>  at .totSec16, dw 0B40h
  1578 00002803 F0                  <2>  at .media, db 0F0h
  1579 00002804 0900                <2>  at .FATsz16, dw 0009h
  1580 00002806 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002808 0200                <2>  at .numHeads, dw 0002h
  1582 0000280A 00000000            <2>  at .hiddSec, dd 0
  1583 0000280E 00000000            <2>  at .totSec32, dd 0
  1584 00002812 00000000            <2>  at .FATsz32, dd 0
  1585 00002816 0000                <2>  at .extFlags, dw 0
  1586 00002818 0000                <2>  at .FSver, dw 0
  1587 0000281A 00000000            <2>  at .RootClus, dd 0
  1588 0000281E 0000                <2>  at .FSinfo, dw 0
  1589 00002820 0000                <2>  at .BkBootSec, dw 0
  1590 00002822 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 0000282B 000000              <2>
  1591                              <2>  iend
  1592 0000282E 00000000            <2>  at .dAccTime, dd 0
  1593 00002832 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 0000283B 202000              <2>
  1594 0000283E 00000000            <2>  at .volId, dd 0
  1595 00002842 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 0000284B FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002853 0C                  <2>  at .bBIOSNum, db i
  1544 00002854 0C                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002855 0002                <2>  at .wBpS, dw 200h
  1547 00002857 01                  <2>  at .bSpC, db 01h
  1548 00002858 0100                <2>  at .wResC, dw 0001h
  1549 0000285A 02                  <2>  at .bNumFAT, db 02h
  1550 0000285B E000                <2>  at .wRtCntNum, dw 00E0h
  1551 0000285D 400B                <2>  at .wTotSec16, dw 0B40h
  1552 0000285F F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002860 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002862 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002864 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002866 00000000            <2>  at .dHiddSec, dd 0
  1557 0000286A 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 0000286E 00000000            <2>  at .FATsz32, dd 0
  1560 00002872 0000                <2>  at .extFlags, dw 0
  1561 00002874 0000                <2>  at .FSver, dw 0
  1562 00002876 00000000            <2>  at .RootClus, dd 0
  1563 0000287A 0000                <2>  at .FSinfo, dw 0
  1564 0000287C 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 0000287E 10                  <2>  at .bBpbType, db bpbFat12
  1567 0000287F 0000                <2>  at .wOpenCnt, dw 0
  1568 00002881 00                  <2>  at .bDevType, db 0
  1569 00002882 0000                <2>  at .wDevFlgs, dw 0
  1570 00002884 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002886 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002888 01                  <2>  at .secPerClus, db 01h
  1574 00002889 0100                <2>  at .revdSecCnt, dw 0001h
  1575 0000288B 02                  <2>  at .numFATs, db 02h
  1576 0000288C E000                <2>  at .rootEntCnt, dw 00E0h
  1577 0000288E 400B                <2>  at .totSec16, dw 0B40h
  1578 00002890 F0                  <2>  at .media, db 0F0h
  1579 00002891 0900                <2>  at .FATsz16, dw 0009h
  1580 00002893 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002895 0200                <2>  at .numHeads, dw 0002h
  1582 00002897 00000000            <2>  at .hiddSec, dd 0
  1583 0000289B 00000000            <2>  at .totSec32, dd 0
  1584 0000289F 00000000            <2>  at .FATsz32, dd 0
  1585 000028A3 0000                <2>  at .extFlags, dw 0
  1586 000028A5 0000                <2>  at .FSver, dw 0
  1587 000028A7 00000000            <2>  at .RootClus, dd 0
  1588 000028AB 0000                <2>  at .FSinfo, dw 0
  1589 000028AD 0000                <2>  at .BkBootSec, dw 0
  1590 000028AF 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 000028B8 000000              <2>
  1591                              <2>  iend
  1592 000028BB 00000000            <2>  at .dAccTime, dd 0
  1593 000028BF 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 000028C8 202000              <2>
  1594 000028CB 00000000            <2>  at .volId, dd 0
  1595 000028CF 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 000028D8 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 000028E0 0D                  <2>  at .bBIOSNum, db i
  1544 000028E1 0D                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 000028E2 0002                <2>  at .wBpS, dw 200h
  1547 000028E4 01                  <2>  at .bSpC, db 01h
  1548 000028E5 0100                <2>  at .wResC, dw 0001h
  1549 000028E7 02                  <2>  at .bNumFAT, db 02h
  1550 000028E8 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 000028EA 400B                <2>  at .wTotSec16, dw 0B40h
  1552 000028EC F0                  <2>  at .bMedDesc, db 0F0h
  1553 000028ED 0900                <2>  at .wFATsz16, dw 0009h
  1554 000028EF 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 000028F1 0200                <2>  at .wNumHeads, dw 0002h
  1556 000028F3 00000000            <2>  at .dHiddSec, dd 0
  1557 000028F7 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 000028FB 00000000            <2>  at .FATsz32, dd 0
  1560 000028FF 0000                <2>  at .extFlags, dw 0
  1561 00002901 0000                <2>  at .FSver, dw 0
  1562 00002903 00000000            <2>  at .RootClus, dd 0
  1563 00002907 0000                <2>  at .FSinfo, dw 0
  1564 00002909 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 0000290B 10                  <2>  at .bBpbType, db bpbFat12
  1567 0000290C 0000                <2>  at .wOpenCnt, dw 0
  1568 0000290E 00                  <2>  at .bDevType, db 0
  1569 0000290F 0000                <2>  at .wDevFlgs, dw 0
  1570 00002911 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002913 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002915 01                  <2>  at .secPerClus, db 01h
  1574 00002916 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002918 02                  <2>  at .numFATs, db 02h
  1576 00002919 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 0000291B 400B                <2>  at .totSec16, dw 0B40h
  1578 0000291D F0                  <2>  at .media, db 0F0h
  1579 0000291E 0900                <2>  at .FATsz16, dw 0009h
  1580 00002920 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002922 0200                <2>  at .numHeads, dw 0002h
  1582 00002924 00000000            <2>  at .hiddSec, dd 0
  1583 00002928 00000000            <2>  at .totSec32, dd 0
  1584 0000292C 00000000            <2>  at .FATsz32, dd 0
  1585 00002930 0000                <2>  at .extFlags, dw 0
  1586 00002932 0000                <2>  at .FSver, dw 0
  1587 00002934 00000000            <2>  at .RootClus, dd 0
  1588 00002938 0000                <2>  at .FSinfo, dw 0
  1589 0000293A 0000                <2>  at .BkBootSec, dw 0
  1590 0000293C 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002945 000000              <2>
  1591                              <2>  iend
  1592 00002948 00000000            <2>  at .dAccTime, dd 0
  1593 0000294C 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002955 202000              <2>
  1594 00002958 00000000            <2>  at .volId, dd 0
  1595 0000295C 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002965 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 0000296D 0E                  <2>  at .bBIOSNum, db i
  1544 0000296E 0E                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 0000296F 0002                <2>  at .wBpS, dw 200h
  1547 00002971 01                  <2>  at .bSpC, db 01h
  1548 00002972 0100                <2>  at .wResC, dw 0001h
  1549 00002974 02                  <2>  at .bNumFAT, db 02h
  1550 00002975 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002977 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002979 F0                  <2>  at .bMedDesc, db 0F0h
  1553 0000297A 0900                <2>  at .wFATsz16, dw 0009h
  1554 0000297C 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 0000297E 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002980 00000000            <2>  at .dHiddSec, dd 0
  1557 00002984 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002988 00000000            <2>  at .FATsz32, dd 0
  1560 0000298C 0000                <2>  at .extFlags, dw 0
  1561 0000298E 0000                <2>  at .FSver, dw 0
  1562 00002990 00000000            <2>  at .RootClus, dd 0
  1563 00002994 0000                <2>  at .FSinfo, dw 0
  1564 00002996 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002998 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002999 0000                <2>  at .wOpenCnt, dw 0
  1568 0000299B 00                  <2>  at .bDevType, db 0
  1569 0000299C 0000                <2>  at .wDevFlgs, dw 0
  1570 0000299E 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 000029A0 0002                <2>  at .bytsPerSec, dw 200h
  1573 000029A2 01                  <2>  at .secPerClus, db 01h
  1574 000029A3 0100                <2>  at .revdSecCnt, dw 0001h
  1575 000029A5 02                  <2>  at .numFATs, db 02h
  1576 000029A6 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 000029A8 400B                <2>  at .totSec16, dw 0B40h
  1578 000029AA F0                  <2>  at .media, db 0F0h
  1579 000029AB 0900                <2>  at .FATsz16, dw 0009h
  1580 000029AD 1200                <2>  at .secPerTrk, dw 0012h
  1581 000029AF 0200                <2>  at .numHeads, dw 0002h
  1582 000029B1 00000000            <2>  at .hiddSec, dd 0
  1583 000029B5 00000000            <2>  at .totSec32, dd 0
  1584 000029B9 00000000            <2>  at .FATsz32, dd 0
  1585 000029BD 0000                <2>  at .extFlags, dw 0
  1586 000029BF 0000                <2>  at .FSver, dw 0
  1587 000029C1 00000000            <2>  at .RootClus, dd 0
  1588 000029C5 0000                <2>  at .FSinfo, dw 0
  1589 000029C7 0000                <2>  at .BkBootSec, dw 0
  1590 000029C9 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 000029D2 000000              <2>
  1591                              <2>  iend
  1592 000029D5 00000000            <2>  at .dAccTime, dd 0
  1593 000029D9 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 000029E2 202000              <2>
  1594 000029E5 00000000            <2>  at .volId, dd 0
  1595 000029E9 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 000029F2 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 000029FA 0F                  <2>  at .bBIOSNum, db i
  1544 000029FB 0F                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 000029FC 0002                <2>  at .wBpS, dw 200h
  1547 000029FE 01                  <2>  at .bSpC, db 01h
  1548 000029FF 0100                <2>  at .wResC, dw 0001h
  1549 00002A01 02                  <2>  at .bNumFAT, db 02h
  1550 00002A02 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002A04 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002A06 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002A07 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002A09 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002A0B 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002A0D 00000000            <2>  at .dHiddSec, dd 0
  1557 00002A11 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002A15 00000000            <2>  at .FATsz32, dd 0
  1560 00002A19 0000                <2>  at .extFlags, dw 0
  1561 00002A1B 0000                <2>  at .FSver, dw 0
  1562 00002A1D 00000000            <2>  at .RootClus, dd 0
  1563 00002A21 0000                <2>  at .FSinfo, dw 0
  1564 00002A23 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002A25 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002A26 0000                <2>  at .wOpenCnt, dw 0
  1568 00002A28 00                  <2>  at .bDevType, db 0
  1569 00002A29 0000                <2>  at .wDevFlgs, dw 0
  1570 00002A2B 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002A2D 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002A2F 01                  <2>  at .secPerClus, db 01h
  1574 00002A30 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002A32 02                  <2>  at .numFATs, db 02h
  1576 00002A33 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002A35 400B                <2>  at .totSec16, dw 0B40h
  1578 00002A37 F0                  <2>  at .media, db 0F0h
  1579 00002A38 0900                <2>  at .FATsz16, dw 0009h
  1580 00002A3A 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002A3C 0200                <2>  at .numHeads, dw 0002h
  1582 00002A3E 00000000            <2>  at .hiddSec, dd 0
  1583 00002A42 00000000            <2>  at .totSec32, dd 0
  1584 00002A46 00000000            <2>  at .FATsz32, dd 0
  1585 00002A4A 0000                <2>  at .extFlags, dw 0
  1586 00002A4C 0000                <2>  at .FSver, dw 0
  1587 00002A4E 00000000            <2>  at .RootClus, dd 0
  1588 00002A52 0000                <2>  at .FSinfo, dw 0
  1589 00002A54 0000                <2>  at .BkBootSec, dw 0
  1590 00002A56 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002A5F 000000              <2>
  1591                              <2>  iend
  1592 00002A62 00000000            <2>  at .dAccTime, dd 0
  1593 00002A66 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002A6F 202000              <2>
  1594 00002A72 00000000            <2>  at .volId, dd 0
  1595 00002A76 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002A7F FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002A87 10                  <2>  at .bBIOSNum, db i
  1544 00002A88 10                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002A89 0002                <2>  at .wBpS, dw 200h
  1547 00002A8B 01                  <2>  at .bSpC, db 01h
  1548 00002A8C 0100                <2>  at .wResC, dw 0001h
  1549 00002A8E 02                  <2>  at .bNumFAT, db 02h
  1550 00002A8F E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002A91 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002A93 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002A94 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002A96 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002A98 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002A9A 00000000            <2>  at .dHiddSec, dd 0
  1557 00002A9E 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002AA2 00000000            <2>  at .FATsz32, dd 0
  1560 00002AA6 0000                <2>  at .extFlags, dw 0
  1561 00002AA8 0000                <2>  at .FSver, dw 0
  1562 00002AAA 00000000            <2>  at .RootClus, dd 0
  1563 00002AAE 0000                <2>  at .FSinfo, dw 0
  1564 00002AB0 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002AB2 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002AB3 0000                <2>  at .wOpenCnt, dw 0
  1568 00002AB5 00                  <2>  at .bDevType, db 0
  1569 00002AB6 0000                <2>  at .wDevFlgs, dw 0
  1570 00002AB8 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002ABA 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002ABC 01                  <2>  at .secPerClus, db 01h
  1574 00002ABD 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002ABF 02                  <2>  at .numFATs, db 02h
  1576 00002AC0 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002AC2 400B                <2>  at .totSec16, dw 0B40h
  1578 00002AC4 F0                  <2>  at .media, db 0F0h
  1579 00002AC5 0900                <2>  at .FATsz16, dw 0009h
  1580 00002AC7 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002AC9 0200                <2>  at .numHeads, dw 0002h
  1582 00002ACB 00000000            <2>  at .hiddSec, dd 0
  1583 00002ACF 00000000            <2>  at .totSec32, dd 0
  1584 00002AD3 00000000            <2>  at .FATsz32, dd 0
  1585 00002AD7 0000                <2>  at .extFlags, dw 0
  1586 00002AD9 0000                <2>  at .FSver, dw 0
  1587 00002ADB 00000000            <2>  at .RootClus, dd 0
  1588 00002ADF 0000                <2>  at .FSinfo, dw 0
  1589 00002AE1 0000                <2>  at .BkBootSec, dw 0
  1590 00002AE3 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002AEC 000000              <2>
  1591                              <2>  iend
  1592 00002AEF 00000000            <2>  at .dAccTime, dd 0
  1593 00002AF3 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002AFC 202000              <2>
  1594 00002AFF 00000000            <2>  at .volId, dd 0
  1595 00002B03 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002B0C FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002B14 11                  <2>  at .bBIOSNum, db i
  1544 00002B15 11                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002B16 0002                <2>  at .wBpS, dw 200h
  1547 00002B18 01                  <2>  at .bSpC, db 01h
  1548 00002B19 0100                <2>  at .wResC, dw 0001h
  1549 00002B1B 02                  <2>  at .bNumFAT, db 02h
  1550 00002B1C E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002B1E 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002B20 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002B21 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002B23 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002B25 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002B27 00000000            <2>  at .dHiddSec, dd 0
  1557 00002B2B 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002B2F 00000000            <2>  at .FATsz32, dd 0
  1560 00002B33 0000                <2>  at .extFlags, dw 0
  1561 00002B35 0000                <2>  at .FSver, dw 0
  1562 00002B37 00000000            <2>  at .RootClus, dd 0
  1563 00002B3B 0000                <2>  at .FSinfo, dw 0
  1564 00002B3D 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002B3F 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002B40 0000                <2>  at .wOpenCnt, dw 0
  1568 00002B42 00                  <2>  at .bDevType, db 0
  1569 00002B43 0000                <2>  at .wDevFlgs, dw 0
  1570 00002B45 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002B47 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002B49 01                  <2>  at .secPerClus, db 01h
  1574 00002B4A 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002B4C 02                  <2>  at .numFATs, db 02h
  1576 00002B4D E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002B4F 400B                <2>  at .totSec16, dw 0B40h
  1578 00002B51 F0                  <2>  at .media, db 0F0h
  1579 00002B52 0900                <2>  at .FATsz16, dw 0009h
  1580 00002B54 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002B56 0200                <2>  at .numHeads, dw 0002h
  1582 00002B58 00000000            <2>  at .hiddSec, dd 0
  1583 00002B5C 00000000            <2>  at .totSec32, dd 0
  1584 00002B60 00000000            <2>  at .FATsz32, dd 0
  1585 00002B64 0000                <2>  at .extFlags, dw 0
  1586 00002B66 0000                <2>  at .FSver, dw 0
  1587 00002B68 00000000            <2>  at .RootClus, dd 0
  1588 00002B6C 0000                <2>  at .FSinfo, dw 0
  1589 00002B6E 0000                <2>  at .BkBootSec, dw 0
  1590 00002B70 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002B79 000000              <2>
  1591                              <2>  iend
  1592 00002B7C 00000000            <2>  at .dAccTime, dd 0
  1593 00002B80 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002B89 202000              <2>
  1594 00002B8C 00000000            <2>  at .volId, dd 0
  1595 00002B90 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002B99 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002BA1 12                  <2>  at .bBIOSNum, db i
  1544 00002BA2 12                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002BA3 0002                <2>  at .wBpS, dw 200h
  1547 00002BA5 01                  <2>  at .bSpC, db 01h
  1548 00002BA6 0100                <2>  at .wResC, dw 0001h
  1549 00002BA8 02                  <2>  at .bNumFAT, db 02h
  1550 00002BA9 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002BAB 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002BAD F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002BAE 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002BB0 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002BB2 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002BB4 00000000            <2>  at .dHiddSec, dd 0
  1557 00002BB8 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002BBC 00000000            <2>  at .FATsz32, dd 0
  1560 00002BC0 0000                <2>  at .extFlags, dw 0
  1561 00002BC2 0000                <2>  at .FSver, dw 0
  1562 00002BC4 00000000            <2>  at .RootClus, dd 0
  1563 00002BC8 0000                <2>  at .FSinfo, dw 0
  1564 00002BCA 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002BCC 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002BCD 0000                <2>  at .wOpenCnt, dw 0
  1568 00002BCF 00                  <2>  at .bDevType, db 0
  1569 00002BD0 0000                <2>  at .wDevFlgs, dw 0
  1570 00002BD2 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002BD4 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002BD6 01                  <2>  at .secPerClus, db 01h
  1574 00002BD7 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002BD9 02                  <2>  at .numFATs, db 02h
  1576 00002BDA E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002BDC 400B                <2>  at .totSec16, dw 0B40h
  1578 00002BDE F0                  <2>  at .media, db 0F0h
  1579 00002BDF 0900                <2>  at .FATsz16, dw 0009h
  1580 00002BE1 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002BE3 0200                <2>  at .numHeads, dw 0002h
  1582 00002BE5 00000000            <2>  at .hiddSec, dd 0
  1583 00002BE9 00000000            <2>  at .totSec32, dd 0
  1584 00002BED 00000000            <2>  at .FATsz32, dd 0
  1585 00002BF1 0000                <2>  at .extFlags, dw 0
  1586 00002BF3 0000                <2>  at .FSver, dw 0
  1587 00002BF5 00000000            <2>  at .RootClus, dd 0
  1588 00002BF9 0000                <2>  at .FSinfo, dw 0
  1589 00002BFB 0000                <2>  at .BkBootSec, dw 0
  1590 00002BFD 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002C06 000000              <2>
  1591                              <2>  iend
  1592 00002C09 00000000            <2>  at .dAccTime, dd 0
  1593 00002C0D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002C16 202000              <2>
  1594 00002C19 00000000            <2>  at .volId, dd 0
  1595 00002C1D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002C26 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002C2E 13                  <2>  at .bBIOSNum, db i
  1544 00002C2F 13                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002C30 0002                <2>  at .wBpS, dw 200h
  1547 00002C32 01                  <2>  at .bSpC, db 01h
  1548 00002C33 0100                <2>  at .wResC, dw 0001h
  1549 00002C35 02                  <2>  at .bNumFAT, db 02h
  1550 00002C36 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002C38 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002C3A F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002C3B 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002C3D 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002C3F 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002C41 00000000            <2>  at .dHiddSec, dd 0
  1557 00002C45 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002C49 00000000            <2>  at .FATsz32, dd 0
  1560 00002C4D 0000                <2>  at .extFlags, dw 0
  1561 00002C4F 0000                <2>  at .FSver, dw 0
  1562 00002C51 00000000            <2>  at .RootClus, dd 0
  1563 00002C55 0000                <2>  at .FSinfo, dw 0
  1564 00002C57 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002C59 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002C5A 0000                <2>  at .wOpenCnt, dw 0
  1568 00002C5C 00                  <2>  at .bDevType, db 0
  1569 00002C5D 0000                <2>  at .wDevFlgs, dw 0
  1570 00002C5F 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002C61 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002C63 01                  <2>  at .secPerClus, db 01h
  1574 00002C64 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002C66 02                  <2>  at .numFATs, db 02h
  1576 00002C67 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002C69 400B                <2>  at .totSec16, dw 0B40h
  1578 00002C6B F0                  <2>  at .media, db 0F0h
  1579 00002C6C 0900                <2>  at .FATsz16, dw 0009h
  1580 00002C6E 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002C70 0200                <2>  at .numHeads, dw 0002h
  1582 00002C72 00000000            <2>  at .hiddSec, dd 0
  1583 00002C76 00000000            <2>  at .totSec32, dd 0
  1584 00002C7A 00000000            <2>  at .FATsz32, dd 0
  1585 00002C7E 0000                <2>  at .extFlags, dw 0
  1586 00002C80 0000                <2>  at .FSver, dw 0
  1587 00002C82 00000000            <2>  at .RootClus, dd 0
  1588 00002C86 0000                <2>  at .FSinfo, dw 0
  1589 00002C88 0000                <2>  at .BkBootSec, dw 0
  1590 00002C8A 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002C93 000000              <2>
  1591                              <2>  iend
  1592 00002C96 00000000            <2>  at .dAccTime, dd 0
  1593 00002C9A 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002CA3 202000              <2>
  1594 00002CA6 00000000            <2>  at .volId, dd 0
  1595 00002CAA 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002CB3 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002CBB 14                  <2>  at .bBIOSNum, db i
  1544 00002CBC 14                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002CBD 0002                <2>  at .wBpS, dw 200h
  1547 00002CBF 01                  <2>  at .bSpC, db 01h
  1548 00002CC0 0100                <2>  at .wResC, dw 0001h
  1549 00002CC2 02                  <2>  at .bNumFAT, db 02h
  1550 00002CC3 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002CC5 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002CC7 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002CC8 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002CCA 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002CCC 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002CCE 00000000            <2>  at .dHiddSec, dd 0
  1557 00002CD2 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002CD6 00000000            <2>  at .FATsz32, dd 0
  1560 00002CDA 0000                <2>  at .extFlags, dw 0
  1561 00002CDC 0000                <2>  at .FSver, dw 0
  1562 00002CDE 00000000            <2>  at .RootClus, dd 0
  1563 00002CE2 0000                <2>  at .FSinfo, dw 0
  1564 00002CE4 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002CE6 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002CE7 0000                <2>  at .wOpenCnt, dw 0
  1568 00002CE9 00                  <2>  at .bDevType, db 0
  1569 00002CEA 0000                <2>  at .wDevFlgs, dw 0
  1570 00002CEC 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002CEE 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002CF0 01                  <2>  at .secPerClus, db 01h
  1574 00002CF1 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002CF3 02                  <2>  at .numFATs, db 02h
  1576 00002CF4 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002CF6 400B                <2>  at .totSec16, dw 0B40h
  1578 00002CF8 F0                  <2>  at .media, db 0F0h
  1579 00002CF9 0900                <2>  at .FATsz16, dw 0009h
  1580 00002CFB 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002CFD 0200                <2>  at .numHeads, dw 0002h
  1582 00002CFF 00000000            <2>  at .hiddSec, dd 0
  1583 00002D03 00000000            <2>  at .totSec32, dd 0
  1584 00002D07 00000000            <2>  at .FATsz32, dd 0
  1585 00002D0B 0000                <2>  at .extFlags, dw 0
  1586 00002D0D 0000                <2>  at .FSver, dw 0
  1587 00002D0F 00000000            <2>  at .RootClus, dd 0
  1588 00002D13 0000                <2>  at .FSinfo, dw 0
  1589 00002D15 0000                <2>  at .BkBootSec, dw 0
  1590 00002D17 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002D20 000000              <2>
  1591                              <2>  iend
  1592 00002D23 00000000            <2>  at .dAccTime, dd 0
  1593 00002D27 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002D30 202000              <2>
  1594 00002D33 00000000            <2>  at .volId, dd 0
  1595 00002D37 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002D40 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002D48 15                  <2>  at .bBIOSNum, db i
  1544 00002D49 15                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002D4A 0002                <2>  at .wBpS, dw 200h
  1547 00002D4C 01                  <2>  at .bSpC, db 01h
  1548 00002D4D 0100                <2>  at .wResC, dw 0001h
  1549 00002D4F 02                  <2>  at .bNumFAT, db 02h
  1550 00002D50 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002D52 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002D54 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002D55 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002D57 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002D59 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002D5B 00000000            <2>  at .dHiddSec, dd 0
  1557 00002D5F 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002D63 00000000            <2>  at .FATsz32, dd 0
  1560 00002D67 0000                <2>  at .extFlags, dw 0
  1561 00002D69 0000                <2>  at .FSver, dw 0
  1562 00002D6B 00000000            <2>  at .RootClus, dd 0
  1563 00002D6F 0000                <2>  at .FSinfo, dw 0
  1564 00002D71 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002D73 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002D74 0000                <2>  at .wOpenCnt, dw 0
  1568 00002D76 00                  <2>  at .bDevType, db 0
  1569 00002D77 0000                <2>  at .wDevFlgs, dw 0
  1570 00002D79 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002D7B 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002D7D 01                  <2>  at .secPerClus, db 01h
  1574 00002D7E 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002D80 02                  <2>  at .numFATs, db 02h
  1576 00002D81 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002D83 400B                <2>  at .totSec16, dw 0B40h
  1578 00002D85 F0                  <2>  at .media, db 0F0h
  1579 00002D86 0900                <2>  at .FATsz16, dw 0009h
  1580 00002D88 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002D8A 0200                <2>  at .numHeads, dw 0002h
  1582 00002D8C 00000000            <2>  at .hiddSec, dd 0
  1583 00002D90 00000000            <2>  at .totSec32, dd 0
  1584 00002D94 00000000            <2>  at .FATsz32, dd 0
  1585 00002D98 0000                <2>  at .extFlags, dw 0
  1586 00002D9A 0000                <2>  at .FSver, dw 0
  1587 00002D9C 00000000            <2>  at .RootClus, dd 0
  1588 00002DA0 0000                <2>  at .FSinfo, dw 0
  1589 00002DA2 0000                <2>  at .BkBootSec, dw 0
  1590 00002DA4 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002DAD 000000              <2>
  1591                              <2>  iend
  1592 00002DB0 00000000            <2>  at .dAccTime, dd 0
  1593 00002DB4 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002DBD 202000              <2>
  1594 00002DC0 00000000            <2>  at .volId, dd 0
  1595 00002DC4 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002DCD FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002DD5 16                  <2>  at .bBIOSNum, db i
  1544 00002DD6 16                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002DD7 0002                <2>  at .wBpS, dw 200h
  1547 00002DD9 01                  <2>  at .bSpC, db 01h
  1548 00002DDA 0100                <2>  at .wResC, dw 0001h
  1549 00002DDC 02                  <2>  at .bNumFAT, db 02h
  1550 00002DDD E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002DDF 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002DE1 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002DE2 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002DE4 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002DE6 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002DE8 00000000            <2>  at .dHiddSec, dd 0
  1557 00002DEC 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002DF0 00000000            <2>  at .FATsz32, dd 0
  1560 00002DF4 0000                <2>  at .extFlags, dw 0
  1561 00002DF6 0000                <2>  at .FSver, dw 0
  1562 00002DF8 00000000            <2>  at .RootClus, dd 0
  1563 00002DFC 0000                <2>  at .FSinfo, dw 0
  1564 00002DFE 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002E00 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002E01 0000                <2>  at .wOpenCnt, dw 0
  1568 00002E03 00                  <2>  at .bDevType, db 0
  1569 00002E04 0000                <2>  at .wDevFlgs, dw 0
  1570 00002E06 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002E08 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002E0A 01                  <2>  at .secPerClus, db 01h
  1574 00002E0B 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002E0D 02                  <2>  at .numFATs, db 02h
  1576 00002E0E E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002E10 400B                <2>  at .totSec16, dw 0B40h
  1578 00002E12 F0                  <2>  at .media, db 0F0h
  1579 00002E13 0900                <2>  at .FATsz16, dw 0009h
  1580 00002E15 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002E17 0200                <2>  at .numHeads, dw 0002h
  1582 00002E19 00000000            <2>  at .hiddSec, dd 0
  1583 00002E1D 00000000            <2>  at .totSec32, dd 0
  1584 00002E21 00000000            <2>  at .FATsz32, dd 0
  1585 00002E25 0000                <2>  at .extFlags, dw 0
  1586 00002E27 0000                <2>  at .FSver, dw 0
  1587 00002E29 00000000            <2>  at .RootClus, dd 0
  1588 00002E2D 0000                <2>  at .FSinfo, dw 0
  1589 00002E2F 0000                <2>  at .BkBootSec, dw 0
  1590 00002E31 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002E3A 000000              <2>
  1591                              <2>  iend
  1592 00002E3D 00000000            <2>  at .dAccTime, dd 0
  1593 00002E41 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002E4A 202000              <2>
  1594 00002E4D 00000000            <2>  at .volId, dd 0
  1595 00002E51 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002E5A FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002E62 17                  <2>  at .bBIOSNum, db i
  1544 00002E63 17                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002E64 0002                <2>  at .wBpS, dw 200h
  1547 00002E66 01                  <2>  at .bSpC, db 01h
  1548 00002E67 0100                <2>  at .wResC, dw 0001h
  1549 00002E69 02                  <2>  at .bNumFAT, db 02h
  1550 00002E6A E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002E6C 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002E6E F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002E6F 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002E71 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002E73 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002E75 00000000            <2>  at .dHiddSec, dd 0
  1557 00002E79 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002E7D 00000000            <2>  at .FATsz32, dd 0
  1560 00002E81 0000                <2>  at .extFlags, dw 0
  1561 00002E83 0000                <2>  at .FSver, dw 0
  1562 00002E85 00000000            <2>  at .RootClus, dd 0
  1563 00002E89 0000                <2>  at .FSinfo, dw 0
  1564 00002E8B 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002E8D 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002E8E 0000                <2>  at .wOpenCnt, dw 0
  1568 00002E90 00                  <2>  at .bDevType, db 0
  1569 00002E91 0000                <2>  at .wDevFlgs, dw 0
  1570 00002E93 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002E95 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002E97 01                  <2>  at .secPerClus, db 01h
  1574 00002E98 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002E9A 02                  <2>  at .numFATs, db 02h
  1576 00002E9B E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002E9D 400B                <2>  at .totSec16, dw 0B40h
  1578 00002E9F F0                  <2>  at .media, db 0F0h
  1579 00002EA0 0900                <2>  at .FATsz16, dw 0009h
  1580 00002EA2 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002EA4 0200                <2>  at .numHeads, dw 0002h
  1582 00002EA6 00000000            <2>  at .hiddSec, dd 0
  1583 00002EAA 00000000            <2>  at .totSec32, dd 0
  1584 00002EAE 00000000            <2>  at .FATsz32, dd 0
  1585 00002EB2 0000                <2>  at .extFlags, dw 0
  1586 00002EB4 0000                <2>  at .FSver, dw 0
  1587 00002EB6 00000000            <2>  at .RootClus, dd 0
  1588 00002EBA 0000                <2>  at .FSinfo, dw 0
  1589 00002EBC 0000                <2>  at .BkBootSec, dw 0
  1590 00002EBE 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002EC7 000000              <2>
  1591                              <2>  iend
  1592 00002ECA 00000000            <2>  at .dAccTime, dd 0
  1593 00002ECE 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002ED7 202000              <2>
  1594 00002EDA 00000000            <2>  at .volId, dd 0
  1595 00002EDE 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002EE7 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002EEF 18                  <2>  at .bBIOSNum, db i
  1544 00002EF0 18                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002EF1 0002                <2>  at .wBpS, dw 200h
  1547 00002EF3 01                  <2>  at .bSpC, db 01h
  1548 00002EF4 0100                <2>  at .wResC, dw 0001h
  1549 00002EF6 02                  <2>  at .bNumFAT, db 02h
  1550 00002EF7 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002EF9 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002EFB F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002EFC 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002EFE 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002F00 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002F02 00000000            <2>  at .dHiddSec, dd 0
  1557 00002F06 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002F0A 00000000            <2>  at .FATsz32, dd 0
  1560 00002F0E 0000                <2>  at .extFlags, dw 0
  1561 00002F10 0000                <2>  at .FSver, dw 0
  1562 00002F12 00000000            <2>  at .RootClus, dd 0
  1563 00002F16 0000                <2>  at .FSinfo, dw 0
  1564 00002F18 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002F1A 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002F1B 0000                <2>  at .wOpenCnt, dw 0
  1568 00002F1D 00                  <2>  at .bDevType, db 0
  1569 00002F1E 0000                <2>  at .wDevFlgs, dw 0
  1570 00002F20 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002F22 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002F24 01                  <2>  at .secPerClus, db 01h
  1574 00002F25 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002F27 02                  <2>  at .numFATs, db 02h
  1576 00002F28 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002F2A 400B                <2>  at .totSec16, dw 0B40h
  1578 00002F2C F0                  <2>  at .media, db 0F0h
  1579 00002F2D 0900                <2>  at .FATsz16, dw 0009h
  1580 00002F2F 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002F31 0200                <2>  at .numHeads, dw 0002h
  1582 00002F33 00000000            <2>  at .hiddSec, dd 0
  1583 00002F37 00000000            <2>  at .totSec32, dd 0
  1584 00002F3B 00000000            <2>  at .FATsz32, dd 0
  1585 00002F3F 0000                <2>  at .extFlags, dw 0
  1586 00002F41 0000                <2>  at .FSver, dw 0
  1587 00002F43 00000000            <2>  at .RootClus, dd 0
  1588 00002F47 0000                <2>  at .FSinfo, dw 0
  1589 00002F49 0000                <2>  at .BkBootSec, dw 0
  1590 00002F4B 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002F54 000000              <2>
  1591                              <2>  iend
  1592 00002F57 00000000            <2>  at .dAccTime, dd 0
  1593 00002F5B 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002F64 202000              <2>
  1594 00002F67 00000000            <2>  at .volId, dd 0
  1595 00002F6B 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
  1541                              <2>  istruc drvBlk
  1542 00002F74 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1543 00002F7C 19                  <2>  at .bBIOSNum, db i
  1544 00002F7D 19                  <2>  at .bDOSNum, db i
  1545                              <2> 
  1546 00002F7E 0002                <2>  at .wBpS, dw 200h
  1547 00002F80 01                  <2>  at .bSpC, db 01h
  1548 00002F81 0100                <2>  at .wResC, dw 0001h
  1549 00002F83 02                  <2>  at .bNumFAT, db 02h
  1550 00002F84 E000                <2>  at .wRtCntNum, dw 00E0h
  1551 00002F86 400B                <2>  at .wTotSec16, dw 0B40h
  1552 00002F88 F0                  <2>  at .bMedDesc, db 0F0h
  1553 00002F89 0900                <2>  at .wFATsz16, dw 0009h
  1554 00002F8B 1200                <2>  at .wSecPerTrk, dw 0012h
  1555 00002F8D 0200                <2>  at .wNumHeads, dw 0002h
  1556 00002F8F 00000000            <2>  at .dHiddSec, dd 0
  1557 00002F93 00000000            <2>  at .dTotSec32, dd 0
  1558                              <2> 
  1559 00002F97 00000000            <2>  at .FATsz32, dd 0
  1560 00002F9B 0000                <2>  at .extFlags, dw 0
  1561 00002F9D 0000                <2>  at .FSver, dw 0
  1562 00002F9F 00000000            <2>  at .RootClus, dd 0
  1563 00002FA3 0000                <2>  at .FSinfo, dw 0
  1564 00002FA5 0000                <2>  at .BkBootSec, dw 0
  1565                              <2> 
  1566 00002FA7 10                  <2>  at .bBpbType, db bpbFat12
  1567 00002FA8 0000                <2>  at .wOpenCnt, dw 0
  1568 00002FAA 00                  <2>  at .bDevType, db 0
  1569 00002FAB 0000                <2>  at .wDevFlgs, dw 0
  1570 00002FAD 3F00                <2>  at .wNumCyl, dw 63
  1571                              <2>  istruc bpb32
  1572 00002FAF 0002                <2>  at .bytsPerSec, dw 200h
  1573 00002FB1 01                  <2>  at .secPerClus, db 01h
  1574 00002FB2 0100                <2>  at .revdSecCnt, dw 0001h
  1575 00002FB4 02                  <2>  at .numFATs, db 02h
  1576 00002FB5 E000                <2>  at .rootEntCnt, dw 00E0h
  1577 00002FB7 400B                <2>  at .totSec16, dw 0B40h
  1578 00002FB9 F0                  <2>  at .media, db 0F0h
  1579 00002FBA 0900                <2>  at .FATsz16, dw 0009h
  1580 00002FBC 1200                <2>  at .secPerTrk, dw 0012h
  1581 00002FBE 0200                <2>  at .numHeads, dw 0002h
  1582 00002FC0 00000000            <2>  at .hiddSec, dd 0
  1583 00002FC4 00000000            <2>  at .totSec32, dd 0
  1584 00002FC8 00000000            <2>  at .FATsz32, dd 0
  1585 00002FCC 0000                <2>  at .extFlags, dw 0
  1586 00002FCE 0000                <2>  at .FSver, dw 0
  1587 00002FD0 00000000            <2>  at .RootClus, dd 0
  1588 00002FD4 0000                <2>  at .FSinfo, dw 0
  1589 00002FD6 0000                <2>  at .BkBootSec, dw 0
  1590 00002FD8 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1590 00002FE1 000000              <2>
  1591                              <2>  iend
  1592 00002FE4 00000000            <2>  at .dAccTime, dd 0
  1593 00002FE8 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1593 00002FF1 202000              <2>
  1594 00002FF4 00000000            <2>  at .volId, dd 0
  1595 00002FF8 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1596                              <2>  iend
  1597                              <2>  %assign i i+1
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00003001 0F010D23000000      <1>     sidt [myIdt]
     8 00003008 0FB6C0              <1>     movzx eax, al
     9 0000300B 4892                <1>     xchg rdx, rax
    10 0000300D 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00003011 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00003018 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 0000301B 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 0000301F 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00003023 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00003027 894208              <1>     mov dword [rdx + 8], eax
    17 0000302A C3                  <1>     ret
    18                              <1> myIdt:
    19 0000302B 0000                <1> .limit  dw 0
    20 0000302D 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00003035 50                  <1>     push rax
    25 00003036 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00003037 51                  <1>     push rcx
    27 00003038 52                  <1>     push rdx
    28 00003039 488D1532D1FFFF      <1>     lea rdx, qword [fastOutput]
    29 00003040 B829000000          <1>     mov eax, 29h
    30 00003045 E8B7FFFFFF          <1>     call installInterrupt
    31 0000304A 488D1529D1FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00003051 B83B000000          <1>     mov eax, 3Bh
    33 00003056 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 0000305B B401                <1>     mov ah, 01      ;Get buffer status
    36 0000305D CD36                <1>     int 36h
    37 0000305F 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00003061 30E4                <1>     xor ah, ah
    39 00003063 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00003065 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00003067 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 0000306C CD30                <1>     int 30h
    44 0000306E B402                <1>     mov ah, 02h
    45 00003070 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00003072 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00003074 CD30                <1>     int 30h
    48 00003076 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00003078 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 0000307D CD30                <1>     int 30h
    51 0000307F 5A                  <1>     pop rdx
    52 00003080 59                  <1>     pop rcx
    53 00003081 5B                  <1>     pop rbx
    54 00003082 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 00003083 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 00003089 50                  <1>     push rax
    59 0000308A 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 00003091 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 00003095 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 00003096 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 00003097 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 00003098 B402                <1>     mov ah, 02  ;Read RTC Time
    70 0000309A CD3A                <1>     int 3Ah
    71 0000309C 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 0000309E 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 000030A1 E84D000000          <1>     call .bcd2Bin
    75 000030A6 88C5                <1>     mov ch, al
    76 000030A8 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 000030AB E843000000          <1>     call .bcd2Bin
    78 000030B0 88C1                <1>     mov cl, al
    79 000030B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 000030B5 E839000000          <1>     call .bcd2Bin
    81 000030BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 000030BC 89C2                <1>     mov edx, eax
    83 000030BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 000030C0 CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 000030C2 B404                <1>     mov ah, 04  ;Read RTC Date
    90 000030C4 CD3A                <1>     int 3Ah
    91 000030C6 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 000030C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 000030CB E823000000          <1>     call .bcd2Bin
    95 000030D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 000030D3 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 000030D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 000030DC E812000000          <1>     call .bcd2Bin
    99 000030E1 88C6                <1>     mov dh, al  
   100 000030E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 000030E6 E808000000          <1>     call .bcd2Bin
   102 000030EB 88C2                <1>     mov dl, al
   103 000030ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 000030EF CD21                <1>     int 21h
   105 000030F1 EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 000030F3 51                  <1>     push rcx
   109 000030F4 89C1                <1>     mov ecx, eax
   110 000030F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 000030FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 00003101 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 00003104 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 00003107 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 00003109 FFC9                <1>     dec ecx
   117 0000310B 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 0000310D 59                  <1>     pop rcx
   120 0000310E C3                  <1>     ret
   121                              <1> .clkEnd:
   122 0000310F 5B                  <1>     pop rbx ;Get the pointer back
   123 00003110 E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;Start by setting up the interrupt vectors!
   136 00003115 B839350000          <1>     mov eax, 3539h  ;Get original Int 39h
   137 0000311A CD21                <1>     int 21h
   138 0000311C 48891D9BD3FFFF      <1>     mov qword [i39Org], rbx
   139 00003123 B839250000          <1>     mov eax, 2539h  ;Setup our handler
   140 00003128 488D15AFD3FFFF      <1>     lea rdx, dosInt39h
   141 0000312F CD21                <1>     int 21h
   142                              <1> 
   143 00003131 B833350000          <1>     mov eax, 3533h  ;Get original Int 33h
   144 00003136 CD21                <1>     int 21h
   145 00003138 48891D87D3FFFF      <1>     mov qword [i33Org], rbx
   146 0000313F 48891D90D3FFFF      <1>     mov qword [i33Next], rbx    ;This is also the low level handler
   147 00003146 B833250000          <1>     mov eax, 2533h  ;Setup our handler
   148 0000314B 488D15AED3FFFF      <1>     lea rdx, dosInt33h
   149 00003152 CD21                <1>     int 21h
   150                              <1> 
   151 00003154 B82F350000          <1>     mov eax, 352Fh  ;Get previous Int 2Fh handler
   152 00003159 CD21                <1>     int 21h
   153 0000315B 48891D6CD3FFFF      <1>     mov qword [i2FNext], rbx
   154 00003162 B82F250000          <1>     mov eax, 252Fh
   155 00003167 488D1500D4FFFF      <1>     lea rdx, i2fhSwap33h
   156 0000316E CD21                <1>     int 21h
   157                              <1> 
   158                              <1> 
   159                              <1> ;Then set up the link pointers to the load address of the 
   160                              <1> ; drive table.
   161 00003170 B919000000          <1>     mov ecx, drvBlkTblL - 1
   162 00003175 488D2D33F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   163 0000317C 4889EE              <1>     mov rsi, rbp
   164                              <1> .dskTblLp:
   165 0000317F 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   166 00003182 4881C68D000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   167 00003189 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   168 0000318C FFC9                <1>     dec ecx                 ;Decrement the count
   169 0000318E 75EF                <1>     jnz .dskTblLp
   170 00003190 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   171                              <1> ;Now get number of Int 33h information packed in r8
   172 00003197 CD31                <1>     int 31h
   173                              <1>     ;Returns:
   174                              <1>     ;r8[Byte 0] = Number of COM ports
   175                              <1>     ;r8[Byte 1] = Number of fixed disks
   176                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   177                              <1>     ;r8[Byte 3] = Number of Int 33h units
   178 00003199 4C89050FE0FFFF      <1>     mov qword [msdDriver.inBuffer], r8   
   179 000031A0 0FB6050BE0FFFF      <1>     movzx eax, byte [msdDriver.inBuffer + 3]
   180 000031A7 85C0                <1>     test eax, eax
   181 000031A9 0F84EF010000        <1>     jz .noDevs
   182 000031AF 0FB61DFADFFFFF      <1>     movzx ebx, byte [msdDriver.inBuffer + 1]
   183 000031B6 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   184 000031B8 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   185 000031BE 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   186 000031C4 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   187                              <1> ;Start by doing fixed disks.
   188 000031CB 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   189 000031CD 7454                <1>     jz .doRem
   190 000031CF C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   191 000031D6 C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   192                              <1> .hdLp:
   193                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   194                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   195 000031DD 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   196 000031DF E8AB030000          <1>     call .ptnUpdateBpb
   197 000031E4 720D                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   198                              <1> ;The odd case where there is a BPB on the hard disk :)
   199 000031E6 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   200 000031EC E840030000          <1>     call .advDiskPtrs
   201 000031F1 EB12                <1>     jmp short .fatDiskOk
   202                              <1> .mbrFnd:
   203 000031F3 7517                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   204                              <1> ;Now we check if we have a valid MBR signature.
   205 000031F5 66813DAFE1FFFF55AA  <1>     cmp word [msdDriver.inBuffer + mbr.mbrSig], 0AA55h
   206 000031FE 750C                <1>     jne .gotoNextDisk
   207 00003200 E8BB010000          <1>     call .processMbr    ;This disk is done.
   208                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   209                              <1> .fatDiskOk:
   210                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   211 00003205 E81F030000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   212 0000320A 7417                <1>     je .doRem
   213                              <1> .gotoNextDisk:
   214 0000320C FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   215 00003212 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   216 00003219 247F                <1>     and al, ~80h    ;Drop the upper bit
   217 0000321B 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   218 00003221 75BA                <1>     jne .hdLp
   219                              <1> ;------------------------------------------------
   220                              <1> ;   Here we start doing removable devices
   221                              <1> ;------------------------------------------------
   222                              <1> .doRem:
   223 00003223 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   224 0000322A 8805(01000000)      <1>     mov byte [fixPtn], al
   225 00003230 C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   226 00003237 C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   227 0000323E 803D(02000000)00    <1>     cmp byte [remDrv], 0
   228 00003245 0F8444010000        <1>     je .noRems
   229                              <1> .remLp:
   230 0000324B 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   231 0000324D E83D030000          <1>     call .ptnUpdateBpb
   232 00003252 7329                <1>     jnc .remBpbOk
   233 00003254 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   234 00003258 B800880000          <1>     mov eax, 8800h  ;Get disk parameters
   235 0000325D CD33                <1>     int 33h
   236 0000325F 723D                <1>     jc .remSkipDisk     ;If cant get BPB and no devparams, goto next disk :)
   237 00003261 C7451B00000000      <1>     mov dword [rbp + drvBlk.dHiddSec], 0
   238 00003268 66895D0A            <1>     mov word [rbp + drvBlk.wBpS], bx
   239 0000326C F7C1FFFF0000        <1>     test ecx, 0FFFFh
   240 00003272 7605                <1>     jna .remSmall
   241 00003274 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   242 00003277 31C9                <1>     xor ecx, ecx
   243                              <1> .remSmall:
   244 00003279 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   245                              <1> .remBpbOk:
   246                              <1> ;Now test if we have a changeline for this device. eax has the device flags.
   247 0000327D A910000000          <1>     test eax, 10h    ;Set if we have changeline support
   248 00003282 7406                <1>     jz .remNext
   249 00003284 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   250                              <1> .remNext:
   251 0000328A 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   252 00003290 E89C020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   253 00003295 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   254 0000329C 742C                <1>     je .msdExit
   255                              <1> .remSkipDisk:
   256 0000329E FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   257 000032A4 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   258 000032AB 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   259 000032B1 7417                <1>     je .msdExit
   260 000032B3 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   261 000032B5 7294                <1>     jb .remLp                   ;If not, do normal processing.
   262                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   263                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   264                              <1> ; to go past the letters assigned to the fixed disk.
   265 000032B7 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   266 000032BD 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   267 000032BF 8805(04000000)      <1>     mov byte [dosDrv], al
   268 000032C5 E981FFFFFF          <1>     jmp .remLp
   269                              <1> .msdExit:
   270 000032CA F605(00000000)FF    <1>     test byte [physVol], -1 ;Did we fail to initialise ANY devices?
   271 000032D1 0F84C7000000        <1>     jz .noDevs  ;If so, we pretend we have two drives and hope defaults work!
   272 000032D7 F605(00000000)FF    <1>     test byte [physVol], -1
   273 000032DE 0F84AB000000        <1>     jz .noRems
   274 000032E4 803D(02000000)01    <1>     cmp byte [remDrv], 1
   275 000032EB 7539                <1>     jne .skipSingle
   276                              <1> ;Here we do the A: >-< B: jank.
   277                              <1> ;We know rbp points to what should the block for B:. The block for A:
   278                              <1> ; is right behind it.
   279                              <1> .doSingle:
   280 000032ED 4889EE              <1>     mov rsi, rbp
   281 000032F0 4881EE8D000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   282 000032F7 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   283                              <1> ;Now we transfer the BIOS number and set drive number to 1
   284 000032FD 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bBIOSNum]
   285 00003301 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   286 00003304 C6450901            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   287 00003308 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   288 0000330C 4881C60A000000      <1>     add rsi, drvBlk.bpb
   289 00003313 B983000000          <1>     mov ecx, (drvBlk_size - 10)  ;8 bytes Link ptr and 2 id bytes
   290 00003318 F3A4                <1>     rep movsb
   291 0000331A 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   292 00003320 FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   293                              <1> .skipSingle:
   294 00003326 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   295 0000332D 53                  <1>     push rbx    ;Save this count on the stack
   296 0000332E FFCB                <1>     dec ebx     ;Turn into an offset into the table
   297 00003330 B88D000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   298 00003335 F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   299 00003337 488D3571EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   300 0000333E 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   301 00003346 488D1D(66000000)    <1>     lea rbx, bpbArray
   302                              <1> .buildBPBArrayLp:
   303 0000334D 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   304 00003351 0FB64609            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   305 00003355 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   306 00003359 4889F7              <1>     mov rdi, rsi                            ;Save this ptr before walking
   307 0000335C 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Now walk the table
   308 0000335F 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   309 00003366 75E5                <1>     jne .buildBPBArrayLp    ;No... keep going
   310 00003368 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   311                              <1> ;
   312                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   313                              <1> ;
   314 0000336B 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the request packet ptr back
   315                              <1> ;All previous drivers return the "worst case" eject pointer. Here we return
   316                              <1> ; the real eject pointer
   317 00003372 4881C78D000000      <1>     add rdi, drvBlk_size    ;Mov rdi past end of last drvBlk 2 first free byte
   318 00003379 48897B0E            <1>     mov qword [rbx + initReqPkt.endptr], rdi    ;save as real eject point
   319 0000337D 58                  <1>     pop rax         ;Get back the number of detected volumes
   320 0000337E 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   321 00003381 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   322 00003385 66C70569D2FFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   323                              <1>     return
    13                              <2> %%_ret:
    14 0000338E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> .noRems:
   325                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   326                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   327                              <1> ; we just did the first remdev. This drive gets registered as having
   328                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   329 0000338F 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   330 00003393 FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   331                              <1> ;Here we setup A: drive to be a pretend 1.44Mb drive
   332 00003399 E94FFFFFFF          <1>     jmp .doSingle
   333                              <1> .noDevs:
   334                              <1> ;If we have no drives, then suppose we have two default drives
   335                              <1> ; A: and B: which are NOT the same!
   336 0000339E C605(00000000)02    <1>     mov byte [physVol], 2   ;Identify entries A and B of system Ok!
   337                              <1> ;Now set them as their own owners and not shared status.
   338 000033A5 488D3503EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl
   339 000033AC 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   340 000033B2 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]
   341 000033B5 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   342 000033BB E966FFFFFF          <1>     jmp .skipSingle
   343                              <1> ;------------------------
   344                              <1> ; Procedures for init
   345                              <1> ;------------------------
   346                              <1> 
   347                              <1> .processMbr:
   348                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   349                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   350 000033C0 E898010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   351                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   352                              <1> ; ptn. We process it, invalidate the entry then start again
   353 000033C5 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   354 000033CC 7539                <1>     jne .pmbrNoHack
   355 000033CE 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   356 000033D5 B904000000          <1>     mov ecx, 4
   357                              <1> .pmbrHackLp:
   358 000033DA 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   359 000033DD 740D                <1>     je .pmbrHackFnd
   360                              <1> .pmbrHackRet:
   361 000033DF 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   362 000033E6 FFC9                <1>     dec ecx
   363 000033E8 75F0                <1>     jnz .pmbrHackLp
   364 000033EA EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   365                              <1> .pmbrHackFnd:
   366 000033EC 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   367 000033F0 E825020000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   368 000033F5 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   369 000033F7 C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   370 000033FE E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   371                              <1> ;Ignore any read errors, but we start again.
   372 00003403 C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   373                              <1> ;Now we fall down and start again
   374                              <1> .pmbrNoHack:
   375 00003407 C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   376 0000340E 488D35(06000000)    <1>     lea rsi, mbrE
   377                              <1> .pmbrLp:
   378 00003415 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   379 00003418 E80B020000          <1>     call .checkMbrPtnType
   380 0000341D 754D                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   381 0000341F E8F6010000          <1>     call .checkDataPtn
   382 00003424 740A                <1>     je .pmbrDodata
   383 00003426 E85A000000          <1>     call .processEPtn   ;Here we process EBR
   384                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000342B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000342D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   385 0000342E EB34                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   386                              <1> .pmbrDodata:
   387 00003430 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   388 00003433 E857010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   389 00003438 730E                <1>     jnc .pmbrOk
   390                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000343A 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000343C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   391                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   392 0000343D E8CE000000          <1>     call .getUfmtSize
   393 00003442 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   394                              <1> .pmbrOk:
   395 00003448 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   396 0000344E 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   397 00003451 2580000000          <1>     and eax, ptnActive
   398 00003456 0D01000000          <1>     or eax, ptnPrimary
   399 0000345B 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   400 0000345F E8CD000000          <1>     call .advDiskPtrs
   401                              <1> .pmbrXtrejoin:
   402 00003464 E8C0000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   403                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003469 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000346B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   404                              <1> .pmbrNext:
   405 0000346C FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   406 00003472 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   407                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003479 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000347B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   408 0000347C 4881C610000000      <1>     add rsi, mbrEntry_size
   409 00003483 EB90                <1>     jmp short .pmbrLp
   410                              <1> 
   411                              <1> .processEPtn:
   412                              <1> ;Process all logical process in an extended partition. rsi points to
   413                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   414                              <1> ;Thus we always know the "root" sector of this extended partition.
   415 00003485 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   416                              <1> .peplp:
   417 00003488 E8EC000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   418                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000348D 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000348F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   419 00003490 66813D14DFFFFF55AA  <1>     cmp word [msdDriver.inBuffer + ebr.mbrSig], 0AA55h
   420 00003499 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   421 0000349B F9                  <1>     stc
   422                              <1>     return
    13                              <2> %%_ret:
    14 0000349C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   423                              <1> .pep1:
   424 0000349D E8AA000000          <1>     call .copyEbr       ;Save the EBR
   425                              <1> ;Now we check the saved EBR is valid.
   426 000034A2 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   427 000034A9 E864010000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   428 000034AE 754D                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   429 000034B0 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   430 000034B7 E85E010000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   431 000034BC 743F                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   432                              <1> ;Now we get the absolute start sector of this partition.
   433 000034BE 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   434 000034C4 E8C6000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB (preserves sector number)
   435 000034C9 730E                <1>     jnc .pepOk
   436                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000034CB 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000034CD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   437                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   438 000034CE E83D000000          <1>     call .getUfmtSize
   439 000034D3 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   440                              <1> .pepOk:
   441                              <1> ;If here, this partition will be given a CDS entry.
   442                              <1> ;Now we go to the next logical partition in the extended partition and
   443                              <1> ; move to the next drive
   444 000034D9 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   445 000034DF 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   446 000034E2 2580000000          <1>     and eax, ptnActive
   447 000034E7 0D02000000          <1>     or eax, ptnLogical
   448 000034EC 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   449 000034F0 E83C000000          <1>     call .advDiskPtrs
   450 000034F5 E82F000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   451                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000034FA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000034FC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   452                              <1> .pepNextEbr:
   453                              <1> ;Else we now walk the disk linked list.
   454 000034FD 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   455 00003503 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   456                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003505 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003507 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   457 00003508 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   458 0000350B E978FFFFFF          <1>     jmp .peplp
   459                              <1> 
   460                              <1> .getUfmtSize:
   461                              <1> ;Moves the partition geometry information into drvBlk from MBR. This is only
   462                              <1> ; a necessity if the medium doesn't have a trustworthy BPB. Doesn't touch CHS 
   463                              <1> ; stuff because bleugh. That can be computed by FORMAT.
   464                              <1> ;Input: rsi -> MBR/EBR entry for this partition
   465                              <1> ;       rbp -> drvBlk for this drive we are setting up
   466                              <1> ;       rcx = Sector number of the start of the partition
   467 00003510 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx  ;Set again (this time permanently)
   468 00003513 8B4E0C              <1>     mov ecx, dword [rsi + mbrEntry.numSectors]
   469 00003516 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   470 0000351C 7605                <1>     jbe .gpgSmol
   471 0000351E 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   472 00003521 31C9                <1>     xor ecx, ecx
   473                              <1> .gpgSmol:
   474 00003523 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   475 00003527 F8                  <1>     clc
   476                              <1>     return
    13                              <2> %%_ret:
    14 00003528 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> 
   478                              <1> .physCheckEnd:
   479 00003529 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   480                              <1>     return
    13                              <2> %%_ret:
    14 00003530 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> 
   482                              <1> .advDiskPtrs:
   483 00003531 E88E000000          <1>     call .getNumCyl     ;Computes the number of cylinders in the BPB
   484 00003536 E8C1000000          <1>     call .xfrDfltBpb    ;Finish drvBlk init by transfering dfltBPB
   485 0000353B 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   486 0000353F FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   487 00003545 FE05(00000000)      <1>     inc byte [physVol]
   488                              <1>     return
    13                              <2> %%_ret:
    14 0000354B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> .copyEbr:
   491                              <1> ;Copies the EBR from the EBR sector in the buffer
   492 0000354C 51                  <1>     push rcx
   493 0000354D 56                  <1>     push rsi
   494 0000354E 57                  <1>     push rdi
   495 0000354F 488D3D(06000000)    <1>     lea rdi, mbrE
   496 00003556 B920000000          <1>     mov ecx, 2*mbrEntry_size
   497 0000355B EB0F                <1>     jmp short .cpmbr
   498                              <1> .copyMbr:
   499                              <1> ;Copies the MBR from the MBR sector in the buffer
   500 0000355D 51                  <1>     push rcx
   501 0000355E 56                  <1>     push rsi
   502 0000355F 57                  <1>     push rdi
   503 00003560 488D3D(06000000)    <1>     lea rdi, mbrE
   504 00003567 B940000000          <1>     mov ecx, 4*mbrEntry_size
   505                              <1> .cpmbr:
   506 0000356C 488D35FADDFFFF      <1>     lea rsi, qword [msdDriver.inBuffer + mbr.mbrEntry1]
   507 00003573 F3A4                <1>     rep movsb
   508 00003575 5F                  <1>     pop rdi
   509 00003576 5E                  <1>     pop rsi
   510 00003577 59                  <1>     pop rcx
   511                              <1>     return
    13                              <2> %%_ret:
    14 00003578 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> .readSector:
   514                              <1> ;Input: ecx = Sector to read
   515 00003579 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   516 00003580 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   517 00003585 488D1D23DCFFFF      <1>     lea rbx, msdDriver.inBuffer
   518 0000358C CD33                <1>     int 33h
   519                              <1>     return
    13                              <2> %%_ret:
    14 0000358E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> .ptnUpdateBpb:
   522                              <1> ;Setups up the call for below on the current partition.
   523                              <1> ;Input: ecx = Number of hidden sectors (preserved)
   524                              <1> ;Output:
   525                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   526                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   527                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   528 0000358F 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   529 00003595 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   530 00003598 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   531 0000359F 884509              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   532 000035A2 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   533 000035A9 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   534 000035AC 51                  <1>     push rcx
   535 000035AD 56                  <1>     push rsi    ;Save the mbr entry ptr
   536 000035AE E856D2FFFF          <1>     call msdDriver.updateBpb
   537 000035B3 7209                <1>     jc .pubBad
   538 000035B5 E8B1D2FFFF          <1>     call msdDriver.moveVolIds
   539 000035BA 5E                  <1>     pop rsi
   540 000035BB 59                  <1>     pop rcx
   541 000035BC F8                  <1>     clc         ;Always clean even if no ids
   542                              <1>     return
    13                              <2> %%_ret:
    14 000035BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> .pubBad:
   544 000035BE 5E                  <1>     pop rsi
   545 000035BF 59                  <1>     pop rcx
   546 000035C0 3C07                <1>     cmp al, drvBadMed ;Bad Partition?
   547 000035C2 F9                  <1>     stc         ;Ensure we set the CF again
   548                              <1>     return
    13                              <2> %%_ret:
    14 000035C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> .getNumCyl:
   551                              <1> ;Computes the number of cylinders on the media. Not really to be used.
   552                              <1> ;Input: rbp -> drvBlk
   553 000035C4 50                  <1>     push rax
   554 000035C5 51                  <1>     push rcx
   555 000035C6 52                  <1>     push rdx
   556 000035C7 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
   557 000035CB 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
   558 000035CF F7E1                <1>     mul ecx ;Get sectors per cylinder in eax. edx = 0
   559 000035D1 85C0                <1>     test eax, eax   ;If ax is 0, store zero! Phoney CHS data in BPB.
   560 000035D3 7414                <1>     jz .gncExit     ;This prevents CHS IOCTL from occuring.
   561 000035D5 89C1                <1>     mov ecx, eax    ;Save this number in ecx
   562 000035D7 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   563 000035DB 85C0                <1>     test eax, eax   ;If this is zero, get the 32 bit count of sectors
   564 000035DD 0F44451F            <1>     cmovz eax, dword [rbp + drvBlk.dTotSec32]
   565 000035E1 F7F1                <1>     div ecx     ;sectors/(sectors/cylinder) = whole cylinders in eax
   566 000035E3 85D2                <1>     test edx, edx
   567 000035E5 7402                <1>     jz .gncExit
   568 000035E7 FFC0                <1>     inc eax     ;Inc the cylinder count to account for not whole divide
   569                              <1> .gncExit:
   570 000035E9 BAFFFF0000          <1>     mov edx, 0FFFFh   ;A default Max cylinder value, since CHS is for floppies.
   571 000035EE 39D0                <1>     cmp eax, edx
   572 000035F0 0F47C2              <1>     cmova eax, edx
   573 000035F3 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   574 000035F7 F8                  <1>     clc ;Ensure CF is clear
   575 000035F8 5A                  <1>     pop rdx
   576 000035F9 59                  <1>     pop rcx
   577 000035FA 58                  <1>     pop rax
   578                              <1>     return
    13                              <2> %%_ret:
    14 000035FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> .xfrDfltBpb:
   581                              <1> ;If a drive is removable, we check the BIOS reported values and 
   582                              <1> ; build a BPB around that. Else, we trust the bpb and blindly copy it.
   583                              <1> ;
   584                              <1> ; TEMP TEMP: FOR NOW WE JUST ALWAYS BLINDLY TRUST THE BPB.
   585                              <1> ;
   586 000035FC 51                  <1>     push rcx
   587 000035FD 56                  <1>     push rsi
   588 000035FE 57                  <1>     push rdi
   589 000035FF 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
   590 00003603 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sDfltBPB]
   591 00003607 B935000000          <1>     mov ecx, bpb32_size
   592                              <1> ;Copies garbage into the reserved 12 bytes at the end of the BPB32
   593                              <1> ; but thats ok since we dont use it and those fields are reserved.
   594 0000360C F3A4                <1>     rep movsb
   595 0000360E 5F                  <1>     pop rdi
   596 0000360F 5E                  <1>     pop rsi
   597 00003610 59                  <1>     pop rcx
   598                              <1>     return
    13                              <2> %%_ret:
    14 00003611 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> .checkEbrPtnType:
   601                              <1> ;Input: al = Partition type
   602                              <1> ;Output: ZF=ZE => Valid partition type found
   603                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   604 00003612 E811000000          <1>     call .checkMbrPtnType
   605                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003617 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003619 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   606                              <1> .checkDataPtn:
   607 0000361A 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   608 0000361C 7407                <1>     je .ceptBad
   609 0000361E 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   610 00003620 7403                <1>     je .ceptBad
   611 00003622 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   612                              <1>     return
    13                              <2> %%_ret:
    14 00003624 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> .ceptBad:
   614 00003625 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   615                              <1>     return
    13                              <2> %%_ret:
    14 00003627 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> .checkMbrPtnType:
   618                              <1> ;Input: al = Partition type
   619                              <1> ;Output: ZF=ZE => Valid partition type found
   620                              <1> ;        ZF=NZ => Not a valid partition type
   621 00003628 51                  <1>     push rcx
   622 00003629 57                  <1>     push rdi
   623 0000362A 488D3D0A000000      <1>     lea rdi, .ptnTbl
   624 00003631 B909000000          <1>     mov ecx, .ptnTblL
   625 00003636 F2AE                <1>     repne scasb ;Find the entry in al
   626 00003638 5F                  <1>     pop rdi
   627 00003639 59                  <1>     pop rcx
   628                              <1>     return
    13                              <2> %%_ret:
    14 0000363A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> ;Table contents:
   631                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   632                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   633                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   634                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   635                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   636                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   637                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   638                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   639 0000363B 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   640                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [8705000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqPktPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     5                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     6 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     7 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     8 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
     9 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    10 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    11 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    12 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    13 00000066 <res D0h>           <1> bpbArray    dq drvBlkTblL dup (?)
    38 00000136 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+3+2 passes

