     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL    equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvNotIBM    equ 2000h ;If set, buffer in Build BPB is scratch space
    70                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    71                              <1>     devDrvIOCTLRW   equ 4000h ;If set, IOCTL Read/Write supported
    72                              <1>     devDrvChar      equ 8000h ;If set, Char device
    73                              <1> ;Bit 0 1=console input
    74                              <1> ;    1 1=console output (character devices)
    75                              <1> ;    2 1=NUL device
    76                              <1> ;    3 1=CLOCK device
    77                              <1> ;    4 1=Int 29 output (CON)
    78                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    79                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    80                              <1> ;   11 1=open/close/removable media supported (3.0+)
    81                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    82                              <1> ;      1=media descriptor in FAT required (block devices)
    83                              <1> ;   14 1=IOCTL supported
    84                              <1> ;   15 0=block device
    85                              <1> ;      1=character device
    86                              <1> 
    87                              <1> ;Driver structures
    88                              <1> 
    89                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    90                              <1> 
    91                              <1>     .hdrlen db ?  ;Length of the request header
    92                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    93                              <1>     .cmdcde db ?  ;Command code
    94                              <1>     .status dw ?  ;Status word
    95                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    96                              <1> 
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> struc drvReqPkt
   100                              <1>     drvReqPktM
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   101                              <1> endstruc
   102                              <1> 
   103                              <1> struc initReqPkt  ;Init Request Packet
   104                              <1> 
   105                              <1>     drvReqPktM   ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   106 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   107 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   108 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   109 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   114                              <1> 
   115                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   116 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   117 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   118 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   123                              <1> 
   124                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   125 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   126 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   127 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   128                              <1> 
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc ioReqPkt   ;IO Request Packet
   132                              <1> 
   133                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   134 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   135 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   136 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   137 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   138 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   143                              <1>     
   144                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   145 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   146                              <1> 
   147                              <1> endstruc
   148                              <1> 
   149                              <1> struc statusReqPkt   ;Status Request Packet
   150                              <1> 
   151                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   152                              <1> 
   153                              <1> endstruc
   154                              <1> 
   155                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   156                              <1> 
   157                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   158                              <1>      
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc openReqPkt ;Open Device Request Packet
   162                              <1> 
   163                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   164                              <1>      
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc closeReqPkt ;Close Device Request Packet
   168                              <1> 
   169                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   170                              <1>      
   171                              <1> endstruc
   172                              <1> 
   173                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   174                              <1> 
   175                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   176                              <1>      
   177                              <1> endstruc
   178                              <1> 
   179                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   180                              <1> 
   181                              <1>     drvReqPktM    ;Common Driver Header Macro  
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   182 0000000D ??                  <1>     .majfun db ?  ;Major function number
   183 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   184 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   185 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   186 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   187                              <1> 
   188                              <1> endstruc
   189                              <1> 
   190                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   191                              <1>     
   192                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   193                              <1> 
   194                              <1> endstruc
   195                              <1> 
   196                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   197                              <1>     
   198                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   199                              <1> 
   200                              <1> endstruc
   201                              <1> ;IOCTL structs
   202                              <1> 
   203                              <1> struc lbaParamsBlock
   204 00000000 ??                  <1>     .bSize          db ?
   205 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   206                              <1>                             ;1 = Get current saved drive info w/o updating
   207                              <1>                             ;2 = Get physical parameters of the medium
   208                              <1>                             ;Only meaningful on get. Set must have this as 0
   209 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   210 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   211                              <1>                             ; If one, can use CHS functions with returned vals
   212 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   213 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   214 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   215                              <1> ;The below is the absolute start sector of the partition. It is the 
   216                              <1> ; partition at which to find the BPB.
   217 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   218                              <1> endstruc
   219                              <1> 
   220                              <1> struc lbaIOBlock
   221 00000000 ??                  <1>     .size           db ?
   222 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   223 00000002 ????????????        <1>     .res            db 6 dup (?)
   224 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start write at
   225 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   226                              <1> endstruc
   227                              <1> 
   228                              <1> struc lbaFormatBlock
   229 00000000 ??                  <1>     .size           db ?
   230 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   231 00000002 ????????????        <1>     .res            db 6 dup (?)
   232 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start format at
   233                              <1> endstruc
   234                              <1> 
   235                              <1> struc chsParamsBlock
   236 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   237 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   238 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   239 00000004 ????                <1>     .wNumCyl    dw ?
   240 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   241 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   242                              <1>     .TrackLayout:
   243                              <1> endstruc
   244                              <1> 
   245                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   246                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   247                              <1> ;Only used in setparams requests. Ignored for getparams 
   248                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   249                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   250                              <1> 
   251                              <1> 
   252                              <1> struc chsIOBlock
   253 00000000 ??                  <1>     .bSpecFuncs     db ?
   254 00000001 ????                <1>     .wStartHead     dw ?
   255 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   256 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   257 00000007 ????                <1>     .wNumSectors    dw ?
   258 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   259                              <1> endstruc
   260                              <1> 
   261                              <1> struc chsFormatBlock
   262 00000000 ??                  <1>     .bSpecFuncs db ?
   263 00000001 ????                <1>     .wStartHead dw ?
   264 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   265                              <1> endstruc
   266                              <1> 
   267                              <1> struc accFlgBlk
   268 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   269 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc idParamBlk
   273 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   274 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   275 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   276 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   277                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
     1                              <1> ;No externally defined symbols, no internally exposed symbols.
     2                              <1> 
     3                              <1> ;Driver internal equates
     4                              <1> drvBlkTblL      equ 26  ;Space for 26 drive letters!
     5                              <1> ;IOCTL track table size (max number of sectors in a track is 63)
     6                              <1> maxTrackTblSz   equ 63
     7                              <1> maxAcc          equ 5   ;Maximum accesses to a remdev w/o timer/changeline
     8                              <1> 
     9                              <1> struc drvBlk
    10                              <1> ;--------------------------------------------------------------------
    11                              <1> ; Drvblk Header information
    12                              <1> ;--------------------------------------------------------------------
    13 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    14 00000008 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    15 00000009 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    16                              <1> ;--------------------------------------------------------------------
    17                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    18                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    19                              <1> ;  left in those fields... not a problem)
    20                              <1> ;--------------------------------------------------------------------
    21                              <1> .bpb:
    22 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    23 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    24 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    25 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    26 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    27 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
    28 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
    29 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
    30 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
    31 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
    32 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
    33 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
    34                              <1> ;--------------------------------------------------------------------
    35                              <1> ; The below vars are only accessed on FAT32 volumes
    36                              <1> ;--------------------------------------------------------------------
    37 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
    38 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
    39 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
    40 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
    41 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
    42 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
    43                              <1> ;--------------------------------------------------------------------
    44                              <1> ; DrvBlk flags
    45                              <1> ;--------------------------------------------------------------------
    46 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
    47 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
    48 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
    49 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
    50                              <1> ;The below word is a legacy thing. It is only used in a CHS based IOCTL call.
    51 00000039 ????                <1>     .wNumCyl    dw ?
    52 0000003B <res 35h>           <1>     .sDfltBPB   db bpb32_size dup (?)   ;Default capacity BPB for drive
    53                              <1> .dAccTime:          ;Last media check time if remdev
    54 00000070 ????????            <1>     .wPtnType   dd ?    
    55                              <1> ;--------------------------------------------------------------------
    56                              <1> ; Volume string and id for the drive described by this drvblk
    57                              <1> ;--------------------------------------------------------------------
    58 00000074 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
    59 0000007F ??                  <1>                 db ?            ;Null terminator for string
    60 00000080 ????????            <1>     .volId      dd ?            ;Volume serial number            
    61 00000084 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
    62 0000008C ??                  <1>                 db ?            ;Null terminator for string
    63                              <1> endstruc
    64                              <1> 
    65                              <1> ;FAT type values
    66                              <1> bpbUnknown  equ 80h ;Unknown FAT
    67                              <1> bpbFat16    equ 40h ;FAT 16 disk
    68                              <1> bpbFat32    equ 20h ;FAT 32 disk
    69                              <1> bpbFat12    equ 10h ;FAT 12 disk
    70                              <1> 
    71                              <1> ;Device Type flags
    72                              <1> type48TPI   equ 0   ;Small floppy format, depreciated
    73                              <1> type96TPI   equ 1   ;Large floppy format, depreciated
    74                              <1> typeSmall   equ 2   ;Super large floppy format, depreciated
    75                              <1> typeHard    equ 5   ;Hard drive
    76                              <1> typeGenRem  equ 7   ;Generic removable medium, default
    77                              <1> 
    78                              <1> ;Device Flag values
    79                              <1> devFixed    equ 1       ;Set if fixed disk 
    80                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
    81                              <1> devLockBPB  equ 4       ;Makes BuildBPB not build a BPB if set
    82                              <1> devSameSec  equ 8       ;All sectors in track are same size
    83                              <1> devMulti    equ 10h     ;Physical drive has many logical units (A/B share)
    84                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
    85                              <1> devChgd     equ 40h     ;Dev change detected (set on shared physical drives)
    86                              <1>                         ; Can only be set on remdevs with changeline support!
    87                              <1> devSetDASD  equ 80h     ;Set if we need to set drive DASD params before next fmt.
    88                              <1>                         ; Gets set if new parameters are written to drive!
    89                              <1> devNewParms equ 100h    ;Set if new drive parameters set! Set on IOCTL setparms.
    90                              <1> devUnFmt    equ 200h    ;Disables reads/writes if set
    91                              <1> 
    92                              <1> ;Media byte bits
    93                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
    94                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
    95                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
    96                              <1> 
    97                              <1> ;Partition types
    98                              <1> ptnPrimary  equ 1       ;A primary MBR partition
    99                              <1> ptnLogical  equ 2       ;A logical MBR partition
   100                              <1> ptnActive   equ 80h     ;An active partition
   101                              <1> ptnGpt      equ 4       ;A primary GPT partition
   102                              <1> ptrUnknown  equ 8000h   ;An unknown partition
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E842310000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E82F300000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 7408                <1>     jz .prnExit 
   513                              <1>     ;Everything else, device not ready
   514 000004AD B002                <1>     mov al, drvNotReady
   515                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   516 000004AF B480                <1>     mov ah, 80h ;Set error bit
   517 000004B1 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   518                              <1> .prnExit:
   519 000004B5 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   520 000004BB 5B                  <1>     pop rbx
   521 000004BC 58                  <1>     pop rax
   522 000004BD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> ; This file contains five main routines:
     2                              <1> ; 1) Replacement Int 39h routine (for unhooking interrupts back).
     3                              <1> ; 2) Replacement Int 33h routine.
     4                              <1> ; 3) Int 33h replacement routine.
     5                              <1> ; 4) Driver itself
     6                              <1> ; 5) Int 2Fh Driver backdoor routine
     7                              <1> 
     8 000004BE 0000000000000000    <1> i39Org  dq 0    ;Original BIOS Int 39h to replace on Int 39h
     9 000004C6 0000000000000000    <1> i33Org  dq 0    ;Original BIOS Int 33h to replace on Int 39h.
    10 000004CE 0000000000000000    <1> i2FNext dq 0    ;Previous Int 2Fh handler
    11 000004D6 0000000000000000    <1> i33Next dq 0    ;Current disk driver to call.
    12                              <1> 
    13                              <1> ;Replacement Int 39h routine to replace interrupts these drivers hook.
    14                              <1> dosInt39h:
    15                              <1> ;For now, we just replace int 33h and int 39h back and then jump to i39h
    16 000004DE B833250000          <1>     mov eax, 2533h
    17 000004E3 488B15DCFFFFFF      <1>     mov rdx, qword [i33Org]
    18 000004EA CD21                <1>     int 21h
    19 000004EC B839250000          <1>     mov eax, 2539h
    20 000004F1 488B15C6FFFFFF      <1>     mov rdx, qword [i39Org]
    21 000004F8 CD21                <1>     int 21h
    22                              <1> ;And now do the actual warm reboot
    23 000004FA FF25BEFFFFFF        <1>     jmp qword [i39Org]
    24                              <1> 
    25                              <1> ;Replacement Int 33h routine
    26                              <1> dosInt33h:
    27                              <1> ;--------------------------------------------------------------------------
    28                              <1> ;       This is a wrapper around the BIOS Int 33h handler.
    29                              <1> ;--------------------------------------------------------------------------
    30                              <1> ;This routine does the following:
    31                              <1> ;1) Checks if a format request is being made, in which case
    32                              <1> ;   it will ensure that the devSetDASD and devChgd bits are set for all 
    33                              <1> ;   drives for the BIOS drive in dl to ensure that the DOS driver treats
    34                              <1> ;   the DOS drives properly.
    35                              <1> ;
    36                              <1> ; For the most part (CHS is depreciated so we don't talk about it here):
    37                              <1> ;   AH = Function number (05h/85h is FORMAT)
    38                              <1> ;   AL = Number of sectors to xact.
    39                              <1> ;   RBX -> Points to a xfr buffer.
    40                              <1> ;   RCX = Start sector of xft.
    41                              <1> ;   DL = BIOS Drive number to xact on.
    42                              <1> ;--------------------------------------------------------------------------
    43                              <1> ;Enter the DOS driver critical section . When the MSD driver enters this it 
    44                              <1> ; already has the lock so this simply incs the count. If a process attempts 
    45                              <1> ; to bypass DOS and we are already processing a request it gets put on ice.
    46                              <1> ;--------------------------------------------------------------------------
    47                              <1> ;Start by clearing the CF on entry
    48 00000500 80642410FE          <1>     and byte [rsp + 2*8], ~1
    49                              <1> ;Enter the device critical section
    50 00000505 50                  <1>     push rax
    51 00000506 B802800000          <1>     mov eax, 8002h
    52 0000050B CD2A                <1>     int 2ah
    53 0000050D 58                  <1>     pop rax
    54                              <1> ;Now put the retaddr in the var we own 
    55 0000050E 8F0552000000        <1>     pop qword [.tmp]
    56                              <1> ;Now check that we are not formatting. If we are, we need to set the bit on
    57                              <1> ; all DOS drives that use this BIOS drive that it has been formatted and 
    58                              <1> ; changed.
    59 00000514 50                  <1>     push rax    ;Push the function number on stack
    60 00000515 80E47F              <1>     and ah, 7Fh ;Clear the top bit (as both 05h and 85h are formats)
    61 00000518 80FC05              <1>     cmp ah, 05h
    62 0000051B 7405                <1>     je .format
    63 0000051D 80FC07              <1>     cmp ah, 07h ;Undocumented SCSI format?
    64 00000520 750A                <1>     jne .notFormat
    65                              <1> .format:
    66                              <1> ;Here we register the format request!
    67 00000522 B8C0000000          <1>     mov eax, devChgd | devSetDASD   ;Bits to set in flags
    68 00000527 E8270C0000          <1>     call msdDriver.setBitsForAllDevs
    69                              <1> .notFormat:
    70 0000052C 58                  <1>     pop rax     ;Get the function number from stack
    71                              <1> ;Call previous handler and exit irq in this call.
    72 0000052D 881532000000        <1>     mov byte [.drv], dl ;Save the drive we are acting on
    73 00000533 FF159DFFFFFF        <1>     call qword [i33Next]    
    74 00000539 731A                <1>     jnc .exitI33
    75 0000053B 80FC06              <1>     cmp ah, 06h     ;Did a swap occur?
    76 0000053E 7515                <1>     jne .exitI33    ;All other errors get bubbled up
    77                              <1> ;Here we ensure that on all drives with this BIOS number, we 
    78                              <1> ; register that the swap occured :)
    79 00000540 50                  <1>     push rax
    80 00000541 52                  <1>     push rdx
    81 00000542 0FB6151C000000      <1>     movzx edx, byte [.drv]
    82 00000549 B840000000          <1>     mov eax, devChgd    ;Set the device changed bit on all devices
    83 0000054E E8000C0000          <1>     call msdDriver.setBitsForAllDevs
    84 00000553 5A                  <1>     pop rdx
    85 00000554 58                  <1>     pop rax
    86                              <1> .exitI33:
    87                              <1> ;Replace the retaddr back on the stack
    88 00000555 FF350B000000        <1>     push qword [.tmp]
    89                              <1> ;Exit the device critical section now
    90 0000055B 50                  <1>     push rax
    91 0000055C B802810000          <1>     mov eax, 8102h
    92 00000561 CD2A                <1>     int 2ah
    93 00000563 58                  <1>     pop rax
    94                              <1> ;And finally go back to the caller :)
    95                              <1>     return
    13                              <2> %%_ret:
    14 00000564 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    96                              <1> ;Local data for the main IRQ handler
    97 00000565 00                  <1> .drv    db 0    ;Drive we are acting ok
    98 00000566 0000000000000000    <1> .tmp    dq 0
    99                              <1> 
   100                              <1> ;Int 33h replacement routine
   101                              <1> i2fhSwap33h:
   102                              <1> ;Replaces the current int 33h handler and the int 39h replacement handler
   103                              <1> ;Input: ah = 13h
   104                              <1> ;       rdx -> New Int 33h handler.
   105                              <1> ;       rbx -> Value to replace back when system shutdown occurs.
   106                              <1> ;Output:
   107                              <1> ;       rdx -> Replaced Int 33h handler.
   108                              <1> ;       rbx -> Replaced original lowest level Int 33h handler.
   109 0000056E 80FC13              <1>     cmp ah, 13h
   110 00000571 0F85FE0B0000        <1>     jne msdDriver.i2fDriver ;Goto the driver backdoor if not this handler 
   111 00000577 48871558FFFFFF      <1>     xchg qword [i33Next], rdx
   112 0000057E 48871D41FFFFFF      <1>     xchg qword [i33Org], rbx
   113 00000585 48CF                <1>     iretq
   114                              <1> 
   115                              <1> ; Actual driver here
   116                              <1> msdDriver:
   117 00000587 50                  <1>     push rax
   118 00000588 53                  <1>     push rbx
   119 00000589 51                  <1>     push rcx
   120 0000058A 52                  <1>     push rdx
   121 0000058B 56                  <1>     push rsi
   122 0000058C 57                  <1>     push rdi
   123 0000058D 55                  <1>     push rbp
   124 0000058E 4150                <1>     push r8
   125 00000590 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the ptr to the req header in rbx
   126 00000597 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
   127 0000059B 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
   128 000005A1 7741                <1>     ja .errBadCmd                 ;If yes, error!
   129 000005A3 488D2D4D000000      <1>     lea rbp, .fnTbl
   130 000005AA 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
   131 000005AF 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
   132 000005B2 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
   133 000005B4 7417                <1>     jz .exit
   134 000005B6 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
   135 000005B9 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
   136 000005BD 752C                <1>     jne .errBadPkt
   137 000005BF 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
   138 000005C2 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
   139 000005C6 E8410A0000          <1>     call .setupDrive    ;Returns rbp -> Table entry
   140                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
   141 000005CB FFD6                <1>     call rsi 
   142                              <1> .exit:
   143 000005CD 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get back the req header ptr
   144 000005D4 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
   145 000005DA 4158                <1>     pop r8
   146 000005DC 5D                  <1>     pop rbp
   147 000005DD 5F                  <1>     pop rdi
   148 000005DE 5E                  <1>     pop rsi
   149 000005DF 5A                  <1>     pop rdx
   150 000005E0 59                  <1>     pop rcx
   151 000005E1 5B                  <1>     pop rbx
   152 000005E2 58                  <1>     pop rax
   153 000005E3 C3                  <1>     ret
   154                              <1> 
   155                              <1> .errBadCmd:
   156 000005E4 B803000000          <1>     mov eax, drvBadCmd
   157 000005E9 EB05                <1>     jmp short .writeEntryError
   158                              <1> .errBadPkt:
   159 000005EB B805000000          <1>     mov eax, drvBadDrvReq
   160                              <1> .writeEntryError:
   161                              <1> ;Used for errors in the driver entry
   162 000005F0 E8E0000000          <1>     call .errorExit
   163 000005F5 EBD6                <1>     jmp short .exit
   164                              <1> 
   165                              <1> 
   166                              <1> .fnTbl:
   167                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
   168                              <1> ; to function, high word is packet size for check
   169                              <1>     ;dw .initShim - .fnTbl        ;Function 0
   170 000005F7 A02C                <1>     dw msdInit - .fnTbl
   171 000005F9 1F00                <1>     dw initReqPkt_size
   172 000005FB EC00                <1>     dw .medChk - .fnTbl          ;Function 1
   173 000005FD 1700                <1>     dw mediaCheckReqPkt_size
   174 000005FF 7601                <1>     dw .buildBPB - .fnTbl        ;Function 2
   175 00000601 1E00                <1>     dw bpbBuildReqPkt_size
   176 00000603 EA03                <1>     dw .IOCTLRead - .fnTbl       ;Function 3
   177 00000605 2A00                <1>     dw ioReqPkt_size
   178 00000607 EB03                <1>     dw .read - .fnTbl            ;Function 4
   179 00000609 2A00                <1>     dw ioReqPkt_size
   180 0000060B 0000                <1>     dw 0                         ;Function 5
   181 0000060D 0000                <1>     dw 0
   182 0000060F 0000                <1>     dw 0                         ;Function 6
   183 00000611 0000                <1>     dw 0
   184 00000613 0000                <1>     dw 0                         ;Function 7
   185 00000615 0000                <1>     dw 0
   186 00000617 1404                <1>     dw .write - .fnTbl           ;Function 8
   187 00000619 2A00                <1>     dw ioReqPkt_size
   188 0000061B 1404                <1>     dw .write - .fnTbl           ;Function 9
   189 0000061D 2A00                <1>     dw ioReqPkt_size
   190 0000061F 0000                <1>     dw 0                         ;Function 10
   191 00000621 0000                <1>     dw 0
   192 00000623 0000                <1>     dw 0                         ;Function 11
   193 00000625 0000                <1>     dw 0
   194 00000627 EA03                <1>     dw .IOCTLWrite - .fnTbl      ;Function 12
   195 00000629 2A00                <1>     dw ioReqPkt_size
   196 0000062B 0605                <1>     dw .devOpen - .fnTbl         ;Function 13
   197 0000062D 0D00                <1>     dw openReqPkt_size
   198 0000062F 1405                <1>     dw .devClose - .fnTbl        ;Function 14
   199 00000631 0D00                <1>     dw closeReqPkt_size
   200 00000633 2205                <1>     dw .remMed - .fnTbl          ;Function 15
   201 00000635 0D00                <1>     dw remMediaReqPkt_size
   202 00000637 0000                <1>     dw 0                         ;Function 16
   203 00000639 0000                <1>     dw 0
   204 0000063B 0000                <1>     dw 0                         ;Function 17
   205 0000063D 0000                <1>     dw 0
   206 0000063F 0000                <1>     dw 0                         ;Function 18
   207 00000641 0000                <1>     dw 0
   208 00000643 3205                <1>     dw .IOCTL - .fnTbl           ;Function 19
   209 00000645 2700                <1>     dw ioctlReqPkt_size
   210 00000647 0000                <1>     dw 0                         ;Function 20
   211 00000649 0000                <1>     dw 0
   212 0000064B 0000                <1>     dw 0                         ;Function 21
   213 0000064D 0000                <1>     dw 0
   214 0000064F 0000                <1>     dw 0                         ;Function 22
   215 00000651 0000                <1>     dw 0
   216 00000653 D909                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   217 00000655 0D00                <1>     dw getDevReqPkt_size
   218 00000657 0F0A                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   219 00000659 0D00                <1>     dw setDevReqPkt_size
   220                              <1> 
   221                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   222                              <1> .errorXlat:
   223 0000065B 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   224 00000662 B800010000          <1>     mov eax, 0100h
   225 00000667 E8D80A0000          <1>     call .callI33h ;Read status of last operation
   226 0000066C 7265                <1>     jc .genErrExit
   227                              <1> .ioError:   ;Jumped to from the block IO proc with rbx -> reqHdr already
   228 0000066E 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
   229 00000671 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   230 00000673 7460                <1>     je .errorExit 
   231 00000675 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   232 00000677 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   233 0000067A 7459                <1>     je .errorExit 
   234 0000067C 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   235 0000067F 7454                <1>     je .errorExit
   236                              <1> ;Device Not Ready
   237 00000681 B002                <1>     mov al, 02h  ;Device not ready code
   238 00000683 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   239 00000686 744D                <1>     je .errorExit
   240 00000688 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   241 0000068C 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   242                              <1> ;Write Protected
   243 00000690 30C0                <1>     xor al, al
   244 00000692 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   245 00000697 743C                <1>     je .errorExit
   246                              <1> ;CRC Error
   247 00000699 B004                <1>     mov al, 04h     ;CRC error code
   248 0000069B 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   249 000006A0 7433                <1>     je .errorExit
   250 000006A2 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   251 000006A7 742C                <1>     je .errorExit
   252 000006A9 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   253 000006AE 7425                <1>     je .errorExit
   254                              <1> ;Seek Error
   255 000006B0 B006                <1>     mov al, 06h     ;Seek error code
   256 000006B2 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   257 000006B5 741E                <1>     je .errorExit
   258                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   259                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   260 000006B7 B007                <1>     mov al, 07h
   261 000006B9 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   262 000006BC 7417                <1>     je .errorExit
   263                              <1> ;Sector Not Found
   264 000006BE B008                <1>     mov al, 08h     ;Sector not found code
   265 000006C0 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   266 000006C3 7410                <1>     je .errorExit
   267                              <1> ;Write faults
   268 000006C5 B00A                <1>     mov al, 0Ah     ;Write fault
   269 000006C7 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   270 000006CA 7409                <1>     je .errorExit
   271                              <1> ;Read faults
   272 000006CC B00B                <1>     mov al, 0Bh     ;Read fault
   273 000006CE 80F911              <1>     cmp cl, 11h     ;Read error
   274 000006D1 7402                <1>     je .errorExit
   275                              <1> ;General Errors
   276                              <1> .genErrExit:
   277 000006D3 B00C                <1>     mov al, drvGenFault     ;Everything else is general error
   278                              <1> .errorExit:     ;Jump to with al=Standard Error code
   279 000006D5 B480                <1>     mov ah, 80h ;Set error bit
   280 000006D7 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   281 000006DE 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   282                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 000006E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   285                              <1> .medChk:          ;Function 1
   286                              <1> ;Did this drive have its parameters swapped since the last time?
   287 000006E3 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devNewParms
   288 000006E9 7417                <1>     jz .mcNoFormat
   289                              <1> ;Reset and apply the different logic now :)
   290 000006EB 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devNewParms   ;Clear this bit
   291 000006F1 C605700B0000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   292 000006F8 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;If fixed, declare changed!
   293 000006FE 7559                <1>     jnz .mmcChange
   294                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   295 00000700 EB08                <1>     jmp short .mcRem
   296                              <1> .mcNoFormat:
   297 00000702 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   298 00000708 7545                <1>     jnz .mmcNoChange
   299                              <1> .mcRem:
   300 0000070A E826090000          <1>     call .checkDevType
   301 0000070F 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
   302 00000715 7420                <1>     jz .mmcNoChangeLine
   303 00000717 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   304                              <1> ;Now we do a BIOS changeline check. We rely on it for drives with changeline.
   305                              <1> ;Start by setting the lastDsk to unknown since this only makes sense for
   306                              <1> ; disks without changeline support
   307 0000071A C605470B0000FF      <1>     mov byte [.bLastDsk], -1
   308 00000721 66F745374000        <1>     test word [rbp + drvBlk.wDevFlgs], devChgd  ;Was the changed bit set?
   309 00000727 7530                <1>     jnz .mmcChange
   310 00000729 B800160000          <1>     mov eax, 1600h 
   311 0000072E E8110A0000          <1>     call .callI33h
   312                              <1> ;Use IBM BIOS style reporting of changeline!
   313 00000733 7224                <1>     jc .mmcChange   ;If an error occurs/dev swapped, report changed!
   314 00000735 EB18                <1>     jmp short .mmcNoChange
   315                              <1> .mmcNoChangeLine:
   316                              <1> ; If last accessed medchecked disk was this one and the time on this 
   317                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   318 00000737 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   319 0000073A 8605280B0000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   320 00000740 3805220B0000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   321 00000746 750C                <1>     jne .mmcUnsure
   322                              <1> ;Else, now we do the famous time check. 
   323 00000748 E8C6090000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   324 0000074D 7205                <1>     jc .mmcUnsure
   325                              <1> .mmcNoChange:
   326 0000074F C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   327                              <1>     return
    13                              <2> %%_ret:
    14 00000753 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .mmcUnsure:
   329 00000754 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   330                              <1>     return
    13                              <2> %%_ret:
    14 00000758 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> .mmcChange:
   332                              <1> ;Always store the volume label if we have a volume change.
   333 00000759 C605080B0000FF      <1>     mov byte [.bLastDsk], -1    ;Default to unknown disk if a change occured!
   334 00000760 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   335 00000764 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   336 00000768 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   337                              <1>     return
    13                              <2> %%_ret:
    14 0000076C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> 
   339                              <1> .buildBPB:        ;Function 2
   340                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   341                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   342                              <1> ; the table entry bpb which we will be returning.
   343 0000076D 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   344 00000773 7517                <1>     jnz .bbpbExit
   345                              <1> ;------------------------------------------------------
   346                              <1> ; Here for removable devices only!!
   347                              <1> ;------------------------------------------------------
   348 00000775 E839000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   349 0000077A E88A000000          <1>     call .updateBpb ;Fill the BPB entries in the drvBlk
   350 0000077F 0F82C1020000        <1>     jc .ioDoErr     ;Errors returned as if from block IO handler
   351 00000785 E895010000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   352 0000078A 7300                <1>     jnc .bbpbExit
   353                              <1> ;Here we will search the root directory for the volume label only!
   354                              <1> ;The FS string has been setup and volume ID is set to 0.
   355                              <1> ;
   356                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   357                              <1> ;
   358                              <1> .bbpbExit:
   359 0000078C 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the driver ptr
   360 00000793 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   361 00000797 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   362 0000079A 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   363 000007A1 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   364                              <1>     return
    13                              <2> %%_ret:
    14 000007A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   365                              <1> .bbpbError:
   366 000007A6 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   367 000007A8 0F8427FFFFFF        <1>     je .errorExit   
   368 000007AE E9A8FEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   369                              <1> 
   370                              <1> .resetIds:
   371                              <1> ;We reset the volume id string and label to the default for the 
   372                              <1> ; volume before the reset!
   373 000007B3 50                  <1>     push rax
   374 000007B4 53                  <1>     push rbx
   375 000007B5 51                  <1>     push rcx
   376 000007B6 56                  <1>     push rsi
   377 000007B7 57                  <1>     push rdi
   378                              <1> 
   379                              <1> ;1) Clear volume Id
   380 000007B8 C78580000000000000- <1>     mov dword [rbp + drvBlk.volId], 0
   380 000007C1 00                  <1>
   381                              <1> ;2) Reset the volume label to default
   382 000007C2 488D35950A0000      <1>     lea rsi, .defLbl
   383 000007C9 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   384 000007CD B90C000000          <1>     mov ecx, 12
   385 000007D2 F3A4                <1>     rep movsb
   386                              <1> ;3) Reset the FAT string
   387                              <1> ;Since fat32 indicator is in the middle, compare against it.
   388                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   389 000007D4 488D357A0A0000      <1>     lea rsi, .fat32Str
   390 000007DB 488D05610A0000      <1>     lea rax, .fat12Str
   391 000007E2 488D1D630A0000      <1>     lea rbx, .fat16Str
   392 000007E9 F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   393 000007ED 480F47F3            <1>     cmova rsi, rbx
   394 000007F1 480F42F0            <1>     cmovb rsi, rax
   395 000007F5 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   396 000007FC B909000000          <1>     mov ecx, 9
   397 00000801 F3A4                <1>     rep movsb
   398                              <1> 
   399 00000803 5F                  <1>     pop rdi
   400 00000804 5E                  <1>     pop rsi
   401 00000805 59                  <1>     pop rcx
   402 00000806 5B                  <1>     pop rbx
   403 00000807 58                  <1>     pop rax
   404                              <1>     return
    13                              <2> %%_ret:
    14 00000808 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> .updateBpb:
   407                              <1> ;------------------------------------------------------
   408                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   409                              <1> ; or failing, for the BPB indicated by the media byte.
   410                              <1> ;Never called on Fixed devs in normal operation.
   411                              <1> ;------------------------------------------------------
   412                              <1> ;Entered with: 
   413                              <1> ;   rbp -> drvBlk for this drive
   414                              <1> ;------------------------------------------------------
   415 00000809 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBPB
   416                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000080F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000811 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   417 00000812 E8B0010000          <1>     call .bbpbReadBS    ;Sets up rbx to point to internal disk buffer
   418                              <1>     retc    ;If an error occured, ZF setup according to block IO
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000817 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000819 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   419                              <1> ;Check we if we have a valid bootsector.
   420 0000081A 803B69              <1>     cmp byte [rbx + oemHeader.jump], 069h       ;Direct jump has no NOP
   421 0000081D 7410                <1>     je .ubpbCheckMedOk
   422 0000081F 803BE9              <1>     cmp byte [rbx + oemHeader.jump], 0E9h       ;Near jump has no NOP
   423 00000822 740B                <1>     je .ubpbCheckMedOk
   424 00000824 803BEB              <1>     cmp byte [rbx + oemHeader.jump], 0EBh       ;Short jump has a NOP
   425 00000827 7555                <1>     jne .ubpbOldDisk
   426 00000829 807B0290            <1>     cmp byte [rbx + oemHeader.jump + 2], 090h   ;NOP should be here
   427 0000082D 754F                <1>     jne .ubpbOldDisk
   428                              <1> .ubpbCheckMedOk:
   429 0000082F 8A4315              <1>     mov al, byte [rbx + oemHeader_size + bpb.media] ;Get medbyte from BPB
   430 00000832 E83A000000          <1>     call .checkMedByt   ;Check if it is 0F0h or geq 0F8h
   431 00000837 7545                <1>     jnz .ubpbOldDisk    ;If it is not, don't trust the BPB. Read the FAT sector
   432                              <1> ;Now we do the pre DOS 3.2 single sided check and kludge.
   433 00000839 A801                <1>     test al, 1  ;Double sided bit set on media byte?
   434 0000083B 0F85B2000000        <1>     jnz .ubpbNormalDisk ;If set, proceed as normal.
   435                              <1> ;Here if we have a "single-sided" formatted media.
   436                              <1> ;Check the OEM string. We filter out SCPDOS disks first.
   437 00000841 817B0353435044      <1>     cmp dword [rbx + oemHeader.oemString], "SCPD"
   438 00000848 750C                <1>     jne .ubpbNotSCP
   439 0000084A 66817B074F53        <1>     cmp word [rbx + oemHeader.oemString + 4], "OS"
   440 00000850 0F849D000000        <1>     je .ubpbNormalDisk
   441                              <1> .ubpbNotSCP:
   442                              <1> ;Now blind check version numbers for 16-bit DOS OEM strings.
   443                              <1> ;Search for DOS 2.0, 3.1 and 3.2. These versions have ID's such that 
   444                              <1> ; the version number starts at position 5.
   445                              <1> ;Usually, these BPBs have MSDOS or IBM<SPC><SPC> or OEM<SPC><SPC>
   446                              <1> ; as the OEM string. OEM stands for any three characters used by an
   447                              <1> ; OEM to identify disks they formatted, follows by "x.y" for a major
   448                              <1> ; and minor version number.
   449                              <1> ;Since we cannot enumerate all the OEM strings and can't guarantee
   450                              <1> ; that they have the bug, we will simply check the version number @
   451                              <1> ; position 5 in the string which seems to have been an unofficial 
   452                              <1> ; standard for placing the version number in the OEM string at the 
   453                              <1> ; time. 
   454                              <1> ;The dot in the check helps "guarantee" the number is a version number 
   455                              <1> ; we are possibly interested in.
   456 00000856 66817B08332E        <1>     cmp word [rbx + oemHeader.oemString + 5], "3."  ;DOS 3?
   457 0000085C 720A                <1>     jb .ubpbAdjustSPC  ;If below, must be "2." or "1." which has bug. Adjust.
   458 0000085E 807B0A32            <1>     cmp byte [rbx + oemHeader.oemString + 7], "2"   ;DOS 3.2?
   459 00000862 0F838B000000        <1>     jae .ubpbNormalDisk ;If above or equal 3.2, no need for adjustment.
   460                              <1> .ubpbAdjustSPC:
   461                              <1> ;Here we must be pre 16-bit DOS 3.2. Adjust the BPB in memory to have 
   462                              <1> ; a spc value of 1.
   463 00000868 C6430D01            <1>     mov byte [rbx + oemHeader_size + bpb.secPerClus], 1
   464 0000086C E982000000          <1>     jmp .ubpbNormalDisk ;Now proceed as a normal disk
   465                              <1> .checkMedByt:
   466                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   467                              <1> ; recognise as this is a sign of an unhealthy volume.
   468                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   469                              <1> ;Input: al = Media byte. 
   470                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   471 00000871 3CF0                <1>     cmp al, 0F0h
   472                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000873 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000875 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   473 00000876 3CF8                <1>     cmp al, 0F8h
   474                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000878 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000087A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   475 0000087B 38C0                <1>     cmp al, al  ;Set ZF if greater than F8h
   476                              <1>     return
    13                              <2> %%_ret:
    14 0000087D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> .ubpbOldDisk:
   478                              <1> ;We accept media bytes 0F9h-0FFh now. 0F8h and 0F0h make no sense here.
   479 0000087E E83E010000          <1>     call .bbpbReadFAT   ;Read the FAT sector now instead
   480                              <1>     retc    ;If an error occured, ZF setup according to block IO
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000883 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000885 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   481 00000886 0FB703              <1>     movzx eax, word [rbx]   ;Clear upper bytes
   482 00000889 25FF0F0000          <1>     and eax, 0FFFh
   483 0000088E 3DF90F0000          <1>     cmp eax, 0FF9h    ;Cannot accept less than 0F9h as we dont know how to handle
   484 00000893 7224                <1>     jb .ubpbErr
   485 00000895 7547                <1>     jne .ubpbOldest ;If not equal to 0F9h, it must be a "normal" disk.
   486                              <1> ;The only way to check which 0F9h we have, is to read the FAT and try to 
   487                              <1> ; find the second FAT, as they are at different "known" sectors. 
   488                              <1> ;First we read sector 4. If we find the 12 bytes 0FFF9h then use the first entry
   489                              <1> ; in the 0F9h table. 
   490                              <1> ;Else, read sector 8. If we find the 12 bytes 0FFF9h there, then use the 
   491                              <1> ; second entry in the 0F9h table.
   492 00000897 488D1D611A0000      <1>     lea rbx, .drvBpbTblF9
   493 0000089E E81C000000          <1>     call .upbpFindF9
   494                              <1>     retc                ;If the sector read failed, exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008A3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008A5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   495 000008A6 7452                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   496 000008A8 4881C319000000      <1>     add rbx, bpb_size   ;Else, goto next entry
   497 000008AF E80B000000          <1>     call .upbpFindF9    ;And try with this BPB
   498                              <1>     retc                ;If the sector read failed, exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008B4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008B6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   499 000008B7 7441                <1>     je .ubpbMoveBpb     ;If second FAT found, proceed with this bpb!
   500                              <1> ;Else fall through as we don't know what 0F9h means here.
   501                              <1> .ubpbErr:               
   502                              <1> ;Bad media bytes or BPB go here. Means the media is unknown.
   503 000008B9 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code (07h)
   504 000008BB 85C0                <1>     test eax, eax           ;Clear ZF so we return the right error code
   505 000008BD F9                  <1>     stc
   506                              <1>     return
    13                              <2> %%_ret:
    14 000008BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .upbpFindF9:
   508                              <1> ;Reads the supposed start of the second FAT sector to search for a FF9h 
   509                              <1> ;Call with rbx -> Table entry for this drive
   510                              <1> ;Returns:   CF=NC and ZF=ZE: Second boot sector found. Use the bpb in rbx.
   511                              <1> ;           CF=NC and ZF=NZ: Second boot sector not found. Goto next entry.
   512                              <1> ;           CF=CY: Disk read failed.
   513 000008BF 0FB74B0B            <1>     movzx ecx, word [rbx + bpb.FATsz16] ;Get number of fat sectors in a FAT
   514 000008C3 FFC1                <1>     inc ecx     ;Add one for the reserved sector to get sector !
   515 000008C5 53                  <1>     push rbx
   516 000008C6 E8FE000000          <1>     call .bbpbReadEp
   517 000008CB 0FB703              <1>     movzx eax, word [rbx]   ;Read the first word
   518 000008CE 5B                  <1>     pop rbx
   519                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008CF 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008D1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   520 000008D2 25FF0F0000          <1>     and eax, 0FFFh  ;Scan off the upper nybble to get low meaningful 12 bytes
   521 000008D7 3DF90F0000          <1>     cmp eax, 0FF9h  ;Is this FF9h as it should be?
   522 000008DC F8                  <1>     clc             ;Since eax can be a random word, force clear CF here.
   523                              <1>     return
    13                              <2> %%_ret:
    14 000008DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> .ubpbOldest:
   525                              <1> ;Here we build a pretend BPB in the sector buffer pointed to by rbx.
   526                              <1> ;This will then be used to build the internal data structure. 
   527 000008DE 488D1D84190000      <1>     lea rbx, .drvBpbTbl
   528 000008E5 2CFA                <1>     sub al, 0FAh    ;Get the offset into the bpb table
   529 000008E7 B919000000          <1>     mov ecx, bpb_size
   530 000008EC F7E1                <1>     mul ecx         ;Get byte offset into the bpb table
   531 000008EE 4801C3              <1>     add rbx, rax    ;Point rbx to this bpb in the table
   532 000008F1 EB07                <1>     jmp short .ubpbMoveBpb
   533                              <1> .ubpbNormalDisk:
   534 000008F3 4881C30B000000      <1>     add rbx, oemHeader_size ;Now point rbx to the BPB itself
   535                              <1> ;Update the drvBlk with info from the BPB.
   536                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   537                              <1> ; are ok before updating the msdTbl entry. 
   538                              <1> .ubpbMoveBpb:
   539 000008FA 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   540 000008FD 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   541 00000901 E852000000          <1>     call .getFATType    ;Fat type is given in edx
   542 00000906 72B1                <1>     jc .ubpbErr ;Only happens if crucial BPB fields are zero 
   543 00000908 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   544                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   545                              <1> ; if it is present
   546 0000090B B819000000          <1>     mov eax, bpb_size
   547 00000910 B929000000          <1>     mov ecx, bpb32_size - 12    ;BPB32 minus reserved count
   548 00000915 80FA20              <1>     cmp dl, bpbFat32
   549 00000918 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   550 0000091B F3A4                <1>     rep movsb        ;Now copy the BPB over!
   551 0000091D F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   552                              <1>     return
    13                              <2> %%_ret:
    14 0000091E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> .moveVolIds:
   555                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   556                              <1> ;Input: rsi -> End of the BPB in sector. rbp -> drvBlk
   557                              <1> ;Output: CF=CY: No volume label in sector found.
   558                              <1> ;        CF=NC: Volume Label in sector found and copied.
   559 0000091F 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   560 00000923 7531                <1>     jne .mviNoSig
   561                              <1> ;Else, now we copy the volume information from the extended bs info block
   562 00000925 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   563 00000928 898580000000        <1>     mov dword [rbp + drvBlk.volId], eax
   564 0000092E 4881C607000000      <1>     add rsi, extBs.volLab
   565 00000935 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   566 00000939 B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   567 0000093E F3A4                <1>     rep movsb   
   568                              <1>     ;rsi now points to the filSysType field in the extBs.
   569                              <1>     ;Move rdi to the filSysType field in the drvBlk.
   570 00000940 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   571 00000947 B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   572 0000094C F3A4                <1>     rep movsb   
   573                              <1> ;Clear the change bit for this DOS drive as we have here a good BPB
   574 0000094E 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devChgd
   575 00000954 F8                  <1>     clc
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000955 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> .mviNoSig:
   578 00000956 F9                  <1>     stc
   579                              <1>     return
    13                              <2> %%_ret:
    14 00000957 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> .getFATType:
   582                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   583 00000958 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   584 0000095B E362                <1>     jrcxz .bbpbGFTErr
   585 0000095D 89C8                <1>     mov eax, ecx
   586 0000095F FFC8                <1>     dec eax
   587 00000961 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   588 00000965 C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   589 00000968 01D0                <1>     add eax, edx
   590 0000096A 31D2                <1>     xor edx, edx
   591 0000096C F7F1                <1>     div ecx     ;eax = Root Dir sectors
   592 0000096E 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   593 0000096F 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   594 00000973 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   595 00000976 85C0                <1>     test eax, eax
   596 00000978 0F44C2              <1>     cmovz eax, edx
   597 0000097B 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   598 0000097F F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   599 00000981 85C0                <1>     test eax, eax   ;If either BPB_NumFATs or FATSz is 0, fail!
   600 00000983 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   601 00000984 7439                <1>     jz .bbpbGFTErr
   602 00000986 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   603 0000098A 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   604 0000098C 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   605 0000098E 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   606 00000992 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   607 00000995 85C0                <1>     test eax, eax
   608 00000997 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   609 0000099A 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   610 0000099C 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   611 000009A0 E31D                <1>     jrcxz .bbpbGFTErr
   612 000009A2 31D2                <1>     xor edx, edx
   613 000009A4 F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   614 000009A6 BA10000000          <1>     mov edx, bpbFat12
   615 000009AB 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   616 000009B0 720B                <1>     jb .bbpbGFTExit
   617 000009B2 D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   618 000009B4 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   619 000009B9 7302                <1>     jnb .bbpbGFTExit   ;If above or equal, its in FAT32
   620 000009BB D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   621                              <1> .bbpbGFTExit:
   622 000009BD F8                  <1>     clc
   623                              <1>     return
    13                              <2> %%_ret:
    14 000009BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   624                              <1> .bbpbGFTErr:
   625 000009BF F9                  <1>     stc
   626                              <1>     return
    13                              <2> %%_ret:
    14 000009C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   627                              <1> 
   628                              <1> .bbpbReadFAT:
   629                              <1> ;Reads the first FAT sector of media we are playing with.
   630 000009C1 31C9                <1>     xor ecx, ecx
   631 000009C3 FFC1                <1>     inc ecx         ;Read Sector 1...
   632 000009C5 EB02                <1>     jmp short .bbpbReadEp
   633                              <1> .bbpbReadBS:
   634                              <1> ;Reads the bootsector of media we are playing with.
   635 000009C7 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   636                              <1> .bbpbReadEp:
   637 000009C9 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]
   638 000009CC 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   639 000009D0 B800820000          <1>     mov eax, 8200h  ;LBA Read function
   640 000009D5 488D1D8D080000      <1>     lea rbx, .inBuffer  ;Use the in sector buffer. Ensure ownership.
   641                              <1> ;Do block IO w/o checking the validity of ecx as hidden sectors
   642                              <1> ; has already been setup correctly at this point.
   643 000009DC E993000000          <1>     jmp .blkIODirect     ;Does the Block IO, do tail call
   644                              <1> 
   645                              <1> .IOCTLRead:         ;Function 3, returns immediately
   646                              <1> .IOCTLWrite:        ;Function 12, returns done
   647                              <1>     return
    13                              <2> %%_ret:
    14 000009E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648                              <1> 
   649                              <1> .read:              ;Function 4
   650                              <1> ;Will read one sector at a time.
   651 000009E2 E8F1060000          <1>     call .ioSetVolLbl
   652 000009E7 E849060000          <1>     call .checkDevType
   653 000009EC 4889DF              <1>     mov rdi, rbx
   654 000009EF E86C000000          <1>     call .bioSetupRegs
   655                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000009F4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000009F6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   656                              <1> .msdr0:
   657 000009F7 B800820000          <1>     mov eax, 8200h  ;LBA Read function
   658 000009FC E87D000000          <1>     call .blkIO
   659 00000A01 7243                <1>     jc .ioDoErr
   660 00000A03 E849000000          <1>     call .ioAdv
   661 00000A08 75ED                <1>     jne .msdr0
   662                              <1>     return
    13                              <2> %%_ret:
    14 00000A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   663                              <1> 
   664                              <1> .write:             ;Function 8/9
   665                              <1> ;Will write and optionally verify one sector at a time.
   666 00000A0B E8C8060000          <1>     call .ioSetVolLbl
   667 00000A10 E820060000          <1>     call .checkDevType
   668 00000A15 4889DF              <1>     mov rdi, rbx
   669 00000A18 E843000000          <1>     call .bioSetupRegs
   670                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A1D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A1F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   671                              <1> .msdw0:
   672 00000A20 B800830000          <1>     mov eax, 8300h ;LBA Write Sectors
   673 00000A25 E854000000          <1>     call .blkIO
   674 00000A2A 721A                <1>     jc .ioDoErr
   675 00000A2C 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
   676 00000A30 750C                <1>     jne .msdw1
   677 00000A32 B800840000          <1>     mov eax, 8400h ;LBA Verify Sectors
   678 00000A37 E842000000          <1>     call .blkIO
   679 00000A3C 7208                <1>     jc .ioDoErr
   680                              <1> .msdw1:
   681 00000A3E E80E000000          <1>     call .ioAdv
   682 00000A43 75DB                <1>     jne .msdw0
   683                              <1>     return
    13                              <2> %%_ret:
    14 00000A45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   684                              <1> .ioDoErr:
   685                              <1> ;Come here if after an error in block IO handler.
   686                              <1> ;If ZF=ZE, disk error occured, the error needs translation so do it.
   687                              <1> ;Else just return the error code in al
   688 00000A46 0F8422FCFFFF        <1>     jz .ioError
   689 00000A4C E984FCFFFF          <1>     jmp .errorExit
   690                              <1> 
   691                              <1> .ioAdv:
   692                              <1> ;Advances the buffers on successful IO. 
   693                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
   694                              <1> ;Input: 
   695                              <1> ;       rbx -> Where we just IO'ed to
   696                              <1> ;       rcx = LBA sector we just xfred
   697                              <1> ;       dl  = BIOS drive number
   698                              <1> ;       rdi -> ioReqPkt
   699                              <1> ;       rbp -> drvBlk
   700                              <1> ;       esi = Number of sectors to xfr
   701                              <1> ;Output:
   702                              <1> ;       rbx -> Where to IO next sector to/from
   703                              <1> ;       rcx = LBA of next sector to xfer
   704                              <1> ;       dl  = BIOS drive number
   705                              <1> ;       rdi -> ioReqPkt
   706                              <1> ;       rbp -> drvBlk
   707                              <1> ;       esi = Sectors left to xfr.
   708                              <1> ;       ZF=ZE if esi is 0. Else ZF=NZ.
   709 00000A51 50                  <1>     push rax
   710 00000A52 48FFC1              <1>     inc rcx     ;Goto next sector
   711 00000A55 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
   712 00000A59 4801C3              <1>     add rbx, rax  ;Advance the buffer pointer by 1 sector
   713 00000A5C FFCE                <1>     dec esi     ;Once this hits 0, we stop the xfr
   714 00000A5E 58                  <1>     pop rax
   715                              <1>     return
    13                              <2> %%_ret:
    14 00000A5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> .bioSetupRegs:
   718                              <1> ;Sets up sector to read and buffer ptr for block IO call.
   719                              <1> ;If returns ZF=ZE then xfr 0 sectors, exit immediately
   720                              <1> ;Output: rdi -> ioReqPkt
   721                              <1> ;        rbp -> drvBlk
   722                              <1> ;        rbx -> Transfer buffer
   723                              <1> ;        rcx = Sector to transfer
   724                              <1> ;        esi = Number of sectors to transfer
   725                              <1> ;        ZF=ZE if esi is 0. Else ZF=NZ.
   726 00000A60 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
   727 00000A63 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   728 00000A67 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   729 00000A6B 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS drive number
   730 00000A6E 8B7716              <1>     mov esi, dword [rdi + ioReqPkt.tfrlen]  ;Get the tfrlen into esi
   731 00000A71 85F6                <1>     test esi, esi                           ;If this is 0, avoid IO
   732                              <1>     return
    13                              <2> %%_ret:
    14 00000A73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   733                              <1> 
   734                              <1> .blkIODirect:    ;Does block IO without sanity checking the sector number
   735                              <1> ;All registers as below!
   736 00000A74 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   737 00000A7A 757A                <1>     jnz .bioufmted
   738 00000A7C EB0D                <1>     jmp short .biocmn
   739                              <1> .blkIO:  ;Does block IO
   740                              <1> ;Sector count handled by caller.
   741                              <1> ;All registers marked as input registers must be preserved across the call
   742                              <1> ; except ah
   743                              <1> ;Input: ah = BIOS function number
   744                              <1> ;       rdi -> ioReqPkt             (Normal Read/Write only)
   745                              <1> ;       rbp -> drvBlk
   746                              <1> ;       rbx -> Transfer buffer
   747                              <1> ;       rcx = LBA sector to transfer
   748                              <1> ;       dl  = BIOS drive number
   749                              <1> ;       esi = Sectors left to xfr!  (Normal Read/Write only)
   750                              <1> ;Output: CF=NC: Sector xferred.
   751                              <1> ;        CF=CY: An error ocured. 
   752                              <1> ;           ZF=NZ: Non-disk error, return the error code in eax
   753                              <1> ;           ZF=ZY: Disk error, xlat error code
   754 00000A7E 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   755 00000A84 7570                <1>     jnz .bioufmted
   756 00000A86 E843000000          <1>     call .bioSanity ;Sanity check ecx here
   757                              <1> .biocmn:
   758 00000A8B 56                  <1>     push rsi    ;Save sector count
   759 00000A8C BE05000000          <1>     mov esi, 5  ;Retry counter five times
   760                              <1> .biolp:
   761 00000A91 B001                <1>     mov al, 01h ;Do one sector at a time 
   762 00000A93 E8AC060000          <1>     call .callI33h
   763 00000A98 7221                <1>     jc .bioError
   764 00000A9A 3C01                <1>     cmp al, 1   ;Did we read one sector?
   765 00000A9C 751D                <1>     jne .bioError
   766 00000A9E 5E                  <1>     pop rsi ;Rebalance stack
   767                              <1> .bioExit:
   768 00000A9F 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   769 00000AA2 8805C0070000        <1>     mov byte [.bLastDsk], al    ;Last DOS disk accessed
   770 00000AA8 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   771                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AAE 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AB0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   772                              <1> ;Ensure we set the time of the operation w/o modifying the registers.
   773                              <1> ;Routine trashes ecx and edx so save!
   774 00000AB1 51                  <1>     push rcx
   775 00000AB2 52                  <1>     push rdx
   776 00000AB3 E84B060000          <1>     call .setTime   ;Set the current time and clear state for successful IO
   777 00000AB8 5A                  <1>     pop rdx
   778 00000AB9 59                  <1>     pop rcx
   779                              <1>     return
    13                              <2> %%_ret:
    14 00000ABA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   780                              <1> .bioError:
   781                              <1>     ;xor eax, eax    ;Reset disk: CRASHES BOCHS
   782 00000ABB 52                  <1>     push rdx    ;Preserve drive number. All other regs preserved
   783 00000ABC B800010000          <1>     mov eax, 0100h
   784 00000AC1 E87E060000          <1>     call .callI33h ;Read status of last operation
   785 00000AC6 5A                  <1>     pop rdx     ;Get back drive number.
   786 00000AC7 FFCE                <1>     dec esi
   787 00000AC9 75C6                <1>     jnz .biolp
   788 00000ACB 5E                  <1>     pop rsi ;Pop the sector count off the stack
   789                              <1>     ;ZF=ZE set now as esi counted down
   790 00000ACC F9                  <1>     stc
   791                              <1>     return
    13                              <2> %%_ret:
    14 00000ACD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .bioSanity:
   793                              <1> ;Input: ecx = Sector we will transact on. rbp -> DrvBlk
   794                              <1> ;Output: CF=NC, sector ok to xact on
   795                              <1> ;        CF=CY, doesnt return, fails the call
   796 00000ACE A9FF000000          <1>     test eax, 0FFh  ;If the bottom byte is set, it is a IOCTL call.
   797                              <1>     retnz           ;BIOS checks these for us as IOCTL bypasses partitions.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AD3 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AD5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   798 00000AD6 50                  <1>     push rax
   799 00000AD7 53                  <1>     push rbx
   800 00000AD8 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   801 00000ADC 8B5D1F              <1>     mov ebx, dword [rbp + drvBlk.dTotSec32] 
   802 00000ADF 85C0                <1>     test eax, eax
   803 00000AE1 0F44C3              <1>     cmovz eax, ebx  ;The 32 bit count is valid only if 16 bit count is 0
   804 00000AE4 39C1                <1>     cmp ecx, eax    ;This will set CF iff ecx < eax. If eax >= ecx CF=NC.
   805 00000AE6 5B                  <1>     pop rbx
   806 00000AE7 58                  <1>     pop rax
   807 00000AE8 F5                  <1>     cmc             ;Flip CF from CY to NC if ok and NC to CY if not
   808                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AE9 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AEB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   809                              <1> ;Now pops the return from the sanity call and falls.
   810 00000AEC 58                  <1>     pop rax ;Return from block IO with error code in eax below
   811 00000AED B808000000          <1>     mov eax, drvSecNotFnd
   812                              <1> .bioNoDiskErr:
   813 00000AF2 85C0                <1>     test eax, eax   ;Clear ZF
   814 00000AF4 F9                  <1>     stc
   815                              <1>     return
    13                              <2> %%_ret:
    14 00000AF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   816                              <1> .bioufmted:
   817 00000AF6 B807000000          <1>     mov eax, drvBadMed
   818 00000AFB EBF5                <1>     jmp short .bioNoDiskErr
   819                              <1> 
   820                              <1> .devOpen:         ;Function 13
   821 00000AFD 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
   822                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B03 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B05 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   823 00000B06 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
   824                              <1>     return
    13                              <2> %%_ret:
    14 00000B0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> .devClose:        ;Function 14
   826 00000B0B 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
   827                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B11 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B13 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   828 00000B14 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
   829                              <1>     return
    13                              <2> %%_ret:
    14 00000B18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   830                              <1> .remMed:  ;Function 15
   831                              <1> ;Sets busy bit if fixed drive!
   832 00000B19 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;Is it fixed?
   833                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B1F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B21 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   834 00000B22 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
   835                              <1>     return
    13                              <2> %%_ret:
    14 00000B28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> 
   837                              <1> .IOCTL:    ;Function 19
   838                              <1> ;Implements LBA versions of the CHS functions by setting the high bit
   839                              <1> ; in the minor code.
   840 00000B29 B803000000          <1>     mov eax, drvBadCmd
   841 00000B2E 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]  ;Get CH and CL in one read
   842 00000B32 80FD08              <1>     cmp ch, 08h     ;Disk Drive Major Code?
   843 00000B35 0F859AFBFFFF        <1>     jne .errorExit  ;If not, exit bad
   844                              <1> ;Disk Drive IOCTL here
   845 00000B3B F6C118              <1>     test cl, 18h    ;If either bits 3 or 4 set, fail the call
   846 00000B3E 0F8591FBFFFF        <1>     jnz .errorExit
   847 00000B44 F6C160              <1>     test cl, 60h    ;One of these two bits MUST be set (bits 5 and 6)
   848 00000B47 0F8488FBFFFF        <1>     jz .errorExit
   849 00000B4D 0FB6D1              <1>     movzx edx, cl
   850 00000B50 81E207FFFFFF        <1>     and edx, ~0F8h   ;Clear bits 3-7 to get table offset
   851 00000B56 488D3D21000000      <1>     lea rdi, .ioctlTbl
   852 00000B5D 57                  <1>     push rdi
   853 00000B5E 488D3C97            <1>     lea rdi, qword [rdi + 4*rdx]
   854 00000B62 F6C120              <1>     test cl, 20h
   855 00000B65 7407                <1>     jz .ioctlNoRead
   856 00000B67 4881C702000000      <1>     add rdi, 2  ;If we are doing the read function, goto the next instruction
   857                              <1> .ioctlNoRead:
   858 00000B6E 0FB717              <1>     movzx edx, word [rdi]   ;Read the word offset
   859 00000B71 5F                  <1>     pop rdi
   860 00000B72 4801D7              <1>     add rdi, rdx    ;Add the table base
   861 00000B75 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]
   862 00000B79 F6C180              <1>     test cl, 80h    ;Now set the flag for if CHS (ZF=ZE) or LBA (ZF=NZ)
   863 00000B7C FFE7                <1>     jmp rdi ;And enter the function with the ptr to the ctrl block in rdx
   864                              <1> .ioctlTbl:
   865                              <1> ;Note: For the CHS IO functions, we translate the CHS requests into LBA
   866                              <1> ; requests and then recycle the LBA request code. We do this using the 
   867                              <1> ; track table. If the sector size of any table entry is neq the 
   868                              <1> ; device sector size, we fail the request. This is because these requests
   869                              <1> ; work on a track by track basis.
   870 00000B7E 3E00                <1>     dw .ioSetDevParams - .ioctlTbl  ;CL = 40h or CL = C0h, Write IOCTL
   871 00000B80 4401                <1>     dw .ioGetDevParams - .ioctlTbl  ;CL = 60h or CL = E0h, Read IOCTL
   872 00000B82 3202                <1>     dw .ioWrite - .ioctlTbl         ;CL = 41h or CL = C1h, Write IOCTL
   873 00000B84 5C02                <1>     dw .ioRead - .ioctlTbl          ;CL = 61h or CL = E1h, Read IOCTL
   874 00000B86 6902                <1>     dw .ioFormat - .ioctlTbl        ;CL = 42h or CL = C2h, Write IOCTL
   875 00000B88 9102                <1>     dw .ioVerify - .ioctlTbl        ;CL = 62h or CL = E2h, Read IOCTL
   876 00000B8A 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 43h or CL = C3h, error
   877 00000B8C 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 63h or CL = E3h, error
   878 00000B8E 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 44h or CL = C4h, error
   879 00000B90 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 64h or CL = E4h, error
   880 00000B92 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 45h or CL = C5h, error
   881 00000B94 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 65h or CL = E5h, error
   882 00000B96 2A03                <1>     dw .ioSetIds - .ioctlTbl        ;CL = 46h or CL = C6h, Set vol Ids
   883 00000B98 2A03                <1>     dw .ioGetIds - .ioctlTbl        ;CL = 66h or CL = E6h, Get vol Ids
   884 00000B9A 2F03                <1>     dw .ioSetAccessFlag - .ioctlTbl ;CL = 47h or CL = C7h, Write IOCTL
   885 00000B9C 4303                <1>     dw .ioGetAccessFlag - .ioctlTbl ;CL = 67h or CL = E7h, Read IOCTL
   886                              <1> .iobadCmd:
   887 00000B9E B803000000          <1>     mov eax, drvBadCmd
   888 00000BA3 E92DFBFFFF          <1>     jmp .errorExit
   889                              <1> .iobadCmdLen:
   890 00000BA8 B805000000          <1>     mov eax, drvBadDrvReq
   891 00000BAD E923FBFFFF          <1>     jmp .errorExit
   892                              <1> .iobadMed:
   893 00000BB2 B807000000          <1>     mov eax, drvBadMed
   894 00000BB7 E919FBFFFF          <1>     jmp .errorExit
   895                              <1> ;---------------------------------------------------------------------------
   896                              <1> ;               Set Device parameters in CHS and LBA here
   897                              <1> ;---------------------------------------------------------------------------
   898                              <1> .ioSetDevParams:
   899                              <1>     ;breakpoint
   900 00000BBC 9C                  <1>     pushfq
   901                              <1> ;If the parameters are swapped, set the flags and indicate the media 
   902                              <1> ; was swapped (even if not).
   903 00000BBD 66814D374001        <1>     or word [rbp + drvBlk.wDevFlgs], devNewParms | devChgd
   904 00000BC3 9D                  <1>     popfq
   905 00000BC4 0F85C9000000        <1>     jnz .lbaSetParams
   906                              <1> ;Here we set CHS params. 
   907                              <1> ;Before we trust the table, we check that indeed
   908                              <1> ; no sector index is past the max sector count and that if the caller
   909                              <1> ; claimed that all the sectors are of the same size, they really are.    
   910 00000BCA 488D723C            <1>     lea rsi, qword [rdx + chsParamsBlock.TrackLayout]
   911 00000BCE 4889F7              <1>     mov rdi, rsi    ;Save the pointer in rdi
   912 00000BD1 66AD                <1>     lodsw           ;Get the lead word and adv rsi by 2
   913 00000BD3 0FB7C8              <1>     movzx ecx, ax   ;Get the lead table entry into ax
   914 00000BD6 81F93F000000        <1>     cmp ecx, maxTrackTblSz
   915 00000BDC 7460                <1>     jz .iosdpNoTrack   ;Don't touch the tracks bit in this case!
   916 00000BDE 0F87EFFAFFFF        <1>     ja .genErrExit
   917 00000BE4 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Check the first entry is ok!
   918 00000BE9 0F87E4FAFFFF        <1>     ja .genErrExit
   919                              <1> .iosdpTblCheckLp:
   920 00000BEF AD                  <1>     lodsd   ;Go to next entry
   921 00000BF0 FFC9                <1>     dec ecx ;And remove from the count
   922 00000BF2 7420                <1>     jz .iosdpTblCheckEnd
   923 00000BF4 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Ensure no entry above the max entry value
   924 00000BF9 0F87D4FAFFFF        <1>     ja .genErrExit
   925 00000BFF F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec ;All same size?
   926 00000C02 74EB                <1>     jz .iosdpTblCheckLp ;If not, skip this check (always check 1=<i<=n)
   927 00000C04 668B4602            <1>     mov ax, word [rsi + 2]  ;Else get sector size
   928 00000C08 663946FE            <1>     cmp word [rsi - 2], ax  ;And compare with the previous sector size
   929 00000C0C 0F85C1FAFFFF        <1>     jne .genErrExit
   930 00000C12 EBDB                <1>     jmp short .iosdpTblCheckLp
   931                              <1> .iosdpTblCheckEnd:
   932                              <1> ;Now we set the sector size bit if all tracks same size check was passed.
   933                              <1> ;If all sectors have the same size but the caller didn't specify this
   934                              <1> ; bit, we also don't specify this bit.
   935 00000C14 66816537F7FF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSameSec    ;Clear bit first
   936 00000C1A F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec
   937 00000C1D 7406                <1>     jz .iosdpNoSetTrackBit
   938                              <1> ;The only way we got here if the bit was set is that the check passed.
   939                              <1> ; Set the bit in the device block.
   940 00000C1F 66814D370800        <1>     or word [rbp + drvBlk.wDevFlgs], devSameSec
   941                              <1> .iosdpNoSetTrackBit:
   942                              <1> ;Now we copy the table directly as sector numbers may be purposefully
   943                              <1> ; interleaved. NO SORTING!!
   944 00000C25 4889FE              <1>     mov rsi, rdi    ;Get back the track layout pointer 
   945 00000C28 488D3DA3020000      <1>     lea rdi, .ioTrackTbl    ;We overwrite our internal track table
   946 00000C2F 66AD                <1>     lodsw   ;Get the table length
   947 00000C31 0FB7C8              <1>     movzx ecx, ax   ;This many entries
   948 00000C34 66AB                <1>     stosw
   949 00000C36 F3A5                <1>     rep movsd       ;Move the dword entries over
   950 00000C38 F60202              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncTrk    ;Just tracks?
   951                              <1>     retnz   ;Return if bit set!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C3B 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C3D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   952                              <1> .iosdpNoTrack:
   953                              <1> ;Now we update the rest of the disk metadata.
   954 00000C3E 488D7207            <1>     lea rsi, qword [rdx + chsParamsBlock.deviceBPB]
   955 00000C42 56                  <1>     push rsi
   956 00000C43 B935000000          <1>     mov ecx, bpb32_size
   957 00000C48 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sDfltBPB]
   958 00000C4C F3A4                <1>     rep movsb   ;Move the default BPB over
   959 00000C4E 5B                  <1>     pop rbx
   960 00000C4F E8A6FCFFFF          <1>     call .ubpbMoveBpb   ;Now set the real BPB
   961 00000C54 E8C6FCFFFF          <1>     call .moveVolIds    ;And move the volume ids if possible
   962                              <1> ;Now setup the lock BPB bit
   963 00000C59 66816537FBFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devLockBPB
   964 00000C5F F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
   965 00000C62 7406                <1>     jz .iosdpNoSetBPBDflt
   966 00000C64 66814D370400        <1>     or word [rbp + drvBlk.wDevFlgs], devLockBPB
   967                              <1> .iosdpNoSetBPBDflt:
   968                              <1> ;Now copy the rest of the bytes and return
   969 00000C6A 0FB74202            <1>     movzx eax, word [rdx + chsParamsBlock.wDevFlgs]
   970 00000C6E 2503000000          <1>     and eax, devFixed | devChgLine  ;Keep only these two bits
   971 00000C73 66816537FCFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~(devFixed | devChgLine)   ;Clear em
   972 00000C79 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax  ;Add those two bits as set
   973 00000C7D 0FB64201            <1>     movzx eax, byte [rdx + chsParamsBlock.bDevType]
   974 00000C81 884536              <1>     mov byte [rbp + drvBlk.bDevType], al
   975 00000C84 66814D378000        <1>     or word [rbp + drvBlk.wDevFlgs], devSetDASD 
   976 00000C8A 0FB74204            <1>     movzx eax, word [rdx + chsParamsBlock.wNumCyl]
   977 00000C8E 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   978                              <1>     ;movzx eax, byte [rdx + chsParamsBlock.bMedTyp]
   979                              <1>     ;mov byte [rbp + drvBlk.bMedTyp], al
   980                              <1>     return
    13                              <2> %%_ret:
    14 00000C92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   981                              <1> 
   982                              <1> .lbaSetParams:
   983                              <1> ;This only sets the sector size and number of sectors in drvBlk.bpb.
   984                              <1>     ;Set start sector of partition
   985 00000C93 8B4A18              <1>     mov ecx, dword [rdx + lbaParamsBlock.qStartSector]
   986 00000C96 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   987                              <1>     ;Set sector size
   988 00000C99 8B4A08              <1>     mov ecx, dword [rdx + lbaParamsBlock.qSectorSize]
   989 00000C9C 66894D0A            <1>     mov word [rbp + drvBlk.wBpS], cx
   990                              <1>     ;Set same device flags as in CHS.
   991 00000CA0 0FB64A02            <1>     movzx ecx, byte [rdx + lbaParamsBlock.wDevFlgs]
   992 00000CA4 6681E10300          <1>     and cx, devFixed | devChgLine
   993 00000CA9 66094D37            <1>     or word [rbp + drvBlk.wDevFlgs], cx
   994                              <1>     ;Set sector information.
   995 00000CAD 8B4A10              <1>     mov ecx, dword [rdx + lbaParamsBlock.qNumSectors]
   996 00000CB0 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   997 00000CB6 7605                <1>     jna .lbaSetSmall
   998 00000CB8 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   999 00000CBB 31C9                <1>     xor ecx, ecx
  1000                              <1> .lbaSetSmall:
  1001 00000CBD 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
  1002                              <1>     return
    13                              <2> %%_ret:
    14 00000CC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1003                              <1> ;---------------------------------------------------------------------------
  1004                              <1> ;               Get Device parameters in CHS and LBA here
  1005                              <1> ;---------------------------------------------------------------------------
  1006                              <1> .ioGetDevParams:
  1007 00000CC2 7559                <1>     jnz .lbaGetParams
  1008                              <1> ;Here we get CHS params. Doesn't do a build BPB call to be easy.
  1009 00000CC4 488D753B            <1>     lea rsi, qword [rbp + drvBlk.sDfltBPB]
  1010 00000CC8 F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], 1  ;Bit 0?
  1011 00000CCB 7517                <1>     jnz .iogdpDflt
  1012 00000CCD E837FBFFFF          <1>     call .updateBpb ;Gets the BPB to the internal disk buffer
  1013 00000CD2 0F826EFDFFFF        <1>     jc .ioDoErr ;Errors returned as if from block IO handler
  1014 00000CD8 E842FCFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1015 00000CDD 488D3590050000      <1>     lea rsi, qword [.inBuffer + 11]
  1016                              <1> .iogdpDflt:
  1017                              <1>     ;breakpoint
  1018 00000CE4 488D7A07            <1>     lea rdi, qword [rdx + chsParamsBlock.deviceBPB]
  1019 00000CE8 B935000000          <1>     mov ecx, bpb32_size
  1020 00000CED F3A4                <1>     rep movsb
  1021 00000CEF B805000000          <1>     mov eax, typeHard
  1022 00000CF4 B907000000          <1>     mov ecx, typeGenRem
  1023 00000CF9 F6453701            <1>     test byte [rbp + drvBlk.wDevFlgs], devFixed
  1024 00000CFD 0F44C1              <1>     cmovz eax, ecx  ;eax is set to 7 if the dev is removable
  1025 00000D00 884201              <1>     mov byte [rdx + chsParamsBlock.bDevType], al
  1026 00000D03 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1027 00000D07 2503000000          <1>     and eax, devFixed | devChgLine
  1028 00000D0C 66894202            <1>     mov word [rdx + chsParamsBlock.wDevFlgs], ax
  1029 00000D10 C6420600            <1>     mov byte [rdx + chsParamsBlock.bMedTyp], 0
  1030 00000D14 0FB74539            <1>     movzx eax, word [rbp + drvBlk.wNumCyl]
  1031 00000D18 66894204            <1>     mov word [rdx + chsParamsBlock.wNumCyl], ax
  1032                              <1>     return
    13                              <2> %%_ret:
    14 00000D1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1033                              <1> 
  1034                              <1> .lbaGetParams:
  1035                              <1> ;Gets more "updated" information on partitions.
  1036                              <1> ;The data returned will always be the partition maximum! For remdevs
  1037                              <1> ; this means up to the whole media size and for fixed disks we are still 
  1038                              <1> ; restricted to the partition size.
  1039 00000D1D B805000000          <1>     mov eax, drvBadDrvReq
  1040 00000D22 803A20              <1>     cmp byte [rdx + lbaParamsBlock.bSize], lbaParamsBlock_size
  1041 00000D25 0F85AAF9FFFF        <1>     jne .errorExit
  1042 00000D2B 4889D7              <1>     mov rdi, rdx    ;Store the params block ptr in rdi
  1043 00000D2E 807F0102            <1>     cmp byte [rdi + lbaParamsBlock.bSpecFuncs], 2   ;Check get phys call.
  1044 00000D32 0F879DF9FFFF        <1>     ja .errorExit   ;If above 2, error with bad request!
  1045 00000D38 741F                <1>     je .lgpbpbGetPhys
  1046 00000D3A F6470101            <1>     test byte [rdi + lbaParamsBlock.bSpecFuncs], 1  ;Check if we update BPB.
  1047 00000D3E 7533                <1>     jnz .lgpbpbok
  1048 00000D40 57                  <1>     push rdi    ;Push the param block onto the stack
  1049 00000D41 E8C3FAFFFF          <1>     call .updateBpb
  1050 00000D46 7208                <1>     jc .lgpbpbnotok ;Even if just bad BPB, keep changed bit on!
  1051 00000D48 E8D2FBFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1052 00000D4D 5F                  <1>     pop rdi     ;Pop param block
  1053 00000D4E EB23                <1>     jmp short .lgpbpbok
  1054                              <1> .lgpbpbnotok:
  1055                              <1> ;If no valid BPB found, and the device removable, return BIOS params for the 
  1056                              <1> ; whole device. We never come here for fixed disks as updateBpb always passes.
  1057 00000D50 5F                  <1>     pop rdi
  1058 00000D51 3C07                <1>     cmp al, drvBadMed   ;If remdev has bad media, get bios attribs.
  1059 00000D53 0F857CF9FFFF        <1>     jne .errorExit
  1060                              <1> ;We only fall here if on an unformatted removable disk.
  1061                              <1> ;Unformatted means with an unrecognisable BPB.
  1062                              <1> .lgpbpbGetPhys:
  1063 00000D59 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
  1064 00000D5D B800880000          <1>     mov eax, 8800h  ;Read LBA Device Parameters
  1065 00000D62 CD33                <1>     int 33h
  1066 00000D64 0F82F1F8FFFF        <1>     jc .errorXlat
  1067 00000D6A 48FFC1              <1>     inc rcx         ;Turn into an absolute count of sectors
  1068 00000D6D 31D2                <1>     xor edx, edx    ;0 Hidden sectors on remdevs/unformatted media
  1069                              <1> ;eax = 0 since either not formatted or values may not be ok for CHS calls
  1070 00000D6F 89D0                <1>     mov eax, edx     
  1071 00000D71 EB1F                <1>     jmp short .lgpStor
  1072                              <1> .lgpbpbok:
  1073 00000D73 31C0                <1>     xor eax, eax
  1074 00000D75 89C3                <1>     mov ebx, eax
  1075 00000D77 FFC3                <1>     inc ebx
  1076                              <1> ;Here eax=0 and ebx=1.
  1077 00000D79 F6450FFF            <1>     test byte [rbp + drvBlk.bNumFAT], -1    ;If 0 FATs, the FAT is invalid!
  1078 00000D7D 0F45C3              <1>     cmovnz eax, ebx                         ;Set if we have a FAT
  1079 00000D80 8B551B              <1>     mov edx, dword [rbp + drvBlk.dHiddSec]
  1080 00000D83 0FB75D0A            <1>     movzx ebx, word [rbp + drvBlk.wBpS]
  1081 00000D87 0FB74D12            <1>     movzx ecx, word [rbp + drvBlk.wTotSec16]
  1082 00000D8B 85C9                <1>     test ecx, ecx
  1083 00000D8D 7503                <1>     jnz .lgpStor
  1084 00000D8F 8B4D1F              <1>     mov ecx, dword [rbp + drvBlk.dTotSec32]
  1085                              <1> .lgpStor:
  1086                              <1> ;Enter with:
  1087                              <1> ;ax = 0 if unformatted, 1 if any FAT type (means can call CHS function)
  1088                              <1> ;rbx = Sector size in bytes
  1089                              <1> ;rcx = Last LBA block address + 1 (Count of sectors)
  1090                              <1> ;rdx = Hidden sectors
  1091 00000D92 66894704            <1>     mov word [rdi + lbaParamsBlock.wFSType], ax
  1092 00000D96 48895F08            <1>     mov qword [rdi + lbaParamsBlock.qSectorSize], rbx
  1093 00000D9A 48894F10            <1>     mov qword [rdi + lbaParamsBlock.qNumSectors], rcx
  1094 00000D9E 48895718            <1>     mov qword [rdi + lbaParamsBlock.qStartSector], rdx
  1095 00000DA2 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1096 00000DA6 2503000000          <1>     and eax, devFixed | devChgLine
  1097 00000DAB 66894702            <1>     mov word [rdi + lbaParamsBlock.wDevFlgs], ax
  1098                              <1>     return 
    13                              <2> %%_ret:
    14 00000DAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1099                              <1> ;---------------------------------------------------------------------------
  1100                              <1> ;                    CHS IO requests are structured here
  1101                              <1> ;---------------------------------------------------------------------------
  1102                              <1> .ioWrite:
  1103 00000DB0 0F85BB000000        <1>     jnz .lbaWrite
  1104                              <1> ;Here for CHS write tracks. 
  1105 00000DB6 BB00830000          <1>     mov ebx, 8300h  ;Write sectors
  1106                              <1> .iochsRW:
  1107 00000DBB E86F000000          <1>     call .ioChsToLba
  1108 00000DC0 E853000000          <1>     call .ioChsSanity
  1109 00000DC5 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector]
  1110 00000DC9 01C1                <1>     add ecx, eax    ;Add the zero based sector number to start of "track"
  1111 00000DCB 0FB77707            <1>     movzx esi, word [rdi + chsIOBlock.wNumSectors]  ;How many sectors to IO on
  1112                              <1> .iochsCmn:
  1113 00000DCF 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1114 00000DD1 488B5F09            <1>     mov rbx, qword [rdi + chsIOBlock.pXferBuffer]   ;And get buffer ptr in rbx
  1115 00000DD5 E9B6000000          <1>     jmp .ioEp
  1116                              <1> .ioRead:
  1117 00000DDA 0F858A000000        <1>     jnz .lbaRead
  1118                              <1> ;Here for CHS read tracks.
  1119 00000DE0 BB00820000          <1>     mov ebx, 8200h  ;Read sectors
  1120 00000DE5 EBD4                <1>     jmp short .iochsRW
  1121                              <1> .ioFormat:
  1122                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1123                              <1> ;
  1124                              <1> ;We start by setting DASD parameters but for now we do nothing so just
  1125                              <1> ; clear the flag.
  1126 00000DE7 9C                  <1>     pushfq
  1127 00000DE8 668165377FFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSetDASD
  1128 00000DEE 9D                  <1>     popfq
  1129                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1130 00000DEF 756F                <1>     jnz .lbaFmt
  1131                              <1> ;Here for CHS format track.
  1132 00000DF1 BB00850000          <1>     mov ebx, 8500h  ;Format sectors
  1133 00000DF6 F60201              <1>     test byte [rdx + chsFormatBlock.bSpecFuncs], 1  ;If this bit clear do format
  1134 00000DF9 7404                <1>     jz .iochsFmtCmn
  1135                              <1> ;Else we should respond if the sector table is valid. Since our BIOS is crap
  1136                              <1> ; we always return OK and let the format call fail. This would possibly be
  1137                              <1> ; dangerous but its not since the BIOS CHS emulation is very meh.
  1138 00000DFB C60200              <1>     mov byte [rdx + chsFormatBlock.bSpecFuncs], 0   ;All ok!
  1139                              <1>     return
    13                              <2> %%_ret:
    14 00000DFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1140                              <1> .iochsFmtCmn:
  1141 00000DFF E82B000000          <1>     call .ioChsToLba    ;Get the LBA of the first sector of the track in ecx
  1142 00000E04 0FB77517            <1>     movzx esi, word [rbp + drvBlk.wSecPerTrk]   ;Fmt/Verify this many sectors
  1143 00000E08 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1144 00000E0A E981000000          <1>     jmp .ioEp
  1145                              <1> .ioVerify:
  1146 00000E0F 7548                <1>     jnz .lbaVerify
  1147                              <1> ;Here for CHS verify track.
  1148 00000E11 BB00840000          <1>     mov ebx, 8400h
  1149 00000E16 EBE7                <1>     jmp short .iochsFmtCmn
  1150                              <1> 
  1151                              <1> .ioChsSanity:
  1152                              <1> ;Checks that the read/write will be on one track and makes sense.
  1153                              <1> ;Input: ebx = BIOS function to call. Preserved.
  1154                              <1> ;       ecx = LBA of start sector.
  1155                              <1> ;       rdi -> chsIOBlock
  1156                              <1> ;       rbp -> Drive block ptr
  1157 00000E18 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector] ;Zero based
  1158 00000E1C FFC0                <1>     inc eax         ;Make it 1 based for the comparison
  1159 00000E1E 66034707            <1>     add ax, word [rdi + chsIOBlock.wNumSectors]
  1160 00000E22 663B4517            <1>     cmp ax, word [rbp + drvBlk.wSecPerTrk]  ;Does this surpass num sect/trck?
  1161                              <1>     retna
    77                              <2> cret na
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000E26 7701                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000E28 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1162                              <1> .ioctlerr:
  1163 00000E29 5B                  <1>     pop rbx ;Pop the ret addr off the stack and tail to the bad media
  1164 00000E2A E983FDFFFF          <1>     jmp .iobadMed
  1165                              <1> .ioChsToLba:
  1166                              <1> ;Gets the first sector of the track selected by this call.
  1167                              <1> ;Works with the values set in the bpb of drvBlk which isn't ideal...
  1168                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
  1169                              <1> ;Input: ebx = BIOS Function to call. Preserved.
  1170                              <1> ;Output: ecx = eax = LBA address for the first sector of the track
  1171                              <1> ;        rdi -> chsFormatBlock or IOBlock
  1172 00000E2F 4889D7              <1>     mov rdi, rdx
  1173 00000E32 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
  1174 00000E36 0FB74F03            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartCyl]
  1175 00000E3A 663B4D39            <1>     cmp cx, word [rbp + drvBlk.wNumCyl]
  1176 00000E3E 73E9                <1>     jae .ioctlerr
  1177 00000E40 FFC1                <1>     inc ecx ;Inc as we get it as a zero based number
  1178 00000E42 F7E1                <1>     mul ecx
  1179 00000E44 0FB74F01            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartHead]
  1180 00000E48 663B4D19            <1>     cmp cx, word [rbp + drvBlk.wNumHeads]
  1181 00000E4C 73DB                <1>     jae .ioctlerr 
  1182 00000E4E 01C8                <1>     add eax, ecx
  1183 00000E50 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
  1184 00000E54 F7E1                <1>     mul ecx
  1185 00000E56 89C1                <1>     mov ecx, eax
  1186                              <1>     return
    13                              <2> %%_ret:
    14 00000E58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1187                              <1> ;---------------------------------------------------------------------------
  1188                              <1> ;                    LBA IO requests are structured here
  1189                              <1> ;---------------------------------------------------------------------------
  1190                              <1> .lbaVerify:
  1191 00000E59 B800840000          <1>     mov eax, 8400h  ;Verify sectors
  1192 00000E5E EB05                <1>     jmp short .lbaFmtCmn
  1193                              <1> .lbaFmt:
  1194 00000E60 B800850000          <1>     mov eax, 8500h  ;Format sectors
  1195                              <1> .lbaFmtCmn:
  1196 00000E65 803A10              <1>     cmp byte [rdx + lbaIOBlock.size], lbaFormatBlock_size
  1197 00000E68 EB13                <1>     jmp short .lbaCmn
  1198                              <1> .lbaRead:
  1199 00000E6A B800820000          <1>     mov eax, 8200h  ;Read sectors
  1200 00000E6F EB05                <1>     jmp short .lbaRWCmn
  1201                              <1> .lbaWrite:
  1202 00000E71 B800830000          <1>     mov eax, 8300h  ;Write sectors
  1203                              <1> .lbaRWCmn:
  1204 00000E76 488B5A10            <1>     mov rbx, qword [rdx + lbaIOBlock.xferBuffer]
  1205 00000E7A 803A18              <1>     cmp byte [rdx + lbaIOBlock.size], lbaIOBlock_size
  1206                              <1> .lbaCmn:
  1207 00000E7D 0F8525FDFFFF        <1>     jne .iobadCmdLen
  1208                              <1> ;Setup the vars for block IO
  1209 00000E83 4889D7              <1>     mov rdi, rdx
  1210 00000E86 0FB77701            <1>     movzx esi, word [rdi + lbaFormatBlock.numSectors]
  1211 00000E8A 8B4F08              <1>     mov ecx, dword [rdi + lbaFormatBlock.startSector]
  1212 00000E8D 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]  ;Point to sector in partition
  1213                              <1> .ioEp:
  1214 00000E90 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
  1215                              <1> .ioLp:
  1216 00000E93 50                  <1>     push rax        ;Always preserve the function number we are using
  1217 00000E94 E8DBFBFFFF          <1>     call .blkIODirect
  1218 00000E99 58                  <1>     pop rax
  1219 00000E9A 0F82A6FBFFFF        <1>     jc .ioDoErr
  1220 00000EA0 E8ACFBFFFF          <1>     call .ioAdv
  1221 00000EA5 75EC                <1>     jnz .ioLp
  1222                              <1>     return
    13                              <2> %%_ret:
    14 00000EA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1223                              <1> ;---------------------------------------------------------------------------
  1224                              <1> 
  1225                              <1> ;---------------------------------------------------------------------------
  1226                              <1> ;                           Misc GENIO routines 
  1227                              <1> ;---------------------------------------------------------------------------
  1228                              <1> .ioSetIds:
  1229                              <1> .ioGetIds:
  1230 00000EA8 E9F1FCFFFF          <1>     jmp .iobadCmd
  1231                              <1> .ioSetAccessFlag:
  1232                              <1> ;Sets/Clears the unformatted bit of a device block.
  1233 00000EAD F64201FF            <1>     test byte [rdx + accFlgBlk.bAccMode], -1
  1234 00000EB1 7407                <1>     jz .iosafNoAcc
  1235                              <1> ;Enables access if the access mode is non-zero
  1236 00000EB3 66816537FFFD        <1>     and word [rbp + drvBlk.wDevFlgs], ~devUnFmt
  1237                              <1>     return
    13                              <2> %%_ret:
    14 00000EB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1238                              <1> .iosafNoAcc:
  1239                              <1> ;Disables access if the access mode is zero 
  1240 00000EBA 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt
  1241                              <1>     return
    13                              <2> %%_ret:
    14 00000EC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1242                              <1> .ioGetAccessFlag:
  1243                              <1> ;Gets the state of the unformatted bit of a device block
  1244 00000EC1 C6420100            <1>     mov byte [rdx + accFlgBlk.bAccMode], 0  ;Init to clear, no access
  1245 00000EC5 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1246                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000ECB 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000ECD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1247 00000ECE FE4201              <1>     inc byte [rdx + accFlgBlk.bAccMode] ;If bit clear, set mode to access ok!
  1248                              <1>     return
    13                              <2> %%_ret:
    14 00000ED1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> .ioTrackTbl:
  1251 00000ED2 3F00                <1>     dw maxTrackTblSz    ;Have a maximum of 63 sectors per track
  1252                              <1> ;Each row is a pair of words:
  1253                              <1> ;   dw Sector number, Sector size
  1254 00000ED4 01000002            <1>     dw 1, 200h
  1255 00000ED8 02000002            <1>     dw 2, 200h
  1256 00000EDC 03000002            <1>     dw 3, 200h
  1257 00000EE0 04000002            <1>     dw 4, 200h
  1258 00000EE4 05000002            <1>     dw 5, 200h
  1259 00000EE8 06000002            <1>     dw 6, 200h
  1260 00000EEC 07000002            <1>     dw 7, 200h
  1261 00000EF0 08000002            <1>     dw 8, 200h
  1262 00000EF4 09000002            <1>     dw 9, 200h
  1263 00000EF8 0A000002            <1>     dw 10, 200h
  1264 00000EFC 0B000002            <1>     dw 11, 200h
  1265 00000F00 0C000002            <1>     dw 12, 200h
  1266 00000F04 0D000002            <1>     dw 13, 200h
  1267 00000F08 0E000002            <1>     dw 14, 200h
  1268 00000F0C 0F000002            <1>     dw 15, 200h
  1269 00000F10 10000002            <1>     dw 16, 200h
  1270 00000F14 11000002            <1>     dw 17, 200h
  1271 00000F18 12000002            <1>     dw 18, 200h
  1272 00000F1C 13000002            <1>     dw 19, 200h
  1273 00000F20 14000002            <1>     dw 20, 200h
  1274 00000F24 15000002            <1>     dw 21, 200h
  1275 00000F28 16000002            <1>     dw 22, 200h
  1276 00000F2C 17000002            <1>     dw 23, 200h
  1277 00000F30 18000002            <1>     dw 24, 200h
  1278 00000F34 19000002            <1>     dw 25, 200h
  1279 00000F38 1A000002            <1>     dw 26, 200h
  1280 00000F3C 1B000002            <1>     dw 27, 200h
  1281 00000F40 1C000002            <1>     dw 28, 200h
  1282 00000F44 1D000002            <1>     dw 29, 200h
  1283 00000F48 1E000002            <1>     dw 30, 200h
  1284 00000F4C 1F000002            <1>     dw 31, 200h
  1285 00000F50 20000002            <1>     dw 32, 200h
  1286 00000F54 21000002            <1>     dw 33, 200h
  1287 00000F58 22000002            <1>     dw 34, 200h
  1288 00000F5C 23000002            <1>     dw 35, 200h
  1289 00000F60 24000002            <1>     dw 36, 200h
  1290 00000F64 25000002            <1>     dw 37, 200h
  1291 00000F68 26000002            <1>     dw 38, 200h
  1292 00000F6C 27000002            <1>     dw 39, 200h
  1293 00000F70 28000002            <1>     dw 40, 200h
  1294 00000F74 29000002            <1>     dw 41, 200h
  1295 00000F78 2A000002            <1>     dw 42, 200h
  1296 00000F7C 2B000002            <1>     dw 43, 200h
  1297 00000F80 2C000002            <1>     dw 44, 200h
  1298 00000F84 2D000002            <1>     dw 45, 200h
  1299 00000F88 2E000002            <1>     dw 46, 200h
  1300 00000F8C 2F000002            <1>     dw 47, 200h
  1301 00000F90 30000002            <1>     dw 48, 200h
  1302 00000F94 31000002            <1>     dw 49, 200h
  1303 00000F98 32000002            <1>     dw 50, 200h
  1304 00000F9C 33000002            <1>     dw 51, 200h
  1305 00000FA0 34000002            <1>     dw 52, 200h
  1306 00000FA4 35000002            <1>     dw 53, 200h
  1307 00000FA8 36000002            <1>     dw 54, 200h
  1308 00000FAC 37000002            <1>     dw 55, 200h
  1309 00000FB0 38000002            <1>     dw 56, 200h
  1310 00000FB4 39000002            <1>     dw 57, 200h
  1311 00000FB8 3A000002            <1>     dw 58, 200h
  1312 00000FBC 3B000002            <1>     dw 59, 200h
  1313 00000FC0 3C000002            <1>     dw 60, 200h
  1314 00000FC4 3D000002            <1>     dw 61, 200h
  1315 00000FC8 3E000002            <1>     dw 62, 200h
  1316 00000FCC 3F000002            <1>     dw 63, 200h
  1317                              <1> 
  1318                              <1> .getLogicalDev:   ;Function 23
  1319                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
  1320                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
  1321 00000FD0 31C0                <1>     xor eax, eax
  1322 00000FD2 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1323 00000FD8 7428                <1>     jz .gldExit
  1324 00000FDA 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
  1325 00000FDE 488D2D4C130000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
  1326                              <1> .gldLp:
  1327 00000FE5 384508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
  1328 00000FE8 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
  1329 00000FED 75F6                <1>     jne .gldLp
  1330 00000FEF 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
  1331 00000FF5 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
  1332 00000FFA 74E9                <1>     jz .gldLp 
  1333 00000FFC 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
  1334 00001000 FFC0                <1>     inc eax ;Make it 1 based
  1335                              <1> .gldExit:
  1336 00001002 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
  1337                              <1>     return
    13                              <2> %%_ret:
    14 00001005 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1338                              <1> 
  1339                              <1> .setLogicalDev:   ;Function 24
  1340 00001006 E82A000000          <1>     call .checkDevType  ;Set the unit as the owner of this BIOS drive!
  1341                              <1>     return
    13                              <2> %%_ret:
    14 0000100B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1342                              <1> 
  1343                              <1> .setupDrive:
  1344                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
  1345                              <1> ; sets up internal vars according to it. 
  1346                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
  1347                              <1> ;Output: rbp = Points to the drvBlk
  1348 0000100C 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
  1349                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001010 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001012 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1350 00001013 488D2D17130000      <1>     lea rbp, .drvBlkTbl
  1351                              <1> .sdChk:
  1352 0000101A 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
  1353                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000101D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000101F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1354 00001020 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1355 00001024 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1356 0000102B 75ED                <1>     jne .sdChk  ;Keep looping until end of table
  1357 0000102D 58                  <1>     pop rax     ;Pop return address off the stack
  1358 0000102E B007                <1>     mov al, drvBadMed
  1359 00001030 E9BBF5FFFF          <1>     jmp .writeEntryError
  1360                              <1> 
  1361                              <1> .checkDevType:
  1362                              <1> ;Checks if we need to display the swap drive message and displays it if so.
  1363                              <1> ;The device must already be setup in rbp (and var) for this to work.
  1364                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
  1365 00001035 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
  1366                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000103B 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000103D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1367 0000103E 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1368                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001044 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001046 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1369                              <1> ;Else, now we find the current owner of this drive letter :)
  1370 00001047 8A4508              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
  1371 0000104A 488D3DE0120000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
  1372                              <1> .cdtLp:
  1373 00001051 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1374 00001058 7454                <1>     je .cdtBadExit
  1375 0000105A 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
  1376 0000105D 740D                <1>     je .cdtNextEntry
  1377 0000105F 384708              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
  1378 00001062 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
  1379                              <1>     ;Now we check if this is the current owner of the device?
  1380 00001064 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
  1381 0000106A 7505                <1>     jnz .cdtDevFnd
  1382                              <1> .cdtNextEntry:
  1383 0000106C 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
  1384 0000106F EBE0                <1>     jmp short .cdtLp
  1385                              <1> .cdtDevFnd:
  1386                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
  1387                              <1> ; device) gains ownership.
  1388 00001071 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
  1389 00001077 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
  1390                              <1> ;If a set map request, don't prompt the message!
  1391 0000107D 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
  1392                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001081 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001083 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1393                              <1> 
  1394                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1395 00001084 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  1396 00001087 0441                <1>     add al, "A" ;Convert to a letter
  1397 00001089 880590010000        <1>     mov byte [.strikeMsgLetter], al
  1398 0000108F 488D3576010000      <1>     lea rsi, .strikeMsg
  1399 00001096 B937000000          <1>     mov ecx, .strikeMsgL
  1400                              <1> .cdtPrint:
  1401 0000109B AC                  <1>     lodsb   ;Get the char in al, inc rsi
  1402 0000109C CD29                <1>     int 29h ;Print char in al
  1403 0000109E FFC9                <1>     dec ecx
  1404 000010A0 75F9                <1>     jnz .cdtPrint
  1405                              <1> 
  1406 000010A2 E821000000          <1>     call .cdtCleanKeyb  ;Clean the buffer!
  1407 000010A7 E80E000000          <1>     call .cdtAwaitKeyb  ;Await until a char ready in a friendly way :)
  1408                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1409                              <1> 
  1410 000010AC F8                  <1>     clc ;Indicate goodness through CF
  1411                              <1>     return
    13                              <2> %%_ret:
    14 000010AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> .cdtBadExit:
  1413 000010AE 58                  <1>     pop rax
  1414 000010AF B807000000          <1>     mov eax, drvBadMed
  1415 000010B4 F9                  <1>     stc ;Indicate badness through CF
  1416 000010B5 E91BF6FFFF          <1>     jmp .errorExit
  1417                              <1> 
  1418                              <1> .cdtAwaitKeyb:
  1419 000010BA B800010000          <1>     mov eax, 0100h
  1420 000010BF CD36                <1>     int 36h ;If return ZF=ZE, we have no char in the buffer. Loop until we do!
  1421 000010C1 74F7                <1>     jz .cdtAwaitKeyb
  1422 000010C3 31C0                <1>     xor eax, eax
  1423 000010C5 CD36                <1>     int 36h ;Now pull the char!
  1424                              <1>     return
    13                              <2> %%_ret:
    14 000010C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1425                              <1> .cdtCleanKeyb:
  1426 000010C8 B800010000          <1>     mov eax, 0100h
  1427 000010CD CD36                <1>     int 36h ;If return ZF=NZ we have a char in the buffer, pull it!
  1428                              <1>     retz    ;Else ZF=ZE, no char, ready to await the keypress.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000010CF 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000010D1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1429 000010D2 31C0                <1>     xor eax, eax    ;Pull the char in the buffer from buffer
  1430 000010D4 CD36                <1>     int 36h
  1431 000010D6 EBF0                <1>     jmp short .cdtCleanKeyb
  1432                              <1> 
  1433                              <1> .ioSetVolLbl:
  1434                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
  1435                              <1> ;Input: rbx -> io request packet
  1436                              <1> ;       rbp -> drvBlk to get volume ID from
  1437                              <1> ;Output: Pointer placed in io request packet
  1438 000010D8 50                  <1>     push rax
  1439 000010D9 488D4574            <1>     lea rax, qword [rbp + drvBlk.volLab]    ;Get the volLbl from the BPB
  1440 000010DD 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
  1441 000010E1 58                  <1>     pop rax
  1442 000010E2 C3                  <1>     ret
  1443                              <1> 
  1444                              <1> .getTime:
  1445                              <1> ;Gets the current time in a format ready to be used for disk access.
  1446 000010E3 31C0                <1>     xor eax, eax
  1447 000010E5 CD3A                <1>     int 3Ah
  1448 000010E7 0FB7D2              <1>     movzx edx, dx
  1449 000010EA C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
  1450 000010ED 09D1                <1>     or ecx, edx ;Store the current time count into ecx
  1451 000010EF 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
  1452 000010F1 740E                <1>     jz .stStore
  1453 000010F3 0FB6C0              <1>     movzx eax, al
  1454 000010F6 51                  <1>     push rcx    ;Save the current time count
  1455 000010F7 B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
  1456 000010FC F7E1                <1>     mul ecx
  1457 000010FE 59                  <1>     pop rcx
  1458 000010FF 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
  1459                              <1> .stStore:
  1460 00001101 F8                  <1>     clc
  1461                              <1>     return
    13                              <2> %%_ret:
    14 00001102 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1462                              <1> 
  1463                              <1> .setTime:
  1464                              <1> ;Sets the current time to the disk drive and resets the access counter
  1465 00001103 E8DBFFFFFF          <1>     call .getTime
  1466 00001108 894D70              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
  1467 0000110B C6055501000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
  1468                              <1>     return
    13                              <2> %%_ret:
    14 00001112 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1469                              <1> 
  1470                              <1> .checkTime:
  1471                              <1> ;Does the time/access count check :)
  1472                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
  1473 00001113 E8CBFFFFFF          <1>     call .getTime   ;Returns in ecx the current time
  1474 00001118 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
  1475 0000111A 7517                <1>     jnz .ctOk
  1476 0000111C FE0545010000        <1>     inc byte [.bAccCnt]
  1477 00001122 803D3E01000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
  1478 00001129 7217                <1>     jb .ctNoChange
  1479 0000112B FE0D36010000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
  1480 00001131 EB0D                <1>     jmp short .ctMaybeCh
  1481                              <1> .ctOk:
  1482 00001133 8B5570              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
  1483                              <1> ;ecx = time of current check, adjusted for day rollovers 
  1484 00001136 29D1                <1>     sub ecx, edx    
  1485 00001138 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
  1486 0000113E 7602                <1>     jbe .ctNoChange
  1487                              <1> .ctMaybeCh:
  1488 00001140 F9                  <1>     stc
  1489                              <1>     return
    13                              <2> %%_ret:
    14 00001141 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1490                              <1> .ctNoChange:
  1491 00001142 F8                  <1>     clc
  1492                              <1>     return
    13                              <2> %%_ret:
    14 00001143 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1493                              <1> 
  1494                              <1> .callI33h:
  1495                              <1> ;Wraps all i33 calls allowing me to preserve all that I need to preserve
  1496                              <1> ; across these calls. Only allows returning values in ax.
  1497 00001144 53                  <1>     push rbx
  1498 00001145 51                  <1>     push rcx
  1499 00001146 52                  <1>     push rdx
  1500 00001147 56                  <1>     push rsi
  1501 00001148 57                  <1>     push rdi
  1502 00001149 55                  <1>     push rbp
  1503 0000114A CD33                <1>     int 33h
  1504 0000114C 5D                  <1>     pop rbp
  1505 0000114D 5F                  <1>     pop rdi
  1506 0000114E 5E                  <1>     pop rsi
  1507 0000114F 5A                  <1>     pop rdx
  1508 00001150 59                  <1>     pop rcx
  1509 00001151 5B                  <1>     pop rbx
  1510                              <1>     return
    13                              <2> %%_ret:
    14 00001152 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1511                              <1> 
  1512                              <1> .setBitsForAllDevs:
  1513                              <1> ;Sets the selected bits for all devices with a particular BIOS number.
  1514                              <1> ;Input: ax = Bits to set in wDevFlgs
  1515                              <1> ;       dl = BIOS drive number
  1516 00001153 55                  <1>     push rbp
  1517 00001154 9C                  <1>     pushfq
  1518 00001155 488D2DD5110000      <1>     lea rbp, .drvBlkTbl
  1519                              <1> .sbfadLp:
  1520 0000115C 385508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], dl
  1521 0000115F 7504                <1>     jne .sbfadNext
  1522 00001161 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax
  1523                              <1> .sbfadNext:
  1524 00001165 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1525 00001169 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1526 00001170 75EA                <1>     jne .sbfadLp
  1527                              <1> .sbfadExit:
  1528 00001172 9D                  <1>     popfq
  1529 00001173 5D                  <1>     pop rbp
  1530                              <1>     return
    13                              <2> %%_ret:
    14 00001174 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1531                              <1> 
  1532                              <1> .i2fDriver:
  1533                              <1> ;Back door into the block driver :)
  1534 00001175 80FC08              <1>     cmp ah, 08h
  1535 00001178 7510                <1>     jne .i2fNotUs
  1536 0000117A 84C0                <1>     test al, al ;AL=00, Install check
  1537 0000117C 7412                <1>     jz .i2fCheck
  1538 0000117E 3C01                <1>     cmp al, 01  ;AL=01, Add block device
  1539 00001180 7412                <1>     je .i2fAddTbl
  1540 00001182 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
  1541 00001184 745D                <1>     je .i2fExec
  1542 00001186 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
  1543 00001188 7479                <1>     je .i2fGivTbl
  1544                              <1> .i2fNotUs:
  1545 0000118A FF253EF3FFFF        <1>     jmp qword [i2FNext]
  1546                              <1> .i2fCheck:
  1547 00001190 B0FF                <1>     mov al, -1  ;Indicate installed!
  1548 00001192 48CF                <1>     iretq
  1549                              <1> .i2fAddTbl:
  1550                              <1> ;Adds a new entry to the drive chain and updates the multiownership bits
  1551                              <1> ; as it does :)
  1552                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
  1553                              <1> ;Destroy rax, rbx and rsi
  1554 00001194 488D3596110000      <1>     lea rsi, .drvBlkTbl
  1555 0000119B 0FB64708            <1>     movzx eax, byte [rdi + drvBlk.bBIOSNum]
  1556                              <1> .i2fATLp:
  1557 0000119F 384608              <1>     cmp byte [rsi + drvBlk.bBIOSNum], al
  1558 000011A2 7526                <1>     jne .i2fATNext
  1559                              <1> ;Set that the two disks are multi owned. New cannot own the drive
  1560                              <1> ; and make sure that the new drive has the accurate changeline bit set
  1561 000011A4 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti       ;Both drives now multi!
  1562 000011AA 66814F371000        <1>     or word [rdi + drvBlk.wDevFlgs], devMulti
  1563 000011B0 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv    ;New cant own drv
  1564                              <1> ;Changeline check.
  1565 000011B6 66816737FDFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devChgLine   ;Assume no changeline
  1566 000011BC 66F746370200        <1>     test word [rsi + drvBlk.wDevFlgs], devChgLine   ;Do we really have cline?
  1567 000011C2 7406                <1>     jz .i2fATNext   ;Skip adding the bit if not
  1568 000011C4 66814F370200        <1>     or word [rdi + drvBlk.wDevFlgs], devChgLine     ;Add if we do 
  1569                              <1> .i2fATNext:
  1570 000011CA 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;Check if we @ end of table
  1571 000011D1 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink] ;Walk if not
  1572 000011D5 75C8                <1>     jne .i2fATLp    ;And go again if not
  1573 000011D7 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi ;Else, link rdi onto the end
  1574 000011DA 48C707FFFFFFFF      <1>     mov qword [rdi + drvBlk.pLink], -1  ;And terminate list @ rdi now :)
  1575 000011E1 48CF                <1>     iretq
  1576                              <1> .i2fExec:
  1577                              <1> ;We make a small change in that we clean up the flags from the stack
  1578                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
  1579                              <1> ; as no useful information is ever passed in the flags from a driver
  1580                              <1> ; so by doing so, any ported applications which do an additional pop
  1581                              <1> ; from the stack to balance the stack will not be harmed by this.
  1582 000011E3 50                  <1>     push rax
  1583 000011E4 B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
  1584 000011E9 CD2A                <1>     int 2Ah
  1585                              <1> 
  1586 000011EB 53                  <1>     push rbx
  1587 000011EC 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx  ;Save the ptr in var since we own it now :)
  1588 000011F3 E88FF3FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
  1589 000011F8 5B                  <1>     pop rbx
  1590                              <1> 
  1591 000011F9 B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
  1592 000011FE CD2A                <1>     int 2Ah
  1593 00001200 58                  <1>     pop rax
  1594 00001201 48CF                <1>     iretq
  1595                              <1> .i2fGivTbl:
  1596                              <1> ;Output: rdi -> drvBlkTbl
  1597 00001203 488D3D27110000      <1>     lea rdi, .drvBlkTbl
  1598 0000120A 48CF                <1>     iretq
  1599                              <1> 
  1600 0000120C 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert for drive "
  1600 00001215 666F72206472697665- <1>
  1600 0000121E 20                  <1>
  1601 0000121F 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
  1601 00001228 72696B650D0A616E79- <1>
  1601 00001231 206B6579207768656E- <1>
  1601 0000123A 2072656164790D0A0A  <1>
  1602                              <1> .strikeMsgL equ $ - .strikeMsg
  1603                              <1> 
  1604 00001243 464154313220202000  <1> .fat12Str   db "FAT12   ",0
  1605 0000124C 464154313620202000  <1> .fat16Str   db "FAT16   ",0
  1606 00001255 464154333220202000  <1> .fat32Str   db "FAT32   ",0
  1607 0000125E 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
  1608                              <1> 
  1609 00001267 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
  1610 00001268 FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check/IO.
  1611                              <1> 
  1612                              <1> ;Keep this @ 4096 for hotplugging a 4096 dev that needs 512 byte pseudo
  1613                              <1> ; access. 
  1614                              <1> ;Access to this buffer should be mediated through a critical section... 
  1615                              <1> ; but this driver doesnt need to be reentrant yet.
  1616 00001269 000000000000000000- <1> .inBuffer   db 4096 dup (0)  
  1616 00001272 000000000000000000- <1>
  1616 0000127B 000000000000000000- <1>
  1616 00001284 000000000000000000- <1>
  1616 0000128D 000000000000000000- <1>
  1616 00001296 000000000000000000- <1>
  1616 0000129F 000000000000000000- <1>
  1616 000012A8 000000000000000000- <1>
  1616 000012B1 000000000000000000- <1>
  1616 000012BA 000000000000000000- <1>
  1616 000012C3 000000000000000000- <1>
  1616 000012CC 000000000000000000- <1>
  1616 000012D5 000000000000000000- <1>
  1616 000012DE 000000000000000000- <1>
  1616 000012E7 000000000000000000- <1>
  1616 000012F0 000000000000000000- <1>
  1616 000012F9 000000000000000000- <1>
  1616 00001302 000000000000000000- <1>
  1616 0000130B 000000000000000000- <1>
  1616 00001314 000000000000000000- <1>
  1616 0000131D 000000000000000000- <1>
  1616 00001326 000000000000000000- <1>
  1616 0000132F 000000000000000000- <1>
  1616 00001338 000000000000000000- <1>
  1616 00001341 000000000000000000- <1>
  1616 0000134A 000000000000000000- <1>
  1616 00001353 000000000000000000- <1>
  1616 0000135C 000000000000000000- <1>
  1616 00001365 000000000000000000- <1>
  1616 0000136E 000000000000000000- <1>
  1616 00001377 000000000000000000- <1>
  1616 00001380 000000000000000000- <1>
  1616 00001389 000000000000000000- <1>
  1616 00001392 000000000000000000- <1>
  1616 0000139B 000000000000000000- <1>
  1616 000013A4 000000000000000000- <1>
  1616 000013AD 000000000000000000- <1>
  1616 000013B6 000000000000000000- <1>
  1616 000013BF 000000000000000000- <1>
  1616 000013C8 000000000000000000- <1>
  1616 000013D1 000000000000000000- <1>
  1616 000013DA 000000000000000000- <1>
  1616 000013E3 000000000000000000- <1>
  1616 000013EC 000000000000000000- <1>
  1616 000013F5 000000000000000000- <1>
  1616 000013FE 000000000000000000- <1>
  1616 00001407 000000000000000000- <1>
  1616 00001410 000000000000000000- <1>
  1616 00001419 000000000000000000- <1>
  1616 00001422 000000000000000000- <1>
  1616 0000142B 000000000000000000- <1>
  1616 00001434 000000000000000000- <1>
  1616 0000143D 000000000000000000- <1>
  1616 00001446 000000000000000000- <1>
  1616 0000144F 000000000000000000- <1>
  1616 00001458 000000000000000000- <1>
  1616 00001461 000000000000000000- <1>
  1616 0000146A 000000000000000000- <1>
  1616 00001473 000000000000000000- <1>
  1616 0000147C 000000000000000000- <1>
  1616 00001485 000000000000000000- <1>
  1616 0000148E 000000000000000000- <1>
  1616 00001497 000000000000000000- <1>
  1616 000014A0 000000000000000000- <1>
  1616 000014A9 000000000000000000- <1>
  1616 000014B2 000000000000000000- <1>
  1616 000014BB 000000000000000000- <1>
  1616 000014C4 000000000000000000- <1>
  1616 000014CD 000000000000000000- <1>
  1616 000014D6 000000000000000000- <1>
  1616 000014DF 000000000000000000- <1>
  1616 000014E8 000000000000000000- <1>
  1616 000014F1 000000000000000000- <1>
  1616 000014FA 000000000000000000- <1>
  1616 00001503 000000000000000000- <1>
  1616 0000150C 000000000000000000- <1>
  1616 00001515 000000000000000000- <1>
  1616 0000151E 000000000000000000- <1>
  1616 00001527 000000000000000000- <1>
  1616 00001530 000000000000000000- <1>
  1616 00001539 000000000000000000- <1>
  1616 00001542 000000000000000000- <1>
  1616 0000154B 000000000000000000- <1>
  1616 00001554 000000000000000000- <1>
  1616 0000155D 000000000000000000- <1>
  1616 00001566 000000000000000000- <1>
  1616 0000156F 000000000000000000- <1>
  1616 00001578 000000000000000000- <1>
  1616 00001581 000000000000000000- <1>
  1616 0000158A 000000000000000000- <1>
  1616 00001593 000000000000000000- <1>
  1616 0000159C 000000000000000000- <1>
  1616 000015A5 000000000000000000- <1>
  1616 000015AE 000000000000000000- <1>
  1616 000015B7 000000000000000000- <1>
  1616 000015C0 000000000000000000- <1>
  1616 000015C9 000000000000000000- <1>
  1616 000015D2 000000000000000000- <1>
  1616 000015DB 000000000000000000- <1>
  1616 000015E4 000000000000000000- <1>
  1616 000015ED 000000000000000000- <1>
  1616 000015F6 000000000000000000- <1>
  1616 000015FF 000000000000000000- <1>
  1616 00001608 000000000000000000- <1>
  1616 00001611 000000000000000000- <1>
  1616 0000161A 000000000000000000- <1>
  1616 00001623 000000000000000000- <1>
  1616 0000162C 000000000000000000- <1>
  1616 00001635 000000000000000000- <1>
  1616 0000163E 000000000000000000- <1>
  1616 00001647 000000000000000000- <1>
  1616 00001650 000000000000000000- <1>
  1616 00001659 000000000000000000- <1>
  1616 00001662 000000000000000000- <1>
  1616 0000166B 000000000000000000- <1>
  1616 00001674 000000000000000000- <1>
  1616 0000167D 000000000000000000- <1>
  1616 00001686 000000000000000000- <1>
  1616 0000168F 000000000000000000- <1>
  1616 00001698 000000000000000000- <1>
  1616 000016A1 000000000000000000- <1>
  1616 000016AA 000000000000000000- <1>
  1616 000016B3 000000000000000000- <1>
  1616 000016BC 000000000000000000- <1>
  1616 000016C5 000000000000000000- <1>
  1616 000016CE 000000000000000000- <1>
  1616 000016D7 000000000000000000- <1>
  1616 000016E0 000000000000000000- <1>
  1616 000016E9 000000000000000000- <1>
  1616 000016F2 000000000000000000- <1>
  1616 000016FB 000000000000000000- <1>
  1616 00001704 000000000000000000- <1>
  1616 0000170D 000000000000000000- <1>
  1616 00001716 000000000000000000- <1>
  1616 0000171F 000000000000000000- <1>
  1616 00001728 000000000000000000- <1>
  1616 00001731 000000000000000000- <1>
  1616 0000173A 000000000000000000- <1>
  1616 00001743 000000000000000000- <1>
  1616 0000174C 000000000000000000- <1>
  1616 00001755 000000000000000000- <1>
  1616 0000175E 000000000000000000- <1>
  1616 00001767 000000000000000000- <1>
  1616 00001770 000000000000000000- <1>
  1616 00001779 000000000000000000- <1>
  1616 00001782 000000000000000000- <1>
  1616 0000178B 000000000000000000- <1>
  1616 00001794 000000000000000000- <1>
  1616 0000179D 000000000000000000- <1>
  1616 000017A6 000000000000000000- <1>
  1616 000017AF 000000000000000000- <1>
  1616 000017B8 000000000000000000- <1>
  1616 000017C1 000000000000000000- <1>
  1616 000017CA 000000000000000000- <1>
  1616 000017D3 000000000000000000- <1>
  1616 000017DC 000000000000000000- <1>
  1616 000017E5 000000000000000000- <1>
  1616 000017EE 000000000000000000- <1>
  1616 000017F7 000000000000000000- <1>
  1616 00001800 000000000000000000- <1>
  1616 00001809 000000000000000000- <1>
  1616 00001812 000000000000000000- <1>
  1616 0000181B 000000000000000000- <1>
  1616 00001824 000000000000000000- <1>
  1616 0000182D 000000000000000000- <1>
  1616 00001836 000000000000000000- <1>
  1616 0000183F 000000000000000000- <1>
  1616 00001848 000000000000000000- <1>
  1616 00001851 000000000000000000- <1>
  1616 0000185A 000000000000000000- <1>
  1616 00001863 000000000000000000- <1>
  1616 0000186C 000000000000000000- <1>
  1616 00001875 000000000000000000- <1>
  1616 0000187E 000000000000000000- <1>
  1616 00001887 000000000000000000- <1>
  1616 00001890 000000000000000000- <1>
  1616 00001899 000000000000000000- <1>
  1616 000018A2 000000000000000000- <1>
  1616 000018AB 000000000000000000- <1>
  1616 000018B4 000000000000000000- <1>
  1616 000018BD 000000000000000000- <1>
  1616 000018C6 000000000000000000- <1>
  1616 000018CF 000000000000000000- <1>
  1616 000018D8 000000000000000000- <1>
  1616 000018E1 000000000000000000- <1>
  1616 000018EA 000000000000000000- <1>
  1616 000018F3 000000000000000000- <1>
  1616 000018FC 000000000000000000- <1>
  1616 00001905 000000000000000000- <1>
  1616 0000190E 000000000000000000- <1>
  1616 00001917 000000000000000000- <1>
  1616 00001920 000000000000000000- <1>
  1616 00001929 000000000000000000- <1>
  1616 00001932 000000000000000000- <1>
  1616 0000193B 000000000000000000- <1>
  1616 00001944 000000000000000000- <1>
  1616 0000194D 000000000000000000- <1>
  1616 00001956 000000000000000000- <1>
  1616 0000195F 000000000000000000- <1>
  1616 00001968 000000000000000000- <1>
  1616 00001971 000000000000000000- <1>
  1616 0000197A 000000000000000000- <1>
  1616 00001983 000000000000000000- <1>
  1616 0000198C 000000000000000000- <1>
  1616 00001995 000000000000000000- <1>
  1616 0000199E 000000000000000000- <1>
  1616 000019A7 000000000000000000- <1>
  1616 000019B0 000000000000000000- <1>
  1616 000019B9 000000000000000000- <1>
  1616 000019C2 000000000000000000- <1>
  1616 000019CB 000000000000000000- <1>
  1616 000019D4 000000000000000000- <1>
  1616 000019DD 000000000000000000- <1>
  1616 000019E6 000000000000000000- <1>
  1616 000019EF 000000000000000000- <1>
  1616 000019F8 000000000000000000- <1>
  1616 00001A01 000000000000000000- <1>
  1616 00001A0A 000000000000000000- <1>
  1616 00001A13 000000000000000000- <1>
  1616 00001A1C 000000000000000000- <1>
  1616 00001A25 000000000000000000- <1>
  1616 00001A2E 000000000000000000- <1>
  1616 00001A37 000000000000000000- <1>
  1616 00001A40 000000000000000000- <1>
  1616 00001A49 000000000000000000- <1>
  1616 00001A52 000000000000000000- <1>
  1616 00001A5B 000000000000000000- <1>
  1616 00001A64 000000000000000000- <1>
  1616 00001A6D 000000000000000000- <1>
  1616 00001A76 000000000000000000- <1>
  1616 00001A7F 000000000000000000- <1>
  1616 00001A88 000000000000000000- <1>
  1616 00001A91 000000000000000000- <1>
  1616 00001A9A 000000000000000000- <1>
  1616 00001AA3 000000000000000000- <1>
  1616 00001AAC 000000000000000000- <1>
  1616 00001AB5 000000000000000000- <1>
  1616 00001ABE 000000000000000000- <1>
  1616 00001AC7 000000000000000000- <1>
  1616 00001AD0 000000000000000000- <1>
  1616 00001AD9 000000000000000000- <1>
  1616 00001AE2 000000000000000000- <1>
  1616 00001AEB 000000000000000000- <1>
  1616 00001AF4 000000000000000000- <1>
  1616 00001AFD 000000000000000000- <1>
  1616 00001B06 000000000000000000- <1>
  1616 00001B0F 000000000000000000- <1>
  1616 00001B18 000000000000000000- <1>
  1616 00001B21 000000000000000000- <1>
  1616 00001B2A 000000000000000000- <1>
  1616 00001B33 000000000000000000- <1>
  1616 00001B3C 000000000000000000- <1>
  1616 00001B45 000000000000000000- <1>
  1616 00001B4E 000000000000000000- <1>
  1616 00001B57 000000000000000000- <1>
  1616 00001B60 000000000000000000- <1>
  1616 00001B69 000000000000000000- <1>
  1616 00001B72 000000000000000000- <1>
  1616 00001B7B 000000000000000000- <1>
  1616 00001B84 000000000000000000- <1>
  1616 00001B8D 000000000000000000- <1>
  1616 00001B96 000000000000000000- <1>
  1616 00001B9F 000000000000000000- <1>
  1616 00001BA8 000000000000000000- <1>
  1616 00001BB1 000000000000000000- <1>
  1616 00001BBA 000000000000000000- <1>
  1616 00001BC3 000000000000000000- <1>
  1616 00001BCC 000000000000000000- <1>
  1616 00001BD5 000000000000000000- <1>
  1616 00001BDE 000000000000000000- <1>
  1616 00001BE7 000000000000000000- <1>
  1616 00001BF0 000000000000000000- <1>
  1616 00001BF9 000000000000000000- <1>
  1616 00001C02 000000000000000000- <1>
  1616 00001C0B 000000000000000000- <1>
  1616 00001C14 000000000000000000- <1>
  1616 00001C1D 000000000000000000- <1>
  1616 00001C26 000000000000000000- <1>
  1616 00001C2F 000000000000000000- <1>
  1616 00001C38 000000000000000000- <1>
  1616 00001C41 000000000000000000- <1>
  1616 00001C4A 000000000000000000- <1>
  1616 00001C53 000000000000000000- <1>
  1616 00001C5C 000000000000000000- <1>
  1616 00001C65 000000000000000000- <1>
  1616 00001C6E 000000000000000000- <1>
  1616 00001C77 000000000000000000- <1>
  1616 00001C80 000000000000000000- <1>
  1616 00001C89 000000000000000000- <1>
  1616 00001C92 000000000000000000- <1>
  1616 00001C9B 000000000000000000- <1>
  1616 00001CA4 000000000000000000- <1>
  1616 00001CAD 000000000000000000- <1>
  1616 00001CB6 000000000000000000- <1>
  1616 00001CBF 000000000000000000- <1>
  1616 00001CC8 000000000000000000- <1>
  1616 00001CD1 000000000000000000- <1>
  1616 00001CDA 000000000000000000- <1>
  1616 00001CE3 000000000000000000- <1>
  1616 00001CEC 000000000000000000- <1>
  1616 00001CF5 000000000000000000- <1>
  1616 00001CFE 000000000000000000- <1>
  1616 00001D07 000000000000000000- <1>
  1616 00001D10 000000000000000000- <1>
  1616 00001D19 000000000000000000- <1>
  1616 00001D22 000000000000000000- <1>
  1616 00001D2B 000000000000000000- <1>
  1616 00001D34 000000000000000000- <1>
  1616 00001D3D 000000000000000000- <1>
  1616 00001D46 000000000000000000- <1>
  1616 00001D4F 000000000000000000- <1>
  1616 00001D58 000000000000000000- <1>
  1616 00001D61 000000000000000000- <1>
  1616 00001D6A 000000000000000000- <1>
  1616 00001D73 000000000000000000- <1>
  1616 00001D7C 000000000000000000- <1>
  1616 00001D85 000000000000000000- <1>
  1616 00001D8E 000000000000000000- <1>
  1616 00001D97 000000000000000000- <1>
  1616 00001DA0 000000000000000000- <1>
  1616 00001DA9 000000000000000000- <1>
  1616 00001DB2 000000000000000000- <1>
  1616 00001DBB 000000000000000000- <1>
  1616 00001DC4 000000000000000000- <1>
  1616 00001DCD 000000000000000000- <1>
  1616 00001DD6 000000000000000000- <1>
  1616 00001DDF 000000000000000000- <1>
  1616 00001DE8 000000000000000000- <1>
  1616 00001DF1 000000000000000000- <1>
  1616 00001DFA 000000000000000000- <1>
  1616 00001E03 000000000000000000- <1>
  1616 00001E0C 000000000000000000- <1>
  1616 00001E15 000000000000000000- <1>
  1616 00001E1E 000000000000000000- <1>
  1616 00001E27 000000000000000000- <1>
  1616 00001E30 000000000000000000- <1>
  1616 00001E39 000000000000000000- <1>
  1616 00001E42 000000000000000000- <1>
  1616 00001E4B 000000000000000000- <1>
  1616 00001E54 000000000000000000- <1>
  1616 00001E5D 000000000000000000- <1>
  1616 00001E66 000000000000000000- <1>
  1616 00001E6F 000000000000000000- <1>
  1616 00001E78 000000000000000000- <1>
  1616 00001E81 000000000000000000- <1>
  1616 00001E8A 000000000000000000- <1>
  1616 00001E93 000000000000000000- <1>
  1616 00001E9C 000000000000000000- <1>
  1616 00001EA5 000000000000000000- <1>
  1616 00001EAE 000000000000000000- <1>
  1616 00001EB7 000000000000000000- <1>
  1616 00001EC0 000000000000000000- <1>
  1616 00001EC9 000000000000000000- <1>
  1616 00001ED2 000000000000000000- <1>
  1616 00001EDB 000000000000000000- <1>
  1616 00001EE4 000000000000000000- <1>
  1616 00001EED 000000000000000000- <1>
  1616 00001EF6 000000000000000000- <1>
  1616 00001EFF 000000000000000000- <1>
  1616 00001F08 000000000000000000- <1>
  1616 00001F11 000000000000000000- <1>
  1616 00001F1A 000000000000000000- <1>
  1616 00001F23 000000000000000000- <1>
  1616 00001F2C 000000000000000000- <1>
  1616 00001F35 000000000000000000- <1>
  1616 00001F3E 000000000000000000- <1>
  1616 00001F47 000000000000000000- <1>
  1616 00001F50 000000000000000000- <1>
  1616 00001F59 000000000000000000- <1>
  1616 00001F62 000000000000000000- <1>
  1616 00001F6B 000000000000000000- <1>
  1616 00001F74 000000000000000000- <1>
  1616 00001F7D 000000000000000000- <1>
  1616 00001F86 000000000000000000- <1>
  1616 00001F8F 000000000000000000- <1>
  1616 00001F98 000000000000000000- <1>
  1616 00001FA1 000000000000000000- <1>
  1616 00001FAA 000000000000000000- <1>
  1616 00001FB3 000000000000000000- <1>
  1616 00001FBC 000000000000000000- <1>
  1616 00001FC5 000000000000000000- <1>
  1616 00001FCE 000000000000000000- <1>
  1616 00001FD7 000000000000000000- <1>
  1616 00001FE0 000000000000000000- <1>
  1616 00001FE9 000000000000000000- <1>
  1616 00001FF2 000000000000000000- <1>
  1616 00001FFB 000000000000000000- <1>
  1616 00002004 000000000000000000- <1>
  1616 0000200D 000000000000000000- <1>
  1616 00002016 000000000000000000- <1>
  1616 0000201F 000000000000000000- <1>
  1616 00002028 000000000000000000- <1>
  1616 00002031 000000000000000000- <1>
  1616 0000203A 000000000000000000- <1>
  1616 00002043 000000000000000000- <1>
  1616 0000204C 000000000000000000- <1>
  1616 00002055 000000000000000000- <1>
  1616 0000205E 000000000000000000- <1>
  1616 00002067 000000000000000000- <1>
  1616 00002070 000000000000000000- <1>
  1616 00002079 000000000000000000- <1>
  1616 00002082 000000000000000000- <1>
  1616 0000208B 000000000000000000- <1>
  1616 00002094 000000000000000000- <1>
  1616 0000209D 000000000000000000- <1>
  1616 000020A6 000000000000000000- <1>
  1616 000020AF 000000000000000000- <1>
  1616 000020B8 000000000000000000- <1>
  1616 000020C1 000000000000000000- <1>
  1616 000020CA 000000000000000000- <1>
  1616 000020D3 000000000000000000- <1>
  1616 000020DC 000000000000000000- <1>
  1616 000020E5 000000000000000000- <1>
  1616 000020EE 000000000000000000- <1>
  1616 000020F7 000000000000000000- <1>
  1616 00002100 000000000000000000- <1>
  1616 00002109 000000000000000000- <1>
  1616 00002112 000000000000000000- <1>
  1616 0000211B 000000000000000000- <1>
  1616 00002124 000000000000000000- <1>
  1616 0000212D 000000000000000000- <1>
  1616 00002136 000000000000000000- <1>
  1616 0000213F 000000000000000000- <1>
  1616 00002148 000000000000000000- <1>
  1616 00002151 000000000000000000- <1>
  1616 0000215A 000000000000000000- <1>
  1616 00002163 000000000000000000- <1>
  1616 0000216C 000000000000000000- <1>
  1616 00002175 000000000000000000- <1>
  1616 0000217E 000000000000000000- <1>
  1616 00002187 000000000000000000- <1>
  1616 00002190 000000000000000000- <1>
  1616 00002199 000000000000000000- <1>
  1616 000021A2 000000000000000000- <1>
  1616 000021AB 000000000000000000- <1>
  1616 000021B4 000000000000000000- <1>
  1616 000021BD 000000000000000000- <1>
  1616 000021C6 000000000000000000- <1>
  1616 000021CF 000000000000000000- <1>
  1616 000021D8 000000000000000000- <1>
  1616 000021E1 000000000000000000- <1>
  1616 000021EA 000000000000000000- <1>
  1616 000021F3 000000000000000000- <1>
  1616 000021FC 000000000000000000- <1>
  1616 00002205 000000000000000000- <1>
  1616 0000220E 000000000000000000- <1>
  1616 00002217 000000000000000000- <1>
  1616 00002220 000000000000000000- <1>
  1616 00002229 000000000000000000- <1>
  1616 00002232 000000000000000000- <1>
  1616 0000223B 000000000000000000- <1>
  1616 00002244 000000000000000000- <1>
  1616 0000224D 000000000000000000- <1>
  1616 00002256 000000000000000000- <1>
  1616 0000225F 000000000000000000- <1>
  1616 00002268 00                  <1>
  1617                              <1> 
  1618                              <1> .drvBpbTbl:
  1619                              <1> ;Table of BPBs from FAh-FFh
  1620                              <1>     istruc bpb
  1621 00002269 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1622 0000226B 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1623 0000226C 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1624 0000226E 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1625 0000226F 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1626 00002271 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  1627 00002273 FA                  <1>         at .media,      db 0FAh ;Media descriptor byte
  1628 00002274 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  1629 00002276 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1630 00002278 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  1631 0000227A 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1632 0000227E 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1633                              <1>     iend
  1634                              <1>     istruc bpb
  1635 00002282 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1636 00002284 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1637 00002285 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1638 00002287 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1639 00002288 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1640 0000228A 0005                <1>         at .totSec16,   dw 1280 ;Number of sectors on medium
  1641 0000228C FB                  <1>         at .media,      db 0FBh ;Media descriptor byte
  1642 0000228D 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  1643 0000228F 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1644 00002291 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1645 00002293 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1646 00002297 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1647                              <1>     iend
  1648                              <1>     istruc bpb
  1649 0000229B 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1650 0000229D 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1651 0000229E 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1652 000022A0 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1653 000022A1 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  1654 000022A3 6801                <1>         at .totSec16,   dw 360  ;Number of sectors on medium
  1655 000022A5 FC                  <1>         at .media,      db 0FCh ;Media descriptor byte
  1656 000022A6 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  1657 000022A8 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  1658 000022AA 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  1659 000022AC 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1660 000022B0 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1661                              <1>     iend
  1662                              <1>     istruc bpb
  1663 000022B4 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1664 000022B6 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1665 000022B7 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1666 000022B9 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1667 000022BA 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1668 000022BC D002                <1>         at .totSec16,   dw 720  ;Number of sectors on medium
  1669 000022BE FD                  <1>         at .media,      db 0FDh ;Media descriptor byte
  1670 000022BF 0200                <1>         at .FATsz16,    dw 2    ;Number of sectors per FAT
  1671 000022C1 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  1672 000022C3 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1673 000022C5 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1674 000022C9 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1675                              <1>     iend
  1676                              <1>     istruc bpb
  1677 000022CD 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1678 000022CF 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1679 000022D0 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1680 000022D2 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1681 000022D3 4000                <1>         at .rootEntCnt, dw 64   ;Number of 32 byte entries in Root directory
  1682 000022D5 4001                <1>         at .totSec16,   dw 320  ;Number of sectors on medium
  1683 000022D7 FE                  <1>         at .media,      db 0FEh ;Media descriptor byte
  1684 000022D8 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  1685 000022DA 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1686 000022DC 0100                <1>         at .numHeads,   dw 1    ;Number of read "heads"
  1687 000022DE 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1688 000022E2 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1689                              <1>     iend
  1690                              <1>     istruc bpb
  1691 000022E6 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1692 000022E8 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1693 000022E9 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1694 000022EB 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1695 000022EC 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1696 000022EE 8002                <1>         at .totSec16,   dw 640  ;Number of sectors on medium
  1697 000022F0 FF                  <1>         at .media,      db 0FFh ;Media descriptor byte
  1698 000022F1 0100                <1>         at .FATsz16,    dw 1    ;Number of sectors per FAT
  1699 000022F3 0800                <1>         at .secPerTrk,  dw 8    ;Number of sectors per "track"
  1700 000022F5 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1701 000022F7 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1702 000022FB 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1703                              <1>     iend
  1704                              <1> .drvBpbTblF9:
  1705                              <1> ;Contains the special F9 BPBs
  1706                              <1>     istruc bpb  ;720Kb 3.5" floppies
  1707 000022FF 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1708 00002301 02                  <1>         at .secPerClus, db 2    ;Sectors per cluster
  1709 00002302 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1710 00002304 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1711 00002305 7000                <1>         at .rootEntCnt, dw 112  ;Number of 32 byte entries in Root directory
  1712 00002307 A005                <1>         at .totSec16,   dw 1440 ;Number of sectors on medium
  1713 00002309 F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  1714 0000230A 0300                <1>         at .FATsz16,    dw 3    ;Number of sectors per FAT
  1715 0000230C 0900                <1>         at .secPerTrk,  dw 9    ;Number of sectors per "track"
  1716 0000230E 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1717 00002310 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1718 00002314 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1719                              <1>     iend
  1720                              <1>     istruc bpb  ;1.2Mb 5.25" floppies
  1721 00002318 0002                <1>         at .bytsPerSec, dw 512  ;Bytes per sector
  1722 0000231A 01                  <1>         at .secPerClus, db 1    ;Sectors per cluster
  1723 0000231B 0100                <1>         at .revdSecCnt, dw 1    ;Number of reserved sectors, in volume
  1724 0000231D 02                  <1>         at .numFATs,    db 2    ;Number of FATs on media
  1725 0000231E E000                <1>         at .rootEntCnt, dw 224  ;Number of 32 byte entries in Root directory
  1726 00002320 6009                <1>         at .totSec16,   dw 2400 ;Number of sectors on medium
  1727 00002322 F9                  <1>         at .media,      db 0F9h ;Media descriptor byte
  1728 00002323 0700                <1>         at .FATsz16,    dw 7    ;Number of sectors per FAT
  1729 00002325 0F00                <1>         at .secPerTrk,  dw 15   ;Number of sectors per "track"
  1730 00002327 0200                <1>         at .numHeads,   dw 2    ;Number of read "heads"
  1731 00002329 00000000            <1>         at .hiddSec,    dd 0    ;Number of hidden sectors
  1732 0000232D 00000000            <1>         at .totSec32,   dd 0    ;32 bit count of sectors
  1733                              <1>     iend
  1734                              <1> 
  1735                              <1> .drvBlkTbl:
  1736                              <1> ;All drives start with Sectors/Cluster as -1 to indicate not initialised.
  1737                              <1> ;All drives start with Media Descripter as 0 (invalid type)
  1738                              <1> ;All drives start with dAccTime at -1 to force "uncertain" read for remdevs
  1739                              <1> ;All drives present 63 Cylinders (only valid as a field on fixed disks)
  1740                              <1> ;All drives have as an alt BPB, a 1.44Mb 3.5" Floppy.
  1741                              <1>     %assign i 0
  1742                              <1>     %rep drvBlkTblL
  1743                              <1>     istruc drvBlk
  1744                              <1>         at .pLink,      dq -1   ;End of table marker
  1745                              <1>         at .bBIOSNum,   db i    ;DOS drive number
  1746                              <1>         at .bDOSNum,    db i    ;BIOS drives default to removable
  1747                              <1> ;Do a FAT12/16 BPB in FAT32 format
  1748                              <1>         at .wBpS,       dw 200h
  1749                              <1>         at .bSpC,       db -1       
  1750                              <1>         at .wResC,      dw 0001h
  1751                              <1>         at .bNumFAT,    db 02h
  1752                              <1>         at .wRtCntNum,  dw 00E0h    
  1753                              <1>         at .wTotSec16,  dw 0B40h    
  1754                              <1>         at .bMedDesc,   db 00h    
  1755                              <1>         at .wFATsz16,   dw 0009h    
  1756                              <1>         at .wSecPerTrk, dw 0012h    
  1757                              <1>         at .wNumHeads,  dw 0002h    
  1758                              <1>         at .dHiddSec,   dd 0    
  1759                              <1>         at .dTotSec32,  dd 0     
  1760                              <1> ;FAT 32 fields. All zeros
  1761                              <1>         at .FATsz32,    dd 0
  1762                              <1>         at .extFlags,   dw 0
  1763                              <1>         at .FSver,      dw 0
  1764                              <1>         at .RootClus,   dd 0
  1765                              <1>         at .FSinfo,     dw 0
  1766                              <1>         at .BkBootSec,  dw 0
  1767                              <1> ;DrvBlk Flags
  1768                              <1>         at .bBpbType,   db bpbFat12
  1769                              <1>         at .wOpenCnt,   dw 0
  1770                              <1>         at .bDevType,   db typeGenRem   ;Init to generic removable device
  1771                              <1>         at .wDevFlgs,   dw 0
  1772                              <1>         at .wNumCyl,    dw 63   
  1773                              <1>         istruc bpb32
  1774                              <1>             at .bytsPerSec, dw 200h
  1775                              <1>             at .secPerClus, db 01h
  1776                              <1>             at .revdSecCnt, dw 0001h
  1777                              <1>             at .numFATs,    db 02h    
  1778                              <1>             at .rootEntCnt, dw 00E0h    
  1779                              <1>             at .totSec16,   dw 0B40h    
  1780                              <1>             at .media,      db 0F0h    
  1781                              <1>             at .FATsz16,    dw 0009h    
  1782                              <1>             at .secPerTrk,  dw 0012h    
  1783                              <1>             at .numHeads,   dw 0002h    
  1784                              <1>             at .hiddSec,    dd 0    
  1785                              <1>             at .totSec32,   dd 0     
  1786                              <1>             at .FATsz32,    dd 0
  1787                              <1>             at .extFlags,   dw 0
  1788                              <1>             at .FSver,      dw 0
  1789                              <1>             at .RootClus,   dd 0
  1790                              <1>             at .FSinfo,     dw 0
  1791                              <1>             at .BkBootSec,  dw 0
  1792                              <1>             at .reserved,   db 12 dup (0) 
  1793                              <1>         iend
  1794                              <1>         at .dAccTime,   dd -1 
  1795                              <1>         at .volLab,     db "NO NAME    ",0
  1796                              <1>         at .volId,      dd 0    ;Vol ID of 0
  1797                              <1>         at .filSysType, db "FAT12   ",0
  1798                              <1>     iend
  1799                              <1>         %assign i i+1
  1800                              <1>     %endrep
  1743                              <2>  istruc drvBlk
  1744 00002331 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002339 00                  <2>  at .bBIOSNum, db i
  1746 0000233A 00                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 0000233B 0002                <2>  at .wBpS, dw 200h
  1749 0000233D FF                  <2>  at .bSpC, db -1
  1750 0000233E 0100                <2>  at .wResC, dw 0001h
  1751 00002340 02                  <2>  at .bNumFAT, db 02h
  1752 00002341 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002343 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002345 00                  <2>  at .bMedDesc, db 00h
  1755 00002346 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002348 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 0000234A 0200                <2>  at .wNumHeads, dw 0002h
  1758 0000234C 00000000            <2>  at .dHiddSec, dd 0
  1759 00002350 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002354 00000000            <2>  at .FATsz32, dd 0
  1762 00002358 0000                <2>  at .extFlags, dw 0
  1763 0000235A 0000                <2>  at .FSver, dw 0
  1764 0000235C 00000000            <2>  at .RootClus, dd 0
  1765 00002360 0000                <2>  at .FSinfo, dw 0
  1766 00002362 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002364 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002365 0000                <2>  at .wOpenCnt, dw 0
  1770 00002367 07                  <2>  at .bDevType, db typeGenRem
  1771 00002368 0000                <2>  at .wDevFlgs, dw 0
  1772 0000236A 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 0000236C 0002                <2>  at .bytsPerSec, dw 200h
  1775 0000236E 01                  <2>  at .secPerClus, db 01h
  1776 0000236F 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002371 02                  <2>  at .numFATs, db 02h
  1778 00002372 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002374 400B                <2>  at .totSec16, dw 0B40h
  1780 00002376 F0                  <2>  at .media, db 0F0h
  1781 00002377 0900                <2>  at .FATsz16, dw 0009h
  1782 00002379 1200                <2>  at .secPerTrk, dw 0012h
  1783 0000237B 0200                <2>  at .numHeads, dw 0002h
  1784 0000237D 00000000            <2>  at .hiddSec, dd 0
  1785 00002381 00000000            <2>  at .totSec32, dd 0
  1786 00002385 00000000            <2>  at .FATsz32, dd 0
  1787 00002389 0000                <2>  at .extFlags, dw 0
  1788 0000238B 0000                <2>  at .FSver, dw 0
  1789 0000238D 00000000            <2>  at .RootClus, dd 0
  1790 00002391 0000                <2>  at .FSinfo, dw 0
  1791 00002393 0000                <2>  at .BkBootSec, dw 0
  1792 00002395 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 0000239E 000000              <2>
  1793                              <2>  iend
  1794 000023A1 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 000023A5 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 000023AE 202000              <2>
  1796 000023B1 00000000            <2>  at .volId, dd 0
  1797 000023B5 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 000023BE FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 000023C6 01                  <2>  at .bBIOSNum, db i
  1746 000023C7 01                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 000023C8 0002                <2>  at .wBpS, dw 200h
  1749 000023CA FF                  <2>  at .bSpC, db -1
  1750 000023CB 0100                <2>  at .wResC, dw 0001h
  1751 000023CD 02                  <2>  at .bNumFAT, db 02h
  1752 000023CE E000                <2>  at .wRtCntNum, dw 00E0h
  1753 000023D0 400B                <2>  at .wTotSec16, dw 0B40h
  1754 000023D2 00                  <2>  at .bMedDesc, db 00h
  1755 000023D3 0900                <2>  at .wFATsz16, dw 0009h
  1756 000023D5 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 000023D7 0200                <2>  at .wNumHeads, dw 0002h
  1758 000023D9 00000000            <2>  at .dHiddSec, dd 0
  1759 000023DD 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 000023E1 00000000            <2>  at .FATsz32, dd 0
  1762 000023E5 0000                <2>  at .extFlags, dw 0
  1763 000023E7 0000                <2>  at .FSver, dw 0
  1764 000023E9 00000000            <2>  at .RootClus, dd 0
  1765 000023ED 0000                <2>  at .FSinfo, dw 0
  1766 000023EF 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 000023F1 10                  <2>  at .bBpbType, db bpbFat12
  1769 000023F2 0000                <2>  at .wOpenCnt, dw 0
  1770 000023F4 07                  <2>  at .bDevType, db typeGenRem
  1771 000023F5 0000                <2>  at .wDevFlgs, dw 0
  1772 000023F7 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 000023F9 0002                <2>  at .bytsPerSec, dw 200h
  1775 000023FB 01                  <2>  at .secPerClus, db 01h
  1776 000023FC 0100                <2>  at .revdSecCnt, dw 0001h
  1777 000023FE 02                  <2>  at .numFATs, db 02h
  1778 000023FF E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002401 400B                <2>  at .totSec16, dw 0B40h
  1780 00002403 F0                  <2>  at .media, db 0F0h
  1781 00002404 0900                <2>  at .FATsz16, dw 0009h
  1782 00002406 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002408 0200                <2>  at .numHeads, dw 0002h
  1784 0000240A 00000000            <2>  at .hiddSec, dd 0
  1785 0000240E 00000000            <2>  at .totSec32, dd 0
  1786 00002412 00000000            <2>  at .FATsz32, dd 0
  1787 00002416 0000                <2>  at .extFlags, dw 0
  1788 00002418 0000                <2>  at .FSver, dw 0
  1789 0000241A 00000000            <2>  at .RootClus, dd 0
  1790 0000241E 0000                <2>  at .FSinfo, dw 0
  1791 00002420 0000                <2>  at .BkBootSec, dw 0
  1792 00002422 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 0000242B 000000              <2>
  1793                              <2>  iend
  1794 0000242E FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002432 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 0000243B 202000              <2>
  1796 0000243E 00000000            <2>  at .volId, dd 0
  1797 00002442 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 0000244B FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002453 02                  <2>  at .bBIOSNum, db i
  1746 00002454 02                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002455 0002                <2>  at .wBpS, dw 200h
  1749 00002457 FF                  <2>  at .bSpC, db -1
  1750 00002458 0100                <2>  at .wResC, dw 0001h
  1751 0000245A 02                  <2>  at .bNumFAT, db 02h
  1752 0000245B E000                <2>  at .wRtCntNum, dw 00E0h
  1753 0000245D 400B                <2>  at .wTotSec16, dw 0B40h
  1754 0000245F 00                  <2>  at .bMedDesc, db 00h
  1755 00002460 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002462 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002464 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002466 00000000            <2>  at .dHiddSec, dd 0
  1759 0000246A 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 0000246E 00000000            <2>  at .FATsz32, dd 0
  1762 00002472 0000                <2>  at .extFlags, dw 0
  1763 00002474 0000                <2>  at .FSver, dw 0
  1764 00002476 00000000            <2>  at .RootClus, dd 0
  1765 0000247A 0000                <2>  at .FSinfo, dw 0
  1766 0000247C 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 0000247E 10                  <2>  at .bBpbType, db bpbFat12
  1769 0000247F 0000                <2>  at .wOpenCnt, dw 0
  1770 00002481 07                  <2>  at .bDevType, db typeGenRem
  1771 00002482 0000                <2>  at .wDevFlgs, dw 0
  1772 00002484 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002486 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002488 01                  <2>  at .secPerClus, db 01h
  1776 00002489 0100                <2>  at .revdSecCnt, dw 0001h
  1777 0000248B 02                  <2>  at .numFATs, db 02h
  1778 0000248C E000                <2>  at .rootEntCnt, dw 00E0h
  1779 0000248E 400B                <2>  at .totSec16, dw 0B40h
  1780 00002490 F0                  <2>  at .media, db 0F0h
  1781 00002491 0900                <2>  at .FATsz16, dw 0009h
  1782 00002493 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002495 0200                <2>  at .numHeads, dw 0002h
  1784 00002497 00000000            <2>  at .hiddSec, dd 0
  1785 0000249B 00000000            <2>  at .totSec32, dd 0
  1786 0000249F 00000000            <2>  at .FATsz32, dd 0
  1787 000024A3 0000                <2>  at .extFlags, dw 0
  1788 000024A5 0000                <2>  at .FSver, dw 0
  1789 000024A7 00000000            <2>  at .RootClus, dd 0
  1790 000024AB 0000                <2>  at .FSinfo, dw 0
  1791 000024AD 0000                <2>  at .BkBootSec, dw 0
  1792 000024AF 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 000024B8 000000              <2>
  1793                              <2>  iend
  1794 000024BB FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 000024BF 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 000024C8 202000              <2>
  1796 000024CB 00000000            <2>  at .volId, dd 0
  1797 000024CF 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 000024D8 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 000024E0 03                  <2>  at .bBIOSNum, db i
  1746 000024E1 03                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 000024E2 0002                <2>  at .wBpS, dw 200h
  1749 000024E4 FF                  <2>  at .bSpC, db -1
  1750 000024E5 0100                <2>  at .wResC, dw 0001h
  1751 000024E7 02                  <2>  at .bNumFAT, db 02h
  1752 000024E8 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 000024EA 400B                <2>  at .wTotSec16, dw 0B40h
  1754 000024EC 00                  <2>  at .bMedDesc, db 00h
  1755 000024ED 0900                <2>  at .wFATsz16, dw 0009h
  1756 000024EF 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 000024F1 0200                <2>  at .wNumHeads, dw 0002h
  1758 000024F3 00000000            <2>  at .dHiddSec, dd 0
  1759 000024F7 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 000024FB 00000000            <2>  at .FATsz32, dd 0
  1762 000024FF 0000                <2>  at .extFlags, dw 0
  1763 00002501 0000                <2>  at .FSver, dw 0
  1764 00002503 00000000            <2>  at .RootClus, dd 0
  1765 00002507 0000                <2>  at .FSinfo, dw 0
  1766 00002509 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 0000250B 10                  <2>  at .bBpbType, db bpbFat12
  1769 0000250C 0000                <2>  at .wOpenCnt, dw 0
  1770 0000250E 07                  <2>  at .bDevType, db typeGenRem
  1771 0000250F 0000                <2>  at .wDevFlgs, dw 0
  1772 00002511 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002513 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002515 01                  <2>  at .secPerClus, db 01h
  1776 00002516 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002518 02                  <2>  at .numFATs, db 02h
  1778 00002519 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 0000251B 400B                <2>  at .totSec16, dw 0B40h
  1780 0000251D F0                  <2>  at .media, db 0F0h
  1781 0000251E 0900                <2>  at .FATsz16, dw 0009h
  1782 00002520 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002522 0200                <2>  at .numHeads, dw 0002h
  1784 00002524 00000000            <2>  at .hiddSec, dd 0
  1785 00002528 00000000            <2>  at .totSec32, dd 0
  1786 0000252C 00000000            <2>  at .FATsz32, dd 0
  1787 00002530 0000                <2>  at .extFlags, dw 0
  1788 00002532 0000                <2>  at .FSver, dw 0
  1789 00002534 00000000            <2>  at .RootClus, dd 0
  1790 00002538 0000                <2>  at .FSinfo, dw 0
  1791 0000253A 0000                <2>  at .BkBootSec, dw 0
  1792 0000253C 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002545 000000              <2>
  1793                              <2>  iend
  1794 00002548 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 0000254C 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002555 202000              <2>
  1796 00002558 00000000            <2>  at .volId, dd 0
  1797 0000255C 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002565 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 0000256D 04                  <2>  at .bBIOSNum, db i
  1746 0000256E 04                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 0000256F 0002                <2>  at .wBpS, dw 200h
  1749 00002571 FF                  <2>  at .bSpC, db -1
  1750 00002572 0100                <2>  at .wResC, dw 0001h
  1751 00002574 02                  <2>  at .bNumFAT, db 02h
  1752 00002575 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002577 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002579 00                  <2>  at .bMedDesc, db 00h
  1755 0000257A 0900                <2>  at .wFATsz16, dw 0009h
  1756 0000257C 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 0000257E 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002580 00000000            <2>  at .dHiddSec, dd 0
  1759 00002584 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002588 00000000            <2>  at .FATsz32, dd 0
  1762 0000258C 0000                <2>  at .extFlags, dw 0
  1763 0000258E 0000                <2>  at .FSver, dw 0
  1764 00002590 00000000            <2>  at .RootClus, dd 0
  1765 00002594 0000                <2>  at .FSinfo, dw 0
  1766 00002596 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002598 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002599 0000                <2>  at .wOpenCnt, dw 0
  1770 0000259B 07                  <2>  at .bDevType, db typeGenRem
  1771 0000259C 0000                <2>  at .wDevFlgs, dw 0
  1772 0000259E 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 000025A0 0002                <2>  at .bytsPerSec, dw 200h
  1775 000025A2 01                  <2>  at .secPerClus, db 01h
  1776 000025A3 0100                <2>  at .revdSecCnt, dw 0001h
  1777 000025A5 02                  <2>  at .numFATs, db 02h
  1778 000025A6 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 000025A8 400B                <2>  at .totSec16, dw 0B40h
  1780 000025AA F0                  <2>  at .media, db 0F0h
  1781 000025AB 0900                <2>  at .FATsz16, dw 0009h
  1782 000025AD 1200                <2>  at .secPerTrk, dw 0012h
  1783 000025AF 0200                <2>  at .numHeads, dw 0002h
  1784 000025B1 00000000            <2>  at .hiddSec, dd 0
  1785 000025B5 00000000            <2>  at .totSec32, dd 0
  1786 000025B9 00000000            <2>  at .FATsz32, dd 0
  1787 000025BD 0000                <2>  at .extFlags, dw 0
  1788 000025BF 0000                <2>  at .FSver, dw 0
  1789 000025C1 00000000            <2>  at .RootClus, dd 0
  1790 000025C5 0000                <2>  at .FSinfo, dw 0
  1791 000025C7 0000                <2>  at .BkBootSec, dw 0
  1792 000025C9 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 000025D2 000000              <2>
  1793                              <2>  iend
  1794 000025D5 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 000025D9 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 000025E2 202000              <2>
  1796 000025E5 00000000            <2>  at .volId, dd 0
  1797 000025E9 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 000025F2 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 000025FA 05                  <2>  at .bBIOSNum, db i
  1746 000025FB 05                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 000025FC 0002                <2>  at .wBpS, dw 200h
  1749 000025FE FF                  <2>  at .bSpC, db -1
  1750 000025FF 0100                <2>  at .wResC, dw 0001h
  1751 00002601 02                  <2>  at .bNumFAT, db 02h
  1752 00002602 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002604 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002606 00                  <2>  at .bMedDesc, db 00h
  1755 00002607 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002609 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 0000260B 0200                <2>  at .wNumHeads, dw 0002h
  1758 0000260D 00000000            <2>  at .dHiddSec, dd 0
  1759 00002611 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002615 00000000            <2>  at .FATsz32, dd 0
  1762 00002619 0000                <2>  at .extFlags, dw 0
  1763 0000261B 0000                <2>  at .FSver, dw 0
  1764 0000261D 00000000            <2>  at .RootClus, dd 0
  1765 00002621 0000                <2>  at .FSinfo, dw 0
  1766 00002623 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002625 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002626 0000                <2>  at .wOpenCnt, dw 0
  1770 00002628 07                  <2>  at .bDevType, db typeGenRem
  1771 00002629 0000                <2>  at .wDevFlgs, dw 0
  1772 0000262B 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 0000262D 0002                <2>  at .bytsPerSec, dw 200h
  1775 0000262F 01                  <2>  at .secPerClus, db 01h
  1776 00002630 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002632 02                  <2>  at .numFATs, db 02h
  1778 00002633 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002635 400B                <2>  at .totSec16, dw 0B40h
  1780 00002637 F0                  <2>  at .media, db 0F0h
  1781 00002638 0900                <2>  at .FATsz16, dw 0009h
  1782 0000263A 1200                <2>  at .secPerTrk, dw 0012h
  1783 0000263C 0200                <2>  at .numHeads, dw 0002h
  1784 0000263E 00000000            <2>  at .hiddSec, dd 0
  1785 00002642 00000000            <2>  at .totSec32, dd 0
  1786 00002646 00000000            <2>  at .FATsz32, dd 0
  1787 0000264A 0000                <2>  at .extFlags, dw 0
  1788 0000264C 0000                <2>  at .FSver, dw 0
  1789 0000264E 00000000            <2>  at .RootClus, dd 0
  1790 00002652 0000                <2>  at .FSinfo, dw 0
  1791 00002654 0000                <2>  at .BkBootSec, dw 0
  1792 00002656 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 0000265F 000000              <2>
  1793                              <2>  iend
  1794 00002662 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002666 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 0000266F 202000              <2>
  1796 00002672 00000000            <2>  at .volId, dd 0
  1797 00002676 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 0000267F FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002687 06                  <2>  at .bBIOSNum, db i
  1746 00002688 06                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002689 0002                <2>  at .wBpS, dw 200h
  1749 0000268B FF                  <2>  at .bSpC, db -1
  1750 0000268C 0100                <2>  at .wResC, dw 0001h
  1751 0000268E 02                  <2>  at .bNumFAT, db 02h
  1752 0000268F E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002691 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002693 00                  <2>  at .bMedDesc, db 00h
  1755 00002694 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002696 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002698 0200                <2>  at .wNumHeads, dw 0002h
  1758 0000269A 00000000            <2>  at .dHiddSec, dd 0
  1759 0000269E 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 000026A2 00000000            <2>  at .FATsz32, dd 0
  1762 000026A6 0000                <2>  at .extFlags, dw 0
  1763 000026A8 0000                <2>  at .FSver, dw 0
  1764 000026AA 00000000            <2>  at .RootClus, dd 0
  1765 000026AE 0000                <2>  at .FSinfo, dw 0
  1766 000026B0 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 000026B2 10                  <2>  at .bBpbType, db bpbFat12
  1769 000026B3 0000                <2>  at .wOpenCnt, dw 0
  1770 000026B5 07                  <2>  at .bDevType, db typeGenRem
  1771 000026B6 0000                <2>  at .wDevFlgs, dw 0
  1772 000026B8 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 000026BA 0002                <2>  at .bytsPerSec, dw 200h
  1775 000026BC 01                  <2>  at .secPerClus, db 01h
  1776 000026BD 0100                <2>  at .revdSecCnt, dw 0001h
  1777 000026BF 02                  <2>  at .numFATs, db 02h
  1778 000026C0 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 000026C2 400B                <2>  at .totSec16, dw 0B40h
  1780 000026C4 F0                  <2>  at .media, db 0F0h
  1781 000026C5 0900                <2>  at .FATsz16, dw 0009h
  1782 000026C7 1200                <2>  at .secPerTrk, dw 0012h
  1783 000026C9 0200                <2>  at .numHeads, dw 0002h
  1784 000026CB 00000000            <2>  at .hiddSec, dd 0
  1785 000026CF 00000000            <2>  at .totSec32, dd 0
  1786 000026D3 00000000            <2>  at .FATsz32, dd 0
  1787 000026D7 0000                <2>  at .extFlags, dw 0
  1788 000026D9 0000                <2>  at .FSver, dw 0
  1789 000026DB 00000000            <2>  at .RootClus, dd 0
  1790 000026DF 0000                <2>  at .FSinfo, dw 0
  1791 000026E1 0000                <2>  at .BkBootSec, dw 0
  1792 000026E3 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 000026EC 000000              <2>
  1793                              <2>  iend
  1794 000026EF FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 000026F3 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 000026FC 202000              <2>
  1796 000026FF 00000000            <2>  at .volId, dd 0
  1797 00002703 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 0000270C FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002714 07                  <2>  at .bBIOSNum, db i
  1746 00002715 07                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002716 0002                <2>  at .wBpS, dw 200h
  1749 00002718 FF                  <2>  at .bSpC, db -1
  1750 00002719 0100                <2>  at .wResC, dw 0001h
  1751 0000271B 02                  <2>  at .bNumFAT, db 02h
  1752 0000271C E000                <2>  at .wRtCntNum, dw 00E0h
  1753 0000271E 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002720 00                  <2>  at .bMedDesc, db 00h
  1755 00002721 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002723 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002725 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002727 00000000            <2>  at .dHiddSec, dd 0
  1759 0000272B 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 0000272F 00000000            <2>  at .FATsz32, dd 0
  1762 00002733 0000                <2>  at .extFlags, dw 0
  1763 00002735 0000                <2>  at .FSver, dw 0
  1764 00002737 00000000            <2>  at .RootClus, dd 0
  1765 0000273B 0000                <2>  at .FSinfo, dw 0
  1766 0000273D 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 0000273F 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002740 0000                <2>  at .wOpenCnt, dw 0
  1770 00002742 07                  <2>  at .bDevType, db typeGenRem
  1771 00002743 0000                <2>  at .wDevFlgs, dw 0
  1772 00002745 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002747 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002749 01                  <2>  at .secPerClus, db 01h
  1776 0000274A 0100                <2>  at .revdSecCnt, dw 0001h
  1777 0000274C 02                  <2>  at .numFATs, db 02h
  1778 0000274D E000                <2>  at .rootEntCnt, dw 00E0h
  1779 0000274F 400B                <2>  at .totSec16, dw 0B40h
  1780 00002751 F0                  <2>  at .media, db 0F0h
  1781 00002752 0900                <2>  at .FATsz16, dw 0009h
  1782 00002754 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002756 0200                <2>  at .numHeads, dw 0002h
  1784 00002758 00000000            <2>  at .hiddSec, dd 0
  1785 0000275C 00000000            <2>  at .totSec32, dd 0
  1786 00002760 00000000            <2>  at .FATsz32, dd 0
  1787 00002764 0000                <2>  at .extFlags, dw 0
  1788 00002766 0000                <2>  at .FSver, dw 0
  1789 00002768 00000000            <2>  at .RootClus, dd 0
  1790 0000276C 0000                <2>  at .FSinfo, dw 0
  1791 0000276E 0000                <2>  at .BkBootSec, dw 0
  1792 00002770 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002779 000000              <2>
  1793                              <2>  iend
  1794 0000277C FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002780 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002789 202000              <2>
  1796 0000278C 00000000            <2>  at .volId, dd 0
  1797 00002790 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002799 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 000027A1 08                  <2>  at .bBIOSNum, db i
  1746 000027A2 08                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 000027A3 0002                <2>  at .wBpS, dw 200h
  1749 000027A5 FF                  <2>  at .bSpC, db -1
  1750 000027A6 0100                <2>  at .wResC, dw 0001h
  1751 000027A8 02                  <2>  at .bNumFAT, db 02h
  1752 000027A9 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 000027AB 400B                <2>  at .wTotSec16, dw 0B40h
  1754 000027AD 00                  <2>  at .bMedDesc, db 00h
  1755 000027AE 0900                <2>  at .wFATsz16, dw 0009h
  1756 000027B0 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 000027B2 0200                <2>  at .wNumHeads, dw 0002h
  1758 000027B4 00000000            <2>  at .dHiddSec, dd 0
  1759 000027B8 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 000027BC 00000000            <2>  at .FATsz32, dd 0
  1762 000027C0 0000                <2>  at .extFlags, dw 0
  1763 000027C2 0000                <2>  at .FSver, dw 0
  1764 000027C4 00000000            <2>  at .RootClus, dd 0
  1765 000027C8 0000                <2>  at .FSinfo, dw 0
  1766 000027CA 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 000027CC 10                  <2>  at .bBpbType, db bpbFat12
  1769 000027CD 0000                <2>  at .wOpenCnt, dw 0
  1770 000027CF 07                  <2>  at .bDevType, db typeGenRem
  1771 000027D0 0000                <2>  at .wDevFlgs, dw 0
  1772 000027D2 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 000027D4 0002                <2>  at .bytsPerSec, dw 200h
  1775 000027D6 01                  <2>  at .secPerClus, db 01h
  1776 000027D7 0100                <2>  at .revdSecCnt, dw 0001h
  1777 000027D9 02                  <2>  at .numFATs, db 02h
  1778 000027DA E000                <2>  at .rootEntCnt, dw 00E0h
  1779 000027DC 400B                <2>  at .totSec16, dw 0B40h
  1780 000027DE F0                  <2>  at .media, db 0F0h
  1781 000027DF 0900                <2>  at .FATsz16, dw 0009h
  1782 000027E1 1200                <2>  at .secPerTrk, dw 0012h
  1783 000027E3 0200                <2>  at .numHeads, dw 0002h
  1784 000027E5 00000000            <2>  at .hiddSec, dd 0
  1785 000027E9 00000000            <2>  at .totSec32, dd 0
  1786 000027ED 00000000            <2>  at .FATsz32, dd 0
  1787 000027F1 0000                <2>  at .extFlags, dw 0
  1788 000027F3 0000                <2>  at .FSver, dw 0
  1789 000027F5 00000000            <2>  at .RootClus, dd 0
  1790 000027F9 0000                <2>  at .FSinfo, dw 0
  1791 000027FB 0000                <2>  at .BkBootSec, dw 0
  1792 000027FD 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002806 000000              <2>
  1793                              <2>  iend
  1794 00002809 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 0000280D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002816 202000              <2>
  1796 00002819 00000000            <2>  at .volId, dd 0
  1797 0000281D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002826 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 0000282E 09                  <2>  at .bBIOSNum, db i
  1746 0000282F 09                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002830 0002                <2>  at .wBpS, dw 200h
  1749 00002832 FF                  <2>  at .bSpC, db -1
  1750 00002833 0100                <2>  at .wResC, dw 0001h
  1751 00002835 02                  <2>  at .bNumFAT, db 02h
  1752 00002836 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002838 400B                <2>  at .wTotSec16, dw 0B40h
  1754 0000283A 00                  <2>  at .bMedDesc, db 00h
  1755 0000283B 0900                <2>  at .wFATsz16, dw 0009h
  1756 0000283D 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 0000283F 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002841 00000000            <2>  at .dHiddSec, dd 0
  1759 00002845 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002849 00000000            <2>  at .FATsz32, dd 0
  1762 0000284D 0000                <2>  at .extFlags, dw 0
  1763 0000284F 0000                <2>  at .FSver, dw 0
  1764 00002851 00000000            <2>  at .RootClus, dd 0
  1765 00002855 0000                <2>  at .FSinfo, dw 0
  1766 00002857 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002859 10                  <2>  at .bBpbType, db bpbFat12
  1769 0000285A 0000                <2>  at .wOpenCnt, dw 0
  1770 0000285C 07                  <2>  at .bDevType, db typeGenRem
  1771 0000285D 0000                <2>  at .wDevFlgs, dw 0
  1772 0000285F 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002861 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002863 01                  <2>  at .secPerClus, db 01h
  1776 00002864 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002866 02                  <2>  at .numFATs, db 02h
  1778 00002867 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002869 400B                <2>  at .totSec16, dw 0B40h
  1780 0000286B F0                  <2>  at .media, db 0F0h
  1781 0000286C 0900                <2>  at .FATsz16, dw 0009h
  1782 0000286E 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002870 0200                <2>  at .numHeads, dw 0002h
  1784 00002872 00000000            <2>  at .hiddSec, dd 0
  1785 00002876 00000000            <2>  at .totSec32, dd 0
  1786 0000287A 00000000            <2>  at .FATsz32, dd 0
  1787 0000287E 0000                <2>  at .extFlags, dw 0
  1788 00002880 0000                <2>  at .FSver, dw 0
  1789 00002882 00000000            <2>  at .RootClus, dd 0
  1790 00002886 0000                <2>  at .FSinfo, dw 0
  1791 00002888 0000                <2>  at .BkBootSec, dw 0
  1792 0000288A 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002893 000000              <2>
  1793                              <2>  iend
  1794 00002896 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 0000289A 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 000028A3 202000              <2>
  1796 000028A6 00000000            <2>  at .volId, dd 0
  1797 000028AA 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 000028B3 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 000028BB 0A                  <2>  at .bBIOSNum, db i
  1746 000028BC 0A                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 000028BD 0002                <2>  at .wBpS, dw 200h
  1749 000028BF FF                  <2>  at .bSpC, db -1
  1750 000028C0 0100                <2>  at .wResC, dw 0001h
  1751 000028C2 02                  <2>  at .bNumFAT, db 02h
  1752 000028C3 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 000028C5 400B                <2>  at .wTotSec16, dw 0B40h
  1754 000028C7 00                  <2>  at .bMedDesc, db 00h
  1755 000028C8 0900                <2>  at .wFATsz16, dw 0009h
  1756 000028CA 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 000028CC 0200                <2>  at .wNumHeads, dw 0002h
  1758 000028CE 00000000            <2>  at .dHiddSec, dd 0
  1759 000028D2 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 000028D6 00000000            <2>  at .FATsz32, dd 0
  1762 000028DA 0000                <2>  at .extFlags, dw 0
  1763 000028DC 0000                <2>  at .FSver, dw 0
  1764 000028DE 00000000            <2>  at .RootClus, dd 0
  1765 000028E2 0000                <2>  at .FSinfo, dw 0
  1766 000028E4 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 000028E6 10                  <2>  at .bBpbType, db bpbFat12
  1769 000028E7 0000                <2>  at .wOpenCnt, dw 0
  1770 000028E9 07                  <2>  at .bDevType, db typeGenRem
  1771 000028EA 0000                <2>  at .wDevFlgs, dw 0
  1772 000028EC 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 000028EE 0002                <2>  at .bytsPerSec, dw 200h
  1775 000028F0 01                  <2>  at .secPerClus, db 01h
  1776 000028F1 0100                <2>  at .revdSecCnt, dw 0001h
  1777 000028F3 02                  <2>  at .numFATs, db 02h
  1778 000028F4 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 000028F6 400B                <2>  at .totSec16, dw 0B40h
  1780 000028F8 F0                  <2>  at .media, db 0F0h
  1781 000028F9 0900                <2>  at .FATsz16, dw 0009h
  1782 000028FB 1200                <2>  at .secPerTrk, dw 0012h
  1783 000028FD 0200                <2>  at .numHeads, dw 0002h
  1784 000028FF 00000000            <2>  at .hiddSec, dd 0
  1785 00002903 00000000            <2>  at .totSec32, dd 0
  1786 00002907 00000000            <2>  at .FATsz32, dd 0
  1787 0000290B 0000                <2>  at .extFlags, dw 0
  1788 0000290D 0000                <2>  at .FSver, dw 0
  1789 0000290F 00000000            <2>  at .RootClus, dd 0
  1790 00002913 0000                <2>  at .FSinfo, dw 0
  1791 00002915 0000                <2>  at .BkBootSec, dw 0
  1792 00002917 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002920 000000              <2>
  1793                              <2>  iend
  1794 00002923 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002927 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002930 202000              <2>
  1796 00002933 00000000            <2>  at .volId, dd 0
  1797 00002937 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002940 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002948 0B                  <2>  at .bBIOSNum, db i
  1746 00002949 0B                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 0000294A 0002                <2>  at .wBpS, dw 200h
  1749 0000294C FF                  <2>  at .bSpC, db -1
  1750 0000294D 0100                <2>  at .wResC, dw 0001h
  1751 0000294F 02                  <2>  at .bNumFAT, db 02h
  1752 00002950 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002952 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002954 00                  <2>  at .bMedDesc, db 00h
  1755 00002955 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002957 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002959 0200                <2>  at .wNumHeads, dw 0002h
  1758 0000295B 00000000            <2>  at .dHiddSec, dd 0
  1759 0000295F 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002963 00000000            <2>  at .FATsz32, dd 0
  1762 00002967 0000                <2>  at .extFlags, dw 0
  1763 00002969 0000                <2>  at .FSver, dw 0
  1764 0000296B 00000000            <2>  at .RootClus, dd 0
  1765 0000296F 0000                <2>  at .FSinfo, dw 0
  1766 00002971 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002973 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002974 0000                <2>  at .wOpenCnt, dw 0
  1770 00002976 07                  <2>  at .bDevType, db typeGenRem
  1771 00002977 0000                <2>  at .wDevFlgs, dw 0
  1772 00002979 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 0000297B 0002                <2>  at .bytsPerSec, dw 200h
  1775 0000297D 01                  <2>  at .secPerClus, db 01h
  1776 0000297E 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002980 02                  <2>  at .numFATs, db 02h
  1778 00002981 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002983 400B                <2>  at .totSec16, dw 0B40h
  1780 00002985 F0                  <2>  at .media, db 0F0h
  1781 00002986 0900                <2>  at .FATsz16, dw 0009h
  1782 00002988 1200                <2>  at .secPerTrk, dw 0012h
  1783 0000298A 0200                <2>  at .numHeads, dw 0002h
  1784 0000298C 00000000            <2>  at .hiddSec, dd 0
  1785 00002990 00000000            <2>  at .totSec32, dd 0
  1786 00002994 00000000            <2>  at .FATsz32, dd 0
  1787 00002998 0000                <2>  at .extFlags, dw 0
  1788 0000299A 0000                <2>  at .FSver, dw 0
  1789 0000299C 00000000            <2>  at .RootClus, dd 0
  1790 000029A0 0000                <2>  at .FSinfo, dw 0
  1791 000029A2 0000                <2>  at .BkBootSec, dw 0
  1792 000029A4 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 000029AD 000000              <2>
  1793                              <2>  iend
  1794 000029B0 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 000029B4 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 000029BD 202000              <2>
  1796 000029C0 00000000            <2>  at .volId, dd 0
  1797 000029C4 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 000029CD FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 000029D5 0C                  <2>  at .bBIOSNum, db i
  1746 000029D6 0C                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 000029D7 0002                <2>  at .wBpS, dw 200h
  1749 000029D9 FF                  <2>  at .bSpC, db -1
  1750 000029DA 0100                <2>  at .wResC, dw 0001h
  1751 000029DC 02                  <2>  at .bNumFAT, db 02h
  1752 000029DD E000                <2>  at .wRtCntNum, dw 00E0h
  1753 000029DF 400B                <2>  at .wTotSec16, dw 0B40h
  1754 000029E1 00                  <2>  at .bMedDesc, db 00h
  1755 000029E2 0900                <2>  at .wFATsz16, dw 0009h
  1756 000029E4 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 000029E6 0200                <2>  at .wNumHeads, dw 0002h
  1758 000029E8 00000000            <2>  at .dHiddSec, dd 0
  1759 000029EC 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 000029F0 00000000            <2>  at .FATsz32, dd 0
  1762 000029F4 0000                <2>  at .extFlags, dw 0
  1763 000029F6 0000                <2>  at .FSver, dw 0
  1764 000029F8 00000000            <2>  at .RootClus, dd 0
  1765 000029FC 0000                <2>  at .FSinfo, dw 0
  1766 000029FE 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002A00 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002A01 0000                <2>  at .wOpenCnt, dw 0
  1770 00002A03 07                  <2>  at .bDevType, db typeGenRem
  1771 00002A04 0000                <2>  at .wDevFlgs, dw 0
  1772 00002A06 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002A08 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002A0A 01                  <2>  at .secPerClus, db 01h
  1776 00002A0B 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002A0D 02                  <2>  at .numFATs, db 02h
  1778 00002A0E E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002A10 400B                <2>  at .totSec16, dw 0B40h
  1780 00002A12 F0                  <2>  at .media, db 0F0h
  1781 00002A13 0900                <2>  at .FATsz16, dw 0009h
  1782 00002A15 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002A17 0200                <2>  at .numHeads, dw 0002h
  1784 00002A19 00000000            <2>  at .hiddSec, dd 0
  1785 00002A1D 00000000            <2>  at .totSec32, dd 0
  1786 00002A21 00000000            <2>  at .FATsz32, dd 0
  1787 00002A25 0000                <2>  at .extFlags, dw 0
  1788 00002A27 0000                <2>  at .FSver, dw 0
  1789 00002A29 00000000            <2>  at .RootClus, dd 0
  1790 00002A2D 0000                <2>  at .FSinfo, dw 0
  1791 00002A2F 0000                <2>  at .BkBootSec, dw 0
  1792 00002A31 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002A3A 000000              <2>
  1793                              <2>  iend
  1794 00002A3D FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002A41 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002A4A 202000              <2>
  1796 00002A4D 00000000            <2>  at .volId, dd 0
  1797 00002A51 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002A5A FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002A62 0D                  <2>  at .bBIOSNum, db i
  1746 00002A63 0D                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002A64 0002                <2>  at .wBpS, dw 200h
  1749 00002A66 FF                  <2>  at .bSpC, db -1
  1750 00002A67 0100                <2>  at .wResC, dw 0001h
  1751 00002A69 02                  <2>  at .bNumFAT, db 02h
  1752 00002A6A E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002A6C 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002A6E 00                  <2>  at .bMedDesc, db 00h
  1755 00002A6F 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002A71 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002A73 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002A75 00000000            <2>  at .dHiddSec, dd 0
  1759 00002A79 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002A7D 00000000            <2>  at .FATsz32, dd 0
  1762 00002A81 0000                <2>  at .extFlags, dw 0
  1763 00002A83 0000                <2>  at .FSver, dw 0
  1764 00002A85 00000000            <2>  at .RootClus, dd 0
  1765 00002A89 0000                <2>  at .FSinfo, dw 0
  1766 00002A8B 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002A8D 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002A8E 0000                <2>  at .wOpenCnt, dw 0
  1770 00002A90 07                  <2>  at .bDevType, db typeGenRem
  1771 00002A91 0000                <2>  at .wDevFlgs, dw 0
  1772 00002A93 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002A95 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002A97 01                  <2>  at .secPerClus, db 01h
  1776 00002A98 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002A9A 02                  <2>  at .numFATs, db 02h
  1778 00002A9B E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002A9D 400B                <2>  at .totSec16, dw 0B40h
  1780 00002A9F F0                  <2>  at .media, db 0F0h
  1781 00002AA0 0900                <2>  at .FATsz16, dw 0009h
  1782 00002AA2 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002AA4 0200                <2>  at .numHeads, dw 0002h
  1784 00002AA6 00000000            <2>  at .hiddSec, dd 0
  1785 00002AAA 00000000            <2>  at .totSec32, dd 0
  1786 00002AAE 00000000            <2>  at .FATsz32, dd 0
  1787 00002AB2 0000                <2>  at .extFlags, dw 0
  1788 00002AB4 0000                <2>  at .FSver, dw 0
  1789 00002AB6 00000000            <2>  at .RootClus, dd 0
  1790 00002ABA 0000                <2>  at .FSinfo, dw 0
  1791 00002ABC 0000                <2>  at .BkBootSec, dw 0
  1792 00002ABE 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002AC7 000000              <2>
  1793                              <2>  iend
  1794 00002ACA FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002ACE 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002AD7 202000              <2>
  1796 00002ADA 00000000            <2>  at .volId, dd 0
  1797 00002ADE 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002AE7 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002AEF 0E                  <2>  at .bBIOSNum, db i
  1746 00002AF0 0E                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002AF1 0002                <2>  at .wBpS, dw 200h
  1749 00002AF3 FF                  <2>  at .bSpC, db -1
  1750 00002AF4 0100                <2>  at .wResC, dw 0001h
  1751 00002AF6 02                  <2>  at .bNumFAT, db 02h
  1752 00002AF7 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002AF9 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002AFB 00                  <2>  at .bMedDesc, db 00h
  1755 00002AFC 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002AFE 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002B00 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002B02 00000000            <2>  at .dHiddSec, dd 0
  1759 00002B06 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002B0A 00000000            <2>  at .FATsz32, dd 0
  1762 00002B0E 0000                <2>  at .extFlags, dw 0
  1763 00002B10 0000                <2>  at .FSver, dw 0
  1764 00002B12 00000000            <2>  at .RootClus, dd 0
  1765 00002B16 0000                <2>  at .FSinfo, dw 0
  1766 00002B18 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002B1A 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002B1B 0000                <2>  at .wOpenCnt, dw 0
  1770 00002B1D 07                  <2>  at .bDevType, db typeGenRem
  1771 00002B1E 0000                <2>  at .wDevFlgs, dw 0
  1772 00002B20 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002B22 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002B24 01                  <2>  at .secPerClus, db 01h
  1776 00002B25 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002B27 02                  <2>  at .numFATs, db 02h
  1778 00002B28 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002B2A 400B                <2>  at .totSec16, dw 0B40h
  1780 00002B2C F0                  <2>  at .media, db 0F0h
  1781 00002B2D 0900                <2>  at .FATsz16, dw 0009h
  1782 00002B2F 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002B31 0200                <2>  at .numHeads, dw 0002h
  1784 00002B33 00000000            <2>  at .hiddSec, dd 0
  1785 00002B37 00000000            <2>  at .totSec32, dd 0
  1786 00002B3B 00000000            <2>  at .FATsz32, dd 0
  1787 00002B3F 0000                <2>  at .extFlags, dw 0
  1788 00002B41 0000                <2>  at .FSver, dw 0
  1789 00002B43 00000000            <2>  at .RootClus, dd 0
  1790 00002B47 0000                <2>  at .FSinfo, dw 0
  1791 00002B49 0000                <2>  at .BkBootSec, dw 0
  1792 00002B4B 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002B54 000000              <2>
  1793                              <2>  iend
  1794 00002B57 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002B5B 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002B64 202000              <2>
  1796 00002B67 00000000            <2>  at .volId, dd 0
  1797 00002B6B 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002B74 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002B7C 0F                  <2>  at .bBIOSNum, db i
  1746 00002B7D 0F                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002B7E 0002                <2>  at .wBpS, dw 200h
  1749 00002B80 FF                  <2>  at .bSpC, db -1
  1750 00002B81 0100                <2>  at .wResC, dw 0001h
  1751 00002B83 02                  <2>  at .bNumFAT, db 02h
  1752 00002B84 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002B86 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002B88 00                  <2>  at .bMedDesc, db 00h
  1755 00002B89 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002B8B 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002B8D 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002B8F 00000000            <2>  at .dHiddSec, dd 0
  1759 00002B93 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002B97 00000000            <2>  at .FATsz32, dd 0
  1762 00002B9B 0000                <2>  at .extFlags, dw 0
  1763 00002B9D 0000                <2>  at .FSver, dw 0
  1764 00002B9F 00000000            <2>  at .RootClus, dd 0
  1765 00002BA3 0000                <2>  at .FSinfo, dw 0
  1766 00002BA5 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002BA7 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002BA8 0000                <2>  at .wOpenCnt, dw 0
  1770 00002BAA 07                  <2>  at .bDevType, db typeGenRem
  1771 00002BAB 0000                <2>  at .wDevFlgs, dw 0
  1772 00002BAD 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002BAF 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002BB1 01                  <2>  at .secPerClus, db 01h
  1776 00002BB2 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002BB4 02                  <2>  at .numFATs, db 02h
  1778 00002BB5 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002BB7 400B                <2>  at .totSec16, dw 0B40h
  1780 00002BB9 F0                  <2>  at .media, db 0F0h
  1781 00002BBA 0900                <2>  at .FATsz16, dw 0009h
  1782 00002BBC 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002BBE 0200                <2>  at .numHeads, dw 0002h
  1784 00002BC0 00000000            <2>  at .hiddSec, dd 0
  1785 00002BC4 00000000            <2>  at .totSec32, dd 0
  1786 00002BC8 00000000            <2>  at .FATsz32, dd 0
  1787 00002BCC 0000                <2>  at .extFlags, dw 0
  1788 00002BCE 0000                <2>  at .FSver, dw 0
  1789 00002BD0 00000000            <2>  at .RootClus, dd 0
  1790 00002BD4 0000                <2>  at .FSinfo, dw 0
  1791 00002BD6 0000                <2>  at .BkBootSec, dw 0
  1792 00002BD8 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002BE1 000000              <2>
  1793                              <2>  iend
  1794 00002BE4 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002BE8 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002BF1 202000              <2>
  1796 00002BF4 00000000            <2>  at .volId, dd 0
  1797 00002BF8 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002C01 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002C09 10                  <2>  at .bBIOSNum, db i
  1746 00002C0A 10                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002C0B 0002                <2>  at .wBpS, dw 200h
  1749 00002C0D FF                  <2>  at .bSpC, db -1
  1750 00002C0E 0100                <2>  at .wResC, dw 0001h
  1751 00002C10 02                  <2>  at .bNumFAT, db 02h
  1752 00002C11 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002C13 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002C15 00                  <2>  at .bMedDesc, db 00h
  1755 00002C16 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002C18 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002C1A 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002C1C 00000000            <2>  at .dHiddSec, dd 0
  1759 00002C20 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002C24 00000000            <2>  at .FATsz32, dd 0
  1762 00002C28 0000                <2>  at .extFlags, dw 0
  1763 00002C2A 0000                <2>  at .FSver, dw 0
  1764 00002C2C 00000000            <2>  at .RootClus, dd 0
  1765 00002C30 0000                <2>  at .FSinfo, dw 0
  1766 00002C32 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002C34 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002C35 0000                <2>  at .wOpenCnt, dw 0
  1770 00002C37 07                  <2>  at .bDevType, db typeGenRem
  1771 00002C38 0000                <2>  at .wDevFlgs, dw 0
  1772 00002C3A 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002C3C 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002C3E 01                  <2>  at .secPerClus, db 01h
  1776 00002C3F 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002C41 02                  <2>  at .numFATs, db 02h
  1778 00002C42 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002C44 400B                <2>  at .totSec16, dw 0B40h
  1780 00002C46 F0                  <2>  at .media, db 0F0h
  1781 00002C47 0900                <2>  at .FATsz16, dw 0009h
  1782 00002C49 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002C4B 0200                <2>  at .numHeads, dw 0002h
  1784 00002C4D 00000000            <2>  at .hiddSec, dd 0
  1785 00002C51 00000000            <2>  at .totSec32, dd 0
  1786 00002C55 00000000            <2>  at .FATsz32, dd 0
  1787 00002C59 0000                <2>  at .extFlags, dw 0
  1788 00002C5B 0000                <2>  at .FSver, dw 0
  1789 00002C5D 00000000            <2>  at .RootClus, dd 0
  1790 00002C61 0000                <2>  at .FSinfo, dw 0
  1791 00002C63 0000                <2>  at .BkBootSec, dw 0
  1792 00002C65 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002C6E 000000              <2>
  1793                              <2>  iend
  1794 00002C71 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002C75 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002C7E 202000              <2>
  1796 00002C81 00000000            <2>  at .volId, dd 0
  1797 00002C85 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002C8E FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002C96 11                  <2>  at .bBIOSNum, db i
  1746 00002C97 11                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002C98 0002                <2>  at .wBpS, dw 200h
  1749 00002C9A FF                  <2>  at .bSpC, db -1
  1750 00002C9B 0100                <2>  at .wResC, dw 0001h
  1751 00002C9D 02                  <2>  at .bNumFAT, db 02h
  1752 00002C9E E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002CA0 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002CA2 00                  <2>  at .bMedDesc, db 00h
  1755 00002CA3 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002CA5 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002CA7 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002CA9 00000000            <2>  at .dHiddSec, dd 0
  1759 00002CAD 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002CB1 00000000            <2>  at .FATsz32, dd 0
  1762 00002CB5 0000                <2>  at .extFlags, dw 0
  1763 00002CB7 0000                <2>  at .FSver, dw 0
  1764 00002CB9 00000000            <2>  at .RootClus, dd 0
  1765 00002CBD 0000                <2>  at .FSinfo, dw 0
  1766 00002CBF 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002CC1 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002CC2 0000                <2>  at .wOpenCnt, dw 0
  1770 00002CC4 07                  <2>  at .bDevType, db typeGenRem
  1771 00002CC5 0000                <2>  at .wDevFlgs, dw 0
  1772 00002CC7 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002CC9 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002CCB 01                  <2>  at .secPerClus, db 01h
  1776 00002CCC 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002CCE 02                  <2>  at .numFATs, db 02h
  1778 00002CCF E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002CD1 400B                <2>  at .totSec16, dw 0B40h
  1780 00002CD3 F0                  <2>  at .media, db 0F0h
  1781 00002CD4 0900                <2>  at .FATsz16, dw 0009h
  1782 00002CD6 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002CD8 0200                <2>  at .numHeads, dw 0002h
  1784 00002CDA 00000000            <2>  at .hiddSec, dd 0
  1785 00002CDE 00000000            <2>  at .totSec32, dd 0
  1786 00002CE2 00000000            <2>  at .FATsz32, dd 0
  1787 00002CE6 0000                <2>  at .extFlags, dw 0
  1788 00002CE8 0000                <2>  at .FSver, dw 0
  1789 00002CEA 00000000            <2>  at .RootClus, dd 0
  1790 00002CEE 0000                <2>  at .FSinfo, dw 0
  1791 00002CF0 0000                <2>  at .BkBootSec, dw 0
  1792 00002CF2 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002CFB 000000              <2>
  1793                              <2>  iend
  1794 00002CFE FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002D02 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002D0B 202000              <2>
  1796 00002D0E 00000000            <2>  at .volId, dd 0
  1797 00002D12 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002D1B FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002D23 12                  <2>  at .bBIOSNum, db i
  1746 00002D24 12                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002D25 0002                <2>  at .wBpS, dw 200h
  1749 00002D27 FF                  <2>  at .bSpC, db -1
  1750 00002D28 0100                <2>  at .wResC, dw 0001h
  1751 00002D2A 02                  <2>  at .bNumFAT, db 02h
  1752 00002D2B E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002D2D 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002D2F 00                  <2>  at .bMedDesc, db 00h
  1755 00002D30 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002D32 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002D34 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002D36 00000000            <2>  at .dHiddSec, dd 0
  1759 00002D3A 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002D3E 00000000            <2>  at .FATsz32, dd 0
  1762 00002D42 0000                <2>  at .extFlags, dw 0
  1763 00002D44 0000                <2>  at .FSver, dw 0
  1764 00002D46 00000000            <2>  at .RootClus, dd 0
  1765 00002D4A 0000                <2>  at .FSinfo, dw 0
  1766 00002D4C 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002D4E 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002D4F 0000                <2>  at .wOpenCnt, dw 0
  1770 00002D51 07                  <2>  at .bDevType, db typeGenRem
  1771 00002D52 0000                <2>  at .wDevFlgs, dw 0
  1772 00002D54 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002D56 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002D58 01                  <2>  at .secPerClus, db 01h
  1776 00002D59 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002D5B 02                  <2>  at .numFATs, db 02h
  1778 00002D5C E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002D5E 400B                <2>  at .totSec16, dw 0B40h
  1780 00002D60 F0                  <2>  at .media, db 0F0h
  1781 00002D61 0900                <2>  at .FATsz16, dw 0009h
  1782 00002D63 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002D65 0200                <2>  at .numHeads, dw 0002h
  1784 00002D67 00000000            <2>  at .hiddSec, dd 0
  1785 00002D6B 00000000            <2>  at .totSec32, dd 0
  1786 00002D6F 00000000            <2>  at .FATsz32, dd 0
  1787 00002D73 0000                <2>  at .extFlags, dw 0
  1788 00002D75 0000                <2>  at .FSver, dw 0
  1789 00002D77 00000000            <2>  at .RootClus, dd 0
  1790 00002D7B 0000                <2>  at .FSinfo, dw 0
  1791 00002D7D 0000                <2>  at .BkBootSec, dw 0
  1792 00002D7F 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002D88 000000              <2>
  1793                              <2>  iend
  1794 00002D8B FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002D8F 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002D98 202000              <2>
  1796 00002D9B 00000000            <2>  at .volId, dd 0
  1797 00002D9F 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002DA8 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002DB0 13                  <2>  at .bBIOSNum, db i
  1746 00002DB1 13                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002DB2 0002                <2>  at .wBpS, dw 200h
  1749 00002DB4 FF                  <2>  at .bSpC, db -1
  1750 00002DB5 0100                <2>  at .wResC, dw 0001h
  1751 00002DB7 02                  <2>  at .bNumFAT, db 02h
  1752 00002DB8 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002DBA 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002DBC 00                  <2>  at .bMedDesc, db 00h
  1755 00002DBD 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002DBF 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002DC1 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002DC3 00000000            <2>  at .dHiddSec, dd 0
  1759 00002DC7 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002DCB 00000000            <2>  at .FATsz32, dd 0
  1762 00002DCF 0000                <2>  at .extFlags, dw 0
  1763 00002DD1 0000                <2>  at .FSver, dw 0
  1764 00002DD3 00000000            <2>  at .RootClus, dd 0
  1765 00002DD7 0000                <2>  at .FSinfo, dw 0
  1766 00002DD9 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002DDB 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002DDC 0000                <2>  at .wOpenCnt, dw 0
  1770 00002DDE 07                  <2>  at .bDevType, db typeGenRem
  1771 00002DDF 0000                <2>  at .wDevFlgs, dw 0
  1772 00002DE1 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002DE3 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002DE5 01                  <2>  at .secPerClus, db 01h
  1776 00002DE6 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002DE8 02                  <2>  at .numFATs, db 02h
  1778 00002DE9 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002DEB 400B                <2>  at .totSec16, dw 0B40h
  1780 00002DED F0                  <2>  at .media, db 0F0h
  1781 00002DEE 0900                <2>  at .FATsz16, dw 0009h
  1782 00002DF0 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002DF2 0200                <2>  at .numHeads, dw 0002h
  1784 00002DF4 00000000            <2>  at .hiddSec, dd 0
  1785 00002DF8 00000000            <2>  at .totSec32, dd 0
  1786 00002DFC 00000000            <2>  at .FATsz32, dd 0
  1787 00002E00 0000                <2>  at .extFlags, dw 0
  1788 00002E02 0000                <2>  at .FSver, dw 0
  1789 00002E04 00000000            <2>  at .RootClus, dd 0
  1790 00002E08 0000                <2>  at .FSinfo, dw 0
  1791 00002E0A 0000                <2>  at .BkBootSec, dw 0
  1792 00002E0C 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002E15 000000              <2>
  1793                              <2>  iend
  1794 00002E18 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002E1C 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002E25 202000              <2>
  1796 00002E28 00000000            <2>  at .volId, dd 0
  1797 00002E2C 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002E35 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002E3D 14                  <2>  at .bBIOSNum, db i
  1746 00002E3E 14                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002E3F 0002                <2>  at .wBpS, dw 200h
  1749 00002E41 FF                  <2>  at .bSpC, db -1
  1750 00002E42 0100                <2>  at .wResC, dw 0001h
  1751 00002E44 02                  <2>  at .bNumFAT, db 02h
  1752 00002E45 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002E47 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002E49 00                  <2>  at .bMedDesc, db 00h
  1755 00002E4A 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002E4C 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002E4E 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002E50 00000000            <2>  at .dHiddSec, dd 0
  1759 00002E54 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002E58 00000000            <2>  at .FATsz32, dd 0
  1762 00002E5C 0000                <2>  at .extFlags, dw 0
  1763 00002E5E 0000                <2>  at .FSver, dw 0
  1764 00002E60 00000000            <2>  at .RootClus, dd 0
  1765 00002E64 0000                <2>  at .FSinfo, dw 0
  1766 00002E66 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002E68 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002E69 0000                <2>  at .wOpenCnt, dw 0
  1770 00002E6B 07                  <2>  at .bDevType, db typeGenRem
  1771 00002E6C 0000                <2>  at .wDevFlgs, dw 0
  1772 00002E6E 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002E70 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002E72 01                  <2>  at .secPerClus, db 01h
  1776 00002E73 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002E75 02                  <2>  at .numFATs, db 02h
  1778 00002E76 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002E78 400B                <2>  at .totSec16, dw 0B40h
  1780 00002E7A F0                  <2>  at .media, db 0F0h
  1781 00002E7B 0900                <2>  at .FATsz16, dw 0009h
  1782 00002E7D 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002E7F 0200                <2>  at .numHeads, dw 0002h
  1784 00002E81 00000000            <2>  at .hiddSec, dd 0
  1785 00002E85 00000000            <2>  at .totSec32, dd 0
  1786 00002E89 00000000            <2>  at .FATsz32, dd 0
  1787 00002E8D 0000                <2>  at .extFlags, dw 0
  1788 00002E8F 0000                <2>  at .FSver, dw 0
  1789 00002E91 00000000            <2>  at .RootClus, dd 0
  1790 00002E95 0000                <2>  at .FSinfo, dw 0
  1791 00002E97 0000                <2>  at .BkBootSec, dw 0
  1792 00002E99 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002EA2 000000              <2>
  1793                              <2>  iend
  1794 00002EA5 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002EA9 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002EB2 202000              <2>
  1796 00002EB5 00000000            <2>  at .volId, dd 0
  1797 00002EB9 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002EC2 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002ECA 15                  <2>  at .bBIOSNum, db i
  1746 00002ECB 15                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002ECC 0002                <2>  at .wBpS, dw 200h
  1749 00002ECE FF                  <2>  at .bSpC, db -1
  1750 00002ECF 0100                <2>  at .wResC, dw 0001h
  1751 00002ED1 02                  <2>  at .bNumFAT, db 02h
  1752 00002ED2 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002ED4 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002ED6 00                  <2>  at .bMedDesc, db 00h
  1755 00002ED7 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002ED9 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002EDB 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002EDD 00000000            <2>  at .dHiddSec, dd 0
  1759 00002EE1 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002EE5 00000000            <2>  at .FATsz32, dd 0
  1762 00002EE9 0000                <2>  at .extFlags, dw 0
  1763 00002EEB 0000                <2>  at .FSver, dw 0
  1764 00002EED 00000000            <2>  at .RootClus, dd 0
  1765 00002EF1 0000                <2>  at .FSinfo, dw 0
  1766 00002EF3 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002EF5 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002EF6 0000                <2>  at .wOpenCnt, dw 0
  1770 00002EF8 07                  <2>  at .bDevType, db typeGenRem
  1771 00002EF9 0000                <2>  at .wDevFlgs, dw 0
  1772 00002EFB 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002EFD 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002EFF 01                  <2>  at .secPerClus, db 01h
  1776 00002F00 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002F02 02                  <2>  at .numFATs, db 02h
  1778 00002F03 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002F05 400B                <2>  at .totSec16, dw 0B40h
  1780 00002F07 F0                  <2>  at .media, db 0F0h
  1781 00002F08 0900                <2>  at .FATsz16, dw 0009h
  1782 00002F0A 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002F0C 0200                <2>  at .numHeads, dw 0002h
  1784 00002F0E 00000000            <2>  at .hiddSec, dd 0
  1785 00002F12 00000000            <2>  at .totSec32, dd 0
  1786 00002F16 00000000            <2>  at .FATsz32, dd 0
  1787 00002F1A 0000                <2>  at .extFlags, dw 0
  1788 00002F1C 0000                <2>  at .FSver, dw 0
  1789 00002F1E 00000000            <2>  at .RootClus, dd 0
  1790 00002F22 0000                <2>  at .FSinfo, dw 0
  1791 00002F24 0000                <2>  at .BkBootSec, dw 0
  1792 00002F26 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002F2F 000000              <2>
  1793                              <2>  iend
  1794 00002F32 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002F36 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002F3F 202000              <2>
  1796 00002F42 00000000            <2>  at .volId, dd 0
  1797 00002F46 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002F4F FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002F57 16                  <2>  at .bBIOSNum, db i
  1746 00002F58 16                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002F59 0002                <2>  at .wBpS, dw 200h
  1749 00002F5B FF                  <2>  at .bSpC, db -1
  1750 00002F5C 0100                <2>  at .wResC, dw 0001h
  1751 00002F5E 02                  <2>  at .bNumFAT, db 02h
  1752 00002F5F E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002F61 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002F63 00                  <2>  at .bMedDesc, db 00h
  1755 00002F64 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002F66 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002F68 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002F6A 00000000            <2>  at .dHiddSec, dd 0
  1759 00002F6E 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002F72 00000000            <2>  at .FATsz32, dd 0
  1762 00002F76 0000                <2>  at .extFlags, dw 0
  1763 00002F78 0000                <2>  at .FSver, dw 0
  1764 00002F7A 00000000            <2>  at .RootClus, dd 0
  1765 00002F7E 0000                <2>  at .FSinfo, dw 0
  1766 00002F80 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00002F82 10                  <2>  at .bBpbType, db bpbFat12
  1769 00002F83 0000                <2>  at .wOpenCnt, dw 0
  1770 00002F85 07                  <2>  at .bDevType, db typeGenRem
  1771 00002F86 0000                <2>  at .wDevFlgs, dw 0
  1772 00002F88 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00002F8A 0002                <2>  at .bytsPerSec, dw 200h
  1775 00002F8C 01                  <2>  at .secPerClus, db 01h
  1776 00002F8D 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00002F8F 02                  <2>  at .numFATs, db 02h
  1778 00002F90 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00002F92 400B                <2>  at .totSec16, dw 0B40h
  1780 00002F94 F0                  <2>  at .media, db 0F0h
  1781 00002F95 0900                <2>  at .FATsz16, dw 0009h
  1782 00002F97 1200                <2>  at .secPerTrk, dw 0012h
  1783 00002F99 0200                <2>  at .numHeads, dw 0002h
  1784 00002F9B 00000000            <2>  at .hiddSec, dd 0
  1785 00002F9F 00000000            <2>  at .totSec32, dd 0
  1786 00002FA3 00000000            <2>  at .FATsz32, dd 0
  1787 00002FA7 0000                <2>  at .extFlags, dw 0
  1788 00002FA9 0000                <2>  at .FSver, dw 0
  1789 00002FAB 00000000            <2>  at .RootClus, dd 0
  1790 00002FAF 0000                <2>  at .FSinfo, dw 0
  1791 00002FB1 0000                <2>  at .BkBootSec, dw 0
  1792 00002FB3 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00002FBC 000000              <2>
  1793                              <2>  iend
  1794 00002FBF FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00002FC3 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00002FCC 202000              <2>
  1796 00002FCF 00000000            <2>  at .volId, dd 0
  1797 00002FD3 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00002FDC FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00002FE4 17                  <2>  at .bBIOSNum, db i
  1746 00002FE5 17                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00002FE6 0002                <2>  at .wBpS, dw 200h
  1749 00002FE8 FF                  <2>  at .bSpC, db -1
  1750 00002FE9 0100                <2>  at .wResC, dw 0001h
  1751 00002FEB 02                  <2>  at .bNumFAT, db 02h
  1752 00002FEC E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00002FEE 400B                <2>  at .wTotSec16, dw 0B40h
  1754 00002FF0 00                  <2>  at .bMedDesc, db 00h
  1755 00002FF1 0900                <2>  at .wFATsz16, dw 0009h
  1756 00002FF3 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00002FF5 0200                <2>  at .wNumHeads, dw 0002h
  1758 00002FF7 00000000            <2>  at .dHiddSec, dd 0
  1759 00002FFB 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00002FFF 00000000            <2>  at .FATsz32, dd 0
  1762 00003003 0000                <2>  at .extFlags, dw 0
  1763 00003005 0000                <2>  at .FSver, dw 0
  1764 00003007 00000000            <2>  at .RootClus, dd 0
  1765 0000300B 0000                <2>  at .FSinfo, dw 0
  1766 0000300D 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 0000300F 10                  <2>  at .bBpbType, db bpbFat12
  1769 00003010 0000                <2>  at .wOpenCnt, dw 0
  1770 00003012 07                  <2>  at .bDevType, db typeGenRem
  1771 00003013 0000                <2>  at .wDevFlgs, dw 0
  1772 00003015 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00003017 0002                <2>  at .bytsPerSec, dw 200h
  1775 00003019 01                  <2>  at .secPerClus, db 01h
  1776 0000301A 0100                <2>  at .revdSecCnt, dw 0001h
  1777 0000301C 02                  <2>  at .numFATs, db 02h
  1778 0000301D E000                <2>  at .rootEntCnt, dw 00E0h
  1779 0000301F 400B                <2>  at .totSec16, dw 0B40h
  1780 00003021 F0                  <2>  at .media, db 0F0h
  1781 00003022 0900                <2>  at .FATsz16, dw 0009h
  1782 00003024 1200                <2>  at .secPerTrk, dw 0012h
  1783 00003026 0200                <2>  at .numHeads, dw 0002h
  1784 00003028 00000000            <2>  at .hiddSec, dd 0
  1785 0000302C 00000000            <2>  at .totSec32, dd 0
  1786 00003030 00000000            <2>  at .FATsz32, dd 0
  1787 00003034 0000                <2>  at .extFlags, dw 0
  1788 00003036 0000                <2>  at .FSver, dw 0
  1789 00003038 00000000            <2>  at .RootClus, dd 0
  1790 0000303C 0000                <2>  at .FSinfo, dw 0
  1791 0000303E 0000                <2>  at .BkBootSec, dw 0
  1792 00003040 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00003049 000000              <2>
  1793                              <2>  iend
  1794 0000304C FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 00003050 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00003059 202000              <2>
  1796 0000305C 00000000            <2>  at .volId, dd 0
  1797 00003060 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 00003069 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 00003071 18                  <2>  at .bBIOSNum, db i
  1746 00003072 18                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00003073 0002                <2>  at .wBpS, dw 200h
  1749 00003075 FF                  <2>  at .bSpC, db -1
  1750 00003076 0100                <2>  at .wResC, dw 0001h
  1751 00003078 02                  <2>  at .bNumFAT, db 02h
  1752 00003079 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 0000307B 400B                <2>  at .wTotSec16, dw 0B40h
  1754 0000307D 00                  <2>  at .bMedDesc, db 00h
  1755 0000307E 0900                <2>  at .wFATsz16, dw 0009h
  1756 00003080 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 00003082 0200                <2>  at .wNumHeads, dw 0002h
  1758 00003084 00000000            <2>  at .dHiddSec, dd 0
  1759 00003088 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 0000308C 00000000            <2>  at .FATsz32, dd 0
  1762 00003090 0000                <2>  at .extFlags, dw 0
  1763 00003092 0000                <2>  at .FSver, dw 0
  1764 00003094 00000000            <2>  at .RootClus, dd 0
  1765 00003098 0000                <2>  at .FSinfo, dw 0
  1766 0000309A 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 0000309C 10                  <2>  at .bBpbType, db bpbFat12
  1769 0000309D 0000                <2>  at .wOpenCnt, dw 0
  1770 0000309F 07                  <2>  at .bDevType, db typeGenRem
  1771 000030A0 0000                <2>  at .wDevFlgs, dw 0
  1772 000030A2 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 000030A4 0002                <2>  at .bytsPerSec, dw 200h
  1775 000030A6 01                  <2>  at .secPerClus, db 01h
  1776 000030A7 0100                <2>  at .revdSecCnt, dw 0001h
  1777 000030A9 02                  <2>  at .numFATs, db 02h
  1778 000030AA E000                <2>  at .rootEntCnt, dw 00E0h
  1779 000030AC 400B                <2>  at .totSec16, dw 0B40h
  1780 000030AE F0                  <2>  at .media, db 0F0h
  1781 000030AF 0900                <2>  at .FATsz16, dw 0009h
  1782 000030B1 1200                <2>  at .secPerTrk, dw 0012h
  1783 000030B3 0200                <2>  at .numHeads, dw 0002h
  1784 000030B5 00000000            <2>  at .hiddSec, dd 0
  1785 000030B9 00000000            <2>  at .totSec32, dd 0
  1786 000030BD 00000000            <2>  at .FATsz32, dd 0
  1787 000030C1 0000                <2>  at .extFlags, dw 0
  1788 000030C3 0000                <2>  at .FSver, dw 0
  1789 000030C5 00000000            <2>  at .RootClus, dd 0
  1790 000030C9 0000                <2>  at .FSinfo, dw 0
  1791 000030CB 0000                <2>  at .BkBootSec, dw 0
  1792 000030CD 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 000030D6 000000              <2>
  1793                              <2>  iend
  1794 000030D9 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 000030DD 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 000030E6 202000              <2>
  1796 000030E9 00000000            <2>  at .volId, dd 0
  1797 000030ED 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
  1743                              <2>  istruc drvBlk
  1744 000030F6 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1745 000030FE 19                  <2>  at .bBIOSNum, db i
  1746 000030FF 19                  <2>  at .bDOSNum, db i
  1747                              <2> 
  1748 00003100 0002                <2>  at .wBpS, dw 200h
  1749 00003102 FF                  <2>  at .bSpC, db -1
  1750 00003103 0100                <2>  at .wResC, dw 0001h
  1751 00003105 02                  <2>  at .bNumFAT, db 02h
  1752 00003106 E000                <2>  at .wRtCntNum, dw 00E0h
  1753 00003108 400B                <2>  at .wTotSec16, dw 0B40h
  1754 0000310A 00                  <2>  at .bMedDesc, db 00h
  1755 0000310B 0900                <2>  at .wFATsz16, dw 0009h
  1756 0000310D 1200                <2>  at .wSecPerTrk, dw 0012h
  1757 0000310F 0200                <2>  at .wNumHeads, dw 0002h
  1758 00003111 00000000            <2>  at .dHiddSec, dd 0
  1759 00003115 00000000            <2>  at .dTotSec32, dd 0
  1760                              <2> 
  1761 00003119 00000000            <2>  at .FATsz32, dd 0
  1762 0000311D 0000                <2>  at .extFlags, dw 0
  1763 0000311F 0000                <2>  at .FSver, dw 0
  1764 00003121 00000000            <2>  at .RootClus, dd 0
  1765 00003125 0000                <2>  at .FSinfo, dw 0
  1766 00003127 0000                <2>  at .BkBootSec, dw 0
  1767                              <2> 
  1768 00003129 10                  <2>  at .bBpbType, db bpbFat12
  1769 0000312A 0000                <2>  at .wOpenCnt, dw 0
  1770 0000312C 07                  <2>  at .bDevType, db typeGenRem
  1771 0000312D 0000                <2>  at .wDevFlgs, dw 0
  1772 0000312F 3F00                <2>  at .wNumCyl, dw 63
  1773                              <2>  istruc bpb32
  1774 00003131 0002                <2>  at .bytsPerSec, dw 200h
  1775 00003133 01                  <2>  at .secPerClus, db 01h
  1776 00003134 0100                <2>  at .revdSecCnt, dw 0001h
  1777 00003136 02                  <2>  at .numFATs, db 02h
  1778 00003137 E000                <2>  at .rootEntCnt, dw 00E0h
  1779 00003139 400B                <2>  at .totSec16, dw 0B40h
  1780 0000313B F0                  <2>  at .media, db 0F0h
  1781 0000313C 0900                <2>  at .FATsz16, dw 0009h
  1782 0000313E 1200                <2>  at .secPerTrk, dw 0012h
  1783 00003140 0200                <2>  at .numHeads, dw 0002h
  1784 00003142 00000000            <2>  at .hiddSec, dd 0
  1785 00003146 00000000            <2>  at .totSec32, dd 0
  1786 0000314A 00000000            <2>  at .FATsz32, dd 0
  1787 0000314E 0000                <2>  at .extFlags, dw 0
  1788 00003150 0000                <2>  at .FSver, dw 0
  1789 00003152 00000000            <2>  at .RootClus, dd 0
  1790 00003156 0000                <2>  at .FSinfo, dw 0
  1791 00003158 0000                <2>  at .BkBootSec, dw 0
  1792 0000315A 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1792 00003163 000000              <2>
  1793                              <2>  iend
  1794 00003166 FFFFFFFF            <2>  at .dAccTime, dd -1
  1795 0000316A 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1795 00003173 202000              <2>
  1796 00003176 00000000            <2>  at .volId, dd 0
  1797 0000317A 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1798                              <2>  iend
  1799                              <2>  %assign i i+1
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00003183 0F010D23000000      <1>     sidt [myIdt]
     8 0000318A 0FB6C0              <1>     movzx eax, al
     9 0000318D 4892                <1>     xchg rdx, rax
    10 0000318F 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00003193 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 0000319A 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 0000319D 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 000031A1 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 000031A5 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 000031A9 894208              <1>     mov dword [rdx + 8], eax
    17 000031AC C3                  <1>     ret
    18                              <1> myIdt:
    19 000031AD 0000                <1> .limit  dw 0
    20 000031AF 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 000031B7 50                  <1>     push rax
    25 000031B8 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 000031B9 51                  <1>     push rcx
    27 000031BA 52                  <1>     push rdx
    28 000031BB 488D15B0CFFFFF      <1>     lea rdx, qword [fastOutput]
    29 000031C2 B829000000          <1>     mov eax, 29h
    30 000031C7 E8B7FFFFFF          <1>     call installInterrupt
    31 000031CC 488D15A7CFFFFF      <1>     lea rdx, qword [ctrlBreak]
    32 000031D3 B83B000000          <1>     mov eax, 3Bh
    33 000031D8 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 000031DD B401                <1>     mov ah, 01      ;Get buffer status
    36 000031DF CD36                <1>     int 36h
    37 000031E1 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 000031E3 30E4                <1>     xor ah, ah
    39 000031E5 CD36                <1>     int 36h ;Read key to flush from buffer
    40 000031E7 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 000031E9 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 000031EE CD30                <1>     int 30h
    44 000031F0 B402                <1>     mov ah, 02h
    45 000031F2 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 000031F4 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 000031F6 CD30                <1>     int 30h
    48 000031F8 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 000031FA B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 000031FF CD30                <1>     int 30h
    51 00003201 5A                  <1>     pop rdx
    52 00003202 59                  <1>     pop rcx
    53 00003203 5B                  <1>     pop rbx
    54 00003204 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 00003205 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 0000320B 50                  <1>     push rax
    59 0000320C 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 00003213 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 00003217 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 00003218 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 00003219 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 0000321A B402                <1>     mov ah, 02  ;Read RTC Time
    70 0000321C CD3A                <1>     int 3Ah
    71 0000321E 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 00003220 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 00003223 E84D000000          <1>     call .bcd2Bin
    75 00003228 88C5                <1>     mov ch, al
    76 0000322A 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 0000322D E843000000          <1>     call .bcd2Bin
    78 00003232 88C1                <1>     mov cl, al
    79 00003234 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 00003237 E839000000          <1>     call .bcd2Bin
    81 0000323C 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 0000323E 89C2                <1>     mov edx, eax
    83 00003240 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 00003242 CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 00003244 B404                <1>     mov ah, 04  ;Read RTC Date
    90 00003246 CD3A                <1>     int 3Ah
    91 00003248 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 0000324A 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 0000324D E823000000          <1>     call .bcd2Bin
    95 00003252 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 00003255 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 0000325B 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 0000325E E812000000          <1>     call .bcd2Bin
    99 00003263 88C6                <1>     mov dh, al  
   100 00003265 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 00003268 E808000000          <1>     call .bcd2Bin
   102 0000326D 88C2                <1>     mov dl, al
   103 0000326F B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 00003271 CD21                <1>     int 21h
   105 00003273 EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 00003275 51                  <1>     push rcx
   109 00003276 89C1                <1>     mov ecx, eax
   110 00003278 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 0000327D 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 00003283 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 00003286 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 00003289 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 0000328B FFC9                <1>     dec ecx
   117 0000328D 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 0000328F 59                  <1>     pop rcx
   120 00003290 C3                  <1>     ret
   121                              <1> .clkEnd:
   122 00003291 5B                  <1>     pop rbx ;Get the pointer back
   123 00003292 E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;Start by setting up the interrupt vectors!
   136 00003297 B839350000          <1>     mov eax, 3539h  ;Get original Int 39h
   137 0000329C CD21                <1>     int 21h
   138 0000329E 48891D19D2FFFF      <1>     mov qword [i39Org], rbx
   139 000032A5 B839250000          <1>     mov eax, 2539h  ;Setup our handler
   140 000032AA 488D152DD2FFFF      <1>     lea rdx, dosInt39h
   141 000032B1 CD21                <1>     int 21h
   142                              <1> 
   143 000032B3 B833350000          <1>     mov eax, 3533h  ;Get original Int 33h
   144 000032B8 CD21                <1>     int 21h
   145 000032BA 48891D05D2FFFF      <1>     mov qword [i33Org], rbx
   146 000032C1 48891D0ED2FFFF      <1>     mov qword [i33Next], rbx    ;This is also the low level handler
   147 000032C8 B833250000          <1>     mov eax, 2533h  ;Setup our handler
   148 000032CD 488D152CD2FFFF      <1>     lea rdx, dosInt33h
   149 000032D4 CD21                <1>     int 21h
   150                              <1> 
   151 000032D6 B82F350000          <1>     mov eax, 352Fh  ;Get previous Int 2Fh handler
   152 000032DB CD21                <1>     int 21h
   153 000032DD 48891DEAD1FFFF      <1>     mov qword [i2FNext], rbx
   154 000032E4 B82F250000          <1>     mov eax, 252Fh
   155 000032E9 488D157ED2FFFF      <1>     lea rdx, i2fhSwap33h
   156 000032F0 CD21                <1>     int 21h
   157                              <1> 
   158                              <1> 
   159                              <1> ;Then set up the link pointers to the load address of the 
   160                              <1> ; drive table.
   161 000032F2 B919000000          <1>     mov ecx, drvBlkTblL - 1
   162 000032F7 488D2D33F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   163 000032FE 4889EE              <1>     mov rsi, rbp
   164                              <1> .dskTblLp:
   165 00003301 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   166 00003304 4881C68D000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   167 0000330B 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   168 0000330E FFC9                <1>     dec ecx                 ;Decrement the count
   169 00003310 75EF                <1>     jnz .dskTblLp
   170 00003312 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   171                              <1> ;Now get number of Int 33h information packed in r8
   172 00003319 CD31                <1>     int 31h
   173                              <1>     ;Returns:
   174                              <1>     ;r8[Byte 0] = Number of COM ports
   175                              <1>     ;r8[Byte 1] = Number of fixed disks
   176                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   177                              <1>     ;r8[Byte 3] = Number of Int 33h units
   178 0000331B 4C890547DFFFFF      <1>     mov qword [msdDriver.inBuffer], r8   
   179 00003322 0FB60543DFFFFF      <1>     movzx eax, byte [msdDriver.inBuffer + 3]
   180 00003329 85C0                <1>     test eax, eax
   181 0000332B 0F84DA010000        <1>     jz .noDevs
   182 00003331 0FB61D32DFFFFF      <1>     movzx ebx, byte [msdDriver.inBuffer + 1]
   183 00003338 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   184 0000333A 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   185 00003340 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   186 00003346 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   187                              <1> ;Start by doing fixed disks.
   188 0000334D 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   189 0000334F 745D                <1>     jz .doRem
   190 00003351 C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   191 00003358 C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   192                              <1> .hdLp:
   193                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   194                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   195 0000335F 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   196 00003361 E8A2030000          <1>     call .ptnUpdateBpb
   197 00003366 7211                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   198                              <1> ;The odd case where there is a BPB on the hard disk :)
   199 00003368 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   200 0000336C 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   201 00003372 E833030000          <1>     call .advDiskPtrs
   202 00003377 EB17                <1>     jmp short .fatDiskOk
   203                              <1> .mbrFnd:
   204 00003379 751C                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   205                              <1> ;Now reread sector 0 (it might have been overwritten by a attempted FAT read)
   206 0000337B E847D6FFFF          <1>     call msdDriver.bbpbReadBS
   207                              <1> ;Now we check if we have a valid MBR signature.
   208 00003380 66813DDEE0FFFF55AA  <1>     cmp word [msdDriver.inBuffer + mbr.mbrSig], 0AA55h
   209 00003389 750C                <1>     jne .gotoNextDisk
   210 0000338B E89D010000          <1>     call .processMbr    ;This disk is done.
   211                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   212                              <1> .fatDiskOk:
   213                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   214 00003390 E80D030000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   215 00003395 7417                <1>     je .doRem
   216                              <1> .gotoNextDisk:
   217 00003397 FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   218 0000339D 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   219 000033A4 247F                <1>     and al, ~80h    ;Drop the upper bit
   220 000033A6 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   221 000033AC 75B1                <1>     jne .hdLp
   222                              <1> ;------------------------------------------------
   223                              <1> ;   Here we start doing removable devices
   224                              <1> ;------------------------------------------------
   225                              <1> .doRem:
   226 000033AE 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   227 000033B5 8805(01000000)      <1>     mov byte [fixPtn], al
   228 000033BB C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   229 000033C2 C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   230 000033C9 803D(02000000)00    <1>     cmp byte [remDrv], 0
   231 000033D0 0F8426010000        <1>     je .noRems
   232                              <1> .remLp:
   233 000033D6 31C9                <1>     xor ecx, ecx        ;Load sector 0 of the disk
   234 000033D8 E82B030000          <1>     call .ptnUpdateBpb  ;If can't get a BPB, its ok. Remdevs here :)
   235 000033DD 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   236 000033E1 B800880000          <1>     mov eax, 8800h      ;Get disk parameters for changeline status in eax
   237 000033E6 CD33                <1>     int 33h
   238 000033E8 7221                <1>     jc .remSkipDisk     ;If we cant query the drive, then we skip this.
   239 000033EA A910000000          <1>     test eax, 10h       ;Set if we have changeline support
   240 000033EF 7406                <1>     jz .remNext
   241 000033F1 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   242                              <1> .remNext:
   243 000033F7 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   244 000033FD E8A8020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   245 00003402 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   246 00003409 742C                <1>     je .msdExit
   247                              <1> .remSkipDisk:
   248 0000340B FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   249 00003411 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   250 00003418 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   251 0000341E 7417                <1>     je .msdExit
   252 00003420 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   253 00003422 72B2                <1>     jb .remLp                   ;If not, do normal processing.
   254                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   255                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   256                              <1> ; to go past the letters assigned to the fixed disk.
   257 00003424 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   258 0000342A 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   259 0000342C 8805(04000000)      <1>     mov byte [dosDrv], al
   260 00003432 E99FFFFFFF          <1>     jmp .remLp
   261                              <1> .msdExit:
   262 00003437 F605(00000000)FF    <1>     test byte [physVol], -1 ;Did we fail to initialise ANY devices?
   263 0000343E 0F84C7000000        <1>     jz .noDevs  ;If so, we pretend we have two drives and hope defaults work!
   264 00003444 F605(00000000)FF    <1>     test byte [physVol], -1
   265 0000344B 0F84AB000000        <1>     jz .noRems
   266 00003451 803D(02000000)01    <1>     cmp byte [remDrv], 1
   267 00003458 7539                <1>     jne .skipSingle
   268                              <1> ;Here we do the A: >-< B: jank.
   269                              <1> ;We know rbp points to what should the block for B:. The block for A:
   270                              <1> ; is right behind it.
   271                              <1> .doSingle:
   272 0000345A 4889EE              <1>     mov rsi, rbp
   273 0000345D 4881EE8D000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   274 00003464 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   275                              <1> ;Now we transfer the BIOS number and set drive number to 1
   276 0000346A 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bBIOSNum]
   277 0000346E 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   278 00003471 C6450901            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   279 00003475 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   280 00003479 4881C60A000000      <1>     add rsi, drvBlk.bpb
   281 00003480 B983000000          <1>     mov ecx, (drvBlk_size - 10)  ;8 bytes Link ptr and 2 id bytes
   282 00003485 F3A4                <1>     rep movsb
   283 00003487 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   284 0000348D FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   285                              <1> .skipSingle:
   286 00003493 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   287 0000349A 53                  <1>     push rbx    ;Save this count on the stack
   288 0000349B FFCB                <1>     dec ebx     ;Turn into an offset into the table
   289 0000349D B88D000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   290 000034A2 F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   291 000034A4 488D3586EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   292 000034AB 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   293 000034B3 488D1D(66000000)    <1>     lea rbx, bpbArray
   294                              <1> .buildBPBArrayLp:
   295 000034BA 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   296 000034BE 0FB64609            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   297 000034C2 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   298 000034C6 4889F7              <1>     mov rdi, rsi                            ;Save this ptr before walking
   299 000034C9 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Now walk the table
   300 000034CC 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   301 000034D3 75E5                <1>     jne .buildBPBArrayLp    ;No... keep going
   302 000034D5 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   303                              <1> ;
   304                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   305                              <1> ;
   306 000034D8 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the request packet ptr back
   307                              <1> ;All previous drivers return the "worst case" eject pointer. Here we return
   308                              <1> ; the real eject pointer
   309 000034DF 4881C78D000000      <1>     add rdi, drvBlk_size    ;Mov rdi past end of last drvBlk 2 first free byte
   310 000034E6 48897B0E            <1>     mov qword [rbx + initReqPkt.endptr], rdi    ;save as real eject point
   311 000034EA 58                  <1>     pop rax         ;Get back the number of detected volumes
   312 000034EB 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   313 000034EE 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   314 000034F2 66C705FCD0FFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   315                              <1>     return
    13                              <2> %%_ret:
    14 000034FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> .noRems:
   317                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   318                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   319                              <1> ; we just did the first remdev. This drive gets registered as having
   320                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   321 000034FC 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   322 00003500 FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   323                              <1> ;Here we setup A: drive to be a pretend 1.44Mb drive
   324 00003506 E94FFFFFFF          <1>     jmp .doSingle
   325                              <1> .noDevs:
   326                              <1> ;If we have no drives, then suppose we have two default drives
   327                              <1> ; A: and B: which are NOT the same!
   328 0000350B C605(00000000)02    <1>     mov byte [physVol], 2   ;Identify entries A and B of system Ok!
   329                              <1> ;Now set them as their own owners and not shared status.
   330 00003512 488D3518EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl
   331 00003519 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   332 0000351F 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]
   333 00003522 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   334 00003528 E966FFFFFF          <1>     jmp .skipSingle
   335                              <1> ;------------------------
   336                              <1> ; Procedures for init
   337                              <1> ;------------------------
   338                              <1> 
   339                              <1> .processMbr:
   340                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   341                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   342 0000352D E8A4010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   343                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   344                              <1> ; ptn. We process it, invalidate the entry then start again
   345 00003532 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   346 00003539 7539                <1>     jne .pmbrNoHack
   347 0000353B 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   348 00003542 B904000000          <1>     mov ecx, 4
   349                              <1> .pmbrHackLp:
   350 00003547 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   351 0000354A 740D                <1>     je .pmbrHackFnd
   352                              <1> .pmbrHackRet:
   353 0000354C 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   354 00003553 FFC9                <1>     dec ecx
   355 00003555 75F0                <1>     jnz .pmbrHackLp
   356 00003557 EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   357                              <1> .pmbrHackFnd:
   358 00003559 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   359 0000355D E831020000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   360 00003562 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   361 00003564 C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   362 0000356B E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   363                              <1> ;Ignore any read errors, but we start again.
   364 00003570 C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   365                              <1> ;Now we fall down and start again
   366                              <1> .pmbrNoHack:
   367 00003574 C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   368 0000357B 488D35(06000000)    <1>     lea rsi, mbrE
   369                              <1> .pmbrLp:
   370 00003582 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   371 00003585 E817020000          <1>     call .checkMbrPtnType
   372 0000358A 7551                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   373 0000358C E802020000          <1>     call .checkDataPtn
   374 00003591 740A                <1>     je .pmbrDodata
   375 00003593 E85E000000          <1>     call .processEPtn   ;Here we process EBR
   376                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003598 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000359A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   377 0000359B EB38                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   378                              <1> .pmbrDodata:
   379 0000359D 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   380 000035A0 E863010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   381 000035A5 730E                <1>     jnc .pmbrOk
   382                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000035A7 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000035A9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   383                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   384 000035AA E8D6000000          <1>     call .getUfmtSize
   385 000035AF 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   386                              <1> .pmbrOk:
   387 000035B5 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   388 000035BB C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   389 000035BF 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   390 000035C2 2580000000          <1>     and eax, ptnActive
   391 000035C7 0D01000000          <1>     or eax, ptnPrimary
   392 000035CC 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   393 000035D0 E8D5000000          <1>     call .advDiskPtrs
   394                              <1> .pmbrXtrejoin:
   395 000035D5 E8C8000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   396                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000035DA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000035DC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   397                              <1> .pmbrNext:
   398 000035DD FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   399 000035E3 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   400                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000035EA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000035EC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   401 000035ED 4881C610000000      <1>     add rsi, mbrEntry_size
   402 000035F4 EB8C                <1>     jmp short .pmbrLp
   403                              <1> 
   404                              <1> .processEPtn:
   405                              <1> ;Process all logical process in an extended partition. rsi points to
   406                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   407                              <1> ;Thus we always know the "root" sector of this extended partition.
   408 000035F6 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   409                              <1> .peplp:
   410 000035F9 E8F4000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   411                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000035FE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003600 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   412 00003601 66813D5DDEFFFF55AA  <1>     cmp word [msdDriver.inBuffer + ebr.mbrSig], 0AA55h
   413 0000360A 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   414 0000360C F9                  <1>     stc
   415                              <1>     return
    13                              <2> %%_ret:
    14 0000360D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> .pep1:
   417 0000360E E8B2000000          <1>     call .copyEbr       ;Save the EBR
   418                              <1> ;Now we check the saved EBR is valid.
   419 00003613 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   420 0000361A E86C010000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   421 0000361F 7551                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   422 00003621 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   423 00003628 E866010000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   424 0000362D 7443                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   425                              <1> ;Now we get the absolute start sector of this partition.
   426 0000362F 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   427 00003635 E8CE000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB (preserves sector number)
   428 0000363A 730E                <1>     jnc .pepOk
   429                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000363C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000363E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   430                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   431 0000363F E841000000          <1>     call .getUfmtSize
   432 00003644 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   433                              <1> .pepOk:
   434                              <1> ;If here, this partition will be given a CDS entry.
   435                              <1> ;Now we go to the next logical partition in the extended partition and
   436                              <1> ; move to the next drive
   437 0000364A 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   438 00003650 C6453605            <1>     mov byte [rbp + drvBlk.bDevType], typeHard  ;The media type is hard drive
   439 00003654 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   440 00003657 2580000000          <1>     and eax, ptnActive
   441 0000365C 0D02000000          <1>     or eax, ptnLogical
   442 00003661 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   443 00003665 E840000000          <1>     call .advDiskPtrs
   444 0000366A E833000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   445                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000366F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003671 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   446                              <1> .pepNextEbr:
   447                              <1> ;Else we now walk the disk linked list.
   448 00003672 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   449 00003678 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   450                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000367A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000367C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   451 0000367D 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   452 00003680 E974FFFFFF          <1>     jmp .peplp
   453                              <1> 
   454                              <1> .getUfmtSize:
   455                              <1> ;Moves the partition geometry information into drvBlk from MBR. This is only
   456                              <1> ; a necessity if the medium doesn't have a trustworthy BPB. Doesn't touch CHS 
   457                              <1> ; stuff because bleugh. That can be computed by FORMAT.
   458                              <1> ;
   459                              <1> ;This is done so that unformatted partitions are mounted by DOS. They cannot 
   460                              <1> ; be used, and so needs to be FORMATed. Thus, NumFAT=0 should only really 
   461                              <1> ; happen on hard drive partitions at boot.
   462                              <1> ;
   463                              <1> ;Input: rsi -> MBR/EBR entry for this partition
   464                              <1> ;       rbp -> drvBlk for this drive we are setting up
   465                              <1> ;       rcx = Sector number of the start of the partition
   466                              <1> ;
   467                              <1> ;Output: The following fields in the drvBlk are filled in
   468                              <1> ;       bNumFAT = Number of FATs on partition (0 as unformatted)
   469                              <1> ;       dHiddSec = Starting sector of the partition
   470                              <1> ;       dTotSec32 = 32 bit size of partition (if large enough)
   471                              <1> ;       wTotSec16 = 16 bit size of partition or 0 if 32 bit in use
   472 00003685 C6450F00            <1>     mov byte [rbp + drvBlk.bNumFAT], 0 ;Indicate no FATs on ufmt ptn.
   473 00003689 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx  ;Set start sector of partition
   474 0000368C 8B4E0C              <1>     mov ecx, dword [rsi + mbrEntry.numSectors]
   475 0000368F 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   476 00003695 7605                <1>     jbe .gpgSmol
   477 00003697 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   478 0000369A 31C9                <1>     xor ecx, ecx
   479                              <1> .gpgSmol:
   480 0000369C 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   481 000036A0 F8                  <1>     clc
   482                              <1>     return
    13                              <2> %%_ret:
    14 000036A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> .physCheckEnd:
   485 000036A2 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   486                              <1>     return
    13                              <2> %%_ret:
    14 000036A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   487                              <1> 
   488                              <1> .advDiskPtrs:
   489 000036AA E88E000000          <1>     call .getNumCyl     ;Computes the number of cylinders in the BPB
   490 000036AF E8C1000000          <1>     call .xfrDfltBpb    ;Finish drvBlk init by transfering dfltBPB
   491 000036B4 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   492 000036B8 FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   493 000036BE FE05(00000000)      <1>     inc byte [physVol]
   494                              <1>     return
    13                              <2> %%_ret:
    14 000036C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> .copyEbr:
   497                              <1> ;Copies the EBR from the EBR sector in the buffer
   498 000036C5 51                  <1>     push rcx
   499 000036C6 56                  <1>     push rsi
   500 000036C7 57                  <1>     push rdi
   501 000036C8 488D3D(06000000)    <1>     lea rdi, mbrE
   502 000036CF B920000000          <1>     mov ecx, 2*mbrEntry_size
   503 000036D4 EB0F                <1>     jmp short .cpmbr
   504                              <1> .copyMbr:
   505                              <1> ;Copies the MBR from the MBR sector in the buffer
   506 000036D6 51                  <1>     push rcx
   507 000036D7 56                  <1>     push rsi
   508 000036D8 57                  <1>     push rdi
   509 000036D9 488D3D(06000000)    <1>     lea rdi, mbrE
   510 000036E0 B940000000          <1>     mov ecx, 4*mbrEntry_size
   511                              <1> .cpmbr:
   512 000036E5 488D353BDDFFFF      <1>     lea rsi, qword [msdDriver.inBuffer + mbr.mbrEntry1]
   513 000036EC F3A4                <1>     rep movsb
   514 000036EE 5F                  <1>     pop rdi
   515 000036EF 5E                  <1>     pop rsi
   516 000036F0 59                  <1>     pop rcx
   517                              <1>     return
    13                              <2> %%_ret:
    14 000036F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> .readSector:
   520                              <1> ;Input: ecx = Sector to read
   521 000036F2 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   522 000036F9 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   523 000036FE 488D1D64DBFFFF      <1>     lea rbx, msdDriver.inBuffer
   524 00003705 CD33                <1>     int 33h
   525                              <1>     return
    13                              <2> %%_ret:
    14 00003707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> .ptnUpdateBpb:
   528                              <1> ;Setups up the call for below on the current partition.
   529                              <1> ;Input: ecx = Number of hidden sectors (preserved)
   530                              <1> ;Output:
   531                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   532                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   533                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   534 00003708 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   535 0000370E 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   536 00003711 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   537 00003718 884509              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   538 0000371B 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   539 00003722 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   540 00003725 51                  <1>     push rcx
   541 00003726 56                  <1>     push rsi    ;Save the mbr entry ptr
   542 00003727 E8DDD0FFFF          <1>     call msdDriver.updateBpb
   543 0000372C 7209                <1>     jc .pubBad
   544 0000372E E8ECD1FFFF          <1>     call msdDriver.moveVolIds
   545 00003733 5E                  <1>     pop rsi
   546 00003734 59                  <1>     pop rcx
   547 00003735 F8                  <1>     clc         ;Always clean even if no ids
   548                              <1>     return
    13                              <2> %%_ret:
    14 00003736 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .pubBad:
   550 00003737 5E                  <1>     pop rsi
   551 00003738 59                  <1>     pop rcx
   552 00003739 3C07                <1>     cmp al, drvBadMed ;Bad Partition?
   553 0000373B F9                  <1>     stc         ;Ensure we set the CF again
   554                              <1>     return
    13                              <2> %%_ret:
    14 0000373C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> .getNumCyl:
   557                              <1> ;Computes the number of cylinders on the media. Not really to be used.
   558                              <1> ;Input: rbp -> drvBlk
   559 0000373D 50                  <1>     push rax
   560 0000373E 51                  <1>     push rcx
   561 0000373F 52                  <1>     push rdx
   562 00003740 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
   563 00003744 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
   564 00003748 F7E1                <1>     mul ecx ;Get sectors per cylinder in eax. edx = 0
   565 0000374A 85C0                <1>     test eax, eax   ;If ax is 0, store zero! Phoney CHS data in BPB.
   566 0000374C 7414                <1>     jz .gncExit     ;This prevents CHS IOCTL from occuring.
   567 0000374E 89C1                <1>     mov ecx, eax    ;Save this number in ecx
   568 00003750 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   569 00003754 85C0                <1>     test eax, eax   ;If this is zero, get the 32 bit count of sectors
   570 00003756 0F44451F            <1>     cmovz eax, dword [rbp + drvBlk.dTotSec32]
   571 0000375A F7F1                <1>     div ecx     ;sectors/(sectors/cylinder) = whole cylinders in eax
   572 0000375C 85D2                <1>     test edx, edx
   573 0000375E 7402                <1>     jz .gncExit
   574 00003760 FFC0                <1>     inc eax     ;Inc the cylinder count to account for not whole divide
   575                              <1> .gncExit:
   576 00003762 BAFFFF0000          <1>     mov edx, 0FFFFh   ;A default Max cylinder value, since CHS is for floppies.
   577 00003767 39D0                <1>     cmp eax, edx
   578 00003769 0F47C2              <1>     cmova eax, edx
   579 0000376C 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   580 00003770 F8                  <1>     clc ;Ensure CF is clear
   581 00003771 5A                  <1>     pop rdx
   582 00003772 59                  <1>     pop rcx
   583 00003773 58                  <1>     pop rax
   584                              <1>     return
    13                              <2> %%_ret:
    14 00003774 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> .xfrDfltBpb:
   587                              <1> ;If a drive is removable, we check the BIOS reported values and 
   588                              <1> ; build a BPB around that. Else, we trust the bpb and blindly copy it.
   589                              <1> ;
   590                              <1> ; TEMP TEMP: FOR NOW WE JUST ALWAYS BLINDLY TRUST THE BPB.
   591                              <1> ;
   592 00003775 51                  <1>     push rcx
   593 00003776 56                  <1>     push rsi
   594 00003777 57                  <1>     push rdi
   595 00003778 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
   596 0000377C 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sDfltBPB]
   597 00003780 B935000000          <1>     mov ecx, bpb32_size
   598                              <1> ;Copies garbage into the reserved 12 bytes at the end of the BPB32
   599                              <1> ; but thats ok since we dont use it and those fields are reserved.
   600 00003785 F3A4                <1>     rep movsb
   601 00003787 5F                  <1>     pop rdi
   602 00003788 5E                  <1>     pop rsi
   603 00003789 59                  <1>     pop rcx
   604                              <1>     return
    13                              <2> %%_ret:
    14 0000378A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   605                              <1> 
   606                              <1> .checkEbrPtnType:
   607                              <1> ;Input: al = Partition type
   608                              <1> ;Output: ZF=ZE => Valid partition type found
   609                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   610 0000378B E811000000          <1>     call .checkMbrPtnType
   611                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003790 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003792 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   612                              <1> .checkDataPtn:
   613 00003793 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   614 00003795 7407                <1>     je .ceptBad
   615 00003797 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   616 00003799 7403                <1>     je .ceptBad
   617 0000379B 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   618                              <1>     return
    13                              <2> %%_ret:
    14 0000379D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   619                              <1> .ceptBad:
   620 0000379E 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   621                              <1>     return
    13                              <2> %%_ret:
    14 000037A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> 
   623                              <1> .checkMbrPtnType:
   624                              <1> ;Input: al = Partition type
   625                              <1> ;Output: ZF=ZE => Valid partition type found
   626                              <1> ;        ZF=NZ => Not a valid partition type
   627 000037A1 51                  <1>     push rcx
   628 000037A2 57                  <1>     push rdi
   629 000037A3 488D3D0A000000      <1>     lea rdi, .ptnTbl
   630 000037AA B909000000          <1>     mov ecx, .ptnTblL
   631 000037AF F2AE                <1>     repne scasb ;Find the entry in al
   632 000037B1 5F                  <1>     pop rdi
   633 000037B2 59                  <1>     pop rcx
   634                              <1>     return
    13                              <2> %%_ret:
    14 000037B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   635                              <1> 
   636                              <1> ;Table contents:
   637                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   638                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   639                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   640                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   641                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   642                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   643                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   644                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   645 000037B4 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   646                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [8705000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqPktPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     5                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     6 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     7 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     8 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
     9 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    10 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    11 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    12 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    13 00000066 <res D0h>           <1> bpbArray    dq drvBlkTblL dup (?)
    38 00000136 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+4+2 passes

