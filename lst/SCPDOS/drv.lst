     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen db ?  ;Length of the request header
    90                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde db ?  ;Command code
    92                              <1>     .status dw ?  ;Status word
    93                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqPkt
    98                              <1>     drvReqPktM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqPktM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   104 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   114 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   123 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   132 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqPktM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   180 0000000D ??                  <1>     .majfun db ?  ;Major function number
   181 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> ;IOCTL structs
   200                              <1> 
   201                              <1> struc lbaParamsBlock
   202 00000000 ??                  <1>     .size           db ?
   203 00000001 ??                  <1>     .bSpecFuncs     db ?    ;Bit[0] clear means get updated drive info. 
   204                              <1>                             ;Bit[0] set means get current drive info.
   205                              <1>                             ;Only meaningful on read. Set must have this as 0.
   206 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   207 00000004 ????????            <1>     .res            db 4 dup (?)
   208 00000008 ????????????????    <1>     .sectorSize     dq ?    ;Only the lower word is valid here
   209 00000010 ????????????????    <1>     .numSectors     dq ?    ;Only the lower dword is valid here
   210 00000018 ????????????????    <1>     .startSector    dq ?    ;Only the lower dword is valid here
   211                              <1> endstruc
   212                              <1> 
   213                              <1> struc lbaIOBlock
   214 00000000 ??                  <1>     .size           db ?
   215 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   216 00000002 ????????????        <1>     .res            db 6 dup (?)
   217 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start write at
   218 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   219                              <1> endstruc
   220                              <1> 
   221                              <1> struc lbaFormatBlock
   222 00000000 ??                  <1>     .size           db ?
   223 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   224 00000002 ????????????        <1>     .res            db 6 dup (?)
   225 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start format at
   226                              <1> endstruc
   227                              <1> 
   228                              <1> struc chsParamsBlock
   229 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   230 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   231 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   232 00000004 ????                <1>     .wNumCyl    dw ?
   233 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   234 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   235                              <1>     .TrackLayout:
   236                              <1> endstruc
   237                              <1> 
   238                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   239                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   240                              <1> ;Only used in setparams requests. Ignored for getparams 
   241                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   242                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   243                              <1> 
   244                              <1> 
   245                              <1> struc chsIOBlock
   246 00000000 ??                  <1>     .bSpecFuncs     db ?
   247 00000001 ????                <1>     .wStartHead     dw ?
   248 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   249 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   250 00000007 ????                <1>     .wNumSectors    dw ?
   251 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   252                              <1> endstruc
   253                              <1> 
   254                              <1> struc chsFormatBlock
   255 00000000 ??                  <1>     .bSpecFuncs db ?
   256 00000001 ????                <1>     .wStartHead dw ?
   257 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   258                              <1> endstruc
   259                              <1> 
   260                              <1> struc accFlgBlk
   261 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   262 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   263                              <1> endstruc
   264                              <1> 
   265                              <1> struc idParamBlk
   266 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   267 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   268 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   269 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   270                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB
    19 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    20 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    21 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    22 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    23 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    24 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    25 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    26 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    27 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    28 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    29 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    30 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc extBs
    34                              <1> ;Extended bootsector structure. If present, comes immediately after 
    35                              <1> ; BPB in bootsector
    36 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    37 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    38 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    39 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    40 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    41 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    42                              <1> endstruc
    43                              <1> extBsSig    equ 29h
    44                              <1> 
    45                              <1> struc bpb32       ;FAT 32 BPB
    46 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    47 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    48 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    49 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    50 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    51 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    52 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    53 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    54 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    55 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    56 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    57 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    58 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    59 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    60 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    61 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    62 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    63 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    64 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    65                              <1> endstruc
    66                              <1> 
    67                              <1> struc FSInfo
    68 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    69 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    70 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    71 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    72 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    73 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    74 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> fsInfoSig1  equ 041615252h
    78                              <1> fsInfoSig2  equ 061417272h
    79                              <1> fsInfoSig3  equ 0AA550000h
    80                              <1> 
    81                              <1> struc mbr
    82 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    83 000001B8 ????????            <1>     .diskID     dd ?
    84 000001BC ????                <1>     .reserved   dw ?
    85 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    86 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    87 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    88 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    89 000001FE ????                <1>     .mbrSig     dw ?
    90                              <1> endstruc
    91                              <1> 
    92                              <1> struc ebr   ;A special type of MBR
    93 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    94 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
    95 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
    96 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
    97 000001FE ????                <1>     .mbrSig     dw ?
    98                              <1> endstruc
    99                              <1> 
   100                              <1> struc mbrEntry
   101 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   102 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   103 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   104 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   105 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   106 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   107                              <1> endstruc
   108                              <1> 
   109                              <1> struc fatDirEntry
   110 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   111 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   112 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   113 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   114 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   115 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   116 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   117 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   118 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   119 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   120 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   121 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139                              <1>     ;.jmpBoot                db 3 dup (?)
   140                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   141                              <1> ;BPB starts here
   142 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   143 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   144 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   145 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   146 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   147 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   148 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   149 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   150 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   151 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   152 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   153 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   154 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   155 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   156 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   157 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   158 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
     1                              <1> ;No externally defined symbols, no internally exposed symbols.
     2                              <1> 
     3                              <1> ;Driver internal equates
     4                              <1> drvBlkTblL      equ 26  ;Space for 26 drive letters!
     5                              <1> ;IOCTL track table size (max number of sectors in a track is 63)
     6                              <1> maxTrackTblSz   equ 63
     7                              <1> maxAcc          equ 5   ;Maximum accesses to a remdev w/o timer/changeline
     8                              <1> 
     9                              <1> struc drvBlk
    10                              <1> ;--------------------------------------------------------------------
    11                              <1> ; Drvblk Header information
    12                              <1> ;--------------------------------------------------------------------
    13 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    14 00000008 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    15 00000009 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    16                              <1> ;--------------------------------------------------------------------
    17                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    18                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    19                              <1> ;  left in those fields... not a problem)
    20                              <1> ;--------------------------------------------------------------------
    21                              <1> .bpb:
    22 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    23 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    24 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    25 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    26 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    27 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
    28 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
    29 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
    30 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
    31 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
    32 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
    33 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
    34                              <1> ;--------------------------------------------------------------------
    35                              <1> ; The below vars are only accessed on FAT32 volumes
    36                              <1> ;--------------------------------------------------------------------
    37 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
    38 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
    39 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
    40 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
    41 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
    42 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
    43                              <1> ;--------------------------------------------------------------------
    44                              <1> ; DrvBlk flags
    45                              <1> ;--------------------------------------------------------------------
    46 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
    47 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
    48 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
    49 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
    50                              <1> ;The below word is a legacy thing. It is only used in a CHS based IOCTL call.
    51 00000039 ????                <1>     .wNumCyl    dw ?
    52 0000003B <res 35h>           <1>     .sDfltBPB   db bpb32_size dup (?)   ;Default capacity BPB for drive
    53                              <1> .dAccTime:          ;Last media check time if remdev
    54 00000070 ????????            <1>     .wPtnType   dd ?    
    55                              <1> ;--------------------------------------------------------------------
    56                              <1> ; Volume string and id for the drive described by this drvblk
    57                              <1> ;--------------------------------------------------------------------
    58 00000074 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
    59 0000007F ??                  <1>                 db ?            ;Null terminator for string
    60 00000080 ????????            <1>     .volId      dd ?            ;Volume serial number            
    61 00000084 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
    62 0000008C ??                  <1>                 db ?            ;Null terminator for string
    63                              <1> endstruc
    64                              <1> 
    65                              <1> ;FAT type values
    66                              <1> bpbDskOff   equ 80h ;All Disk accesses return Not Ready (Unrecognised FAT)
    67                              <1> bpbFat16    equ 40h ;FAT 16 disk
    68                              <1> bpbFat32    equ 20h ;FAT 32 disk
    69                              <1> bpbFat12    equ 10h ;FAT 12 disk
    70                              <1> 
    71                              <1> ;Device Flag values
    72                              <1> devFixed    equ 1       ;Set if fixed disk 
    73                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
    74                              <1> devLockBPB  equ 4       ;Makes BuildBPB not build a BPB if set
    75                              <1> devSameSec  equ 8       ;All sectors in track are same size
    76                              <1> devMulti    equ 10h     ;Physical drive has many logical units (A/B share)
    77                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
    78                              <1> devChgd     equ 40h     ;Dev change detected (set on shared physical drives)
    79                              <1>                         ; Can only be set on remdevs with changeline support!
    80                              <1> devSetDASD  equ 80h     ;Set if we need to set drive DASD params before next fmt.
    81                              <1>                         ; Gets set if new parameters are written to drive!
    82                              <1> devNewParms equ 100h    ;Set if new drive parameters set! Set on IOCTL setparms.
    83                              <1> devUnFmt    equ 200h    ;Disables reads/writes if set
    84                              <1> 
    85                              <1> ;Media byte bits
    86                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
    87                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
    88                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
    89                              <1> 
    90                              <1> ;Partition types
    91                              <1> ptnPrimary  equ 1       ;A primary MBR partition
    92                              <1> ptnLogical  equ 2       ;A logical MBR partition
    93                              <1> ptnActive   equ 80h     ;An active partition
    94                              <1> ptnGpt      equ 4       ;A primary GPT partition
    95                              <1> ptrUnknown  equ 8000h   ;An unknown partition
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E8C72F0000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E8B42E0000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 7408                <1>     jz .prnExit 
   513                              <1>     ;Everything else, device not ready
   514 000004AD B002                <1>     mov al, drvNotReady
   515                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   516 000004AF B480                <1>     mov ah, 80h ;Set error bit
   517 000004B1 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   518                              <1> .prnExit:
   519 000004B5 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   520 000004BB 5B                  <1>     pop rbx
   521 000004BC 58                  <1>     pop rax
   522 000004BD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> ; This file contains five main routines:
     2                              <1> ; 1) Replacement Int 39h routine (for unhooking interrupts back).
     3                              <1> ; 2) Replacement Int 33h routine.
     4                              <1> ; 3) Int 33h replacement routine.
     5                              <1> ; 4) Driver itself
     6                              <1> ; 5) Int 2Fh Driver backdoor routine
     7                              <1> 
     8 000004BE 0000000000000000    <1> i39Org  dq 0    ;Original BIOS Int 39h to replace on Int 39h
     9 000004C6 0000000000000000    <1> i33Org  dq 0    ;Original BIOS Int 33h to replace on Int 39h.
    10 000004CE 0000000000000000    <1> i2FNext dq 0    ;Previous Int 2Fh handler
    11 000004D6 0000000000000000    <1> i33Next dq 0    ;Current disk driver to call.
    12                              <1> 
    13                              <1> ;Replacement Int 39h routine to replace interrupts these drivers hook.
    14                              <1> dosInt39h:
    15                              <1> ;For now, we just replace int 33h and int 39h back and then jump to i39h
    16 000004DE B833250000          <1>     mov eax, 2533h
    17 000004E3 488B15DCFFFFFF      <1>     mov rdx, qword [i33Org]
    18 000004EA CD21                <1>     int 21h
    19 000004EC B839250000          <1>     mov eax, 2539h
    20 000004F1 488B15C6FFFFFF      <1>     mov rdx, qword [i39Org]
    21 000004F8 CD21                <1>     int 21h
    22                              <1> ;And now do the actual warm reboot
    23 000004FA FF25BEFFFFFF        <1>     jmp qword [i39Org]
    24                              <1> 
    25                              <1> ;Replacement Int 33h routine
    26                              <1> dosInt33h:
    27                              <1> ;--------------------------------------------------------------------------
    28                              <1> ;       This is a wrapper around the BIOS Int 33h handler.
    29                              <1> ;--------------------------------------------------------------------------
    30                              <1> ;This routine does the following:
    31                              <1> ;1) Checks if a media check is being requested, in which case
    32                              <1> ;   it will ensure the correct error code is returned (bug in BIOS v0.91)
    33                              <1> ;2) Checks if a format request is being made, in which case
    34                              <1> ;   it will ensure that the devSetDASD and devChgd bits are set for all 
    35                              <1> ;   drives for the BIOS drive in dl to ensure that the DOS driver treats
    36                              <1> ;   the DOS drives properly.
    37                              <1> ;
    38                              <1> ; For the most part (CHS is depreciated so we don't talk about it here):
    39                              <1> ;   AH = Function number (05h/85h is FORMAT)
    40                              <1> ;   AL = Number of sectors to xact.
    41                              <1> ;   RBX -> Points to a xfr buffer.
    42                              <1> ;   RCX = Start sector of xft.
    43                              <1> ;   DL = BIOS Drive number to xact on.
    44                              <1> ;--------------------------------------------------------------------------
    45                              <1> ;Enter the DOS driver critical section . When the MSD driver enters this it 
    46                              <1> ; already has the lock so this simply incs the count. If a process attempts 
    47                              <1> ; to bypass DOS and we are already processing a request it gets put on ice.
    48                              <1> ;--------------------------------------------------------------------------
    49                              <1> ;Start by clearing the CF on entry
    50 00000500 80642410FE          <1>     and byte [rsp + 2*8], ~1
    51                              <1> ;Enter the device critical section
    52 00000505 50                  <1>     push rax
    53 00000506 B802800000          <1>     mov eax, 8002h
    54 0000050B CD2A                <1>     int 2ah
    55 0000050D 58                  <1>     pop rax
    56                              <1> ;Now put the retaddr in the var we own 
    57 0000050E 8F052F000000        <1>     pop qword [.tmp]
    58                              <1> ;Do we want to do a media check?
    59 00000514 80FC16              <1>     cmp ah, 16h
    60 00000517 7432                <1>     je .doMedCheck
    61                              <1> ;Now check that we are not formatting. If we are, we need to set the bit on
    62                              <1> ; all DOS drives that use this BIOS drive that it has been formatted and 
    63                              <1> ; changed.
    64 00000519 50                  <1>     push rax    ;Push the function number on stack
    65 0000051A 80E47F              <1>     and ah, 7Fh ;Clear the top bit (as both 05h and 85h are formats)
    66 0000051D 80FC05              <1>     cmp ah, 05h
    67 00000520 750A                <1>     jne .notFormat
    68                              <1> ;Here we register the format request!
    69 00000522 B8C0000000          <1>     mov eax, devChgd | devSetDASD   ;Bits to set in flags
    70 00000527 E8740B0000          <1>     call msdDriver.setBitsForAllDevs
    71                              <1> .notFormat:
    72 0000052C 58                  <1>     pop rax     ;Get the function number from stack
    73                              <1> ;Call previous handler and exit irq in this call.
    74 0000052D FF15A3FFFFFF        <1>     call qword [i33Next]    
    75                              <1> .exitI33:
    76                              <1> ;Replace the retaddr back on the stack
    77 00000533 FF350A000000        <1>     push qword [.tmp]
    78                              <1> ;Exit the device critical section now
    79 00000539 50                  <1>     push rax
    80 0000053A B802810000          <1>     mov eax, 8102h
    81 0000053F CD2A                <1>     int 2ah
    82 00000541 58                  <1>     pop rax
    83                              <1> ;And finally go back to the caller :)
    84                              <1>     return
    13                              <2> %%_ret:
    14 00000542 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> ;Local data for the main IRQ handler
    86 00000543 0000000000000000    <1> .tmp    dq 0
    87                              <1> .doMedCheck:
    88                              <1> ;SCP/BIOS v0.91 reports CF=NC AH=01h for changed and 
    89                              <1> ;                   CF=NC AH=00h for not changed and
    90                              <1> ;                   CF=CY AH=80h/86h for error.
    91                              <1> ;We need to turn this into an IBM BIOS style report where:
    92                              <1> ;                   CF=CY AH=06h for changed and 
    93                              <1> ;                   CF=NC AH=00h for not changed and
    94                              <1> ;                   CF=CY AH=80h/86h for error.
    95 0000054B FF1585FFFFFF        <1>     call qword [i33Next]    ;Call previous handler and exit irq here.
    96 00000551 9C                  <1>     pushfq      ;Save the returned flags
    97 00000552 7307                <1>     jnc .dmcOk  ;If returns CF=NC check return val for SCPBIOS v0.91 bug.
    98                              <1> ;Else, here we have CF=CY.
    99 00000554 80FC06              <1>     cmp ah, 06h ;If the call failed like in all later versions, check retcode.
   100 00000557 7519                <1>     jne .dmcExit    ;If not med swap, just bubble the error up.
   101 00000559 EB08                <1>     jmp short .dmcDoChg ;Else register swap on all devices :)
   102                              <1> .dmcOk:
   103                              <1> ;Here only if CF=NC.
   104                              <1> ;If ah = 0, no change so exit.
   105                              <1> ;If ah = 1, device changed so set CF.
   106 0000055B 84E4                <1>     test ah, ah
   107 0000055D 7413                <1>     jz .dmcExit
   108                              <1> ;Now set CF like IBM BIOS does
   109 0000055F 800C2401            <1>     or byte [rsp], 1
   110                              <1> .dmcDoChg:
   111                              <1> ;Here with CF=CY
   112 00000563 B840000000          <1>     mov eax, devChgd    ;Set the device changed bit for all such devs
   113 00000568 E8330B0000          <1>     call msdDriver.setBitsForAllDevs
   114 0000056D B800060000          <1>     mov eax, 0600h      ;BIOS empty drive/media swapped code
   115                              <1> .dmcExit:
   116 00000572 9D                  <1>     popfq   ;Get back the flags we will report to the caller :)
   117 00000573 EBBE                <1>     jmp short .exitI33
   118                              <1> 
   119                              <1> ;Int 33h replacement routine
   120                              <1> i2fhSwap33h:
   121                              <1> ;Replaces the current int 33h handler and the int 39h replacement handler
   122                              <1> ;Input: ah = 13h
   123                              <1> ;       rdx -> New Int 33h handler.
   124                              <1> ;       rbx -> Value to replace back when system shutdown occurs.
   125                              <1> ;Output:
   126                              <1> ;       rdx -> Replaced Int 33h handler.
   127                              <1> ;       rbx -> Replaced original lowest level Int 33h handler.
   128 00000575 80FC13              <1>     cmp ah, 13h
   129 00000578 0F85440B0000        <1>     jne msdDriver.i2fDriver ;Goto the driver backdoor if not this handler 
   130 0000057E 48871551FFFFFF      <1>     xchg qword [i33Next], rdx
   131 00000585 48871D3AFFFFFF      <1>     xchg qword [i33Org], rbx
   132 0000058C 48CF                <1>     iretq
   133                              <1> 
   134                              <1> ; Actual driver here
   135                              <1> msdDriver:
   136 0000058E 50                  <1>     push rax
   137 0000058F 53                  <1>     push rbx
   138 00000590 51                  <1>     push rcx
   139 00000591 52                  <1>     push rdx
   140 00000592 56                  <1>     push rsi
   141 00000593 57                  <1>     push rdi
   142 00000594 55                  <1>     push rbp
   143 00000595 4150                <1>     push r8
   144 00000597 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the ptr to the req header in rbx
   145 0000059E 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
   146 000005A2 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
   147 000005A8 7741                <1>     ja .errBadCmd                 ;If yes, error!
   148 000005AA 488D2D4D000000      <1>     lea rbp, .fnTbl
   149 000005B1 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
   150 000005B6 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
   151 000005B9 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
   152 000005BB 7417                <1>     jz .exit
   153 000005BD 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
   154 000005C0 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
   155 000005C4 752C                <1>     jne .errBadPkt
   156 000005C6 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
   157 000005C9 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
   158 000005CD E887090000          <1>     call .setupDrive    ;Returns rbp -> Table entry
   159                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
   160 000005D2 FFD6                <1>     call rsi 
   161                              <1> .exit:
   162 000005D4 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get back the req header ptr
   163 000005DB 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
   164 000005E1 4158                <1>     pop r8
   165 000005E3 5D                  <1>     pop rbp
   166 000005E4 5F                  <1>     pop rdi
   167 000005E5 5E                  <1>     pop rsi
   168 000005E6 5A                  <1>     pop rdx
   169 000005E7 59                  <1>     pop rcx
   170 000005E8 5B                  <1>     pop rbx
   171 000005E9 58                  <1>     pop rax
   172 000005EA C3                  <1>     ret
   173                              <1> 
   174                              <1> .errBadCmd:
   175 000005EB B803000000          <1>     mov eax, drvBadCmd
   176 000005F0 EB05                <1>     jmp short .writeEntryError
   177                              <1> .errBadPkt:
   178 000005F2 B805000000          <1>     mov eax, drvBadDrvReq
   179                              <1> .writeEntryError:
   180                              <1> ;Used for errors in the driver entry
   181 000005F7 E8E0000000          <1>     call .errorExit
   182 000005FC EBD6                <1>     jmp short .exit
   183                              <1> 
   184                              <1> 
   185                              <1> .fnTbl:
   186                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
   187                              <1> ; to function, high word is packet size for check
   188                              <1>     ;dw .initShim - .fnTbl        ;Function 0
   189 000005FE 1E2B                <1>     dw msdInit - .fnTbl
   190 00000600 1F00                <1>     dw initReqPkt_size
   191 00000602 EC00                <1>     dw .medChk - .fnTbl          ;Function 1
   192 00000604 1700                <1>     dw mediaCheckReqPkt_size
   193 00000606 7601                <1>     dw .buildBPB - .fnTbl        ;Function 2
   194 00000608 1E00                <1>     dw bpbBuildReqPkt_size
   195 0000060A 4303                <1>     dw .IOCTLRead - .fnTbl       ;Function 3
   196 0000060C 2A00                <1>     dw ioReqPkt_size
   197 0000060E 4403                <1>     dw .read - .fnTbl            ;Function 4
   198 00000610 2A00                <1>     dw ioReqPkt_size
   199 00000612 0000                <1>     dw 0                         ;Function 5
   200 00000614 0000                <1>     dw 0
   201 00000616 0000                <1>     dw 0                         ;Function 6
   202 00000618 0000                <1>     dw 0
   203 0000061A 0000                <1>     dw 0                         ;Function 7
   204 0000061C 0000                <1>     dw 0
   205 0000061E 6D03                <1>     dw .write - .fnTbl           ;Function 8
   206 00000620 2A00                <1>     dw ioReqPkt_size
   207 00000622 6D03                <1>     dw .write - .fnTbl           ;Function 9
   208 00000624 2A00                <1>     dw ioReqPkt_size
   209 00000626 0000                <1>     dw 0                         ;Function 10
   210 00000628 0000                <1>     dw 0
   211 0000062A 0000                <1>     dw 0                         ;Function 11
   212 0000062C 0000                <1>     dw 0
   213 0000062E 4303                <1>     dw .IOCTLWrite - .fnTbl      ;Function 12
   214 00000630 2A00                <1>     dw ioReqPkt_size
   215 00000632 5F04                <1>     dw .devOpen - .fnTbl         ;Function 13
   216 00000634 0D00                <1>     dw openReqPkt_size
   217 00000636 6D04                <1>     dw .devClose - .fnTbl        ;Function 14
   218 00000638 0D00                <1>     dw closeReqPkt_size
   219 0000063A 7B04                <1>     dw .remMed - .fnTbl          ;Function 15
   220 0000063C 0D00                <1>     dw remMediaReqPkt_size
   221 0000063E 0000                <1>     dw 0                         ;Function 16
   222 00000640 0000                <1>     dw 0
   223 00000642 0000                <1>     dw 0                         ;Function 17
   224 00000644 0000                <1>     dw 0
   225 00000646 0000                <1>     dw 0                         ;Function 18
   226 00000648 0000                <1>     dw 0
   227 0000064A 8B04                <1>     dw .IOCTL - .fnTbl           ;Function 19
   228 0000064C 2700                <1>     dw ioctlReqPkt_size
   229 0000064E 0000                <1>     dw 0                         ;Function 20
   230 00000650 0000                <1>     dw 0
   231 00000652 0000                <1>     dw 0                         ;Function 21
   232 00000654 0000                <1>     dw 0
   233 00000656 0000                <1>     dw 0                         ;Function 22
   234 00000658 0000                <1>     dw 0
   235 0000065A 1F09                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   236 0000065C 0D00                <1>     dw getDevReqPkt_size
   237 0000065E 5509                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   238 00000660 0D00                <1>     dw setDevReqPkt_size
   239                              <1> 
   240                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   241                              <1> .errorXlat:
   242 00000662 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   243 00000669 B800010000          <1>     mov eax, 0100h
   244 0000066E E81E0A0000          <1>     call .callI33h ;Read status of last operation
   245 00000673 7265                <1>     jc .genErrExit
   246                              <1> .ioError:   ;Jumped to from the block IO proc with rbx -> reqHdr already
   247 00000675 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
   248 00000678 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   249 0000067A 7460                <1>     je .errorExit 
   250 0000067C B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   251 0000067E 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   252 00000681 7459                <1>     je .errorExit 
   253 00000683 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   254 00000686 7454                <1>     je .errorExit
   255                              <1> ;Device Not Ready
   256 00000688 B002                <1>     mov al, 02h  ;Device not ready code
   257 0000068A 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   258 0000068D 744D                <1>     je .errorExit
   259 0000068F 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   260 00000693 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   261                              <1> ;Write Protected
   262 00000697 30C0                <1>     xor al, al
   263 00000699 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   264 0000069E 743C                <1>     je .errorExit
   265                              <1> ;CRC Error
   266 000006A0 B004                <1>     mov al, 04h     ;CRC error code
   267 000006A2 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   268 000006A7 7433                <1>     je .errorExit
   269 000006A9 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   270 000006AE 742C                <1>     je .errorExit
   271 000006B0 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   272 000006B5 7425                <1>     je .errorExit
   273                              <1> ;Seek Error
   274 000006B7 B006                <1>     mov al, 06h     ;Seek error code
   275 000006B9 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   276 000006BC 741E                <1>     je .errorExit
   277                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   278                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   279 000006BE B007                <1>     mov al, 07h
   280 000006C0 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   281 000006C3 7417                <1>     je .errorExit
   282                              <1> ;Sector Not Found
   283 000006C5 B008                <1>     mov al, 08h     ;Sector not found code
   284 000006C7 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   285 000006CA 7410                <1>     je .errorExit
   286                              <1> ;Write faults
   287 000006CC B00A                <1>     mov al, 0Ah     ;Write fault
   288 000006CE 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   289 000006D1 7409                <1>     je .errorExit
   290                              <1> ;Read faults
   291 000006D3 B00B                <1>     mov al, 0Bh     ;Read fault
   292 000006D5 80F911              <1>     cmp cl, 11h     ;Read error
   293 000006D8 7402                <1>     je .errorExit
   294                              <1> ;General Errors
   295                              <1> .genErrExit:
   296 000006DA B00C                <1>     mov al, drvGenFault     ;Everything else is general error
   297                              <1> .errorExit:     ;Jump to with al=Standard Error code
   298 000006DC B480                <1>     mov ah, 80h ;Set error bit
   299 000006DE 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   300 000006E5 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   301                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 000006E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   304                              <1> .medChk:          ;Function 1
   305                              <1> ;Did this drive have its parameters swapped since the last time?
   306 000006EA 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devNewParms
   307 000006F0 7417                <1>     jz .mcNoFormat
   308                              <1> ;Reset and apply the different logic now :)
   309 000006F2 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devNewParms   ;Clear this bit
   310 000006F8 C605B60A0000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   311 000006FF 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;If fixed, declare changed!
   312 00000705 7559                <1>     jnz .mmcChange
   313                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   314 00000707 EB08                <1>     jmp short .mcRem
   315                              <1> .mcNoFormat:
   316 00000709 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   317 0000070F 7545                <1>     jnz .mmcNoChange
   318                              <1> .mcRem:
   319 00000711 E86C080000          <1>     call .checkDevType
   320 00000716 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
   321 0000071C 7520                <1>     jnz .mmcNoChangeLine
   322 0000071E 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   323                              <1> ;Now we do a BIOS changeline check. We rely on it for drives with changeline.
   324                              <1> ;Start by setting the lastDsk to unknown since this only makes sense for
   325                              <1> ; disks without changeline support
   326 00000721 C6058D0A0000FF      <1>     mov byte [.bLastDsk], -1
   327 00000728 66F745374000        <1>     test word [rbp + drvBlk.wDevFlgs], devChgd  ;Was the changed bit set?
   328 0000072E 7530                <1>     jnz .mmcChange
   329 00000730 B800160000          <1>     mov eax, 1600h 
   330 00000735 E857090000          <1>     call .callI33h
   331                              <1> ;Use IBM BIOS style reporting of changeline!
   332 0000073A 7224                <1>     jc .mmcChange   ;If an error occurs/dev swapped, report changed!
   333 0000073C EB18                <1>     jmp short .mmcNoChange
   334                              <1> .mmcNoChangeLine:
   335                              <1> ; If last accessed medchecked disk was this one and the time on this 
   336                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   337 0000073E 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   338 00000741 86056E0A0000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   339 00000747 3805680A0000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   340 0000074D 750C                <1>     jne .mmcUnsure
   341                              <1> ;Else, now we do the famous time check. 
   342 0000074F E80C090000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   343 00000754 7205                <1>     jc .mmcUnsure
   344                              <1> .mmcNoChange:
   345 00000756 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   346                              <1>     return
    13                              <2> %%_ret:
    14 0000075A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   347                              <1> .mmcUnsure:
   348 0000075B C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   349                              <1>     return
    13                              <2> %%_ret:
    14 0000075F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .mmcChange:
   351                              <1> ;Always store the volume label if we have a volume change.
   352 00000760 C6054E0A0000FF      <1>     mov byte [.bLastDsk], -1    ;Default to unknown disk if a change occured!
   353 00000767 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   354 0000076B 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   355 0000076F C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   356                              <1>     return
    13                              <2> %%_ret:
    14 00000773 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   357                              <1> 
   358                              <1> .buildBPB:        ;Function 2
   359                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   360                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   361                              <1> ; the table entry bpb which we will be returning.
   362 00000774 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   363 0000077A 7517                <1>     jnz .bbpbExit
   364                              <1> ;------------------------------------------------------
   365                              <1> ; Here for removable devices only!!
   366                              <1> ;------------------------------------------------------
   367 0000077C E839000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   368 00000781 E88A000000          <1>     call .updateBpb ;Fill the BPB entries in the drvBlk
   369 00000786 0F821A020000        <1>     jc .ioDoErr     ;Errors returned as if from block IO handler
   370 0000078C E8E1000000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   371 00000791 7300                <1>     jnc .bbpbExit
   372                              <1> ;Here we will search the root directory for the volume label only!
   373                              <1> ;The FS string has been setup and volume ID is set to 0.
   374                              <1> ;
   375                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   376                              <1> ;
   377                              <1> .bbpbExit:
   378 00000793 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the driver ptr
   379 0000079A 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   380 0000079E 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   381 000007A1 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   382 000007A8 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   383                              <1>     return
    13                              <2> %%_ret:
    14 000007AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   384                              <1> .bbpbError:
   385 000007AD 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   386 000007AF 0F8427FFFFFF        <1>     je .errorExit   
   387 000007B5 E9A8FEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   388                              <1> 
   389                              <1> .resetIds:
   390                              <1> ;We reset the volume id string and label to the default for the 
   391                              <1> ; volume before the reset!
   392 000007BA 50                  <1>     push rax
   393 000007BB 53                  <1>     push rbx
   394 000007BC 51                  <1>     push rcx
   395 000007BD 56                  <1>     push rsi
   396 000007BE 57                  <1>     push rdi
   397                              <1> 
   398                              <1> ;1) Clear volume Id
   399 000007BF C78580000000000000- <1>     mov dword [rbp + drvBlk.volId], 0
   399 000007C8 00                  <1>
   400                              <1> ;2) Reset the volume label to default
   401 000007C9 488D35DB090000      <1>     lea rsi, .defLbl
   402 000007D0 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   403 000007D4 B90C000000          <1>     mov ecx, 12
   404 000007D9 F3A4                <1>     rep movsb
   405                              <1> ;3) Reset the FAT string
   406                              <1> ;Since fat32 indicator is in the middle, compare against it.
   407                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   408 000007DB 488D35C0090000      <1>     lea rsi, .fat32Str
   409 000007E2 488D05A7090000      <1>     lea rax, .fat12Str
   410 000007E9 488D1DA9090000      <1>     lea rbx, .fat16Str
   411 000007F0 F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   412 000007F4 480F47F3            <1>     cmova rsi, rbx
   413 000007F8 480F42F0            <1>     cmovb rsi, rax
   414 000007FC 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   415 00000803 B909000000          <1>     mov ecx, 9
   416 00000808 F3A4                <1>     rep movsb
   417                              <1> 
   418 0000080A 5F                  <1>     pop rdi
   419 0000080B 5E                  <1>     pop rsi
   420 0000080C 59                  <1>     pop rcx
   421 0000080D 5B                  <1>     pop rbx
   422 0000080E 58                  <1>     pop rax
   423                              <1>     return
    13                              <2> %%_ret:
    14 0000080F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   424                              <1> 
   425                              <1> .updateBpb:
   426                              <1> ;------------------------------------------------------
   427                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   428                              <1> ; or failing, for the BPB indicated by the media byte.
   429                              <1> ;Never called on Fixed devs in normal operation.
   430                              <1> ;------------------------------------------------------
   431                              <1> ;Entered with: 
   432                              <1> ;   rbp -> drvBlk for this drive
   433                              <1> ;------------------------------------------------------
   434                              <1> 
   435 00000810 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBPB
   436                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000816 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000818 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   437 00000819 E809010000          <1>     call .bbpbReadBS    ;Sets up rbx to point to internal disk buffer
   438                              <1>     retc    ;If an error occured, ZF setup according to block IO
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000081E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000820 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   439                              <1> ;Check we if we have a valid bootsector.
   440 00000821 803B69              <1>     cmp byte [rbx], 069h   ;Direct jump has no NOP
   441 00000824 7416                <1>     je .newDisk
   442 00000826 803BE9              <1>     cmp byte [rbx], 0E9h    ;Short jump has no NOP
   443 00000829 7411                <1>     je .newDisk
   444 0000082B 807B0290            <1>     cmp byte [rbx + 2], 090h  ;NOP
   445 0000082F 7505                <1>     jne .oldDisk
   446 00000831 803BEB              <1>     cmp byte [rbx], 0EBh      ;JMP SHORT
   447 00000834 7406                <1>     je .newDisk
   448                              <1> .oldDisk:
   449                              <1>     ;call .bbpbReadFAT   ;Read the FAT sector now instead
   450                              <1>     ;retc    ;If an error occured, ZF setup according to block IO
   451                              <1>     ;mov ax, word [rbx]
   452                              <1>     ;and ax, 0FFFh
   453                              <1>     ;cmp ah, 0Fh     ;High byte must be 0Fh at this point.
   454                              <1>     ;jne .bbpbErr
   455                              <1>     ;call .bbpbCheckMedByt   ;Checks media byte to be valid
   456                              <1>     ;jnz .bbpbErr
   457                              <1>     ;cmp al, 0F0h    ;0F0h and 0F8h are not acceptable here as they need BPB
   458                              <1>     ;je .bbpbErr
   459                              <1>     ;cmp al, 0F8h
   460                              <1>     ;je .bbpbErr
   461                              <1> .bbpbErr:
   462                              <1> ;Bad media bytes or BPB go here. Means the media is unknown.
   463 00000836 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code
   464 00000838 85C0                <1>     test eax, eax           ;Clear ZF so we return the right error code
   465 0000083A F9                  <1>     stc
   466                              <1>     return
    13                              <2> %%_ret:
    14 0000083B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> .newDisk:
   468 0000083C 4881C30B000000      <1>     add rbx, 11 ;Now point rbx to the BPB itself
   469 00000843 8A430A              <1>     mov al, byte [rbx + bpb.media]
   470 00000846 E8C9000000          <1>     call .bbpbCheckMedByt
   471 0000084B 75E9                <1>     jnz .bbpbErr
   472                              <1> ;Update the drvBlk with info from the BPB.
   473                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   474                              <1> ; are ok before updating the msdTbl entry. 
   475                              <1> .bbpbMoveBpb:
   476 0000084D 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   477 00000850 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   478 00000854 E852000000          <1>     call .bbpbGetFATType    ;Fat type is given in edx
   479 00000859 72DB                <1>     jc .bbpbErr ;Only happens if crucial BPB fields are zero 
   480 0000085B 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   481                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   482                              <1> ; if it is present
   483 0000085E B819000000          <1>     mov eax, bpb_size
   484 00000863 B929000000          <1>     mov ecx, bpb32_size - 12    ;BPB32 minus reserved count
   485 00000868 80FA20              <1>     cmp dl, bpbFat32
   486 0000086B 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   487 0000086E F3A4                <1>     rep movsb        ;Now copy the BPB over!
   488 00000870 F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   489                              <1>     return
    13                              <2> %%_ret:
    14 00000871 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   490                              <1> 
   491                              <1> .moveVolIds:
   492                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   493                              <1> ;Input: rsi -> End of the BPB in sector. rbp -> drvBlk
   494                              <1> ;Output: CF=CY: No volume label in sector found.
   495                              <1> ;        CF=NC: Volume Label in sector found and copied.
   496 00000872 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   497 00000876 7531                <1>     jne .mviNoSig
   498                              <1> ;Else, now we copy the volume information from the extended bs info block
   499 00000878 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   500 0000087B 898580000000        <1>     mov dword [rbp + drvBlk.volId], eax
   501 00000881 4881C607000000      <1>     add rsi, extBs.volLab
   502 00000888 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   503 0000088C B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   504 00000891 F3A4                <1>     rep movsb   
   505                              <1>     ;rsi now points to the filSysType field in the extBs.
   506                              <1>     ;Move rdi to the filSysType field in the drvBlk.
   507 00000893 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   508 0000089A B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   509 0000089F F3A4                <1>     rep movsb   
   510                              <1> ;Clear the change bit for this DOS drive as we have here a good BPB
   511 000008A1 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devChgd
   512 000008A7 F8                  <1>     clc
   513                              <1>     return
    13                              <2> %%_ret:
    14 000008A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   514                              <1> .mviNoSig:
   515 000008A9 F9                  <1>     stc
   516                              <1>     return
    13                              <2> %%_ret:
    14 000008AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   517                              <1> 
   518                              <1> .bbpbGetFATType:
   519                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   520 000008AB 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   521 000008AE E362                <1>     jrcxz .bbpbGFTErr
   522 000008B0 89C8                <1>     mov eax, ecx
   523 000008B2 FFC8                <1>     dec eax
   524 000008B4 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   525 000008B8 C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   526 000008BB 01D0                <1>     add eax, edx
   527 000008BD 31D2                <1>     xor edx, edx
   528 000008BF F7F1                <1>     div ecx     ;eax = Root Dir sectors
   529 000008C1 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   530 000008C2 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   531 000008C6 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   532 000008C9 85C0                <1>     test eax, eax
   533 000008CB 0F44C2              <1>     cmovz eax, edx
   534 000008CE 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   535 000008D2 F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   536 000008D4 85C0                <1>     test eax, eax   ;If either BPB_NumFATs or FATSz is 0, fail!
   537 000008D6 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   538 000008D7 7439                <1>     jz .bbpbGFTErr
   539 000008D9 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   540 000008DD 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   541 000008DF 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   542 000008E1 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   543 000008E5 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   544 000008E8 85C0                <1>     test eax, eax
   545 000008EA 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   546 000008ED 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   547 000008EF 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   548 000008F3 E31D                <1>     jrcxz .bbpbGFTErr
   549 000008F5 31D2                <1>     xor edx, edx
   550 000008F7 F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   551 000008F9 BA10000000          <1>     mov edx, bpbFat12
   552 000008FE 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   553 00000903 720B                <1>     jb .bbpbGFTExit
   554 00000905 D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   555 00000907 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   556 0000090C 7302                <1>     jnb .bbpbGFTExit   ;If above or equal, its in FAT32
   557 0000090E D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   558                              <1> .bbpbGFTExit:
   559 00000910 F8                  <1>     clc
   560                              <1>     return
    13                              <2> %%_ret:
    14 00000911 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   561                              <1> .bbpbGFTErr:
   562 00000912 F9                  <1>     stc
   563                              <1>     return
    13                              <2> %%_ret:
    14 00000913 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> 
   565                              <1> .bbpbCheckMedByt:
   566                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   567                              <1> ; recognise as this is a sign of an unhealthy volume.
   568                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   569                              <1> ;Values 0FAh, 0F8h and 0F0h NEED to come from BPB. If found from FAT, then 
   570                              <1> ; do not accept the volume!
   571                              <1> ;Input: al = Media byte. 
   572                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   573 00000914 3CF0                <1>     cmp al, 0F0h
   574                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000916 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000918 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   575 00000919 3CF8                <1>     cmp al, 0F8h
   576                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000091B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000091D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   577 0000091E 38C0                <1>     cmp al, al  ;Set ZF if greater than F8h
   578                              <1>     return
    13                              <2> %%_ret:
    14 00000920 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> .bbpbReadFAT:
   581                              <1> ;Reads the first FAT sector of media we are playing with.
   582 00000921 31C9                <1>     xor ecx, ecx
   583 00000923 FFC1                <1>     inc ecx         ;Read Sector 1...
   584 00000925 EB02                <1>     jmp short .bbpbReadEp
   585                              <1> .bbpbReadBS:
   586                              <1> ;Reads the bootsector of media we are playing with.
   587 00000927 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   588                              <1> .bbpbReadEp:
   589 00000929 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]
   590 0000092C 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   591 00000930 B800820000          <1>     mov eax, 8200h  ;LBA Read function
   592 00000935 488D1D7A080000      <1>     lea rbx, .inBuffer  ;Use the in sector buffer. Ensure ownership.
   593                              <1> ;Do block IO w/o checking the validity of ecx as hidden sectors
   594                              <1> ; has already been setup correctly at this point.
   595 0000093C E993000000          <1>     jmp .blkIODirect     ;Does the Block IO, do tail call
   596                              <1> 
   597                              <1> .IOCTLRead:         ;Function 3, returns immediately
   598                              <1> .IOCTLWrite:        ;Function 12, returns done
   599                              <1>     return
    13                              <2> %%_ret:
    14 00000941 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   600                              <1> 
   601                              <1> .read:              ;Function 4
   602                              <1> ;Will read one sector at a time.
   603 00000942 E8DE060000          <1>     call .ioSetVolLbl
   604 00000947 E836060000          <1>     call .checkDevType
   605 0000094C 4889DF              <1>     mov rdi, rbx
   606 0000094F E86C000000          <1>     call .bioSetupRegs
   607                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000954 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000956 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   608                              <1> .msdr0:
   609 00000957 B800820000          <1>     mov eax, 8200h  ;LBA Read function
   610 0000095C E87D000000          <1>     call .blkIO
   611 00000961 7243                <1>     jc .ioDoErr
   612 00000963 E849000000          <1>     call .ioAdv
   613 00000968 75ED                <1>     jne .msdr0
   614                              <1>     return
    13                              <2> %%_ret:
    14 0000096A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> 
   616                              <1> .write:             ;Function 8/9
   617                              <1> ;Will write and optionally verify one sector at a time.
   618 0000096B E8B5060000          <1>     call .ioSetVolLbl
   619 00000970 E80D060000          <1>     call .checkDevType
   620 00000975 4889DF              <1>     mov rdi, rbx
   621 00000978 E843000000          <1>     call .bioSetupRegs
   622                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000097D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000097F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   623                              <1> .msdw0:
   624 00000980 B800830000          <1>     mov eax, 8300h ;LBA Write Sectors
   625 00000985 E854000000          <1>     call .blkIO
   626 0000098A 721A                <1>     jc .ioDoErr
   627 0000098C 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
   628 00000990 750C                <1>     jne .msdw1
   629 00000992 B800840000          <1>     mov eax, 8400h ;LBA Verify Sectors
   630 00000997 E842000000          <1>     call .blkIO
   631 0000099C 7208                <1>     jc .ioDoErr
   632                              <1> .msdw1:
   633 0000099E E80E000000          <1>     call .ioAdv
   634 000009A3 75DB                <1>     jne .msdw0
   635                              <1>     return
    13                              <2> %%_ret:
    14 000009A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   636                              <1> .ioDoErr:
   637                              <1> ;Come here if after an error in block IO handler.
   638                              <1> ;If ZF=ZE, disk error occured, the error needs translation so do it.
   639                              <1> ;Else just return the error code in al
   640 000009A6 0F84C9FCFFFF        <1>     jz .ioError
   641 000009AC E92BFDFFFF          <1>     jmp .errorExit
   642                              <1> 
   643                              <1> .ioAdv:
   644                              <1> ;Advances the buffers on successful IO. 
   645                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
   646                              <1> ;Input: 
   647                              <1> ;       rbx -> Where we just IO'ed to
   648                              <1> ;       rcx = LBA sector we just xfred
   649                              <1> ;       dl  = BIOS drive number
   650                              <1> ;       rdi -> ioReqPkt
   651                              <1> ;       rbp -> drvBlk
   652                              <1> ;       esi = Number of sectors to xfr
   653                              <1> ;Output:
   654                              <1> ;       rbx -> Where to IO next sector to/from
   655                              <1> ;       rcx = LBA of next sector to xfer
   656                              <1> ;       dl  = BIOS drive number
   657                              <1> ;       rdi -> ioReqPkt
   658                              <1> ;       rbp -> drvBlk
   659                              <1> ;       esi = Sectors left to xfr.
   660                              <1> ;       ZF=ZE if esi is 0. Else ZF=NZ.
   661 000009B1 50                  <1>     push rax
   662 000009B2 48FFC1              <1>     inc rcx     ;Goto next sector
   663 000009B5 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
   664 000009B9 4801C3              <1>     add rbx, rax  ;Advance the buffer pointer by 1 sector
   665 000009BC FFCE                <1>     dec esi     ;Once this hits 0, we stop the xfr
   666 000009BE 58                  <1>     pop rax
   667                              <1>     return
    13                              <2> %%_ret:
    14 000009BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> 
   669                              <1> .bioSetupRegs:
   670                              <1> ;Sets up sector to read and buffer ptr for block IO call.
   671                              <1> ;If returns ZF=ZE then xfr 0 sectors, exit immediately
   672                              <1> ;Output: rdi -> ioReqPkt
   673                              <1> ;        rbp -> drvBlk
   674                              <1> ;        rbx -> Transfer buffer
   675                              <1> ;        rcx = Sector to transfer
   676                              <1> ;        esi = Number of sectors to transfer
   677                              <1> ;        ZF=ZE if esi is 0. Else ZF=NZ.
   678 000009C0 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
   679 000009C3 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   680 000009C7 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   681 000009CB 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS drive number
   682 000009CE 8B7716              <1>     mov esi, dword [rdi + ioReqPkt.tfrlen]  ;Get the tfrlen into esi
   683 000009D1 85F6                <1>     test esi, esi                           ;If this is 0, avoid IO
   684                              <1>     return
    13                              <2> %%_ret:
    14 000009D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   685                              <1> 
   686                              <1> .blkIODirect:    ;Does block IO without sanity checking the sector number
   687                              <1> ;All registers as below!
   688 000009D4 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   689 000009DA 757A                <1>     jnz .bioufmted
   690 000009DC EB0D                <1>     jmp short .biocmn
   691                              <1> .blkIO:  ;Does block IO
   692                              <1> ;Sector count handled by caller.
   693                              <1> ;All registers marked as input registers must be preserved across the call
   694                              <1> ; except ah
   695                              <1> ;Input: ah = BIOS function number
   696                              <1> ;       rdi -> ioReqPkt             (Normal Read/Write only)
   697                              <1> ;       rbp -> drvBlk
   698                              <1> ;       rbx -> Transfer buffer
   699                              <1> ;       rcx = LBA sector to transfer
   700                              <1> ;       dl  = BIOS drive number
   701                              <1> ;       esi = Sectors left to xfr!  (Normal Read/Write only)
   702                              <1> ;Output: CF=NC: Sector xferred.
   703                              <1> ;        CF=CY: An error ocured. 
   704                              <1> ;           ZF=NZ: Non-disk error, return the error code in eax
   705                              <1> ;           ZF=ZY: Disk error, xlat error code
   706 000009DE 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   707 000009E4 7570                <1>     jnz .bioufmted
   708 000009E6 E843000000          <1>     call .bioSanity ;Sanity check ecx here
   709                              <1> .biocmn:
   710 000009EB 56                  <1>     push rsi    ;Save sector count
   711 000009EC BE05000000          <1>     mov esi, 5  ;Retry counter five times
   712                              <1> .biolp:
   713 000009F1 B001                <1>     mov al, 01h ;Do one sector at a time 
   714 000009F3 E899060000          <1>     call .callI33h
   715 000009F8 7221                <1>     jc .bioError
   716 000009FA 3C01                <1>     cmp al, 1   ;Did we read one sector?
   717 000009FC 751D                <1>     jne .bioError
   718 000009FE 5E                  <1>     pop rsi ;Rebalance stack
   719                              <1> .bioExit:
   720 000009FF 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   721 00000A02 8805AD070000        <1>     mov byte [.bLastDsk], al    ;Last DOS disk accessed
   722 00000A08 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   723                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A0E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A10 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   724                              <1> ;Ensure we set the time of the operation w/o modifying the registers.
   725                              <1> ;Routine trashes ecx and edx so save!
   726 00000A11 51                  <1>     push rcx
   727 00000A12 52                  <1>     push rdx
   728 00000A13 E838060000          <1>     call .setTime   ;Set the current time and clear state for successful IO
   729 00000A18 5A                  <1>     pop rdx
   730 00000A19 59                  <1>     pop rcx
   731                              <1>     return
    13                              <2> %%_ret:
    14 00000A1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> .bioError:
   733                              <1>     ;xor eax, eax    ;Reset disk: CRASHES BOCHS
   734 00000A1B 52                  <1>     push rdx    ;Preserve drive number. All other regs preserved
   735 00000A1C B800010000          <1>     mov eax, 0100h
   736 00000A21 E86B060000          <1>     call .callI33h ;Read status of last operation
   737 00000A26 5A                  <1>     pop rdx     ;Get back drive number.
   738 00000A27 FFCE                <1>     dec esi
   739 00000A29 75C6                <1>     jnz .biolp
   740 00000A2B 5E                  <1>     pop rsi ;Pop the sector count off the stack
   741                              <1>     ;ZF=ZE set now as esi counted down
   742 00000A2C F9                  <1>     stc
   743                              <1>     return
    13                              <2> %%_ret:
    14 00000A2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> .bioSanity:
   745                              <1> ;Input: ecx = Sector we will transact on. rbp -> DrvBlk
   746                              <1> ;Output: CF=NC, sector ok to xact on
   747                              <1> ;        CF=CY, doesnt return, fails the call
   748 00000A2E A9FF000000          <1>     test eax, 0FFh  ;If the bottom byte is set, it is a IOCTL call.
   749                              <1>     retnz           ;BIOS checks these for us as IOCTL bypasses partitions.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A33 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A35 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   750 00000A36 50                  <1>     push rax
   751 00000A37 53                  <1>     push rbx
   752 00000A38 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   753 00000A3C 8B5D1F              <1>     mov ebx, dword [rbp + drvBlk.dTotSec32] 
   754 00000A3F 85C0                <1>     test eax, eax
   755 00000A41 0F44C3              <1>     cmovz eax, ebx  ;The 32 bit count is valid only if 16 bit count is 0
   756 00000A44 39C1                <1>     cmp ecx, eax    ;This will set CF iff ecx < eax. If eax >= ecx CF=NC.
   757 00000A46 5B                  <1>     pop rbx
   758 00000A47 58                  <1>     pop rax
   759 00000A48 F5                  <1>     cmc             ;Flip CF from CY to NC if ok and NC to CY if not
   760                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A49 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A4B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   761                              <1> ;Now pops the return from the sanity call and falls.
   762 00000A4C 58                  <1>     pop rax ;Return from block IO with error code in eax below
   763 00000A4D B808000000          <1>     mov eax, drvSecNotFnd
   764                              <1> .bioNoDiskErr:
   765 00000A52 85C0                <1>     test eax, eax   ;Clear ZF
   766 00000A54 F9                  <1>     stc
   767                              <1>     return
    13                              <2> %%_ret:
    14 00000A55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   768                              <1> .bioufmted:
   769 00000A56 B807000000          <1>     mov eax, drvBadMed
   770 00000A5B EBF5                <1>     jmp short .bioNoDiskErr
   771                              <1> 
   772                              <1> .devOpen:         ;Function 13
   773 00000A5D 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
   774                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A63 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A65 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   775 00000A66 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
   776                              <1>     return
    13                              <2> %%_ret:
    14 00000A6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   777                              <1> .devClose:        ;Function 14
   778 00000A6B 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
   779                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A71 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A73 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   780 00000A74 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
   781                              <1>     return
    13                              <2> %%_ret:
    14 00000A78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   782                              <1> .remMed:  ;Function 15
   783                              <1> ;Sets busy bit if fixed drive!
   784 00000A79 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;Is it fixed?
   785                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A7F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A81 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   786 00000A82 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
   787                              <1>     return
    13                              <2> %%_ret:
    14 00000A88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> .IOCTL:    ;Function 19
   790                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   791                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params).
   792 00000A89 B803000000          <1>     mov eax, drvBadCmd
   793 00000A8E 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]  ;Get CH and CL in one read
   794 00000A92 80FD08              <1>     cmp ch, 08h     ;Disk Drive Major Code?
   795 00000A95 0F8541FCFFFF        <1>     jne .errorExit  ;If not, exit bad
   796                              <1> ;Disk Drive IOCTL here
   797 00000A9B F6C112              <1>     test cl, 12h    ;If either bits 2 or 4 set, fail the call
   798 00000A9E 0F8538FCFFFF        <1>     jnz .errorExit
   799 00000AA4 F6C160              <1>     test cl, 60h    ;One of these two bits MUST be set (bits 5 and 6)
   800 00000AA7 0F842FFCFFFF        <1>     jz .errorExit
   801 00000AAD 0FB6D1              <1>     movzx edx, cl
   802 00000AB0 81E27FFFFFFF        <1>     and edx, ~80h   ;Clear the upper bit.
   803 00000AB6 81FA07000000        <1>     cmp edx, 7
   804 00000ABC 7505                <1>     jne .ioctlNoAccess
   805 00000ABE BA03000000          <1>     mov edx, 3  ;Move the offset instead into edx
   806                              <1> .ioctlNoAccess:
   807 00000AC3 488D3D21000000      <1>     lea rdi, .ioctlTbl
   808 00000ACA 57                  <1>     push rdi
   809 00000ACB 488D3C97            <1>     lea rdi, qword [rdi + 4*rdx]
   810 00000ACF F6C120              <1>     test cl, 20h
   811 00000AD2 7507                <1>     jne .ioctlNoRead
   812 00000AD4 4881C702000000      <1>     add rdi, 2  ;If we are doing the read function, goto the next instruction
   813                              <1> .ioctlNoRead:
   814 00000ADB 0FB717              <1>     movzx edx, word [rdi]   ;Read the word offset
   815 00000ADE 5F                  <1>     pop rdi
   816 00000ADF 4801D7              <1>     add rdi, rdx    ;Add the table base
   817 00000AE2 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]
   818 00000AE6 F6C180              <1>     test cl, 80h    ;Now set the flag for if CHS (ZF=ZE) or LBA (ZF=NZ)
   819 00000AE9 FFE7                <1>     jmp rdi ;And enter the function with the ptr to the ctrl block in rdx
   820                              <1> .ioctlTbl:
   821                              <1> ;Note: For the CHS IO functions, we translate the CHS requests into LBA
   822                              <1> ; requests and then recycle the LBA request code. We do this using the 
   823                              <1> ; track table. If the sector size of any table entry is neq the 
   824                              <1> ; device sector size, we fail the request. This is because these requests
   825                              <1> ; work on a track by track basis.
   826 00000AEB 3E00                <1>     dw .ioSetDevParams - .ioctlTbl  ;CL = 40h or CL = C0h, Write IOCTL
   827 00000AED 4201                <1>     dw .ioGetDevParams - .ioctlTbl  ;CL = 60h or CL = E0h, Read IOCTL
   828 00000AEF 1202                <1>     dw .ioWrite - .ioctlTbl         ;CL = 41h or CL = C1h, Write IOCTL
   829 00000AF1 3C02                <1>     dw .ioRead - .ioctlTbl          ;CL = 61h or CL = E1h, Read IOCTL
   830 00000AF3 4902                <1>     dw .ioFormat - .ioctlTbl        ;CL = 42h or CL = C2h, Write IOCTL
   831 00000AF5 7102                <1>     dw .ioVerify - .ioctlTbl        ;CL = 62h or CL = E2h, Read IOCTL
   832 00000AF7 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 43h or CL = C3h, error
   833 00000AF9 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 63h or CL = E3h, error
   834 00000AFB 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 44h or CL = C4h, error
   835 00000AFD 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 64h or CL = E4h, error
   836 00000AFF 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 45h or CL = C5h, error
   837 00000B01 2000                <1>     dw .iobadCmd - .ioctlTbl        ;CL = 65h or CL = E5h, error
   838 00000B03 0A03                <1>     dw .ioSetIds - .ioctlTbl        ;CL = 46h or CL = C6h, Set vol Ids
   839 00000B05 0A03                <1>     dw .ioGetIds - .ioctlTbl        ;CL = 66h or CL = E6h, Get vol Ids
   840 00000B07 0F03                <1>     dw .ioSetAccessFlag - .ioctlTbl ;CL = 47h or CL = C7h, Write IOCTL
   841 00000B09 2303                <1>     dw .ioGetAccessFlag - .ioctlTbl ;CL = 67h or CL = E7h, Read IOCTL
   842                              <1> .iobadCmd:
   843 00000B0B B803000000          <1>     mov eax, drvBadCmd
   844 00000B10 E9C7FBFFFF          <1>     jmp .errorExit
   845                              <1> .iobadCmdLen:
   846 00000B15 B805000000          <1>     mov eax, drvBadDrvReq
   847 00000B1A E9BDFBFFFF          <1>     jmp .errorExit
   848                              <1> .iobadMed:
   849 00000B1F B807000000          <1>     mov eax, drvBadMed
   850 00000B24 E9B3FBFFFF          <1>     jmp .errorExit
   851                              <1> ;---------------------------------------------------------------------------
   852                              <1> ;               Set Device parameters in CHS and LBA here
   853                              <1> ;---------------------------------------------------------------------------
   854                              <1> .ioSetDevParams:
   855 00000B29 9C                  <1>     pushfq
   856                              <1> ;If the parameters are swapped, set the flags and indicate the media 
   857                              <1> ; was swapped (even if not).
   858 00000B2A 66814D374001        <1>     or word [rbp + drvBlk.wDevFlgs], devNewParms | devChgd
   859 00000B30 9D                  <1>     popfq
   860 00000B31 0F85C7000000        <1>     jnz .lbaSetParams
   861                              <1> ;Here we set CHS params. 
   862                              <1> ;Before we trust the table, we check that indeed
   863                              <1> ; no sector index is past the max sector count and that if the caller
   864                              <1> ; claimed that all the sectors are of the same size, they really are.    
   865 00000B37 488D723C            <1>     lea rsi, qword [rdx + chsParamsBlock.TrackLayout]
   866 00000B3B 4889F7              <1>     mov rdi, rsi    ;Save the pointer in rdi
   867 00000B3E 66AB                <1>     stosw           ;Get the lead word and adv rsi by 2
   868 00000B40 0FB7C8              <1>     movzx ecx, ax   ;Get the lead table entry
   869 00000B43 81F93F000000        <1>     cmp ecx, maxTrackTblSz
   870 00000B49 0F878BFBFFFF        <1>     ja .genErrExit
   871 00000B4F 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Check the first entry is ok!
   872 00000B54 0F8780FBFFFF        <1>     ja .genErrExit
   873                              <1> .iosdpTblCheckLp:
   874 00000B5A AD                  <1>     lodsd   ;Go to next entry
   875 00000B5B FFC9                <1>     dec ecx ;And remove from the count
   876 00000B5D 7420                <1>     jz .iosdpTblCheckEnd
   877 00000B5F 66813E3F00          <1>     cmp word [rsi], maxTrackTblSz   ;Ensure no entry above the max entry value
   878 00000B64 0F8770FBFFFF        <1>     ja .genErrExit
   879 00000B6A F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec ;All same size?
   880 00000B6D 74EB                <1>     jz .iosdpTblCheckLp ;If not, skip this check (always check 1=<i<=n)
   881 00000B6F 668B4602            <1>     mov ax, word [rsi + 2]  ;Else get sector size
   882 00000B73 663946FE            <1>     cmp word [rsi - 2], ax  ;And compare with the previous sector size
   883 00000B77 0F855DFBFFFF        <1>     jne .genErrExit
   884 00000B7D EBDB                <1>     jmp short .iosdpTblCheckLp
   885                              <1> .iosdpTblCheckEnd:
   886                              <1> ;Now we set the sector size bit if all tracks same size check was passed.
   887                              <1> ;If all sectors have the same size but the caller didn't specify this
   888                              <1> ; bit, we also don't specify this bit.
   889 00000B7F 66816537F7FF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSameSec    ;Clear bit first
   890 00000B85 F60204              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncSec
   891 00000B88 7406                <1>     jz .iosdpNoSetTrackBit
   892                              <1> ;The only way we got here if the bit was set is that the check passed.
   893                              <1> ; Set the bit in the device block.
   894 00000B8A 66814D370800        <1>     or word [rbp + drvBlk.wDevFlgs], devSameSec
   895                              <1> .iosdpNoSetTrackBit:
   896                              <1> ;Now we copy the table directly as sector numbers may be purposefully
   897                              <1> ; interleaved. NO SORTING!!
   898 00000B90 4889FE              <1>     mov rsi, rdi    ;Get back the track layout pointer 
   899 00000B93 488D3D85020000      <1>     lea rdi, .ioTrackTbl    ;We overwrite our internal track table
   900 00000B9A 66AD                <1>     lodsw   ;Get the table length
   901 00000B9C 0FB7C8              <1>     movzx ecx, ax   ;This many entries
   902 00000B9F 66AB                <1>     stosw
   903 00000BA1 F3A5                <1>     rep movsd       ;Move the dword entries over
   904 00000BA3 F60202              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncTrk    ;Just tracks?
   905                              <1>     retnz   ;Return if bit set!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BA6 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BA8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   906                              <1> ;Now we update the rest of the disk metadata.
   907 00000BA9 488D7207            <1>     lea rsi, qword [rdx + chsParamsBlock.deviceBPB]
   908 00000BAD 56                  <1>     push rsi
   909 00000BAE B935000000          <1>     mov ecx, bpb32_size
   910 00000BB3 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sDfltBPB]
   911 00000BB7 F3A4                <1>     rep movsb   ;Move the default BPB over
   912 00000BB9 5B                  <1>     pop rbx
   913 00000BBA E88EFCFFFF          <1>     call .bbpbMoveBpb   ;Now set the real BPB and the lock flag
   914 00000BBF E8AEFCFFFF          <1>     call .moveVolIds    ;And move the volume ids if possible
   915                              <1> ;Now setup the lock BPB bit
   916 00000BC4 66816537FBFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devLockBPB
   917 00000BCA F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], specFuncBPB
   918 00000BCD 7406                <1>     jz .iosdpNoSetBPBDflt
   919 00000BCF 66814D370400        <1>     or word [rbp + drvBlk.wDevFlgs], devLockBPB
   920                              <1> .iosdpNoSetBPBDflt:
   921                              <1> ;Now copy the rest of the bytes and return
   922 00000BD5 0FB74202            <1>     movzx eax, word [rdx + chsParamsBlock.wDevFlgs]
   923 00000BD9 2503000000          <1>     and eax, devFixed | devChgLine  ;Keep only these two bits
   924 00000BDE 66816537FCFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~(devFixed | devChgLine)   ;Clear em
   925 00000BE4 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax  ;Add those two bits as set
   926 00000BE8 0FB64201            <1>     movzx eax, byte [rdx + chsParamsBlock.bDevType]
   927 00000BEC 884536              <1>     mov byte [rbp + drvBlk.bDevType], al
   928 00000BEF 66814D378000        <1>     or word [rbp + drvBlk.wDevFlgs], devSetDASD 
   929 00000BF5 0FB74204            <1>     movzx eax, word [rdx + chsParamsBlock.wNumCyl]
   930 00000BF9 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   931                              <1>     ;movzx eax, byte [rdx + chsParamsBlock.bMedTyp]
   932                              <1>     ;mov byte [rbp + drvBlk.bMedTyp], al
   933                              <1>     return
    13                              <2> %%_ret:
    14 00000BFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   934                              <1> 
   935                              <1> .lbaSetParams:
   936                              <1> ;This only sets the sector size and number of sectors in drvBlk.bpb.
   937                              <1>     ;Set start sector of partition
   938 00000BFE 8B4A18              <1>     mov ecx, dword [rdx + lbaParamsBlock.startSector]
   939 00000C01 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   940                              <1>     ;Set sector size
   941 00000C04 8B4A08              <1>     mov ecx, dword [rdx + lbaParamsBlock.sectorSize]
   942 00000C07 66894D0A            <1>     mov word [rbp + drvBlk.wBpS], cx
   943                              <1>     ;Set same device flags as in CHS.
   944 00000C0B 0FB64A02            <1>     movzx ecx, byte [rdx + lbaParamsBlock.wDevFlgs]
   945 00000C0F 6681E10300          <1>     and cx, devFixed | devChgLine
   946 00000C14 66094D37            <1>     or word [rbp + drvBlk.wDevFlgs], cx
   947                              <1>     ;Set sector information.
   948 00000C18 8B4A10              <1>     mov ecx, dword [rdx + lbaParamsBlock.numSectors]
   949 00000C1B 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   950 00000C21 7605                <1>     jna .lbaSetSmall
   951 00000C23 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   952 00000C26 31C9                <1>     xor ecx, ecx
   953                              <1> .lbaSetSmall:
   954 00000C28 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   955                              <1>     return
    13                              <2> %%_ret:
    14 00000C2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   956                              <1> ;---------------------------------------------------------------------------
   957                              <1> ;               Get Device parameters in CHS and LBA here
   958                              <1> ;---------------------------------------------------------------------------
   959                              <1> .ioGetDevParams:
   960 00000C2D 7559                <1>     jnz .lbaGetParams
   961                              <1> ;Here we get CHS params. Doesn't do a build BPB call to be easy.
   962 00000C2F 488D753B            <1>     lea rsi, qword [rbp + drvBlk.sDfltBPB]
   963 00000C33 F60201              <1>     test byte [rdx + chsParamsBlock.bSpecFuncs], 1  ;Bit 0?
   964 00000C36 7517                <1>     jnz .iogdpDflt
   965 00000C38 E8D3FBFFFF          <1>     call .updateBpb ;Gets the BPB to the internal disk buffer
   966 00000C3D 0F8263FDFFFF        <1>     jc .ioDoErr ;Errors returned as if from block IO handler
   967 00000C43 E82AFCFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   968 00000C48 488D3572050000      <1>     lea rsi, qword [.inBuffer + 11]
   969                              <1> .iogdpDflt:
   970 00000C4F 488B7A07            <1>     mov rdi, qword [rdx + chsParamsBlock.deviceBPB]
   971 00000C53 B935000000          <1>     mov ecx, bpb32_size
   972 00000C58 F3A4                <1>     rep movsb
   973 00000C5A B805000000          <1>     mov eax, 5
   974 00000C5F B907000000          <1>     mov ecx, 7
   975 00000C64 F6453701            <1>     test byte [rbp + drvBlk.wDevFlgs], devFixed
   976 00000C68 0F44C1              <1>     cmovz eax, ecx  ;eax is set to 7 if the dev is removable
   977 00000C6B 884201              <1>     mov byte [rdx + chsParamsBlock.bDevType], al
   978 00000C6E 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
   979 00000C72 2503000000          <1>     and eax, devFixed | devChgLine
   980 00000C77 66894202            <1>     mov word [rdx + chsParamsBlock.wDevFlgs], ax
   981 00000C7B C6420600            <1>     mov byte [rdx + chsParamsBlock.bMedTyp], 0
   982 00000C7F 0FB74539            <1>     movzx eax, word [rbp + drvBlk.wNumCyl]
   983 00000C83 66894204            <1>     mov word [rdx + chsParamsBlock.wNumCyl], ax
   984                              <1>     return
    13                              <2> %%_ret:
    14 00000C87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   985                              <1> 
   986                              <1> .lbaGetParams:
   987                              <1> ;Gets more "updated" information on partitions.
   988                              <1> ;The data returned will always be the partition maximum! For remdevs
   989                              <1> ; this means up to the whole media size and for fixed disks we are still 
   990                              <1> ; restricted to the partition size.
   991 00000C88 B805000000          <1>     mov eax, drvBadDrvReq
   992 00000C8D 48813A20000000      <1>     cmp qword [rdx + lbaParamsBlock.size], lbaParamsBlock_size
   993 00000C94 0F8542FAFFFF        <1>     jne .errorExit
   994 00000C9A 4889D7              <1>     mov rdi, rdx    ;Store the params block ptr in rdi
   995 00000C9D F6470101            <1>     test byte [rdi + lbaParamsBlock.bSpecFuncs], 1
   996 00000CA1 752E                <1>     jnz .lgpbpbok
   997 00000CA3 57                  <1>     push rdi    ;Push the param block onto the stack
   998 00000CA4 E867FBFFFF          <1>     call .updateBpb
   999 00000CA9 7208                <1>     jc .lgpbpbnotok ;Even if just bad BPB, keep changed bit on!
  1000 00000CAB E8C2FBFFFF          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
  1001 00000CB0 5F                  <1>     pop rdi     ;Pop param block
  1002 00000CB1 EB1E                <1>     jmp short .lgpbpbok
  1003                              <1> .lgpbpbnotok:
  1004                              <1> ;If no valid BPB found, and the device removable, return BIOS params for the 
  1005                              <1> ; whole device. We never come here for fixed disks as updateBpb always passes.
  1006 00000CB3 5F                  <1>     pop rdi
  1007 00000CB4 3C07                <1>     cmp al, drvBadMed   ;If remdev has bad media, get bios attribs.
  1008 00000CB6 0F8520FAFFFF        <1>     jne .errorExit
  1009                              <1> ;We only come here if on an unformatted removable disk.
  1010                              <1> ;Unformatted means with an unrecognisable BPB.
  1011 00000CBC 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
  1012 00000CC0 B800880000          <1>     mov eax, 8800h ;Read LBA Device Parameters
  1013 00000CC5 CD33                <1>     int 33h
  1014 00000CC7 0F8295F9FFFF        <1>     jc .errorXlat
  1015 00000CCD 31D2                <1>     xor edx, edx    ;0 Hidden sectors on remdevs/unformatted media
  1016 00000CCF EB12                <1>     jmp short .lgpStor
  1017                              <1> .lgpbpbok:
  1018 00000CD1 8B551B              <1>     mov edx, dword [rbp + drvBlk.dHiddSec]
  1019 00000CD4 0FB75D0A            <1>     movzx ebx, word [rbp + drvBlk.wBpS]
  1020 00000CD8 0FB74D12            <1>     movzx ecx, word [rbp + drvBlk.wTotSec16]
  1021 00000CDC 85C9                <1>     test ecx, ecx
  1022 00000CDE 7503                <1>     jnz .lgpStor
  1023 00000CE0 8B4D1F              <1>     mov ecx, dword [rbp + drvBlk.dTotSec32]
  1024                              <1> .lgpStor:
  1025                              <1> ;Enter with:
  1026                              <1> ;rbx = Sector size in bytes
  1027                              <1> ;rcx = Last LBA block
  1028                              <1> ;rdx = Hidden sectors
  1029 00000CE3 0FB74537            <1>     movzx eax, word [rbp + drvBlk.wDevFlgs]
  1030 00000CE7 2503000000          <1>     and eax, devFixed | devChgLine
  1031 00000CEC 66894702            <1>     mov word [rdi + lbaParamsBlock.wDevFlgs], ax
  1032 00000CF0 48895F08            <1>     mov qword [rdi + lbaParamsBlock.sectorSize], rbx
  1033 00000CF4 48894F10            <1>     mov qword [rdi + lbaParamsBlock.numSectors], rcx
  1034 00000CF8 48895718            <1>     mov qword [rdi + lbaParamsBlock.startSector], rdx
  1035                              <1>     return 
    13                              <2> %%_ret:
    14 00000CFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1036                              <1> ;---------------------------------------------------------------------------
  1037                              <1> ;                    CHS IO requests are structured here
  1038                              <1> ;---------------------------------------------------------------------------
  1039                              <1> .ioWrite:
  1040 00000CFD 0F85BB000000        <1>     jnz .lbaWrite
  1041                              <1> ;Here for CHS write tracks. 
  1042 00000D03 BB00830000          <1>     mov ebx, 8300h  ;Write sectors
  1043                              <1> .iochsRW:
  1044 00000D08 E86F000000          <1>     call .ioChsToLba
  1045 00000D0D E853000000          <1>     call .ioChsSanity
  1046 00000D12 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector]
  1047 00000D16 01C1                <1>     add ecx, eax    ;Add the zero based sector number to start of "track"
  1048 00000D18 0FB77707            <1>     movzx esi, word [rdi + chsIOBlock.wNumSectors]  ;How many sectors to IO on
  1049                              <1> .iochsCmn:
  1050 00000D1C 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1051 00000D1E 488B5F09            <1>     mov rbx, qword [rdi + chsIOBlock.pXferBuffer]   ;And get buffer ptr in rbx
  1052 00000D22 E9B6000000          <1>     jmp .ioEp
  1053                              <1> .ioRead:
  1054 00000D27 0F858A000000        <1>     jnz .lbaRead
  1055                              <1> ;Here for CHS read tracks.
  1056 00000D2D BB00820000          <1>     mov ebx, 8200h  ;Read sectors
  1057 00000D32 EBD4                <1>     jmp short .iochsRW
  1058                              <1> .ioFormat:
  1059                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1060                              <1> ;
  1061                              <1> ;We start by setting DASD parameters but for now we do nothing so just
  1062                              <1> ; clear the flag.
  1063 00000D34 9C                  <1>     pushfq
  1064 00000D35 668165377FFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSetDASD
  1065 00000D3B 9D                  <1>     popfq
  1066                              <1> ;DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP DASD TEMP 
  1067 00000D3C 756F                <1>     jnz .lbaFmt
  1068                              <1> ;Here for CHS format track.
  1069 00000D3E BB00850000          <1>     mov ebx, 8500h  ;Format sectors
  1070 00000D43 F60201              <1>     test byte [rdx + chsFormatBlock.bSpecFuncs], 1  ;If this bit clear do format
  1071 00000D46 7404                <1>     jz .iochsFmtCmn
  1072                              <1> ;Else we should respond if the sector table is valid. Since our BIOS is crap
  1073                              <1> ; we always return OK and let the format call fail. This would possibly be
  1074                              <1> ; dangerous but its not since the BIOS CHS emulation is very meh.
  1075 00000D48 C60200              <1>     mov byte [rdx + chsFormatBlock.bSpecFuncs], 0   ;All ok!
  1076                              <1>     return
    13                              <2> %%_ret:
    14 00000D4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1077                              <1> .iochsFmtCmn:
  1078 00000D4C E82B000000          <1>     call .ioChsToLba    ;Get the LBA of the first sector of the track in ecx
  1079 00000D51 0FB77517            <1>     movzx esi, word [rbp + drvBlk.wSecPerTrk]   ;Fmt/Verify this many sectors
  1080 00000D55 89D8                <1>     mov eax, ebx    ;Move the function number to eax
  1081 00000D57 E981000000          <1>     jmp .ioEp
  1082                              <1> .ioVerify:
  1083 00000D5C 7548                <1>     jnz .lbaVerify
  1084                              <1> ;Here for CHS verify track.
  1085 00000D5E BB00840000          <1>     mov ebx, 8400h
  1086 00000D63 EBE7                <1>     jmp short .iochsFmtCmn
  1087                              <1> 
  1088                              <1> .ioChsSanity:
  1089                              <1> ;Checks that the read/write will be on one track and makes sense.
  1090                              <1> ;Input: ebx = BIOS function to call. Preserved.
  1091                              <1> ;       ecx = LBA of start sector.
  1092                              <1> ;       rdi -> chsIOBlock
  1093                              <1> ;       rbp -> Drive block ptr
  1094 00000D65 0FB74705            <1>     movzx eax, word [rdi + chsIOBlock.wStartSector] ;Zero based
  1095 00000D69 FFC0                <1>     inc eax         ;Make it 1 based for the comparison
  1096 00000D6B 66034707            <1>     add ax, word [rdi + chsIOBlock.wNumSectors]
  1097 00000D6F 663B4517            <1>     cmp ax, word [rbp + drvBlk.wSecPerTrk]  ;Does this surpass num sect/trck?
  1098                              <1>     retna
    77                              <2> cret na
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000D73 7701                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000D75 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1099                              <1> .ioctlerr:
  1100 00000D76 5B                  <1>     pop rbx ;Pop the ret addr off the stack and tail to the bad media
  1101 00000D77 E9A3FDFFFF          <1>     jmp .iobadMed
  1102                              <1> .ioChsToLba:
  1103                              <1> ;Gets the first sector of the track selected by this call.
  1104                              <1> ;Works with the values set in the bpb of drvBlk which isn't ideal...
  1105                              <1> ;LBA = (( C x HPC ) + H ) x SPT + S - 1
  1106                              <1> ;Input: ebx = BIOS Function to call. Preserved.
  1107                              <1> ;Output: ecx = eax = LBA address for the first sector of the track
  1108                              <1> ;        rdi -> chsFormatBlock or IOBlock
  1109 00000D7C 4889D7              <1>     mov rdi, rdx
  1110 00000D7F 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
  1111 00000D83 0FB74F03            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartCyl]
  1112 00000D87 663B4D39            <1>     cmp cx, word [rbp + drvBlk.wNumCyl]
  1113 00000D8B 73E9                <1>     jae .ioctlerr
  1114 00000D8D FFC1                <1>     inc ecx ;Inc as we get it as a zero based number
  1115 00000D8F F7E1                <1>     mul ecx
  1116 00000D91 0FB74F01            <1>     movzx ecx, word [rdi + chsFormatBlock.wStartHead]
  1117 00000D95 663B4D19            <1>     cmp cx, word [rbp + drvBlk.wNumHeads]
  1118 00000D99 73DB                <1>     jae .ioctlerr 
  1119 00000D9B 01C8                <1>     add eax, ecx
  1120 00000D9D 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
  1121 00000DA1 F7E1                <1>     mul ecx
  1122 00000DA3 89C1                <1>     mov ecx, eax
  1123                              <1>     return
    13                              <2> %%_ret:
    14 00000DA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> ;---------------------------------------------------------------------------
  1125                              <1> ;                    LBA IO requests are structured here
  1126                              <1> ;---------------------------------------------------------------------------
  1127                              <1> .lbaVerify:
  1128 00000DA6 B800840000          <1>     mov eax, 8400h  ;Verify sectors
  1129 00000DAB EB05                <1>     jmp short .lbaFmtCmn
  1130                              <1> .lbaFmt:
  1131 00000DAD B800850000          <1>     mov eax, 8500h  ;Format sectors
  1132                              <1> .lbaFmtCmn:
  1133 00000DB2 803A10              <1>     cmp byte [rdx + lbaIOBlock.size], lbaFormatBlock_size
  1134 00000DB5 EB13                <1>     jmp short .lbaCmn
  1135                              <1> .lbaRead:
  1136 00000DB7 B800820000          <1>     mov eax, 8200h  ;Read sectors
  1137 00000DBC EB05                <1>     jmp short .lbaRWCmn
  1138                              <1> .lbaWrite:
  1139 00000DBE B800830000          <1>     mov eax, 8300h  ;Write sectors
  1140                              <1> .lbaRWCmn:
  1141 00000DC3 488B5A10            <1>     mov rbx, qword [rdx + lbaIOBlock.xferBuffer]
  1142 00000DC7 803A18              <1>     cmp byte [rdx + lbaIOBlock.size], lbaIOBlock_size
  1143                              <1> .lbaCmn:
  1144 00000DCA 0F8545FDFFFF        <1>     jne .iobadCmdLen
  1145                              <1> ;Setup the vars for block IO
  1146 00000DD0 4889D7              <1>     mov rdi, rdx
  1147 00000DD3 0FB77701            <1>     movzx esi, word [rdi + lbaFormatBlock.numSectors]
  1148 00000DD7 8B4F08              <1>     mov ecx, dword [rdi + lbaFormatBlock.startSector]
  1149 00000DDA 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]  ;Point to sector in partition
  1150                              <1> .ioEp:
  1151 00000DDD 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
  1152                              <1> .ioLp:
  1153 00000DE0 50                  <1>     push rax        ;Always preserve the function number we are using
  1154 00000DE1 E8EEFBFFFF          <1>     call .blkIODirect
  1155 00000DE6 58                  <1>     pop rax
  1156 00000DE7 0F82B9FBFFFF        <1>     jc .ioDoErr
  1157 00000DED E8BFFBFFFF          <1>     call .ioAdv
  1158 00000DF2 75EC                <1>     jnz .ioLp
  1159                              <1>     return
    13                              <2> %%_ret:
    14 00000DF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1160                              <1> ;---------------------------------------------------------------------------
  1161                              <1> 
  1162                              <1> ;---------------------------------------------------------------------------
  1163                              <1> ;                           Misc GENIO routines 
  1164                              <1> ;---------------------------------------------------------------------------
  1165                              <1> .ioSetIds:
  1166                              <1> .ioGetIds:
  1167 00000DF5 E911FDFFFF          <1>     jmp .iobadCmd
  1168                              <1> .ioSetAccessFlag:
  1169                              <1> ;Sets/Clears the unformatted bit of a device block.
  1170 00000DFA F64201FF            <1>     test byte [rdx + accFlgBlk.bAccMode], -1
  1171 00000DFE 7407                <1>     jz .iosafNoAcc
  1172                              <1> ;Enables access if the access mode is non-zero
  1173 00000E00 66816537FFFD        <1>     and word [rbp + drvBlk.wDevFlgs], ~devUnFmt
  1174                              <1>     return
    13                              <2> %%_ret:
    14 00000E06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1175                              <1> .iosafNoAcc:
  1176                              <1> ;Disables access if the access mode is zero 
  1177 00000E07 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00000E0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .ioGetAccessFlag:
  1180                              <1> ;Gets the state of the unformatted bit of a device block
  1181 00000E0E C6420100            <1>     mov byte [rdx + accFlgBlk.bAccMode], 0  ;Init to clear, no access
  1182 00000E12 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
  1183                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000E18 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000E1A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1184 00000E1B FE4201              <1>     inc byte [rdx + accFlgBlk.bAccMode] ;If bit clear, set mode to access ok!
  1185                              <1>     return
    13                              <2> %%_ret:
    14 00000E1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1186                              <1> 
  1187                              <1> .ioTrackTbl:
  1188 00000E1F 3F00                <1>     dw maxTrackTblSz    ;Have a maximum of 63 sectors per track
  1189                              <1> ;Each row is a pair of words:
  1190                              <1> ;   dw Sector number, Sector size
  1191 00000E21 01000002            <1>     dw 1, 200h
  1192 00000E25 02000002            <1>     dw 2, 200h
  1193 00000E29 03000002            <1>     dw 3, 200h
  1194 00000E2D 04000002            <1>     dw 4, 200h
  1195 00000E31 05000002            <1>     dw 5, 200h
  1196 00000E35 06000002            <1>     dw 6, 200h
  1197 00000E39 07000002            <1>     dw 7, 200h
  1198 00000E3D 08000002            <1>     dw 8, 200h
  1199 00000E41 09000002            <1>     dw 9, 200h
  1200 00000E45 0A000002            <1>     dw 10, 200h
  1201 00000E49 0B000002            <1>     dw 11, 200h
  1202 00000E4D 0C000002            <1>     dw 12, 200h
  1203 00000E51 0D000002            <1>     dw 13, 200h
  1204 00000E55 0E000002            <1>     dw 14, 200h
  1205 00000E59 0F000002            <1>     dw 15, 200h
  1206 00000E5D 10000002            <1>     dw 16, 200h
  1207 00000E61 11000002            <1>     dw 17, 200h
  1208 00000E65 12000002            <1>     dw 18, 200h
  1209 00000E69 13000002            <1>     dw 19, 200h
  1210 00000E6D 14000002            <1>     dw 20, 200h
  1211 00000E71 15000002            <1>     dw 21, 200h
  1212 00000E75 16000002            <1>     dw 22, 200h
  1213 00000E79 17000002            <1>     dw 23, 200h
  1214 00000E7D 18000002            <1>     dw 24, 200h
  1215 00000E81 19000002            <1>     dw 25, 200h
  1216 00000E85 1A000002            <1>     dw 26, 200h
  1217 00000E89 1B000002            <1>     dw 27, 200h
  1218 00000E8D 1C000002            <1>     dw 28, 200h
  1219 00000E91 1D000002            <1>     dw 29, 200h
  1220 00000E95 1E000002            <1>     dw 30, 200h
  1221 00000E99 1F000002            <1>     dw 31, 200h
  1222 00000E9D 20000002            <1>     dw 32, 200h
  1223 00000EA1 21000002            <1>     dw 33, 200h
  1224 00000EA5 22000002            <1>     dw 34, 200h
  1225 00000EA9 23000002            <1>     dw 35, 200h
  1226 00000EAD 24000002            <1>     dw 36, 200h
  1227 00000EB1 25000002            <1>     dw 37, 200h
  1228 00000EB5 26000002            <1>     dw 38, 200h
  1229 00000EB9 27000002            <1>     dw 39, 200h
  1230 00000EBD 28000002            <1>     dw 40, 200h
  1231 00000EC1 29000002            <1>     dw 41, 200h
  1232 00000EC5 2A000002            <1>     dw 42, 200h
  1233 00000EC9 2B000002            <1>     dw 43, 200h
  1234 00000ECD 2C000002            <1>     dw 44, 200h
  1235 00000ED1 2D000002            <1>     dw 45, 200h
  1236 00000ED5 2E000002            <1>     dw 46, 200h
  1237 00000ED9 2F000002            <1>     dw 47, 200h
  1238 00000EDD 30000002            <1>     dw 48, 200h
  1239 00000EE1 31000002            <1>     dw 49, 200h
  1240 00000EE5 32000002            <1>     dw 50, 200h
  1241 00000EE9 33000002            <1>     dw 51, 200h
  1242 00000EED 34000002            <1>     dw 52, 200h
  1243 00000EF1 35000002            <1>     dw 53, 200h
  1244 00000EF5 36000002            <1>     dw 54, 200h
  1245 00000EF9 37000002            <1>     dw 55, 200h
  1246 00000EFD 38000002            <1>     dw 56, 200h
  1247 00000F01 39000002            <1>     dw 57, 200h
  1248 00000F05 3A000002            <1>     dw 58, 200h
  1249 00000F09 3B000002            <1>     dw 59, 200h
  1250 00000F0D 3C000002            <1>     dw 60, 200h
  1251 00000F11 3D000002            <1>     dw 61, 200h
  1252 00000F15 3E000002            <1>     dw 62, 200h
  1253 00000F19 3F000002            <1>     dw 63, 200h
  1254                              <1> 
  1255                              <1> .getLogicalDev:   ;Function 23
  1256                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
  1257                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
  1258 00000F1D 31C0                <1>     xor eax, eax
  1259 00000F1F 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1260 00000F25 7428                <1>     jz .gldExit
  1261 00000F27 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
  1262 00000F2B 488D2D84120000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
  1263                              <1> .gldLp:
  1264 00000F32 384508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
  1265 00000F35 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
  1266 00000F3A 75F6                <1>     jne .gldLp
  1267 00000F3C 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
  1268 00000F42 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
  1269 00000F47 74E9                <1>     jz .gldLp 
  1270 00000F49 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
  1271 00000F4D FFC0                <1>     inc eax ;Make it 1 based
  1272                              <1> .gldExit:
  1273 00000F4F 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
  1274                              <1>     return
    13                              <2> %%_ret:
    14 00000F52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1275                              <1> 
  1276                              <1> .setLogicalDev:   ;Function 24
  1277 00000F53 E82A000000          <1>     call .checkDevType  ;Set the unit as the owner of this BIOS drive!
  1278                              <1>     return
    13                              <2> %%_ret:
    14 00000F58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1279                              <1> 
  1280                              <1> .setupDrive:
  1281                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
  1282                              <1> ; sets up internal vars according to it. 
  1283                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
  1284                              <1> ;Output: rbp = Points to the drvBlk
  1285 00000F59 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
  1286                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F5D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F5F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1287 00000F60 488D2D4F120000      <1>     lea rbp, .drvBlkTbl
  1288                              <1> .sdChk:
  1289 00000F67 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
  1290                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F6A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F6C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1291 00000F6D 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1292 00000F71 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1293 00000F78 75ED                <1>     jne .sdChk  ;Keep looping until end of table
  1294 00000F7A 58                  <1>     pop rax     ;Pop return address off the stack
  1295 00000F7B B007                <1>     mov al, drvBadMed
  1296 00000F7D E975F6FFFF          <1>     jmp .writeEntryError
  1297                              <1> 
  1298                              <1> .checkDevType:
  1299                              <1> ;Checks if we need to display the swap drive message and displays it if so.
  1300                              <1> ;The device must already be setup in rbp (and var) for this to work.
  1301                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
  1302 00000F82 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
  1303                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F88 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F8A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1304 00000F8B 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
  1305                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F91 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F93 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1306                              <1> ;Else, now we find the current owner of this drive letter :)
  1307 00000F94 8A4508              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
  1308 00000F97 488D3D18120000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
  1309                              <1> .cdtLp:
  1310 00000F9E 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1311 00000FA5 7454                <1>     je .cdtBadExit
  1312 00000FA7 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
  1313 00000FAA 740D                <1>     je .cdtNextEntry
  1314 00000FAC 384708              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
  1315 00000FAF 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
  1316                              <1>     ;Now we check if this is the current owner of the device?
  1317 00000FB1 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
  1318 00000FB7 7505                <1>     jnz .cdtDevFnd
  1319                              <1> .cdtNextEntry:
  1320 00000FB9 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
  1321 00000FBC EBE0                <1>     jmp short .cdtLp
  1322                              <1> .cdtDevFnd:
  1323                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
  1324                              <1> ; device) gains ownership.
  1325 00000FBE 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
  1326 00000FC4 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
  1327                              <1> ;If a set map request, don't prompt the message!
  1328 00000FCA 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
  1329                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000FCE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000FD0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1330                              <1> 
  1331                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1332 00000FD1 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
  1333 00000FD4 0441                <1>     add al, "A" ;Convert to a letter
  1334 00000FD6 880590010000        <1>     mov byte [.strikeMsgLetter], al
  1335 00000FDC 488D3576010000      <1>     lea rsi, .strikeMsg
  1336 00000FE3 B937000000          <1>     mov ecx, .strikeMsgL
  1337                              <1> .cdtPrint:
  1338 00000FE8 AC                  <1>     lodsb   ;Get the char in al, inc rsi
  1339 00000FE9 CD29                <1>     int 29h ;Print char in al
  1340 00000FEB FFC9                <1>     dec ecx
  1341 00000FED 75F9                <1>     jnz .cdtPrint
  1342                              <1> 
  1343 00000FEF E821000000          <1>     call .cdtCleanKeyb  ;Clean the buffer!
  1344 00000FF4 E80E000000          <1>     call .cdtAwaitKeyb  ;Await until a char ready in a friendly way :)
  1345                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
  1346                              <1> 
  1347 00000FF9 F8                  <1>     clc ;Indicate goodness through CF
  1348                              <1>     return
    13                              <2> %%_ret:
    14 00000FFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1349                              <1> .cdtBadExit:
  1350 00000FFB 58                  <1>     pop rax
  1351 00000FFC B807000000          <1>     mov eax, drvBadMed
  1352 00001001 F9                  <1>     stc ;Indicate badness through CF
  1353 00001002 E9D5F6FFFF          <1>     jmp .errorExit
  1354                              <1> 
  1355                              <1> .cdtAwaitKeyb:
  1356 00001007 B800010000          <1>     mov eax, 0100h
  1357 0000100C CD36                <1>     int 36h ;If return ZF=ZE, we have no char in the buffer. Loop until we do!
  1358 0000100E 74F7                <1>     jz .cdtAwaitKeyb
  1359 00001010 31C0                <1>     xor eax, eax
  1360 00001012 CD36                <1>     int 36h ;Now pull the char!
  1361                              <1>     return
    13                              <2> %%_ret:
    14 00001014 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1362                              <1> .cdtCleanKeyb:
  1363 00001015 B800010000          <1>     mov eax, 0100h
  1364 0000101A CD36                <1>     int 36h ;If return ZF=NZ we have a char in the buffer, pull it!
  1365                              <1>     retz    ;Else ZF=ZE, no char, ready to await the keypress.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000101C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000101E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1366 0000101F 31C0                <1>     xor eax, eax    ;Pull the char in the buffer from buffer
  1367 00001021 CD36                <1>     int 36h
  1368 00001023 EBF0                <1>     jmp short .cdtCleanKeyb
  1369                              <1> 
  1370                              <1> .ioSetVolLbl:
  1371                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
  1372                              <1> ;Input: rbx -> io request packet
  1373                              <1> ;       rbp -> drvBlk to get volume ID from
  1374                              <1> ;Output: Pointer placed in io request packet
  1375 00001025 50                  <1>     push rax
  1376 00001026 488D4574            <1>     lea rax, qword [rbp + drvBlk.volLab]    ;Get the volLbl from the BPB
  1377 0000102A 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
  1378 0000102E 58                  <1>     pop rax
  1379 0000102F C3                  <1>     ret
  1380                              <1> 
  1381                              <1> .getTime:
  1382                              <1> ;Gets the current time in a format ready to be used for disk access.
  1383 00001030 31C0                <1>     xor eax, eax
  1384 00001032 CD3A                <1>     int 3Ah
  1385 00001034 0FB7D2              <1>     movzx edx, dx
  1386 00001037 C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
  1387 0000103A 09D1                <1>     or ecx, edx ;Store the current time count into ecx
  1388 0000103C 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
  1389 0000103E 740E                <1>     jz .stStore
  1390 00001040 0FB6C0              <1>     movzx eax, al
  1391 00001043 51                  <1>     push rcx    ;Save the current time count
  1392 00001044 B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
  1393 00001049 F7E1                <1>     mul ecx
  1394 0000104B 59                  <1>     pop rcx
  1395 0000104C 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
  1396                              <1> .stStore:
  1397 0000104E F8                  <1>     clc
  1398                              <1>     return
    13                              <2> %%_ret:
    14 0000104F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1399                              <1> 
  1400                              <1> .setTime:
  1401                              <1> ;Sets the current time to the disk drive and resets the access counter
  1402 00001050 E8DBFFFFFF          <1>     call .getTime
  1403 00001055 894D70              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
  1404 00001058 C6055501000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
  1405                              <1>     return
    13                              <2> %%_ret:
    14 0000105F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1406                              <1> 
  1407                              <1> .checkTime:
  1408                              <1> ;Does the time/access count check :)
  1409                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
  1410 00001060 E8CBFFFFFF          <1>     call .getTime   ;Returns in ecx the current time
  1411 00001065 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
  1412 00001067 7517                <1>     jnz .ctOk
  1413 00001069 FE0545010000        <1>     inc byte [.bAccCnt]
  1414 0000106F 803D3E01000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
  1415 00001076 7217                <1>     jb .ctNoChange
  1416 00001078 FE0D36010000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
  1417 0000107E EB0D                <1>     jmp short .ctMaybeCh
  1418                              <1> .ctOk:
  1419 00001080 8B5570              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
  1420                              <1> ;ecx = time of current check, adjusted for day rollovers 
  1421 00001083 29D1                <1>     sub ecx, edx    
  1422 00001085 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
  1423 0000108B 7602                <1>     jbe .ctNoChange
  1424                              <1> .ctMaybeCh:
  1425 0000108D F9                  <1>     stc
  1426                              <1>     return
    13                              <2> %%_ret:
    14 0000108E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1427                              <1> .ctNoChange:
  1428 0000108F F8                  <1>     clc
  1429                              <1>     return
    13                              <2> %%_ret:
    14 00001090 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1430                              <1> 
  1431                              <1> .callI33h:
  1432                              <1> ;Wraps all i33 calls allowing me to preserve all that I need to preserve
  1433                              <1> ; across these calls. Only allows returning values in ax.
  1434 00001091 53                  <1>     push rbx
  1435 00001092 51                  <1>     push rcx
  1436 00001093 52                  <1>     push rdx
  1437 00001094 56                  <1>     push rsi
  1438 00001095 57                  <1>     push rdi
  1439 00001096 55                  <1>     push rbp
  1440 00001097 CD33                <1>     int 33h
  1441 00001099 5D                  <1>     pop rbp
  1442 0000109A 5F                  <1>     pop rdi
  1443 0000109B 5E                  <1>     pop rsi
  1444 0000109C 5A                  <1>     pop rdx
  1445 0000109D 59                  <1>     pop rcx
  1446 0000109E 5B                  <1>     pop rbx
  1447                              <1>     return
    13                              <2> %%_ret:
    14 0000109F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1448                              <1> 
  1449                              <1> .setBitsForAllDevs:
  1450                              <1> ;Sets the selected bits for all devices with a particular BIOS number.
  1451                              <1> ;Input: ax = Bits to set in wDevFlgs
  1452                              <1> ;       dl = BIOS drive number
  1453 000010A0 55                  <1>     push rbp
  1454 000010A1 9C                  <1>     pushfq
  1455 000010A2 488D2D0D110000      <1>     lea rbp, .drvBlkTbl
  1456                              <1> .sbfadLp:
  1457 000010A9 385508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], dl
  1458 000010AC 7504                <1>     jne .sbfadNext
  1459 000010AE 66094537            <1>     or word [rbp + drvBlk.wDevFlgs], ax
  1460                              <1> .sbfadNext:
  1461 000010B2 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
  1462 000010B6 4881FDFFFFFFFF      <1>     cmp rbp, -1
  1463 000010BD 75EA                <1>     jne .sbfadLp
  1464                              <1> .sbfadExit:
  1465 000010BF 9D                  <1>     popfq
  1466 000010C0 5D                  <1>     pop rbp
  1467                              <1>     return
    13                              <2> %%_ret:
    14 000010C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1468                              <1> 
  1469                              <1> .i2fDriver:
  1470                              <1> ;Back door into the block driver :)
  1471 000010C2 80FC08              <1>     cmp ah, 08h
  1472 000010C5 7510                <1>     jne .i2fNotUs
  1473 000010C7 84C0                <1>     test al, al ;AL=00, Install check
  1474 000010C9 7412                <1>     jz .i2fCheck
  1475 000010CB 3C01                <1>     cmp al, 01  ;AL=01, Add block device
  1476 000010CD 7412                <1>     je .i2fAddTbl
  1477 000010CF 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
  1478 000010D1 745D                <1>     je .i2fExec
  1479 000010D3 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
  1480 000010D5 7479                <1>     je .i2fGivTbl
  1481                              <1> .i2fNotUs:
  1482 000010D7 FF25F1F3FFFF        <1>     jmp qword [i2FNext]
  1483                              <1> .i2fCheck:
  1484 000010DD B0FF                <1>     mov al, -1  ;Indicate installed!
  1485 000010DF 48CF                <1>     iretq
  1486                              <1> .i2fAddTbl:
  1487                              <1> ;Adds a new entry to the drive chain and updates the multiownership bits
  1488                              <1> ; as it does :)
  1489                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
  1490                              <1> ;Destroy rax, rbx and rsi
  1491 000010E1 488D35CE100000      <1>     lea rsi, .drvBlkTbl
  1492 000010E8 0FB64708            <1>     movzx eax, byte [rdi + drvBlk.bBIOSNum]
  1493                              <1> .i2fATLp:
  1494 000010EC 384608              <1>     cmp byte [rsi + drvBlk.bBIOSNum], al
  1495 000010EF 7526                <1>     jne .i2fATNext
  1496                              <1> ;Set that the two disks are multi owned. New cannot own the drive
  1497                              <1> ; and make sure that the new drive has the accurate changeline bit set
  1498 000010F1 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti       ;Both drives now multi!
  1499 000010F7 66814F371000        <1>     or word [rdi + drvBlk.wDevFlgs], devMulti
  1500 000010FD 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv    ;New cant own drv
  1501                              <1> ;Changeline check.
  1502 00001103 66816737FDFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devChgLine   ;Assume no changeline
  1503 00001109 66F746370200        <1>     test word [rsi + drvBlk.wDevFlgs], devChgLine   ;Do we really have cline?
  1504 0000110F 7406                <1>     jz .i2fATNext   ;Skip adding the bit if not
  1505 00001111 66814F370200        <1>     or word [rdi + drvBlk.wDevFlgs], devChgLine     ;Add if we do 
  1506                              <1> .i2fATNext:
  1507 00001117 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;Check if we @ end of table
  1508 0000111E 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink] ;Walk if not
  1509 00001122 75C8                <1>     jne .i2fATLp    ;And go again if not
  1510 00001124 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi ;Else, link rdi onto the end
  1511 00001127 48C707FFFFFFFF      <1>     mov qword [rdi + drvBlk.pLink], -1  ;And terminate list @ rdi now :)
  1512 0000112E 48CF                <1>     iretq
  1513                              <1> .i2fExec:
  1514                              <1> ;We make a small change in that we clean up the flags from the stack
  1515                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
  1516                              <1> ; as no useful information is ever passed in the flags from a driver
  1517                              <1> ; so by doing so, any ported applications which do an additional pop
  1518                              <1> ; from the stack to balance the stack will not be harmed by this.
  1519 00001130 50                  <1>     push rax
  1520 00001131 B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
  1521 00001136 CD2A                <1>     int 2Ah
  1522                              <1> 
  1523 00001138 53                  <1>     push rbx
  1524 00001139 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx  ;Save the ptr in var since we own it now :)
  1525 00001140 E849F4FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
  1526 00001145 5B                  <1>     pop rbx
  1527                              <1> 
  1528 00001146 B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
  1529 0000114B CD2A                <1>     int 2Ah
  1530 0000114D 58                  <1>     pop rax
  1531 0000114E 48CF                <1>     iretq
  1532                              <1> .i2fGivTbl:
  1533                              <1> ;Output: rdi -> drvBlkTbl
  1534 00001150 488D3D5F100000      <1>     lea rdi, .drvBlkTbl
  1535 00001157 48CF                <1>     iretq
  1536                              <1> 
  1537 00001159 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert for drive "
  1537 00001162 666F72206472697665- <1>
  1537 0000116B 20                  <1>
  1538 0000116C 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
  1538 00001175 72696B650D0A616E79- <1>
  1538 0000117E 206B6579207768656E- <1>
  1538 00001187 2072656164790D0A0A  <1>
  1539                              <1> .strikeMsgL equ $ - .strikeMsg
  1540                              <1> 
  1541 00001190 464154313220202000  <1> .fat12Str   db "FAT12   ",0
  1542 00001199 464154313620202000  <1> .fat16Str   db "FAT16   ",0
  1543 000011A2 464154333220202000  <1> .fat32Str   db "FAT32   ",0
  1544 000011AB 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
  1545                              <1> 
  1546 000011B4 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
  1547 000011B5 FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check/IO.
  1548                              <1> 
  1549                              <1> ;Keep this @ 4096 for hotplugging a 4096 dev that needs 512 byte pseudo
  1550                              <1> ; access. 
  1551                              <1> ;Access to this buffer should be mediated through a critical section... 
  1552                              <1> ; but this driver doesnt need to be reentrant yet.
  1553 000011B6 000000000000000000- <1> .inBuffer   db 4096 dup (0)  
  1553 000011BF 000000000000000000- <1>
  1553 000011C8 000000000000000000- <1>
  1553 000011D1 000000000000000000- <1>
  1553 000011DA 000000000000000000- <1>
  1553 000011E3 000000000000000000- <1>
  1553 000011EC 000000000000000000- <1>
  1553 000011F5 000000000000000000- <1>
  1553 000011FE 000000000000000000- <1>
  1553 00001207 000000000000000000- <1>
  1553 00001210 000000000000000000- <1>
  1553 00001219 000000000000000000- <1>
  1553 00001222 000000000000000000- <1>
  1553 0000122B 000000000000000000- <1>
  1553 00001234 000000000000000000- <1>
  1553 0000123D 000000000000000000- <1>
  1553 00001246 000000000000000000- <1>
  1553 0000124F 000000000000000000- <1>
  1553 00001258 000000000000000000- <1>
  1553 00001261 000000000000000000- <1>
  1553 0000126A 000000000000000000- <1>
  1553 00001273 000000000000000000- <1>
  1553 0000127C 000000000000000000- <1>
  1553 00001285 000000000000000000- <1>
  1553 0000128E 000000000000000000- <1>
  1553 00001297 000000000000000000- <1>
  1553 000012A0 000000000000000000- <1>
  1553 000012A9 000000000000000000- <1>
  1553 000012B2 000000000000000000- <1>
  1553 000012BB 000000000000000000- <1>
  1553 000012C4 000000000000000000- <1>
  1553 000012CD 000000000000000000- <1>
  1553 000012D6 000000000000000000- <1>
  1553 000012DF 000000000000000000- <1>
  1553 000012E8 000000000000000000- <1>
  1553 000012F1 000000000000000000- <1>
  1553 000012FA 000000000000000000- <1>
  1553 00001303 000000000000000000- <1>
  1553 0000130C 000000000000000000- <1>
  1553 00001315 000000000000000000- <1>
  1553 0000131E 000000000000000000- <1>
  1553 00001327 000000000000000000- <1>
  1553 00001330 000000000000000000- <1>
  1553 00001339 000000000000000000- <1>
  1553 00001342 000000000000000000- <1>
  1553 0000134B 000000000000000000- <1>
  1553 00001354 000000000000000000- <1>
  1553 0000135D 000000000000000000- <1>
  1553 00001366 000000000000000000- <1>
  1553 0000136F 000000000000000000- <1>
  1553 00001378 000000000000000000- <1>
  1553 00001381 000000000000000000- <1>
  1553 0000138A 000000000000000000- <1>
  1553 00001393 000000000000000000- <1>
  1553 0000139C 000000000000000000- <1>
  1553 000013A5 000000000000000000- <1>
  1553 000013AE 000000000000000000- <1>
  1553 000013B7 000000000000000000- <1>
  1553 000013C0 000000000000000000- <1>
  1553 000013C9 000000000000000000- <1>
  1553 000013D2 000000000000000000- <1>
  1553 000013DB 000000000000000000- <1>
  1553 000013E4 000000000000000000- <1>
  1553 000013ED 000000000000000000- <1>
  1553 000013F6 000000000000000000- <1>
  1553 000013FF 000000000000000000- <1>
  1553 00001408 000000000000000000- <1>
  1553 00001411 000000000000000000- <1>
  1553 0000141A 000000000000000000- <1>
  1553 00001423 000000000000000000- <1>
  1553 0000142C 000000000000000000- <1>
  1553 00001435 000000000000000000- <1>
  1553 0000143E 000000000000000000- <1>
  1553 00001447 000000000000000000- <1>
  1553 00001450 000000000000000000- <1>
  1553 00001459 000000000000000000- <1>
  1553 00001462 000000000000000000- <1>
  1553 0000146B 000000000000000000- <1>
  1553 00001474 000000000000000000- <1>
  1553 0000147D 000000000000000000- <1>
  1553 00001486 000000000000000000- <1>
  1553 0000148F 000000000000000000- <1>
  1553 00001498 000000000000000000- <1>
  1553 000014A1 000000000000000000- <1>
  1553 000014AA 000000000000000000- <1>
  1553 000014B3 000000000000000000- <1>
  1553 000014BC 000000000000000000- <1>
  1553 000014C5 000000000000000000- <1>
  1553 000014CE 000000000000000000- <1>
  1553 000014D7 000000000000000000- <1>
  1553 000014E0 000000000000000000- <1>
  1553 000014E9 000000000000000000- <1>
  1553 000014F2 000000000000000000- <1>
  1553 000014FB 000000000000000000- <1>
  1553 00001504 000000000000000000- <1>
  1553 0000150D 000000000000000000- <1>
  1553 00001516 000000000000000000- <1>
  1553 0000151F 000000000000000000- <1>
  1553 00001528 000000000000000000- <1>
  1553 00001531 000000000000000000- <1>
  1553 0000153A 000000000000000000- <1>
  1553 00001543 000000000000000000- <1>
  1553 0000154C 000000000000000000- <1>
  1553 00001555 000000000000000000- <1>
  1553 0000155E 000000000000000000- <1>
  1553 00001567 000000000000000000- <1>
  1553 00001570 000000000000000000- <1>
  1553 00001579 000000000000000000- <1>
  1553 00001582 000000000000000000- <1>
  1553 0000158B 000000000000000000- <1>
  1553 00001594 000000000000000000- <1>
  1553 0000159D 000000000000000000- <1>
  1553 000015A6 000000000000000000- <1>
  1553 000015AF 000000000000000000- <1>
  1553 000015B8 000000000000000000- <1>
  1553 000015C1 000000000000000000- <1>
  1553 000015CA 000000000000000000- <1>
  1553 000015D3 000000000000000000- <1>
  1553 000015DC 000000000000000000- <1>
  1553 000015E5 000000000000000000- <1>
  1553 000015EE 000000000000000000- <1>
  1553 000015F7 000000000000000000- <1>
  1553 00001600 000000000000000000- <1>
  1553 00001609 000000000000000000- <1>
  1553 00001612 000000000000000000- <1>
  1553 0000161B 000000000000000000- <1>
  1553 00001624 000000000000000000- <1>
  1553 0000162D 000000000000000000- <1>
  1553 00001636 000000000000000000- <1>
  1553 0000163F 000000000000000000- <1>
  1553 00001648 000000000000000000- <1>
  1553 00001651 000000000000000000- <1>
  1553 0000165A 000000000000000000- <1>
  1553 00001663 000000000000000000- <1>
  1553 0000166C 000000000000000000- <1>
  1553 00001675 000000000000000000- <1>
  1553 0000167E 000000000000000000- <1>
  1553 00001687 000000000000000000- <1>
  1553 00001690 000000000000000000- <1>
  1553 00001699 000000000000000000- <1>
  1553 000016A2 000000000000000000- <1>
  1553 000016AB 000000000000000000- <1>
  1553 000016B4 000000000000000000- <1>
  1553 000016BD 000000000000000000- <1>
  1553 000016C6 000000000000000000- <1>
  1553 000016CF 000000000000000000- <1>
  1553 000016D8 000000000000000000- <1>
  1553 000016E1 000000000000000000- <1>
  1553 000016EA 000000000000000000- <1>
  1553 000016F3 000000000000000000- <1>
  1553 000016FC 000000000000000000- <1>
  1553 00001705 000000000000000000- <1>
  1553 0000170E 000000000000000000- <1>
  1553 00001717 000000000000000000- <1>
  1553 00001720 000000000000000000- <1>
  1553 00001729 000000000000000000- <1>
  1553 00001732 000000000000000000- <1>
  1553 0000173B 000000000000000000- <1>
  1553 00001744 000000000000000000- <1>
  1553 0000174D 000000000000000000- <1>
  1553 00001756 000000000000000000- <1>
  1553 0000175F 000000000000000000- <1>
  1553 00001768 000000000000000000- <1>
  1553 00001771 000000000000000000- <1>
  1553 0000177A 000000000000000000- <1>
  1553 00001783 000000000000000000- <1>
  1553 0000178C 000000000000000000- <1>
  1553 00001795 000000000000000000- <1>
  1553 0000179E 000000000000000000- <1>
  1553 000017A7 000000000000000000- <1>
  1553 000017B0 000000000000000000- <1>
  1553 000017B9 000000000000000000- <1>
  1553 000017C2 000000000000000000- <1>
  1553 000017CB 000000000000000000- <1>
  1553 000017D4 000000000000000000- <1>
  1553 000017DD 000000000000000000- <1>
  1553 000017E6 000000000000000000- <1>
  1553 000017EF 000000000000000000- <1>
  1553 000017F8 000000000000000000- <1>
  1553 00001801 000000000000000000- <1>
  1553 0000180A 000000000000000000- <1>
  1553 00001813 000000000000000000- <1>
  1553 0000181C 000000000000000000- <1>
  1553 00001825 000000000000000000- <1>
  1553 0000182E 000000000000000000- <1>
  1553 00001837 000000000000000000- <1>
  1553 00001840 000000000000000000- <1>
  1553 00001849 000000000000000000- <1>
  1553 00001852 000000000000000000- <1>
  1553 0000185B 000000000000000000- <1>
  1553 00001864 000000000000000000- <1>
  1553 0000186D 000000000000000000- <1>
  1553 00001876 000000000000000000- <1>
  1553 0000187F 000000000000000000- <1>
  1553 00001888 000000000000000000- <1>
  1553 00001891 000000000000000000- <1>
  1553 0000189A 000000000000000000- <1>
  1553 000018A3 000000000000000000- <1>
  1553 000018AC 000000000000000000- <1>
  1553 000018B5 000000000000000000- <1>
  1553 000018BE 000000000000000000- <1>
  1553 000018C7 000000000000000000- <1>
  1553 000018D0 000000000000000000- <1>
  1553 000018D9 000000000000000000- <1>
  1553 000018E2 000000000000000000- <1>
  1553 000018EB 000000000000000000- <1>
  1553 000018F4 000000000000000000- <1>
  1553 000018FD 000000000000000000- <1>
  1553 00001906 000000000000000000- <1>
  1553 0000190F 000000000000000000- <1>
  1553 00001918 000000000000000000- <1>
  1553 00001921 000000000000000000- <1>
  1553 0000192A 000000000000000000- <1>
  1553 00001933 000000000000000000- <1>
  1553 0000193C 000000000000000000- <1>
  1553 00001945 000000000000000000- <1>
  1553 0000194E 000000000000000000- <1>
  1553 00001957 000000000000000000- <1>
  1553 00001960 000000000000000000- <1>
  1553 00001969 000000000000000000- <1>
  1553 00001972 000000000000000000- <1>
  1553 0000197B 000000000000000000- <1>
  1553 00001984 000000000000000000- <1>
  1553 0000198D 000000000000000000- <1>
  1553 00001996 000000000000000000- <1>
  1553 0000199F 000000000000000000- <1>
  1553 000019A8 000000000000000000- <1>
  1553 000019B1 000000000000000000- <1>
  1553 000019BA 000000000000000000- <1>
  1553 000019C3 000000000000000000- <1>
  1553 000019CC 000000000000000000- <1>
  1553 000019D5 000000000000000000- <1>
  1553 000019DE 000000000000000000- <1>
  1553 000019E7 000000000000000000- <1>
  1553 000019F0 000000000000000000- <1>
  1553 000019F9 000000000000000000- <1>
  1553 00001A02 000000000000000000- <1>
  1553 00001A0B 000000000000000000- <1>
  1553 00001A14 000000000000000000- <1>
  1553 00001A1D 000000000000000000- <1>
  1553 00001A26 000000000000000000- <1>
  1553 00001A2F 000000000000000000- <1>
  1553 00001A38 000000000000000000- <1>
  1553 00001A41 000000000000000000- <1>
  1553 00001A4A 000000000000000000- <1>
  1553 00001A53 000000000000000000- <1>
  1553 00001A5C 000000000000000000- <1>
  1553 00001A65 000000000000000000- <1>
  1553 00001A6E 000000000000000000- <1>
  1553 00001A77 000000000000000000- <1>
  1553 00001A80 000000000000000000- <1>
  1553 00001A89 000000000000000000- <1>
  1553 00001A92 000000000000000000- <1>
  1553 00001A9B 000000000000000000- <1>
  1553 00001AA4 000000000000000000- <1>
  1553 00001AAD 000000000000000000- <1>
  1553 00001AB6 000000000000000000- <1>
  1553 00001ABF 000000000000000000- <1>
  1553 00001AC8 000000000000000000- <1>
  1553 00001AD1 000000000000000000- <1>
  1553 00001ADA 000000000000000000- <1>
  1553 00001AE3 000000000000000000- <1>
  1553 00001AEC 000000000000000000- <1>
  1553 00001AF5 000000000000000000- <1>
  1553 00001AFE 000000000000000000- <1>
  1553 00001B07 000000000000000000- <1>
  1553 00001B10 000000000000000000- <1>
  1553 00001B19 000000000000000000- <1>
  1553 00001B22 000000000000000000- <1>
  1553 00001B2B 000000000000000000- <1>
  1553 00001B34 000000000000000000- <1>
  1553 00001B3D 000000000000000000- <1>
  1553 00001B46 000000000000000000- <1>
  1553 00001B4F 000000000000000000- <1>
  1553 00001B58 000000000000000000- <1>
  1553 00001B61 000000000000000000- <1>
  1553 00001B6A 000000000000000000- <1>
  1553 00001B73 000000000000000000- <1>
  1553 00001B7C 000000000000000000- <1>
  1553 00001B85 000000000000000000- <1>
  1553 00001B8E 000000000000000000- <1>
  1553 00001B97 000000000000000000- <1>
  1553 00001BA0 000000000000000000- <1>
  1553 00001BA9 000000000000000000- <1>
  1553 00001BB2 000000000000000000- <1>
  1553 00001BBB 000000000000000000- <1>
  1553 00001BC4 000000000000000000- <1>
  1553 00001BCD 000000000000000000- <1>
  1553 00001BD6 000000000000000000- <1>
  1553 00001BDF 000000000000000000- <1>
  1553 00001BE8 000000000000000000- <1>
  1553 00001BF1 000000000000000000- <1>
  1553 00001BFA 000000000000000000- <1>
  1553 00001C03 000000000000000000- <1>
  1553 00001C0C 000000000000000000- <1>
  1553 00001C15 000000000000000000- <1>
  1553 00001C1E 000000000000000000- <1>
  1553 00001C27 000000000000000000- <1>
  1553 00001C30 000000000000000000- <1>
  1553 00001C39 000000000000000000- <1>
  1553 00001C42 000000000000000000- <1>
  1553 00001C4B 000000000000000000- <1>
  1553 00001C54 000000000000000000- <1>
  1553 00001C5D 000000000000000000- <1>
  1553 00001C66 000000000000000000- <1>
  1553 00001C6F 000000000000000000- <1>
  1553 00001C78 000000000000000000- <1>
  1553 00001C81 000000000000000000- <1>
  1553 00001C8A 000000000000000000- <1>
  1553 00001C93 000000000000000000- <1>
  1553 00001C9C 000000000000000000- <1>
  1553 00001CA5 000000000000000000- <1>
  1553 00001CAE 000000000000000000- <1>
  1553 00001CB7 000000000000000000- <1>
  1553 00001CC0 000000000000000000- <1>
  1553 00001CC9 000000000000000000- <1>
  1553 00001CD2 000000000000000000- <1>
  1553 00001CDB 000000000000000000- <1>
  1553 00001CE4 000000000000000000- <1>
  1553 00001CED 000000000000000000- <1>
  1553 00001CF6 000000000000000000- <1>
  1553 00001CFF 000000000000000000- <1>
  1553 00001D08 000000000000000000- <1>
  1553 00001D11 000000000000000000- <1>
  1553 00001D1A 000000000000000000- <1>
  1553 00001D23 000000000000000000- <1>
  1553 00001D2C 000000000000000000- <1>
  1553 00001D35 000000000000000000- <1>
  1553 00001D3E 000000000000000000- <1>
  1553 00001D47 000000000000000000- <1>
  1553 00001D50 000000000000000000- <1>
  1553 00001D59 000000000000000000- <1>
  1553 00001D62 000000000000000000- <1>
  1553 00001D6B 000000000000000000- <1>
  1553 00001D74 000000000000000000- <1>
  1553 00001D7D 000000000000000000- <1>
  1553 00001D86 000000000000000000- <1>
  1553 00001D8F 000000000000000000- <1>
  1553 00001D98 000000000000000000- <1>
  1553 00001DA1 000000000000000000- <1>
  1553 00001DAA 000000000000000000- <1>
  1553 00001DB3 000000000000000000- <1>
  1553 00001DBC 000000000000000000- <1>
  1553 00001DC5 000000000000000000- <1>
  1553 00001DCE 000000000000000000- <1>
  1553 00001DD7 000000000000000000- <1>
  1553 00001DE0 000000000000000000- <1>
  1553 00001DE9 000000000000000000- <1>
  1553 00001DF2 000000000000000000- <1>
  1553 00001DFB 000000000000000000- <1>
  1553 00001E04 000000000000000000- <1>
  1553 00001E0D 000000000000000000- <1>
  1553 00001E16 000000000000000000- <1>
  1553 00001E1F 000000000000000000- <1>
  1553 00001E28 000000000000000000- <1>
  1553 00001E31 000000000000000000- <1>
  1553 00001E3A 000000000000000000- <1>
  1553 00001E43 000000000000000000- <1>
  1553 00001E4C 000000000000000000- <1>
  1553 00001E55 000000000000000000- <1>
  1553 00001E5E 000000000000000000- <1>
  1553 00001E67 000000000000000000- <1>
  1553 00001E70 000000000000000000- <1>
  1553 00001E79 000000000000000000- <1>
  1553 00001E82 000000000000000000- <1>
  1553 00001E8B 000000000000000000- <1>
  1553 00001E94 000000000000000000- <1>
  1553 00001E9D 000000000000000000- <1>
  1553 00001EA6 000000000000000000- <1>
  1553 00001EAF 000000000000000000- <1>
  1553 00001EB8 000000000000000000- <1>
  1553 00001EC1 000000000000000000- <1>
  1553 00001ECA 000000000000000000- <1>
  1553 00001ED3 000000000000000000- <1>
  1553 00001EDC 000000000000000000- <1>
  1553 00001EE5 000000000000000000- <1>
  1553 00001EEE 000000000000000000- <1>
  1553 00001EF7 000000000000000000- <1>
  1553 00001F00 000000000000000000- <1>
  1553 00001F09 000000000000000000- <1>
  1553 00001F12 000000000000000000- <1>
  1553 00001F1B 000000000000000000- <1>
  1553 00001F24 000000000000000000- <1>
  1553 00001F2D 000000000000000000- <1>
  1553 00001F36 000000000000000000- <1>
  1553 00001F3F 000000000000000000- <1>
  1553 00001F48 000000000000000000- <1>
  1553 00001F51 000000000000000000- <1>
  1553 00001F5A 000000000000000000- <1>
  1553 00001F63 000000000000000000- <1>
  1553 00001F6C 000000000000000000- <1>
  1553 00001F75 000000000000000000- <1>
  1553 00001F7E 000000000000000000- <1>
  1553 00001F87 000000000000000000- <1>
  1553 00001F90 000000000000000000- <1>
  1553 00001F99 000000000000000000- <1>
  1553 00001FA2 000000000000000000- <1>
  1553 00001FAB 000000000000000000- <1>
  1553 00001FB4 000000000000000000- <1>
  1553 00001FBD 000000000000000000- <1>
  1553 00001FC6 000000000000000000- <1>
  1553 00001FCF 000000000000000000- <1>
  1553 00001FD8 000000000000000000- <1>
  1553 00001FE1 000000000000000000- <1>
  1553 00001FEA 000000000000000000- <1>
  1553 00001FF3 000000000000000000- <1>
  1553 00001FFC 000000000000000000- <1>
  1553 00002005 000000000000000000- <1>
  1553 0000200E 000000000000000000- <1>
  1553 00002017 000000000000000000- <1>
  1553 00002020 000000000000000000- <1>
  1553 00002029 000000000000000000- <1>
  1553 00002032 000000000000000000- <1>
  1553 0000203B 000000000000000000- <1>
  1553 00002044 000000000000000000- <1>
  1553 0000204D 000000000000000000- <1>
  1553 00002056 000000000000000000- <1>
  1553 0000205F 000000000000000000- <1>
  1553 00002068 000000000000000000- <1>
  1553 00002071 000000000000000000- <1>
  1553 0000207A 000000000000000000- <1>
  1553 00002083 000000000000000000- <1>
  1553 0000208C 000000000000000000- <1>
  1553 00002095 000000000000000000- <1>
  1553 0000209E 000000000000000000- <1>
  1553 000020A7 000000000000000000- <1>
  1553 000020B0 000000000000000000- <1>
  1553 000020B9 000000000000000000- <1>
  1553 000020C2 000000000000000000- <1>
  1553 000020CB 000000000000000000- <1>
  1553 000020D4 000000000000000000- <1>
  1553 000020DD 000000000000000000- <1>
  1553 000020E6 000000000000000000- <1>
  1553 000020EF 000000000000000000- <1>
  1553 000020F8 000000000000000000- <1>
  1553 00002101 000000000000000000- <1>
  1553 0000210A 000000000000000000- <1>
  1553 00002113 000000000000000000- <1>
  1553 0000211C 000000000000000000- <1>
  1553 00002125 000000000000000000- <1>
  1553 0000212E 000000000000000000- <1>
  1553 00002137 000000000000000000- <1>
  1553 00002140 000000000000000000- <1>
  1553 00002149 000000000000000000- <1>
  1553 00002152 000000000000000000- <1>
  1553 0000215B 000000000000000000- <1>
  1553 00002164 000000000000000000- <1>
  1553 0000216D 000000000000000000- <1>
  1553 00002176 000000000000000000- <1>
  1553 0000217F 000000000000000000- <1>
  1553 00002188 000000000000000000- <1>
  1553 00002191 000000000000000000- <1>
  1553 0000219A 000000000000000000- <1>
  1553 000021A3 000000000000000000- <1>
  1553 000021AC 000000000000000000- <1>
  1553 000021B5 00                  <1>
  1554                              <1> 
  1555                              <1> .drvBlkTbl:
  1556                              <1>     ;db drvBlkTblL*drvBlk_size dup (0)
  1557                              <1> ;Have all drives default to a 1.44Mb partition
  1558                              <1>     %assign i 0
  1559                              <1>     %rep drvBlkTblL
  1560                              <1>     istruc drvBlk
  1561                              <1>         at .pLink,      dq -1   ;End of table marker
  1562                              <1>         at .bBIOSNum,   db i    ;DOS drive number
  1563                              <1>         at .bDOSNum,    db i    ;BIOS drives default to removable
  1564                              <1> ;Do a FAT12/16 BPB in FAT32 format
  1565                              <1>         at .wBpS,       dw 200h
  1566                              <1>         at .bSpC,       db 01h
  1567                              <1>         at .wResC,      dw 0001h
  1568                              <1>         at .bNumFAT,    db 02h    
  1569                              <1>         at .wRtCntNum,  dw 00E0h    
  1570                              <1>         at .wTotSec16,  dw 0B40h    
  1571                              <1>         at .bMedDesc,   db 0F0h    
  1572                              <1>         at .wFATsz16,   dw 0009h    
  1573                              <1>         at .wSecPerTrk, dw 0012h    
  1574                              <1>         at .wNumHeads,  dw 0002h    
  1575                              <1>         at .dHiddSec,   dd 0    
  1576                              <1>         at .dTotSec32,  dd 0     
  1577                              <1> ;FAT 32 fields. All zeros
  1578                              <1>         at .FATsz32,    dd 0
  1579                              <1>         at .extFlags,   dw 0
  1580                              <1>         at .FSver,      dw 0
  1581                              <1>         at .RootClus,   dd 0
  1582                              <1>         at .FSinfo,     dw 0
  1583                              <1>         at .BkBootSec,  dw 0
  1584                              <1> ;DrvBlk Flags
  1585                              <1>         at .bBpbType,   db bpbFat12
  1586                              <1>         at .wOpenCnt,   dw 0
  1587                              <1>         at .bDevType,   db 0
  1588                              <1>         at .wDevFlgs,   dw 0
  1589                              <1>         at .wNumCyl,    dw 63   ;63 Cylinders
  1590                              <1>         istruc bpb32
  1591                              <1>             at .bytsPerSec, dw 200h
  1592                              <1>             at .secPerClus, db 01h
  1593                              <1>             at .revdSecCnt, dw 0001h
  1594                              <1>             at .numFATs,    db 02h    
  1595                              <1>             at .rootEntCnt, dw 00E0h    
  1596                              <1>             at .totSec16,   dw 0B40h    
  1597                              <1>             at .media,      db 0F0h    
  1598                              <1>             at .FATsz16,    dw 0009h    
  1599                              <1>             at .secPerTrk,  dw 0012h    
  1600                              <1>             at .numHeads,   dw 0002h    
  1601                              <1>             at .hiddSec,    dd 0    
  1602                              <1>             at .totSec32,   dd 0     
  1603                              <1>             at .FATsz32,    dd 0
  1604                              <1>             at .extFlags,   dw 0
  1605                              <1>             at .FSver,      dw 0
  1606                              <1>             at .RootClus,   dd 0
  1607                              <1>             at .FSinfo,     dw 0
  1608                              <1>             at .BkBootSec,  dw 0
  1609                              <1>             at .reserved,   db 12 dup (0) 
  1610                              <1>         iend
  1611                              <1>         at .dAccTime,   dd 0
  1612                              <1>         at .volLab,     db "NO NAME    ",0
  1613                              <1>         at .volId,      dd 0    ;Vol ID of 0
  1614                              <1>         at .filSysType, db "FAT12   ",0
  1615                              <1>     iend
  1616                              <1>         %assign i i+1
  1617                              <1>     %endrep
  1560                              <2>  istruc drvBlk
  1561 000021B6 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 000021BE 00                  <2>  at .bBIOSNum, db i
  1563 000021BF 00                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 000021C0 0002                <2>  at .wBpS, dw 200h
  1566 000021C2 01                  <2>  at .bSpC, db 01h
  1567 000021C3 0100                <2>  at .wResC, dw 0001h
  1568 000021C5 02                  <2>  at .bNumFAT, db 02h
  1569 000021C6 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 000021C8 400B                <2>  at .wTotSec16, dw 0B40h
  1571 000021CA F0                  <2>  at .bMedDesc, db 0F0h
  1572 000021CB 0900                <2>  at .wFATsz16, dw 0009h
  1573 000021CD 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 000021CF 0200                <2>  at .wNumHeads, dw 0002h
  1575 000021D1 00000000            <2>  at .dHiddSec, dd 0
  1576 000021D5 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 000021D9 00000000            <2>  at .FATsz32, dd 0
  1579 000021DD 0000                <2>  at .extFlags, dw 0
  1580 000021DF 0000                <2>  at .FSver, dw 0
  1581 000021E1 00000000            <2>  at .RootClus, dd 0
  1582 000021E5 0000                <2>  at .FSinfo, dw 0
  1583 000021E7 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 000021E9 10                  <2>  at .bBpbType, db bpbFat12
  1586 000021EA 0000                <2>  at .wOpenCnt, dw 0
  1587 000021EC 00                  <2>  at .bDevType, db 0
  1588 000021ED 0000                <2>  at .wDevFlgs, dw 0
  1589 000021EF 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 000021F1 0002                <2>  at .bytsPerSec, dw 200h
  1592 000021F3 01                  <2>  at .secPerClus, db 01h
  1593 000021F4 0100                <2>  at .revdSecCnt, dw 0001h
  1594 000021F6 02                  <2>  at .numFATs, db 02h
  1595 000021F7 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 000021F9 400B                <2>  at .totSec16, dw 0B40h
  1597 000021FB F0                  <2>  at .media, db 0F0h
  1598 000021FC 0900                <2>  at .FATsz16, dw 0009h
  1599 000021FE 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002200 0200                <2>  at .numHeads, dw 0002h
  1601 00002202 00000000            <2>  at .hiddSec, dd 0
  1602 00002206 00000000            <2>  at .totSec32, dd 0
  1603 0000220A 00000000            <2>  at .FATsz32, dd 0
  1604 0000220E 0000                <2>  at .extFlags, dw 0
  1605 00002210 0000                <2>  at .FSver, dw 0
  1606 00002212 00000000            <2>  at .RootClus, dd 0
  1607 00002216 0000                <2>  at .FSinfo, dw 0
  1608 00002218 0000                <2>  at .BkBootSec, dw 0
  1609 0000221A 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002223 000000              <2>
  1610                              <2>  iend
  1611 00002226 00000000            <2>  at .dAccTime, dd 0
  1612 0000222A 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002233 202000              <2>
  1613 00002236 00000000            <2>  at .volId, dd 0
  1614 0000223A 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002243 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 0000224B 01                  <2>  at .bBIOSNum, db i
  1563 0000224C 01                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 0000224D 0002                <2>  at .wBpS, dw 200h
  1566 0000224F 01                  <2>  at .bSpC, db 01h
  1567 00002250 0100                <2>  at .wResC, dw 0001h
  1568 00002252 02                  <2>  at .bNumFAT, db 02h
  1569 00002253 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002255 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002257 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002258 0900                <2>  at .wFATsz16, dw 0009h
  1573 0000225A 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 0000225C 0200                <2>  at .wNumHeads, dw 0002h
  1575 0000225E 00000000            <2>  at .dHiddSec, dd 0
  1576 00002262 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002266 00000000            <2>  at .FATsz32, dd 0
  1579 0000226A 0000                <2>  at .extFlags, dw 0
  1580 0000226C 0000                <2>  at .FSver, dw 0
  1581 0000226E 00000000            <2>  at .RootClus, dd 0
  1582 00002272 0000                <2>  at .FSinfo, dw 0
  1583 00002274 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002276 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002277 0000                <2>  at .wOpenCnt, dw 0
  1587 00002279 00                  <2>  at .bDevType, db 0
  1588 0000227A 0000                <2>  at .wDevFlgs, dw 0
  1589 0000227C 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 0000227E 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002280 01                  <2>  at .secPerClus, db 01h
  1593 00002281 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002283 02                  <2>  at .numFATs, db 02h
  1595 00002284 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002286 400B                <2>  at .totSec16, dw 0B40h
  1597 00002288 F0                  <2>  at .media, db 0F0h
  1598 00002289 0900                <2>  at .FATsz16, dw 0009h
  1599 0000228B 1200                <2>  at .secPerTrk, dw 0012h
  1600 0000228D 0200                <2>  at .numHeads, dw 0002h
  1601 0000228F 00000000            <2>  at .hiddSec, dd 0
  1602 00002293 00000000            <2>  at .totSec32, dd 0
  1603 00002297 00000000            <2>  at .FATsz32, dd 0
  1604 0000229B 0000                <2>  at .extFlags, dw 0
  1605 0000229D 0000                <2>  at .FSver, dw 0
  1606 0000229F 00000000            <2>  at .RootClus, dd 0
  1607 000022A3 0000                <2>  at .FSinfo, dw 0
  1608 000022A5 0000                <2>  at .BkBootSec, dw 0
  1609 000022A7 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 000022B0 000000              <2>
  1610                              <2>  iend
  1611 000022B3 00000000            <2>  at .dAccTime, dd 0
  1612 000022B7 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 000022C0 202000              <2>
  1613 000022C3 00000000            <2>  at .volId, dd 0
  1614 000022C7 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 000022D0 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 000022D8 02                  <2>  at .bBIOSNum, db i
  1563 000022D9 02                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 000022DA 0002                <2>  at .wBpS, dw 200h
  1566 000022DC 01                  <2>  at .bSpC, db 01h
  1567 000022DD 0100                <2>  at .wResC, dw 0001h
  1568 000022DF 02                  <2>  at .bNumFAT, db 02h
  1569 000022E0 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 000022E2 400B                <2>  at .wTotSec16, dw 0B40h
  1571 000022E4 F0                  <2>  at .bMedDesc, db 0F0h
  1572 000022E5 0900                <2>  at .wFATsz16, dw 0009h
  1573 000022E7 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 000022E9 0200                <2>  at .wNumHeads, dw 0002h
  1575 000022EB 00000000            <2>  at .dHiddSec, dd 0
  1576 000022EF 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 000022F3 00000000            <2>  at .FATsz32, dd 0
  1579 000022F7 0000                <2>  at .extFlags, dw 0
  1580 000022F9 0000                <2>  at .FSver, dw 0
  1581 000022FB 00000000            <2>  at .RootClus, dd 0
  1582 000022FF 0000                <2>  at .FSinfo, dw 0
  1583 00002301 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002303 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002304 0000                <2>  at .wOpenCnt, dw 0
  1587 00002306 00                  <2>  at .bDevType, db 0
  1588 00002307 0000                <2>  at .wDevFlgs, dw 0
  1589 00002309 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 0000230B 0002                <2>  at .bytsPerSec, dw 200h
  1592 0000230D 01                  <2>  at .secPerClus, db 01h
  1593 0000230E 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002310 02                  <2>  at .numFATs, db 02h
  1595 00002311 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002313 400B                <2>  at .totSec16, dw 0B40h
  1597 00002315 F0                  <2>  at .media, db 0F0h
  1598 00002316 0900                <2>  at .FATsz16, dw 0009h
  1599 00002318 1200                <2>  at .secPerTrk, dw 0012h
  1600 0000231A 0200                <2>  at .numHeads, dw 0002h
  1601 0000231C 00000000            <2>  at .hiddSec, dd 0
  1602 00002320 00000000            <2>  at .totSec32, dd 0
  1603 00002324 00000000            <2>  at .FATsz32, dd 0
  1604 00002328 0000                <2>  at .extFlags, dw 0
  1605 0000232A 0000                <2>  at .FSver, dw 0
  1606 0000232C 00000000            <2>  at .RootClus, dd 0
  1607 00002330 0000                <2>  at .FSinfo, dw 0
  1608 00002332 0000                <2>  at .BkBootSec, dw 0
  1609 00002334 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 0000233D 000000              <2>
  1610                              <2>  iend
  1611 00002340 00000000            <2>  at .dAccTime, dd 0
  1612 00002344 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 0000234D 202000              <2>
  1613 00002350 00000000            <2>  at .volId, dd 0
  1614 00002354 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 0000235D FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002365 03                  <2>  at .bBIOSNum, db i
  1563 00002366 03                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002367 0002                <2>  at .wBpS, dw 200h
  1566 00002369 01                  <2>  at .bSpC, db 01h
  1567 0000236A 0100                <2>  at .wResC, dw 0001h
  1568 0000236C 02                  <2>  at .bNumFAT, db 02h
  1569 0000236D E000                <2>  at .wRtCntNum, dw 00E0h
  1570 0000236F 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002371 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002372 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002374 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002376 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002378 00000000            <2>  at .dHiddSec, dd 0
  1576 0000237C 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002380 00000000            <2>  at .FATsz32, dd 0
  1579 00002384 0000                <2>  at .extFlags, dw 0
  1580 00002386 0000                <2>  at .FSver, dw 0
  1581 00002388 00000000            <2>  at .RootClus, dd 0
  1582 0000238C 0000                <2>  at .FSinfo, dw 0
  1583 0000238E 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002390 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002391 0000                <2>  at .wOpenCnt, dw 0
  1587 00002393 00                  <2>  at .bDevType, db 0
  1588 00002394 0000                <2>  at .wDevFlgs, dw 0
  1589 00002396 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002398 0002                <2>  at .bytsPerSec, dw 200h
  1592 0000239A 01                  <2>  at .secPerClus, db 01h
  1593 0000239B 0100                <2>  at .revdSecCnt, dw 0001h
  1594 0000239D 02                  <2>  at .numFATs, db 02h
  1595 0000239E E000                <2>  at .rootEntCnt, dw 00E0h
  1596 000023A0 400B                <2>  at .totSec16, dw 0B40h
  1597 000023A2 F0                  <2>  at .media, db 0F0h
  1598 000023A3 0900                <2>  at .FATsz16, dw 0009h
  1599 000023A5 1200                <2>  at .secPerTrk, dw 0012h
  1600 000023A7 0200                <2>  at .numHeads, dw 0002h
  1601 000023A9 00000000            <2>  at .hiddSec, dd 0
  1602 000023AD 00000000            <2>  at .totSec32, dd 0
  1603 000023B1 00000000            <2>  at .FATsz32, dd 0
  1604 000023B5 0000                <2>  at .extFlags, dw 0
  1605 000023B7 0000                <2>  at .FSver, dw 0
  1606 000023B9 00000000            <2>  at .RootClus, dd 0
  1607 000023BD 0000                <2>  at .FSinfo, dw 0
  1608 000023BF 0000                <2>  at .BkBootSec, dw 0
  1609 000023C1 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 000023CA 000000              <2>
  1610                              <2>  iend
  1611 000023CD 00000000            <2>  at .dAccTime, dd 0
  1612 000023D1 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 000023DA 202000              <2>
  1613 000023DD 00000000            <2>  at .volId, dd 0
  1614 000023E1 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 000023EA FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 000023F2 04                  <2>  at .bBIOSNum, db i
  1563 000023F3 04                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 000023F4 0002                <2>  at .wBpS, dw 200h
  1566 000023F6 01                  <2>  at .bSpC, db 01h
  1567 000023F7 0100                <2>  at .wResC, dw 0001h
  1568 000023F9 02                  <2>  at .bNumFAT, db 02h
  1569 000023FA E000                <2>  at .wRtCntNum, dw 00E0h
  1570 000023FC 400B                <2>  at .wTotSec16, dw 0B40h
  1571 000023FE F0                  <2>  at .bMedDesc, db 0F0h
  1572 000023FF 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002401 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002403 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002405 00000000            <2>  at .dHiddSec, dd 0
  1576 00002409 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 0000240D 00000000            <2>  at .FATsz32, dd 0
  1579 00002411 0000                <2>  at .extFlags, dw 0
  1580 00002413 0000                <2>  at .FSver, dw 0
  1581 00002415 00000000            <2>  at .RootClus, dd 0
  1582 00002419 0000                <2>  at .FSinfo, dw 0
  1583 0000241B 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 0000241D 10                  <2>  at .bBpbType, db bpbFat12
  1586 0000241E 0000                <2>  at .wOpenCnt, dw 0
  1587 00002420 00                  <2>  at .bDevType, db 0
  1588 00002421 0000                <2>  at .wDevFlgs, dw 0
  1589 00002423 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002425 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002427 01                  <2>  at .secPerClus, db 01h
  1593 00002428 0100                <2>  at .revdSecCnt, dw 0001h
  1594 0000242A 02                  <2>  at .numFATs, db 02h
  1595 0000242B E000                <2>  at .rootEntCnt, dw 00E0h
  1596 0000242D 400B                <2>  at .totSec16, dw 0B40h
  1597 0000242F F0                  <2>  at .media, db 0F0h
  1598 00002430 0900                <2>  at .FATsz16, dw 0009h
  1599 00002432 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002434 0200                <2>  at .numHeads, dw 0002h
  1601 00002436 00000000            <2>  at .hiddSec, dd 0
  1602 0000243A 00000000            <2>  at .totSec32, dd 0
  1603 0000243E 00000000            <2>  at .FATsz32, dd 0
  1604 00002442 0000                <2>  at .extFlags, dw 0
  1605 00002444 0000                <2>  at .FSver, dw 0
  1606 00002446 00000000            <2>  at .RootClus, dd 0
  1607 0000244A 0000                <2>  at .FSinfo, dw 0
  1608 0000244C 0000                <2>  at .BkBootSec, dw 0
  1609 0000244E 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002457 000000              <2>
  1610                              <2>  iend
  1611 0000245A 00000000            <2>  at .dAccTime, dd 0
  1612 0000245E 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002467 202000              <2>
  1613 0000246A 00000000            <2>  at .volId, dd 0
  1614 0000246E 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002477 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 0000247F 05                  <2>  at .bBIOSNum, db i
  1563 00002480 05                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002481 0002                <2>  at .wBpS, dw 200h
  1566 00002483 01                  <2>  at .bSpC, db 01h
  1567 00002484 0100                <2>  at .wResC, dw 0001h
  1568 00002486 02                  <2>  at .bNumFAT, db 02h
  1569 00002487 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002489 400B                <2>  at .wTotSec16, dw 0B40h
  1571 0000248B F0                  <2>  at .bMedDesc, db 0F0h
  1572 0000248C 0900                <2>  at .wFATsz16, dw 0009h
  1573 0000248E 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002490 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002492 00000000            <2>  at .dHiddSec, dd 0
  1576 00002496 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 0000249A 00000000            <2>  at .FATsz32, dd 0
  1579 0000249E 0000                <2>  at .extFlags, dw 0
  1580 000024A0 0000                <2>  at .FSver, dw 0
  1581 000024A2 00000000            <2>  at .RootClus, dd 0
  1582 000024A6 0000                <2>  at .FSinfo, dw 0
  1583 000024A8 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 000024AA 10                  <2>  at .bBpbType, db bpbFat12
  1586 000024AB 0000                <2>  at .wOpenCnt, dw 0
  1587 000024AD 00                  <2>  at .bDevType, db 0
  1588 000024AE 0000                <2>  at .wDevFlgs, dw 0
  1589 000024B0 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 000024B2 0002                <2>  at .bytsPerSec, dw 200h
  1592 000024B4 01                  <2>  at .secPerClus, db 01h
  1593 000024B5 0100                <2>  at .revdSecCnt, dw 0001h
  1594 000024B7 02                  <2>  at .numFATs, db 02h
  1595 000024B8 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 000024BA 400B                <2>  at .totSec16, dw 0B40h
  1597 000024BC F0                  <2>  at .media, db 0F0h
  1598 000024BD 0900                <2>  at .FATsz16, dw 0009h
  1599 000024BF 1200                <2>  at .secPerTrk, dw 0012h
  1600 000024C1 0200                <2>  at .numHeads, dw 0002h
  1601 000024C3 00000000            <2>  at .hiddSec, dd 0
  1602 000024C7 00000000            <2>  at .totSec32, dd 0
  1603 000024CB 00000000            <2>  at .FATsz32, dd 0
  1604 000024CF 0000                <2>  at .extFlags, dw 0
  1605 000024D1 0000                <2>  at .FSver, dw 0
  1606 000024D3 00000000            <2>  at .RootClus, dd 0
  1607 000024D7 0000                <2>  at .FSinfo, dw 0
  1608 000024D9 0000                <2>  at .BkBootSec, dw 0
  1609 000024DB 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 000024E4 000000              <2>
  1610                              <2>  iend
  1611 000024E7 00000000            <2>  at .dAccTime, dd 0
  1612 000024EB 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 000024F4 202000              <2>
  1613 000024F7 00000000            <2>  at .volId, dd 0
  1614 000024FB 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002504 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 0000250C 06                  <2>  at .bBIOSNum, db i
  1563 0000250D 06                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 0000250E 0002                <2>  at .wBpS, dw 200h
  1566 00002510 01                  <2>  at .bSpC, db 01h
  1567 00002511 0100                <2>  at .wResC, dw 0001h
  1568 00002513 02                  <2>  at .bNumFAT, db 02h
  1569 00002514 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002516 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002518 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002519 0900                <2>  at .wFATsz16, dw 0009h
  1573 0000251B 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 0000251D 0200                <2>  at .wNumHeads, dw 0002h
  1575 0000251F 00000000            <2>  at .dHiddSec, dd 0
  1576 00002523 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002527 00000000            <2>  at .FATsz32, dd 0
  1579 0000252B 0000                <2>  at .extFlags, dw 0
  1580 0000252D 0000                <2>  at .FSver, dw 0
  1581 0000252F 00000000            <2>  at .RootClus, dd 0
  1582 00002533 0000                <2>  at .FSinfo, dw 0
  1583 00002535 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002537 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002538 0000                <2>  at .wOpenCnt, dw 0
  1587 0000253A 00                  <2>  at .bDevType, db 0
  1588 0000253B 0000                <2>  at .wDevFlgs, dw 0
  1589 0000253D 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 0000253F 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002541 01                  <2>  at .secPerClus, db 01h
  1593 00002542 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002544 02                  <2>  at .numFATs, db 02h
  1595 00002545 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002547 400B                <2>  at .totSec16, dw 0B40h
  1597 00002549 F0                  <2>  at .media, db 0F0h
  1598 0000254A 0900                <2>  at .FATsz16, dw 0009h
  1599 0000254C 1200                <2>  at .secPerTrk, dw 0012h
  1600 0000254E 0200                <2>  at .numHeads, dw 0002h
  1601 00002550 00000000            <2>  at .hiddSec, dd 0
  1602 00002554 00000000            <2>  at .totSec32, dd 0
  1603 00002558 00000000            <2>  at .FATsz32, dd 0
  1604 0000255C 0000                <2>  at .extFlags, dw 0
  1605 0000255E 0000                <2>  at .FSver, dw 0
  1606 00002560 00000000            <2>  at .RootClus, dd 0
  1607 00002564 0000                <2>  at .FSinfo, dw 0
  1608 00002566 0000                <2>  at .BkBootSec, dw 0
  1609 00002568 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002571 000000              <2>
  1610                              <2>  iend
  1611 00002574 00000000            <2>  at .dAccTime, dd 0
  1612 00002578 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002581 202000              <2>
  1613 00002584 00000000            <2>  at .volId, dd 0
  1614 00002588 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002591 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002599 07                  <2>  at .bBIOSNum, db i
  1563 0000259A 07                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 0000259B 0002                <2>  at .wBpS, dw 200h
  1566 0000259D 01                  <2>  at .bSpC, db 01h
  1567 0000259E 0100                <2>  at .wResC, dw 0001h
  1568 000025A0 02                  <2>  at .bNumFAT, db 02h
  1569 000025A1 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 000025A3 400B                <2>  at .wTotSec16, dw 0B40h
  1571 000025A5 F0                  <2>  at .bMedDesc, db 0F0h
  1572 000025A6 0900                <2>  at .wFATsz16, dw 0009h
  1573 000025A8 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 000025AA 0200                <2>  at .wNumHeads, dw 0002h
  1575 000025AC 00000000            <2>  at .dHiddSec, dd 0
  1576 000025B0 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 000025B4 00000000            <2>  at .FATsz32, dd 0
  1579 000025B8 0000                <2>  at .extFlags, dw 0
  1580 000025BA 0000                <2>  at .FSver, dw 0
  1581 000025BC 00000000            <2>  at .RootClus, dd 0
  1582 000025C0 0000                <2>  at .FSinfo, dw 0
  1583 000025C2 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 000025C4 10                  <2>  at .bBpbType, db bpbFat12
  1586 000025C5 0000                <2>  at .wOpenCnt, dw 0
  1587 000025C7 00                  <2>  at .bDevType, db 0
  1588 000025C8 0000                <2>  at .wDevFlgs, dw 0
  1589 000025CA 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 000025CC 0002                <2>  at .bytsPerSec, dw 200h
  1592 000025CE 01                  <2>  at .secPerClus, db 01h
  1593 000025CF 0100                <2>  at .revdSecCnt, dw 0001h
  1594 000025D1 02                  <2>  at .numFATs, db 02h
  1595 000025D2 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 000025D4 400B                <2>  at .totSec16, dw 0B40h
  1597 000025D6 F0                  <2>  at .media, db 0F0h
  1598 000025D7 0900                <2>  at .FATsz16, dw 0009h
  1599 000025D9 1200                <2>  at .secPerTrk, dw 0012h
  1600 000025DB 0200                <2>  at .numHeads, dw 0002h
  1601 000025DD 00000000            <2>  at .hiddSec, dd 0
  1602 000025E1 00000000            <2>  at .totSec32, dd 0
  1603 000025E5 00000000            <2>  at .FATsz32, dd 0
  1604 000025E9 0000                <2>  at .extFlags, dw 0
  1605 000025EB 0000                <2>  at .FSver, dw 0
  1606 000025ED 00000000            <2>  at .RootClus, dd 0
  1607 000025F1 0000                <2>  at .FSinfo, dw 0
  1608 000025F3 0000                <2>  at .BkBootSec, dw 0
  1609 000025F5 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 000025FE 000000              <2>
  1610                              <2>  iend
  1611 00002601 00000000            <2>  at .dAccTime, dd 0
  1612 00002605 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 0000260E 202000              <2>
  1613 00002611 00000000            <2>  at .volId, dd 0
  1614 00002615 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 0000261E FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002626 08                  <2>  at .bBIOSNum, db i
  1563 00002627 08                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002628 0002                <2>  at .wBpS, dw 200h
  1566 0000262A 01                  <2>  at .bSpC, db 01h
  1567 0000262B 0100                <2>  at .wResC, dw 0001h
  1568 0000262D 02                  <2>  at .bNumFAT, db 02h
  1569 0000262E E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002630 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002632 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002633 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002635 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002637 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002639 00000000            <2>  at .dHiddSec, dd 0
  1576 0000263D 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002641 00000000            <2>  at .FATsz32, dd 0
  1579 00002645 0000                <2>  at .extFlags, dw 0
  1580 00002647 0000                <2>  at .FSver, dw 0
  1581 00002649 00000000            <2>  at .RootClus, dd 0
  1582 0000264D 0000                <2>  at .FSinfo, dw 0
  1583 0000264F 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002651 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002652 0000                <2>  at .wOpenCnt, dw 0
  1587 00002654 00                  <2>  at .bDevType, db 0
  1588 00002655 0000                <2>  at .wDevFlgs, dw 0
  1589 00002657 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002659 0002                <2>  at .bytsPerSec, dw 200h
  1592 0000265B 01                  <2>  at .secPerClus, db 01h
  1593 0000265C 0100                <2>  at .revdSecCnt, dw 0001h
  1594 0000265E 02                  <2>  at .numFATs, db 02h
  1595 0000265F E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002661 400B                <2>  at .totSec16, dw 0B40h
  1597 00002663 F0                  <2>  at .media, db 0F0h
  1598 00002664 0900                <2>  at .FATsz16, dw 0009h
  1599 00002666 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002668 0200                <2>  at .numHeads, dw 0002h
  1601 0000266A 00000000            <2>  at .hiddSec, dd 0
  1602 0000266E 00000000            <2>  at .totSec32, dd 0
  1603 00002672 00000000            <2>  at .FATsz32, dd 0
  1604 00002676 0000                <2>  at .extFlags, dw 0
  1605 00002678 0000                <2>  at .FSver, dw 0
  1606 0000267A 00000000            <2>  at .RootClus, dd 0
  1607 0000267E 0000                <2>  at .FSinfo, dw 0
  1608 00002680 0000                <2>  at .BkBootSec, dw 0
  1609 00002682 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 0000268B 000000              <2>
  1610                              <2>  iend
  1611 0000268E 00000000            <2>  at .dAccTime, dd 0
  1612 00002692 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 0000269B 202000              <2>
  1613 0000269E 00000000            <2>  at .volId, dd 0
  1614 000026A2 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 000026AB FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 000026B3 09                  <2>  at .bBIOSNum, db i
  1563 000026B4 09                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 000026B5 0002                <2>  at .wBpS, dw 200h
  1566 000026B7 01                  <2>  at .bSpC, db 01h
  1567 000026B8 0100                <2>  at .wResC, dw 0001h
  1568 000026BA 02                  <2>  at .bNumFAT, db 02h
  1569 000026BB E000                <2>  at .wRtCntNum, dw 00E0h
  1570 000026BD 400B                <2>  at .wTotSec16, dw 0B40h
  1571 000026BF F0                  <2>  at .bMedDesc, db 0F0h
  1572 000026C0 0900                <2>  at .wFATsz16, dw 0009h
  1573 000026C2 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 000026C4 0200                <2>  at .wNumHeads, dw 0002h
  1575 000026C6 00000000            <2>  at .dHiddSec, dd 0
  1576 000026CA 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 000026CE 00000000            <2>  at .FATsz32, dd 0
  1579 000026D2 0000                <2>  at .extFlags, dw 0
  1580 000026D4 0000                <2>  at .FSver, dw 0
  1581 000026D6 00000000            <2>  at .RootClus, dd 0
  1582 000026DA 0000                <2>  at .FSinfo, dw 0
  1583 000026DC 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 000026DE 10                  <2>  at .bBpbType, db bpbFat12
  1586 000026DF 0000                <2>  at .wOpenCnt, dw 0
  1587 000026E1 00                  <2>  at .bDevType, db 0
  1588 000026E2 0000                <2>  at .wDevFlgs, dw 0
  1589 000026E4 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 000026E6 0002                <2>  at .bytsPerSec, dw 200h
  1592 000026E8 01                  <2>  at .secPerClus, db 01h
  1593 000026E9 0100                <2>  at .revdSecCnt, dw 0001h
  1594 000026EB 02                  <2>  at .numFATs, db 02h
  1595 000026EC E000                <2>  at .rootEntCnt, dw 00E0h
  1596 000026EE 400B                <2>  at .totSec16, dw 0B40h
  1597 000026F0 F0                  <2>  at .media, db 0F0h
  1598 000026F1 0900                <2>  at .FATsz16, dw 0009h
  1599 000026F3 1200                <2>  at .secPerTrk, dw 0012h
  1600 000026F5 0200                <2>  at .numHeads, dw 0002h
  1601 000026F7 00000000            <2>  at .hiddSec, dd 0
  1602 000026FB 00000000            <2>  at .totSec32, dd 0
  1603 000026FF 00000000            <2>  at .FATsz32, dd 0
  1604 00002703 0000                <2>  at .extFlags, dw 0
  1605 00002705 0000                <2>  at .FSver, dw 0
  1606 00002707 00000000            <2>  at .RootClus, dd 0
  1607 0000270B 0000                <2>  at .FSinfo, dw 0
  1608 0000270D 0000                <2>  at .BkBootSec, dw 0
  1609 0000270F 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002718 000000              <2>
  1610                              <2>  iend
  1611 0000271B 00000000            <2>  at .dAccTime, dd 0
  1612 0000271F 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002728 202000              <2>
  1613 0000272B 00000000            <2>  at .volId, dd 0
  1614 0000272F 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002738 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002740 0A                  <2>  at .bBIOSNum, db i
  1563 00002741 0A                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002742 0002                <2>  at .wBpS, dw 200h
  1566 00002744 01                  <2>  at .bSpC, db 01h
  1567 00002745 0100                <2>  at .wResC, dw 0001h
  1568 00002747 02                  <2>  at .bNumFAT, db 02h
  1569 00002748 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 0000274A 400B                <2>  at .wTotSec16, dw 0B40h
  1571 0000274C F0                  <2>  at .bMedDesc, db 0F0h
  1572 0000274D 0900                <2>  at .wFATsz16, dw 0009h
  1573 0000274F 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002751 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002753 00000000            <2>  at .dHiddSec, dd 0
  1576 00002757 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 0000275B 00000000            <2>  at .FATsz32, dd 0
  1579 0000275F 0000                <2>  at .extFlags, dw 0
  1580 00002761 0000                <2>  at .FSver, dw 0
  1581 00002763 00000000            <2>  at .RootClus, dd 0
  1582 00002767 0000                <2>  at .FSinfo, dw 0
  1583 00002769 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 0000276B 10                  <2>  at .bBpbType, db bpbFat12
  1586 0000276C 0000                <2>  at .wOpenCnt, dw 0
  1587 0000276E 00                  <2>  at .bDevType, db 0
  1588 0000276F 0000                <2>  at .wDevFlgs, dw 0
  1589 00002771 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002773 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002775 01                  <2>  at .secPerClus, db 01h
  1593 00002776 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002778 02                  <2>  at .numFATs, db 02h
  1595 00002779 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 0000277B 400B                <2>  at .totSec16, dw 0B40h
  1597 0000277D F0                  <2>  at .media, db 0F0h
  1598 0000277E 0900                <2>  at .FATsz16, dw 0009h
  1599 00002780 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002782 0200                <2>  at .numHeads, dw 0002h
  1601 00002784 00000000            <2>  at .hiddSec, dd 0
  1602 00002788 00000000            <2>  at .totSec32, dd 0
  1603 0000278C 00000000            <2>  at .FATsz32, dd 0
  1604 00002790 0000                <2>  at .extFlags, dw 0
  1605 00002792 0000                <2>  at .FSver, dw 0
  1606 00002794 00000000            <2>  at .RootClus, dd 0
  1607 00002798 0000                <2>  at .FSinfo, dw 0
  1608 0000279A 0000                <2>  at .BkBootSec, dw 0
  1609 0000279C 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 000027A5 000000              <2>
  1610                              <2>  iend
  1611 000027A8 00000000            <2>  at .dAccTime, dd 0
  1612 000027AC 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 000027B5 202000              <2>
  1613 000027B8 00000000            <2>  at .volId, dd 0
  1614 000027BC 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 000027C5 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 000027CD 0B                  <2>  at .bBIOSNum, db i
  1563 000027CE 0B                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 000027CF 0002                <2>  at .wBpS, dw 200h
  1566 000027D1 01                  <2>  at .bSpC, db 01h
  1567 000027D2 0100                <2>  at .wResC, dw 0001h
  1568 000027D4 02                  <2>  at .bNumFAT, db 02h
  1569 000027D5 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 000027D7 400B                <2>  at .wTotSec16, dw 0B40h
  1571 000027D9 F0                  <2>  at .bMedDesc, db 0F0h
  1572 000027DA 0900                <2>  at .wFATsz16, dw 0009h
  1573 000027DC 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 000027DE 0200                <2>  at .wNumHeads, dw 0002h
  1575 000027E0 00000000            <2>  at .dHiddSec, dd 0
  1576 000027E4 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 000027E8 00000000            <2>  at .FATsz32, dd 0
  1579 000027EC 0000                <2>  at .extFlags, dw 0
  1580 000027EE 0000                <2>  at .FSver, dw 0
  1581 000027F0 00000000            <2>  at .RootClus, dd 0
  1582 000027F4 0000                <2>  at .FSinfo, dw 0
  1583 000027F6 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 000027F8 10                  <2>  at .bBpbType, db bpbFat12
  1586 000027F9 0000                <2>  at .wOpenCnt, dw 0
  1587 000027FB 00                  <2>  at .bDevType, db 0
  1588 000027FC 0000                <2>  at .wDevFlgs, dw 0
  1589 000027FE 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002800 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002802 01                  <2>  at .secPerClus, db 01h
  1593 00002803 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002805 02                  <2>  at .numFATs, db 02h
  1595 00002806 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002808 400B                <2>  at .totSec16, dw 0B40h
  1597 0000280A F0                  <2>  at .media, db 0F0h
  1598 0000280B 0900                <2>  at .FATsz16, dw 0009h
  1599 0000280D 1200                <2>  at .secPerTrk, dw 0012h
  1600 0000280F 0200                <2>  at .numHeads, dw 0002h
  1601 00002811 00000000            <2>  at .hiddSec, dd 0
  1602 00002815 00000000            <2>  at .totSec32, dd 0
  1603 00002819 00000000            <2>  at .FATsz32, dd 0
  1604 0000281D 0000                <2>  at .extFlags, dw 0
  1605 0000281F 0000                <2>  at .FSver, dw 0
  1606 00002821 00000000            <2>  at .RootClus, dd 0
  1607 00002825 0000                <2>  at .FSinfo, dw 0
  1608 00002827 0000                <2>  at .BkBootSec, dw 0
  1609 00002829 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002832 000000              <2>
  1610                              <2>  iend
  1611 00002835 00000000            <2>  at .dAccTime, dd 0
  1612 00002839 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002842 202000              <2>
  1613 00002845 00000000            <2>  at .volId, dd 0
  1614 00002849 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002852 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 0000285A 0C                  <2>  at .bBIOSNum, db i
  1563 0000285B 0C                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 0000285C 0002                <2>  at .wBpS, dw 200h
  1566 0000285E 01                  <2>  at .bSpC, db 01h
  1567 0000285F 0100                <2>  at .wResC, dw 0001h
  1568 00002861 02                  <2>  at .bNumFAT, db 02h
  1569 00002862 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002864 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002866 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002867 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002869 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 0000286B 0200                <2>  at .wNumHeads, dw 0002h
  1575 0000286D 00000000            <2>  at .dHiddSec, dd 0
  1576 00002871 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002875 00000000            <2>  at .FATsz32, dd 0
  1579 00002879 0000                <2>  at .extFlags, dw 0
  1580 0000287B 0000                <2>  at .FSver, dw 0
  1581 0000287D 00000000            <2>  at .RootClus, dd 0
  1582 00002881 0000                <2>  at .FSinfo, dw 0
  1583 00002883 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002885 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002886 0000                <2>  at .wOpenCnt, dw 0
  1587 00002888 00                  <2>  at .bDevType, db 0
  1588 00002889 0000                <2>  at .wDevFlgs, dw 0
  1589 0000288B 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 0000288D 0002                <2>  at .bytsPerSec, dw 200h
  1592 0000288F 01                  <2>  at .secPerClus, db 01h
  1593 00002890 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002892 02                  <2>  at .numFATs, db 02h
  1595 00002893 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002895 400B                <2>  at .totSec16, dw 0B40h
  1597 00002897 F0                  <2>  at .media, db 0F0h
  1598 00002898 0900                <2>  at .FATsz16, dw 0009h
  1599 0000289A 1200                <2>  at .secPerTrk, dw 0012h
  1600 0000289C 0200                <2>  at .numHeads, dw 0002h
  1601 0000289E 00000000            <2>  at .hiddSec, dd 0
  1602 000028A2 00000000            <2>  at .totSec32, dd 0
  1603 000028A6 00000000            <2>  at .FATsz32, dd 0
  1604 000028AA 0000                <2>  at .extFlags, dw 0
  1605 000028AC 0000                <2>  at .FSver, dw 0
  1606 000028AE 00000000            <2>  at .RootClus, dd 0
  1607 000028B2 0000                <2>  at .FSinfo, dw 0
  1608 000028B4 0000                <2>  at .BkBootSec, dw 0
  1609 000028B6 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 000028BF 000000              <2>
  1610                              <2>  iend
  1611 000028C2 00000000            <2>  at .dAccTime, dd 0
  1612 000028C6 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 000028CF 202000              <2>
  1613 000028D2 00000000            <2>  at .volId, dd 0
  1614 000028D6 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 000028DF FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 000028E7 0D                  <2>  at .bBIOSNum, db i
  1563 000028E8 0D                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 000028E9 0002                <2>  at .wBpS, dw 200h
  1566 000028EB 01                  <2>  at .bSpC, db 01h
  1567 000028EC 0100                <2>  at .wResC, dw 0001h
  1568 000028EE 02                  <2>  at .bNumFAT, db 02h
  1569 000028EF E000                <2>  at .wRtCntNum, dw 00E0h
  1570 000028F1 400B                <2>  at .wTotSec16, dw 0B40h
  1571 000028F3 F0                  <2>  at .bMedDesc, db 0F0h
  1572 000028F4 0900                <2>  at .wFATsz16, dw 0009h
  1573 000028F6 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 000028F8 0200                <2>  at .wNumHeads, dw 0002h
  1575 000028FA 00000000            <2>  at .dHiddSec, dd 0
  1576 000028FE 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002902 00000000            <2>  at .FATsz32, dd 0
  1579 00002906 0000                <2>  at .extFlags, dw 0
  1580 00002908 0000                <2>  at .FSver, dw 0
  1581 0000290A 00000000            <2>  at .RootClus, dd 0
  1582 0000290E 0000                <2>  at .FSinfo, dw 0
  1583 00002910 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002912 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002913 0000                <2>  at .wOpenCnt, dw 0
  1587 00002915 00                  <2>  at .bDevType, db 0
  1588 00002916 0000                <2>  at .wDevFlgs, dw 0
  1589 00002918 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 0000291A 0002                <2>  at .bytsPerSec, dw 200h
  1592 0000291C 01                  <2>  at .secPerClus, db 01h
  1593 0000291D 0100                <2>  at .revdSecCnt, dw 0001h
  1594 0000291F 02                  <2>  at .numFATs, db 02h
  1595 00002920 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002922 400B                <2>  at .totSec16, dw 0B40h
  1597 00002924 F0                  <2>  at .media, db 0F0h
  1598 00002925 0900                <2>  at .FATsz16, dw 0009h
  1599 00002927 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002929 0200                <2>  at .numHeads, dw 0002h
  1601 0000292B 00000000            <2>  at .hiddSec, dd 0
  1602 0000292F 00000000            <2>  at .totSec32, dd 0
  1603 00002933 00000000            <2>  at .FATsz32, dd 0
  1604 00002937 0000                <2>  at .extFlags, dw 0
  1605 00002939 0000                <2>  at .FSver, dw 0
  1606 0000293B 00000000            <2>  at .RootClus, dd 0
  1607 0000293F 0000                <2>  at .FSinfo, dw 0
  1608 00002941 0000                <2>  at .BkBootSec, dw 0
  1609 00002943 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 0000294C 000000              <2>
  1610                              <2>  iend
  1611 0000294F 00000000            <2>  at .dAccTime, dd 0
  1612 00002953 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 0000295C 202000              <2>
  1613 0000295F 00000000            <2>  at .volId, dd 0
  1614 00002963 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 0000296C FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002974 0E                  <2>  at .bBIOSNum, db i
  1563 00002975 0E                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002976 0002                <2>  at .wBpS, dw 200h
  1566 00002978 01                  <2>  at .bSpC, db 01h
  1567 00002979 0100                <2>  at .wResC, dw 0001h
  1568 0000297B 02                  <2>  at .bNumFAT, db 02h
  1569 0000297C E000                <2>  at .wRtCntNum, dw 00E0h
  1570 0000297E 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002980 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002981 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002983 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002985 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002987 00000000            <2>  at .dHiddSec, dd 0
  1576 0000298B 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 0000298F 00000000            <2>  at .FATsz32, dd 0
  1579 00002993 0000                <2>  at .extFlags, dw 0
  1580 00002995 0000                <2>  at .FSver, dw 0
  1581 00002997 00000000            <2>  at .RootClus, dd 0
  1582 0000299B 0000                <2>  at .FSinfo, dw 0
  1583 0000299D 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 0000299F 10                  <2>  at .bBpbType, db bpbFat12
  1586 000029A0 0000                <2>  at .wOpenCnt, dw 0
  1587 000029A2 00                  <2>  at .bDevType, db 0
  1588 000029A3 0000                <2>  at .wDevFlgs, dw 0
  1589 000029A5 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 000029A7 0002                <2>  at .bytsPerSec, dw 200h
  1592 000029A9 01                  <2>  at .secPerClus, db 01h
  1593 000029AA 0100                <2>  at .revdSecCnt, dw 0001h
  1594 000029AC 02                  <2>  at .numFATs, db 02h
  1595 000029AD E000                <2>  at .rootEntCnt, dw 00E0h
  1596 000029AF 400B                <2>  at .totSec16, dw 0B40h
  1597 000029B1 F0                  <2>  at .media, db 0F0h
  1598 000029B2 0900                <2>  at .FATsz16, dw 0009h
  1599 000029B4 1200                <2>  at .secPerTrk, dw 0012h
  1600 000029B6 0200                <2>  at .numHeads, dw 0002h
  1601 000029B8 00000000            <2>  at .hiddSec, dd 0
  1602 000029BC 00000000            <2>  at .totSec32, dd 0
  1603 000029C0 00000000            <2>  at .FATsz32, dd 0
  1604 000029C4 0000                <2>  at .extFlags, dw 0
  1605 000029C6 0000                <2>  at .FSver, dw 0
  1606 000029C8 00000000            <2>  at .RootClus, dd 0
  1607 000029CC 0000                <2>  at .FSinfo, dw 0
  1608 000029CE 0000                <2>  at .BkBootSec, dw 0
  1609 000029D0 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 000029D9 000000              <2>
  1610                              <2>  iend
  1611 000029DC 00000000            <2>  at .dAccTime, dd 0
  1612 000029E0 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 000029E9 202000              <2>
  1613 000029EC 00000000            <2>  at .volId, dd 0
  1614 000029F0 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 000029F9 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002A01 0F                  <2>  at .bBIOSNum, db i
  1563 00002A02 0F                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002A03 0002                <2>  at .wBpS, dw 200h
  1566 00002A05 01                  <2>  at .bSpC, db 01h
  1567 00002A06 0100                <2>  at .wResC, dw 0001h
  1568 00002A08 02                  <2>  at .bNumFAT, db 02h
  1569 00002A09 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002A0B 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002A0D F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002A0E 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002A10 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002A12 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002A14 00000000            <2>  at .dHiddSec, dd 0
  1576 00002A18 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002A1C 00000000            <2>  at .FATsz32, dd 0
  1579 00002A20 0000                <2>  at .extFlags, dw 0
  1580 00002A22 0000                <2>  at .FSver, dw 0
  1581 00002A24 00000000            <2>  at .RootClus, dd 0
  1582 00002A28 0000                <2>  at .FSinfo, dw 0
  1583 00002A2A 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002A2C 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002A2D 0000                <2>  at .wOpenCnt, dw 0
  1587 00002A2F 00                  <2>  at .bDevType, db 0
  1588 00002A30 0000                <2>  at .wDevFlgs, dw 0
  1589 00002A32 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002A34 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002A36 01                  <2>  at .secPerClus, db 01h
  1593 00002A37 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002A39 02                  <2>  at .numFATs, db 02h
  1595 00002A3A E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002A3C 400B                <2>  at .totSec16, dw 0B40h
  1597 00002A3E F0                  <2>  at .media, db 0F0h
  1598 00002A3F 0900                <2>  at .FATsz16, dw 0009h
  1599 00002A41 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002A43 0200                <2>  at .numHeads, dw 0002h
  1601 00002A45 00000000            <2>  at .hiddSec, dd 0
  1602 00002A49 00000000            <2>  at .totSec32, dd 0
  1603 00002A4D 00000000            <2>  at .FATsz32, dd 0
  1604 00002A51 0000                <2>  at .extFlags, dw 0
  1605 00002A53 0000                <2>  at .FSver, dw 0
  1606 00002A55 00000000            <2>  at .RootClus, dd 0
  1607 00002A59 0000                <2>  at .FSinfo, dw 0
  1608 00002A5B 0000                <2>  at .BkBootSec, dw 0
  1609 00002A5D 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002A66 000000              <2>
  1610                              <2>  iend
  1611 00002A69 00000000            <2>  at .dAccTime, dd 0
  1612 00002A6D 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002A76 202000              <2>
  1613 00002A79 00000000            <2>  at .volId, dd 0
  1614 00002A7D 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002A86 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002A8E 10                  <2>  at .bBIOSNum, db i
  1563 00002A8F 10                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002A90 0002                <2>  at .wBpS, dw 200h
  1566 00002A92 01                  <2>  at .bSpC, db 01h
  1567 00002A93 0100                <2>  at .wResC, dw 0001h
  1568 00002A95 02                  <2>  at .bNumFAT, db 02h
  1569 00002A96 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002A98 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002A9A F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002A9B 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002A9D 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002A9F 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002AA1 00000000            <2>  at .dHiddSec, dd 0
  1576 00002AA5 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002AA9 00000000            <2>  at .FATsz32, dd 0
  1579 00002AAD 0000                <2>  at .extFlags, dw 0
  1580 00002AAF 0000                <2>  at .FSver, dw 0
  1581 00002AB1 00000000            <2>  at .RootClus, dd 0
  1582 00002AB5 0000                <2>  at .FSinfo, dw 0
  1583 00002AB7 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002AB9 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002ABA 0000                <2>  at .wOpenCnt, dw 0
  1587 00002ABC 00                  <2>  at .bDevType, db 0
  1588 00002ABD 0000                <2>  at .wDevFlgs, dw 0
  1589 00002ABF 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002AC1 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002AC3 01                  <2>  at .secPerClus, db 01h
  1593 00002AC4 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002AC6 02                  <2>  at .numFATs, db 02h
  1595 00002AC7 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002AC9 400B                <2>  at .totSec16, dw 0B40h
  1597 00002ACB F0                  <2>  at .media, db 0F0h
  1598 00002ACC 0900                <2>  at .FATsz16, dw 0009h
  1599 00002ACE 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002AD0 0200                <2>  at .numHeads, dw 0002h
  1601 00002AD2 00000000            <2>  at .hiddSec, dd 0
  1602 00002AD6 00000000            <2>  at .totSec32, dd 0
  1603 00002ADA 00000000            <2>  at .FATsz32, dd 0
  1604 00002ADE 0000                <2>  at .extFlags, dw 0
  1605 00002AE0 0000                <2>  at .FSver, dw 0
  1606 00002AE2 00000000            <2>  at .RootClus, dd 0
  1607 00002AE6 0000                <2>  at .FSinfo, dw 0
  1608 00002AE8 0000                <2>  at .BkBootSec, dw 0
  1609 00002AEA 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002AF3 000000              <2>
  1610                              <2>  iend
  1611 00002AF6 00000000            <2>  at .dAccTime, dd 0
  1612 00002AFA 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002B03 202000              <2>
  1613 00002B06 00000000            <2>  at .volId, dd 0
  1614 00002B0A 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002B13 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002B1B 11                  <2>  at .bBIOSNum, db i
  1563 00002B1C 11                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002B1D 0002                <2>  at .wBpS, dw 200h
  1566 00002B1F 01                  <2>  at .bSpC, db 01h
  1567 00002B20 0100                <2>  at .wResC, dw 0001h
  1568 00002B22 02                  <2>  at .bNumFAT, db 02h
  1569 00002B23 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002B25 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002B27 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002B28 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002B2A 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002B2C 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002B2E 00000000            <2>  at .dHiddSec, dd 0
  1576 00002B32 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002B36 00000000            <2>  at .FATsz32, dd 0
  1579 00002B3A 0000                <2>  at .extFlags, dw 0
  1580 00002B3C 0000                <2>  at .FSver, dw 0
  1581 00002B3E 00000000            <2>  at .RootClus, dd 0
  1582 00002B42 0000                <2>  at .FSinfo, dw 0
  1583 00002B44 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002B46 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002B47 0000                <2>  at .wOpenCnt, dw 0
  1587 00002B49 00                  <2>  at .bDevType, db 0
  1588 00002B4A 0000                <2>  at .wDevFlgs, dw 0
  1589 00002B4C 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002B4E 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002B50 01                  <2>  at .secPerClus, db 01h
  1593 00002B51 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002B53 02                  <2>  at .numFATs, db 02h
  1595 00002B54 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002B56 400B                <2>  at .totSec16, dw 0B40h
  1597 00002B58 F0                  <2>  at .media, db 0F0h
  1598 00002B59 0900                <2>  at .FATsz16, dw 0009h
  1599 00002B5B 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002B5D 0200                <2>  at .numHeads, dw 0002h
  1601 00002B5F 00000000            <2>  at .hiddSec, dd 0
  1602 00002B63 00000000            <2>  at .totSec32, dd 0
  1603 00002B67 00000000            <2>  at .FATsz32, dd 0
  1604 00002B6B 0000                <2>  at .extFlags, dw 0
  1605 00002B6D 0000                <2>  at .FSver, dw 0
  1606 00002B6F 00000000            <2>  at .RootClus, dd 0
  1607 00002B73 0000                <2>  at .FSinfo, dw 0
  1608 00002B75 0000                <2>  at .BkBootSec, dw 0
  1609 00002B77 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002B80 000000              <2>
  1610                              <2>  iend
  1611 00002B83 00000000            <2>  at .dAccTime, dd 0
  1612 00002B87 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002B90 202000              <2>
  1613 00002B93 00000000            <2>  at .volId, dd 0
  1614 00002B97 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002BA0 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002BA8 12                  <2>  at .bBIOSNum, db i
  1563 00002BA9 12                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002BAA 0002                <2>  at .wBpS, dw 200h
  1566 00002BAC 01                  <2>  at .bSpC, db 01h
  1567 00002BAD 0100                <2>  at .wResC, dw 0001h
  1568 00002BAF 02                  <2>  at .bNumFAT, db 02h
  1569 00002BB0 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002BB2 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002BB4 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002BB5 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002BB7 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002BB9 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002BBB 00000000            <2>  at .dHiddSec, dd 0
  1576 00002BBF 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002BC3 00000000            <2>  at .FATsz32, dd 0
  1579 00002BC7 0000                <2>  at .extFlags, dw 0
  1580 00002BC9 0000                <2>  at .FSver, dw 0
  1581 00002BCB 00000000            <2>  at .RootClus, dd 0
  1582 00002BCF 0000                <2>  at .FSinfo, dw 0
  1583 00002BD1 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002BD3 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002BD4 0000                <2>  at .wOpenCnt, dw 0
  1587 00002BD6 00                  <2>  at .bDevType, db 0
  1588 00002BD7 0000                <2>  at .wDevFlgs, dw 0
  1589 00002BD9 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002BDB 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002BDD 01                  <2>  at .secPerClus, db 01h
  1593 00002BDE 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002BE0 02                  <2>  at .numFATs, db 02h
  1595 00002BE1 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002BE3 400B                <2>  at .totSec16, dw 0B40h
  1597 00002BE5 F0                  <2>  at .media, db 0F0h
  1598 00002BE6 0900                <2>  at .FATsz16, dw 0009h
  1599 00002BE8 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002BEA 0200                <2>  at .numHeads, dw 0002h
  1601 00002BEC 00000000            <2>  at .hiddSec, dd 0
  1602 00002BF0 00000000            <2>  at .totSec32, dd 0
  1603 00002BF4 00000000            <2>  at .FATsz32, dd 0
  1604 00002BF8 0000                <2>  at .extFlags, dw 0
  1605 00002BFA 0000                <2>  at .FSver, dw 0
  1606 00002BFC 00000000            <2>  at .RootClus, dd 0
  1607 00002C00 0000                <2>  at .FSinfo, dw 0
  1608 00002C02 0000                <2>  at .BkBootSec, dw 0
  1609 00002C04 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002C0D 000000              <2>
  1610                              <2>  iend
  1611 00002C10 00000000            <2>  at .dAccTime, dd 0
  1612 00002C14 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002C1D 202000              <2>
  1613 00002C20 00000000            <2>  at .volId, dd 0
  1614 00002C24 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002C2D FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002C35 13                  <2>  at .bBIOSNum, db i
  1563 00002C36 13                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002C37 0002                <2>  at .wBpS, dw 200h
  1566 00002C39 01                  <2>  at .bSpC, db 01h
  1567 00002C3A 0100                <2>  at .wResC, dw 0001h
  1568 00002C3C 02                  <2>  at .bNumFAT, db 02h
  1569 00002C3D E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002C3F 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002C41 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002C42 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002C44 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002C46 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002C48 00000000            <2>  at .dHiddSec, dd 0
  1576 00002C4C 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002C50 00000000            <2>  at .FATsz32, dd 0
  1579 00002C54 0000                <2>  at .extFlags, dw 0
  1580 00002C56 0000                <2>  at .FSver, dw 0
  1581 00002C58 00000000            <2>  at .RootClus, dd 0
  1582 00002C5C 0000                <2>  at .FSinfo, dw 0
  1583 00002C5E 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002C60 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002C61 0000                <2>  at .wOpenCnt, dw 0
  1587 00002C63 00                  <2>  at .bDevType, db 0
  1588 00002C64 0000                <2>  at .wDevFlgs, dw 0
  1589 00002C66 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002C68 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002C6A 01                  <2>  at .secPerClus, db 01h
  1593 00002C6B 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002C6D 02                  <2>  at .numFATs, db 02h
  1595 00002C6E E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002C70 400B                <2>  at .totSec16, dw 0B40h
  1597 00002C72 F0                  <2>  at .media, db 0F0h
  1598 00002C73 0900                <2>  at .FATsz16, dw 0009h
  1599 00002C75 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002C77 0200                <2>  at .numHeads, dw 0002h
  1601 00002C79 00000000            <2>  at .hiddSec, dd 0
  1602 00002C7D 00000000            <2>  at .totSec32, dd 0
  1603 00002C81 00000000            <2>  at .FATsz32, dd 0
  1604 00002C85 0000                <2>  at .extFlags, dw 0
  1605 00002C87 0000                <2>  at .FSver, dw 0
  1606 00002C89 00000000            <2>  at .RootClus, dd 0
  1607 00002C8D 0000                <2>  at .FSinfo, dw 0
  1608 00002C8F 0000                <2>  at .BkBootSec, dw 0
  1609 00002C91 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002C9A 000000              <2>
  1610                              <2>  iend
  1611 00002C9D 00000000            <2>  at .dAccTime, dd 0
  1612 00002CA1 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002CAA 202000              <2>
  1613 00002CAD 00000000            <2>  at .volId, dd 0
  1614 00002CB1 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002CBA FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002CC2 14                  <2>  at .bBIOSNum, db i
  1563 00002CC3 14                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002CC4 0002                <2>  at .wBpS, dw 200h
  1566 00002CC6 01                  <2>  at .bSpC, db 01h
  1567 00002CC7 0100                <2>  at .wResC, dw 0001h
  1568 00002CC9 02                  <2>  at .bNumFAT, db 02h
  1569 00002CCA E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002CCC 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002CCE F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002CCF 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002CD1 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002CD3 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002CD5 00000000            <2>  at .dHiddSec, dd 0
  1576 00002CD9 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002CDD 00000000            <2>  at .FATsz32, dd 0
  1579 00002CE1 0000                <2>  at .extFlags, dw 0
  1580 00002CE3 0000                <2>  at .FSver, dw 0
  1581 00002CE5 00000000            <2>  at .RootClus, dd 0
  1582 00002CE9 0000                <2>  at .FSinfo, dw 0
  1583 00002CEB 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002CED 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002CEE 0000                <2>  at .wOpenCnt, dw 0
  1587 00002CF0 00                  <2>  at .bDevType, db 0
  1588 00002CF1 0000                <2>  at .wDevFlgs, dw 0
  1589 00002CF3 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002CF5 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002CF7 01                  <2>  at .secPerClus, db 01h
  1593 00002CF8 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002CFA 02                  <2>  at .numFATs, db 02h
  1595 00002CFB E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002CFD 400B                <2>  at .totSec16, dw 0B40h
  1597 00002CFF F0                  <2>  at .media, db 0F0h
  1598 00002D00 0900                <2>  at .FATsz16, dw 0009h
  1599 00002D02 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002D04 0200                <2>  at .numHeads, dw 0002h
  1601 00002D06 00000000            <2>  at .hiddSec, dd 0
  1602 00002D0A 00000000            <2>  at .totSec32, dd 0
  1603 00002D0E 00000000            <2>  at .FATsz32, dd 0
  1604 00002D12 0000                <2>  at .extFlags, dw 0
  1605 00002D14 0000                <2>  at .FSver, dw 0
  1606 00002D16 00000000            <2>  at .RootClus, dd 0
  1607 00002D1A 0000                <2>  at .FSinfo, dw 0
  1608 00002D1C 0000                <2>  at .BkBootSec, dw 0
  1609 00002D1E 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002D27 000000              <2>
  1610                              <2>  iend
  1611 00002D2A 00000000            <2>  at .dAccTime, dd 0
  1612 00002D2E 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002D37 202000              <2>
  1613 00002D3A 00000000            <2>  at .volId, dd 0
  1614 00002D3E 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002D47 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002D4F 15                  <2>  at .bBIOSNum, db i
  1563 00002D50 15                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002D51 0002                <2>  at .wBpS, dw 200h
  1566 00002D53 01                  <2>  at .bSpC, db 01h
  1567 00002D54 0100                <2>  at .wResC, dw 0001h
  1568 00002D56 02                  <2>  at .bNumFAT, db 02h
  1569 00002D57 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002D59 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002D5B F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002D5C 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002D5E 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002D60 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002D62 00000000            <2>  at .dHiddSec, dd 0
  1576 00002D66 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002D6A 00000000            <2>  at .FATsz32, dd 0
  1579 00002D6E 0000                <2>  at .extFlags, dw 0
  1580 00002D70 0000                <2>  at .FSver, dw 0
  1581 00002D72 00000000            <2>  at .RootClus, dd 0
  1582 00002D76 0000                <2>  at .FSinfo, dw 0
  1583 00002D78 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002D7A 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002D7B 0000                <2>  at .wOpenCnt, dw 0
  1587 00002D7D 00                  <2>  at .bDevType, db 0
  1588 00002D7E 0000                <2>  at .wDevFlgs, dw 0
  1589 00002D80 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002D82 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002D84 01                  <2>  at .secPerClus, db 01h
  1593 00002D85 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002D87 02                  <2>  at .numFATs, db 02h
  1595 00002D88 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002D8A 400B                <2>  at .totSec16, dw 0B40h
  1597 00002D8C F0                  <2>  at .media, db 0F0h
  1598 00002D8D 0900                <2>  at .FATsz16, dw 0009h
  1599 00002D8F 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002D91 0200                <2>  at .numHeads, dw 0002h
  1601 00002D93 00000000            <2>  at .hiddSec, dd 0
  1602 00002D97 00000000            <2>  at .totSec32, dd 0
  1603 00002D9B 00000000            <2>  at .FATsz32, dd 0
  1604 00002D9F 0000                <2>  at .extFlags, dw 0
  1605 00002DA1 0000                <2>  at .FSver, dw 0
  1606 00002DA3 00000000            <2>  at .RootClus, dd 0
  1607 00002DA7 0000                <2>  at .FSinfo, dw 0
  1608 00002DA9 0000                <2>  at .BkBootSec, dw 0
  1609 00002DAB 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002DB4 000000              <2>
  1610                              <2>  iend
  1611 00002DB7 00000000            <2>  at .dAccTime, dd 0
  1612 00002DBB 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002DC4 202000              <2>
  1613 00002DC7 00000000            <2>  at .volId, dd 0
  1614 00002DCB 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002DD4 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002DDC 16                  <2>  at .bBIOSNum, db i
  1563 00002DDD 16                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002DDE 0002                <2>  at .wBpS, dw 200h
  1566 00002DE0 01                  <2>  at .bSpC, db 01h
  1567 00002DE1 0100                <2>  at .wResC, dw 0001h
  1568 00002DE3 02                  <2>  at .bNumFAT, db 02h
  1569 00002DE4 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002DE6 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002DE8 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002DE9 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002DEB 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002DED 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002DEF 00000000            <2>  at .dHiddSec, dd 0
  1576 00002DF3 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002DF7 00000000            <2>  at .FATsz32, dd 0
  1579 00002DFB 0000                <2>  at .extFlags, dw 0
  1580 00002DFD 0000                <2>  at .FSver, dw 0
  1581 00002DFF 00000000            <2>  at .RootClus, dd 0
  1582 00002E03 0000                <2>  at .FSinfo, dw 0
  1583 00002E05 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002E07 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002E08 0000                <2>  at .wOpenCnt, dw 0
  1587 00002E0A 00                  <2>  at .bDevType, db 0
  1588 00002E0B 0000                <2>  at .wDevFlgs, dw 0
  1589 00002E0D 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002E0F 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002E11 01                  <2>  at .secPerClus, db 01h
  1593 00002E12 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002E14 02                  <2>  at .numFATs, db 02h
  1595 00002E15 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002E17 400B                <2>  at .totSec16, dw 0B40h
  1597 00002E19 F0                  <2>  at .media, db 0F0h
  1598 00002E1A 0900                <2>  at .FATsz16, dw 0009h
  1599 00002E1C 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002E1E 0200                <2>  at .numHeads, dw 0002h
  1601 00002E20 00000000            <2>  at .hiddSec, dd 0
  1602 00002E24 00000000            <2>  at .totSec32, dd 0
  1603 00002E28 00000000            <2>  at .FATsz32, dd 0
  1604 00002E2C 0000                <2>  at .extFlags, dw 0
  1605 00002E2E 0000                <2>  at .FSver, dw 0
  1606 00002E30 00000000            <2>  at .RootClus, dd 0
  1607 00002E34 0000                <2>  at .FSinfo, dw 0
  1608 00002E36 0000                <2>  at .BkBootSec, dw 0
  1609 00002E38 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002E41 000000              <2>
  1610                              <2>  iend
  1611 00002E44 00000000            <2>  at .dAccTime, dd 0
  1612 00002E48 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002E51 202000              <2>
  1613 00002E54 00000000            <2>  at .volId, dd 0
  1614 00002E58 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002E61 FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002E69 17                  <2>  at .bBIOSNum, db i
  1563 00002E6A 17                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002E6B 0002                <2>  at .wBpS, dw 200h
  1566 00002E6D 01                  <2>  at .bSpC, db 01h
  1567 00002E6E 0100                <2>  at .wResC, dw 0001h
  1568 00002E70 02                  <2>  at .bNumFAT, db 02h
  1569 00002E71 E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002E73 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002E75 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002E76 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002E78 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002E7A 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002E7C 00000000            <2>  at .dHiddSec, dd 0
  1576 00002E80 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002E84 00000000            <2>  at .FATsz32, dd 0
  1579 00002E88 0000                <2>  at .extFlags, dw 0
  1580 00002E8A 0000                <2>  at .FSver, dw 0
  1581 00002E8C 00000000            <2>  at .RootClus, dd 0
  1582 00002E90 0000                <2>  at .FSinfo, dw 0
  1583 00002E92 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002E94 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002E95 0000                <2>  at .wOpenCnt, dw 0
  1587 00002E97 00                  <2>  at .bDevType, db 0
  1588 00002E98 0000                <2>  at .wDevFlgs, dw 0
  1589 00002E9A 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002E9C 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002E9E 01                  <2>  at .secPerClus, db 01h
  1593 00002E9F 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002EA1 02                  <2>  at .numFATs, db 02h
  1595 00002EA2 E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002EA4 400B                <2>  at .totSec16, dw 0B40h
  1597 00002EA6 F0                  <2>  at .media, db 0F0h
  1598 00002EA7 0900                <2>  at .FATsz16, dw 0009h
  1599 00002EA9 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002EAB 0200                <2>  at .numHeads, dw 0002h
  1601 00002EAD 00000000            <2>  at .hiddSec, dd 0
  1602 00002EB1 00000000            <2>  at .totSec32, dd 0
  1603 00002EB5 00000000            <2>  at .FATsz32, dd 0
  1604 00002EB9 0000                <2>  at .extFlags, dw 0
  1605 00002EBB 0000                <2>  at .FSver, dw 0
  1606 00002EBD 00000000            <2>  at .RootClus, dd 0
  1607 00002EC1 0000                <2>  at .FSinfo, dw 0
  1608 00002EC3 0000                <2>  at .BkBootSec, dw 0
  1609 00002EC5 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002ECE 000000              <2>
  1610                              <2>  iend
  1611 00002ED1 00000000            <2>  at .dAccTime, dd 0
  1612 00002ED5 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002EDE 202000              <2>
  1613 00002EE1 00000000            <2>  at .volId, dd 0
  1614 00002EE5 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002EEE FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002EF6 18                  <2>  at .bBIOSNum, db i
  1563 00002EF7 18                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002EF8 0002                <2>  at .wBpS, dw 200h
  1566 00002EFA 01                  <2>  at .bSpC, db 01h
  1567 00002EFB 0100                <2>  at .wResC, dw 0001h
  1568 00002EFD 02                  <2>  at .bNumFAT, db 02h
  1569 00002EFE E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002F00 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002F02 F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002F03 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002F05 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002F07 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002F09 00000000            <2>  at .dHiddSec, dd 0
  1576 00002F0D 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002F11 00000000            <2>  at .FATsz32, dd 0
  1579 00002F15 0000                <2>  at .extFlags, dw 0
  1580 00002F17 0000                <2>  at .FSver, dw 0
  1581 00002F19 00000000            <2>  at .RootClus, dd 0
  1582 00002F1D 0000                <2>  at .FSinfo, dw 0
  1583 00002F1F 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002F21 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002F22 0000                <2>  at .wOpenCnt, dw 0
  1587 00002F24 00                  <2>  at .bDevType, db 0
  1588 00002F25 0000                <2>  at .wDevFlgs, dw 0
  1589 00002F27 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002F29 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002F2B 01                  <2>  at .secPerClus, db 01h
  1593 00002F2C 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002F2E 02                  <2>  at .numFATs, db 02h
  1595 00002F2F E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002F31 400B                <2>  at .totSec16, dw 0B40h
  1597 00002F33 F0                  <2>  at .media, db 0F0h
  1598 00002F34 0900                <2>  at .FATsz16, dw 0009h
  1599 00002F36 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002F38 0200                <2>  at .numHeads, dw 0002h
  1601 00002F3A 00000000            <2>  at .hiddSec, dd 0
  1602 00002F3E 00000000            <2>  at .totSec32, dd 0
  1603 00002F42 00000000            <2>  at .FATsz32, dd 0
  1604 00002F46 0000                <2>  at .extFlags, dw 0
  1605 00002F48 0000                <2>  at .FSver, dw 0
  1606 00002F4A 00000000            <2>  at .RootClus, dd 0
  1607 00002F4E 0000                <2>  at .FSinfo, dw 0
  1608 00002F50 0000                <2>  at .BkBootSec, dw 0
  1609 00002F52 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002F5B 000000              <2>
  1610                              <2>  iend
  1611 00002F5E 00000000            <2>  at .dAccTime, dd 0
  1612 00002F62 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002F6B 202000              <2>
  1613 00002F6E 00000000            <2>  at .volId, dd 0
  1614 00002F72 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
  1560                              <2>  istruc drvBlk
  1561 00002F7B FFFFFFFFFFFFFFFF    <2>  at .pLink, dq -1
  1562 00002F83 19                  <2>  at .bBIOSNum, db i
  1563 00002F84 19                  <2>  at .bDOSNum, db i
  1564                              <2> 
  1565 00002F85 0002                <2>  at .wBpS, dw 200h
  1566 00002F87 01                  <2>  at .bSpC, db 01h
  1567 00002F88 0100                <2>  at .wResC, dw 0001h
  1568 00002F8A 02                  <2>  at .bNumFAT, db 02h
  1569 00002F8B E000                <2>  at .wRtCntNum, dw 00E0h
  1570 00002F8D 400B                <2>  at .wTotSec16, dw 0B40h
  1571 00002F8F F0                  <2>  at .bMedDesc, db 0F0h
  1572 00002F90 0900                <2>  at .wFATsz16, dw 0009h
  1573 00002F92 1200                <2>  at .wSecPerTrk, dw 0012h
  1574 00002F94 0200                <2>  at .wNumHeads, dw 0002h
  1575 00002F96 00000000            <2>  at .dHiddSec, dd 0
  1576 00002F9A 00000000            <2>  at .dTotSec32, dd 0
  1577                              <2> 
  1578 00002F9E 00000000            <2>  at .FATsz32, dd 0
  1579 00002FA2 0000                <2>  at .extFlags, dw 0
  1580 00002FA4 0000                <2>  at .FSver, dw 0
  1581 00002FA6 00000000            <2>  at .RootClus, dd 0
  1582 00002FAA 0000                <2>  at .FSinfo, dw 0
  1583 00002FAC 0000                <2>  at .BkBootSec, dw 0
  1584                              <2> 
  1585 00002FAE 10                  <2>  at .bBpbType, db bpbFat12
  1586 00002FAF 0000                <2>  at .wOpenCnt, dw 0
  1587 00002FB1 00                  <2>  at .bDevType, db 0
  1588 00002FB2 0000                <2>  at .wDevFlgs, dw 0
  1589 00002FB4 3F00                <2>  at .wNumCyl, dw 63
  1590                              <2>  istruc bpb32
  1591 00002FB6 0002                <2>  at .bytsPerSec, dw 200h
  1592 00002FB8 01                  <2>  at .secPerClus, db 01h
  1593 00002FB9 0100                <2>  at .revdSecCnt, dw 0001h
  1594 00002FBB 02                  <2>  at .numFATs, db 02h
  1595 00002FBC E000                <2>  at .rootEntCnt, dw 00E0h
  1596 00002FBE 400B                <2>  at .totSec16, dw 0B40h
  1597 00002FC0 F0                  <2>  at .media, db 0F0h
  1598 00002FC1 0900                <2>  at .FATsz16, dw 0009h
  1599 00002FC3 1200                <2>  at .secPerTrk, dw 0012h
  1600 00002FC5 0200                <2>  at .numHeads, dw 0002h
  1601 00002FC7 00000000            <2>  at .hiddSec, dd 0
  1602 00002FCB 00000000            <2>  at .totSec32, dd 0
  1603 00002FCF 00000000            <2>  at .FATsz32, dd 0
  1604 00002FD3 0000                <2>  at .extFlags, dw 0
  1605 00002FD5 0000                <2>  at .FSver, dw 0
  1606 00002FD7 00000000            <2>  at .RootClus, dd 0
  1607 00002FDB 0000                <2>  at .FSinfo, dw 0
  1608 00002FDD 0000                <2>  at .BkBootSec, dw 0
  1609 00002FDF 000000000000000000- <2>  at .reserved, db 12 dup (0)
  1609 00002FE8 000000              <2>
  1610                              <2>  iend
  1611 00002FEB 00000000            <2>  at .dAccTime, dd 0
  1612 00002FEF 4E4F204E414D452020- <2>  at .volLab, db "NO NAME    ",0
  1612 00002FF8 202000              <2>
  1613 00002FFB 00000000            <2>  at .volId, dd 0
  1614 00002FFF 464154313220202000  <2>  at .filSysType, db "FAT12   ",0
  1615                              <2>  iend
  1616                              <2>  %assign i i+1
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00003008 0F010D23000000      <1>     sidt [myIdt]
     8 0000300F 0FB6C0              <1>     movzx eax, al
     9 00003012 4892                <1>     xchg rdx, rax
    10 00003014 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00003018 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 0000301F 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00003022 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00003026 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 0000302A 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 0000302E 894208              <1>     mov dword [rdx + 8], eax
    17 00003031 C3                  <1>     ret
    18                              <1> myIdt:
    19 00003032 0000                <1> .limit  dw 0
    20 00003034 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 0000303C 50                  <1>     push rax
    25 0000303D 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 0000303E 51                  <1>     push rcx
    27 0000303F 52                  <1>     push rdx
    28 00003040 488D152BD1FFFF      <1>     lea rdx, qword [fastOutput]
    29 00003047 B829000000          <1>     mov eax, 29h
    30 0000304C E8B7FFFFFF          <1>     call installInterrupt
    31 00003051 488D1522D1FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00003058 B83B000000          <1>     mov eax, 3Bh
    33 0000305D E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00003062 B401                <1>     mov ah, 01      ;Get buffer status
    36 00003064 CD36                <1>     int 36h
    37 00003066 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00003068 30E4                <1>     xor ah, ah
    39 0000306A CD36                <1>     int 36h ;Read key to flush from buffer
    40 0000306C EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 0000306E B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00003073 CD30                <1>     int 30h
    44 00003075 B402                <1>     mov ah, 02h
    45 00003077 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00003079 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 0000307B CD30                <1>     int 30h
    48 0000307D B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 0000307F B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00003084 CD30                <1>     int 30h
    51 00003086 5A                  <1>     pop rdx
    52 00003087 59                  <1>     pop rcx
    53 00003088 5B                  <1>     pop rbx
    54 00003089 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 0000308A 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 00003090 50                  <1>     push rax
    59 00003091 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 00003098 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 0000309C 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 0000309D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 0000309E 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 0000309F B402                <1>     mov ah, 02  ;Read RTC Time
    70 000030A1 CD3A                <1>     int 3Ah
    71 000030A3 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 000030A5 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 000030A8 E84D000000          <1>     call .bcd2Bin
    75 000030AD 88C5                <1>     mov ch, al
    76 000030AF 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 000030B2 E843000000          <1>     call .bcd2Bin
    78 000030B7 88C1                <1>     mov cl, al
    79 000030B9 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 000030BC E839000000          <1>     call .bcd2Bin
    81 000030C1 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 000030C3 89C2                <1>     mov edx, eax
    83 000030C5 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 000030C7 CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 000030C9 B404                <1>     mov ah, 04  ;Read RTC Date
    90 000030CB CD3A                <1>     int 3Ah
    91 000030CD 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 000030CF 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 000030D2 E823000000          <1>     call .bcd2Bin
    95 000030D7 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 000030DA 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 000030E0 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 000030E3 E812000000          <1>     call .bcd2Bin
    99 000030E8 88C6                <1>     mov dh, al  
   100 000030EA 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 000030ED E808000000          <1>     call .bcd2Bin
   102 000030F2 88C2                <1>     mov dl, al
   103 000030F4 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 000030F6 CD21                <1>     int 21h
   105 000030F8 EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 000030FA 51                  <1>     push rcx
   109 000030FB 89C1                <1>     mov ecx, eax
   110 000030FD 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 00003102 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 00003108 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 0000310B C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 0000310E 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 00003110 FFC9                <1>     dec ecx
   117 00003112 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 00003114 59                  <1>     pop rcx
   120 00003115 C3                  <1>     ret
   121                              <1> .clkEnd:
   122 00003116 5B                  <1>     pop rbx ;Get the pointer back
   123 00003117 E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;Start by setting up the interrupt vectors!
   136 0000311C B839350000          <1>     mov eax, 3539h  ;Get original Int 39h
   137 00003121 CD21                <1>     int 21h
   138 00003123 48891D94D3FFFF      <1>     mov qword [i39Org], rbx
   139 0000312A B839250000          <1>     mov eax, 2539h  ;Setup our handler
   140 0000312F 488D15A8D3FFFF      <1>     lea rdx, dosInt39h
   141 00003136 CD21                <1>     int 21h
   142                              <1> 
   143 00003138 B833350000          <1>     mov eax, 3533h  ;Get original Int 33h
   144 0000313D CD21                <1>     int 21h
   145 0000313F 48891D80D3FFFF      <1>     mov qword [i33Org], rbx
   146 00003146 48891D89D3FFFF      <1>     mov qword [i33Next], rbx    ;This is also the low level handler
   147 0000314D B833250000          <1>     mov eax, 2533h  ;Setup our handler
   148 00003152 488D15A7D3FFFF      <1>     lea rdx, dosInt33h
   149 00003159 CD21                <1>     int 21h
   150                              <1> 
   151 0000315B B82F350000          <1>     mov eax, 352Fh  ;Get previous Int 2Fh handler
   152 00003160 CD21                <1>     int 21h
   153 00003162 48891D65D3FFFF      <1>     mov qword [i2FNext], rbx
   154 00003169 B82F250000          <1>     mov eax, 252Fh
   155 0000316E 488D1500D4FFFF      <1>     lea rdx, i2fhSwap33h
   156 00003175 CD21                <1>     int 21h
   157                              <1> 
   158                              <1> 
   159                              <1> ;Then set up the link pointers to the load address of the 
   160                              <1> ; drive table.
   161 00003177 B919000000          <1>     mov ecx, drvBlkTblL - 1
   162 0000317C 488D2D33F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   163 00003183 4889EE              <1>     mov rsi, rbp
   164                              <1> .dskTblLp:
   165 00003186 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   166 00003189 4881C68D000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   167 00003190 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   168 00003193 FFC9                <1>     dec ecx                 ;Decrement the count
   169 00003195 75EF                <1>     jnz .dskTblLp
   170 00003197 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   171                              <1> ;Now get number of Int 33h information packed in r8
   172 0000319E CD31                <1>     int 31h
   173                              <1>     ;Returns:
   174                              <1>     ;r8[Byte 0] = Number of COM ports
   175                              <1>     ;r8[Byte 1] = Number of fixed disks
   176                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   177                              <1>     ;r8[Byte 3] = Number of Int 33h units
   178 000031A0 4C89050FE0FFFF      <1>     mov qword [msdDriver.inBuffer], r8   
   179 000031A7 0FB6050BE0FFFF      <1>     movzx eax, byte [msdDriver.inBuffer + 3]
   180 000031AE 85C0                <1>     test eax, eax
   181 000031B0 0F840D020000        <1>     jz .noDevs
   182 000031B6 0FB61DFADFFFFF      <1>     movzx ebx, byte [msdDriver.inBuffer + 1]
   183 000031BD 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   184 000031BF 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   185 000031C5 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   186 000031CB C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   187                              <1> ;Start by doing fixed disks.
   188 000031D2 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   189 000031D4 7454                <1>     jz .doRem
   190 000031D6 C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   191 000031DD C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   192                              <1> .hdLp:
   193                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   194                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   195 000031E4 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   196 000031E6 E8C9030000          <1>     call .ptnUpdateBpb
   197 000031EB 720D                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   198                              <1> ;The odd case where there is a BPB on the hard disk :)
   199 000031ED 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   200 000031F3 E85E030000          <1>     call .advDiskPtrs
   201 000031F8 EB12                <1>     jmp short .fatDiskOk
   202                              <1> .mbrFnd:
   203 000031FA 7517                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   204                              <1> ;Now we check if we have a valid MBR signature.
   205 000031FC 66813DAFE1FFFF55AA  <1>     cmp word [msdDriver.inBuffer + mbr.mbrSig], 0AA55h
   206 00003205 750C                <1>     jne .gotoNextDisk
   207 00003207 E8D9010000          <1>     call .processMbr    ;This disk is done.
   208                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   209                              <1> .fatDiskOk:
   210                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   211 0000320C E83D030000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   212 00003211 7417                <1>     je .doRem
   213                              <1> .gotoNextDisk:
   214 00003213 FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   215 00003219 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   216 00003220 247F                <1>     and al, ~80h    ;Drop the upper bit
   217 00003222 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   218 00003228 75BA                <1>     jne .hdLp
   219                              <1> ;------------------------------------------------
   220                              <1> ;   Here we start doing removable devices
   221                              <1> ;------------------------------------------------
   222                              <1> .doRem:
   223 0000322A 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   224 00003231 8805(01000000)      <1>     mov byte [fixPtn], al
   225 00003237 C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   226 0000323E C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   227 00003245 803D(02000000)00    <1>     cmp byte [remDrv], 0
   228 0000324C 0F8462010000        <1>     je .noRems
   229                              <1> .remLp:
   230 00003252 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   231 00003254 E85B030000          <1>     call .ptnUpdateBpb
   232 00003259 7329                <1>     jnc .remBpbOk
   233 0000325B 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   234 0000325F B800880000          <1>     mov eax, 8800h  ;Get disk parameters
   235 00003264 CD33                <1>     int 33h
   236 00003266 7257                <1>     jc .remSkipDisk     ;If cant get BPB and no devparams, goto next disk :)
   237 00003268 C7451B00000000      <1>     mov dword [rbp + drvBlk.dHiddSec], 0
   238 0000326F 66895D0A            <1>     mov word [rbp + drvBlk.wBpS], bx
   239 00003273 F7C1FFFF0000        <1>     test ecx, 0FFFFh
   240 00003279 7605                <1>     jna .remSmall
   241 0000327B 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   242 0000327E 31C9                <1>     xor ecx, ecx
   243                              <1> .remSmall:
   244 00003280 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   245                              <1> .remBpbOk:
   246                              <1> ;Now test if we have a changeline for this device.
   247 00003284 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   248 00003287 31C9                <1>     xor ecx, ecx
   249 00003289 B800160000          <1>     mov eax, 1600h
   250 0000328E CD33                <1>     int 33h ;We have patched Int 33h here! Use IBMBIOS report style.
   251 00003290 7305                <1>     jnc .remChgOk
   252 00003292 80FC06              <1>     cmp ah, 06h ;If we returned medchanged, this means supported changeline :)
   253 00003295 7514                <1>     jne .remNext
   254                              <1> .remChgOk:
   255                              <1> ;Before we blindly test it, we check if the number of our removable
   256                              <1> ; device is past that of the EHCI devices. If it is, we don't trust
   257                              <1> ; that it has a change line. r8 preserves the value until here.
   258 00003297 4C89C0              <1>     mov rax, r8 ;Get the r8 word into rax
   259 0000329A C1E810              <1>     shr eax, 16 ;Drop the first two bytes
   260 0000329D 3A05(02000000)      <1>     cmp al, byte [remDrv]
   261 000032A3 7306                <1>     jae .remNext
   262 000032A5 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   263                              <1> .remNext:
   264 000032AB 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   265 000032B1 E8A0020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   266 000032B6 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   267 000032BD 7430                <1>     je .msdExit
   268                              <1> .remSkipDisk:
   269 000032BF FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   270 000032C5 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   271 000032CC 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   272 000032D2 741B                <1>     je .msdExit
   273 000032D4 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   274 000032D6 0F8276FFFFFF        <1>     jb .remLp                   ;If not, do normal processing.
   275                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   276                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   277                              <1> ; to go past the letters assigned to the fixed disk.
   278 000032DC 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   279 000032E2 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   280 000032E4 8805(04000000)      <1>     mov byte [dosDrv], al
   281 000032EA E963FFFFFF          <1>     jmp .remLp
   282                              <1> .msdExit:
   283 000032EF F605(00000000)FF    <1>     test byte [physVol], -1 ;Did we fail to initialise ANY devices?
   284 000032F6 0F84C7000000        <1>     jz .noDevs  ;If so, we pretend we have two drives and hope defaults work!
   285 000032FC F605(00000000)FF    <1>     test byte [physVol], -1
   286 00003303 0F84AB000000        <1>     jz .noRems
   287 00003309 803D(02000000)01    <1>     cmp byte [remDrv], 1
   288 00003310 7539                <1>     jne .skipSingle
   289                              <1> ;Here we do the A: >-< B: jank.
   290                              <1> ;We know rbp points to what should the block for B:. The block for A:
   291                              <1> ; is right behind it.
   292                              <1> .doSingle:
   293 00003312 4889EE              <1>     mov rsi, rbp
   294 00003315 4881EE8D000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   295 0000331C 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   296                              <1> ;Now we transfer the BIOS number and set drive number to 1
   297 00003322 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bBIOSNum]
   298 00003326 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   299 00003329 C6450901            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   300 0000332D 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   301 00003331 4881C60A000000      <1>     add rsi, drvBlk.bpb
   302 00003338 B983000000          <1>     mov ecx, (drvBlk_size - 10)  ;8 bytes Link ptr and 2 id bytes
   303 0000333D F3A4                <1>     rep movsb
   304 0000333F 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   305 00003345 FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   306                              <1> .skipSingle:
   307 0000334B 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   308 00003352 53                  <1>     push rbx    ;Save this count on the stack
   309 00003353 FFCB                <1>     dec ebx     ;Turn into an offset into the table
   310 00003355 B88D000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   311 0000335A F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   312 0000335C 488D3553EEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   313 00003363 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   314 0000336B 488D1D(66000000)    <1>     lea rbx, bpbArray
   315                              <1> .buildBPBArrayLp:
   316 00003372 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   317 00003376 0FB64609            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   318 0000337A 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   319 0000337E 4889F7              <1>     mov rdi, rsi                            ;Save this ptr before walking
   320 00003381 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Now walk the table
   321 00003384 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   322 0000338B 75E5                <1>     jne .buildBPBArrayLp    ;No... keep going
   323 0000338D 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   324                              <1> ;
   325                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   326                              <1> ;
   327 00003390 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the request packet ptr back
   328                              <1> ;All previous drivers return the "worst case" eject pointer. Here we return
   329                              <1> ; the real eject pointer
   330 00003397 4881C78D000000      <1>     add rdi, drvBlk_size    ;Mov rdi past end of last drvBlk 2 first free byte
   331 0000339E 48897B0E            <1>     mov qword [rbx + initReqPkt.endptr], rdi    ;save as real eject point
   332 000033A2 58                  <1>     pop rax         ;Get back the number of detected volumes
   333 000033A3 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   334 000033A6 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   335 000033AA 66C7054BD2FFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   336                              <1>     return
    13                              <2> %%_ret:
    14 000033B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   337                              <1> .noRems:
   338                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   339                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   340                              <1> ; we just did the first remdev. This drive gets registered as having
   341                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   342 000033B4 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   343 000033B8 FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   344                              <1> ;Here we setup A: drive to be a pretend 1.44Mb drive
   345 000033BE E94FFFFFFF          <1>     jmp .doSingle
   346                              <1> .noDevs:
   347                              <1> ;If we have no drives, then suppose we have two default drives
   348                              <1> ; A: and B: which are NOT the same!
   349 000033C3 C605(00000000)02    <1>     mov byte [physVol], 2   ;Identify entries A and B of system Ok!
   350                              <1> ;Now set them as their own owners and not shared status.
   351 000033CA 488D35E5EDFFFF      <1>     lea rsi, msdDriver.drvBlkTbl
   352 000033D1 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   353 000033D7 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]
   354 000033DA 66814E372000        <1>     or word [rsi + drvBlk.wDevFlgs], devOwnDrv
   355 000033E0 E966FFFFFF          <1>     jmp .skipSingle
   356                              <1> ;------------------------
   357                              <1> ; Procedures for init
   358                              <1> ;------------------------
   359                              <1> 
   360                              <1> .processMbr:
   361                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   362                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   363 000033E5 E898010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   364                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   365                              <1> ; ptn. We process it, invalidate the entry then start again
   366 000033EA 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   367 000033F1 7539                <1>     jne .pmbrNoHack
   368 000033F3 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   369 000033FA B904000000          <1>     mov ecx, 4
   370                              <1> .pmbrHackLp:
   371 000033FF 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   372 00003402 740D                <1>     je .pmbrHackFnd
   373                              <1> .pmbrHackRet:
   374 00003404 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   375 0000340B FFC9                <1>     dec ecx
   376 0000340D 75F0                <1>     jnz .pmbrHackLp
   377 0000340F EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   378                              <1> .pmbrHackFnd:
   379 00003411 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   380 00003415 E825020000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   381 0000341A 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   382 0000341C C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   383 00003423 E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   384                              <1> ;Ignore any read errors, but we start again.
   385 00003428 C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   386                              <1> ;Now we fall down and start again
   387                              <1> .pmbrNoHack:
   388 0000342C C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   389 00003433 488D35(06000000)    <1>     lea rsi, mbrE
   390                              <1> .pmbrLp:
   391 0000343A 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   392 0000343D E80B020000          <1>     call .checkMbrPtnType
   393 00003442 754D                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   394 00003444 E8F6010000          <1>     call .checkDataPtn
   395 00003449 740A                <1>     je .pmbrDodata
   396 0000344B E85A000000          <1>     call .processEPtn   ;Here we process EBR
   397                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003450 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003452 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   398 00003453 EB34                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   399                              <1> .pmbrDodata:
   400 00003455 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   401 00003458 E857010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   402 0000345D 730E                <1>     jnc .pmbrOk
   403                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000345F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003461 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   404                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   405 00003462 E8CE000000          <1>     call .getUfmtSize
   406 00003467 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   407                              <1> .pmbrOk:
   408 0000346D 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   409 00003473 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   410 00003476 2580000000          <1>     and eax, ptnActive
   411 0000347B 0D01000000          <1>     or eax, ptnPrimary
   412 00003480 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   413 00003484 E8CD000000          <1>     call .advDiskPtrs
   414                              <1> .pmbrXtrejoin:
   415 00003489 E8C0000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   416                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000348E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003490 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   417                              <1> .pmbrNext:
   418 00003491 FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   419 00003497 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   420                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000349E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000034A0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   421 000034A1 4881C610000000      <1>     add rsi, mbrEntry_size
   422 000034A8 EB90                <1>     jmp short .pmbrLp
   423                              <1> 
   424                              <1> .processEPtn:
   425                              <1> ;Process all logical process in an extended partition. rsi points to
   426                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   427                              <1> ;Thus we always know the "root" sector of this extended partition.
   428 000034AA 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   429                              <1> .peplp:
   430 000034AD E8EC000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   431                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000034B2 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000034B4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   432 000034B5 66813DF6DEFFFF55AA  <1>     cmp word [msdDriver.inBuffer + ebr.mbrSig], 0AA55h
   433 000034BE 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   434 000034C0 F9                  <1>     stc
   435                              <1>     return
    13                              <2> %%_ret:
    14 000034C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   436                              <1> .pep1:
   437 000034C2 E8AA000000          <1>     call .copyEbr       ;Save the EBR
   438                              <1> ;Now we check the saved EBR is valid.
   439 000034C7 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   440 000034CE E864010000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   441 000034D3 754D                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   442 000034D5 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   443 000034DC E85E010000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   444 000034E1 743F                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   445                              <1> ;Now we get the absolute start sector of this partition.
   446 000034E3 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   447 000034E9 E8C6000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB (preserves sector number)
   448 000034EE 730E                <1>     jnc .pepOk
   449                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000034F0 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000034F2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   450                              <1> ;Else setup size and start sector and add the unformatted bit to the flags.
   451 000034F3 E83D000000          <1>     call .getUfmtSize
   452 000034F8 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   453                              <1> .pepOk:
   454                              <1> ;If here, this partition will be given a CDS entry.
   455                              <1> ;Now we go to the next logical partition in the extended partition and
   456                              <1> ; move to the next drive
   457 000034FE 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   458 00003504 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   459 00003507 2580000000          <1>     and eax, ptnActive
   460 0000350C 0D02000000          <1>     or eax, ptnLogical
   461 00003511 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   462 00003515 E83C000000          <1>     call .advDiskPtrs
   463 0000351A E82F000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   464                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000351F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003521 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   465                              <1> .pepNextEbr:
   466                              <1> ;Else we now walk the disk linked list.
   467 00003522 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   468 00003528 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   469                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000352A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000352C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   470 0000352D 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   471 00003530 E978FFFFFF          <1>     jmp .peplp
   472                              <1> 
   473                              <1> .getUfmtSize:
   474                              <1> ;Moves the partition geometry information into drvBlk from MBR. This is only
   475                              <1> ; a necessity if the medium doesn't have a trustworthy BPB. Doesn't touch CHS 
   476                              <1> ; stuff because bleugh. That can be computed by FORMAT.
   477                              <1> ;Input: rsi -> MBR/EBR entry for this partition
   478                              <1> ;       rbp -> drvBlk for this drive we are setting up
   479                              <1> ;       rcx = Sector number of the start of the partition
   480 00003535 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx  ;Set again (this time permanently)
   481 00003538 8B4E0C              <1>     mov ecx, dword [rsi + mbrEntry.numSectors]
   482 0000353B 81F9FFFF0000        <1>     cmp ecx, 0FFFFh
   483 00003541 7605                <1>     jbe .gpgSmol
   484 00003543 894D1F              <1>     mov dword [rbp + drvBlk.dTotSec32], ecx
   485 00003546 31C9                <1>     xor ecx, ecx
   486                              <1> .gpgSmol:
   487 00003548 66894D12            <1>     mov word [rbp + drvBlk.wTotSec16], cx
   488 0000354C F8                  <1>     clc
   489                              <1>     return
    13                              <2> %%_ret:
    14 0000354D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   490                              <1> 
   491                              <1> .physCheckEnd:
   492 0000354E 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   493                              <1>     return
    13                              <2> %%_ret:
    14 00003555 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   494                              <1> 
   495                              <1> .advDiskPtrs:
   496 00003556 E88E000000          <1>     call .getNumCyl     ;Computes the number of cylinders in the BPB
   497 0000355B E8C1000000          <1>     call .xfrDfltBpb    ;Finish drvBlk init by transfering dfltBPB
   498 00003560 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   499 00003564 FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   500 0000356A FE05(00000000)      <1>     inc byte [physVol]
   501                              <1>     return
    13                              <2> %%_ret:
    14 00003570 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502                              <1> 
   503                              <1> .copyEbr:
   504                              <1> ;Copies the EBR from the EBR sector in the buffer
   505 00003571 51                  <1>     push rcx
   506 00003572 56                  <1>     push rsi
   507 00003573 57                  <1>     push rdi
   508 00003574 488D3D(06000000)    <1>     lea rdi, mbrE
   509 0000357B B920000000          <1>     mov ecx, 2*mbrEntry_size
   510 00003580 EB0F                <1>     jmp short .cpmbr
   511                              <1> .copyMbr:
   512                              <1> ;Copies the MBR from the MBR sector in the buffer
   513 00003582 51                  <1>     push rcx
   514 00003583 56                  <1>     push rsi
   515 00003584 57                  <1>     push rdi
   516 00003585 488D3D(06000000)    <1>     lea rdi, mbrE
   517 0000358C B940000000          <1>     mov ecx, 4*mbrEntry_size
   518                              <1> .cpmbr:
   519 00003591 488D35DCDDFFFF      <1>     lea rsi, qword [msdDriver.inBuffer + mbr.mbrEntry1]
   520 00003598 F3A4                <1>     rep movsb
   521 0000359A 5F                  <1>     pop rdi
   522 0000359B 5E                  <1>     pop rsi
   523 0000359C 59                  <1>     pop rcx
   524                              <1>     return
    13                              <2> %%_ret:
    14 0000359D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> .readSector:
   527                              <1> ;Input: ecx = Sector to read
   528 0000359E 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   529 000035A5 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   530 000035AA 488D1D05DCFFFF      <1>     lea rbx, msdDriver.inBuffer
   531 000035B1 CD33                <1>     int 33h
   532                              <1>     return
    13                              <2> %%_ret:
    14 000035B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> .ptnUpdateBpb:
   535                              <1> ;Setups up the call for below on the current partition.
   536                              <1> ;Input: ecx = Number of hidden sectors (preserved)
   537                              <1> ;Output:
   538                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   539                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   540                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   541 000035B4 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   542 000035BA 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   543 000035BD 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   544 000035C4 884509              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   545 000035C7 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   546 000035CE 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   547 000035D1 51                  <1>     push rcx
   548 000035D2 56                  <1>     push rsi    ;Save the mbr entry ptr
   549 000035D3 E838D2FFFF          <1>     call msdDriver.updateBpb
   550 000035D8 7209                <1>     jc .pubBad
   551 000035DA E893D2FFFF          <1>     call msdDriver.moveVolIds
   552 000035DF 5E                  <1>     pop rsi
   553 000035E0 59                  <1>     pop rcx
   554 000035E1 F8                  <1>     clc         ;Always clean even if no ids
   555                              <1>     return
    13                              <2> %%_ret:
    14 000035E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   556                              <1> .pubBad:
   557 000035E3 5E                  <1>     pop rsi
   558 000035E4 59                  <1>     pop rcx
   559 000035E5 3C07                <1>     cmp al, drvBadMed ;Bad Partition?
   560 000035E7 F9                  <1>     stc         ;Ensure we set the CF again
   561                              <1>     return
    13                              <2> %%_ret:
    14 000035E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> .getNumCyl:
   564                              <1> ;Computes the number of cylinders on the media. Not really to be used.
   565                              <1> ;Input: rbp -> drvBlk
   566 000035E9 50                  <1>     push rax
   567 000035EA 51                  <1>     push rcx
   568 000035EB 52                  <1>     push rdx
   569 000035EC 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
   570 000035F0 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
   571 000035F4 F7E1                <1>     mul ecx ;Get sectors per cylinder in eax. edx = 0
   572 000035F6 85C0                <1>     test eax, eax   ;If ax is 0, store zero! Phoney CHS data in BPB.
   573 000035F8 7414                <1>     jz .gncExit     ;This prevents CHS IOCTL from occuring.
   574 000035FA 89C1                <1>     mov ecx, eax    ;Save this number in ecx
   575 000035FC 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   576 00003600 85C0                <1>     test eax, eax   ;If this is zero, get the 32 bit count of sectors
   577 00003602 0F44451F            <1>     cmovz eax, dword [rbp + drvBlk.dTotSec32]
   578 00003606 F7F1                <1>     div ecx     ;sectors/(sectors/cylinder) = whole cylinders in eax
   579 00003608 85D2                <1>     test edx, edx
   580 0000360A 7402                <1>     jz .gncExit
   581 0000360C FFC0                <1>     inc eax     ;Inc the cylinder count to account for not whole divide
   582                              <1> .gncExit:
   583 0000360E BAFFFF0000          <1>     mov edx, 0FFFFh   ;A default Max cylinder value, since CHS is for floppies.
   584 00003613 39D0                <1>     cmp eax, edx
   585 00003615 0F47C2              <1>     cmova eax, edx
   586 00003618 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   587 0000361C F8                  <1>     clc ;Ensure CF is clear
   588 0000361D 5A                  <1>     pop rdx
   589 0000361E 59                  <1>     pop rcx
   590 0000361F 58                  <1>     pop rax
   591                              <1>     return
    13                              <2> %%_ret:
    14 00003620 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> 
   593                              <1> .xfrDfltBpb:
   594                              <1> ;If a drive is removable, we check the BIOS reported values and 
   595                              <1> ; build a BPB around that. Else, we trust the bpb and blindly copy it.
   596                              <1> ;
   597                              <1> ; TEMP TEMP: FOR NOW WE JUST ALWAYS BLINDLY TRUST THE BPB.
   598                              <1> ;
   599 00003621 51                  <1>     push rcx
   600 00003622 56                  <1>     push rsi
   601 00003623 57                  <1>     push rdi
   602 00003624 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
   603 00003628 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sDfltBPB]
   604 0000362C B935000000          <1>     mov ecx, bpb32_size
   605                              <1> ;Copies garbage into the reserved 12 bytes at the end of the BPB32
   606                              <1> ; but thats ok since we dont use it and those fields are reserved.
   607 00003631 F3A4                <1>     rep movsb
   608 00003633 5F                  <1>     pop rdi
   609 00003634 5E                  <1>     pop rsi
   610 00003635 59                  <1>     pop rcx
   611                              <1>     return
    13                              <2> %%_ret:
    14 00003636 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   612                              <1> 
   613                              <1> .checkEbrPtnType:
   614                              <1> ;Input: al = Partition type
   615                              <1> ;Output: ZF=ZE => Valid partition type found
   616                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   617 00003637 E811000000          <1>     call .checkMbrPtnType
   618                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000363C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000363E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   619                              <1> .checkDataPtn:
   620 0000363F 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   621 00003641 7407                <1>     je .ceptBad
   622 00003643 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   623 00003645 7403                <1>     je .ceptBad
   624 00003647 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   625                              <1>     return
    13                              <2> %%_ret:
    14 00003649 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   626                              <1> .ceptBad:
   627 0000364A 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   628                              <1>     return
    13                              <2> %%_ret:
    14 0000364C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> .checkMbrPtnType:
   631                              <1> ;Input: al = Partition type
   632                              <1> ;Output: ZF=ZE => Valid partition type found
   633                              <1> ;        ZF=NZ => Not a valid partition type
   634 0000364D 51                  <1>     push rcx
   635 0000364E 57                  <1>     push rdi
   636 0000364F 488D3D0A000000      <1>     lea rdi, .ptnTbl
   637 00003656 B909000000          <1>     mov ecx, .ptnTblL
   638 0000365B F2AE                <1>     repne scasb ;Find the entry in al
   639 0000365D 5F                  <1>     pop rdi
   640 0000365E 59                  <1>     pop rcx
   641                              <1>     return
    13                              <2> %%_ret:
    14 0000365F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   642                              <1> 
   643                              <1> ;Table contents:
   644                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   645                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   646                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   647                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   648                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   649                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   650                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   651                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   652 00003660 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   653                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [8E05000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqPktPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     5                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     6 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     7 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     8 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
     9 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    10 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    11 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    12 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    13 00000066 <res D0h>           <1> bpbArray    dq drvBlkTblL dup (?)
    38 00000136 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+3+2 passes

