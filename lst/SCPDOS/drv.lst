     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen db ?  ;Length of the request header
    90                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde db ?  ;Command code
    92                              <1>     .status dw ?  ;Status word
    93                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqPkt
    98                              <1>     drvReqPktM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqPktM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   104 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   114 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   123 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   132 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqPktM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   180 0000000D ??                  <1>     .majfun db ?  ;Major function number
   181 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           db ?
   203 00000001 ??????????????      <1>     .res            db 7 dup (?)
   204 00000008 ????????????????    <1>     .sectorSize     dq ?  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     dq ?
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           db ?
   211 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            db 6 dup (?)
   213 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           db ?
   218 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            db 6 dup (?)
   220 00000008 ????????????????    <1>     .startSector    dq ?  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   222                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB
    19 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    20 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    21 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    22 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    23 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    24 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    25 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    26 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    27 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    28 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    29 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    30 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc extBs
    34                              <1> ;Extended bootsector structure. If present, comes immediately after 
    35                              <1> ; BPB in bootsector
    36 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    37 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    38 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    39 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    40 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    41 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    42                              <1> endstruc
    43                              <1> extBsSig    equ 29h
    44                              <1> 
    45                              <1> struc bpb32       ;FAT 32 BPB
    46 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    47 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    48 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    49 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    50 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    51 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    52 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    53 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    54 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    55 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    56 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    57 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    58 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    59 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    60 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    61 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    62 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    63 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    64 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    65                              <1> endstruc
    66                              <1> 
    67                              <1> struc FSInfo
    68 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    69 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    70 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    71 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    72 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    73 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    74 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> fsInfoSig1  equ 041615252h
    78                              <1> fsInfoSig2  equ 061417272h
    79                              <1> fsInfoSig3  equ 0AA550000h
    80                              <1> 
    81                              <1> struc drvBlk
    82                              <1> ;--------------------------------------------------------------------
    83                              <1> ; Drvblk Header information
    84                              <1> ;--------------------------------------------------------------------
    85 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    86 00000008 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    87 00000009 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    88                              <1> ;--------------------------------------------------------------------
    89                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    90                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    91                              <1> ;  left in those fields... not a problem)
    92                              <1> ;--------------------------------------------------------------------
    93                              <1> .bpb:
    94 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    95 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    96 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    97 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    98 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    99 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
   100 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
   101 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
   102 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
   103 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
   104 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
   105 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
   106                              <1> ;--------------------------------------------------------------------
   107                              <1> ; The below vars are only accessed on FAT32 volumes
   108                              <1> ;--------------------------------------------------------------------
   109 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
   110 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
   111 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
   112 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
   113 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
   114 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
   115                              <1> ;--------------------------------------------------------------------
   116                              <1> ; DrvBlk flags
   117                              <1> ;--------------------------------------------------------------------
   118 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
   119 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
   120 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
   121 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
   122                              <1> ;The below word is a legacy thing. It is only used in a CHS based IOCTL call.
   123 00000039 ????                <1>     .wNumCyl    dw ?
   124 0000003B <res 35h>           <1>     .sDfltBPB   db bpb32_size dup (?)   ;Default capacity BPB for drive
   125                              <1> .dAccTime:          ;Last media check time if remdev
   126 00000070 ????????            <1>     .wPtnType   dd ?    
   127                              <1> ;--------------------------------------------------------------------
   128                              <1> ; Volume string and id for the drive described by this drvblk
   129                              <1> ;--------------------------------------------------------------------
   130 00000074 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   131 0000007F ??                  <1>                 db ?            ;Null terminator for string
   132 00000080 ????????            <1>     .volId      dd ?            ;Volume serial number            
   133 00000084 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   134 0000008C ??                  <1>                 db ?            ;Null terminator for string
   135                              <1> endstruc
   136                              <1> 
   137                              <1> ;FAT type values
   138                              <1> bpbDskOff   equ 80h ;All Disk accesses return Not Ready (Unrecognised FAT)
   139                              <1> bpbFat16    equ 40h ;FAT 16 disk
   140                              <1> bpbFat32    equ 20h ;FAT 32 disk
   141                              <1> bpbFat12    equ 10h ;FAT 12 disk
   142                              <1> 
   143                              <1> ;Device Flag values
   144                              <1> devFixed    equ 1       ;Set if fixed disk 
   145                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
   146                              <1> devLockBPB  equ 4       ;Makes BuildBPB not build a BPB if set
   147                              <1> ;devSameSec  equ 8       ;All sectors in track are same size
   148                              <1> devMulti    equ 10h     ;BIOS Drive has many logical units (A/B share)
   149                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
   150                              <1> devSwap     equ 40h     ;Device change detected (If A swapped and B same as A)
   151                              <1> devChg      equ 80h     ;H/W Dev params changed (NOT USED, ALWAYS OFF)
   152                              <1> devFmt      equ 100h    ;Disk reformatted (BPB changed)
   153                              <1> devUnFmt    equ 200h    ;Fixed media only, disables reads/writes if set
   154                              <1> 
   155                              <1> ;Media byte bits
   156                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
   157                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
   158                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
   159                              <1> 
   160                              <1> ;Partition types
   161                              <1> ptnPrimary  equ 1       ;A primary MBR partition
   162                              <1> ptnLogical  equ 2       ;A logical MBR partition
   163                              <1> ptnActive   equ 80h     ;An active partition
   164                              <1> ptnGpt      equ 4       ;A primary GPT partition
   165                              <1> ptrUnknown  equ 8000h   ;An unknown partition
   166                              <1> 
   167                              <1> struc mbr
   168 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
   169 000001B8 ????????            <1>     .diskID     dd ?
   170 000001BC ????                <1>     .reserved   dw ?
   171 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
   172 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
   173 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
   174 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
   175 000001FE ????                <1>     .mbrSig     dw ?
   176                              <1> endstruc
   177                              <1> 
   178                              <1> struc ebr   ;A special type of MBR
   179 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
   180 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   181 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   182 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   183 000001FE ????                <1>     .mbrSig     dw ?
   184                              <1> endstruc
   185                              <1> 
   186                              <1> struc mbrEntry
   187 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   188 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   189 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   190 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   191 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   192 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   193                              <1> endstruc
   194                              <1> 
   195                              <1> struc fatDirEntry
   196 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   197 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   198 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   199 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   200 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   201 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   202 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   203 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   204 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   205 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   206 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   207 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   208                              <1> endstruc
   209                              <1> ;Directory attribute equates
   210                              <1>     dirReadOnly     equ 01h
   211                              <1>     dirHidden       equ 02h
   212                              <1>     dirSystem       equ 04h
   213                              <1>     dirVolumeID     equ 08h
   214                              <1>     dirDirectory    equ 10h
   215                              <1>     dirArchive      equ 20h
   216                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   217                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   218                              <1>     ;If any of the three bits are set, then ALL three bits are set
   219                              <1>     ; in addition to whatever the user passed to search for.
   220                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   221                              <1>     dirIncFiles     equ dirHidden | dirSystem
   222                              <1> 
   223                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   224                              <1> 
   225                              <1>     ;.jmpBoot                db 3 dup (?)
   226                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   227                              <1> ;BPB starts here
   228 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   229 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   230 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   231 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   232 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   233 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   234 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   235 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   236 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   237 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   238 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   239 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   240 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   241 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   242 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   243 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   244 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   245                              <1> 
   246                              <1> endstruc
   247                              <1> 
   248                              <1> %macro defaultBigBPB 0
   249                              <1>     dw 0200h
   250                              <1>     db 01h
   251                              <1>     dw 0001h
   252                              <1>     db 02h
   253                              <1>     dw 00E0h
   254                              <1>     dw 0B40h
   255                              <1>     db 0F0h
   256                              <1>     dw 0009h
   257                              <1>     dw 0012h
   258                              <1>     dw 0002h
   259                              <1>     dd 0
   260                              <1>     dd 0 
   261                              <1>     dd 0
   262                              <1>     dw 0
   263                              <1>     dw 0
   264                              <1>     dd 0
   265                              <1>     dw 0
   266                              <1>     dw 0
   267                              <1> %endmacro
   268                              <1> 
   269                              <1> %macro defaultDrv 0
   270                              <1>     dq -1   ;End of table marker
   271                              <1>     db 0    ;DOS drive number
   272                              <1>     db 0    ;BIOS drive 0
   273                              <1>     defaultBigBPB  ;Do a FAT12/16 BPB in FAT32 format
   274                              <1>     ;DrvBlk Flags
   275                              <1>     dw bpbFat12
   276                              <1>     dw 0    ;Open count
   277                              <1>     db 0    ;Dev type byte 
   278                              <1>     dw devOwnDrv    ;Dev flags, every drive owns itself by default
   279                              <1>     dw 63   ;63 Cylinders
   280                              <1>     defaultBigBPB   ;Do the MAX BPB write here too
   281                              <1>     dd 0    ;Access time of 0
   282                              <1>     db "NO NAME    "
   283                              <1>     db 0
   284                              <1>     dd 0    ;Vol ID of 0
   285                              <1>     db "FAT12   "
   286                              <1>     db 0
   287                              <1> %endmacro
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E8511B0000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E83E1A0000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 7408                <1>     jz .prnExit 
   513                              <1>     ;Everything else, device not ready
   514 000004AD B002                <1>     mov al, drvNotReady
   515                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   516 000004AF B480                <1>     mov ah, 80h ;Set error bit
   517 000004B1 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   518                              <1> .prnExit:
   519 000004B5 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   520 000004BB 5B                  <1>     pop rbx
   521 000004BC 58                  <1>     pop rax
   522 000004BD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> ; This file contains four main routines:
     2                              <1> ; 1) Replacement Int 39h routine (for unhooking interrupts back).
     3                              <1> ; 2) Replacement Int 33h routine.
     4                              <1> ; 3) Int 33h replacement routine.
     5                              <1> ; 4) Driver itself
     6                              <1> ; 5) Int 2Fh Driver backdoor routine
     7                              <1> 
     8 000004BE 0000000000000000    <1> i39Org  dq 0    ;Original BIOS Int 39h to replace on Int 39h
     9 000004C6 0000000000000000    <1> i33Org  dq 0    ;Original BIOS Int 33h to replace on Int 39h.
    10 000004CE 0000000000000000    <1> i2FNext dq 0    ;Previous Int 2Fh handler
    11 000004D6 0000000000000000    <1> i33Next dq 0    ;Current disk driver to call.
    12                              <1> 
    13                              <1> ;Replacement Int 39h routine to replace interrupts these drivers hook.
    14                              <1> dosInt39h:
    15                              <1> ;For now, we just replace int 33h and int 39h back and then jump to i39h
    16 000004DE B833250000          <1>     mov eax, 2533h
    17 000004E3 488B15DCFFFFFF      <1>     mov rdx, qword [i33Org]
    18 000004EA CD21                <1>     int 21h
    19 000004EC B839250000          <1>     mov eax, 2539h
    20 000004F1 488B15C6FFFFFF      <1>     mov rdx, qword [i39Org]
    21 000004F8 CD21                <1>     int 21h
    22                              <1> ;And now do the actual warm reboot
    23 000004FA FF25BEFFFFFF        <1>     jmp qword [i39Org]
    24                              <1> 
    25                              <1> ;Replacement Int 33h routine
    26                              <1> dosInt33h:
    27                              <1> ;For now, we just call the original Int 33h with no additional processing.
    28                              <1> ;Will be used to implement DOS error handling on Int 33h calls
    29 00000500 F60523000000FF      <1>     test byte [.inInt], -1  ;Spin on this var until we have done Int 33h
    30 00000507 75F7                <1>     jnz dosInt33h
    31 00000509 C6051A000000FF      <1>     mov byte [.inInt], -1   ;Set that we are about to enter Int 33h
    32 00000510 8F0515000000        <1>     pop qword [.tmp]        ;Pop the original return address off the stack
    33 00000516 FF15BAFFFFFF        <1>     call qword [i33Next]    ;Call previous handler
    34 0000051C FF3509000000        <1>     push qword [.tmp]       ;Put the return address on the stack
    35 00000522 C6050100000000      <1>     mov byte [.inInt], 0    ;Exit, now permit any waiting tasks to enter 
    36                              <1>     return                  ;And return to the caller :)
    13                              <2> %%_ret:
    14 00000529 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37 0000052A 00                  <1> .inInt  db 0    ;Set if we are doing this
    38 0000052B 0000000000000000    <1> .tmp dq 0
    39                              <1> 
    40                              <1> ;Int 33h replacement routine
    41                              <1> i2fhSwap33h:
    42                              <1> ;Replaces the current int 33h handler and the int 39h replacement handler
    43                              <1> ;Input: ah = 13h
    44                              <1> ;       rdx -> New Int 33h handler.
    45                              <1> ;       rbx -> Value to replace back when system shutdown occurs.
    46                              <1> ;Output:
    47                              <1> ;       rdx -> Replaced Int 33h handler.
    48                              <1> ;       rbx -> Replaced original lowest level Int 33h handler.
    49 00000533 80FC13              <1>     cmp ah, 13h
    50 00000536 0F8508070000        <1>     jne msdDriver.i2fDriver ;Goto the driver backdoor if not this handler 
    51 0000053C 48871593FFFFFF      <1>     xchg qword [i33Next], rdx
    52 00000543 48871D7CFFFFFF      <1>     xchg qword [i33Org], rbx
    53 0000054A 48CF                <1>     iretq
    54                              <1> 
    55                              <1> ; Actual driver here
    56                              <1> msdDriver:
    57 0000054C 50                  <1>     push rax
    58 0000054D 53                  <1>     push rbx
    59 0000054E 51                  <1>     push rcx
    60 0000054F 52                  <1>     push rdx
    61 00000550 56                  <1>     push rsi
    62 00000551 57                  <1>     push rdi
    63 00000552 55                  <1>     push rbp
    64 00000553 4150                <1>     push r8
    65 00000555 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the ptr to the req header in rbx
    66 0000055C 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
    67 00000560 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
    68 00000566 7741                <1>     ja .errBadCmd                 ;If yes, error!
    69 00000568 488D2D4D000000      <1>     lea rbp, .fnTbl
    70 0000056F 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
    71 00000574 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
    72 00000577 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
    73 00000579 7417                <1>     jz .exit
    74 0000057B 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
    75 0000057E 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
    76 00000582 752C                <1>     jne .errBadPkt
    77 00000584 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
    78 00000587 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
    79 0000058B E869050000          <1>     call .setupDrive    ;Returns rbp -> Table entry
    80                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
    81 00000590 FFD6                <1>     call rsi 
    82                              <1> .exit:
    83 00000592 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get back the req header ptr
    84 00000599 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
    85 0000059F 4158                <1>     pop r8
    86 000005A1 5D                  <1>     pop rbp
    87 000005A2 5F                  <1>     pop rdi
    88 000005A3 5E                  <1>     pop rsi
    89 000005A4 5A                  <1>     pop rdx
    90 000005A5 59                  <1>     pop rcx
    91 000005A6 5B                  <1>     pop rbx
    92 000005A7 58                  <1>     pop rax
    93 000005A8 C3                  <1>     ret
    94                              <1> 
    95                              <1> .errBadCmd:
    96 000005A9 B803000000          <1>     mov eax, drvBadCmd
    97 000005AE EB05                <1>     jmp short .writeEntryError
    98                              <1> .errBadPkt:
    99 000005B0 B805000000          <1>     mov eax, drvBadDrvReq
   100                              <1> .writeEntryError:
   101                              <1> ;Used for errors in the driver entry
   102 000005B5 E8E0000000          <1>     call .errorExit
   103 000005BA EBD6                <1>     jmp short .exit
   104                              <1> 
   105                              <1> 
   106                              <1> .fnTbl:
   107                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
   108                              <1> ; to function, high word is packet size for check
   109                              <1>     ;dw .initShim - .fnTbl        ;Function 0
   110 000005BC EA16                <1>     dw msdInit - .fnTbl
   111 000005BE 1F00                <1>     dw initReqPkt_size
   112 000005C0 EC00                <1>     dw .medChk - .fnTbl          ;Function 1
   113 000005C2 1700                <1>     dw mediaCheckReqPkt_size
   114 000005C4 6F01                <1>     dw .buildBPB - .fnTbl        ;Function 2
   115 000005C6 1E00                <1>     dw bpbBuildReqPkt_size
   116 000005C8 4603                <1>     dw .IOCTLRead - .fnTbl       ;Function 3
   117 000005CA 2A00                <1>     dw ioReqPkt_size
   118 000005CC 4703                <1>     dw .read - .fnTbl            ;Function 4
   119 000005CE 2A00                <1>     dw ioReqPkt_size
   120 000005D0 0000                <1>     dw 0                         ;Function 5
   121 000005D2 0000                <1>     dw 0
   122 000005D4 0000                <1>     dw 0                         ;Function 6
   123 000005D6 0000                <1>     dw 0
   124 000005D8 0000                <1>     dw 0                         ;Function 7
   125 000005DA 0000                <1>     dw 0
   126 000005DC 6B03                <1>     dw .write - .fnTbl           ;Function 8
   127 000005DE 2A00                <1>     dw ioReqPkt_size
   128 000005E0 6B03                <1>     dw .write - .fnTbl           ;Function 9
   129 000005E2 2A00                <1>     dw ioReqPkt_size
   130 000005E4 0000                <1>     dw 0                         ;Function 10
   131 000005E6 0000                <1>     dw 0
   132 000005E8 0000                <1>     dw 0                         ;Function 11
   133 000005EA 0000                <1>     dw 0
   134 000005EC 4603                <1>     dw .IOCTLWrite - .fnTbl      ;Function 12
   135 000005EE 2A00                <1>     dw ioReqPkt_size
   136 000005F0 3E04                <1>     dw .devOpen - .fnTbl         ;Function 13
   137 000005F2 0D00                <1>     dw openReqPkt_size
   138 000005F4 4C04                <1>     dw .devClose - .fnTbl        ;Function 14
   139 000005F6 0D00                <1>     dw closeReqPkt_size
   140 000005F8 5A04                <1>     dw .remMed - .fnTbl          ;Function 15
   141 000005FA 0D00                <1>     dw remMediaReqPkt_size
   142 000005FC 0000                <1>     dw 0                         ;Function 16
   143 000005FE 0000                <1>     dw 0
   144 00000600 0000                <1>     dw 0                         ;Function 17
   145 00000602 0000                <1>     dw 0
   146 00000604 0000                <1>     dw 0                         ;Function 18
   147 00000606 0000                <1>     dw 0
   148 00000608 6A04                <1>     dw .IOCTL - .fnTbl           ;Function 19
   149 0000060A 2700                <1>     dw ioctlReqPkt_size
   150 0000060C 0000                <1>     dw 0                         ;Function 20
   151 0000060E 0000                <1>     dw 0
   152 00000610 0000                <1>     dw 0                         ;Function 21
   153 00000612 0000                <1>     dw 0
   154 00000614 0000                <1>     dw 0                         ;Function 22
   155 00000616 0000                <1>     dw 0
   156 00000618 0105                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   157 0000061A 0D00                <1>     dw getDevReqPkt_size
   158 0000061C 3705                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   159 0000061E 0D00                <1>     dw setDevReqPkt_size
   160                              <1> 
   161                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   162                              <1> .errorXlat:
   163 00000620 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   164 00000627 B800010000          <1>     mov eax, 0100h
   165 0000062C E806060000          <1>     call .callI33h ;Read status of last operation
   166 00000631 7265                <1>     jc .genErrExit
   167                              <1> .ioError:   ;Jumped to from the blkIO processor with rbx -> reqHdr already
   168 00000633 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
   169 00000636 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   170 00000638 7460                <1>     je .errorExit 
   171 0000063A B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   172 0000063C 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   173 0000063F 7459                <1>     je .errorExit 
   174 00000641 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   175 00000644 7454                <1>     je .errorExit
   176                              <1> ;Device Not Ready
   177 00000646 B002                <1>     mov al, 02h  ;Device not ready code
   178 00000648 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   179 0000064B 744D                <1>     je .errorExit
   180 0000064D 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   181 00000651 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   182                              <1> ;Write Protected
   183 00000655 30C0                <1>     xor al, al
   184 00000657 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   185 0000065C 743C                <1>     je .errorExit
   186                              <1> ;CRC Error
   187 0000065E B004                <1>     mov al, 04h     ;CRC error code
   188 00000660 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   189 00000665 7433                <1>     je .errorExit
   190 00000667 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   191 0000066C 742C                <1>     je .errorExit
   192 0000066E 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   193 00000673 7425                <1>     je .errorExit
   194                              <1> ;Seek Error
   195 00000675 B006                <1>     mov al, 06h     ;Seek error code
   196 00000677 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   197 0000067A 741E                <1>     je .errorExit
   198                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   199                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   200 0000067C B007                <1>     mov al, 07h
   201 0000067E 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   202 00000681 7417                <1>     je .errorExit
   203                              <1> ;Sector Not Found
   204 00000683 B008                <1>     mov al, 08h     ;Sector not found code
   205 00000685 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   206 00000688 7410                <1>     je .errorExit
   207                              <1> ;Write faults
   208 0000068A B00A                <1>     mov al, 0Ah     ;Write fault
   209 0000068C 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   210 0000068F 7409                <1>     je .errorExit
   211                              <1> ;Read faults
   212 00000691 B00B                <1>     mov al, 0Bh     ;Read fault
   213 00000693 80F911              <1>     cmp cl, 11h     ;Read error
   214 00000696 7402                <1>     je .errorExit
   215                              <1> ;General Errors
   216                              <1> .genErrExit:
   217 00000698 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   218                              <1> .errorExit:     ;Jump to with al=Standard Error code
   219 0000069A B480                <1>     mov ah, 80h ;Set error bit
   220 0000069C 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]
   221 000006A3 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   222                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 000006A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   223                              <1> 
   224                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   225                              <1> .medChk:          ;Function 1
   226 000006A8 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devFmt
   227 000006AE 7417                <1>     jz .mcNoFormat
   228 000006B0 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devFmt   ;Clear this bit
   229 000006B6 C6057A060000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   230 000006BD 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;If fixed, declare changed!
   231 000006C3 7552                <1>     jnz .mmcChange
   232                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   233 000006C5 EB08                <1>     jmp short .mcRem
   234                              <1> .mcNoFormat:
   235 000006C7 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   236 000006CD 753E                <1>     jnz .mmcNoChange
   237                              <1> .mcRem:
   238 000006CF E854040000          <1>     call .checkDevType
   239 000006D4 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
   240 000006DA 7519                <1>     jnz .mmcNoChangeLine
   241 000006DC 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   242                              <1> ;Now we do a BIOS changeline check. We rely on it for drives with changeline.
   243                              <1> ;Start by setting the lastDsk to unknown since this only makes sense for
   244                              <1> ; disks without changeline support
   245 000006DF C60551060000FF      <1>     mov byte [.bLastDsk], -1   
   246 000006E6 B416                <1>     mov ah, 16h 
   247 000006E8 E84A050000          <1>     call .callI33h
   248 000006ED 7228                <1>     jc .mmcChange
   249                              <1> ;    cmp ah, 80h
   250                              <1> ;    je .mmcNoChangeLine
   251                              <1> ;    cmp ah, 86h
   252                              <1> ;    je .mmcNoChangeLine
   253 000006EF 84E4                <1>     test ah, ah ;No change?
   254 000006F1 741A                <1>     jz .mmcNoChange
   255 000006F3 EB22                <1>     jmp short .mmcChange
   256                              <1>     ;test ah, 1  ;Neither 80h or 86h have bit 0 set
   257                              <1>     ;jnz .mmcChange
   258                              <1> .mmcNoChangeLine:
   259                              <1> ; If last accessed medchecked disk was this one and the time on this 
   260                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   261 000006F5 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   262 000006F8 860539060000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   263 000006FE 380533060000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   264 00000704 750C                <1>     jne .mmcUnsure
   265                              <1> ;Else, now we do the famous time check. 
   266 00000706 E8FB040000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   267 0000070B 7205                <1>     jc .mmcUnsure
   268                              <1> .mmcNoChange:
   269 0000070D C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   270                              <1>     return
    13                              <2> %%_ret:
    14 00000711 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> .mmcUnsure:
   272 00000712 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   273                              <1>     return
    13                              <2> %%_ret:
    14 00000716 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> .mmcChange:
   275                              <1> ;Always store the volume label if we have a volume change.
   276 00000717 C60519060000FF      <1>     mov byte [.bLastDsk], -1    ;Default to unknown disk if a change occured!
   277 0000071E 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   278 00000722 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   279 00000726 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   280                              <1>     return
    13                              <2> %%_ret:
    14 0000072A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> .buildBPB:        ;Function 2
   283                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   284                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   285                              <1> ; the table entry bpb which we will be returning.
   286 0000072B 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   287 00000731 751A                <1>     jnz .bbpbExit
   288                              <1> ;------------------------------------------------------
   289                              <1> ; Here for removable devices only!!
   290                              <1> ;------------------------------------------------------
   291 00000733 E83C000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   292 00000738 4889DE              <1>     mov rsi, rbx    ;Move req ptr to rsi
   293 0000073B 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer 
   294 0000073F E886000000          <1>     call .updateBpb       ;Fill the BPB entries in the drvBlk
   295 00000744 7221                <1>     jc .bbpbError
   296 00000746 E8DB000000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   297 0000074B 7300                <1>     jnc .bbpbExit
   298                              <1> ;Here we will search the root directory for the volume label only!
   299                              <1> ;The FS string has been setup and volume ID is set to 0.
   300                              <1> ;
   301                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   302                              <1> ;
   303                              <1> .bbpbExit:
   304 0000074D 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the driver ptr
   305 00000754 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   306 00000758 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   307 0000075B 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   308 00000762 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   309                              <1>     return
    13                              <2> %%_ret:
    14 00000766 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   310                              <1> .bbpbError:
   311 00000767 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   312 00000769 0F842BFFFFFF        <1>     je .errorExit   
   313 0000076F E9ACFEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   314                              <1> 
   315                              <1> .resetIds:
   316                              <1> ;We reset the volume id string and label to the default for the 
   317                              <1> ; volume before the reset!
   318 00000774 50                  <1>     push rax
   319 00000775 53                  <1>     push rbx
   320 00000776 51                  <1>     push rcx
   321 00000777 56                  <1>     push rsi
   322 00000778 57                  <1>     push rdi
   323                              <1> 
   324                              <1> ;1) Clear volume Id
   325 00000779 C78580000000000000- <1>     mov dword [rbp + drvBlk.volId], 0
   325 00000782 00                  <1>
   326                              <1> ;2) Reset the volume label to default
   327 00000783 488D35A3050000      <1>     lea rsi, .defLbl
   328 0000078A 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   329 0000078E B90C000000          <1>     mov ecx, 12
   330 00000793 F3A4                <1>     rep movsb
   331                              <1> ;3) Reset the FAT string
   332                              <1> ;Since fat32 indicator is in the middle, compare against it.
   333                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   334 00000795 488D3588050000      <1>     lea rsi, .fat32Str
   335 0000079C 488D056F050000      <1>     lea rax, .fat12Str
   336 000007A3 488D1D71050000      <1>     lea rbx, .fat16Str
   337 000007AA F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   338 000007AE 480F47F3            <1>     cmova rsi, rbx
   339 000007B2 480F42F0            <1>     cmovb rsi, rax
   340 000007B6 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   341 000007BD B909000000          <1>     mov ecx, 9
   342 000007C2 F3A4                <1>     rep movsb
   343                              <1> 
   344 000007C4 5F                  <1>     pop rdi
   345 000007C5 5E                  <1>     pop rsi
   346 000007C6 59                  <1>     pop rcx
   347 000007C7 5B                  <1>     pop rbx
   348 000007C8 58                  <1>     pop rax
   349                              <1>     return
    13                              <2> %%_ret:
    14 000007C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> 
   351                              <1> .updateBpb:
   352                              <1> ;------------------------------------------------------
   353                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   354                              <1> ; or failing, for the BPB indicated by the media byte.
   355                              <1> ;Never called on Fixed devs in normal operation.
   356                              <1> ;------------------------------------------------------
   357                              <1> ;Entered with: 
   358                              <1> ;   rbx -> Buffer to read bootsector into
   359                              <1> ;   rbp -> drvBlk for this drive
   360                              <1> ;------------------------------------------------------
   361 000007CA 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBPB
   362                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007D0 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007D2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   363 000007D3 E8FA000000          <1>     call .bbpbReadBS
   364                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007D8 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007DA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   365                              <1> ;Check we if we have a valid bootsector.
   366 000007DB 803B69              <1>     cmp byte [rbx], 069h   ;Direct jump has no NOP
   367 000007DE 7414                <1>     je .newDisk
   368 000007E0 803BE9              <1>     cmp byte [rbx], 0E9h    ;Short jump has no NOP
   369 000007E3 740F                <1>     je .newDisk
   370 000007E5 807B0290            <1>     cmp byte [rbx + 2], 090h  ;NOP
   371 000007E9 7505                <1>     jne .oldDisk
   372 000007EB 803BEB              <1>     cmp byte [rbx], 0EBh      ;JMP SHORT
   373 000007EE 7404                <1>     je .newDisk
   374                              <1> .oldDisk:
   375                              <1>     ;call .bbpbReadFAT   ;Read the FAT sector now instead
   376                              <1>     ;retc
   377                              <1>     ;mov ax, word [rbx]
   378                              <1>     ;and ax, 0FFFh
   379                              <1>     ;cmp ah, 0Fh     ;High byte must be 0Fh at this point.
   380                              <1>     ;jne .bbpbErr
   381                              <1>     ;call .bbpbCheckMedByt   ;Checks media byte to be valid
   382                              <1>     ;jnz .bbpbErr
   383                              <1>     ;cmp al, 0F0h    ;0F0h and 0F8h are not acceptable here as they need BPB
   384                              <1>     ;je .bbpbErr
   385                              <1>     ;cmp al, 0F8h
   386                              <1>     ;je .bbpbErr
   387                              <1> .bbpbErr:
   388                              <1> ;Bad media bytes go here. Means the media is unknown.
   389 000007F0 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code
   390 000007F2 F9                  <1>     stc
   391                              <1>     return
    13                              <2> %%_ret:
    14 000007F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   392                              <1> .newDisk:
   393 000007F4 4881C30B000000      <1>     add rbx, 11 ;Now point rbx to the BPB itself
   394 000007FB 8A430A              <1>     mov al, byte [rbx + bpb.media]
   395 000007FE E8BC000000          <1>     call .bbpbCheckMedByt
   396                              <1> ;Update the drvBlk with info from the BPB.
   397                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   398                              <1> ; are ok before updating the msdTbl entry. 
   399 00000803 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   400 00000806 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   401 0000080A E850000000          <1>     call .bbpbGetFAT    ;Fat type is given in edx
   402 0000080F 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   403                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   404                              <1> ; if it is present
   405 00000812 B819000000          <1>     mov eax, bpb_size
   406 00000817 B935000000          <1>     mov ecx, bpb32_size ;Now copy the BPB over!
   407 0000081C 80FA20              <1>     cmp dl, bpbFat32
   408 0000081F 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   409 00000822 F3A4                <1>     rep movsb   
   410 00000824 F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   411                              <1>     return
    13                              <2> %%_ret:
    14 00000825 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> .moveVolIds:
   414                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   415                              <1> ;Input: rsi -> End of the BPB in sector. rbx -> BPB in sector. rbp -> drvBlk
   416                              <1> ;Output: CF=CY: No volume label in sector found.
   417                              <1> ;        CF=NC: Volume Label in sector found and copied.
   418 00000826 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   419 0000082A 7531                <1>     jne .mviNoSig
   420                              <1> ;Else, now we copy the volume information from the extended bs info block
   421 0000082C 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   422 0000082F 898580000000        <1>     mov dword [rbp + drvBlk.volId], eax
   423 00000835 4881C607000000      <1>     add rsi, extBs.volLab
   424 0000083C 488D7D74            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   425 00000840 B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   426 00000845 F3A4                <1>     rep movsb   
   427                              <1>     ;rsi now points to the filSysType field in the extBs.
   428                              <1>     ;Move rdi to the filSysType field in the drvBlk.
   429 00000847 488DBD84000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   430 0000084E B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   431 00000853 F3A4                <1>     rep movsb   
   432                              <1> ;Clear the devswap bit now as we have a good BPB for this drive
   433 00000855 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSwap
   434 0000085B F8                  <1>     clc
   435                              <1>     return
    13                              <2> %%_ret:
    14 0000085C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   436                              <1> .mviNoSig:
   437 0000085D F9                  <1>     stc
   438                              <1>     return
    13                              <2> %%_ret:
    14 0000085E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> .bbpbGetFAT:
   441                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   442 0000085F 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   443 00000862 89C8                <1>     mov eax, ecx
   444 00000864 FFC8                <1>     dec eax
   445 00000866 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   446 0000086A C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   447 0000086D 01D0                <1>     add eax, edx
   448 0000086F 31D2                <1>     xor edx, edx
   449 00000871 F7F1                <1>     div ecx     ;eax = Root Dir sectors
   450 00000873 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   451 00000874 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   452 00000878 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   453 0000087B 85C0                <1>     test eax, eax
   454 0000087D 0F44C2              <1>     cmovz eax, edx
   455 00000880 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   456 00000884 F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   457 00000886 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   458 00000887 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   459 0000088B 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   460 0000088D 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   461 0000088F 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   462 00000893 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   463 00000896 85C0                <1>     test eax, eax
   464 00000898 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   465 0000089B 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   466 0000089D 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   467 000008A1 31D2                <1>     xor edx, edx
   468 000008A3 F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   469 000008A5 BA10000000          <1>     mov edx, bpbFat12
   470 000008AA 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   471                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008AF 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008B1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   472 000008B2 D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   473 000008B4 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   474                              <1>     retnb   ;If above or equal, its in FAT32
    69                              <2> cret nb
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008B9 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008BB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   475 000008BC D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   476                              <1>     return
    13                              <2> %%_ret:
    14 000008BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> 
   478                              <1> .bbpbCheckMedByt:
   479                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   480                              <1> ; recognise as this is a sign of an unhealthy volume.
   481                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   482                              <1> ;Values 0FAh, 0F8h and 0F0h NEED to come from BPB. If found from FAT, then 
   483                              <1> ; do not accept the volume!
   484                              <1> ;Input: al = Media byte. 
   485                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   486 000008BF 3CF0                <1>     cmp al, 0F0h
   487                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008C1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008C3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   488 000008C4 3CF8                <1>     cmp al, 0F8h
   489                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008C6 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008C8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   490 000008C9 38C0                <1>     cmp al, al  ;Set ZF
   491                              <1>     return
    13                              <2> %%_ret:
    14 000008CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> .bbpbReadFAT:
   494                              <1> ;Reads the first FAT sector of media we are playing with.
   495                              <1> ;Input: rbx -> Buffer we are xacting on
   496 000008CC 31C9                <1>     xor ecx, ecx
   497 000008CE FFC1                <1>     inc ecx         ;Read Sector 1...
   498 000008D0 EB02                <1>     jmp short .bbpbReadEp
   499                              <1> .bbpbReadBS:
   500                              <1> ;Reads the bootsector of media we are playing with.
   501                              <1> ;Input: rbx -> Buffer we are xacting on
   502 000008D2 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   503                              <1> .bbpbReadEp:
   504 000008D4 BF05000000          <1>     mov edi, 5      ;Retry 5 times
   505                              <1> .bbpbrbsLp:
   506 000008D9 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   507 000008DD 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]      ;Of selected volume!
   508 000008E0 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   509 000008E5 E84D030000          <1>     call .callI33h
   510 000008EA 0F83AA000000        <1>     jnc .bioExit    ;Exit via the IO exit
   511 000008F0 FFCF                <1>     dec edi         ;Dec the counter
   512 000008F2 740C                <1>     jz .bbpbrbsErr   ;If we are out of counts, sorry buddy :(
   513 000008F4 B800010000          <1>     mov eax, 0100h  ;Now read status of last error
   514 000008F9 E839030000          <1>     call .callI33h
   515 000008FE EBD9                <1>     jmp short .bbpbrbsLp    ;And try again
   516                              <1> .bbpbrbsErr:
   517 00000900 F9                  <1>     stc
   518                              <1>     return
    13                              <2> %%_ret:
    14 00000901 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> .IOCTLRead:       ;Function 3, returns immediately
   521                              <1> .IOCTLWrite:      ;Function 12, returns done
   522                              <1>     return
    13                              <2> %%_ret:
    14 00000902 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> .read:            ;Function 4
   525                              <1> ;Will read one sector at a time.
   526 00000903 E8C3020000          <1>     call .ioSetVolLbl
   527 00000908 E81B020000          <1>     call .checkDevType
   528 0000090D 4889DF              <1>     mov rdi, rbx
   529 00000910 E850000000          <1>     call .bioSetupRegs
   530                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000915 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000917 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   531                              <1> .msdr0:
   532 00000918 B482                <1>     mov ah, 82h ;LBA Read Sectors
   533 0000091A E85A000000          <1>     call .blkIO
   534 0000091F E834000000          <1>     call .ioAdv
   535 00000924 75F2                <1>     jne .msdr0
   536                              <1>     return
    13                              <2> %%_ret:
    14 00000926 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> .write:           ;Function 8/9
   539                              <1> ;Will write and optionally verify one sector at a time.
   540 00000927 E89F020000          <1>     call .ioSetVolLbl
   541 0000092C E8F7010000          <1>     call .checkDevType
   542 00000931 4889DF              <1>     mov rdi, rbx
   543 00000934 E82C000000          <1>     call .bioSetupRegs
   544                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000939 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000093B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   545                              <1> .msdw0:
   546 0000093C B483                <1>     mov ah, 83h ;LBA Write Sectors
   547 0000093E E836000000          <1>     call .blkIO
   548 00000943 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
   549 00000947 7507                <1>     jne .msdw1
   550 00000949 B484                <1>     mov ah, 84h ;LBA Verify Sectors
   551 0000094B E829000000          <1>     call .blkIO
   552                              <1> .msdw1:
   553 00000950 E803000000          <1>     call .ioAdv
   554 00000955 75E5                <1>     jne .msdw0
   555                              <1>     return
    13                              <2> %%_ret:
    14 00000957 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   556                              <1> 
   557                              <1> .ioAdv:
   558                              <1> ;Advances the buffers on successful IO. 
   559                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
   560                              <1> ;Input: 
   561                              <1> ;       rbx -> Where we just IO'ed to
   562                              <1> ;       rcx = LBA sector we just xfred
   563                              <1> ;       dl  = BIOS drive number
   564                              <1> ;       rdi -> ioReqPkt
   565                              <1> ;       rbp -> drvBlk
   566                              <1> ;       esi = Number of sectors to xfr
   567                              <1> ;Output:
   568                              <1> ;       rbx -> Where to IO next sector to/from
   569                              <1> ;       rcx = LBA of next sector to xfer
   570                              <1> ;       dl  = BIOS drive number
   571                              <1> ;       rdi -> ioReqPkt
   572                              <1> ;       rbp -> devBlk
   573                              <1> ;       esi = Sectors left to xfr.
   574                              <1> ;       ZF=ZE if esi is 0. Else ZF=NZ.
   575 00000958 48FFC1              <1>     inc rcx     ;Goto next sector
   576 0000095B 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
   577 0000095F 4801C3              <1>     add rbx, rax  ;Advance the buffer pointer by 1 sector
   578 00000962 FFCE                <1>     dec esi     ;Once this hits 0, we stop the xfr
   579                              <1>     return
    13                              <2> %%_ret:
    14 00000964 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> .bioSetupRegs:
   582                              <1> ;Sets up sector to read and buffer ptr in blkIO.
   583                              <1> ;If returns ZF=ZE then xfr 0 sectors, exit immediately
   584                              <1> ;Output: rdi -> ioReqPkt
   585                              <1> ;        rbp -> devBlk
   586                              <1> ;        rbx -> Transfer buffer
   587                              <1> ;        rcx = Sector to transfer
   588                              <1> ;        esi = Number of sectors to transfer
   589                              <1> ;        ZF=ZE if esi is 0. Else ZF=NZ.
   590 00000965 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
   591 00000968 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   592 0000096C 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   593 00000970 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS drive number
   594 00000973 8B7716              <1>     mov esi, dword [rdi + ioReqPkt.tfrlen]  ;Get the tfrlen into esi
   595 00000976 85F6                <1>     test esi, esi                           ;If this is 0, avoid IO
   596                              <1>     return
    13                              <2> %%_ret:
    14 00000978 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> 
   598                              <1> .blkIO:  ;Does block IO
   599                              <1> ;Error handled internally and return to 
   600                              <1> ;Sector count handled by caller.
   601                              <1> ;All registers marked as input registers must be preserved across the call
   602                              <1> ; except ah and rdi
   603                              <1> ;Input: ah = BIOS function number, 
   604                              <1> ;       rdi -> ioReqPkt 
   605                              <1> ;       rbp -> drvBlk
   606                              <1> ;       rbx -> Transfer buffer
   607                              <1> ;       rcx = LBA sector to transfer
   608                              <1> ;       dl  = BIOS drive number
   609                              <1> ;       esi = Sectors left to xfr!
   610 00000979 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   611 0000097F 756E                <1>     jnz .bioufmted
   612 00000981 56                  <1>     push rsi    ;Save sector count
   613 00000982 BE05000000          <1>     mov esi, 5  ;Retry counter five times
   614                              <1> .biolp:
   615 00000987 E841000000          <1>     call .bioSanity ;Sanity check ecx here
   616 0000098C B001                <1>     mov al, 01h ;Do one sector at a time 
   617 0000098E E8A4020000          <1>     call .callI33h
   618 00000993 7221                <1>     jc .bioError
   619 00000995 3C01                <1>     cmp al, 1   ;Did we read one sector?
   620 00000997 751D                <1>     jne .bioError
   621 00000999 5E                  <1>     pop rsi ;Rebalance stack
   622                              <1> .bioExit:
   623 0000099A 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   624 0000099D 880594030000        <1>     mov byte [.bLastDsk], al    ;Last DOS disk accessed
   625 000009A3 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   626                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000009A9 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000009AB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   627                              <1> ;Ensure we set the time of the operation w/o modifying the registers.
   628                              <1> ;Routine trashes ecx and edx so save!
   629 000009AC 51                  <1>     push rcx
   630 000009AD 52                  <1>     push rdx
   631 000009AE E843020000          <1>     call .setTime   ;Set the current time and clear state for successful IO
   632 000009B3 5A                  <1>     pop rdx
   633 000009B4 59                  <1>     pop rcx
   634                              <1>     return
    13                              <2> %%_ret:
    14 000009B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   635                              <1> .bioError:
   636                              <1>     ;xor eax, eax    ;Reset disk: CRASHES BOCHS
   637 000009B6 52                  <1>     push rdx    ;Preserve drive number. All other regs preserved
   638 000009B7 B800010000          <1>     mov eax, 0100h
   639 000009BC E876020000          <1>     call .callI33h ;Read status of last operation
   640 000009C1 5A                  <1>     pop rdx     ;Get back drive number.
   641 000009C2 FFCE                <1>     dec esi
   642 000009C4 75C1                <1>     jnz .biolp
   643 000009C6 5E                  <1>     pop rsi     ;Rebalance the stack
   644 000009C7 5B                  <1>     pop rbx     ;Drop the return pointer to balance stack
   645 000009C8 E966FCFFFF          <1>     jmp .ioError
   646                              <1> .bioSanity:
   647                              <1> ;Input: ecx = Sector we will transact on. rbp -> DrvBlk
   648                              <1> ;Output: CF=NC, sector ok to xact on
   649                              <1> ;        CF=CY, doesnt return, fails the call
   650 000009CD 50                  <1>     push rax
   651 000009CE 53                  <1>     push rbx
   652 000009CF 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   653 000009D3 8B5D1F              <1>     mov ebx, dword [rbp + drvBlk.dTotSec32] 
   654 000009D6 85C0                <1>     test eax, eax
   655 000009D8 0F44C3              <1>     cmovz eax, ebx  ;The 32 bit count is valid only if 16 bit count is 0
   656 000009DB 39C1                <1>     cmp ecx, eax    ;This will set CF iff ecx < eax. If eax >= ecx CF=NC.
   657 000009DD 5B                  <1>     pop rbx
   658 000009DE 58                  <1>     pop rax
   659 000009DF F5                  <1>     cmc             ;Flip CF from CY to NC if ok and NC to CY if not
   660                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000009E0 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000009E2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   661                              <1> ;Now pops the return from the sanity call and falls
   662 000009E3 58                  <1>     pop rax ;Pop from sanity call
   663                              <1> .biobadsect:
   664 000009E4 58                  <1>     pop rax ;Pop from bio call
   665 000009E5 B808000000          <1>     mov eax, drvSecNotFnd
   666 000009EA E9ABFCFFFF          <1>     jmp .errorExit
   667                              <1> .bioufmted:
   668 000009EF 58                  <1>     pop rax ;Pop from bio call
   669 000009F0 B807000000          <1>     mov eax, drvBadMed
   670 000009F5 E9A0FCFFFF          <1>     jmp .errorExit
   671                              <1> 
   672                              <1> .devOpen:         ;Function 13
   673 000009FA 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
   674                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A00 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A02 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   675 00000A03 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
   676                              <1>     return
    13                              <2> %%_ret:
    14 00000A07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   677                              <1> .devClose:        ;Function 14
   678 00000A08 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
   679                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A0E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A10 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   680 00000A11 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
   681                              <1>     return
    13                              <2> %%_ret:
    14 00000A15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   682                              <1> .remMed:  ;Function 15
   683                              <1> ;Sets busy bit if fixed drive!
   684 00000A16 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;Is it fixed?
   685                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A1C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A1E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   686 00000A1F 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
   687                              <1>     return
    13                              <2> %%_ret:
    14 00000A25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   688                              <1> 
   689                              <1> .IOCTL:    ;Function 19
   690                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   691                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params).
   692 00000A26 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   693 00000A2A B803000000          <1>     mov eax, drvBadCmd
   694 00000A2F 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   695 00000A32 0F8562FCFFFF        <1>     jne .errorExit  ;If not, exit bad
   696 00000A38 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   697 00000A3B 0F8459FCFFFF        <1>     jz .errorExit
   698 00000A41 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   699 00000A44 80F941              <1>     cmp cl, 41h     
   700 00000A47 743B                <1>     je .gIOCTLWrite
   701 00000A49 80F942              <1>     cmp cl, 42h
   702 00000A4C 7450                <1>     je .gIOCTLFormat
   703 00000A4E 80F960              <1>     cmp cl, 60h
   704 00000A51 0F8543FCFFFF        <1>     jne .errorExit  ;Error if not this function with bad command
   705                              <1>     ;Get params here
   706 00000A57 0FB65508            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   707 00000A5B B800880000          <1>     mov eax, 8800h ;Read LBA Device Parameters
   708 00000A60 53                  <1>     push rbx
   709 00000A61 E8D1010000          <1>     call .callI33h
   710                              <1>     ;Returns:
   711                              <1>     ;rbx = Sector size in bytes
   712                              <1>     ;rcx = Last LBA block
   713 00000A66 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   714 00000A69 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   715 00000A6A 0F82B0FBFFFF        <1>     jc .errorXlat
   716                              <1> ;Get LBA Table:
   717                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   718                              <1> ;Offset 1:  Reserved, 7 bytes
   719                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   720                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   721 00000A70 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   722 00000A74 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   723 00000A7B 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   724 00000A7F 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   725                              <1>     return
    13                              <2> %%_ret:
    14 00000A83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   726                              <1> 
   727                              <1> .gIOCTLWrite:
   728                              <1> ;Write Table:
   729                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   730                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   731                              <1> ;Offset 2:  Reserved, 6 bytes
   732                              <1> ;Offset 8:  Sector to start format at (QWORD)
   733                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   734 00000A84 E81E000000          <1>     call .gIOCTLFormatWriteSetup
   735 00000A89 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   736 00000A8D B483                <1>     mov ah, 83h
   737                              <1> .gIOCTLwfCommon:
   738 00000A8F E8A3010000          <1>     call .callI33h
   739 00000A94 0F8286FBFFFF        <1>     jc .errorXlat
   740 00000A9A 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   741                              <1>     return 
    13                              <2> %%_ret:
    14 00000A9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   742                              <1> 
   743                              <1> .gIOCTLFormat:
   744                              <1> ;Format Table:
   745                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   746                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   747                              <1> ;Offset 2:  Reserved, 6 bytes
   748                              <1> ;Offset 8:  Sector to start format at (QWORD)
   749 00000A9E E804000000          <1>     call .gIOCTLFormatWriteSetup
   750 00000AA3 B485                <1>     mov ah, 85h
   751 00000AA5 EBE8                <1>     jmp short .gIOCTLwfCommon
   752                              <1> 
   753                              <1> .gIOCTLFormatWriteSetup:
   754                              <1> ;Sets the following:
   755                              <1> ;al = Number of sectors to write/format
   756                              <1> ;rcx = Sector to begin transfer at
   757                              <1> ;dl = BIOS Drive to do transfer on
   758                              <1> ;rsi = Driver Packet (usually set to rbx)
   759                              <1> ;rdi = Write/Format packet
   760 00000AA7 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   761 00000AAB 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
   762 00000AAE 4889DE              <1>     mov rsi, rbx
   763 00000AB1 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   764 00000AB5 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   765 00000AB8 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   766                              <1>     return
    13                              <2> %%_ret:
    14 00000ABC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   767                              <1> 
   768                              <1> .getLogicalDev:   ;Function 23
   769                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
   770                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
   771 00000ABD 31C0                <1>     xor eax, eax
   772 00000ABF 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
   773 00000AC5 7428                <1>     jz .gldExit
   774 00000AC7 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
   775 00000ACB 488D2D6E020000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
   776                              <1> .gldLp:
   777 00000AD2 384508              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
   778 00000AD5 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
   779 00000ADA 75F6                <1>     jne .gldLp
   780 00000ADC 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
   781 00000AE2 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
   782 00000AE7 74E9                <1>     jz .gldLp 
   783 00000AE9 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
   784 00000AED FFC0                <1>     inc eax ;Make it 1 based
   785                              <1> .gldExit:
   786 00000AEF 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
   787                              <1>     return
    13                              <2> %%_ret:
    14 00000AF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> .setLogicalDev:   ;Function 24
   790 00000AF3 E830000000          <1>     call .checkDevType  ;Set the unit as the owner of this BIOS drive!
   791                              <1>     return
    13                              <2> %%_ret:
    14 00000AF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> 
   793                              <1> .setupDrive:
   794                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
   795                              <1> ; sets up internal vars according to it. 
   796                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
   797                              <1> ;Output: .pCurDrv setup for us. rbp = Same value
   798 00000AF9 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
   799                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AFD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AFF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   800 00000B00 488D2D39020000      <1>     lea rbp, .drvBlkTbl
   801                              <1> .sdChk:
   802 00000B07 384509              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
   803 00000B0A 7414                <1>     je .sdExit
   804 00000B0C 488B6D00            <1>     mov rbp, qword [rbp +  drvBlk.pLink]
   805 00000B10 4881FDFFFFFFFF      <1>     cmp rbp, -1
   806 00000B17 75EE                <1>     jne .sdChk  ;Keep looping until end of table
   807 00000B19 B007                <1>     mov al, drvBadMed
   808 00000B1B E97AFBFFFF          <1>     jmp .errorExit  ;Return through this exit
   809                              <1> .sdExit:
   810 00000B20 48892D11020000      <1>     mov qword [.pCurDrv], rbp
   811                              <1>     return
    13                              <2> %%_ret:
    14 00000B27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   812                              <1> 
   813                              <1> .checkDevType:
   814                              <1> ;Checks if we need to display the swap drive message and displays it if so.
   815                              <1> ;The device must already be setup in rbp (and var) for this to work.
   816                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
   817 00000B28 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   818                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B2E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B30 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   819 00000B31 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
   820                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B37 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B39 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   821                              <1> ;Else, now we find the current owner of this drive letter :)
   822 00000B3A 8A4508              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
   823                              <1> .cdtSetEp:
   824 00000B3D 488D3DFC010000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
   825                              <1> .cdtLp:
   826 00000B44 4881FFFFFFFFFF      <1>     cmp rdi, -1
   827 00000B4B 7454                <1>     je .cdtBadExit
   828 00000B4D 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
   829 00000B50 740D                <1>     je .cdtNextEntry
   830 00000B52 384708              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
   831 00000B55 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
   832                              <1>     ;Now we check if this is the current owner of the device?
   833 00000B57 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
   834 00000B5D 7505                <1>     jnz .cdtDevFnd
   835                              <1> .cdtNextEntry:
   836 00000B5F 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
   837 00000B62 EBE0                <1>     jmp short .cdtLp
   838                              <1> .cdtDevFnd:
   839                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
   840                              <1> ; device) gains ownership.
   841 00000B64 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
   842 00000B6A 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
   843                              <1> ;If a set map request, don't prompt the message!
   844 00000B70 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
   845                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B74 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B76 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   846                              <1> 
   847                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
   848 00000B77 8A4509              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   849 00000B7A 0441                <1>     add al, "A" ;Convert to a letter
   850 00000B7C 88056C010000        <1>     mov byte [.strikeMsgLetter], al
   851 00000B82 488D3552010000      <1>     lea rsi, .strikeMsg
   852 00000B89 B937000000          <1>     mov ecx, .strikeMsgL
   853                              <1> .cdtPrint:
   854 00000B8E AC                  <1>     lodsb   ;Get the char in al, inc rsi
   855 00000B8F CD29                <1>     int 29h ;Print char in al
   856 00000B91 FFC9                <1>     dec ecx
   857 00000B93 75F9                <1>     jnz .cdtPrint
   858                              <1> 
   859 00000B95 E821000000          <1>     call .cdtCleanKeyb  ;Clean the buffer!
   860 00000B9A E80E000000          <1>     call .cdtAwaitKeyb  ;Await until a char ready in a friendly way :)
   861                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
   862                              <1> 
   863 00000B9F F8                  <1>     clc ;Indicate goodness through CF
   864                              <1>     return
    13                              <2> %%_ret:
    14 00000BA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   865                              <1> .cdtBadExit:
   866 00000BA1 58                  <1>     pop rax
   867 00000BA2 B807000000          <1>     mov eax, drvBadMed
   868 00000BA7 F9                  <1>     stc ;Indicate badness through CF
   869 00000BA8 E9EDFAFFFF          <1>     jmp .errorExit
   870                              <1> 
   871                              <1> .cdtAwaitKeyb:
   872 00000BAD B800010000          <1>     mov eax, 0100h
   873 00000BB2 CD36                <1>     int 36h ;If return ZF=ZE, we have no char in the buffer. Loop until we do!
   874 00000BB4 74F7                <1>     jz .cdtAwaitKeyb
   875 00000BB6 31C0                <1>     xor eax, eax
   876 00000BB8 CD36                <1>     int 36h ;Now pull the char!
   877                              <1>     return
    13                              <2> %%_ret:
    14 00000BBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   878                              <1> .cdtCleanKeyb:
   879 00000BBB B800010000          <1>     mov eax, 0100h
   880 00000BC0 CD36                <1>     int 36h ;If return ZF=NZ we have a char in the buffer, pull it!
   881                              <1>     retz    ;Else ZF=ZE, no char, ready to await the keypress.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000BC2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000BC4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   882 00000BC5 31C0                <1>     xor eax, eax    ;Pull the char in the buffer from buffer
   883 00000BC7 CD36                <1>     int 36h
   884 00000BC9 EBF0                <1>     jmp short .cdtCleanKeyb
   885                              <1> 
   886                              <1> .ioSetVolLbl:
   887                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
   888                              <1> ;Input: rbx -> io request packet
   889                              <1> ;       rbp -> drvBlk to get volume ID from
   890                              <1> ;Output: Pointer placed in io request packet
   891 00000BCB 50                  <1>     push rax
   892 00000BCC 488D4574            <1>     lea rax, qword [rbp + drvBlk.volLab]    ;Get the volLbl from the BPB
   893 00000BD0 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
   894 00000BD4 58                  <1>     pop rax
   895 00000BD5 C3                  <1>     ret
   896                              <1> 
   897                              <1> .getTime:
   898                              <1> ;Gets the current time in a format ready to be used for disk access.
   899 00000BD6 31C0                <1>     xor eax, eax
   900 00000BD8 CD3A                <1>     int 3Ah
   901 00000BDA 0FB7D2              <1>     movzx edx, dx
   902 00000BDD C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
   903 00000BE0 09D1                <1>     or ecx, edx ;Store the current time count into ecx
   904 00000BE2 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
   905 00000BE4 740E                <1>     jz .stStore
   906 00000BE6 0FB6C0              <1>     movzx eax, al
   907 00000BE9 51                  <1>     push rcx    ;Save the current time count
   908 00000BEA B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
   909 00000BEF F7E1                <1>     mul ecx
   910 00000BF1 59                  <1>     pop rcx
   911 00000BF2 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
   912                              <1> .stStore:
   913 00000BF4 F8                  <1>     clc
   914                              <1>     return
    13                              <2> %%_ret:
    14 00000BF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   915                              <1> 
   916                              <1> .setTime:
   917                              <1> ;Sets the current time to the disk drive and resets the access counter
   918 00000BF6 E8DBFFFFFF          <1>     call .getTime
   919 00000BFB 894D70              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
   920 00000BFE C6053101000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
   921                              <1>     return
    13                              <2> %%_ret:
    14 00000C05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> .checkTime:
   924                              <1> ;Does the time/access count check :)
   925                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
   926 00000C06 E8CBFFFFFF          <1>     call .getTime   ;Returns in ecx the current time
   927 00000C0B 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
   928 00000C0D 7517                <1>     jnz .ctOk
   929 00000C0F FE0521010000        <1>     inc byte [.bAccCnt]
   930 00000C15 803D1A01000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
   931 00000C1C 7217                <1>     jb .ctNoChange
   932 00000C1E FE0D12010000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
   933 00000C24 EB0D                <1>     jmp short .ctMaybeCh
   934                              <1> .ctOk:
   935 00000C26 8B5570              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
   936                              <1> ;ecx = time of current check, adjusted for day rollovers 
   937 00000C29 29D1                <1>     sub ecx, edx    
   938 00000C2B 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
   939 00000C31 7602                <1>     jbe .ctNoChange
   940                              <1> .ctMaybeCh:
   941 00000C33 F9                  <1>     stc
   942                              <1>     return
    13                              <2> %%_ret:
    14 00000C34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   943                              <1> .ctNoChange:
   944 00000C35 F8                  <1>     clc
   945                              <1>     return
    13                              <2> %%_ret:
    14 00000C36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> 
   947                              <1> .callI33h:
   948                              <1> ;Wraps all i33 calls allowing me to preserve all that I need to preserve
   949                              <1> ; across these calls.
   950 00000C37 53                  <1>     push rbx
   951 00000C38 51                  <1>     push rcx
   952 00000C39 52                  <1>     push rdx
   953 00000C3A 56                  <1>     push rsi
   954 00000C3B 55                  <1>     push rbp
   955 00000C3C CD33                <1>     int 33h
   956 00000C3E 5D                  <1>     pop rbp
   957 00000C3F 5E                  <1>     pop rsi
   958 00000C40 5A                  <1>     pop rdx
   959 00000C41 59                  <1>     pop rcx
   960 00000C42 5B                  <1>     pop rbx
   961                              <1>     return
    13                              <2> %%_ret:
    14 00000C43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   962                              <1> 
   963                              <1> .i2fDriver:
   964                              <1> ;Back door into the block driver :)
   965 00000C44 80FC08              <1>     cmp ah, 08h
   966 00000C47 7510                <1>     jne .i2fNotUs
   967 00000C49 84C0                <1>     test al, al ;AL=00, Install check
   968 00000C4B 7412                <1>     jz .i2fCheck
   969 00000C4D 3C01                <1>     cmp al, 01  ;AL=01, Add block device
   970 00000C4F 7412                <1>     je .i2fAddTbl
   971 00000C51 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
   972 00000C53 745D                <1>     je .i2fExec
   973 00000C55 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
   974 00000C57 7479                <1>     je .i2fGivTbl
   975                              <1> .i2fNotUs:
   976 00000C59 FF256FF8FFFF        <1>     jmp qword [i2FNext]
   977                              <1> .i2fCheck:
   978 00000C5F B0FF                <1>     mov al, -1  ;Indicate installed!
   979 00000C61 48CF                <1>     iretq
   980                              <1> .i2fAddTbl:
   981                              <1> ;Adds a new entry to the drive chain and updates the multiownership bits
   982                              <1> ; as it does :)
   983                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
   984                              <1> ;Destroy rax, rbx and rsi
   985 00000C63 488D35D6000000      <1>     lea rsi, .drvBlkTbl
   986 00000C6A 0FB64708            <1>     movzx eax, byte [rdi + drvBlk.bBIOSNum]
   987                              <1> .i2fATLp:
   988 00000C6E 384608              <1>     cmp byte [rsi + drvBlk.bBIOSNum], al
   989 00000C71 7526                <1>     jne .i2fATNext
   990                              <1> ;Set that the two disks are multi owned. New cannot own the drive
   991                              <1> ; and make sure that the new drive has the accurate changeline bit set
   992 00000C73 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti       ;Both drives now multi!
   993 00000C79 66814F371000        <1>     or word [rdi + drvBlk.wDevFlgs], devMulti
   994 00000C7F 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv    ;New cant own drv
   995                              <1> ;Changeline check.
   996 00000C85 66816737FDFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devChgLine   ;Assume no changeline
   997 00000C8B 66F746370200        <1>     test word [rsi + drvBlk.wDevFlgs], devChgLine   ;Do we really have cline?
   998 00000C91 7406                <1>     jz .i2fATNext   ;Skip adding the bit if not
   999 00000C93 66814F370200        <1>     or word [rdi + drvBlk.wDevFlgs], devChgLine     ;Add if we do 
  1000                              <1> .i2fATNext:
  1001 00000C99 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;Check if we @ end of table
  1002 00000CA0 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink] ;Walk if not
  1003 00000CA4 75C8                <1>     jne .i2fATLp    ;And go again if not
  1004 00000CA6 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi ;Else, link rdi onto the end
  1005 00000CA9 48C707FFFFFFFF      <1>     mov qword [rdi + drvBlk.pLink], -1  ;And terminate list @ rdi now :)
  1006 00000CB0 48CF                <1>     iretq
  1007                              <1> .i2fExec:
  1008                              <1> ;We make a small change in that we clean up the flags from the stack
  1009                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
  1010                              <1> ; as no useful information is ever passed in the flags from a driver
  1011                              <1> ; so by doing so, any ported applications which do an additional pop
  1012                              <1> ; from the stack to balance the stack will not be harmed by this.
  1013 00000CB2 50                  <1>     push rax
  1014 00000CB3 B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
  1015 00000CB8 CD2A                <1>     int 2Ah
  1016                              <1> 
  1017 00000CBA 53                  <1>     push rbx
  1018 00000CBB 48891D(98010000)    <1>     mov qword [reqPktPtr], rbx  ;Save the ptr in var since we own it now :)
  1019 00000CC2 E885F8FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
  1020 00000CC7 5B                  <1>     pop rbx
  1021                              <1> 
  1022 00000CC8 B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
  1023 00000CCD CD2A                <1>     int 2Ah
  1024 00000CCF 58                  <1>     pop rax
  1025 00000CD0 48CF                <1>     iretq
  1026                              <1> .i2fGivTbl:
  1027                              <1> ;Output: rdi -> drvBlkTbl
  1028 00000CD2 488D3D67000000      <1>     lea rdi, .drvBlkTbl
  1029 00000CD9 48CF                <1>     iretq
  1030                              <1> 
  1031 00000CDB 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert for drive "
  1031 00000CE4 666F72206472697665- <1>
  1031 00000CED 20                  <1>
  1032 00000CEE 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
  1032 00000CF7 72696B650D0A616E79- <1>
  1032 00000D00 206B6579207768656E- <1>
  1032 00000D09 2072656164790D0A0A  <1>
  1033                              <1> .strikeMsgL equ $ - .strikeMsg
  1034                              <1> 
  1035 00000D12 464154313220202000  <1> .fat12Str   db "FAT12   ",0
  1036 00000D1B 464154313620202000  <1> .fat16Str   db "FAT16   ",0
  1037 00000D24 464154333220202000  <1> .fat32Str   db "FAT32   ",0
  1038 00000D2D 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
  1039                              <1> 
  1040                              <1> maxAcc  equ 5       ;Maximum accesses
  1041 00000D36 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
  1042 00000D37 FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check.
  1043 00000D38 0000000000000000    <1> .pCurDrv    dq 0    ;Pointer to the drvBlk for the drv we are accessing
  1044                              <1> 
  1045                              <1> drvBlkTblL equ 26   ;Space for 26 drive letters!
  1046                              <1> .drvBlkTbl:
  1047 00000D40 000000000000000000- <1>     db drvBlkTblL*drvBlk_size dup (0)
  1047 00000D49 000000000000000000- <1>
  1047 00000D52 000000000000000000- <1>
  1047 00000D5B 000000000000000000- <1>
  1047 00000D64 000000000000000000- <1>
  1047 00000D6D 000000000000000000- <1>
  1047 00000D76 000000000000000000- <1>
  1047 00000D7F 000000000000000000- <1>
  1047 00000D88 000000000000000000- <1>
  1047 00000D91 000000000000000000- <1>
  1047 00000D9A 000000000000000000- <1>
  1047 00000DA3 000000000000000000- <1>
  1047 00000DAC 000000000000000000- <1>
  1047 00000DB5 000000000000000000- <1>
  1047 00000DBE 000000000000000000- <1>
  1047 00000DC7 000000000000000000- <1>
  1047 00000DD0 000000000000000000- <1>
  1047 00000DD9 000000000000000000- <1>
  1047 00000DE2 000000000000000000- <1>
  1047 00000DEB 000000000000000000- <1>
  1047 00000DF4 000000000000000000- <1>
  1047 00000DFD 000000000000000000- <1>
  1047 00000E06 000000000000000000- <1>
  1047 00000E0F 000000000000000000- <1>
  1047 00000E18 000000000000000000- <1>
  1047 00000E21 000000000000000000- <1>
  1047 00000E2A 000000000000000000- <1>
  1047 00000E33 000000000000000000- <1>
  1047 00000E3C 000000000000000000- <1>
  1047 00000E45 000000000000000000- <1>
  1047 00000E4E 000000000000000000- <1>
  1047 00000E57 000000000000000000- <1>
  1047 00000E60 000000000000000000- <1>
  1047 00000E69 000000000000000000- <1>
  1047 00000E72 000000000000000000- <1>
  1047 00000E7B 000000000000000000- <1>
  1047 00000E84 000000000000000000- <1>
  1047 00000E8D 000000000000000000- <1>
  1047 00000E96 000000000000000000- <1>
  1047 00000E9F 000000000000000000- <1>
  1047 00000EA8 000000000000000000- <1>
  1047 00000EB1 000000000000000000- <1>
  1047 00000EBA 000000000000000000- <1>
  1047 00000EC3 000000000000000000- <1>
  1047 00000ECC 000000000000000000- <1>
  1047 00000ED5 000000000000000000- <1>
  1047 00000EDE 000000000000000000- <1>
  1047 00000EE7 000000000000000000- <1>
  1047 00000EF0 000000000000000000- <1>
  1047 00000EF9 000000000000000000- <1>
  1047 00000F02 000000000000000000- <1>
  1047 00000F0B 000000000000000000- <1>
  1047 00000F14 000000000000000000- <1>
  1047 00000F1D 000000000000000000- <1>
  1047 00000F26 000000000000000000- <1>
  1047 00000F2F 000000000000000000- <1>
  1047 00000F38 000000000000000000- <1>
  1047 00000F41 000000000000000000- <1>
  1047 00000F4A 000000000000000000- <1>
  1047 00000F53 000000000000000000- <1>
  1047 00000F5C 000000000000000000- <1>
  1047 00000F65 000000000000000000- <1>
  1047 00000F6E 000000000000000000- <1>
  1047 00000F77 000000000000000000- <1>
  1047 00000F80 000000000000000000- <1>
  1047 00000F89 000000000000000000- <1>
  1047 00000F92 000000000000000000- <1>
  1047 00000F9B 000000000000000000- <1>
  1047 00000FA4 000000000000000000- <1>
  1047 00000FAD 000000000000000000- <1>
  1047 00000FB6 000000000000000000- <1>
  1047 00000FBF 000000000000000000- <1>
  1047 00000FC8 000000000000000000- <1>
  1047 00000FD1 000000000000000000- <1>
  1047 00000FDA 000000000000000000- <1>
  1047 00000FE3 000000000000000000- <1>
  1047 00000FEC 000000000000000000- <1>
  1047 00000FF5 000000000000000000- <1>
  1047 00000FFE 000000000000000000- <1>
  1047 00001007 000000000000000000- <1>
  1047 00001010 000000000000000000- <1>
  1047 00001019 000000000000000000- <1>
  1047 00001022 000000000000000000- <1>
  1047 0000102B 000000000000000000- <1>
  1047 00001034 000000000000000000- <1>
  1047 0000103D 000000000000000000- <1>
  1047 00001046 000000000000000000- <1>
  1047 0000104F 000000000000000000- <1>
  1047 00001058 000000000000000000- <1>
  1047 00001061 000000000000000000- <1>
  1047 0000106A 000000000000000000- <1>
  1047 00001073 000000000000000000- <1>
  1047 0000107C 000000000000000000- <1>
  1047 00001085 000000000000000000- <1>
  1047 0000108E 000000000000000000- <1>
  1047 00001097 000000000000000000- <1>
  1047 000010A0 000000000000000000- <1>
  1047 000010A9 000000000000000000- <1>
  1047 000010B2 000000000000000000- <1>
  1047 000010BB 000000000000000000- <1>
  1047 000010C4 000000000000000000- <1>
  1047 000010CD 000000000000000000- <1>
  1047 000010D6 000000000000000000- <1>
  1047 000010DF 000000000000000000- <1>
  1047 000010E8 000000000000000000- <1>
  1047 000010F1 000000000000000000- <1>
  1047 000010FA 000000000000000000- <1>
  1047 00001103 000000000000000000- <1>
  1047 0000110C 000000000000000000- <1>
  1047 00001115 000000000000000000- <1>
  1047 0000111E 000000000000000000- <1>
  1047 00001127 000000000000000000- <1>
  1047 00001130 000000000000000000- <1>
  1047 00001139 000000000000000000- <1>
  1047 00001142 000000000000000000- <1>
  1047 0000114B 000000000000000000- <1>
  1047 00001154 000000000000000000- <1>
  1047 0000115D 000000000000000000- <1>
  1047 00001166 000000000000000000- <1>
  1047 0000116F 000000000000000000- <1>
  1047 00001178 000000000000000000- <1>
  1047 00001181 000000000000000000- <1>
  1047 0000118A 000000000000000000- <1>
  1047 00001193 000000000000000000- <1>
  1047 0000119C 000000000000000000- <1>
  1047 000011A5 000000000000000000- <1>
  1047 000011AE 000000000000000000- <1>
  1047 000011B7 000000000000000000- <1>
  1047 000011C0 000000000000000000- <1>
  1047 000011C9 000000000000000000- <1>
  1047 000011D2 000000000000000000- <1>
  1047 000011DB 000000000000000000- <1>
  1047 000011E4 000000000000000000- <1>
  1047 000011ED 000000000000000000- <1>
  1047 000011F6 000000000000000000- <1>
  1047 000011FF 000000000000000000- <1>
  1047 00001208 000000000000000000- <1>
  1047 00001211 000000000000000000- <1>
  1047 0000121A 000000000000000000- <1>
  1047 00001223 000000000000000000- <1>
  1047 0000122C 000000000000000000- <1>
  1047 00001235 000000000000000000- <1>
  1047 0000123E 000000000000000000- <1>
  1047 00001247 000000000000000000- <1>
  1047 00001250 000000000000000000- <1>
  1047 00001259 000000000000000000- <1>
  1047 00001262 000000000000000000- <1>
  1047 0000126B 000000000000000000- <1>
  1047 00001274 000000000000000000- <1>
  1047 0000127D 000000000000000000- <1>
  1047 00001286 000000000000000000- <1>
  1047 0000128F 000000000000000000- <1>
  1047 00001298 000000000000000000- <1>
  1047 000012A1 000000000000000000- <1>
  1047 000012AA 000000000000000000- <1>
  1047 000012B3 000000000000000000- <1>
  1047 000012BC 000000000000000000- <1>
  1047 000012C5 000000000000000000- <1>
  1047 000012CE 000000000000000000- <1>
  1047 000012D7 000000000000000000- <1>
  1047 000012E0 000000000000000000- <1>
  1047 000012E9 000000000000000000- <1>
  1047 000012F2 000000000000000000- <1>
  1047 000012FB 000000000000000000- <1>
  1047 00001304 000000000000000000- <1>
  1047 0000130D 000000000000000000- <1>
  1047 00001316 000000000000000000- <1>
  1047 0000131F 000000000000000000- <1>
  1047 00001328 000000000000000000- <1>
  1047 00001331 000000000000000000- <1>
  1047 0000133A 000000000000000000- <1>
  1047 00001343 000000000000000000- <1>
  1047 0000134C 000000000000000000- <1>
  1047 00001355 000000000000000000- <1>
  1047 0000135E 000000000000000000- <1>
  1047 00001367 000000000000000000- <1>
  1047 00001370 000000000000000000- <1>
  1047 00001379 000000000000000000- <1>
  1047 00001382 000000000000000000- <1>
  1047 0000138B 000000000000000000- <1>
  1047 00001394 000000000000000000- <1>
  1047 0000139D 000000000000000000- <1>
  1047 000013A6 000000000000000000- <1>
  1047 000013AF 000000000000000000- <1>
  1047 000013B8 000000000000000000- <1>
  1047 000013C1 000000000000000000- <1>
  1047 000013CA 000000000000000000- <1>
  1047 000013D3 000000000000000000- <1>
  1047 000013DC 000000000000000000- <1>
  1047 000013E5 000000000000000000- <1>
  1047 000013EE 000000000000000000- <1>
  1047 000013F7 000000000000000000- <1>
  1047 00001400 000000000000000000- <1>
  1047 00001409 000000000000000000- <1>
  1047 00001412 000000000000000000- <1>
  1047 0000141B 000000000000000000- <1>
  1047 00001424 000000000000000000- <1>
  1047 0000142D 000000000000000000- <1>
  1047 00001436 000000000000000000- <1>
  1047 0000143F 000000000000000000- <1>
  1047 00001448 000000000000000000- <1>
  1047 00001451 000000000000000000- <1>
  1047 0000145A 000000000000000000- <1>
  1047 00001463 000000000000000000- <1>
  1047 0000146C 000000000000000000- <1>
  1047 00001475 000000000000000000- <1>
  1047 0000147E 000000000000000000- <1>
  1047 00001487 000000000000000000- <1>
  1047 00001490 000000000000000000- <1>
  1047 00001499 000000000000000000- <1>
  1047 000014A2 000000000000000000- <1>
  1047 000014AB 000000000000000000- <1>
  1047 000014B4 000000000000000000- <1>
  1047 000014BD 000000000000000000- <1>
  1047 000014C6 000000000000000000- <1>
  1047 000014CF 000000000000000000- <1>
  1047 000014D8 000000000000000000- <1>
  1047 000014E1 000000000000000000- <1>
  1047 000014EA 000000000000000000- <1>
  1047 000014F3 000000000000000000- <1>
  1047 000014FC 000000000000000000- <1>
  1047 00001505 000000000000000000- <1>
  1047 0000150E 000000000000000000- <1>
  1047 00001517 000000000000000000- <1>
  1047 00001520 000000000000000000- <1>
  1047 00001529 000000000000000000- <1>
  1047 00001532 000000000000000000- <1>
  1047 0000153B 000000000000000000- <1>
  1047 00001544 000000000000000000- <1>
  1047 0000154D 000000000000000000- <1>
  1047 00001556 000000000000000000- <1>
  1047 0000155F 000000000000000000- <1>
  1047 00001568 000000000000000000- <1>
  1047 00001571 000000000000000000- <1>
  1047 0000157A 000000000000000000- <1>
  1047 00001583 000000000000000000- <1>
  1047 0000158C 000000000000000000- <1>
  1047 00001595 000000000000000000- <1>
  1047 0000159E 000000000000000000- <1>
  1047 000015A7 000000000000000000- <1>
  1047 000015B0 000000000000000000- <1>
  1047 000015B9 000000000000000000- <1>
  1047 000015C2 000000000000000000- <1>
  1047 000015CB 000000000000000000- <1>
  1047 000015D4 000000000000000000- <1>
  1047 000015DD 000000000000000000- <1>
  1047 000015E6 000000000000000000- <1>
  1047 000015EF 000000000000000000- <1>
  1047 000015F8 000000000000000000- <1>
  1047 00001601 000000000000000000- <1>
  1047 0000160A 000000000000000000- <1>
  1047 00001613 000000000000000000- <1>
  1047 0000161C 000000000000000000- <1>
  1047 00001625 000000000000000000- <1>
  1047 0000162E 000000000000000000- <1>
  1047 00001637 000000000000000000- <1>
  1047 00001640 000000000000000000- <1>
  1047 00001649 000000000000000000- <1>
  1047 00001652 000000000000000000- <1>
  1047 0000165B 000000000000000000- <1>
  1047 00001664 000000000000000000- <1>
  1047 0000166D 000000000000000000- <1>
  1047 00001676 000000000000000000- <1>
  1047 0000167F 000000000000000000- <1>
  1047 00001688 000000000000000000- <1>
  1047 00001691 000000000000000000- <1>
  1047 0000169A 000000000000000000- <1>
  1047 000016A3 000000000000000000- <1>
  1047 000016AC 000000000000000000- <1>
  1047 000016B5 000000000000000000- <1>
  1047 000016BE 000000000000000000- <1>
  1047 000016C7 000000000000000000- <1>
  1047 000016D0 000000000000000000- <1>
  1047 000016D9 000000000000000000- <1>
  1047 000016E2 000000000000000000- <1>
  1047 000016EB 000000000000000000- <1>
  1047 000016F4 000000000000000000- <1>
  1047 000016FD 000000000000000000- <1>
  1047 00001706 000000000000000000- <1>
  1047 0000170F 000000000000000000- <1>
  1047 00001718 000000000000000000- <1>
  1047 00001721 000000000000000000- <1>
  1047 0000172A 000000000000000000- <1>
  1047 00001733 000000000000000000- <1>
  1047 0000173C 000000000000000000- <1>
  1047 00001745 000000000000000000- <1>
  1047 0000174E 000000000000000000- <1>
  1047 00001757 000000000000000000- <1>
  1047 00001760 000000000000000000- <1>
  1047 00001769 000000000000000000- <1>
  1047 00001772 000000000000000000- <1>
  1047 0000177B 000000000000000000- <1>
  1047 00001784 000000000000000000- <1>
  1047 0000178D 000000000000000000- <1>
  1047 00001796 000000000000000000- <1>
  1047 0000179F 000000000000000000- <1>
  1047 000017A8 000000000000000000- <1>
  1047 000017B1 000000000000000000- <1>
  1047 000017BA 000000000000000000- <1>
  1047 000017C3 000000000000000000- <1>
  1047 000017CC 000000000000000000- <1>
  1047 000017D5 000000000000000000- <1>
  1047 000017DE 000000000000000000- <1>
  1047 000017E7 000000000000000000- <1>
  1047 000017F0 000000000000000000- <1>
  1047 000017F9 000000000000000000- <1>
  1047 00001802 000000000000000000- <1>
  1047 0000180B 000000000000000000- <1>
  1047 00001814 000000000000000000- <1>
  1047 0000181D 000000000000000000- <1>
  1047 00001826 000000000000000000- <1>
  1047 0000182F 000000000000000000- <1>
  1047 00001838 000000000000000000- <1>
  1047 00001841 000000000000000000- <1>
  1047 0000184A 000000000000000000- <1>
  1047 00001853 000000000000000000- <1>
  1047 0000185C 000000000000000000- <1>
  1047 00001865 000000000000000000- <1>
  1047 0000186E 000000000000000000- <1>
  1047 00001877 000000000000000000- <1>
  1047 00001880 000000000000000000- <1>
  1047 00001889 000000000000000000- <1>
  1047 00001892 000000000000000000- <1>
  1047 0000189B 000000000000000000- <1>
  1047 000018A4 000000000000000000- <1>
  1047 000018AD 000000000000000000- <1>
  1047 000018B6 000000000000000000- <1>
  1047 000018BF 000000000000000000- <1>
  1047 000018C8 000000000000000000- <1>
  1047 000018D1 000000000000000000- <1>
  1047 000018DA 000000000000000000- <1>
  1047 000018E3 000000000000000000- <1>
  1047 000018EC 000000000000000000- <1>
  1047 000018F5 000000000000000000- <1>
  1047 000018FE 000000000000000000- <1>
  1047 00001907 000000000000000000- <1>
  1047 00001910 000000000000000000- <1>
  1047 00001919 000000000000000000- <1>
  1047 00001922 000000000000000000- <1>
  1047 0000192B 000000000000000000- <1>
  1047 00001934 000000000000000000- <1>
  1047 0000193D 000000000000000000- <1>
  1047 00001946 000000000000000000- <1>
  1047 0000194F 000000000000000000- <1>
  1047 00001958 000000000000000000- <1>
  1047 00001961 000000000000000000- <1>
  1047 0000196A 000000000000000000- <1>
  1047 00001973 000000000000000000- <1>
  1047 0000197C 000000000000000000- <1>
  1047 00001985 000000000000000000- <1>
  1047 0000198E 000000000000000000- <1>
  1047 00001997 000000000000000000- <1>
  1047 000019A0 000000000000000000- <1>
  1047 000019A9 000000000000000000- <1>
  1047 000019B2 000000000000000000- <1>
  1047 000019BB 000000000000000000- <1>
  1047 000019C4 000000000000000000- <1>
  1047 000019CD 000000000000000000- <1>
  1047 000019D6 000000000000000000- <1>
  1047 000019DF 000000000000000000- <1>
  1047 000019E8 000000000000000000- <1>
  1047 000019F1 000000000000000000- <1>
  1047 000019FA 000000000000000000- <1>
  1047 00001A03 000000000000000000- <1>
  1047 00001A0C 000000000000000000- <1>
  1047 00001A15 000000000000000000- <1>
  1047 00001A1E 000000000000000000- <1>
  1047 00001A27 000000000000000000- <1>
  1047 00001A30 000000000000000000- <1>
  1047 00001A39 000000000000000000- <1>
  1047 00001A42 000000000000000000- <1>
  1047 00001A4B 000000000000000000- <1>
  1047 00001A54 000000000000000000- <1>
  1047 00001A5D 000000000000000000- <1>
  1047 00001A66 000000000000000000- <1>
  1047 00001A6F 000000000000000000- <1>
  1047 00001A78 000000000000000000- <1>
  1047 00001A81 000000000000000000- <1>
  1047 00001A8A 000000000000000000- <1>
  1047 00001A93 000000000000000000- <1>
  1047 00001A9C 000000000000000000- <1>
  1047 00001AA5 000000000000000000- <1>
  1047 00001AAE 000000000000000000- <1>
  1047 00001AB7 000000000000000000- <1>
  1047 00001AC0 000000000000000000- <1>
  1047 00001AC9 000000000000000000- <1>
  1047 00001AD2 000000000000000000- <1>
  1047 00001ADB 000000000000000000- <1>
  1047 00001AE4 000000000000000000- <1>
  1047 00001AED 000000000000000000- <1>
  1047 00001AF6 000000000000000000- <1>
  1047 00001AFF 000000000000000000- <1>
  1047 00001B08 000000000000000000- <1>
  1047 00001B11 000000000000000000- <1>
  1047 00001B1A 000000000000000000- <1>
  1047 00001B23 000000000000000000- <1>
  1047 00001B2C 000000000000000000- <1>
  1047 00001B35 000000000000000000- <1>
  1047 00001B3E 000000000000000000- <1>
  1047 00001B47 000000000000000000- <1>
  1047 00001B50 000000000000000000- <1>
  1047 00001B59 000000000000000000- <1>
  1047 00001B62 000000000000000000- <1>
  1047 00001B6B 000000000000000000- <1>
  1047 00001B74 000000000000000000- <1>
  1047 00001B7D 000000000000000000- <1>
  1047 00001B86 000000000000000000- <1>
  1047 00001B8F 000000              <1>
  1048                              <1> ;    %rep drvBlkTblL
  1049                              <1> ;        defaultDrv
  1050                              <1> ;    %endrep
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00001B92 0F010D23000000      <1>     sidt [myIdt]
     8 00001B99 0FB6C0              <1>     movzx eax, al
     9 00001B9C 4892                <1>     xchg rdx, rax
    10 00001B9E 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00001BA2 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00001BA9 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00001BAC 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00001BB0 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00001BB4 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00001BB8 894208              <1>     mov dword [rdx + 8], eax
    17 00001BBB C3                  <1>     ret
    18                              <1> myIdt:
    19 00001BBC 0000                <1> .limit  dw 0
    20 00001BBE 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00001BC6 50                  <1>     push rax
    25 00001BC7 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00001BC8 51                  <1>     push rcx
    27 00001BC9 52                  <1>     push rdx
    28 00001BCA 488D15A1E5FFFF      <1>     lea rdx, qword [fastOutput]
    29 00001BD1 B829000000          <1>     mov eax, 29h
    30 00001BD6 E8B7FFFFFF          <1>     call installInterrupt
    31 00001BDB 488D1598E5FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00001BE2 B83B000000          <1>     mov eax, 3Bh
    33 00001BE7 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00001BEC B401                <1>     mov ah, 01      ;Get buffer status
    36 00001BEE CD36                <1>     int 36h
    37 00001BF0 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00001BF2 30E4                <1>     xor ah, ah
    39 00001BF4 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00001BF6 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00001BF8 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00001BFD CD30                <1>     int 30h
    44 00001BFF B402                <1>     mov ah, 02h
    45 00001C01 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00001C03 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00001C05 CD30                <1>     int 30h
    48 00001C07 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00001C09 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00001C0E CD30                <1>     int 30h
    51 00001C10 5A                  <1>     pop rdx
    52 00001C11 59                  <1>     pop rcx
    53 00001C12 5B                  <1>     pop rbx
    54 00001C13 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 00001C14 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 00001C1A 50                  <1>     push rax
    59 00001C1B 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 00001C22 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 00001C26 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 00001C27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 00001C28 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 00001C29 B402                <1>     mov ah, 02  ;Read RTC Time
    70 00001C2B CD3A                <1>     int 3Ah
    71 00001C2D 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 00001C2F 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 00001C32 E84D000000          <1>     call .bcd2Bin
    75 00001C37 88C5                <1>     mov ch, al
    76 00001C39 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 00001C3C E843000000          <1>     call .bcd2Bin
    78 00001C41 88C1                <1>     mov cl, al
    79 00001C43 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 00001C46 E839000000          <1>     call .bcd2Bin
    81 00001C4B 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 00001C4D 89C2                <1>     mov edx, eax
    83 00001C4F B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 00001C51 CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 00001C53 B404                <1>     mov ah, 04  ;Read RTC Date
    90 00001C55 CD3A                <1>     int 3Ah
    91 00001C57 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 00001C59 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 00001C5C E823000000          <1>     call .bcd2Bin
    95 00001C61 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 00001C64 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 00001C6A 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 00001C6D E812000000          <1>     call .bcd2Bin
    99 00001C72 88C6                <1>     mov dh, al  
   100 00001C74 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 00001C77 E808000000          <1>     call .bcd2Bin
   102 00001C7C 88C2                <1>     mov dl, al
   103 00001C7E B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 00001C80 CD21                <1>     int 21h
   105 00001C82 EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 00001C84 51                  <1>     push rcx
   109 00001C85 89C1                <1>     mov ecx, eax
   110 00001C87 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 00001C8C 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 00001C92 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 00001C95 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 00001C98 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 00001C9A FFC9                <1>     dec ecx
   117 00001C9C 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 00001C9E 59                  <1>     pop rcx
   120 00001C9F C3                  <1>     ret
   121                              <1> .clkEnd:
   122 00001CA0 5B                  <1>     pop rbx ;Get the pointer back
   123 00001CA1 E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;Start by setting up the interrupt vectors!
   136 00001CA6 B839350000          <1>     mov eax, 3539h  ;Get original Int 39h
   137 00001CAB CD21                <1>     int 21h
   138 00001CAD 48891D0AE8FFFF      <1>     mov qword [i39Org], rbx
   139 00001CB4 B839250000          <1>     mov eax, 2539h  ;Setup our handler
   140 00001CB9 488D151EE8FFFF      <1>     lea rdx, dosInt39h
   141 00001CC0 CD21                <1>     int 21h
   142                              <1> 
   143 00001CC2 B833350000          <1>     mov eax, 3533h  ;Get original Int 33h
   144 00001CC7 CD21                <1>     int 21h
   145 00001CC9 48891DF6E7FFFF      <1>     mov qword [i33Org], rbx
   146 00001CD0 48891DFFE7FFFF      <1>     mov qword [i33Next], rbx    ;This is also the low level handler
   147 00001CD7 B833250000          <1>     mov eax, 2533h  ;Setup our handler
   148 00001CDC 488D151DE8FFFF      <1>     lea rdx, dosInt33h
   149 00001CE3 CD21                <1>     int 21h
   150                              <1> 
   151 00001CE5 B82F350000          <1>     mov eax, 352Fh  ;Get previous Int 2Fh handler
   152 00001CEA CD21                <1>     int 21h
   153 00001CEC 48891DDBE7FFFF      <1>     mov qword [i2FNext], rbx
   154 00001CF3 B82F250000          <1>     mov eax, 252Fh
   155 00001CF8 488D1534E8FFFF      <1>     lea rdx, i2fhSwap33h
   156 00001CFF CD21                <1>     int 21h
   157                              <1> 
   158                              <1> 
   159                              <1> ;Then set up the link pointers to the load address of the 
   160                              <1> ; drive table.
   161 00001D01 B919000000          <1>     mov ecx, drvBlkTblL - 1
   162 00001D06 488D2D33F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   163 00001D0D 4889EE              <1>     mov rsi, rbp
   164                              <1> .dskTblLp:
   165 00001D10 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   166 00001D13 4881C68D000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   167 00001D1A 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   168 00001D1D FFC9                <1>     dec ecx                 ;Decrement the count
   169 00001D1F 75EF                <1>     jnz .dskTblLp
   170 00001D21 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   171                              <1> ;Now get number of Int 33h information packed in r8
   172 00001D28 CD31                <1>     int 31h
   173                              <1>     ;Returns:
   174                              <1>     ;r8[Byte 0] = Number of COM ports
   175                              <1>     ;r8[Byte 1] = Number of fixed disks
   176                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   177                              <1>     ;r8[Byte 3] = Number of Int 33h units
   178 00001D2A 4C8905(66000000)    <1>     mov qword [msdTempBuffer], r8   
   179 00001D31 0FB605(69000000)    <1>     movzx eax, byte [msdTempBuffer + 3]
   180 00001D38 0FB61D(67000000)    <1>     movzx ebx, byte [msdTempBuffer + 1]
   181 00001D3F 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   182 00001D41 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   183 00001D47 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   184 00001D4D C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   185                              <1> ;Start by doing fixed disks.
   186 00001D54 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   187 00001D56 7454                <1>     jz .doRem
   188 00001D58 C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   189 00001D5F C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   190                              <1> .hdLp:
   191                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   192                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   193 00001D66 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   194 00001D68 E832030000          <1>     call .ptnUpdateBpb
   195 00001D6D 720D                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   196                              <1> ;The odd case where there is a BPB on the hard disk :)
   197 00001D6F 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   198 00001D75 E8C7020000          <1>     call .advDiskPtrs
   199 00001D7A EB12                <1>     jmp short .fatDiskOk
   200                              <1> .mbrFnd:
   201 00001D7C 7517                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   202                              <1> ;Now we check if we have a valid MBR signature.
   203 00001D7E 66813D(64020000)55- <1>     cmp word [msdTempBuffer + mbr.mbrSig], 0AA55h
   203 00001D86 AA                  <1>
   204 00001D87 750C                <1>     jne .gotoNextDisk
   205 00001D89 E868010000          <1>     call .processMbr    ;This disk is done.
   206                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   207                              <1> .fatDiskOk:
   208                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   209 00001D8E E8A6020000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   210 00001D93 7417                <1>     je .doRem
   211                              <1> .gotoNextDisk:
   212 00001D95 FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   213 00001D9B 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   214 00001DA2 247F                <1>     and al, ~80h    ;Drop the upper bit
   215 00001DA4 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   216 00001DAA 75BA                <1>     jne .hdLp
   217                              <1> ;------------------------------------------------
   218                              <1> ;   Here we start doing removable devices
   219                              <1> ;------------------------------------------------
   220                              <1> .doRem:
   221 00001DAC 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   222 00001DB3 8805(01000000)      <1>     mov byte [fixPtn], al
   223 00001DB9 C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   224 00001DC0 C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   225 00001DC7 803D(02000000)00    <1>     cmp byte [remDrv], 0
   226 00001DCE 0F8413010000        <1>     je .noRems
   227                              <1> .remLp:
   228 00001DD4 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   229 00001DD6 E8C4020000          <1>     call .ptnUpdateBpb
   230 00001DDB 7222                <1>     jc .remNext     ;If the BPB was bad, next disk :)
   231                              <1> ;Now test if we have a changeline for this device.
   232 00001DDD 8A5508              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   233 00001DE0 31C9                <1>     xor ecx, ecx
   234 00001DE2 B800160000          <1>     mov eax, 1600h
   235 00001DE7 CD33                <1>     int 33h
   236 00001DE9 7214                <1>     jc .remNext
   237                              <1> ;Before we blindly test it, we check if the number of our removable
   238                              <1> ; device is past that of the EHCI devices. If it is, we don't trust
   239                              <1> ; that it has a change line. r8 preserves the value until here.
   240 00001DEB 4C89C0              <1>     mov rax, r8 ;Get the r8 word into rax
   241 00001DEE C1E810              <1>     shr eax, 16 ;Drop the first two bytes
   242 00001DF1 3A05(02000000)      <1>     cmp al, byte [remDrv]
   243 00001DF7 7306                <1>     jae .remNext
   244 00001DF9 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   245                              <1> .remNext:
   246 00001DFF 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   247 00001E05 E837020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   248 00001E0A 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   249 00001E11 7429                <1>     je .msdExit
   250 00001E13 FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   251 00001E19 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   252 00001E20 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   253 00001E26 7414                <1>     je .msdExit
   254 00001E28 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   255 00001E2A 72A8                <1>     jb .remLp                   ;If not, do normal processing.
   256                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   257                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   258                              <1> ; to go past the letters assigned to the fixed disk.
   259 00001E2C 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   260 00001E32 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   261 00001E34 8805(04000000)      <1>     mov byte [dosDrv], al
   262 00001E3A EB98                <1>     jmp short .remLp
   263                              <1> .msdExit:
   264 00001E3C 803D(02000000)01    <1>     cmp byte [remDrv], 1
   265 00001E43 7539                <1>     jne .skipSingle
   266                              <1> ;Here we do the A: >-< B: jank.
   267                              <1> ;We know rbp points to what should the block for B:. The block for A:
   268                              <1> ; is right behind it.
   269                              <1> .doSingle:
   270 00001E45 4889EE              <1>     mov rsi, rbp
   271 00001E48 4881EE8D000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   272 00001E4F 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   273                              <1> ;Now we transfer the BIOS number and set drive number to 1
   274 00001E55 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bBIOSNum]
   275 00001E59 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   276 00001E5C C6450901            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   277 00001E60 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   278 00001E64 4881C60A000000      <1>     add rsi, drvBlk.bpb
   279 00001E6B B983000000          <1>     mov ecx, (drvBlk_size - 10)  ;8 bytes Link ptr and 2 id bytes
   280 00001E70 F3A4                <1>     rep movsb
   281 00001E72 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   282 00001E78 FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   283                              <1> .skipSingle:
   284 00001E7E 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   285 00001E85 53                  <1>     push rbx    ;Save this count on the stack
   286 00001E86 FFCB                <1>     dec ebx     ;Turn into an offset into the table
   287 00001E88 B88D000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   288 00001E8D F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   289 00001E8F 488D35AAEEFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   290 00001E96 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   291 00001E9E 488D1D(00000000)    <1>     lea rbx, bpbArray
   292                              <1> .buildBPBArrayLp:
   293 00001EA5 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   294 00001EA9 0FB64609            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   295 00001EAD 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   296 00001EB1 4889F7              <1>     mov rdi, rsi                            ;Save this ptr before walking
   297 00001EB4 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Now walk the table
   298 00001EB7 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   299 00001EBE 75E5                <1>     jne .buildBPBArrayLp    ;No... keep going
   300 00001EC0 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   301                              <1> ;
   302                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   303                              <1> ;
   304 00001EC3 488B1D(98010000)    <1>     mov rbx, qword [reqPktPtr]  ;Get the request packet ptr back
   305                              <1> ;All previous drivers return the "worst case" eject pointer. Here we return
   306                              <1> ; the real eject pointer
   307 00001ECA 4881C78D000000      <1>     add rdi, drvBlk_size    ;Mov rdi past end of last drvBlk 2 first free byte
   308 00001ED1 48897B0E            <1>     mov qword [rbx + initReqPkt.endptr], rdi    ;save as real eject point
   309 00001ED5 58                  <1>     pop rax         ;Get back the number of detected volumes
   310 00001ED6 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   311 00001ED9 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   312 00001EDD 66C705D6E6FFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   313                              <1>     return
    13                              <2> %%_ret:
    14 00001EE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .noRems:
   315                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   316                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   317                              <1> ; we just did the first remdev. This drive gets registered as having
   318                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   319 00001EE7 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   320 00001EEB FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   321 00001EF1 E94FFFFFFF          <1>     jmp .doSingle
   322                              <1> 
   323                              <1> ;------------------------
   324                              <1> ; Procedures for init
   325                              <1> ;------------------------
   326                              <1> 
   327                              <1> .processMbr:
   328                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   329                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   330 00001EF6 E872010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   331                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   332                              <1> ; ptn. We process it, invalidate the entry then start again
   333 00001EFB 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   334 00001F02 7539                <1>     jne .pmbrNoHack
   335 00001F04 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   336 00001F0B B904000000          <1>     mov ecx, 4
   337                              <1> .pmbrHackLp:
   338 00001F10 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   339 00001F13 740D                <1>     je .pmbrHackFnd
   340                              <1> .pmbrHackRet:
   341 00001F15 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   342 00001F1C FFC9                <1>     dec ecx
   343 00001F1E 75F0                <1>     jnz .pmbrHackLp
   344 00001F20 EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   345                              <1> .pmbrHackFnd:
   346 00001F22 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   347 00001F26 E8FF010000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   348 00001F2B 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   349 00001F2D C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   350 00001F34 E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   351                              <1> ;Ignore any read errors, but we start again.
   352 00001F39 C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   353                              <1> ;Now we fall down and start again
   354                              <1> .pmbrNoHack:
   355 00001F3D C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   356 00001F44 488D35(06000000)    <1>     lea rsi, mbrE
   357                              <1> .pmbrLp:
   358 00001F4B 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   359 00001F4E E8E5010000          <1>     call .checkMbrPtnType
   360 00001F53 7548                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   361 00001F55 E8D0010000          <1>     call .checkDataPtn
   362 00001F5A 740A                <1>     je .pmbrDodata
   363 00001F5C E855000000          <1>     call .processEPtn   ;Here we process EBR
   364                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001F61 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001F63 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   365 00001F64 EB2F                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   366                              <1> .pmbrDodata:
   367 00001F66 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   368 00001F69 E831010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   369 00001F6E 7309                <1>     jnc .pmbrOk
   370                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001F70 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001F72 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   371                              <1> ;Else add the unformatted bit to the flags.
   372 00001F73 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   373                              <1> .pmbrOk:
   374 00001F79 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   375 00001F7F 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   376 00001F82 2580000000          <1>     and eax, ptnActive
   377 00001F87 0D01000000          <1>     or eax, ptnPrimary
   378 00001F8C 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   379 00001F90 E8AC000000          <1>     call .advDiskPtrs
   380                              <1> .pmbrXtrejoin:
   381 00001F95 E89F000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   382                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001F9A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001F9C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   383                              <1> .pmbrNext:
   384 00001F9D FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   385 00001FA3 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   386                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001FAA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001FAC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   387 00001FAD 4881C610000000      <1>     add rsi, mbrEntry_size
   388 00001FB4 EB95                <1>     jmp short .pmbrLp
   389                              <1> 
   390                              <1> .processEPtn:
   391                              <1> ;Process all logical process in an extended partition. rsi points to
   392                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   393                              <1> ;Thus we always know the "root" sector of this extended partition.
   394 00001FB6 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   395                              <1> .peplp:
   396 00001FB9 E8CB000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   397                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001FBE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001FC0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   398 00001FC1 66813D(64020000)55- <1>     cmp word [msdTempBuffer + ebr.mbrSig], 0AA55h
   398 00001FC9 AA                  <1>
   399 00001FCA 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   400 00001FCC F9                  <1>     stc
   401                              <1>     return
    13                              <2> %%_ret:
    14 00001FCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> .pep1:
   403 00001FCE E889000000          <1>     call .copyEbr       ;Save the EBR
   404                              <1> ;Now we check the saved EBR is valid.
   405 00001FD3 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   406 00001FDA E843010000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   407 00001FDF 7548                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   408 00001FE1 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   409 00001FE8 E83D010000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   410 00001FED 743A                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   411                              <1> ;Now we get the absolute start sector of this partition.
   412 00001FEF 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   413 00001FF5 E8A5000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB
   414 00001FFA 7309                <1>     jnc .pepOk
   415                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001FFC 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001FFE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   416                              <1> ;Else add the unformatted bit to the flags.
   417 00001FFF 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   418                              <1> .pepOk:
   419                              <1> ;If here, this partition will be given a CDS entry.
   420                              <1> ;Now we go to the next logical partition in the extended partition and
   421                              <1> ; move to the next drive
   422 00002005 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   423 0000200B 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   424 0000200E 2580000000          <1>     and eax, ptnActive
   425 00002013 0D01000000          <1>     or eax, ptnPrimary
   426 00002018 66894570            <1>     mov word [rbp + drvBlk.wPtnType], ax
   427 0000201C E820000000          <1>     call .advDiskPtrs
   428 00002021 E813000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   429                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002026 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002028 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   430                              <1> .pepNextEbr:
   431                              <1> ;Else we now walk the disk linked list.
   432 00002029 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   433 0000202F 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   434                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002031 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002033 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   435 00002034 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   436 00002037 EB80                <1>     jmp short .peplp
   437                              <1> 
   438                              <1> .physCheckEnd:
   439 00002039 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   440                              <1>     return
    13                              <2> %%_ret:
    14 00002040 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> .advDiskPtrs:
   443 00002041 E892000000          <1>     call .getNumCyl     ;Computes the number of cylinders in the BPB
   444 00002046 E8C1000000          <1>     call .xfrDfltBpb    ;Finish drvBlk init by transfering dfltBPB
   445 0000204B 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   446 0000204F FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   447 00002055 FE05(00000000)      <1>     inc byte [physVol]
   448                              <1>     return
    13                              <2> %%_ret:
    14 0000205B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> .copyEbr:
   451                              <1> ;Copies the EBR from the EBR sector in the buffer
   452 0000205C 51                  <1>     push rcx
   453 0000205D 56                  <1>     push rsi
   454 0000205E 57                  <1>     push rdi
   455 0000205F 488D3D(06000000)    <1>     lea rdi, mbrE
   456 00002066 B920000000          <1>     mov ecx, 2*mbrEntry_size
   457 0000206B EB0F                <1>     jmp short .cpmbr
   458                              <1> .copyMbr:
   459                              <1> ;Copies the MBR from the MBR sector in the buffer
   460 0000206D 51                  <1>     push rcx
   461 0000206E 56                  <1>     push rsi
   462 0000206F 57                  <1>     push rdi
   463 00002070 488D3D(06000000)    <1>     lea rdi, mbrE
   464 00002077 B940000000          <1>     mov ecx, 4*mbrEntry_size
   465                              <1> .cpmbr:
   466 0000207C 488D35(24020000)    <1>     lea rsi, qword [msdTempBuffer + mbr.mbrEntry1]
   467 00002083 F3A4                <1>     rep movsb
   468 00002085 5F                  <1>     pop rdi
   469 00002086 5E                  <1>     pop rsi
   470 00002087 59                  <1>     pop rcx
   471                              <1>     return
    13                              <2> %%_ret:
    14 00002088 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> .readSector:
   474                              <1> ;Input: ecx = Sector to read
   475 00002089 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   476 00002090 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   477 00002095 488D1D(66000000)    <1>     lea rbx, msdTempBuffer
   478 0000209C CD33                <1>     int 33h
   479                              <1>     return
    13                              <2> %%_ret:
    14 0000209E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   480                              <1> 
   481                              <1> .ptnUpdateBpb:
   482                              <1> ;Setups up the call for below on the current partition.
   483                              <1> ;Input: ecx = Number of hidden sectors
   484                              <1> ;Output:
   485                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   486                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   487                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   488 0000209F 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   489 000020A5 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   490 000020A8 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   491 000020AF 884509              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   492 000020B2 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   493 000020B9 884508              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   494 000020BC 488D1D(66000000)    <1>     lea rbx, msdTempBuffer  ;Use Temporary Buffer
   495 000020C3 56                  <1>     push rsi    ;Save the mbr entry ptr
   496 000020C4 E801E7FFFF          <1>     call msdDriver.updateBpb
   497 000020C9 7208                <1>     jc .pubBad
   498 000020CB E856E7FFFF          <1>     call msdDriver.moveVolIds
   499 000020D0 5E                  <1>     pop rsi
   500 000020D1 F8                  <1>     clc         ;Always clean even if no ids
   501                              <1>     return
    13                              <2> %%_ret:
    14 000020D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502                              <1> .pubBad:
   503 000020D3 5E                  <1>     pop rsi
   504 000020D4 3C07                <1>     cmp al, 07h ;Bad Partition?
   505 000020D6 F9                  <1>     stc         ;Ensure we set the CF again
   506                              <1>     return
    13                              <2> %%_ret:
    14 000020D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> 
   508                              <1> .getNumCyl:
   509                              <1> ;Computes the number of cylinders on the media. Not really to be used.
   510                              <1> ;Input: rbp -> drvBlk
   511 000020D8 50                  <1>     push rax
   512 000020D9 51                  <1>     push rcx
   513 000020DA 52                  <1>     push rdx
   514 000020DB 0FB74519            <1>     movzx eax, word [rbp + drvBlk.wNumHeads]
   515 000020DF 0FB74D17            <1>     movzx ecx, word [rbp + drvBlk.wSecPerTrk]
   516 000020E3 F7E1                <1>     mul ecx ;Get sectors per cylinder in eax. edx = 0
   517 000020E5 89C1                <1>     mov ecx, eax    ;Save this number in ecx
   518 000020E7 0FB74512            <1>     movzx eax, word [rbp + drvBlk.wTotSec16]
   519 000020EB 85C0                <1>     test eax, eax   ;If this is zero, get the 32 bit count of sectors
   520 000020ED 0F44451F            <1>     cmovz eax, dword [rbp + drvBlk.dTotSec32]
   521 000020F1 F7F1                <1>     div ecx     ;sectors/(sectors/cylinder) = whole cylinders in eax
   522 000020F3 85D2                <1>     test edx, edx
   523 000020F5 7402                <1>     jz .gncExit
   524 000020F7 FFC0                <1>     inc eax     ;Inc the cylinder count to account for not whole divide
   525                              <1> .gncExit:
   526 000020F9 BAFFFF0000          <1>     mov edx, 0FFFFh   ;A default Max cylinder value, since CHS is for floppies.
   527 000020FE 39D0                <1>     cmp eax, edx
   528 00002100 0F47C2              <1>     cmova eax, edx
   529 00002103 66894539            <1>     mov word [rbp + drvBlk.wNumCyl], ax
   530 00002107 F8                  <1>     clc ;Ensure CF is clear
   531 00002108 5A                  <1>     pop rdx
   532 00002109 59                  <1>     pop rcx
   533 0000210A 58                  <1>     pop rax
   534                              <1>     return
    13                              <2> %%_ret:
    14 0000210B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> .xfrDfltBpb:
   536                              <1> ;If a drive is removable, we check the BIOS reported values and 
   537                              <1> ; build a BPB around that. Else, we trust the bpb and blindly copy it.
   538                              <1> ;
   539                              <1> ; TEMP TEMP: FOR NOW WE JUST ALWAYS BLINDLY TRUST THE BPB.
   540                              <1> ;
   541 0000210C 51                  <1>     push rcx
   542 0000210D 56                  <1>     push rsi
   543 0000210E 57                  <1>     push rdi
   544 0000210F 488D750A            <1>     lea rsi, qword [rbp + drvBlk.bpb]
   545 00002113 488D7D3B            <1>     lea rdi, qword [rbp + drvBlk.sDfltBPB]
   546 00002117 B935000000          <1>     mov ecx, bpb32_size
   547                              <1> ;Copies garbage into the reserved 12 bytes at the end of the BPB32
   548                              <1> ; but thats ok since we dont use it and those fields are reserved.
   549 0000211C F3A4                <1>     rep movsb
   550 0000211E 5F                  <1>     pop rdi
   551 0000211F 5E                  <1>     pop rsi
   552 00002120 59                  <1>     pop rcx
   553                              <1>     return
    13                              <2> %%_ret:
    14 00002121 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   554                              <1> 
   555                              <1> .checkEbrPtnType:
   556                              <1> ;Input: al = Partition type
   557                              <1> ;Output: ZF=ZE => Valid partition type found
   558                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   559 00002122 E811000000          <1>     call .checkMbrPtnType
   560                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002127 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002129 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   561                              <1> .checkDataPtn:
   562 0000212A 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   563 0000212C 7407                <1>     je .ceptBad
   564 0000212E 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   565 00002130 7403                <1>     je .ceptBad
   566 00002132 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   567                              <1>     return
    13                              <2> %%_ret:
    14 00002134 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> .ceptBad:
   569 00002135 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   570                              <1>     return
    13                              <2> %%_ret:
    14 00002137 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> 
   572                              <1> .checkMbrPtnType:
   573                              <1> ;Input: al = Partition type
   574                              <1> ;Output: ZF=ZE => Valid partition type found
   575                              <1> ;        ZF=NZ => Not a valid partition type
   576 00002138 51                  <1>     push rcx
   577 00002139 57                  <1>     push rdi
   578 0000213A 488D3D0A000000      <1>     lea rdi, .ptnTbl
   579 00002141 B909000000          <1>     mov ecx, .ptnTblL
   580 00002146 F2AE                <1>     repne scasb ;Find the entry in al
   581 00002148 5F                  <1>     pop rdi
   582 00002149 59                  <1>     pop rcx
   583                              <1>     return
    13                              <2> %%_ret:
    14 0000214A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> 
   585                              <1> ;Table contents:
   586                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   587                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   588                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   589                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   590                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   591                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   592                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   593                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   594 0000214B 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   595                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [4C05000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqPktPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> bpbArray:   ;Recycle this space for the BPBptr array.
     5 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     6                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     7 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     8 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     9 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
    10 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    11 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    12 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    13 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    14 00000066 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?)
    38 00001066 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+3+2 passes

