     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date, not 100% supported (consider later)
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> fsInfoSig1  equ 041615252h
   173                              <1> fsInfoSig2  equ 061417272h
   174                              <1> fsInfoSig3  equ 0AA550000h
   175                              <1> 
   176                              <1> %macro defaultBPB 0
   177                              <1>     db 0E9h
   178                              <1>     db 00h
   179                              <1>     db 90h
   180                              <1>     db 'SCPDOSv1'
   181                              <1>     dw 0200h                       
   182                              <1>     db 01h                         
   183                              <1>     dw 0001h                           
   184                              <1>     db 02h                              
   185                              <1>     dw 00E0h            
   186                              <1>     dw 0B40h   
   187                              <1>     db 0F0h                   
   188                              <1>     dw 0009h                   
   189                              <1>     dw 0012h                     
   190                              <1>     dw 0002h                  
   191                              <1>     dd 0                 
   192                              <1>     dd 0 
   193                              <1>     db 00h
   194                              <1>     db 00h
   195                              <1>     db 29h
   196                              <1>     dd 0
   197                              <1>     db 'NO NAME    '
   198                              <1>     db 'FAT12   '
   199                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   200                              <1> %endmacro
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqHdrPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F8499000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84C2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84E4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84DC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F84FD000000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E86A0C0000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 741C                <1>     je .cre2
    60 00000093 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64                              <1> .cre11:
    65 000000A0 AA                  <1>     stosb
    66 000000A1 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 000000A3 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 000000A5 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 000000AB FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 000000AD EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 000000AF 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 000000B2 59                  <1>     pop rcx
    75 000000B3 5F                  <1>     pop rdi
    76 000000B4 EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 000000B6 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 000000BC C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 000000C3 EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 000000C5 B005                <1>     mov al, 05h ;Bad request structure length?
    84 000000C7 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 000000CA 758A                <1>     jne .conWriteErrorCode
    86 000000CC 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 000000D3 7519                <1>     jnz .cnr2
    88 000000D5 B401                <1>     mov ah, 01h     ;Get key if exists
    89 000000D7 CD36                <1>     int 36h
    90 000000D9 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 000000DB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 000000DE E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 000000E3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 000000E9 E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 000000EE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 000000F4 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 000000F6 B005                <1>     mov al, 05h ;Bad request structure length?
   104 000000F8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 000000FB 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 00000101 E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 00000118 B401                <1>     mov ah, 01      ;Get buffer status
   115 0000011A CD36                <1>     int 36h
   116 0000011C 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 00000122 30E4                <1>     xor ah, ah
   118 00000124 CD36                <1>     int 36h ;Read key to flush from buffer
   119 00000126 EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 00000128 B005                <1>     mov al, 05h ;Bad request structure length?
   123 0000012A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 0000012D 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 00000133 56                  <1>     push rsi
   127 00000134 51                  <1>     push rcx
   128 00000135 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 00000139 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 0000013B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 0000013E 7407                <1>     je .cw2
   133 00000140 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 00000141 CD29                <1>     int 29h ;Fast print char
   135 00000143 FFC1                <1>     inc ecx
   136 00000145 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 00000147 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 0000014A 59                  <1>     pop rcx
   140 0000014B 5E                  <1>     pop rsi
   141 0000014C E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 00000151 B005                <1>     mov al, 05h ;Bad request structure length?
   144 00000153 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 00000156 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 0000015C E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 00000161 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 29h
   150                              <1> ;Called with char to transfer in al
   151 00000162 50                  <1>     push rax
   152 00000163 B40E                <1>     mov ah, 0Eh
   153 00000165 CD30                <1>     int 30h
   154 00000167 58                  <1>     pop rax
   155 00000168 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 0000016A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 00000171 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 00000173 50                  <1>     push rax
   163 00000174 53                  <1>     push rbx
   164 00000175 51                  <1>     push rcx
   165 00000176 52                  <1>     push rdx
   166 00000177 56                  <1>     push rsi
   167 00000178 55                  <1>     push rbp
   168 00000179 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   169 00000180 B003                <1>     mov al, 03h ;Unknown Command
   170 00000182 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 00000186 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 00000188 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 0000018B 84C0                <1>     test al, al
   175 0000018D 743B                <1>     jz .clkInit
   176 0000018F 3C04                <1>     cmp al, 04h
   177 00000191 7451                <1>     jz .clkRead
   178 00000193 3C06                <1>     cmp al, 06h
   179 00000195 0F84AE000000        <1>     jz .clkInputStatus
   180 0000019B 3C07                <1>     cmp al, 07h
   181 0000019D 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 000001A3 3C08                <1>     cmp al, 08h
   183 000001A5 0F84BE000000        <1>     jz .clkWrite
   184 000001AB 3C09                <1>     cmp al, 09h
   185 000001AD 0F84B6000000        <1>     jz .clkWrite
   186 000001B3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 000001B5 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 000001B7 B480                <1>     mov ah, 80h ;Set error bit
   191 000001B9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 000001BD 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 000001C3 5D                  <1>     pop rbp
   195 000001C4 5E                  <1>     pop rsi
   196 000001C5 5A                  <1>     pop rdx
   197 000001C6 59                  <1>     pop rcx
   198 000001C7 5B                  <1>     pop rbx
   199 000001C8 58                  <1>     pop rax
   200 000001C9 C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 000001CA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 000001CC F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 000001D3 75E8                <1>     jnz short .clkExit
   205 000001D5 E8660B0000          <1>     call clockInit
   206 000001DA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 000001E1 EBDA                <1>     jmp short .clkExit
   208 000001E3 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 000001E4 B005                <1>     mov al, 05h ;Bad request structure length?
   212 000001E6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 000001E9 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 000001EB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 000001EE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 000001F2 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 000001F9 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 000001FD 30E4                <1>     xor ah, ah
   220 000001FF CD3A                <1>     int 3Ah         ;Read the system timer
   221 00000201 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 00000203 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00000205 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 00000207 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 0000020B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 00000212 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00000215 0FB7D2              <1>     movzx edx, dx
   230 00000218 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 0000021A 89D0                <1>     mov eax, edx
   232 0000021C 31D2                <1>     xor edx, edx
   233 0000021E 89D8                <1>     mov eax, ebx
   234 00000220 B944040000          <1>     mov ecx, 1092   
   235 00000225 F7F1                <1>     div ecx
   236 00000227 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 0000022A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 0000022C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 00000230 31D2                <1>     xor edx, edx
   240 00000232 B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 00000237 F7F1                <1>     div ecx
   242 00000239 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 0000023C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 0000023E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 00000241 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 00000244 E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 00000249 B005                <1>     mov al, 05h ;Bad request structure length?
   253 0000024B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 0000024E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 00000254 E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 0000025E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 0000026E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 00000274 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 00000277 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 0000027B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 0000027F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 00000286 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 00000288 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 0000028C B105                <1>     mov cl, 5
   276 0000028E F6F1                <1>     div cl          ;Divide al by 5
   277 00000290 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 00000292 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 00000294 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 00000297 B912000000          <1>     mov ecx, 18
   283 0000029C F7E1                <1>     mul ecx  
   284 0000029E 01C3                <1>     add ebx, eax
   285                              <1> 
   286 000002A0 31D2                <1>     xor edx, edx
   287 000002A2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 000002A6 B944040000          <1>     mov ecx, 1092
   289 000002AB F7E1                <1>     mul ecx
   290 000002AD 01C3                <1>     add ebx, eax
   291 000002AF 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 000002B1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 000002B5 B401                <1>     mov ah, 01h     ;Set the system time
   294 000002B7 CD3A                <1>     int 3Ah
   295                              <1> 
   296 000002B9 4889F3              <1>     mov rbx, rsi
   297 000002BC E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 000002C1 51                  <1>     push rcx
   303 000002C2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 000002C5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 000002C7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 000002CC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 000002D2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 000002D5 050A000000          <1>     add eax, 10
   310 000002DA E2F9                <1>     loop .cbth0
   311 000002DC 59                  <1>     pop rcx
   312 000002DD C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 000002DE 51                  <1>     push rcx
   318 000002DF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 000002E2 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 000002E4 3D0A000000          <1>     cmp eax, 10
   322 000002E9 7209                <1>     jb .chtb1
   323 000002EB 2D0A000000          <1>     sub eax, 10
   324 000002F0 FFC1                <1>     inc ecx
   325 000002F2 EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 000002F4 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 000002F7 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 000002F9 59                  <1>     pop rcx
   330 000002FA C3                  <1>     ret
   331 000002FB 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 000002FD C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 00000304 EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 00000306 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 0000030D EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 0000030F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 00000316 EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 00000318 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 0000031F 50                  <1>     push rax
   347 00000320 53                  <1>     push rbx
   348 00000321 51                  <1>     push rcx
   349 00000322 52                  <1>     push rdx
   350 00000323 56                  <1>     push rsi
   351 00000324 57                  <1>     push rdi
   352 00000325 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   353 0000032C B003                <1>     mov al, 03h ;Unknown Command
   354 0000032E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 00000332 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 00000334 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 00000337 84C0                <1>     test al, al
   359 00000339 745B                <1>     jz short .comExit
   360 0000033B 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 0000033D 7464                <1>     jz .comRead
   362 0000033F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 00000341 0F849D000000        <1>     jz .comNondestructiveRead   
   364 00000347 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 00000349 0F8486000000        <1>     jz .comReadInputStatus
   366 0000034F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 00000351 0F849C000000        <1>     jz .comFlushInputBuffers
   368 00000357 3C08                <1>     cmp al, 8
   369 00000359 0F84BA000000        <1>     jz .comWrite
   370 0000035F 3C09                <1>     cmp al, 9
   371 00000361 0F84B2000000        <1>     jz .comWrite
   372 00000367 3C0A                <1>     cmp al, 0Ah
   373 00000369 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 0000036F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 00000371 B002                <1>     mov al, 02h ;Unknown device
   377 00000373 EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 00000375 BA0B000000          <1>     mov edx, 0Bh
   380 0000037A EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 0000037C BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 00000381 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 00000384 B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 00000389 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 0000038B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 0000038E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 00000390 B480                <1>     mov ah, 80h ;Set error bit
   391 00000392 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 00000396 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 0000039C 5F                  <1>     pop rdi
   395 0000039D 5E                  <1>     pop rsi
   396 0000039E 5A                  <1>     pop rdx
   397 0000039F 59                  <1>     pop rcx
   398 000003A0 5B                  <1>     pop rbx
   399 000003A1 58                  <1>     pop rax
   400 000003A2 C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 000003A3 B005                <1>     mov al, 05h ;Bad request structure length?
   404 000003A5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 000003A8 75E6                <1>     jne .comWriteErrorCode
   406 000003AA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 000003AE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 000003B0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 000003B3 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 000003B5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 000003BA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 000003C1 F8                  <1>     clc
   415 000003C2 CD34                <1>     int 34h ;Recieve Char
   416 000003C4 72BB                <1>     jc .comError
   417 000003C6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 000003C9 74EA                <1>     je .cr11
   419 000003CB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 000003CC FFC1                <1>     inc ecx
   421 000003CE EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 000003D0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 000003D3 EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 000003D5 B005                <1>     mov al, 05h ;Bad request structure length?
   428 000003D7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 000003DA 75B4                <1>     jne .comWriteErrorCode
   430 000003DC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 000003E2 EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 000003E4 B005                <1>     mov al, 05h ;Bad request structure length?
   436 000003E6 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 000003E9 75A5                <1>     jne .comWriteErrorCode
   438 000003EB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 000003F1 EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 000003F3 B005                <1>     mov al, 05h ;Bad request structure length?
   443 000003F5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 000003F8 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 000003FA 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 00000401 B800020000          <1>     mov eax, 0200h    ;Recieve
   448 00000406 F8                  <1>     clc
   449 00000407 CD34                <1>     int 34h
   450 00000409 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 0000040F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 00000412 75E6                <1>     jne .cfib0
   453 00000414 E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 00000419 B005                <1>     mov al, 05h ;Bad request structure length?
   457 0000041B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 0000041E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 00000424 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 00000428 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 0000042A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 0000042D 7417                <1>     je .cw2
   465 0000042F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 00000430 B401                <1>     mov ah, 01h ;Move function number into ah
   467 00000432 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 00000439 F8                  <1>     clc
   469 0000043A CD34                <1>     int 34h ;Transmit char
   470 0000043C 0F823FFFFFFF        <1>     jc .comError
   471 00000442 FFC1                <1>     inc ecx
   472 00000444 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 00000446 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 00000449 E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 0000044E B005                <1>     mov al, 05h ;Bad request structure length?
   480 00000450 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 00000453 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 00000459 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 00000460 B403                <1>     mov ah, 03h     ;Get status
   485 00000462 F8                  <1>     clc
   486 00000463 CD34                <1>     int 34h
   487 00000465 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 0000046B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 00000470 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 00000473 F7D0                <1>     not eax      ;Bitwise inversion
   491 00000475 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 0000047A 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 0000047F E912FFFFFF          <1>     jmp .comExit
   494 00000484 00                  <1> .comDevice   db 0
   495                              <1> 
   496                              <1> ;Prn Drivers
   497                              <1> prnDriver:
   498 00000485 50                  <1>     push rax
   499 00000486 53                  <1>     push rbx
   500 00000487 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   501 0000048E B003                <1>     mov al, 03h ;Unknown Command
   502 00000490 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   503 00000494 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   504 00000496 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   505 00000499 84C0                <1>     test al, al ;If the command code was Init, return ok!
   506 0000049B 7408                <1>     jz .prnExit 
   507                              <1>     ;Everything else, device not ready
   508 0000049D B002                <1>     mov al, drvNotReady
   509                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   510 0000049F B480                <1>     mov ah, 80h ;Set error bit
   511 000004A1 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   512                              <1> .prnExit:
   513 000004A5 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   514 000004AB 5B                  <1>     pop rbx
   515 000004AC 58                  <1>     pop rax
   516 000004AD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 000004AE 50                  <1>     push rax
     3 000004AF 53                  <1>     push rbx
     4 000004B0 51                  <1>     push rcx
     5 000004B1 52                  <1>     push rdx
     6 000004B2 56                  <1>     push rsi
     7 000004B3 57                  <1>     push rdi
     8 000004B4 55                  <1>     push rbp
     9 000004B5 4150                <1>     push r8
    10 000004B7 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 000004BE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 000004C2 B003                <1>     mov al, drvBadCmd
    13 000004C4 7744                <1>     ja .msdWriteEntryError ;If yes, error!
    14 000004C6 B001                <1>     mov al, drvBadUnit 
    15 000004C8 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 000004CC 773C                <1>     ja .msdWriteEntryError ;If yes, error!
    17 000004CE 488D35DE040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 000004D5 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 000004D9 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 000004DC 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 000004E0 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 000004E4 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 000004E6 488D0DA5000000      <1>     lea rcx, .msdTable
    24 000004ED 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 000004F1 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 000004F3 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 000004F5 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 000004F8 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 000004FA 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 00000500 4158                <1>     pop r8
    32 00000502 5D                  <1>     pop rbp
    33 00000503 5F                  <1>     pop rdi
    34 00000504 5E                  <1>     pop rsi
    35 00000505 5A                  <1>     pop rdx
    36 00000506 59                  <1>     pop rcx
    37 00000507 5B                  <1>     pop rbx
    38 00000508 58                  <1>     pop rax
    39 00000509 C3                  <1>     ret
    40                              <1> .msdWriteEntryError:
    41                              <1> ;Used for errors which occur before a function!
    42 0000050A E87C000000          <1>     call .msdWriteErrorCode
    43 0000050F EBE9                <1>     jmp short .msdDriverExit
    44                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    45 00000511 4889FB              <1>     mov rbx, rdi
    46 00000514 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    47                              <1> ;Now fall through to general error
    48                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    49 00000517 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
    50 0000051E B401                <1>     mov ah, 01h
    51 00000520 CD33                <1>     int 33h ;Read status of last operation
    52 00000522 7265                <1>     jc .msdGenErr
    53 00000524 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    54 00000527 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    55 00000529 7460                <1>     je .msdWriteErrorCode 
    56 0000052B B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    57 0000052D 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    58 00000530 7459                <1>     je .msdWriteErrorCode 
    59 00000532 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    60 00000535 7454                <1>     je .msdWriteErrorCode
    61                              <1> ;Device Not Ready
    62 00000537 B002                <1>     mov al, 02h  ;Device not ready code
    63 00000539 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    64 0000053C 744D                <1>     je .msdWriteErrorCode
    65 0000053E 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    66 00000542 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    67                              <1> ;Write Protected
    68 00000546 30C0                <1>     xor al, al
    69 00000548 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    70 0000054D 743C                <1>     je .msdWriteErrorCode
    71                              <1> ;CRC Error
    72 0000054F B004                <1>     mov al, 04h     ;CRC error code
    73 00000551 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    74 00000556 7433                <1>     je .msdWriteErrorCode
    75 00000558 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    76 0000055D 742C                <1>     je .msdWriteErrorCode
    77 0000055F 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    78 00000564 7425                <1>     je .msdWriteErrorCode
    79                              <1> ;Seek Error
    80 00000566 B006                <1>     mov al, 06h     ;Seek error code
    81 00000568 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    82 0000056B 741E                <1>     je .msdWriteErrorCode
    83                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    84                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    85 0000056D B007                <1>     mov al, 07h
    86 0000056F 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    87 00000572 7417                <1>     je .msdWriteErrorCode
    88                              <1> ;Sector Not Found
    89 00000574 B008                <1>     mov al, 08h     ;Sector not found code
    90 00000576 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    91 00000579 7410                <1>     je .msdWriteErrorCode
    92                              <1> ;Write faults
    93 0000057B B00A                <1>     mov al, 0Ah     ;Write fault
    94 0000057D 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    95 00000580 7409                <1>     je .msdWriteErrorCode
    96                              <1> ;Read faults
    97 00000582 B00B                <1>     mov al, 0Bh     ;Read fault
    98 00000584 80F911              <1>     cmp cl, 11h     ;Read error
    99 00000587 7402                <1>     je .msdWriteErrorCode
   100                              <1> ;General Errors
   101                              <1> .msdGenErr:
   102 00000589 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   103                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   104 0000058B B480                <1>     mov ah, 80h ;Set error bit
   105 0000058D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   106 00000591 C3                  <1>     ret ;Return to set done bit
   107                              <1> .msdTable:
   108 00000592 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   109 00000594 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   110 00000596 B200                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   111 00000598 4101                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   112 0000059A 4D01                <1>     dw .msdRead - .msdTable         ;Function 4
   113 0000059C 0000                <1>     dw 0                            ;Function 5
   114 0000059E 0000                <1>     dw 0                            ;Function 6
   115 000005A0 0000                <1>     dw 0                            ;Function 7
   116 000005A2 8B01                <1>     dw .msdWrite - .msdTable        ;Function 8
   117 000005A4 C901                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   118 000005A6 0000                <1>     dw 0                            ;Function 10
   119 000005A8 0000                <1>     dw 0                            ;Function 11
   120 000005AA 1402                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   121 000005AC 2002                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   122 000005AE 3B02                <1>     dw .msdDevClose - .msdTable     ;Function 14
   123 000005B0 5602                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   124 000005B2 0000                <1>     dw 0                            ;Function 16
   125 000005B4 0000                <1>     dw 0                            ;Function 17
   126 000005B6 0000                <1>     dw 0                            ;Function 18
   127 000005B8 7E02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   128 000005BA 0000                <1>     dw 0                            ;Function 20
   129 000005BC 0000                <1>     dw 0                            ;Function 21
   130 000005BE 0000                <1>     dw 0                            ;Function 22
   131 000005C0 2503                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   132 000005C2 3A03                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   133                              <1> .msdInitShim:
   134 000005C4 53                  <1>     push rbx
   135 000005C5 4157                <1>     push r15
   136 000005C7 E8F2070000          <1>     call msdInit
   137 000005CC 415F                <1>     pop r15
   138 000005CE 5B                  <1>     pop rbx
   139 000005CF 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   140 000005D8 C3                  <1>     ret
   141                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   142                              <1> .msdMedChk:          ;Function 1
   143 000005D9 B005                <1>     mov al, 05h ;Bad request structure length
   144 000005DB 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   145 000005DE 75AB                <1>     jne .msdWriteErrorCode
   146                              <1>     ;If the BPB makes no sense, claim it was changed, so we can rebuild BPB.
   147 000005E0 F6450DFF            <1>     test byte [rbp + bpb.secPerClus], -1
   148 000005E4 744F                <1>     jz .mmcChange   ;If the BPB weird, say that it was changed!
   149                              <1>     ;Now set the volume ID appropriately so that if error, we have it ready
   150 000005E6 50                  <1>     push rax
   151 000005E7 488D4527            <1>     lea rax, qword [rbp + bpb.volID]    ;Get the volID from the BPB
   152 000005EB 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   153 000005EF 58                  <1>     pop rax
   154                              <1> 
   155 000005F0 E80F030000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   156 000005F5 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   157 000005F7 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   158 000005FC 488D0DA6030000      <1>     lea rcx, .msdBIOSmap
   159 00000603 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   160 00000606 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   161 00000609 7534                <1>     jnz .mmcNoChange
   162                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   163 0000060B B416                <1>     mov ah, 16h 
   164 0000060D CD33                <1>     int 33h
   165 0000060F 0F8202FFFFFF        <1>     jc .msdGenDiskError
   166 00000615 80FC80              <1>     cmp ah, 80h
   167 00000618 740E                <1>     je .mmcNoChangeLine
   168 0000061A 80FC86              <1>     cmp ah, 86h
   169 0000061D 7409                <1>     je .mmcNoChangeLine
   170 0000061F 84E4                <1>     test ah, ah ;No change?
   171 00000621 741C                <1>     jz .mmcNoChange
   172 00000623 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   173 00000626 750D                <1>     jnz .mmcChange
   174                              <1> ;If nothing, fall through and test manually, should never happen though
   175                              <1> .mmcNoChangeLine:
   176                              <1> ;Now we test Media Descriptor
   177 00000628 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   178 0000062D 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   179 00000630 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   180 00000633 7405                <1>     je .mmcUnsure
   181                              <1> .mmcChange:
   182 00000635 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   183 00000639 C3                  <1>     ret
   184                              <1> .mmcUnsure:
   185 0000063A C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   186 0000063E C3                  <1>     ret
   187                              <1> .mmcNoChange:
   188 0000063F C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   189 00000643 C3                  <1>     ret
   190                              <1> 
   191                              <1> 
   192                              <1> .msdBuildBPB:        ;Function 2
   193 00000644 B005                <1>     mov al, 05h ;Bad request structure length
   194 00000646 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   195 00000649 0F853CFFFFFF        <1>     jne .msdWriteErrorCode
   196                              <1> 
   197 0000064F 4889DE              <1>     mov rsi, rbx
   198 00000652 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   199 00000657 488D0D4B030000      <1>     lea rcx, .msdBIOSmap
   200 0000065E 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   201 00000661 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   202 00000665 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   203 00000667 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   204 0000066A B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   205 0000066F CD33                <1>     int 33h
   206 00000671 0F82A0FEFFFF        <1>     jc .msdGenDiskError
   207                              <1> ;------------------------------------------------------
   208                              <1> ;At this point: 
   209                              <1> ;   rsi -> Driver Request Packet
   210                              <1> ;   rbx -> New BPB that was been read in
   211                              <1> ;   rbp -> Original BPB that is stored in driver
   212                              <1> ;------------------------------------------------------
   213                              <1> ;Check we have a short jump and NOP at the start of the bootsector.
   214 00000677 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code
   215 00000679 807B0290            <1>     cmp byte [rbx + bpb.jmpBoot + 2], 090h  ;NOP
   216 0000067D 0F8508FFFFFF        <1>     jne .msdWriteErrorCode
   217 00000683 803BEB              <1>     cmp byte [rbx + bpb.jmpBoot], 0EBh      ;JMP SHORT
   218 00000686 0F85FFFEFFFF        <1>     jne .msdWriteErrorCode 
   219                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   220 0000068C 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   221 00000690 7416                <1>     je .mbbpb0
   222 00000692 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   223 00000696 7410                <1>     je .mbbpb0
   224 00000698 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   225 0000069C 740A                <1>     je .mbbpb0
   226 0000069E 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   227 000006A2 0F82E3FEFFFF        <1>     jb .msdWriteErrorCode
   228                              <1> .mbbpb0:
   229                              <1> ;Now test that the BPB makes sense. If the values are bad, don't overwrite 
   230                              <1> ; the BPB we have! eax = drvBadMed error code
   231 000006A8 F6430DFF            <1>     test byte [rbx + bpb.secPerClus], -1 ;Does this BPB makes sense?
   232 000006AC 0F84D9FEFFFF        <1>     jz .msdWriteErrorCode   ;If this value is zero, fail!
   233                              <1> ;Now reset the open handles in the var count!! This should throw a GP error
   234                              <1> ; if the open is being done and this count is not zero. Actually should be a 
   235                              <1> ; bad disk change error but this is done by Share(?) so we just need to reset 
   236                              <1> ; it in any case.
   237 000006B2 480FB64E01          <1>     movzx rcx, byte [rsi + bpbBuildReqPkt.unitnm]
   238 000006B7 488D3DF0020000      <1>     lea rdi, .msdHdlCnt
   239 000006BE C6040F00            <1>     mov byte [rdi + rcx], 0  ;Reset open hdls!
   240 000006C2 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   241 000006C5 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   242 000006C8 B90F000000          <1>     mov ecx, bpbEx_size/8
   243 000006CD 56                  <1>     push rsi
   244 000006CE F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   245 000006D1 5E                  <1>     pop rsi
   246                              <1>     return      ;We return with rbx -> Request header as it should be :-)
    13                              <2> %%_ret:
    14 000006D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1> 
   248                              <1> .msdIOCTLRead:       ;Function 3, returns done
   249 000006D3 B005                <1>     mov al, drvBadDrvReq
   250 000006D5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   251 000006D8 0F85ADFEFFFF        <1>     jne .msdWriteErrorCode
   252 000006DE C3                  <1>     ret
   253                              <1> .msdRead:            ;Function 4
   254                              <1> ;Will read one sector at a time.
   255 000006DF B005                <1>     mov al, 05h ;Bad request structure length
   256 000006E1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   257 000006E4 0F85A1FEFFFF        <1>     jne .msdWriteErrorCode
   258 000006EA E86C020000          <1>     call .msdIOSetVolLbl
   259                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   260                              <1> ;    test byte [7c02h], 1
   261                              <1> ;    jnz .msdGenErr
   262                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   263 000006EF E810020000          <1>     call .msdCheckDeviceType
   264                              <1> 
   265 000006F4 4889DF              <1>     mov rdi, rbx
   266 000006F7 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   267                              <1> .msdr0:
   268 000006F9 B682                <1>     mov dh, 82h ;LBA Read Sectors
   269 000006FB E8E1010000          <1>     call .msdBlkIOCommon
   270 00000700 0F820BFEFFFF        <1>     jc .msdIOError
   271 00000706 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   272 0000070A 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   273 0000070E 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   274 00000712 FFC6                <1>     inc esi
   275 00000714 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   276 00000717 75E0                <1>     jne .msdr0
   277 00000719 4889FB              <1>     mov rbx, rdi
   278 0000071C C3                  <1>     ret
   279                              <1> .msdWrite:           ;Function 8
   280                              <1> ;Will write one sector at a time.
   281 0000071D B005                <1>     mov al, 05h ;Bad request structure length
   282 0000071F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   283 00000722 0F8563FEFFFF        <1>     jne .msdWriteErrorCode
   284 00000728 E82E020000          <1>     call .msdIOSetVolLbl
   285                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   286                              <1> ;    test byte [7c02h], 2
   287                              <1> ;    jnz .msdGenErr
   288                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   289 0000072D E8D2010000          <1>     call .msdCheckDeviceType
   290                              <1> 
   291 00000732 4889DF              <1>     mov rdi, rbx
   292 00000735 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   293                              <1> .msdw0:
   294 00000737 B683                <1>     mov dh, 83h ;LBA Write Sectors
   295 00000739 E8A3010000          <1>     call .msdBlkIOCommon
   296 0000073E 0F82CDFDFFFF        <1>     jc .msdIOError
   297 00000744 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   298 00000748 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   299 0000074C 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   300 00000750 FFC6                <1>     inc esi
   301 00000752 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   302 00000755 75E0                <1>     jne .msdw0
   303 00000757 4889FB              <1>     mov rbx, rdi
   304 0000075A C3                  <1>     ret
   305                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   306                              <1> ;Will write one sector at a time and then verify it.
   307 0000075B B005                <1>     mov al, 05h ;Bad request structure length
   308 0000075D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   309 00000760 0F8525FEFFFF        <1>     jne .msdWriteErrorCode
   310 00000766 E8F0010000          <1>     call .msdIOSetVolLbl
   311                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   312                              <1> ;    test byte [7c02h], 2
   313                              <1> ;    jnz .msdGenErr
   314                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   315 0000076B E894010000          <1>     call .msdCheckDeviceType
   316                              <1> 
   317 00000770 4889DF              <1>     mov rdi, rbx
   318 00000773 31F6                <1>     xor esi, esi  ;Set counter to zero
   319                              <1> .msdwv0:
   320 00000775 B683                <1>     mov dh, 83h ;LBA Write Sectors
   321 00000777 E865010000          <1>     call .msdBlkIOCommon
   322 0000077C 0F828FFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   323 00000782 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   324 00000784 E858010000          <1>     call .msdBlkIOCommon
   325 00000789 0F8282FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   326 0000078F 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   327 00000793 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   328 00000797 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   329 0000079B FFC6                <1>     inc esi
   330 0000079D 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   331 000007A0 75D3                <1>     jne .msdwv0
   332 000007A2 4889FB              <1>     mov rbx, rdi
   333 000007A5 C3                  <1>     ret
   334                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   335 000007A6 B005                <1>     mov al, drvBadDrvReq
   336 000007A8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   337 000007AB 0F85DAFDFFFF        <1>     jne .msdWriteErrorCode
   338                              <1> 
   339 000007B1 C3                  <1>     ret
   340                              <1> .msdDevOpen:         ;Function 13
   341 000007B2 B005                <1>     mov al, drvBadDrvReq
   342 000007B4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   343 000007B7 0F85CEFDFFFF        <1>     jne .msdWriteErrorCode
   344                              <1> 
   345 000007BD 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   346 000007C2 488D0DE5010000      <1>     lea rcx, .msdHdlCnt
   347 000007C9 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   348 000007CC C3                  <1>     ret
   349                              <1> .msdDevClose:        ;Function 14
   350 000007CD B005                <1>     mov al, drvBadDrvReq
   351 000007CF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   352 000007D2 0F85B3FDFFFF        <1>     jne .msdWriteErrorCode
   353                              <1> 
   354 000007D8 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   355 000007DD 488D0DCA010000      <1>     lea rcx, .msdHdlCnt
   356 000007E4 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   357 000007E7 C3                  <1>     ret
   358                              <1> .msdRemovableMedia:  ;Function 15
   359 000007E8 B005                <1>     mov al, drvBadDrvReq
   360 000007EA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   361 000007ED 0F8598FDFFFF        <1>     jne .msdWriteErrorCode
   362                              <1>     
   363 000007F3 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   364 000007F8 488D0DAA010000      <1>     lea rcx, .msdBIOSmap
   365 000007FF 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   366 00000803 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   367 00000808 C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   368 0000080B 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   369 0000080F C3                  <1>     ret
   370                              <1> .msdGenericIOCTL:    ;Function 19
   371 00000810 B005                <1>     mov al, drvBadDrvReq
   372 00000812 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   373 00000815 0F8570FDFFFF        <1>     jne .msdWriteErrorCode
   374                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   375                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   376 0000081B B003                <1>     mov al, drvBadCmd
   377 0000081D 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   378 00000821 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   379 00000824 0F8561FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   380 0000082A F6C180              <1>     test cl, 80h    ;Extended function bit set?
   381 0000082D 0F8458FDFFFF        <1>     jz .msdWriteErrorCode
   382 00000833 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   383 00000836 80F941              <1>     cmp cl, 41h     
   384 00000839 743F                <1>     je .msdGIOCTLWrite
   385 0000083B 80F942              <1>     cmp cl, 42h
   386 0000083E 7451                <1>     je .msdGIOCTLFormat
   387 00000840 80F960              <1>     cmp cl, 60h
   388 00000843 0F8542FDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   389                              <1>     ;Get params here
   390 00000849 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   391 0000084D 488D1555010000      <1>     lea rdx, .msdBIOSmap
   392 00000854 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   393 00000857 B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   394 00000859 53                  <1>     push rbx
   395 0000085A CD33                <1>     int 33h
   396                              <1>     ;Returns:
   397                              <1>     ;rbx = Sector size in bytes
   398                              <1>     ;rcx = Last LBA block
   399 0000085C 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   400 0000085F 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   401 00000860 0F82B1FCFFFF        <1>     jc .msdGenDiskError
   402                              <1> ;Get LBA Table:
   403                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   404                              <1> ;Offset 1:  Reserved, 7 bytes
   405                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   406                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   407 00000866 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   408 0000086A 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   409 00000871 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   410 00000875 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   411                              <1>     return
    13                              <2> %%_ret:
    14 00000879 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> .msdGIOCTLWrite:
   414                              <1> ;Write Table:
   415                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   416                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   417                              <1> ;Offset 2:  Reserved, 6 bytes
   418                              <1> ;Offset 8:  Sector to start format at (QWORD)
   419                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   420 0000087A E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   421 0000087F 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   422 00000883 B483                <1>     mov ah, 83h
   423                              <1> .msdGIOCTLwfCommon:
   424 00000885 CD33                <1>     int 33h
   425 00000887 0F828AFCFFFF        <1>     jc .msdGenDiskError
   426 0000088D 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   427                              <1>     return 
    13                              <2> %%_ret:
    14 00000890 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   428                              <1> 
   429                              <1> .msdGIOCTLFormat:
   430                              <1> ;Format Table:
   431                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   432                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   433                              <1> ;Offset 2:  Reserved, 6 bytes
   434                              <1> ;Offset 8:  Sector to start format at (QWORD)
   435 00000891 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   436 00000896 B485                <1>     mov ah, 85h
   437 00000898 EBEB                <1>     jmp short .msdGIOCTLwfCommon
   438                              <1> 
   439                              <1> .msdGIOCTLFormatWriteSetup:
   440                              <1> ;Sets the following:
   441                              <1> ;al = Number of sectors to write/format
   442                              <1> ;rcx = Sector to begin transfer at
   443                              <1> ;dl = BIOS Drive to do transfer on
   444                              <1> ;rsi = Driver Packet (usually set to rbx)
   445                              <1> ;rdi = Write/Format packet
   446 0000089A 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   447 0000089E 488D1504010000      <1>     lea rdx, .msdBIOSmap
   448 000008A5 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   449 000008A8 4889DE              <1>     mov rsi, rbx
   450 000008AB 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   451 000008AF 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   452 000008B2 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   453                              <1>     return
    13                              <2> %%_ret:
    14 000008B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> .msdGetLogicalDev:   ;Function 23
   456 000008B7 B005                <1>     mov al, drvBadDrvReq
   457 000008B9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   458 000008BC 0F85C9FCFFFF        <1>     jne .msdWriteErrorCode
   459                              <1> 
   460 000008C2 8A05E0000000        <1>     mov al, byte [.msdCurDev]
   461 000008C8 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   462 000008CB C3                  <1>     ret
   463                              <1> .msdSetLogicalDev:   ;Function 24
   464 000008CC B005                <1>     mov al, drvBadDrvReq
   465 000008CE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   466 000008D1 0F85B4FCFFFF        <1>     jne .msdWriteErrorCode
   467                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   468 000008D7 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   469 000008DA 8805C8000000        <1>     mov byte [.msdCurDev], al
   470 000008E0 C3                  <1>     ret
   471                              <1> 
   472                              <1> .msdBlkIOCommon:  ;Does block IO
   473                              <1> ;Called with rdi containing old rbx value and ah with function number
   474                              <1> ;rbp points to bpb
   475                              <1> ;Error handled by caller
   476                              <1> ;Sector count handled by caller
   477                              <1> ;Called with dh = BIOS function number
   478 000008E1 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   479 000008E6 488D0DBC000000      <1>     lea rcx, .msdBIOSmap
   480 000008ED 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   481 000008F0 31C9                <1>     xor ecx, ecx
   482 000008F2 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   483 000008F5 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   484 000008F9 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   485 000008FD 88F4                <1>     mov ah, dh
   486 000008FF B001                <1>     mov al, 01h ;Do one sector at a time 
   487 00000901 CD33                <1>     int 33h
   488                              <1>     return
    13                              <2> %%_ret:
    14 00000903 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> .msdCheckDeviceType:
   491                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   492                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   493                              <1> ; is being transacted on, prompts the user. Else, 
   494                              <1> ;Returns ZF=NZ if media number changed!
   495                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   496 00000904 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   497 00000908 3A059A000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   498                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000090E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000910 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   499                              <1> ;If not equal, check new drive is not A or B
   500 00000911 3C02                <1>     cmp al, 2
   501 00000913 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   502                              <1>     ;Check if we are in single drive mode or not
   503 00000915 F6058A000000FF      <1>     test byte [.msdSingleFlag], -1
   504 0000091C 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   505 0000091E 3A0583000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   506 00000924 742D                <1>     je .msdCDTexitOk    ;Exit if so
   507 00000926 88057B000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   508 0000092C 0441                <1>     add al, "A" ;Convert to a letter
   509 0000092E 880545000000        <1>     mov byte [.msdStrikeLetter], al
   510 00000934 488D352B000000      <1>     lea rsi, .msdStrike
   511 0000093B B937000000          <1>     mov ecx, .msdStrikeL
   512                              <1> .msdCDTprintMessage:
   513 00000940 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   514 00000941 CD29                <1>     int 29h ;Print char in al
   515 00000943 FFC9                <1>     dec ecx
   516 00000945 75F9                <1>     jnz .msdCDTprintMessage
   517 00000947 31C0                <1>     xor eax, eax
   518 00000949 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   519                              <1> .msdCDTexit:
   520 0000094B E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   521 00000950 FFC0                <1>     inc eax ;Clear ZF
   522 00000952 C3                  <1>     ret
   523                              <1> .msdCDTexitOk:
   524 00000953 E87FFFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   525 00000958 31C0                <1>     xor eax, eax
   526 0000095A C3                  <1>     ret
   527                              <1> .msdIOSetVolLbl:
   528                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
   529                              <1> ;Input: rbx -> io request packet
   530                              <1> ;       rbp -> BPB to get volume ID from
   531                              <1> ;Output: Pointer placed in io request packet
   532 0000095B 50                  <1>     push rax
   533 0000095C 488D4527            <1>     lea rax, qword [rbp + bpb.volID]    ;Get the volID from the BPB
   534 00000960 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
   535 00000964 58                  <1>     pop rax
   536 00000965 C3                  <1>     ret
   537 00000966 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   537 0000096F 666F72206472697665- <1>
   537 00000978 20                  <1>
   538 00000979 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   538 00000982 72696B650D0A616E79- <1>
   538 0000098B 206B6579207768656E- <1>
   538 00000994 2072656164790D0A0A  <1>
   539                              <1> .msdStrikeL equ $ - .msdStrike
   540                              <1> 
   541 0000099D 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   542                              <1> ;LASTDRIVE default is 5
   543                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   544                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   545 000009A6 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   546 000009A7 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   547 000009A8 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   548                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   549 000009A9 FFFFFFFFFF          <1> .msdBIOSmap  db -1, -1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   550 000009AE 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   551 000009B3 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   551 000009BC 000000000000000000- <1>
   551 000009C5 000000000000000000- <1>
   551 000009CE 000000000000000000- <1>
   551 000009D7 00000000            <1>
   552 000009DB 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   552 000009E4 000000000000000000- <1>
   552 000009ED 000000000000000000- <1>
   552 000009F6 000000000000000000- <1>
   552 000009FF 000000000000000000- <1>
   552 00000A08 000000000000000000- <1>
   552 00000A11 000000000000000000- <1>
   552 00000A1A 000000000000000000- <1>
   552 00000A23 000000000000000000- <1>
   552 00000A2C 000000000000000000- <1>
   552 00000A35 000000000000000000- <1>
   552 00000A3E 000000000000000000- <1>
   552 00000A47 000000000000000000- <1>
   552 00000A50 000000000000000000- <1>
   552 00000A59 000000000000000000- <1>
   552 00000A62 000000000000000000- <1>
   552 00000A6B 000000000000000000- <1>
   552 00000A74 000000000000000000- <1>
   552 00000A7D 000000000000000000- <1>
   552 00000A86 000000000000000000- <1>
   552 00000A8F 000000000000000000- <1>
   552 00000A98 000000000000000000- <1>
   552 00000AA1 000000000000000000- <1>
   552 00000AAA 000000000000000000- <1>
   552 00000AB3 000000000000000000- <1>
   552 00000ABC 000000000000000000- <1>
   552 00000AC5 000000000000000000- <1>
   552 00000ACE 000000000000000000- <1>
   552 00000AD7 000000000000000000- <1>
   552 00000AE0 000000000000000000- <1>
   552 00000AE9 000000000000000000- <1>
   552 00000AF2 000000000000000000- <1>
   552 00000AFB 000000000000000000- <1>
   552 00000B04 000000000000000000- <1>
   552 00000B0D 000000000000000000- <1>
   552 00000B16 000000000000000000- <1>
   552 00000B1F 000000000000000000- <1>
   552 00000B28 000000000000000000- <1>
   552 00000B31 000000000000000000- <1>
   552 00000B3A 000000000000000000- <1>
   552 00000B43 000000000000000000- <1>
   552 00000B4C 000000000000000000- <1>
   552 00000B55 000000000000000000- <1>
   552 00000B5E 000000000000000000- <1>
   552 00000B67 000000000000000000- <1>
   552 00000B70 000000000000000000- <1>
   552 00000B79 000000000000000000- <1>
   552 00000B82 000000000000000000- <1>
   552 00000B8B 000000000000000000- <1>
   552 00000B94 000000000000000000- <1>
   552 00000B9D 000000000000000000- <1>
   552 00000BA6 000000000000000000- <1>
   552 00000BAF 000000000000000000- <1>
   552 00000BB8 000000000000000000- <1>
   552 00000BC1 000000000000000000- <1>
   552 00000BCA 000000000000000000- <1>
   552 00000BD3 000000000000000000- <1>
   552 00000BDC 000000000000000000- <1>
   552 00000BE5 000000000000000000- <1>
   552 00000BEE 000000000000000000- <1>
   552 00000BF7 000000000000000000- <1>
   552 00000C00 000000000000000000- <1>
   552 00000C09 000000000000000000- <1>
   552 00000C12 000000000000000000- <1>
   552 00000C1B 000000000000000000- <1>
   552 00000C24 000000000000000000- <1>
   552 00000C2D 000000000000        <1>
   553                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   553                              <2> .dfltBPB :
   177 00000C33 E9                  <2>  db 0E9h
   178 00000C34 00                  <2>  db 00h
   179 00000C35 90                  <2>  db 90h
   180 00000C36 534350444F537631    <2>  db 'SCPDOSv1'
   181 00000C3E 0002                <2>  dw 0200h
   182 00000C40 01                  <2>  db 01h
   183 00000C41 0100                <2>  dw 0001h
   184 00000C43 02                  <2>  db 02h
   185 00000C44 E000                <2>  dw 00E0h
   186 00000C46 400B                <2>  dw 0B40h
   187 00000C48 F0                  <2>  db 0F0h
   188 00000C49 0900                <2>  dw 0009h
   189 00000C4B 1200                <2>  dw 0012h
   190 00000C4D 0200                <2>  dw 0002h
   191 00000C4F 00000000            <2>  dd 0
   192 00000C53 00000000            <2>  dd 0
   193 00000C57 00                  <2>  db 00h
   194 00000C58 00                  <2>  db 00h
   195 00000C59 29                  <2>  db 29h
   196 00000C5A 00000000            <2>  dd 0
   197 00000C5E 4E4F204E414D452020- <2>  db 'NO NAME    '
   197 00000C67 2020                <2>
   198 00000C69 4641543132202020    <2>  db 'FAT12   '
   199 00000C71 000000000000000000- <2>  db 58 dup 0
   199 00000C7A 000000000000000000- <2>
   199 00000C83 000000000000000000- <2>
   199 00000C8C 000000000000000000- <2>
   199 00000C95 000000000000000000- <2>
   199 00000C9E 000000000000000000- <2>
   199 00000CA7 00000000            <2>
   554                              <1> endptr equ $
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00000CAB 0F010D23000000      <1>     sidt [myIdt]
     8 00000CB2 0FB6C0              <1>     movzx eax, al
     9 00000CB5 4892                <1>     xchg rdx, rax
    10 00000CB7 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00000CBB 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00000CC2 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00000CC5 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00000CC9 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00000CCD 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00000CD1 894208              <1>     mov dword [rdx + 8], eax
    17 00000CD4 C3                  <1>     ret
    18                              <1> myIdt:
    19 00000CD5 0000                <1> .limit  dw 0
    20 00000CD7 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00000CDF 50                  <1>     push rax
    25 00000CE0 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00000CE1 51                  <1>     push rcx
    27 00000CE2 52                  <1>     push rdx
    28 00000CE3 488D1578F4FFFF      <1>     lea rdx, qword [fastOutput]
    29 00000CEA B829000000          <1>     mov eax, 29h
    30 00000CEF E8B7FFFFFF          <1>     call installInterrupt
    31 00000CF4 488D156FF4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00000CFB B83B000000          <1>     mov eax, 3Bh
    33 00000D00 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00000D05 B401                <1>     mov ah, 01      ;Get buffer status
    36 00000D07 CD36                <1>     int 36h
    37 00000D09 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00000D0B 30E4                <1>     xor ah, ah
    39 00000D0D CD36                <1>     int 36h ;Read key to flush from buffer
    40 00000D0F EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00000D11 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00000D16 CD30                <1>     int 30h
    44 00000D18 B402                <1>     mov ah, 02h
    45 00000D1A 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00000D1C 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00000D1E CD30                <1>     int 30h
    48 00000D20 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00000D22 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00000D27 CD30                <1>     int 30h
    51 00000D29 5A                  <1>     pop rdx
    52 00000D2A 59                  <1>     pop rcx
    53 00000D2B 5B                  <1>     pop rbx
    54 00000D2C 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 00000D2D 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 00000D32 50                  <1>     push rax
    58 00000D33 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 00000D3A 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 00000D3E 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 00000D3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 00000D40 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 00000D41 B402                <1>     mov ah, 02  ;Read RTC Time
    69 00000D43 CD3A                <1>     int 3Ah
    70 00000D45 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00000D47 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 00000D4A E84D000000          <1>     call .bcd2Bin
    74 00000D4F 88C5                <1>     mov ch, al
    75 00000D51 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 00000D54 E843000000          <1>     call .bcd2Bin
    77 00000D59 88C1                <1>     mov cl, al
    78 00000D5B 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00000D5E E839000000          <1>     call .bcd2Bin
    80 00000D63 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00000D65 89C2                <1>     mov edx, eax
    82 00000D67 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00000D69 CD21                <1>     int 21h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00000D6B B404                <1>     mov ah, 04  ;Read RTC Date
    89 00000D6D CD3A                <1>     int 3Ah
    90 00000D6F 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00000D71 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 00000D74 E823000000          <1>     call .bcd2Bin
    94 00000D79 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00000D7C 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    96 00000D82 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00000D85 E812000000          <1>     call .bcd2Bin
    98 00000D8A 88C6                <1>     mov dh, al  
    99 00000D8C 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 00000D8F E808000000          <1>     call .bcd2Bin
   101 00000D94 88C2                <1>     mov dl, al
   102 00000D96 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00000D98 CD21                <1>     int 21h
   104 00000D9A EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00000D9C 51                  <1>     push rcx
   108 00000D9D 89C1                <1>     mov ecx, eax
   109 00000D9F 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 00000DA4 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00000DAA 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00000DAD C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00000DB0 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 00000DB2 FFC9                <1>     dec ecx
   116 00000DB4 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00000DB6 59                  <1>     pop rcx
   119 00000DB7 C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00000DB8 5B                  <1>     pop rbx ;Get the pointer back
   122 00000DB9 E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;    mov byte [7c02h], 0
   136                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   137 00000DBE 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   138 00000DBF CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   139 00000DC1 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   140 00000DC5 664489C0            <1>     mov ax, r8w
   141 00000DC9 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   142 00000DCF 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   143 00000DD5 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   144                              <1> 
   145 00000DDC 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   146 00000DE3 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   147 00000DEA 747C                <1>     jz .remInit ;No? Go to removables
   148 00000DEC 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   148 00000DF5 00                  <1>
   149 00000DF6 B280                <1>     mov dl, 80h ;Start with HDD 0
   150                              <1> .primary:
   151 00000DF8 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   152 00000DFF 7467                <1>     je .remInit
   153 00000E01 31C9                <1>     xor ecx, ecx    ;Sector 0
   154 00000E03 E80E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   155 00000E08 724F                <1>     jc .primaryEpilog
   156                              <1>     ;Here, check MBR or BPB
   157 00000E0A 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   158 00000E13 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   159                              <1>     ;Now check if BPB or MBR
   160 00000E15 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   161 00000E17 8A6302              <1>     mov ah, byte [rbx + 2]
   162 00000E1A 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   163 00000E1E 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   164                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   165                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   166 00000E20 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   167 00000E27 B104                <1>     mov cl, 4
   168                              <1> .checkPrimary:
   169 00000E29 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   170 00000E2C 3C01                <1>     cmp al, 01
   171 00000E2E 7421                <1>     je .primaryFound
   172 00000E30 3C04                <1>     cmp al, 04
   173 00000E32 741D                <1>     je .primaryFound
   174 00000E34 3C06                <1>     cmp al, 06
   175 00000E36 7419                <1>     je .primaryFound
   176 00000E38 3C0B                <1>     cmp al, 0Bh
   177 00000E3A 7415                <1>     je .primaryFound
   178 00000E3C 3C0C                <1>     cmp al, 0Ch
   179 00000E3E 7411                <1>     je .primaryFound
   180 00000E40 3C0E                <1>     cmp al, 0Eh
   181 00000E42 740D                <1>     je .primaryFound
   182 00000E44 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   183 00000E4B FEC9                <1>     dec cl
   184 00000E4D 740A                <1>     jz .primaryEpilog
   185 00000E4F EBD8                <1>     jmp short .checkPrimary
   186                              <1> .primaryFound:
   187                              <1>     ;Copy the first sector of this partition into memory
   188 00000E51 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   189 00000E54 E8CB000000          <1>     call .readSectorAndAddDataToTables
   190                              <1> .primaryEpilog:
   191 00000E59 FEC2                <1>     inc dl  ;Goto next BIOS drive
   192 00000E5B 88D6                <1>     mov dh, dl
   193 00000E5D 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   194 00000E60 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   195 00000E66 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   196                              <1> .extended:
   197                              <1> ;We have gone through all the devices once
   198                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   199                              <1>     ;je .remInit ;If yes, get removable devices
   200                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   201                              <1>     ;xor ecx, ecx    ;Get MBR back
   202                              <1>     ;call .initReadSector
   203                              <1>     ;Now we eventually search MBR for a FAT extended partition
   204                              <1> .remInit:
   205                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   206                              <1> ; for some reason the removable drives stop working or dont exist.
   207 00000E68 488D35C4FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   208 00000E6F 488D3D3DFBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   209 00000E76 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   210 00000E79 48897708            <1>     mov qword [rdi + 8], rsi
   211                              <1> ;This forces the hard drives to start at C:
   212 00000E7D 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   213 00000E80 30D2                <1>     xor dl, dl  ;Start with removable device 0
   214 00000E82 4C0FB6C2            <1>     movzx r8, dl ;Once r8b becomes 2, go past the disk drives
   215                              <1>     ;rdi points to the space for the subsequent bpb's
   216 00000E86 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   217 00000E8D 7509                <1>     jnz .removables
   218 00000E8F 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   219 00000E96 EB2D                <1>     jmp short .msdExit  ;And return!
   220                              <1> .removables:
   221 00000E98 31C9                <1>     xor ecx, ecx    ;Read sector 0
   222 00000E9A E885000000          <1>     call .readSectorAndAddDataToTables
   223                              <1> .removableEpilogue:
   224 00000E9F FEC2                <1>     inc dl  ;Goto next BIOS device now
   225 00000EA1 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   226 00000EA7 7413                <1>     je .end
   227 00000EA9 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   228 00000EB0 7504                <1>     jne .re0
   229 00000EB2 4D0FB6C1            <1>     movzx r8, r9b    ;Return to this drive number
   230                              <1> .re0:
   231 00000EB6 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   232 00000EBA 72DC                <1>     jb .removables
   233                              <1> .end:
   234 00000EBC 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   235 00000EC3 741D                <1>     je .singleRemDev
   236                              <1> .msdExit:
   237 00000EC5 5B                  <1>     pop rbx ;rbx points to the parameter block
   238                              <1>     ;Now we set the .optptr, .endptr and .numunt
   239 00000EC6 50                  <1>     push rax
   240 00000EC7 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   241 00000ECE 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   242 00000ED1 488D05DBFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   243 00000ED8 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   244 00000EDC 58                  <1>     pop rax
   245 00000EDD E94BFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   246                              <1> .singleRemDev:
   247                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   248 00000EE2 488D1DC0FAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   249 00000EE9 8A15BAFAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   250 00000EEF 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   251 00000EF2 488D1DBAFAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   252 00000EF9 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   253 00000EFC 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   254 00000F00 C6059FFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   255 00000F07 C60599FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   256 00000F0E FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   257 00000F14 EBAF                <1>     jmp short .msdExit
   258                              <1> .initReadSector:
   259                              <1> ;Called with sector number in rcx and BIOS device number in dl
   260 00000F16 B482                <1>     mov ah, 82h ;Read
   261 00000F18 B001                <1>     mov al, 1   ;One sector
   262 00000F1A 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   263 00000F21 CD33                <1>     int 33h
   264 00000F23 C3                  <1>     ret
   265                              <1> 
   266                              <1> .readSectorAndAddDataToTables:
   267                              <1> ;Input:
   268                              <1> ;ecx = Sector number to read
   269                              <1> ;r15 -> bpb array entry for the BPB
   270                              <1> ;r8 = Logical Drive number (offset into arrays)
   271 00000F24 E8EDFFFFFF          <1>     call .initReadSector
   272                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F29 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F2B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   273                              <1>     ;Now verify this is a BPB
   274 00000F2C 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   275 00000F2E 8A6302              <1>     mov ah, byte [rbx + 2]
   276 00000F31 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   277                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F35 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F37 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   278                              <1>     ;Now copy data to internal tables
   279 00000F38 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   280 00000F3B 51                  <1>     push rcx
   281 00000F3C B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   282 00000F41 4C89FF              <1>     mov rdi, r15
   283 00000F44 F348A5              <1>     rep movsq   ;Copy the BPB
   284 00000F47 59                  <1>     pop rcx
   285                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   286 00000F48 488D1D5AFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   287 00000F4F 4C01C3              <1>     add rbx, r8
   288                              <1>     ;Add device count to rbx to point to correct entry
   289 00000F52 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   290 00000F54 488D1D58FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl]
   291 00000F5B 4A8D1CC3            <1>     lea rbx, qword [rbx + 8*r8]
   292 00000F5F 4C893B              <1>     mov qword [rbx], r15
   293 00000F62 49FFC0              <1>     inc r8  ;Goto next logical drive
   294 00000F65 FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   295 00000F6B 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   296                              <1>     return
    13                              <2> %%_ret:
    14 00000F72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [FD02000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [8504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [7301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [AE04000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [FD02000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [0603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [0F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [1803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [8504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [8504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [8504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    38 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+4+2 passes

