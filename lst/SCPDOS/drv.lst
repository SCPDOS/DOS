     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen db ?  ;Length of the request header
    90                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde db ?  ;Command code
    92                              <1>     .status dw ?  ;Status word
    93                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqPkt
    98                              <1>     drvReqPktM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqPktM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   104 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   114 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   123 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   132 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqPktM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   180 0000000D ??                  <1>     .majfun db ?  ;Major function number
   181 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqPktM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen db ?
    90 00000001 ??                  <2>  .unitnm db ?
    91 00000002 ??                  <2>  .cmdcde db ?
    92 00000003 ????                <2>  .status dw ?
    93 00000005 ????????????????    <2>  .devptr dq ?
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           db ?
   203 00000001 ??????????????      <1>     .res            db 7 dup (?)
   204 00000008 ????????????????    <1>     .sectorSize     db 8 dup (?)  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     db 8 dup (?)
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           db ?
   211 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            db 6 dup (?)
   213 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           db ?
   218 00000001 ??                  <1>     .numSectors     db ?  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            db 6 dup (?)
   220 00000008 ????????????????    <1>     .startSector    db 8 dup (?)  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     db 8 dup (?)  ;Transfer buffer for data
   222                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB
    19 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    20 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    21 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    22 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    23 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    24 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    25 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    26 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    27 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    28 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    29 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    30 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc extBs
    34                              <1> ;Extended bootsector structure. If present, comes immediately after 
    35                              <1> ; BPB in bootsector
    36 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    37 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    38 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    39 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    40 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    41 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    42                              <1> endstruc
    43                              <1> extBsSig    equ 29h
    44                              <1> 
    45                              <1> struc bpb32       ;FAT 32 BPB
    46 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    47 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    48 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    49 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    50 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    51 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    52 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    53 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    54 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    55 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    56 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    57 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    58 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    59 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    60 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    61 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    62 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    63 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    64 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    65                              <1> endstruc
    66                              <1> 
    67                              <1> struc FSInfo
    68 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    69 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    70 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    71 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    72 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    73 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    74 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> fsInfoSig1  equ 041615252h
    78                              <1> fsInfoSig2  equ 061417272h
    79                              <1> fsInfoSig3  equ 0AA550000h
    80                              <1> 
    81                              <1> struc drvBlk
    82                              <1> ;--------------------------------------------------------------------
    83                              <1> ; Drvblk Header information
    84                              <1> ;--------------------------------------------------------------------
    85 00000000 ????????????????    <1>     .pLink      dq ?    ;Pointer to the next drive block
    86 00000008 ??                  <1>     .bDOSNum    db ?    ;DOS 0 based drive number, setLogicalDev may change it
    87 00000009 ??                  <1>     .bBIOSNum   db ?    ;BIOS number, identifies physical drive
    88                              <1> ;--------------------------------------------------------------------
    89                              <1> ; In-use BPB for current media in here. Always have space for FAT32 
    90                              <1> ;  volume. If FAT12/16, FAT32 fields are undefined (garbage gets 
    91                              <1> ;  copied into those fields... not a problem)
    92                              <1> ;--------------------------------------------------------------------
    93                              <1> .bpb:
    94 0000000A ????                <1>     .wBpS       dw ?    ;Bytes per sector
    95 0000000C ??                  <1>     .bSpC       db ?    ;Sectors per cluster
    96 0000000D ????                <1>     .wResC      dw ?    ;Number of reserved sectors
    97 0000000F ??                  <1>     .bNumFAT    db ?    ;Number of FATs on media
    98 00000010 ????                <1>     .wRtCntNum  dw ?    ;Number of entries in Root directory
    99 00000012 ????                <1>     .wTotSec16  dw ?    ;Number of sectors on medium
   100 00000014 ??                  <1>     .bMedDesc   db ?    ;Media descriptor byte
   101 00000015 ????                <1>     .wFATsz16   dw ?    ;Number of sectors per FAT, must be 0 for FAT 32
   102 00000017 ????                <1>     .wSecPerTrk dw ?    ;Number of sectors per "track"
   103 00000019 ????                <1>     .wNumHeads  dw ?    ;Number of read "heads"
   104 0000001B ????????            <1>     .dHiddSec   dd ?    ;Number of hidden sectors
   105 0000001F ????????            <1>     .dTotSec32  dd ?    ;32 bit count of sectors
   106                              <1> ;--------------------------------------------------------------------
   107                              <1> ; The below vars are only accessed on FAT32 volumes
   108                              <1> ;--------------------------------------------------------------------
   109 00000023 ????????            <1>     .FATsz32    dd ?    ;32 bit count of sectors occupied by one FAT
   110 00000027 ????                <1>     .extFlags   dw ?    ;Extended Flags word
   111 00000029 ????                <1>     .FSver      dw ?    ;File system version word, must be 0
   112 0000002B ????????            <1>     .RootClus   dd ?    ;First Cluster of Root Directory
   113 0000002F ????                <1>     .FSinfo     dw ?    ;Sector number of FSINFO structure, usually 1
   114 00000031 ????                <1>     .BkBootSec  dw ?    ;Backup Boot sector, either 0 or 6
   115                              <1> ;--------------------------------------------------------------------
   116                              <1> ; DrvBlk flags
   117                              <1> ;--------------------------------------------------------------------
   118 00000033 ??                  <1>     .bBpbType   db ?    ;BPB Type indicator (FAT12/16/32 or other)
   119 00000034 ????                <1>     .wOpenCnt   dw ?    ;Device open count (make dword?)
   120 00000036 ??                  <1>     .bDevType   db ?    ;Device type byte (21/440Dh type subcode)
   121 00000037 ????                <1>     .wDevFlgs   dw ?    ;Flags for this device 
   122 00000039 <res 35h>           <1>     .sMaxBPB    db bpb32_size dup (?)   ;Max capacity BPB for drive
   123                              <1> .dAccTime:          ;Last media check time if remdev
   124 0000006E ????????            <1>     .wPtnType   dd ?    
   125                              <1> ;--------------------------------------------------------------------
   126                              <1> ; Volume string and id for the drive described by this drvblk
   127                              <1> ;--------------------------------------------------------------------
   128 00000072 ????????            <1>     .volId      dd ?            ;Volume serial number
   129 00000076 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   130 00000081 ??                  <1>                 db ?            ;Null terminator for string
   131 00000082 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   132 0000008A ??                  <1>                 db ?            ;Null terminator for string
   133                              <1> endstruc
   134                              <1> 
   135                              <1> ;FAT type values
   136                              <1> bpbDskOff   equ 80h ;All Disk accesses return Not Ready (Unrecognised FAT)
   137                              <1> bpbFat16    equ 40h ;FAT 16 disk
   138                              <1> bpbFat32    equ 20h ;FAT 32 disk
   139                              <1> bpbFat12    equ 10h ;FAT 12 disk
   140                              <1> 
   141                              <1> ;Device Flag values
   142                              <1> devFixed    equ 1       ;Set if fixed disk 
   143                              <1> devChgLine  equ 2       ;Set if the drive has a changeline
   144                              <1> devLockBPB  equ 4       ;Makes BuildBPB not build a BPB if set
   145                              <1> ;devSameSec  equ 8       ;All sectors in track are same size
   146                              <1> devMulti    equ 10h     ;BIOS Drive has many logical units (A/B share)
   147                              <1> devOwnDrv   equ 20h     ;Owner for possibly shared physical drive (A/B share)
   148                              <1> devSwap     equ 40h     ;Device change detected (If A swapped and B same as A)
   149                              <1> devChg      equ 80h     ;H/W Dev params changed (NOT USED, ALWAYS OFF)
   150                              <1> devFmt      equ 100h    ;Disk reformatted (BPB changed)
   151                              <1> devUnFmt    equ 200h    ;Fixed media only, disables reads/writes if set
   152                              <1> 
   153                              <1> ;Media byte bits
   154                              <1> mbTwoHead   equ 1       ;Dual sided if bit set, single sided if not
   155                              <1> mb8Sector   equ 2       ;8 sectors per track if bit set, 9 if not
   156                              <1> mbRemDev    equ 4       ;Removable if set, Fixed if not.
   157                              <1> 
   158                              <1> ;Partition types
   159                              <1> ptnPrimary  equ 1       ;A primary MBR partition
   160                              <1> ptnLogical  equ 2       ;A logical MBR partition
   161                              <1> ptnActive   equ 80h     ;An active partition
   162                              <1> ptnGpt      equ 4       ;A primary GPT partition
   163                              <1> ptrUnknown  equ 8000h   ;An unknown partition
   164                              <1> 
   165                              <1> struc mbr
   166 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
   167 000001B8 ????????            <1>     .diskID     dd ?
   168 000001BC ????                <1>     .reserved   dw ?
   169 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
   170 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
   171 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
   172 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
   173 000001FE ????                <1>     .mbrSig     dw ?
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc ebr   ;A special type of MBR
   177 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
   178 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   179 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   180 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   181 000001FE ????                <1>     .mbrSig     dw ?
   182                              <1> endstruc
   183                              <1> 
   184                              <1> struc mbrEntry
   185 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   186 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   187 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   188 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   189 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   190 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc fatDirEntry
   194 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   195 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   196 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   197 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   198 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   199 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   200 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   201 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   202 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   203 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   204 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   205 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   206                              <1> endstruc
   207                              <1> ;Directory attribute equates
   208                              <1>     dirReadOnly     equ 01h
   209                              <1>     dirHidden       equ 02h
   210                              <1>     dirSystem       equ 04h
   211                              <1>     dirVolumeID     equ 08h
   212                              <1>     dirDirectory    equ 10h
   213                              <1>     dirArchive      equ 20h
   214                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   215                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   216                              <1>     ;If any of the three bits are set, then ALL three bits are set
   217                              <1>     ; in addition to whatever the user passed to search for.
   218                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   219                              <1>     dirIncFiles     equ dirHidden | dirSystem
   220                              <1> 
   221                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   222                              <1> 
   223                              <1>     ;.jmpBoot                db 3 dup (?)
   224                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   225                              <1> ;BPB starts here
   226 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   227 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   228 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   229 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   230 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   231 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   232 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   233 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   234 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   235 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   236 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   237 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   238 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   239 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   240 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   241 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   242 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   243                              <1> 
   244                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;====================START OF OEM DRIVER MODULE======================
    13                                  ; This driver module needs to have no external linkage except to
    14                                  ; OEMINIT.
    15                                  ;====================================================================
    16                                  %include "./src/Drivers/drv.inc"
    17                                  
    18                                  Segment kDrvText code private align=1 use64
    19                                  ;---------------------------
    20                                  ;  OEM Driver code segment
    21                                  ;---------------------------
    22                                  ;All drivers are linked into the kDrvText segment
    23                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00000000 48891D(98010000)    <1>     mov qword [reqHdrPtr], rbx
     4 00000007 C3                  <1>     ret
     5                              <1> conDriver:
     6 00000008 50                  <1>     push rax
     7 00000009 53                  <1>     push rbx
     8 0000000A 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
     9 00000011 B003                <1>     mov al, 03h ;Unknown Command
    10 00000013 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
    11 00000017 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00000019 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
    14 0000001C 84C0                <1>     test al, al
    15 0000001E 7445                <1>     jz .conInit
    16 00000020 3C04                <1>     cmp al, 4
    17 00000022 745B                <1>     jz .conRead
    18 00000024 3C05                <1>     cmp al, 5
    19 00000026 0F84A1000000        <1>     jz .conNondestructiveRead
    20 0000002C 3C06                <1>     cmp al, 6
    21 0000002E 0F84D2000000        <1>     jz .conInputStatus
    22 00000034 3C07                <1>     cmp al, 7
    23 00000036 0F84DA000000        <1>     jz .conFlushInputBuffers
    24 0000003C 3C08                <1>     cmp al, 8
    25 0000003E 0F84F4000000        <1>     jz .conWrite
    26 00000044 3C09                <1>     cmp al, 9
    27 00000046 0F84EC000000        <1>     jz .conWrite
    28 0000004C 3C0A                <1>     cmp al, 0Ah
    29 0000004E 0F840D010000        <1>     jz .conOutputStatus
    30 00000054 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00000056 B480                <1>     mov ah, 80h ;Set error bit
    33 00000058 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
    34                              <1> .conExit:
    35 0000005C 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
    36 00000062 5B                  <1>     pop rbx
    37 00000063 58                  <1>     pop rax
    38 00000064 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000065 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000067 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000006E 75EC                <1>     jnz short .conExit
    43 00000070 E8DE190000          <1>     call conInit
    44 00000075 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000007C EBDE                <1>     jmp short .conExit
    46 0000007E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000007F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000081 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
    51 00000084 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000086 57                  <1>     push rdi
    54 00000087 51                  <1>     push rcx
    55 00000088 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000008C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000008E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000091 7424                <1>     je .cre2
    60 00000093 803DD700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000009A 7522                <1>     jnz .cre3   ;No, get the buffer value
    62 0000009C 31C0                <1>     xor eax, eax
    63 0000009E CD36                <1>     int 36h
    64 000000A0 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr? 
    65 000000A4 7502                <1>     jne .cre11
    66 000000A6 B010                <1>     mov al, 10h     ;Store ^P in al!
    67                              <1> .cre11:
    68 000000A8 AA                  <1>     stosb
    69 000000A9 84C0                <1>     test al, al ;Was the ascii code stored 0?
    70 000000AB 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    71 000000AD 8825BE000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    72                              <1> .cre12:
    73 000000B3 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    74 000000B5 EBD7                <1>     jmp short .cre1
    75                              <1> .cre2:
    76 000000B7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    77 000000BA 59                  <1>     pop rcx
    78 000000BB 5F                  <1>     pop rdi
    79 000000BC EB9E                <1>     jmp short .conExit
    80                              <1> .cre3:
    81 000000BE 8A05AD000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    82 000000C4 C605A600000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    83 000000CB EBDB                <1>     jmp short .cre11
    84                              <1> 
    85                              <1> .conNondestructiveRead:  ;Function 5
    86 000000CD B005                <1>     mov al, 05h ;Bad request structure length?
    87 000000CF 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
    88 000000D2 7582                <1>     jne .conWriteErrorCode
    89 000000D4 803D9600000000      <1>     cmp byte [.conBuf], 0
    90 000000DB 7521                <1>     jnz .cnr2
    91 000000DD B401                <1>     mov ah, 01h     ;Get key if exists
    92 000000DF CD36                <1>     int 36h
    93 000000E1 7410                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    94                              <1>     ;Keystroke available
    95 000000E3 663D0072            <1>     cmp ax, 7200h   ;CTRL + PrnScr?
    96 000000E7 7502                <1>     jne .cnr0
    97 000000E9 B010                <1>     mov al, 10h     ;Report ^P
    98                              <1> .cnr0:
    99 000000EB 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   100 000000EE E969FFFFFF          <1>     jmp .conExit
   101                              <1> .cnr1: ;No keystroke available
   102 000000F3 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   103 000000F9 E95EFFFFFF          <1>     jmp .conExit
   104                              <1> .cnr2:
   105 000000FE 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   106 00000104 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   107                              <1> 
   108                              <1> .conInputStatus:         ;Function 6
   109 00000106 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00000108 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   111 0000010B 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00000111 E946FFFFFF          <1>     jmp .conExit ;Exit, device ready
   113                              <1> 
   114                              <1> .conFlushInputBuffers:   ;Function 7
   115 00000116 B005                <1>     mov al, 05h ;Bad request structure length?
   116 00000118 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   117 0000011B 0F8535FFFFFF        <1>     jne .conWriteErrorCode
   118 00000121 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   119                              <1> .cfib0:
   120 00000128 B401                <1>     mov ah, 01      ;Get buffer status
   121 0000012A CD36                <1>     int 36h
   122 0000012C 0F842AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   123 00000132 30E4                <1>     xor ah, ah
   124 00000134 CD36                <1>     int 36h ;Read key to flush from buffer
   125 00000136 EBF0                <1>     jmp short .cfib0
   126                              <1> 
   127                              <1> .conWrite:   ;Function 8 and 9
   128 00000138 B005                <1>     mov al, 05h ;Bad request structure length?
   129 0000013A 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   130 0000013D 0F8513FFFFFF        <1>     jne .conWriteErrorCode
   131                              <1> 
   132 00000143 56                  <1>     push rsi
   133 00000144 51                  <1>     push rcx
   134 00000145 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   135 00000149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   136                              <1> .cw1: 
   137 0000014B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   138 0000014E 7407                <1>     je .cw2
   139 00000150 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   140 00000151 CD29                <1>     int 29h ;Fast print char
   141 00000153 FFC1                <1>     inc ecx
   142 00000155 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   143                              <1> .cw2:
   144 00000157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   145 0000015A 59                  <1>     pop rcx
   146 0000015B 5E                  <1>     pop rsi
   147 0000015C E9FBFEFFFF          <1>     jmp .conExit
   148                              <1> .conOutputStatus:   ;Function 0Ah
   149 00000161 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00000163 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   151 00000166 0F85EAFEFFFF        <1>     jne .conWriteErrorCode
   152 0000016C E9EBFEFFFF          <1>     jmp .conExit
   153                              <1> 
   154 00000171 00                  <1> .conBuf db 0    ;Single byte buffer
   155                              <1> fastOutput:         ;This CON driver supports Int 29h
   156                              <1> ;Called with char to transfer in al
   157 00000172 50                  <1>     push rax
   158 00000173 B40E                <1>     mov ah, 0Eh
   159 00000175 CD30                <1>     int 30h
   160 00000177 58                  <1>     pop rax
   161 00000178 48CF                <1>     iretq
   162                              <1> ctrlBreak:
   163                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   164 0000017A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   165 00000181 48CF                <1>     iretq
   166                              <1> 
   167                              <1> clkDriver:
   168 00000183 50                  <1>     push rax
   169 00000184 53                  <1>     push rbx
   170 00000185 51                  <1>     push rcx
   171 00000186 52                  <1>     push rdx
   172 00000187 56                  <1>     push rsi
   173 00000188 55                  <1>     push rbp
   174 00000189 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   175 00000190 B003                <1>     mov al, 03h ;Unknown Command
   176 00000192 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   177 00000196 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 00000198 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   180 0000019B 84C0                <1>     test al, al
   181 0000019D 743B                <1>     jz .clkInit
   182 0000019F 3C04                <1>     cmp al, 04h
   183 000001A1 7451                <1>     jz .clkRead
   184 000001A3 3C06                <1>     cmp al, 06h
   185 000001A5 0F84AE000000        <1>     jz .clkInputStatus
   186 000001AB 3C07                <1>     cmp al, 07h
   187 000001AD 0F84B6000000        <1>     jz .clkFlushInputBuffers
   188 000001B3 3C08                <1>     cmp al, 08h
   189 000001B5 0F84BE000000        <1>     jz .clkWrite
   190 000001BB 3C09                <1>     cmp al, 09h
   191 000001BD 0F84B6000000        <1>     jz .clkWrite
   192 000001C3 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 000001C5 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 000001C7 B480                <1>     mov ah, 80h ;Set error bit
   197 000001C9 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   198                              <1> .clkExit:
   199 000001CD 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Merge done bit
   200 000001D3 5D                  <1>     pop rbp
   201 000001D4 5E                  <1>     pop rsi
   202 000001D5 5A                  <1>     pop rdx
   203 000001D6 59                  <1>     pop rcx
   204 000001D7 5B                  <1>     pop rbx
   205 000001D8 58                  <1>     pop rax
   206 000001D9 C3                  <1>     ret
   207                              <1> .clkInit:           ;Function 0
   208 000001DA B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   209 000001DC F60510000000FF      <1>     test byte [.clkInitDone], -1
   210 000001E3 75E8                <1>     jnz short .clkExit
   211 000001E5 E8CB180000          <1>     call clockInit
   212 000001EA C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   213 000001F1 EBDA                <1>     jmp short .clkExit
   214 000001F3 00                  <1> .clkInitDone:   db 0
   215                              <1> 
   216                              <1> .clkRead:           ;Function 4
   217 000001F4 B005                <1>     mov al, 05h ;Bad request structure length?
   218 000001F6 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   219 000001F9 75CC                <1>     jne .clkWriteErrorCode
   220                              <1> 
   221 000001FB 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   222 000001FE 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   223 00000202 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   224 00000209 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   225 0000020D 30E4                <1>     xor ah, ah
   226 0000020F CD3A                <1>     int 3Ah         ;Read the system timer
   227 00000211 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   228 00000213 740D                <1>     jz .clkr1       ;Nope, now just time 
   229 00000215 30E4                <1>     xor ah, ah
   230                              <1>     ;This works as al should keep count of the # of days passed since last read
   231 00000217 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   232 0000021B 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   233                              <1> .clkr1:
   234 00000222 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   235 00000225 0FB7D2              <1>     movzx edx, dx
   236 00000228 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   237 0000022A 89D0                <1>     mov eax, edx
   238 0000022C 31D2                <1>     xor edx, edx
   239 0000022E 89D8                <1>     mov eax, ebx
   240 00000230 B944040000          <1>     mov ecx, 1092   
   241 00000235 F7F1                <1>     div ecx
   242 00000237 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   243 0000023A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244 0000023C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   245 00000240 31D2                <1>     xor edx, edx
   246 00000242 B95B000000          <1>     mov ecx, 91 ;5*18.2
   247 00000247 F7F1                <1>     div ecx
   248 00000249 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   249 0000024C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   250                              <1>     ;lea eax, dword [eax + 4*eax]
   251                              <1>     ;add eax, edx    ;Essentially multiply by 6
   252 0000024E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   253 00000251 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   254 00000254 E974FFFFFF          <1>     jmp .clkExit
   255                              <1> 
   256                              <1> .clkInputStatus:    ;Function 6
   257                              <1> ;Always return ready
   258 00000259 B005                <1>     mov al, 05h ;Bad request structure length?
   259 0000025B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   260 0000025E 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000264 E964FFFFFF          <1>     jmp .clkExit
   262                              <1> .clkFlushInputBuffers:  ;Function 7
   263                              <1> ;Always return done immediately
   264 00000269 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000026B 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   266 0000026E 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   267 00000274 E954FFFFFF          <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkWrite:          ;Functions 8 and 9
   270 00000279 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000027B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   272 0000027E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   273                              <1> 
   274 00000284 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   275 00000287 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   276 0000028B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   277 0000028F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   278                              <1> 
   279 00000296 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   280 00000298 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   281 0000029C B105                <1>     mov cl, 5
   282 0000029E F6F1                <1>     div cl          ;Divide al by 5
   283 000002A0 30E4                <1>     xor ah, ah      ;Remove the remainder
   284 000002A2 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   285                              <1> ;Using the decimal part of this formula for the low count
   286                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   287 000002A4 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   288 000002A7 B912000000          <1>     mov ecx, 18
   289 000002AC F7E1                <1>     mul ecx  
   290 000002AE 01C3                <1>     add ebx, eax
   291                              <1> 
   292 000002B0 31D2                <1>     xor edx, edx
   293 000002B2 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   294 000002B6 B944040000          <1>     mov ecx, 1092
   295 000002BB F7E1                <1>     mul ecx
   296 000002BD 01C3                <1>     add ebx, eax
   297 000002BF 89DA                <1>     mov edx, ebx    ;edx now has low count
   298 000002C1 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   299 000002C5 B401                <1>     mov ah, 01h     ;Set the system time
   300 000002C7 CD3A                <1>     int 3Ah
   301                              <1> 
   302 000002C9 4889F3              <1>     mov rbx, rsi
   303 000002CC E9FCFEFFFF          <1>     jmp .clkExit
   304                              <1> 
   305                              <1> .clkBCDtoHex:
   306                              <1> ;Converts a BCD value to a Hex byte
   307                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   308 000002D1 51                  <1>     push rcx
   309 000002D2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   310 000002D5 89C1                <1>     mov ecx, eax    ;Save al in ecx
   311 000002D7 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   312 000002DC 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   313 000002E2 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   314                              <1> .cbth0:
   315 000002E5 050A000000          <1>     add eax, 10
   316 000002EA E2F9                <1>     loop .cbth0
   317 000002EC 59                  <1>     pop rcx
   318 000002ED C3                  <1>     ret
   319                              <1> 
   320                              <1> .clkHexToBCD:
   321                              <1> ;Converts a Hex byte into two BCD digits
   322                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   323 000002EE 51                  <1>     push rcx
   324 000002EF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   325 000002F2 31C9                <1>     xor ecx, ecx
   326                              <1> .chtb0:
   327 000002F4 3D0A000000          <1>     cmp eax, 10
   328 000002F9 7209                <1>     jb .chtb1
   329 000002FB 2D0A000000          <1>     sub eax, 10
   330 00000300 FFC1                <1>     inc ecx
   331 00000302 EBF0                <1>     jmp short .chtb0
   332                              <1> .chtb1:
   333 00000304 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   334 00000307 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   335 00000309 59                  <1>     pop rcx
   336 0000030A C3                  <1>     ret
   337 0000030B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   338                              <1> 
   339                              <1> ;COM Driver headers and main interrupt strat
   340                              <1> com1Intr:
   341 0000030D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   342 00000314 EB19                <1>     jmp short comIntr
   343                              <1> com2Intr:
   344 00000316 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   345 0000031D EB10                <1>     jmp short comIntr
   346                              <1> com3Intr:
   347 0000031F C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   348 00000326 EB07                <1>     jmp short comIntr
   349                              <1> com4Intr:
   350 00000328 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   351                              <1> comIntr:
   352 0000032F 50                  <1>     push rax
   353 00000330 53                  <1>     push rbx
   354 00000331 51                  <1>     push rcx
   355 00000332 52                  <1>     push rdx
   356 00000333 56                  <1>     push rsi
   357 00000334 57                  <1>     push rdi
   358 00000335 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   359 0000033C B003                <1>     mov al, 03h ;Unknown Command
   360 0000033E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   361 00000342 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   362                              <1> 
   363 00000344 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   364 00000347 84C0                <1>     test al, al
   365 00000349 745B                <1>     jz short .comExit
   366 0000034B 3C04                <1>     cmp al, 4   ;Read Character(s)
   367 0000034D 7464                <1>     jz .comRead
   368 0000034F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   369 00000351 0F849D000000        <1>     jz .comNondestructiveRead   
   370 00000357 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   371 00000359 0F8486000000        <1>     jz .comReadInputStatus
   372 0000035F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   373 00000361 0F849C000000        <1>     jz .comFlushInputBuffers
   374 00000367 3C08                <1>     cmp al, 8
   375 00000369 0F84BA000000        <1>     jz .comWrite
   376 0000036F 3C09                <1>     cmp al, 9
   377 00000371 0F84B2000000        <1>     jz .comWrite
   378 00000377 3C0A                <1>     cmp al, 0Ah
   379 00000379 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   380 0000037F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   381                              <1> .comErrorNoCount:
   382 00000381 B002                <1>     mov al, 02h ;Unknown device
   383 00000383 EB1B                <1>     jmp short .comWriteErrorCode
   384                              <1> .comReadError:
   385 00000385 BA0B000000          <1>     mov edx, 0Bh
   386 0000038A EB05                <1>     jmp short .comError
   387                              <1> .comWriteError:
   388 0000038C BA0A000000          <1>     mov edx, 0Ah
   389                              <1> .comError:
   390 00000391 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   391 00000394 B902000000          <1>     mov ecx, 02h    ;Unknown device
   392 00000399 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   393 0000039B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   394 0000039E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   395                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   396 000003A0 B480                <1>     mov ah, 80h ;Set error bit
   397 000003A2 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   398                              <1> .comExit:
   399 000003A6 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   400 000003AC 5F                  <1>     pop rdi
   401 000003AD 5E                  <1>     pop rsi
   402 000003AE 5A                  <1>     pop rdx
   403 000003AF 59                  <1>     pop rcx
   404 000003B0 5B                  <1>     pop rbx
   405 000003B1 58                  <1>     pop rax
   406 000003B2 C3                  <1>     ret
   407                              <1> 
   408                              <1> .comRead:
   409 000003B3 B005                <1>     mov al, 05h ;Bad request structure length?
   410 000003B5 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   411 000003B8 75E6                <1>     jne .comWriteErrorCode
   412 000003BA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   413 000003BE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   414                              <1> .cr1:
   415 000003C0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   416 000003C3 741B                <1>     je .cre2
   417                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   418 000003C5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   419 000003CA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   420 000003D1 F8                  <1>     clc
   421 000003D2 CD34                <1>     int 34h ;Recieve Char
   422 000003D4 72BB                <1>     jc .comError
   423 000003D6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   424 000003D9 74EA                <1>     je .cr11
   425 000003DB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   426 000003DC FFC1                <1>     inc ecx
   427 000003DE EBE0                <1>     jmp short .cr1
   428                              <1> .cre2:
   429 000003E0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   430 000003E3 EBC1                <1>     jmp short .comExit
   431                              <1> 
   432                              <1> .comReadInputStatus:
   433 000003E5 B005                <1>     mov al, 05h ;Bad request structure length?
   434 000003E7 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   435 000003EA 75B4                <1>     jne .comWriteErrorCode
   436 000003EC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   437 000003F2 EBB2                <1>     jmp short .comExit
   438                              <1> 
   439                              <1> .comNondestructiveRead:
   440                              <1> ;The buffer is always empty for now (no keystroke available)
   441 000003F4 B005                <1>     mov al, 05h ;Bad request structure length?
   442 000003F6 803B0E              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ndInNoWaitPkt_size
   443 000003F9 75A5                <1>     jne .comWriteErrorCode
   444 000003FB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   445 00000401 EBA3                <1>     jmp short .comExit
   446                              <1> 
   447                              <1> .comFlushInputBuffers:
   448 00000403 B005                <1>     mov al, 05h ;Bad request structure length?
   449 00000405 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], flushReqPkt_size
   450 00000408 7596                <1>     jne .comWriteErrorCode
   451                              <1> .cfib0:
   452 0000040A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   453 00000411 B800020000          <1>     mov eax, 0200h    ;Recieve
   454 00000416 F8                  <1>     clc
   455 00000417 CD34                <1>     int 34h
   456 00000419 0F8262FFFFFF        <1>     jc .comErrorNoCount
   457 0000041F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   458 00000422 75E6                <1>     jne .cfib0
   459 00000424 E97DFFFFFF          <1>     jmp .comExit
   460                              <1> 
   461                              <1> .comWrite:
   462 00000429 B005                <1>     mov al, 05h ;Bad request structure length?
   463 0000042B 803B2A              <1>     cmp byte [rbx + drvReqPkt.hdrlen], ioReqPkt_size
   464 0000042E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   465                              <1> 
   466 00000434 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   467 00000438 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   468                              <1> .cw1: 
   469 0000043A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   470 0000043D 7417                <1>     je .cw2
   471 0000043F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   472 00000440 B401                <1>     mov ah, 01h ;Move function number into ah
   473 00000442 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   474 00000449 F8                  <1>     clc
   475 0000044A CD34                <1>     int 34h ;Transmit char
   476 0000044C 0F823FFFFFFF        <1>     jc .comError
   477 00000452 FFC1                <1>     inc ecx
   478 00000454 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   479                              <1> .cw2:
   480 00000456 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   481 00000459 E948FFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comOutputStatus:
   484                              <1> ;Read MODEM status
   485 0000045E B005                <1>     mov al, 05h ;Bad request structure length?
   486 00000460 803B0D              <1>     cmp byte [rbx + drvReqPkt.hdrlen], statusReqPkt_size
   487 00000463 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   488                              <1> 
   489 00000469 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   490 00000470 B403                <1>     mov ah, 03h     ;Get status
   491 00000472 F8                  <1>     clc
   492 00000473 CD34                <1>     int 34h
   493 00000475 0F8206FFFFFF        <1>     jc .comErrorNoCount
   494 0000047B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   495 00000480 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   496 00000483 F7D0                <1>     not eax      ;Bitwise inversion
   497 00000485 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   498 0000048A 6689441B03          <1>     mov word [rbx + rbx + drvReqPkt.status], ax  ;Add the busy bit
   499 0000048F E912FFFFFF          <1>     jmp .comExit
   500 00000494 00                  <1> .comDevice   db 0
   501                              <1> 
   502                              <1> ;Prn Drivers
   503                              <1> prnDriver:
   504 00000495 50                  <1>     push rax
   505 00000496 53                  <1>     push rbx
   506 00000497 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   507 0000049E B003                <1>     mov al, 03h ;Unknown Command
   508 000004A0 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], 24 ; Command code bigger than 24?
   509 000004A4 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   510 000004A6 8A4302              <1>     mov al, byte [rbx + drvReqPkt.cmdcde]
   511 000004A9 84C0                <1>     test al, al ;If the command code was Init, return ok!
   512 000004AB 7408                <1>     jz .prnExit 
   513                              <1>     ;Everything else, device not ready
   514 000004AD B002                <1>     mov al, drvNotReady
   515                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   516 000004AF B480                <1>     mov ah, 80h ;Set error bit
   517 000004B1 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   518                              <1> .prnExit:
   519 000004B5 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus    ;Merge done bit
   520 000004BB 5B                  <1>     pop rbx
   521 000004BC 58                  <1>     pop rax
   522 000004BD C3                  <1>     ret
    24                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> 
     2                              <1> msdDriver:
     3 000004BE 50                  <1>     push rax
     4 000004BF 53                  <1>     push rbx
     5 000004C0 51                  <1>     push rcx
     6 000004C1 52                  <1>     push rdx
     7 000004C2 56                  <1>     push rsi
     8 000004C3 57                  <1>     push rdi
     9 000004C4 55                  <1>     push rbp
    10 000004C5 4150                <1>     push r8
    11 000004C7 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    12 000004CE 0FB67302            <1>     movzx esi, byte [rbx + drvReqPkt.cmdcde]    ;Get the command code
    13 000004D2 81FE18000000        <1>     cmp esi, drvMAXCMD                  ;Command code bigger than max?
    14 000004D8 7741                <1>     ja .errBadCmd                 ;If yes, error!
    15 000004DA 488D2D4D000000      <1>     lea rbp, .fnTbl
    16 000004E1 488D7CB500          <1>     lea rdi, qword [rbp + 4*rsi]    ;Ptr to table entry
    17 000004E6 0FB737              <1>     movzx esi, word [rdi]   ;Get the offset from table into esi
    18 000004E9 85F6                <1>     test esi, esi           ;If the offset is 0, exit!
    19 000004EB 7417                <1>     jz .exit
    20 000004ED 0FB60B              <1>     movzx ecx, byte [rbx + drvReqPkt.hdrlen]       ;Get packet length
    21 000004F0 663B4F02            <1>     cmp cx, word [rdi + 2]          ;Cmp packet lengths
    22 000004F4 752C                <1>     jne .errBadPkt
    23 000004F6 4801EE              <1>     add rsi, rbp    ;Add the two to get the pointer!
    24 000004F9 0FB64301            <1>     movzx eax, byte [rbx + drvReqPkt.unitnm]    ;Get the unit to setup
    25 000004FD E815050000          <1>     call .setupDrive    ;Returns rbp -> Table entry
    26                              <1> ;Goto function! rbp -> Table entry, eax = Drive number. rbx -> Reqpkt
    27 00000502 FFD6                <1>     call rsi 
    28                              <1> .exit:
    29 00000504 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]  ;Get back the req header ptr
    30 0000050B 66814B030001        <1>     or word [rbx + drvReqPkt.status], drvDonStatus ;Set done bit
    31 00000511 4158                <1>     pop r8
    32 00000513 5D                  <1>     pop rbp
    33 00000514 5F                  <1>     pop rdi
    34 00000515 5E                  <1>     pop rsi
    35 00000516 5A                  <1>     pop rdx
    36 00000517 59                  <1>     pop rcx
    37 00000518 5B                  <1>     pop rbx
    38 00000519 58                  <1>     pop rax
    39 0000051A C3                  <1>     ret
    40                              <1> 
    41                              <1> .errBadCmd:
    42 0000051B B803000000          <1>     mov eax, drvBadCmd
    43 00000520 EB05                <1>     jmp short .writeEntryError
    44                              <1> .errBadPkt:
    45 00000522 B805000000          <1>     mov eax, drvBadDrvReq
    46                              <1> .writeEntryError:
    47                              <1> ;Used for errors in the driver entry
    48 00000527 E8DD000000          <1>     call .errorExit
    49 0000052C EBD6                <1>     jmp short .exit
    50                              <1> 
    51                              <1> 
    52                              <1> .fnTbl:
    53                              <1> ;Each table entry is 4 bytes to make searching easier. Low word is offset
    54                              <1> ; to function, high word is packet size for check
    55                              <1>     ;dw .initShim - .fnTbl        ;Function 0
    56 0000052E 0516                <1>     dw msdInit - .fnTbl
    57 00000530 1F00                <1>     dw initReqPkt_size
    58 00000532 E900                <1>     dw .medChk - .fnTbl          ;Function 1
    59 00000534 1700                <1>     dw mediaCheckReqPkt_size
    60 00000536 6901                <1>     dw .buildBPB - .fnTbl        ;Function 2
    61 00000538 1E00                <1>     dw bpbBuildReqPkt_size
    62 0000053A 3003                <1>     dw .IOCTLRead - .fnTbl       ;Function 3
    63 0000053C 2A00                <1>     dw ioReqPkt_size
    64 0000053E 3103                <1>     dw .read - .fnTbl            ;Function 4
    65 00000540 2A00                <1>     dw ioReqPkt_size
    66 00000542 0000                <1>     dw 0                         ;Function 5
    67 00000544 0000                <1>     dw 0
    68 00000546 0000                <1>     dw 0                         ;Function 6
    69 00000548 0000                <1>     dw 0
    70 0000054A 0000                <1>     dw 0                         ;Function 7
    71 0000054C 0000                <1>     dw 0
    72 0000054E 4F03                <1>     dw .write - .fnTbl           ;Function 8
    73 00000550 2A00                <1>     dw ioReqPkt_size
    74 00000552 4F03                <1>     dw .write - .fnTbl           ;Function 9
    75 00000554 2A00                <1>     dw ioReqPkt_size
    76 00000556 0000                <1>     dw 0                         ;Function 10
    77 00000558 0000                <1>     dw 0
    78 0000055A 0000                <1>     dw 0                         ;Function 11
    79 0000055C 0000                <1>     dw 0
    80 0000055E 3003                <1>     dw .IOCTLWrite - .fnTbl      ;Function 12
    81 00000560 2A00                <1>     dw ioReqPkt_size
    82 00000562 F003                <1>     dw .devOpen - .fnTbl         ;Function 13
    83 00000564 0D00                <1>     dw openReqPkt_size
    84 00000566 FE03                <1>     dw .devClose - .fnTbl        ;Function 14
    85 00000568 0D00                <1>     dw closeReqPkt_size
    86 0000056A 0C04                <1>     dw .remMed - .fnTbl          ;Function 15
    87 0000056C 0D00                <1>     dw remMediaReqPkt_size
    88 0000056E 0000                <1>     dw 0                         ;Function 16
    89 00000570 0000                <1>     dw 0
    90 00000572 0000                <1>     dw 0                         ;Function 17
    91 00000574 0000                <1>     dw 0
    92 00000576 0000                <1>     dw 0                         ;Function 18
    93 00000578 0000                <1>     dw 0
    94 0000057A 1C04                <1>     dw .IOCTL - .fnTbl           ;Function 19
    95 0000057C 2700                <1>     dw ioctlReqPkt_size
    96 0000057E 0000                <1>     dw 0                         ;Function 20
    97 00000580 0000                <1>     dw 0
    98 00000582 0000                <1>     dw 0                         ;Function 21
    99 00000584 0000                <1>     dw 0
   100 00000586 0000                <1>     dw 0                         ;Function 22
   101 00000588 0000                <1>     dw 0
   102 0000058A AD04                <1>     dw .getLogicalDev - .fnTbl   ;Function 23
   103 0000058C 0D00                <1>     dw getDevReqPkt_size
   104 0000058E E304                <1>     dw .setLogicalDev - .fnTbl   ;Function 24
   105 00000590 0D00                <1>     dw setDevReqPkt_size
   106                              <1> 
   107                              <1> ;DISK DRIVER ERROR HANDLER. Errors from within the functions come here!
   108                              <1> .errorXlat:
   109 00000592 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   110 00000599 B800010000          <1>     mov eax, 0100h
   111 0000059E CD33                <1>     int 33h ;Read status of last operation
   112 000005A0 7265                <1>     jc .genErrExit
   113                              <1> .ioError:   ;Jumped to from the blkIO processor with rbx -> reqHdr already
   114 000005A2 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
   115 000005A5 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   116 000005A7 7460                <1>     je .errorExit 
   117 000005A9 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   118 000005AB 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   119 000005AE 7459                <1>     je .errorExit 
   120 000005B0 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   121 000005B3 7454                <1>     je .errorExit
   122                              <1> ;Device Not Ready
   123 000005B5 B002                <1>     mov al, 02h  ;Device not ready code
   124 000005B7 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   125 000005BA 744D                <1>     je .errorExit
   126 000005BC 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   127 000005C0 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   128                              <1> ;Write Protected
   129 000005C4 30C0                <1>     xor al, al
   130 000005C6 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   131 000005CB 743C                <1>     je .errorExit
   132                              <1> ;CRC Error
   133 000005CD B004                <1>     mov al, 04h     ;CRC error code
   134 000005CF 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   135 000005D4 7433                <1>     je .errorExit
   136 000005D6 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   137 000005DB 742C                <1>     je .errorExit
   138 000005DD 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   139 000005E2 7425                <1>     je .errorExit
   140                              <1> ;Seek Error
   141 000005E4 B006                <1>     mov al, 06h     ;Seek error code
   142 000005E6 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   143 000005E9 741E                <1>     je .errorExit
   144                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   145                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   146 000005EB B007                <1>     mov al, 07h
   147 000005ED 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   148 000005F0 7417                <1>     je .errorExit
   149                              <1> ;Sector Not Found
   150 000005F2 B008                <1>     mov al, 08h     ;Sector not found code
   151 000005F4 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   152 000005F7 7410                <1>     je .errorExit
   153                              <1> ;Write faults
   154 000005F9 B00A                <1>     mov al, 0Ah     ;Write fault
   155 000005FB 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   156 000005FE 7409                <1>     je .errorExit
   157                              <1> ;Read faults
   158 00000600 B00B                <1>     mov al, 0Bh     ;Read fault
   159 00000602 80F911              <1>     cmp cl, 11h     ;Read error
   160 00000605 7402                <1>     je .errorExit
   161                              <1> ;General Errors
   162                              <1> .genErrExit:
   163 00000607 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   164                              <1> .errorExit:     ;Jump to with al=Standard Error code
   165 00000609 B480                <1>     mov ah, 80h ;Set error bit
   166 0000060B 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   167 00000612 66894303            <1>     mov word [rbx + drvReqPkt.status], ax
   168                              <1>     return      ;Return to set done bit
    13                              <2> %%_ret:
    14 00000616 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   169                              <1> 
   170                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   171                              <1> .medChk:          ;Function 1
   172 00000617 66F745370001        <1>     test word [rbp + drvBlk.wDevFlgs], devFmt
   173 0000061D 7417                <1>     jz .mcNoFormat
   174 0000061F 66816537FFFE        <1>     and word [rbp + drvBlk.wDevFlgs], ~devFmt   ;Clear this bit
   175 00000625 C605CC050000FF      <1>     mov byte [.bLastDsk], -1    ;Formatted so cannot rely on timer logic
   176 0000062C 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;If fixed, declare changed!
   177 00000632 754F                <1>     jnz .mmcChange
   178                              <1> ;For remdevs we now determine if the media was changed. If so, exit!
   179 00000634 EB08                <1>     jmp short .mcRem
   180                              <1> .mcNoFormat:
   181 00000636 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   182 0000063C 753B                <1>     jnz .mmcNoChange
   183                              <1> .mcRem:
   184 0000063E E803040000          <1>     call .checkDevType
   185 00000643 66F745370200        <1>     test word [rbp + drvBlk.wDevFlgs], devChgLine
   186 00000649 7516                <1>     jnz .mmcNoChangeLine
   187 0000064B 8A5509              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   188                              <1> ;Now we do a BIOS changeline check. We rely on it for drives with changeline.
   189                              <1> ;Start by setting the lastDsk to unknown since this only makes sense for
   190                              <1> ; disks without changeline support
   191 0000064E C605A3050000FF      <1>     mov byte [.bLastDsk], -1   
   192 00000655 B416                <1>     mov ah, 16h 
   193 00000657 CD33                <1>     int 33h
   194 00000659 7228                <1>     jc .mmcChange
   195                              <1> ;    cmp ah, 80h
   196                              <1> ;    je .mmcNoChangeLine
   197                              <1> ;    cmp ah, 86h
   198                              <1> ;    je .mmcNoChangeLine
   199 0000065B 84E4                <1>     test ah, ah ;No change?
   200 0000065D 741A                <1>     jz .mmcNoChange
   201 0000065F EB22                <1>     jmp short .mmcChange
   202                              <1>     ;test ah, 1  ;Neither 80h or 86h have bit 0 set
   203                              <1>     ;jnz .mmcChange
   204                              <1> .mmcNoChangeLine:
   205                              <1> ; If last accessed medchecked disk was this one and the time on this 
   206                              <1> ;  disk was more than 2 seconds ago, return unknown, else return ok.
   207 00000661 8A4508              <1>     mov al, byte [rbp + drvBlk.bDOSNum] ;Get this disk number for the check
   208 00000664 86058E050000        <1>     xchg byte [.bLastDsk], al ;Swap with the old disk number
   209 0000066A 380588050000        <1>     cmp byte [.bLastDsk], al    ;Are they equal? If not, unsure.
   210 00000670 750C                <1>     jne .mmcUnsure
   211                              <1> ;Else, now we do the famous time check. 
   212 00000672 E889040000          <1>     call .checkTime ;Sets CF if unsure. Else stays the same
   213 00000677 7205                <1>     jc .mmcUnsure
   214                              <1> .mmcNoChange:
   215 00000679 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000067D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> .mmcUnsure:
   218 0000067E C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   219                              <1>     return
    13                              <2> %%_ret:
    14 00000682 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   220                              <1> .mmcChange:
   221                              <1> ;Always store the volume label if we have a volume change.
   222 00000683 C6056E050000FF      <1>     mov byte [.bLastDsk], -1    ;Default to unknown disk if a change occured!
   223 0000068A 488D7D76            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   224 0000068E 48897B0F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rdi
   225 00000692 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000696 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> .buildBPB:        ;Function 2
   229                              <1> ;Only build BPB for removable devices and "non-locked" devices.
   230                              <1> ;Start by setting the pointer to the BPB in the reqpkt as this is 
   231                              <1> ; the table entry bpb which we will be returning.
   232 00000697 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   233 0000069D 751A                <1>     jnz .bbpbExit
   234                              <1> ;------------------------------------------------------
   235                              <1> ; Here for removable devices only!!
   236                              <1> ;------------------------------------------------------
   237 0000069F E83C000000          <1>     call .resetIds  ;Reset the drvBlk volume ids
   238 000006A4 4889DE              <1>     mov rsi, rbx    ;Move req ptr to rsi
   239 000006A7 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer 
   240 000006AB E883000000          <1>     call .updateBpb       ;Fill the BPB entries in the drvBlk
   241 000006B0 7221                <1>     jc .bbpbError
   242 000006B2 E8D8000000          <1>     call .moveVolIds    ;Move the volume ID's into the drvBlk if they exist.
   243 000006B7 7300                <1>     jnc .bbpbExit
   244                              <1> ;Here we will search the root directory for the volume label only!
   245                              <1> ;The FS string has been setup and volume ID is set to 0.
   246                              <1> ;
   247                              <1> ;   TEMP: DO NOTHING. USE DEFAULT STRING IN THIS CASE 
   248                              <1> ;
   249                              <1> .bbpbExit:
   250 000006B9 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]  ;Get the driver ptr
   251 000006C0 0FB64514            <1>     movzx eax, byte [rbp + drvBlk.bMedDesc] ;Get the meddesc from the bpb
   252 000006C4 88430D              <1>     mov byte [rbx + bpbBuildReqPkt.medesc], al
   253 000006C7 4881C50A000000      <1>     add rbp, drvBlk.bpb ;Move the drvBlk ptr to the BPB itself.
   254 000006CE 48896B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rbp
   255                              <1>     return
    13                              <2> %%_ret:
    14 000006D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .bbpbError:
   257 000006D3 3C07                <1>     cmp al, drvBadMed   ;In case of bad media, just present it.
   258 000006D5 0F842EFFFFFF        <1>     je .errorExit   
   259 000006DB E9B2FEFFFF          <1>     jmp .errorXlat  ;Else, get error code and xlat it to DOS error.
   260                              <1> 
   261                              <1> .resetIds:
   262                              <1> ;We reset the volume id string and label to the default for the 
   263                              <1> ; volume before the reset!
   264 000006E0 50                  <1>     push rax
   265 000006E1 53                  <1>     push rbx
   266 000006E2 51                  <1>     push rcx
   267 000006E3 56                  <1>     push rsi
   268 000006E4 57                  <1>     push rdi
   269                              <1> 
   270                              <1> ;1) Clear volume Id
   271 000006E5 C7457200000000      <1>     mov dword [rbp + drvBlk.volId], 0
   272                              <1> ;2) Reset the volume label to default
   273 000006EC 488D35FB040000      <1>     lea rsi, .defLbl
   274 000006F3 488D7D76            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   275 000006F7 B90C000000          <1>     mov ecx, 12
   276 000006FC F3A4                <1>     rep movsb
   277                              <1> ;3) Reset the FAT string
   278                              <1> ;Since fat32 indicator is in the middle, compare against it.
   279                              <1> ;If dskOff is set instead of FAT16, then FAT16 works as a default value :)
   280 000006FE 488D35E0040000      <1>     lea rsi, .fat32Str
   281 00000705 488D05C7040000      <1>     lea rax, .fat12Str
   282 0000070C 488D1DC9040000      <1>     lea rbx, .fat16Str
   283 00000713 F6453320            <1>     test byte [rbp + drvBlk.bBpbType], bpbFat32
   284 00000717 480F47F3            <1>     cmova rsi, rbx
   285 0000071B 480F42F0            <1>     cmovb rsi, rax
   286 0000071F 488DBD82000000      <1>     lea rdi, qword [rbp + drvBlk.filSysType]
   287 00000726 B909000000          <1>     mov ecx, 9
   288 0000072B F3A4                <1>     rep movsb
   289                              <1> 
   290 0000072D 5F                  <1>     pop rdi
   291 0000072E 5E                  <1>     pop rsi
   292 0000072F 59                  <1>     pop rcx
   293 00000730 5B                  <1>     pop rbx
   294 00000731 58                  <1>     pop rax
   295                              <1>     return
    13                              <2> %%_ret:
    14 00000732 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> .updateBpb:
   298                              <1> ;------------------------------------------------------
   299                              <1> ;Updates the BPB fields in drvBlk for the BPB on disk
   300                              <1> ; or failing, for the BPB indicated by the media byte.
   301                              <1> ;Never called on Fixed devs in normal operation.
   302                              <1> ;------------------------------------------------------
   303                              <1> ;Entered with: 
   304                              <1> ;   rbx -> Buffer to read bootsector into
   305                              <1> ;   rbp -> drvBlk for this drive
   306                              <1> ;------------------------------------------------------
   307 00000733 66F745370500        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devLockBPB
   308                              <1>     retnz  
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000739 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000073B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   309 0000073C E8F3000000          <1>     call .bbpbReadBS
   310                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000741 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000743 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   311                              <1> ;Check we if we have a valid bootsector.
   312 00000744 803B69              <1>     cmp byte [rbx], 069h   ;Direct jump has no NOP
   313 00000747 7414                <1>     je .newDisk
   314 00000749 803BE9              <1>     cmp byte [rbx], 0E9h    ;Short jump has no NOP
   315 0000074C 740F                <1>     je .newDisk
   316 0000074E 807B0290            <1>     cmp byte [rbx + 2], 090h  ;NOP
   317 00000752 7505                <1>     jne .oldDisk
   318 00000754 803BEB              <1>     cmp byte [rbx], 0EBh      ;JMP SHORT
   319 00000757 7404                <1>     je .newDisk
   320                              <1> .oldDisk:
   321                              <1>     ;call .bbpbReadFAT   ;Read the FAT sector now instead
   322                              <1>     ;retc
   323                              <1>     ;mov ax, word [rbx]
   324                              <1>     ;and ax, 0FFFh
   325                              <1>     ;cmp ah, 0Fh     ;High byte must be 0Fh at this point.
   326                              <1>     ;jne .bbpbErr
   327                              <1>     ;call .bbpbCheckMedByt   ;Checks media byte to be valid
   328                              <1>     ;jnz .bbpbErr
   329                              <1>     ;cmp al, 0F0h    ;0F0h and 0F8h are not acceptable here as they need BPB
   330                              <1>     ;je .bbpbErr
   331                              <1>     ;cmp al, 0F8h
   332                              <1>     ;je .bbpbErr
   333                              <1> .bbpbErr:
   334                              <1> ;Bad media bytes go here. Means the media is unknown.
   335 00000759 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code
   336 0000075B F9                  <1>     stc
   337                              <1>     return
    13                              <2> %%_ret:
    14 0000075C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> .newDisk:
   339 0000075D 4881C30B000000      <1>     add rbx, 11 ;Now point rbx to the BPB itself
   340 00000764 8A430A              <1>     mov al, byte [rbx + bpb.media]
   341 00000767 E8B5000000          <1>     call .bbpbCheckMedByt
   342                              <1> ;Update the drvBlk with info from the BPB.
   343                              <1> ;rbx points to the disk BPB. May be bad so we need to ensure the values 
   344                              <1> ; are ok before updating the msdTbl entry. 
   345 0000076C 4889DE              <1>     mov rsi, rbx    ;Source from the BPB in disk buffer
   346 0000076F 488D7D0A            <1>     lea rdi, qword [rbp + drvBlk.bpb]
   347 00000773 E849000000          <1>     call .bbpbGetFAT    ;Fat type is given in edx
   348 00000778 885533              <1>     mov byte [rbp + drvBlk.bBpbType], dl    ;Save the FAT type
   349                              <1> ;Get the correct length to correctly position rsi over the extended bs struct
   350                              <1> ; if it is present
   351 0000077B B819000000          <1>     mov eax, bpb_size
   352 00000780 B935000000          <1>     mov ecx, bpb32_size ;Now copy the BPB over!
   353 00000785 80FA20              <1>     cmp dl, bpbFat32
   354 00000788 0F45C8              <1>     cmovne ecx, eax     ;If not FAT32, replace move count
   355 0000078B F3A4                <1>     rep movsb   
   356 0000078D F8                  <1>     clc     ;Ensure if we return here, we return with CF happy :)
   357                              <1>     return
    13                              <2> %%_ret:
    14 0000078E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> .moveVolIds:
   360                              <1> ;Now check the BPB for a extBs. If it is present, we copy the information.
   361                              <1> ;Input: rsi -> End of the BPB in sector. rbx -> BPB in sector. rbp -> drvBlk
   362                              <1> ;Output: CF=CY: No volume label in sector found.
   363                              <1> ;        CF=NC: Volume Label in sector found and copied.
   364 0000078F 807E0229            <1>     cmp byte [rsi + extBs.bootSig], extBsSig
   365 00000793 752A                <1>     jne .mviNoSig
   366                              <1> ;Else, now we copy the volume information from the extended bs info block
   367 00000795 8B4603              <1>     mov eax, dword [rsi + extBs.volId]
   368 00000798 894572              <1>     mov dword [rbp + drvBlk.volId], eax
   369 0000079B 4881C607000000      <1>     add rsi, extBs.volLab
   370 000007A2 488D7D76            <1>     lea rdi, qword [rbp + drvBlk.volLab]
   371 000007A6 B90B000000          <1>     mov ecx, 11 ;Copy the volume label
   372 000007AB F3A4                <1>     rep movsb   
   373                              <1>     ;rsi now points to the filSysType field in the extBs.
   374 000007AD 48FFC7              <1>     inc rdi     ;Now move rdi to the filSysType field in the drvBlk.
   375 000007B0 B908000000          <1>     mov ecx, 8  ;Now copy the 8 char string over too
   376 000007B5 F3A4                <1>     rep movsb   
   377                              <1> ;Clear the devswap bit now as we have a good BPB for this drive
   378 000007B7 66816537BFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devSwap
   379 000007BD F8                  <1>     clc
   380                              <1>     return
    13                              <2> %%_ret:
    14 000007BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   381                              <1> .mviNoSig:
   382 000007BF F9                  <1>     stc
   383                              <1>     return
    13                              <2> %%_ret:
    14 000007C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> .bbpbGetFAT:
   386                              <1> ;Computes FAT type. Returns bpb flag in edx. rbx -> BPB itself
   387 000007C1 0FB70B              <1>     movzx ecx, word [rbx + bpb.bytsPerSec]
   388 000007C4 89C8                <1>     mov eax, ecx
   389 000007C6 FFC8                <1>     dec eax
   390 000007C8 0FB75306            <1>     movzx edx, word [rbx + bpb.rootEntCnt]
   391 000007CC C1E205              <1>     shl edx, 5  ;Multiply by 32 (dir entry size)
   392 000007CF 01D0                <1>     add eax, edx
   393 000007D1 31D2                <1>     xor edx, edx
   394 000007D3 F7F1                <1>     div ecx     ;eax = Root Dir sectors
   395 000007D5 50                  <1>     push rax    ;Save Root Dir sectors on the stack
   396 000007D6 0FB7430B            <1>     movzx eax, word [rbx + bpb.FATsz16]
   397 000007DA 8B5319              <1>     mov edx, dword [rbx + bpb32.FATsz32]
   398 000007DD 85C0                <1>     test eax, eax
   399 000007DF 0F44C2              <1>     cmovz eax, edx
   400 000007E2 0FB64B05            <1>     movzx ecx, byte [rbx + bpb.numFATs]
   401 000007E6 F7E1                <1>     mul ecx         ;eax = BPB_NumFATs * FATSz
   402 000007E8 59                  <1>     pop rcx         ;Get RootDirSectors into ecx
   403 000007E9 0FB75303            <1>     movzx edx, word [rbx + bpb.revdSecCnt]
   404 000007ED 01C1                <1>     add ecx, eax    ;ecx = (BPB_NumFATs * FATSz) + RootDirSectors
   405 000007EF 01D1                <1>     add ecx, edx    ;ecx = (BPB_ResvdSecCnt + ecx)
   406 000007F1 0FB74308            <1>     movzx eax, word [rbx + bpb.totSec16]
   407 000007F5 8B5315              <1>     mov edx, dword [rbx + bpb32.totSec32]
   408 000007F8 85C0                <1>     test eax, eax
   409 000007FA 0F44C2              <1>     cmovz eax, edx  ;eax = Totsec
   410 000007FD 29C8                <1>     sub eax, ecx    ;Datasec [eax] = eax - ecx
   411 000007FF 0FB64B02            <1>     movzx ecx, byte [rbx + bpb.secPerClus]
   412 00000803 31D2                <1>     xor edx, edx
   413 00000805 F7F1                <1>     div ecx         ;eax = CountofClusters = DataSec / BPB_SecPerClus;
   414 00000807 BA10000000          <1>     mov edx, bpbFat12
   415 0000080C 3DF50F0000          <1>     cmp eax, fat12MaxClustCnt
   416                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000811 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000813 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   417 00000814 D1E2                <1>     shl edx, 1  ;Move bit into FAT32 position
   418 00000816 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt
   419                              <1>     retnb   ;If above or equal, its in FAT32
    69                              <2> cret nb
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000081B 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000081D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   420 0000081E D1E2                <1>     shl edx, 1  ;Else move into FAT16 position
   421                              <1>     return
    13                              <2> %%_ret:
    14 00000820 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> 
   423                              <1> .bbpbCheckMedByt:
   424                              <1> ;Checks the media byte is of a valid type. Refuse media bytes we don't
   425                              <1> ; recognise as this is a sign of an unhealthy volume.
   426                              <1> ;Accept values 0FFh - 0F8h and 0F0h.
   427                              <1> ;Values 0FAh, 0F8h and 0F0h NEED to come from BPB. If found from FAT, then 
   428                              <1> ; do not accept the volume!
   429                              <1> ;Input: al = Media byte. 
   430                              <1> ;Ouput: ZF=NZ: Bad media byte. ZF=ZE: Ok media byte!
   431 00000821 3CF0                <1>     cmp al, 0F0h
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000823 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000825 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   433 00000826 3CF8                <1>     cmp al, 0F8h
   434                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000828 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000082A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   435 0000082B 38C0                <1>     cmp al, al  ;Set ZF
   436                              <1>     return
    13                              <2> %%_ret:
    14 0000082D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> .bbpbReadFAT:
   439                              <1> ;Reads the first FAT sector of media we are playing with.
   440                              <1> ;Input: rbx -> Buffer we are xacting on
   441 0000082E 31C9                <1>     xor ecx, ecx
   442 00000830 FFC1                <1>     inc ecx         ;Read Sector 1...
   443 00000832 EB02                <1>     jmp short .bbpbReadEp
   444                              <1> .bbpbReadBS:
   445                              <1> ;Reads the bootsector of media we are playing with.
   446                              <1> ;Input: rbx -> Buffer we are xacting on
   447 00000834 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   448                              <1> .bbpbReadEp:
   449 00000836 BF05000000          <1>     mov edi, 5      ;Retry 5 times
   450                              <1> .bbpbrbsLp:
   451 0000083B 0FB65509            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   452 0000083F 034D1B              <1>     add ecx, dword [rbp + drvBlk.dHiddSec]      ;Of selected volume!
   453 00000842 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   454 00000847 CD33                <1>     int 33h
   455 00000849 0F8390000000        <1>     jnc .bioExit    ;Exit via the IO exit
   456 0000084F FFCF                <1>     dec edi         ;Dec the counter
   457 00000851 7409                <1>     jz .bbpbrbsErr   ;If we are out of counts, sorry buddy :(
   458 00000853 B800010000          <1>     mov eax, 0100h  ;Now read status of last error
   459 00000858 CD33                <1>     int 33h
   460 0000085A EBDF                <1>     jmp short .bbpbrbsLp    ;And try again
   461                              <1> .bbpbrbsErr:
   462 0000085C F9                  <1>     stc
   463                              <1>     return
    13                              <2> %%_ret:
    14 0000085D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> .IOCTLRead:       ;Function 3, returns immediately
   466                              <1> .IOCTLWrite:      ;Function 12, returns done
   467                              <1>     return
    13                              <2> %%_ret:
    14 0000085E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> .read:            ;Function 4
   470                              <1> ;Will read one sector at a time.
   471 0000085F E861020000          <1>     call .ioSetVolLbl
   472 00000864 E8DD010000          <1>     call .checkDevType
   473 00000869 4889DF              <1>     mov rdi, rbx
   474 0000086C 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   475                              <1> .msdr0:
   476 0000086E B682                <1>     mov dh, 82h ;LBA Read Sectors
   477 00000870 E845000000          <1>     call .blkIO
   478 00000875 E82E000000          <1>     call .ioAdv
   479 0000087A 75F2                <1>     jne .msdr0
   480                              <1>     return
    13                              <2> %%_ret:
    14 0000087C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> 
   482                              <1> .write:           ;Function 8/9
   483                              <1> ;Will write and optionally verify one sector at a time.
   484 0000087D E843020000          <1>     call .ioSetVolLbl
   485 00000882 E8BF010000          <1>     call .checkDevType
   486 00000887 4889DF              <1>     mov rdi, rbx
   487 0000088A 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   488                              <1> .msdw0:
   489 0000088C B683                <1>     mov dh, 83h ;LBA Write Sectors
   490 0000088E E827000000          <1>     call .blkIO
   491 00000893 807F0209            <1>     cmp byte [rdi + ioReqPkt.cmdcde], drvWRITEVERIFY
   492 00000897 7507                <1>     jne .msdw1
   493 00000899 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   494 0000089B E81A000000          <1>     call .blkIO
   495                              <1> .msdw1:
   496 000008A0 E803000000          <1>     call .ioAdv
   497 000008A5 75E5                <1>     jne .msdw0
   498                              <1>     return
    13                              <2> %%_ret:
    14 000008A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> .ioAdv:
   501                              <1> ;Advances the buffers on successful IO. 
   502                              <1> ;If returns ZF=ZE, we have completed all the IO for the request.
   503 000008A8 0FB7450A            <1>     movzx eax, word [rbp + drvBlk.wBpS] 
   504 000008AC 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   505 000008B0 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   506 000008B4 FFC6                <1>     inc esi
   507 000008B6 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   508                              <1>     return
    13                              <2> %%_ret:
    14 000008B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> 
   510                              <1> .blkIO:  ;Does block IO
   511                              <1> ;Error handled internally
   512                              <1> ;Sector count handled by caller
   513                              <1> ;Called with dh = BIOS function number, rdi -> ioReqPkt, rbp -> drvBlk
   514 000008BA 66F745370002        <1>     test word [rbp + drvBlk.wDevFlgs], devUnFmt
   515 000008C0 7551                <1>     jnz .bioufmted
   516 000008C2 56                  <1>     push rsi    ;Save sector count
   517 000008C3 BE05000000          <1>     mov esi, 5  ;Retry counter five times
   518                              <1> .biolp:
   519 000008C8 8A5509              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   520 000008CB 8B4D1B              <1>     mov ecx, dword [rbp + drvBlk.dHiddSec]  ;Goto start of volume
   521 000008CE 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   522 000008D2 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   523 000008D6 88F4                <1>     mov ah, dh
   524 000008D8 B001                <1>     mov al, 01h ;Do one sector at a time 
   525 000008DA CD33                <1>     int 33h
   526 000008DC 7219                <1>     jc .bioError
   527 000008DE 5E                  <1>     pop rsi ;Rebalance stack
   528                              <1> .bioExit:
   529 000008DF 8A4508              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   530 000008E2 880510030000        <1>     mov byte [.bLastDsk], al    ;Last DOS disk accessed
   531 000008E8 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed
   532                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000008EE 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000008F0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   533 000008F1 E8FA010000          <1>     call .setTime   ;Set the current time and clear state for successful IO
   534                              <1>     return
    13                              <2> %%_ret:
    14 000008F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> .bioError:
   536 000008F7 B800010000          <1>     mov eax, 0100h
   537 000008FC CD33                <1>     int 33h ;Read status of last operation
   538 000008FE FFCE                <1>     dec esi
   539 00000900 75C6                <1>     jnz .biolp
   540 00000902 5E                  <1>     pop rsi     ;Rebalance the stack
   541 00000903 5B                  <1>     pop rbx     ;Drop the return pointer to balance stack
   542 00000904 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]
   543 0000090B 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
   544 0000090E E98FFCFFFF          <1>     jmp .ioError
   545                              <1> .bioufmted:
   546 00000913 58                  <1>     pop rax ;Drop ret ptr
   547 00000914 B807000000          <1>     mov eax, drvBadMed
   548 00000919 E9EBFCFFFF          <1>     jmp .errorExit
   549                              <1> 
   550                              <1> .devOpen:         ;Function 13
   551 0000091E 66817D34FFFF        <1>     cmp word [rbp + drvBlk.wOpenCnt], -1
   552                              <1>     rete  ;Inc past -1 does nothing!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000924 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000926 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   553 00000927 66FF4534            <1>     inc word [rbp + drvBlk.wOpenCnt]
   554                              <1>     return
    13                              <2> %%_ret:
    14 0000092B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> .devClose:        ;Function 14
   556 0000092C 66817D340000        <1>     cmp word [rbp + drvBlk.wOpenCnt], 0
   557                              <1>     rete    ;Dec past zero does nothing
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000932 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000934 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   558 00000935 66FF4D34            <1>     dec word [rbp + drvBlk.wOpenCnt]
   559                              <1>     return
    13                              <2> %%_ret:
    14 00000939 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> .remMed:  ;Function 15
   561                              <1> ;Sets busy bit if fixed drive!
   562 0000093A 66F745370100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed ;Is it fixed?
   563                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000940 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000942 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   564 00000943 66C743030002        <1>     mov word [rbx + remMediaReqPkt.status], drvBsyStatus
   565                              <1>     return
    13                              <2> %%_ret:
    14 00000949 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   566                              <1> 
   567                              <1> .IOCTL:    ;Function 19
   568                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   569                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params).
   570 0000094A 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   571 0000094E B803000000          <1>     mov eax, drvBadCmd
   572 00000953 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   573 00000956 0F85ADFCFFFF        <1>     jne .errorExit  ;If not, exit bad
   574 0000095C F6C180              <1>     test cl, 80h    ;Extended function bit set?
   575 0000095F 0F84A4FCFFFF        <1>     jz .errorExit
   576 00000965 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   577 00000968 80F941              <1>     cmp cl, 41h     
   578 0000096B 7438                <1>     je .gIOCTLWrite
   579 0000096D 80F942              <1>     cmp cl, 42h
   580 00000970 744A                <1>     je .gIOCTLFormat
   581 00000972 80F960              <1>     cmp cl, 60h
   582 00000975 0F858EFCFFFF        <1>     jne .errorExit  ;Error if not this function with bad command
   583                              <1>     ;Get params here
   584 0000097B 0FB65509            <1>     movzx edx, byte [rbp + drvBlk.bBIOSNum]
   585 0000097F B800880000          <1>     mov eax, 8800h ;Read LBA Device Parameters
   586 00000984 53                  <1>     push rbx
   587 00000985 CD33                <1>     int 33h
   588                              <1>     ;Returns:
   589                              <1>     ;rbx = Sector size in bytes
   590                              <1>     ;rcx = Last LBA block
   591 00000987 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   592 0000098A 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   593 0000098B 0F8201FCFFFF        <1>     jc .errorXlat
   594                              <1> ;Get LBA Table:
   595                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   596                              <1> ;Offset 1:  Reserved, 7 bytes
   597                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   598                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   599 00000991 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   600 00000995 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   601 0000099C 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   602 000009A0 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   603                              <1>     return
    13                              <2> %%_ret:
    14 000009A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   604                              <1> 
   605                              <1> .gIOCTLWrite:
   606                              <1> ;Write Table:
   607                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   608                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   609                              <1> ;Offset 2:  Reserved, 6 bytes
   610                              <1> ;Offset 8:  Sector to start format at (QWORD)
   611                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   612 000009A5 E81B000000          <1>     call .gIOCTLFormatWriteSetup
   613 000009AA 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   614 000009AE B483                <1>     mov ah, 83h
   615                              <1> .gIOCTLwfCommon:
   616 000009B0 CD33                <1>     int 33h
   617 000009B2 0F82DAFBFFFF        <1>     jc .errorXlat
   618 000009B8 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   619                              <1>     return 
    13                              <2> %%_ret:
    14 000009BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   620                              <1> 
   621                              <1> .gIOCTLFormat:
   622                              <1> ;Format Table:
   623                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   624                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   625                              <1> ;Offset 2:  Reserved, 6 bytes
   626                              <1> ;Offset 8:  Sector to start format at (QWORD)
   627 000009BC E804000000          <1>     call .gIOCTLFormatWriteSetup
   628 000009C1 B485                <1>     mov ah, 85h
   629 000009C3 EBEB                <1>     jmp short .gIOCTLwfCommon
   630                              <1> 
   631                              <1> .gIOCTLFormatWriteSetup:
   632                              <1> ;Sets the following:
   633                              <1> ;al = Number of sectors to write/format
   634                              <1> ;rcx = Sector to begin transfer at
   635                              <1> ;dl = BIOS Drive to do transfer on
   636                              <1> ;rsi = Driver Packet (usually set to rbx)
   637                              <1> ;rdi = Write/Format packet
   638 000009C5 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   639 000009C9 8A5509              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]    ;Get BIOS number for device
   640 000009CC 4889DE              <1>     mov rsi, rbx
   641 000009CF 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   642 000009D3 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   643 000009D6 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   644                              <1>     return
    13                              <2> %%_ret:
    14 000009DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   645                              <1> 
   646                              <1> .getLogicalDev:   ;Function 23
   647                              <1> ;Returns 0 if device not multi. Else 1 based number of current drive
   648                              <1> ; owner of the BIOS device is returned in getDevReqPkt.unitnm
   649 000009DB 31C0                <1>     xor eax, eax
   650 000009DD 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
   651 000009E3 7428                <1>     jz .gldExit
   652 000009E5 0FB64509            <1>     movzx eax, byte [rbp + drvBlk.bBIOSNum] ;Now find owner of this BIOS drv
   653 000009E9 488D2D11020000      <1>     lea rbp, .drvBlkTbl ;Start from head of table :)
   654                              <1> .gldLp:
   655 000009F0 384509              <1>     cmp byte [rbp + drvBlk.bBIOSNum], al
   656 000009F3 480F456D00          <1>     cmovne rbp, qword [rbp +  drvBlk.pLink] ;If not for BIOS drive, goto next
   657 000009F8 75F6                <1>     jne .gldLp
   658 000009FA 66F745372000        <1>     test word [rbp + drvBlk.wDevFlgs], devOwnDrv
   659 00000A00 480F446D00          <1>     cmovz rbp, qword [rbp +  drvBlk.pLink]  ;If not owner goto next
   660 00000A05 74E9                <1>     jz .gldLp 
   661 00000A07 0FB64508            <1>     movzx eax, byte [rbp + drvBlk.bDOSNum]  ;Else get DOS number for owner
   662 00000A0B FFC0                <1>     inc eax ;Make it 1 based
   663                              <1> .gldExit:
   664 00000A0D 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al    ;Return value in unitnum
   665                              <1>     return
    13                              <2> %%_ret:
    14 00000A10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   666                              <1> 
   667                              <1> .setLogicalDev:   ;Function 24
   668 00000A11 E830000000          <1>     call .checkDevType  ;Set the unit as the owner of this BIOS drive!
   669                              <1>     return
    13                              <2> %%_ret:
    14 00000A16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   670                              <1> 
   671                              <1> .setupDrive:
   672                              <1> ;Finds the DOS drive in the linked list which is for this drive, and
   673                              <1> ; sets up internal vars according to it. 
   674                              <1> ;Input: eax = Zero based DOS drive number. rbx -> Packet
   675                              <1> ;Output: .pCurDrv setup for us. rbp = Same value
   676 00000A17 807B0200            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvINIT
   677                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A1B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A1D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   678 00000A1E 488D2DDC010000      <1>     lea rbp, .drvBlkTbl
   679                              <1> .sdChk:
   680 00000A25 384508              <1>     cmp byte [rbp + drvBlk.bDOSNum], al
   681 00000A28 7414                <1>     je .sdExit
   682 00000A2A 488B6D00            <1>     mov rbp, qword [rbp +  drvBlk.pLink]
   683 00000A2E 4881FDFFFFFFFF      <1>     cmp rbp, -1
   684 00000A35 75EE                <1>     jne .sdChk  ;Keep looping until end of table
   685 00000A37 B007                <1>     mov al, drvBadMed
   686 00000A39 E9CBFBFFFF          <1>     jmp .errorExit  ;Return through this exit
   687                              <1> .sdExit:
   688 00000A3E 48892DB4010000      <1>     mov qword [.pCurDrv], rbp
   689                              <1>     return
    13                              <2> %%_ret:
    14 00000A45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   690                              <1> 
   691                              <1> .checkDevType:
   692                              <1> ;Checks if we need to display the swap drive message and displays it if so.
   693                              <1> ;The device must already be setup in rbp (and var) for this to work.
   694                              <1> ;Input: rbx -> Request block. rbp -> drvBlk entry 
   695 00000A46 66F745372100        <1>     test word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   696                              <1>     retnz   ;If fixed or already owns drv, don't allow swapping
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A4C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A4E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   697 00000A4F 66F745371000        <1>     test word [rbp + drvBlk.wDevFlgs], devMulti
   698                              <1>     retz    ;If only one drive owns this letter, exit
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A55 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A57 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   699                              <1> ;Else, now we find the current owner of this drive letter :)
   700 00000A58 8A4509              <1>     mov al, byte [rbp + drvBlk.bBIOSNum]   ;Cmp by bios numbers
   701                              <1> .cdtSetEp:
   702 00000A5B 488D3D9F010000      <1>     lea rdi, .drvBlkTbl  ;Point to the first drvBlk
   703                              <1> .cdtLp:
   704 00000A62 4881FFFFFFFFFF      <1>     cmp rdi, -1
   705 00000A69 744E                <1>     je .cdtBadExit
   706 00000A6B 4839EF              <1>     cmp rdi, rbp    ;Skip the current device pointer
   707 00000A6E 740D                <1>     je .cdtNextEntry
   708 00000A70 384709              <1>     cmp byte [rdi + drvBlk.bBIOSNum], al   
   709 00000A73 7508                <1>     jne .cdtNextEntry   ;Skip entry if not for device in question.
   710                              <1>     ;Now we check if this is the current owner of the device?
   711 00000A75 66F747372000        <1>     test word [rdi + drvBlk.wDevFlgs], devOwnDrv
   712 00000A7B 7505                <1>     jnz .cdtDevFnd
   713                              <1> .cdtNextEntry:
   714 00000A7D 488B3F              <1>     mov rdi, qword [rdi + drvBlk.pLink]
   715 00000A80 EBE0                <1>     jmp short .cdtLp
   716                              <1> .cdtDevFnd:
   717                              <1> ;Now we swap owners. rdi (current owner) looses ownership, rbp (request
   718                              <1> ; device) gains ownership.
   719 00000A82 66816737DFFF        <1>     and word [rdi + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear rdi own
   720 00000A88 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv     ;Set rbp to own
   721                              <1> ;If a set map request, don't prompt the message!
   722 00000A8E 807B0218            <1>     cmp byte [rbx + drvReqPkt.cmdcde], drvSETDRVMAP
   723                              <1>     rete    ;Return if equal (clears CF)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000A92 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000A94 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   724                              <1> 
   725                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
   726 00000A95 8A4508              <1>     mov al, byte [rbp + drvBlk.bDOSNum]
   727 00000A98 0441                <1>     add al, "A" ;Convert to a letter
   728 00000A9A 88050F010000        <1>     mov byte [.strikeMsgLetter], al
   729 00000AA0 488D35F5000000      <1>     lea rsi, .strikeMsg
   730 00000AA7 B937000000          <1>     mov ecx, .strikeMsgL
   731                              <1> .cdtPrint:
   732 00000AAC AC                  <1>     lodsb   ;Get the char in al, inc rsi
   733 00000AAD CD29                <1>     int 29h ;Print char in al
   734 00000AAF FFC9                <1>     dec ecx
   735 00000AB1 75F9                <1>     jnz .cdtPrint
   736 00000AB3 31C0                <1>     xor eax, eax
   737 00000AB5 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   738                              <1> ;THIS BIT IS NOT MULTITASKING FRIENDLY...
   739                              <1> 
   740 00000AB7 F8                  <1>     clc ;Indicate goodness through CF
   741                              <1>     return
    13                              <2> %%_ret:
    14 00000AB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   742                              <1> .cdtBadExit:
   743 00000AB9 58                  <1>     pop rax
   744 00000ABA B807000000          <1>     mov eax, drvBadMed
   745 00000ABF F9                  <1>     stc ;Indicate badness through CF
   746 00000AC0 E944FBFFFF          <1>     jmp .errorExit
   747                              <1> 
   748                              <1> .ioSetVolLbl:
   749                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
   750                              <1> ;Input: rbx -> io request packet
   751                              <1> ;       rbp -> drvBlk to get volume ID from
   752                              <1> ;Output: Pointer placed in io request packet
   753 00000AC5 50                  <1>     push rax
   754 00000AC6 488D4572            <1>     lea rax, qword [rbp + drvBlk.volId]    ;Get the volId from the BPB
   755 00000ACA 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
   756 00000ACE 58                  <1>     pop rax
   757 00000ACF C3                  <1>     ret
   758                              <1> 
   759                              <1> .getTime:
   760                              <1> ;Gets the current time in a format ready to be used for disk access.
   761 00000AD0 31C0                <1>     xor eax, eax
   762 00000AD2 CD3A                <1>     int 3Ah
   763 00000AD4 0FB7D2              <1>     movzx edx, dx
   764 00000AD7 C1E110              <1>     shl ecx, 16 ;Move the high word into place, fill low word with 0's
   765 00000ADA 09D1                <1>     or ecx, edx ;Store the current time count into ecx
   766 00000ADC 84C0                <1>     test al, al ;Are we rolling over? al tells us how many days...
   767 00000ADE 740E                <1>     jz .stStore
   768 00000AE0 0FB6C0              <1>     movzx eax, al
   769 00000AE3 51                  <1>     push rcx    ;Save the current time count
   770 00000AE4 B9B0001800          <1>     mov ecx, 1800B0h    ;A single day's worth of ticks at 55ms
   771 00000AE9 F7E1                <1>     mul ecx
   772 00000AEB 59                  <1>     pop rcx
   773 00000AEC 01C1                <1>     add ecx, eax        ;Add "al" worth of ticks at 55ms to ecx :)
   774                              <1> .stStore:
   775 00000AEE F8                  <1>     clc
   776                              <1>     return
    13                              <2> %%_ret:
    14 00000AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   777                              <1> 
   778                              <1> .setTime:
   779                              <1> ;Sets the current time to the disk drive and resets the access counter
   780 00000AF0 E8DBFFFFFF          <1>     call .getTime
   781 00000AF5 894D6E              <1>     mov dword [rbp + drvBlk.dAccTime], ecx  ;And store it
   782 00000AF8 C605F800000000      <1>     mov byte [.bAccCnt], 0  ;And set the access count back to 0
   783                              <1>     return
    13                              <2> %%_ret:
    14 00000AFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   784                              <1> 
   785                              <1> .checkTime:
   786                              <1> ;Does the time/access count check :)
   787                              <1> ;Returns: CF=CY if unknown, CF=NC if no change
   788 00000B00 E8CBFFFFFF          <1>     call .getTime   ;Returns in ecx the current time
   789 00000B05 85C9                <1>     test ecx, ecx   ;If this is 0 for some reason, use the accesses count  
   790 00000B07 7517                <1>     jnz .ctOk
   791 00000B09 FE05E8000000        <1>     inc byte [.bAccCnt]
   792 00000B0F 803DE100000005      <1>     cmp byte [.bAccCnt], maxAcc ;If below, we say ok!
   793 00000B16 7217                <1>     jb .ctNoChange
   794 00000B18 FE0DD9000000        <1>     dec byte [.bAccCnt] ;Else drop the inc and say unsure
   795 00000B1E EB0D                <1>     jmp short .ctMaybeCh
   796                              <1> .ctOk:
   797 00000B20 8B556E              <1>     mov edx, dword [rbp + drvBlk.dAccTime]  ;Get last disk access time
   798                              <1> ;ecx = time of current check, adjusted for day rollovers 
   799 00000B23 29D1                <1>     sub ecx, edx    
   800 00000B25 81F924000000        <1>     cmp ecx, 36 ;Is this leq 36? 36 ticks at 55ms is approx 2 seconds.
   801 00000B2B 7602                <1>     jbe .ctNoChange
   802                              <1> .ctMaybeCh:
   803 00000B2D F9                  <1>     stc
   804                              <1>     return
    13                              <2> %%_ret:
    14 00000B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> .ctNoChange:
   806 00000B2F F8                  <1>     clc
   807                              <1>     return
    13                              <2> %%_ret:
    14 00000B30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> 
   809                              <1> .i2fEp:
   810                              <1> ;Back door into the block driver :)
   811 00000B31 80FC08              <1>     cmp ah, 08h
   812 00000B34 7512                <1>     jne .i2fNotUs
   813 00000B36 84C0                <1>     test al, al ;AL=00, Install check
   814 00000B38 7414                <1>     jz .i2fCheck
   815 00000B3A 3C01                <1>     cmp al, 01  ;AL=01, Add block device
   816 00000B3C 7414                <1>     je .i2fAddTbl
   817 00000B3E 3C02                <1>     cmp al, 02  ;AL=02, Execute blk drv request
   818 00000B40 7429                <1>     je .i2fExec
   819 00000B42 3C03                <1>     cmp al, 03  ;AL=03, Get tbl ptr
   820 00000B44 7445                <1>     je .i2fGivTbl
   821                              <1> .i2fExit:
   822 00000B46 48CF                <1>     iretq
   823                              <1> .i2fNotUs:
   824 00000B48 FF2546000000        <1>     jmp qword [.i2fOld]
   825                              <1> .i2fCheck:
   826 00000B4E B0FF                <1>     mov al, -1  ;Indicate installed!
   827 00000B50 48CF                <1>     iretq
   828                              <1> .i2fAddTbl:
   829                              <1> ;Input: rdi -> New drvBlk to link to table (can be multiple!)
   830 00000B52 488D35A8000000      <1>     lea rsi, .drvBlkTbl
   831                              <1> .i2fATLp:
   832 00000B59 48813EFFFFFFFF      <1>     cmp qword [rsi + drvBlk.pLink], -1  ;goto the end of the table
   833 00000B60 480F4536            <1>     cmovne rsi, qword [rsi + drvBlk.pLink]
   834 00000B64 75F3                <1>     jne .i2fATLp
   835 00000B66 48893E              <1>     mov qword [rsi + drvBlk.pLink], rdi
   836 00000B69 48CF                <1>     iretq
   837                              <1> .i2fExec:
   838                              <1> ;We make a small change in that we clean up the flags from the stack
   839                              <1> ; as opposed to DOS which leaves them on the stack. Doing so is fine 
   840                              <1> ; as no useful information is ever passed in the flags from a driver
   841                              <1> ; so by doing so, any ported applications which do an additional pop
   842                              <1> ; from the stack to balance the stack will not be harmed by this.
   843 00000B6B 50                  <1>     push rax
   844 00000B6C B802800000          <1>     mov eax, 8002h  ;Enter Driver critical section
   845 00000B71 CD2A                <1>     int 2Ah
   846                              <1> 
   847 00000B73 53                  <1>     push rbx
   848 00000B74 48891D(98010000)    <1>     mov qword [reqHdrPtr], rbx  ;Save the ptr in var since we own it now :)
   849 00000B7B E83EF9FFFF          <1>     call msdDriver  ;And call the driver like from within DOS!
   850 00000B80 5B                  <1>     pop rbx
   851                              <1> 
   852 00000B81 B802810000          <1>     mov eax, 8102h  ;Exit Driver critical section
   853 00000B86 CD2A                <1>     int 2Ah
   854 00000B88 58                  <1>     pop rax
   855 00000B89 48CF                <1>     iretq
   856                              <1> .i2fGivTbl:
   857                              <1> ;Output: rdi -> drvBlkTbl
   858 00000B8B 488D3D6F000000      <1>     lea rdi, .drvBlkTbl
   859 00000B92 48CF                <1>     iretq
   860                              <1> 
   861 00000B94 0000000000000000    <1> .i2fOld dq 0    ;Original Int 2Fh pointer
   862                              <1> 
   863 00000B9C 0D0A496E7365727420- <1> .strikeMsg db 0Dh,0Ah,"Insert for drive "
   863 00000BA5 666F72206472697665- <1>
   863 00000BAE 20                  <1>
   864 00000BAF 413A20616E64207374- <1> .strikeMsgLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   864 00000BB8 72696B650D0A616E79- <1>
   864 00000BC1 206B6579207768656E- <1>
   864 00000BCA 2072656164790D0A0A  <1>
   865                              <1> .strikeMsgL equ $ - .strikeMsg
   866                              <1> 
   867 00000BD3 464154313220202000  <1> .fat12Str   db "FAT12   ",0
   868 00000BDC 464154313620202000  <1> .fat16Str   db "FAT16   ",0
   869 00000BE5 464154333220202000  <1> .fat32Str   db "FAT32   ",0
   870 00000BEE 4E4F204E414D452000  <1> .defLbl     db "NO NAME ",0 ;Default volume label
   871                              <1> 
   872                              <1> maxAcc  equ 5       ;Maximum accesses
   873 00000BF7 00                  <1> .bAccCnt    db 0    ;Counter of 0 time difference media checks
   874 00000BF8 FF                  <1> .bLastDsk   db -1   ;Last disk to be checked for media check.
   875 00000BF9 0000000000000000    <1> .pCurDrv    dq 0    ;Pointer to the drvBlk for the drv we are accessing
   876                              <1> 
   877                              <1> drvBlkTblL equ 26   ;Space for 26 drive letters!
   878                              <1> .drvBlkTbl:
   879 00000C01 000000000000000000- <1>     db drvBlkTblL*drvBlk_size dup (0)
   879 00000C0A 000000000000000000- <1>
   879 00000C13 000000000000000000- <1>
   879 00000C1C 000000000000000000- <1>
   879 00000C25 000000000000000000- <1>
   879 00000C2E 000000000000000000- <1>
   879 00000C37 000000000000000000- <1>
   879 00000C40 000000000000000000- <1>
   879 00000C49 000000000000000000- <1>
   879 00000C52 000000000000000000- <1>
   879 00000C5B 000000000000000000- <1>
   879 00000C64 000000000000000000- <1>
   879 00000C6D 000000000000000000- <1>
   879 00000C76 000000000000000000- <1>
   879 00000C7F 000000000000000000- <1>
   879 00000C88 000000000000000000- <1>
   879 00000C91 000000000000000000- <1>
   879 00000C9A 000000000000000000- <1>
   879 00000CA3 000000000000000000- <1>
   879 00000CAC 000000000000000000- <1>
   879 00000CB5 000000000000000000- <1>
   879 00000CBE 000000000000000000- <1>
   879 00000CC7 000000000000000000- <1>
   879 00000CD0 000000000000000000- <1>
   879 00000CD9 000000000000000000- <1>
   879 00000CE2 000000000000000000- <1>
   879 00000CEB 000000000000000000- <1>
   879 00000CF4 000000000000000000- <1>
   879 00000CFD 000000000000000000- <1>
   879 00000D06 000000000000000000- <1>
   879 00000D0F 000000000000000000- <1>
   879 00000D18 000000000000000000- <1>
   879 00000D21 000000000000000000- <1>
   879 00000D2A 000000000000000000- <1>
   879 00000D33 000000000000000000- <1>
   879 00000D3C 000000000000000000- <1>
   879 00000D45 000000000000000000- <1>
   879 00000D4E 000000000000000000- <1>
   879 00000D57 000000000000000000- <1>
   879 00000D60 000000000000000000- <1>
   879 00000D69 000000000000000000- <1>
   879 00000D72 000000000000000000- <1>
   879 00000D7B 000000000000000000- <1>
   879 00000D84 000000000000000000- <1>
   879 00000D8D 000000000000000000- <1>
   879 00000D96 000000000000000000- <1>
   879 00000D9F 000000000000000000- <1>
   879 00000DA8 000000000000000000- <1>
   879 00000DB1 000000000000000000- <1>
   879 00000DBA 000000000000000000- <1>
   879 00000DC3 000000000000000000- <1>
   879 00000DCC 000000000000000000- <1>
   879 00000DD5 000000000000000000- <1>
   879 00000DDE 000000000000000000- <1>
   879 00000DE7 000000000000000000- <1>
   879 00000DF0 000000000000000000- <1>
   879 00000DF9 000000000000000000- <1>
   879 00000E02 000000000000000000- <1>
   879 00000E0B 000000000000000000- <1>
   879 00000E14 000000000000000000- <1>
   879 00000E1D 000000000000000000- <1>
   879 00000E26 000000000000000000- <1>
   879 00000E2F 000000000000000000- <1>
   879 00000E38 000000000000000000- <1>
   879 00000E41 000000000000000000- <1>
   879 00000E4A 000000000000000000- <1>
   879 00000E53 000000000000000000- <1>
   879 00000E5C 000000000000000000- <1>
   879 00000E65 000000000000000000- <1>
   879 00000E6E 000000000000000000- <1>
   879 00000E77 000000000000000000- <1>
   879 00000E80 000000000000000000- <1>
   879 00000E89 000000000000000000- <1>
   879 00000E92 000000000000000000- <1>
   879 00000E9B 000000000000000000- <1>
   879 00000EA4 000000000000000000- <1>
   879 00000EAD 000000000000000000- <1>
   879 00000EB6 000000000000000000- <1>
   879 00000EBF 000000000000000000- <1>
   879 00000EC8 000000000000000000- <1>
   879 00000ED1 000000000000000000- <1>
   879 00000EDA 000000000000000000- <1>
   879 00000EE3 000000000000000000- <1>
   879 00000EEC 000000000000000000- <1>
   879 00000EF5 000000000000000000- <1>
   879 00000EFE 000000000000000000- <1>
   879 00000F07 000000000000000000- <1>
   879 00000F10 000000000000000000- <1>
   879 00000F19 000000000000000000- <1>
   879 00000F22 000000000000000000- <1>
   879 00000F2B 000000000000000000- <1>
   879 00000F34 000000000000000000- <1>
   879 00000F3D 000000000000000000- <1>
   879 00000F46 000000000000000000- <1>
   879 00000F4F 000000000000000000- <1>
   879 00000F58 000000000000000000- <1>
   879 00000F61 000000000000000000- <1>
   879 00000F6A 000000000000000000- <1>
   879 00000F73 000000000000000000- <1>
   879 00000F7C 000000000000000000- <1>
   879 00000F85 000000000000000000- <1>
   879 00000F8E 000000000000000000- <1>
   879 00000F97 000000000000000000- <1>
   879 00000FA0 000000000000000000- <1>
   879 00000FA9 000000000000000000- <1>
   879 00000FB2 000000000000000000- <1>
   879 00000FBB 000000000000000000- <1>
   879 00000FC4 000000000000000000- <1>
   879 00000FCD 000000000000000000- <1>
   879 00000FD6 000000000000000000- <1>
   879 00000FDF 000000000000000000- <1>
   879 00000FE8 000000000000000000- <1>
   879 00000FF1 000000000000000000- <1>
   879 00000FFA 000000000000000000- <1>
   879 00001003 000000000000000000- <1>
   879 0000100C 000000000000000000- <1>
   879 00001015 000000000000000000- <1>
   879 0000101E 000000000000000000- <1>
   879 00001027 000000000000000000- <1>
   879 00001030 000000000000000000- <1>
   879 00001039 000000000000000000- <1>
   879 00001042 000000000000000000- <1>
   879 0000104B 000000000000000000- <1>
   879 00001054 000000000000000000- <1>
   879 0000105D 000000000000000000- <1>
   879 00001066 000000000000000000- <1>
   879 0000106F 000000000000000000- <1>
   879 00001078 000000000000000000- <1>
   879 00001081 000000000000000000- <1>
   879 0000108A 000000000000000000- <1>
   879 00001093 000000000000000000- <1>
   879 0000109C 000000000000000000- <1>
   879 000010A5 000000000000000000- <1>
   879 000010AE 000000000000000000- <1>
   879 000010B7 000000000000000000- <1>
   879 000010C0 000000000000000000- <1>
   879 000010C9 000000000000000000- <1>
   879 000010D2 000000000000000000- <1>
   879 000010DB 000000000000000000- <1>
   879 000010E4 000000000000000000- <1>
   879 000010ED 000000000000000000- <1>
   879 000010F6 000000000000000000- <1>
   879 000010FF 000000000000000000- <1>
   879 00001108 000000000000000000- <1>
   879 00001111 000000000000000000- <1>
   879 0000111A 000000000000000000- <1>
   879 00001123 000000000000000000- <1>
   879 0000112C 000000000000000000- <1>
   879 00001135 000000000000000000- <1>
   879 0000113E 000000000000000000- <1>
   879 00001147 000000000000000000- <1>
   879 00001150 000000000000000000- <1>
   879 00001159 000000000000000000- <1>
   879 00001162 000000000000000000- <1>
   879 0000116B 000000000000000000- <1>
   879 00001174 000000000000000000- <1>
   879 0000117D 000000000000000000- <1>
   879 00001186 000000000000000000- <1>
   879 0000118F 000000000000000000- <1>
   879 00001198 000000000000000000- <1>
   879 000011A1 000000000000000000- <1>
   879 000011AA 000000000000000000- <1>
   879 000011B3 000000000000000000- <1>
   879 000011BC 000000000000000000- <1>
   879 000011C5 000000000000000000- <1>
   879 000011CE 000000000000000000- <1>
   879 000011D7 000000000000000000- <1>
   879 000011E0 000000000000000000- <1>
   879 000011E9 000000000000000000- <1>
   879 000011F2 000000000000000000- <1>
   879 000011FB 000000000000000000- <1>
   879 00001204 000000000000000000- <1>
   879 0000120D 000000000000000000- <1>
   879 00001216 000000000000000000- <1>
   879 0000121F 000000000000000000- <1>
   879 00001228 000000000000000000- <1>
   879 00001231 000000000000000000- <1>
   879 0000123A 000000000000000000- <1>
   879 00001243 000000000000000000- <1>
   879 0000124C 000000000000000000- <1>
   879 00001255 000000000000000000- <1>
   879 0000125E 000000000000000000- <1>
   879 00001267 000000000000000000- <1>
   879 00001270 000000000000000000- <1>
   879 00001279 000000000000000000- <1>
   879 00001282 000000000000000000- <1>
   879 0000128B 000000000000000000- <1>
   879 00001294 000000000000000000- <1>
   879 0000129D 000000000000000000- <1>
   879 000012A6 000000000000000000- <1>
   879 000012AF 000000000000000000- <1>
   879 000012B8 000000000000000000- <1>
   879 000012C1 000000000000000000- <1>
   879 000012CA 000000000000000000- <1>
   879 000012D3 000000000000000000- <1>
   879 000012DC 000000000000000000- <1>
   879 000012E5 000000000000000000- <1>
   879 000012EE 000000000000000000- <1>
   879 000012F7 000000000000000000- <1>
   879 00001300 000000000000000000- <1>
   879 00001309 000000000000000000- <1>
   879 00001312 000000000000000000- <1>
   879 0000131B 000000000000000000- <1>
   879 00001324 000000000000000000- <1>
   879 0000132D 000000000000000000- <1>
   879 00001336 000000000000000000- <1>
   879 0000133F 000000000000000000- <1>
   879 00001348 000000000000000000- <1>
   879 00001351 000000000000000000- <1>
   879 0000135A 000000000000000000- <1>
   879 00001363 000000000000000000- <1>
   879 0000136C 000000000000000000- <1>
   879 00001375 000000000000000000- <1>
   879 0000137E 000000000000000000- <1>
   879 00001387 000000000000000000- <1>
   879 00001390 000000000000000000- <1>
   879 00001399 000000000000000000- <1>
   879 000013A2 000000000000000000- <1>
   879 000013AB 000000000000000000- <1>
   879 000013B4 000000000000000000- <1>
   879 000013BD 000000000000000000- <1>
   879 000013C6 000000000000000000- <1>
   879 000013CF 000000000000000000- <1>
   879 000013D8 000000000000000000- <1>
   879 000013E1 000000000000000000- <1>
   879 000013EA 000000000000000000- <1>
   879 000013F3 000000000000000000- <1>
   879 000013FC 000000000000000000- <1>
   879 00001405 000000000000000000- <1>
   879 0000140E 000000000000000000- <1>
   879 00001417 000000000000000000- <1>
   879 00001420 000000000000000000- <1>
   879 00001429 000000000000000000- <1>
   879 00001432 000000000000000000- <1>
   879 0000143B 000000000000000000- <1>
   879 00001444 000000000000000000- <1>
   879 0000144D 000000000000000000- <1>
   879 00001456 000000000000000000- <1>
   879 0000145F 000000000000000000- <1>
   879 00001468 000000000000000000- <1>
   879 00001471 000000000000000000- <1>
   879 0000147A 000000000000000000- <1>
   879 00001483 000000000000000000- <1>
   879 0000148C 000000000000000000- <1>
   879 00001495 000000000000000000- <1>
   879 0000149E 000000000000000000- <1>
   879 000014A7 000000000000000000- <1>
   879 000014B0 000000000000000000- <1>
   879 000014B9 000000000000000000- <1>
   879 000014C2 000000000000000000- <1>
   879 000014CB 000000000000000000- <1>
   879 000014D4 000000000000000000- <1>
   879 000014DD 000000000000000000- <1>
   879 000014E6 000000000000000000- <1>
   879 000014EF 000000000000000000- <1>
   879 000014F8 000000000000000000- <1>
   879 00001501 000000000000000000- <1>
   879 0000150A 000000000000000000- <1>
   879 00001513 000000000000000000- <1>
   879 0000151C 000000000000000000- <1>
   879 00001525 000000000000000000- <1>
   879 0000152E 000000000000000000- <1>
   879 00001537 000000000000000000- <1>
   879 00001540 000000000000000000- <1>
   879 00001549 000000000000000000- <1>
   879 00001552 000000000000000000- <1>
   879 0000155B 000000000000000000- <1>
   879 00001564 000000000000000000- <1>
   879 0000156D 000000000000000000- <1>
   879 00001576 000000000000000000- <1>
   879 0000157F 000000000000000000- <1>
   879 00001588 000000000000000000- <1>
   879 00001591 000000000000000000- <1>
   879 0000159A 000000000000000000- <1>
   879 000015A3 000000000000000000- <1>
   879 000015AC 000000000000000000- <1>
   879 000015B5 000000000000000000- <1>
   879 000015BE 000000000000000000- <1>
   879 000015C7 000000000000000000- <1>
   879 000015D0 000000000000000000- <1>
   879 000015D9 000000000000000000- <1>
   879 000015E2 000000000000000000- <1>
   879 000015EB 000000000000000000- <1>
   879 000015F4 000000000000000000- <1>
   879 000015FD 000000000000000000- <1>
   879 00001606 000000000000000000- <1>
   879 0000160F 000000000000000000- <1>
   879 00001618 000000000000000000- <1>
   879 00001621 000000000000000000- <1>
   879 0000162A 000000000000000000- <1>
   879 00001633 000000000000000000- <1>
   879 0000163C 000000000000000000- <1>
   879 00001645 000000000000000000- <1>
   879 0000164E 000000000000000000- <1>
   879 00001657 000000000000000000- <1>
   879 00001660 000000000000000000- <1>
   879 00001669 000000000000000000- <1>
   879 00001672 000000000000000000- <1>
   879 0000167B 000000000000000000- <1>
   879 00001684 000000000000000000- <1>
   879 0000168D 000000000000000000- <1>
   879 00001696 000000000000000000- <1>
   879 0000169F 000000000000000000- <1>
   879 000016A8 000000000000000000- <1>
   879 000016B1 000000000000000000- <1>
   879 000016BA 000000000000000000- <1>
   879 000016C3 000000000000000000- <1>
   879 000016CC 000000000000000000- <1>
   879 000016D5 000000000000000000- <1>
   879 000016DE 000000000000000000- <1>
   879 000016E7 000000000000000000- <1>
   879 000016F0 000000000000000000- <1>
   879 000016F9 000000000000000000- <1>
   879 00001702 000000000000000000- <1>
   879 0000170B 000000000000000000- <1>
   879 00001714 000000000000000000- <1>
   879 0000171D 000000000000000000- <1>
   879 00001726 000000000000000000- <1>
   879 0000172F 000000000000000000- <1>
   879 00001738 000000000000000000- <1>
   879 00001741 000000000000000000- <1>
   879 0000174A 000000000000000000- <1>
   879 00001753 000000000000000000- <1>
   879 0000175C 000000000000000000- <1>
   879 00001765 000000000000000000- <1>
   879 0000176E 000000000000000000- <1>
   879 00001777 000000000000000000- <1>
   879 00001780 000000000000000000- <1>
   879 00001789 000000000000000000- <1>
   879 00001792 000000000000000000- <1>
   879 0000179B 000000000000000000- <1>
   879 000017A4 000000000000000000- <1>
   879 000017AD 000000000000000000- <1>
   879 000017B6 000000000000000000- <1>
   879 000017BF 000000000000000000- <1>
   879 000017C8 000000000000000000- <1>
   879 000017D1 000000000000000000- <1>
   879 000017DA 000000000000000000- <1>
   879 000017E3 000000000000000000- <1>
   879 000017EC 000000000000000000- <1>
   879 000017F5 000000000000000000- <1>
   879 000017FE 000000000000000000- <1>
   879 00001807 000000000000000000- <1>
   879 00001810 000000000000000000- <1>
   879 00001819 000000000000000000- <1>
   879 00001822 000000000000000000- <1>
   879 0000182B 000000000000000000- <1>
   879 00001834 000000000000000000- <1>
   879 0000183D 000000000000000000- <1>
   879 00001846 000000000000000000- <1>
   879 0000184F 000000000000000000- <1>
   879 00001858 000000000000000000- <1>
   879 00001861 000000000000000000- <1>
   879 0000186A 000000000000000000- <1>
   879 00001873 000000000000000000- <1>
   879 0000187C 000000000000000000- <1>
   879 00001885 000000000000000000- <1>
   879 0000188E 000000000000000000- <1>
   879 00001897 000000000000000000- <1>
   879 000018A0 000000000000000000- <1>
   879 000018A9 000000000000000000- <1>
   879 000018B2 000000000000000000- <1>
   879 000018BB 000000000000000000- <1>
   879 000018C4 000000000000000000- <1>
   879 000018CD 000000000000000000- <1>
   879 000018D6 000000000000000000- <1>
   879 000018DF 000000000000000000- <1>
   879 000018E8 000000000000000000- <1>
   879 000018F1 000000000000000000- <1>
   879 000018FA 000000000000000000- <1>
   879 00001903 000000000000000000- <1>
   879 0000190C 000000000000000000- <1>
   879 00001915 000000000000000000- <1>
   879 0000191E 000000000000000000- <1>
   879 00001927 000000000000000000- <1>
   879 00001930 000000000000000000- <1>
   879 00001939 000000000000000000- <1>
   879 00001942 000000000000000000- <1>
   879 0000194B 000000000000000000- <1>
   879 00001954 000000000000000000- <1>
   879 0000195D 000000000000000000- <1>
   879 00001966 000000000000000000- <1>
   879 0000196F 000000000000000000- <1>
   879 00001978 000000000000000000- <1>
   879 00001981 000000000000000000- <1>
   879 0000198A 000000000000000000- <1>
   879 00001993 000000000000000000- <1>
   879 0000199C 000000000000000000- <1>
   879 000019A5 000000000000000000- <1>
   879 000019AE 000000000000000000- <1>
   879 000019B7 000000000000000000- <1>
   879 000019C0 000000000000000000- <1>
   879 000019C9 000000000000000000- <1>
   879 000019D2 000000000000000000- <1>
   879 000019DB 000000000000000000- <1>
   879 000019E4 000000000000000000- <1>
   879 000019ED 000000000000000000- <1>
   879 000019F6 000000000000000000- <1>
   879 000019FF 000000000000000000- <1>
   879 00001A08 000000000000000000- <1>
   879 00001A11 000000000000000000- <1>
   879 00001A1A 0000000000          <1>
    25                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00001A1F 0F010D23000000      <1>     sidt [myIdt]
     8 00001A26 0FB6C0              <1>     movzx eax, al
     9 00001A29 4892                <1>     xchg rdx, rax
    10 00001A2B 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00001A2F 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00001A36 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00001A39 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00001A3D 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00001A41 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00001A45 894208              <1>     mov dword [rdx + 8], eax
    17 00001A48 C3                  <1>     ret
    18                              <1> myIdt:
    19 00001A49 0000                <1> .limit  dw 0
    20 00001A4B 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00001A53 50                  <1>     push rax
    25 00001A54 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00001A55 51                  <1>     push rcx
    27 00001A56 52                  <1>     push rdx
    28 00001A57 488D1514E7FFFF      <1>     lea rdx, qword [fastOutput]
    29 00001A5E B829000000          <1>     mov eax, 29h
    30 00001A63 E8B7FFFFFF          <1>     call installInterrupt
    31 00001A68 488D150BE7FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00001A6F B83B000000          <1>     mov eax, 3Bh
    33 00001A74 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00001A79 B401                <1>     mov ah, 01      ;Get buffer status
    36 00001A7B CD36                <1>     int 36h
    37 00001A7D 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00001A7F 30E4                <1>     xor ah, ah
    39 00001A81 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00001A83 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00001A85 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00001A8A CD30                <1>     int 30h
    44 00001A8C B402                <1>     mov ah, 02h
    45 00001A8E 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00001A90 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00001A92 CD30                <1>     int 30h
    48 00001A94 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00001A96 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00001A9B CD30                <1>     int 30h
    51 00001A9D 5A                  <1>     pop rdx
    52 00001A9E 59                  <1>     pop rcx
    53 00001A9F 5B                  <1>     pop rbx
    54 00001AA0 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56                              <1> ;Must be jumped to with rbx -> initReqPkt
    57 00001AA1 66C743030001        <1>     mov word [rbx + initReqPkt.status], drvDonStatus ;Set done bit
    58 00001AA7 50                  <1>     push rax
    59 00001AA8 488D0570FFFFFF      <1>     lea rax, ejectPoint
    60 00001AAF 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    61 00001AB3 58                  <1>     pop rax
    62                              <1>     return
    13                              <2> %%_ret:
    14 00001AB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> clockInit:
    65 00001AB5 53                  <1>     push rbx    ;Push the pointer to the request header here
    66                              <1> ;CH - Hours, in BCD
    67                              <1> ;CL - Minutes, in BCD
    68                              <1> ;DH - Seconds, in BCD
    69 00001AB6 B402                <1>     mov ah, 02  ;Read RTC Time
    70 00001AB8 CD3A                <1>     int 3Ah
    71 00001ABA 7271                <1>     jc .clkEnd  ;if error, just exit
    72                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    73 00001ABC 0FB6C5              <1>     movzx eax, ch   ;Hours
    74 00001ABF E84D000000          <1>     call .bcd2Bin
    75 00001AC4 88C5                <1>     mov ch, al
    76 00001AC6 0FB6C1              <1>     movzx eax, cl     ;Mins
    77 00001AC9 E843000000          <1>     call .bcd2Bin
    78 00001ACE 88C1                <1>     mov cl, al
    79 00001AD0 0FB6C6              <1>     movzx eax, dh   ;Seconds
    80 00001AD3 E839000000          <1>     call .bcd2Bin
    81 00001AD8 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    82 00001ADA 89C2                <1>     mov edx, eax
    83 00001ADC B42D                <1>     mov ah, 2Dh ;DOS Set Time
    84 00001ADE CD21                <1>     int 21h
    85                              <1> ;Now get the date from RTC
    86                              <1> ;CL - Year, in BCD
    87                              <1> ;DH - Month, in BCD
    88                              <1> ;DL - Day, in BCD
    89 00001AE0 B404                <1>     mov ah, 04  ;Read RTC Date
    90 00001AE2 CD3A                <1>     int 3Ah
    91 00001AE4 7247                <1>     jc .clkEnd
    92                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    93 00001AE6 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    94 00001AE9 E823000000          <1>     call .bcd2Bin
    95 00001AEE 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    96 00001AF1 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    97 00001AF7 0FB6C6              <1>     movzx eax, dh   ;Get Months
    98 00001AFA E812000000          <1>     call .bcd2Bin
    99 00001AFF 88C6                <1>     mov dh, al  
   100 00001B01 0FB6C2              <1>     movzx eax, dl   ;Get day
   101 00001B04 E808000000          <1>     call .bcd2Bin
   102 00001B09 88C2                <1>     mov dl, al
   103 00001B0B B42B                <1>     mov ah, 2Bh ;DOS Set Date
   104 00001B0D CD21                <1>     int 21h
   105 00001B0F EB1C                <1>     jmp short .clkEnd
   106                              <1> .bcd2Bin:
   107                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   108 00001B11 51                  <1>     push rcx
   109 00001B12 89C1                <1>     mov ecx, eax
   110 00001B14 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   111 00001B19 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   112 00001B1F 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   113 00001B22 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   114                              <1> .b2blp:
   115 00001B25 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   116 00001B27 FFC9                <1>     dec ecx
   117 00001B29 75FA                <1>     jnz .b2blp
   118                              <1> .b2bexit:
   119 00001B2B 59                  <1>     pop rcx
   120 00001B2C C3                  <1>     ret
   121                              <1> .clkEnd:
   122 00001B2D 5B                  <1>     pop rbx ;Get the pointer back
   123 00001B2E E96EFFFFFF          <1>     jmp devDrvExit
   124                              <1> 
   125                              <1> msdInit:
   126                              <1> ;Drive letter assignment works as follows:
   127                              <1> ; A and B always reserved for removable devices even if none.
   128                              <1> ; C,... for as many fixed disk partitions present in system.
   129                              <1> ; Any additional removable devices then come after the fixed disks.
   130                              <1> 
   131                              <1> 
   132                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   133                              <1> ;    mov byte [7c02h], 0
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> 
   136                              <1> ;Start by setting up the link pointers to the load address of the 
   137                              <1> ; drive table.
   138 00001B33 B919000000          <1>     mov ecx, drvBlkTblL - 1
   139 00001B38 488D2DC2F0FFFF      <1>     lea rbp, msdDriver.drvBlkTbl      ;Point to the first drive block
   140 00001B3F 4889EE              <1>     mov rsi, rbp
   141                              <1> .dskTblLp:
   142 00001B42 4889F7              <1>     mov rdi, rsi            ;Mov current block to current block
   143 00001B45 4881C68B000000      <1>     add rsi, drvBlk_size    ;Point current block to next block
   144 00001B4C 488937              <1>     mov qword [rdi + drvBlk.pLink], rsi    ;Store next blk ptr in cur block
   145 00001B4F FFC9                <1>     dec ecx                 ;Decrement the count
   146 00001B51 75EF                <1>     jnz .dskTblLp
   147 00001B53 48C706FFFFFFFF      <1>     mov qword [rsi + drvBlk.pLink], -1     ;Store end of table here
   148                              <1> ;Now get number of Int 33h information packed in r8
   149 00001B5A CD31                <1>     int 31h
   150                              <1>     ;Returns:
   151                              <1>     ;r8[Byte 0] = Number of COM ports
   152                              <1>     ;r8[Byte 1] = Number of fixed disks
   153                              <1>     ;r8[Byte 2] = Number of units on EHCI bus
   154                              <1>     ;r8[Byte 3] = Number of Int 33h units
   155 00001B5C 4C8905(66000000)    <1>     mov qword [msdTempBuffer], r8   
   156 00001B63 0FB605(69000000)    <1>     movzx eax, byte [msdTempBuffer + 3]
   157 00001B6A 0FB61D(67000000)    <1>     movzx ebx, byte [msdTempBuffer + 1]
   158 00001B71 29D8                <1>     sub eax, ebx    ;Get remdevs in eax
   159 00001B73 8805(02000000)      <1>     mov byte [remDrv], al    ;Save num of phys int 33h rem drives
   160 00001B79 881D(01000000)      <1>     mov byte [fixDrv], bl    ;Save number of physical hard drives
   161 00001B7F C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise reported volumes to 0
   162                              <1> ;Start by doing fixed disks.
   163 00001B86 85DB                <1>     test ebx, ebx   ;If no fixed disks, proceed with removables
   164 00001B88 7454                <1>     jz .doRem
   165 00001B8A C605(03000000)80    <1>     mov byte [biosDrv], 80h ;Start from first fixed disk
   166 00001B91 C605(04000000)02    <1>     mov byte [dosDrv], 2    ;Start from drive C:
   167                              <1> .hdLp:
   168                              <1> ;Read the first sector of the hard drive. If a valid BPB is detected,
   169                              <1> ; we read the BPB in. Else, we attempt to interpret the sector as an MBR.
   170 00001B98 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   171 00001B9A E817030000          <1>     call .ptnUpdateBpb
   172 00001B9F 720D                <1>     jc .mbrFnd  ;If CF=NC, this sector has a valid BPB. No MBR.
   173                              <1> ;The odd case where there is a BPB on the hard disk :)
   174 00001BA1 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   175 00001BA7 E8B6020000          <1>     call .advDiskPtrs
   176 00001BAC EB12                <1>     jmp short .fatDiskOk
   177                              <1> .mbrFnd:
   178 00001BAE 7517                <1>     jne .gotoNextDisk   ;If CF=CY and ZF=NZ, invalid disk! Goto next disk!
   179                              <1> ;Now we check if we have a valid MBR signature.
   180 00001BB0 66813D(64020000)55- <1>     cmp word [msdTempBuffer + mbr.mbrSig], 0AA55h
   180 00001BB8 AA                  <1>
   181 00001BB9 750C                <1>     jne .gotoNextDisk
   182 00001BBB E857010000          <1>     call .processMbr    ;This disk is done.
   183                              <1> ;If an error reading this disk at some partition, its oki to do the next check
   184                              <1> .fatDiskOk:
   185                              <1> ;Now we check if we have saturated fixed partitions? If so, do Removables now
   186 00001BC0 E895020000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   187 00001BC5 7417                <1>     je .doRem
   188                              <1> .gotoNextDisk:
   189 00001BC7 FE05(03000000)      <1>     inc byte [biosDrv]  ;Goto next fixed disk
   190 00001BCD 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get new device
   191 00001BD4 247F                <1>     and al, ~80h    ;Drop the upper bit
   192 00001BD6 3A05(01000000)      <1>     cmp al, byte [fixDrv]
   193 00001BDC 75BA                <1>     jne .hdLp
   194                              <1> ;------------------------------------------------
   195                              <1> ;   Here we start doing removable devices
   196                              <1> ;------------------------------------------------
   197                              <1> .doRem:
   198 00001BDE 0FB605(00000000)    <1>     movzx eax, byte [physVol]
   199 00001BE5 8805(01000000)      <1>     mov byte [fixPtn], al
   200 00001BEB C605(03000000)00    <1>     mov byte [biosDrv], 0   ;Start from drive 0
   201 00001BF2 C605(04000000)00    <1>     mov byte [dosDrv], 0    ;And give it DOS A:
   202 00001BF9 803D(02000000)00    <1>     cmp byte [remDrv], 0
   203 00001C00 0F8402010000        <1>     je .noRems
   204                              <1> .remLp:
   205 00001C06 31C9                <1>     xor ecx, ecx    ;Load sector 0 of the disk
   206 00001C08 E8A9020000          <1>     call .ptnUpdateBpb
   207 00001C0D 7222                <1>     jc .remNext     ;If the BPB was bad, next disk :)
   208                              <1> ;Now test if we have a changeline for this device.
   209 00001C0F 8A5509              <1>     mov dl, byte [rbp + drvBlk.bBIOSNum]
   210 00001C12 31C9                <1>     xor ecx, ecx
   211 00001C14 B800160000          <1>     mov eax, 1600h
   212 00001C19 CD33                <1>     int 33h
   213 00001C1B 7214                <1>     jc .remNext
   214                              <1> ;Before we blindly test it, we check if the number of our removable
   215                              <1> ; device is past that of the EHCI devices. If it is, we don't trust
   216                              <1> ; that it has a change line. r8 preserves the value until here.
   217 00001C1D 4C89C0              <1>     mov rax, r8 ;Get the r8 word into rax
   218 00001C20 C1E810              <1>     shr eax, 16 ;Drop the first two bytes
   219 00001C23 3A05(02000000)      <1>     cmp al, byte [remDrv]
   220 00001C29 7306                <1>     jae .remNext
   221 00001C2B 66814D370200        <1>     or word [rbp + drvBlk.wDevFlgs], devChgLine
   222                              <1> .remNext:
   223 00001C31 66814D372000        <1>     or word [rbp + drvBlk.wDevFlgs], devOwnDrv  ;I OWN MYSELF! :)
   224 00001C37 E826020000          <1>     call .advDiskPtrs           ;Move rbp to the next drive block
   225 00001C3C 803D(00000000)1A    <1>     cmp byte [physVol], drvBlkTblL  ;If we just added our last volume, exit! :)
   226 00001C43 7429                <1>     je .msdExit
   227 00001C45 FE05(03000000)      <1>     inc byte [biosDrv]          ;Else, goto next remdev
   228 00001C4B 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the bios drive number
   229 00001C52 3A05(02000000)      <1>     cmp al, byte [remDrv]       ;Once they are equal, we are done!
   230 00001C58 7414                <1>     je .msdExit
   231 00001C5A 3C03                <1>     cmp al, 3                   ;Else, did we process two remdevs?
   232 00001C5C 72A8                <1>     jb .remLp                   ;If not, do normal processing.
   233                              <1> ;Here we specially now shift the numbers past the hard drive partitions.
   234                              <1> ;Keep processing biosDrvs as normal. We just got to update DOS drive letter
   235                              <1> ; to go past the letters assigned to the fixed disk.
   236 00001C5E 8A05(01000000)      <1>     mov al, byte [fixPtn]       ;Get the number of partitions from fixed
   237 00001C64 0402                <1>     add al, 2   ;Add two to this number to account for A and B.
   238 00001C66 8805(04000000)      <1>     mov byte [dosDrv], al
   239 00001C6C EB98                <1>     jmp short .remLp
   240                              <1> .msdExit:
   241 00001C6E 803D(02000000)01    <1>     cmp byte [remDrv], 1
   242 00001C75 7532                <1>     jne .skipSingle
   243                              <1> ;Here we do the A: >-< B: jank.
   244                              <1> ;We know rbp points to what should the block for B:. The block for A:
   245                              <1> ; is right behind it.
   246                              <1> .doSingle:
   247 00001C77 4889EE              <1>     mov rsi, rbp
   248 00001C7A 4881EE8B000000      <1>     sub rsi, drvBlk_size    ;Go back a drvBlk (yuck!)
   249 00001C81 66814E371000        <1>     or word [rsi + drvBlk.wDevFlgs], devMulti  ;Indicate multiple drives now
   250 00001C87 C6450801            <1>     mov byte [rbp + drvBlk.bDOSNum], 1  ;Indicate B: drive
   251 00001C8B 488D7D09            <1>     lea rdi, qword [rbp + drvBlk.bBIOSNum]
   252 00001C8F 4881C609000000      <1>     add rsi, drvBlk.bBIOSNum
   253 00001C96 B982000000          <1>     mov ecx, (drvBlk_size - 9)  ;8 bytes Link ptr and 1 byte DOS number
   254 00001C9B F3A4                <1>     rep movsb
   255 00001C9D 66816537DFFF        <1>     and word [rbp + drvBlk.wDevFlgs], ~devOwnDrv   ;Clear B:'s ownership!
   256 00001CA3 FE05(00000000)      <1>     inc byte [physVol]  ;And add this drive to the count!
   257                              <1> .skipSingle:
   258 00001CA9 0FB61D(00000000)    <1>     movzx ebx, byte [physVol]   ;Get the number of detected volumes
   259 00001CB0 53                  <1>     push rbx    ;Save this count on the stack
   260 00001CB1 FFCB                <1>     dec ebx     ;Turn into an offset into the table
   261 00001CB3 B88B000000          <1>     mov eax, drvBlk_size    ;Get the size of a table entry
   262 00001CB8 F7E3                <1>     mul ebx     ;Multiply the size by the offset, get table offset in rax
   263 00001CBA 488D3540EFFFFF      <1>     lea rsi, msdDriver.drvBlkTbl    ;Go to the start of the table
   264 00001CC1 48C70406FFFFFFFF    <1>     mov qword [rsi + rax + drvBlk.pLink], -1 ;Cut the table at this entry
   265 00001CC9 488D1D(00000000)    <1>     lea rbx, bpbArray
   266                              <1> .buildBPBArrayLp:
   267 00001CD0 488D7E0A            <1>     lea rdi, qword [rsi + drvBlk.bpb]       ;Get the BPB ptr for this entry
   268 00001CD4 0FB64608            <1>     movzx eax, byte [rsi + drvBlk.bDOSNum]  ;Get the DOS number for this entry
   269 00001CD8 48893CC3            <1>     mov qword [rbx + 8*rax], rdi            ;Use as offset into ptr array
   270 00001CDC 488B36              <1>     mov rsi, qword [rsi + drvBlk.pLink]     ;Walk the table
   271 00001CDF 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Did we read the end of the table?
   272 00001CE6 75E8                <1>     jne .buildBPBArrayLp    ;No... keep going
   273 00001CE8 4889DE              <1>     mov rsi, rbx    ;Move the bpbArray pointer into rsi now
   274                              <1> ;Now we set the .optptr, .endptr and .numunt in driver request block
   275 00001CEB 488B1D(98010000)    <1>     mov rbx, qword [reqHdrPtr]  ;Get the header pointer back
   276 00001CF2 58                  <1>     pop rax         ;Get back the number of detected volumes
   277 00001CF3 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al  ;Store number of volumes
   278 00001CF6 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi    ;Store the bpbArray here
   279 00001CFA 66C7052BE8FFFF0000  <1>     mov word [msdDriver.fnTbl], 0 ;Now prevent init from firing again
   280 00001D03 E999FDFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   281                              <1> .noRems:
   282                              <1> ;Pretend we do have something. If we are here, "worst case" we have 
   283                              <1> ; three fixed disk partitions. rbp points to the fourth one so pretend
   284                              <1> ; we just did the first remdev. This drive gets registered as having
   285                              <1> ; no changeline so if somehow this changes, worst case, no changeline.
   286 00001D08 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]
   287 00001D0C FE05(00000000)      <1>     inc byte [physVol]  ;Add the pretend A: drive to the count!
   288 00001D12 E960FFFFFF          <1>     jmp .doSingle
   289                              <1> 
   290                              <1> ;------------------------
   291                              <1> ; Procedures for init
   292                              <1> ;------------------------
   293                              <1> 
   294                              <1> .processMbr:
   295                              <1> ;We have an MBR in the MBR table. Now we attempt to interpret it.
   296                              <1> ;If we return CF=CY, disk read failed. We skip this disk.
   297 00001D17 E868010000          <1>     call .copyMbr           ;Copy MBR table over from buffer
   298                              <1> ;HACK! In the case of disk 80h, we search for the first active primary
   299                              <1> ; ptn. We process it, invalidate the entry then start again
   300 00001D1C 803D(03000000)80    <1>     cmp byte [biosDrv], 80h ;Only do this for the first fixed disk
   301 00001D23 7539                <1>     jne .pmbrNoHack
   302 00001D25 488D35(06000000)    <1>     lea rsi, mbrE   ;Point to the table
   303 00001D2C B904000000          <1>     mov ecx, 4
   304                              <1> .pmbrHackLp:
   305 00001D31 803E80              <1>     cmp byte [rsi + mbrEntry.ptnAtrib], 80h    ;If found, do hack
   306 00001D34 740D                <1>     je .pmbrHackFnd
   307                              <1> .pmbrHackRet:
   308 00001D36 4881C610000000      <1>     add rsi, mbrEntry_size  ;Goto next entry
   309 00001D3D FFC9                <1>     dec ecx
   310 00001D3F 75F0                <1>     jnz .pmbrHackLp
   311 00001D41 EB1B                <1>     jmp short .pmbrNoHack   ;If disk one has no active primary, do normal.
   312                              <1> .pmbrHackFnd:
   313 00001D43 0FB64604            <1>     movzx eax, byte [rsi + mbrEntry.ptnType]
   314 00001D47 E8AB010000          <1>     call .checkDataPtn  ;If this is an extended partition, ignore it!
   315 00001D4C 75E8                <1>     jne .pmbrHackRet    ;And keep searching
   316 00001D4E C605(05000000)03    <1>     mov byte [mbrEtry], 3   ;Initialise the terminating condition
   317 00001D55 E812000000          <1>     call .pmbrLp ;Call the normal procedure, rsi -> Table entry
   318                              <1> ;Ignore any read errors, but we start again.
   319 00001D5A C6460400            <1>     mov byte [rsi + mbrEntry.ptnType], 0    ;Have that we ignore it now
   320                              <1> ;Now we fall down and start again
   321                              <1> .pmbrNoHack:
   322 00001D5E C605(05000000)00    <1>     mov byte [mbrEtry], 0   ;Start from the first entry in the MBR
   323 00001D65 488D35(06000000)    <1>     lea rsi, mbrE
   324                              <1> .pmbrLp:
   325 00001D6C 8A4604              <1>     mov al, byte [rsi + mbrEntry.ptnType]
   326 00001D6F E891010000          <1>     call .checkMbrPtnType
   327 00001D74 7548                <1>     jnz .pmbrNext  ;Jump if not a valid partition type (includes free ptns)
   328 00001D76 E87C010000          <1>     call .checkDataPtn
   329 00001D7B 740A                <1>     je .pmbrDodata
   330 00001D7D E855000000          <1>     call .processEPtn   ;Here we process EBR
   331                              <1>     retc                ;If this returns CF=CY, read error on disk. Exit!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001D82 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001D84 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   332 00001D85 EB2F                <1>     jmp short .pmbrXtrejoin   ;Now go to the next MBR entry
   333                              <1> .pmbrDodata:
   334 00001D87 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart] ;And the partition start
   335 00001D8A E827010000          <1>     call .ptnUpdateBpb ;And update the BPB. If this fails, we skip the disk
   336 00001D8F 7309                <1>     jnc .pmbrOk
   337                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001D91 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001D93 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   338                              <1> ;Else add the unformatted bit to the flags.
   339 00001D94 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   340                              <1> .pmbrOk:
   341 00001D9A 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   342 00001DA0 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   343 00001DA3 2580000000          <1>     and eax, ptnActive
   344 00001DA8 0D01000000          <1>     or eax, ptnPrimary
   345 00001DAD 6689456E            <1>     mov word [rbp + drvBlk.wPtnType], ax
   346 00001DB1 E8AC000000          <1>     call .advDiskPtrs
   347                              <1> .pmbrXtrejoin:
   348 00001DB6 E89F000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   349                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001DBB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001DBD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   350                              <1> .pmbrNext:
   351 00001DBE FE05(05000000)      <1>     inc byte [mbrEtry]  ;Increment the counter
   352 00001DC4 803D(05000000)04    <1>     cmp byte [mbrEtry], 4
   353                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001DCB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001DCD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   354 00001DCE 4881C610000000      <1>     add rsi, mbrEntry_size
   355 00001DD5 EB95                <1>     jmp short .pmbrLp
   356                              <1> 
   357                              <1> .processEPtn:
   358                              <1> ;Process all logical process in an extended partition. rsi points to
   359                              <1> ; the mbr entry in the mbrE table that describes this extended partition.
   360                              <1> ;Thus we always know the "root" sector of this extended partition.
   361 00001DD7 8B4E08              <1>     mov ecx, dword [rsi + mbrEntry.lbaStart]    ;Get the start of extended ptn
   362                              <1> .peplp:
   363 00001DDA E8C1000000          <1>     call .readSector    ;Read the EBR sector in (sector number in ecx)
   364                              <1>     retc    ;If we cant read the EBR in, assume end of logical partition.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001DDF 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001DE1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   365 00001DE2 66813D(64020000)55- <1>     cmp word [msdTempBuffer + ebr.mbrSig], 0AA55h
   365 00001DEA AA                  <1>
   366 00001DEB 7402                <1>     je .pep1   ;If this doesnt have a valid ebr signature, end ext ptn parsing.
   367 00001DED F9                  <1>     stc
   368                              <1>     return
    13                              <2> %%_ret:
    14 00001DEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   369                              <1> .pep1:
   370 00001DEF E87F000000          <1>     call .copyEbr       ;Save the EBR
   371                              <1> ;Now we check the saved EBR is valid.
   372 00001DF4 0FB605(4A000000)    <1>     movzx eax, byte [ebrE + mbrEntry.ptnType]
   373 00001DFB E8EF000000          <1>     call .checkEbrPtnType   ;Here we dont allow another extended case
   374 00001E00 7548                <1>     jnz .pepNextEbr ;If this is not a valid ptn type, goto next
   375 00001E02 0FB605(4A020000)    <1>     movzx eax, byte [ebrE + mbr_size + mbrEntry.ptnType]    ;Get link ptn type
   376 00001E09 E8E9000000          <1>     call .checkDataPtn  ;This MUST NOT be a Data ptn
   377 00001E0E 743A                <1>     je .pepNextEbr  ;If it is a data ptn, we ignore this entry as it is invalid.
   378                              <1> ;Now we get the absolute start sector of this partition.
   379 00001E10 030D(4E000000)      <1>     add ecx, dword [ebrE + mbrEntry.lbaStart]   ;Add relative start
   380 00001E16 E89B000000          <1>     call .ptnUpdateBpb  ;Read and interpret the BPB
   381 00001E1B 7309                <1>     jnc .pepOk
   382                              <1>     retnz ;If we had a read error, just exit!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001E1D 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001E1F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   383                              <1> ;Else add the unformatted bit to the flags.
   384 00001E20 66814D370002        <1>     or word [rbp + drvBlk.wDevFlgs], devUnFmt  ;Register ptn. Freeze IO.
   385                              <1> .pepOk:
   386                              <1> ;If here, this partition will be given a CDS entry.
   387                              <1> ;Now we go to the next logical partition in the extended partition and
   388                              <1> ; move to the next drive
   389 00001E26 66814D372100        <1>     or word [rbp + drvBlk.wDevFlgs], devFixed | devOwnDrv
   390 00001E2C 0FB606              <1>     movzx eax, byte [rsi + mbrEntry.ptnAtrib]
   391 00001E2F 2580000000          <1>     and eax, ptnActive
   392 00001E34 0D01000000          <1>     or eax, ptnPrimary
   393 00001E39 6689456E            <1>     mov word [rbp + drvBlk.wPtnType], ax
   394 00001E3D E820000000          <1>     call .advDiskPtrs
   395 00001E42 E813000000          <1>     call .physCheckEnd   ;If ZF=ZE, then we should end!
   396                              <1>     rete 
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001E47 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001E49 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   397                              <1> .pepNextEbr:
   398                              <1> ;Else we now walk the disk linked list.
   399 00001E4A 8B0D(52020000)      <1>     mov ecx, dword [ebrE + mbr_size + mbrEntry.numSectors] ;Get rel strt of ptn
   400 00001E50 85C9                <1>     test ecx, ecx   ;Is the start sector of the next logical ptn 0?
   401                              <1>     retz    ;Return if so.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001E52 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001E54 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   402 00001E55 034E08              <1>     add ecx, dword [rsi + mbrEntry.lbaStart]    ;Else, make it absolute sector
   403 00001E58 EB80                <1>     jmp short .peplp
   404                              <1> 
   405                              <1> .physCheckEnd:
   406 00001E5A 803D(00000000)18    <1>     cmp byte [physVol], drvBlkTblL - 2   ;Once here we are done!
   407                              <1>     return
    13                              <2> %%_ret:
    14 00001E61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   408                              <1> 
   409                              <1> .advDiskPtrs:
   410 00001E62 488B6D00            <1>     mov rbp, qword [rbp + drvBlk.pLink]    ;Go to the next disk entry.
   411 00001E66 FE05(04000000)      <1>     inc byte [dosDrv]       ;Go to the next DOS device
   412 00001E6C FE05(00000000)      <1>     inc byte [physVol]
   413                              <1>     return
    13                              <2> %%_ret:
    14 00001E72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> .copyEbr:
   416                              <1> ;Copies the EBR from the EBR sector in the buffer
   417 00001E73 51                  <1>     push rcx
   418 00001E74 56                  <1>     push rsi
   419 00001E75 57                  <1>     push rdi
   420 00001E76 488D3D(06000000)    <1>     lea rdi, mbrE
   421 00001E7D B920000000          <1>     mov ecx, 2*mbrEntry_size
   422 00001E82 EB0F                <1>     jmp short .cpmbr
   423                              <1> .copyMbr:
   424                              <1> ;Copies the MBR from the MBR sector in the buffer
   425 00001E84 51                  <1>     push rcx
   426 00001E85 56                  <1>     push rsi
   427 00001E86 57                  <1>     push rdi
   428 00001E87 488D3D(06000000)    <1>     lea rdi, mbrE
   429 00001E8E B940000000          <1>     mov ecx, 4*mbrEntry_size
   430                              <1> .cpmbr:
   431 00001E93 488D35(24020000)    <1>     lea rsi, qword [msdTempBuffer + mbr.mbrEntry1]
   432 00001E9A F3A4                <1>     rep movsb
   433 00001E9C 5F                  <1>     pop rdi
   434 00001E9D 5E                  <1>     pop rsi
   435 00001E9E 59                  <1>     pop rcx
   436                              <1>     return
    13                              <2> %%_ret:
    14 00001E9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> .readSector:
   439                              <1> ;Input: ecx = Sector to read
   440 00001EA0 0FB615(03000000)    <1>     movzx edx, byte [biosDrv]
   441 00001EA7 B801820000          <1>     mov eax, 8201h  ;LBA Read One sector
   442 00001EAC 488D1D(66000000)    <1>     lea rbx, msdTempBuffer
   443 00001EB3 CD33                <1>     int 33h
   444                              <1>     return
    13                              <2> %%_ret:
    14 00001EB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   445                              <1> 
   446                              <1> .ptnUpdateBpb:
   447                              <1> ;Setups up the call for below on the current partition.
   448                              <1> ;Input: ecx = Number of hidden sectors
   449                              <1> ;Output:
   450                              <1> ;   CF=NC: All ok, BPB entry in rbp filled.
   451                              <1> ;   CF=CY and ZF=ZE: Bad BPB read.
   452                              <1> ;   CF=CY and ZF=NZ: Sector read failed.
   453 00001EB6 66C745370000        <1>     mov word [rbp + drvBlk.wDevFlgs], 0    ;Clean the flags to start with
   454 00001EBC 894D1B              <1>     mov dword [rbp + drvBlk.dHiddSec], ecx
   455 00001EBF 0FB605(04000000)    <1>     movzx eax, byte [dosDrv]
   456 00001EC6 884508              <1>     mov byte [rbp + drvBlk.bDOSNum], al ;Save the DOS number
   457 00001EC9 0FB605(03000000)    <1>     movzx eax, byte [biosDrv]   ;Get the BIOS drive
   458 00001ED0 884509              <1>     mov byte [rbp + drvBlk.bBIOSNum], al
   459 00001ED3 488D1D(66000000)    <1>     lea rbx, msdTempBuffer  ;Use Temporary Buffer
   460 00001EDA 56                  <1>     push rsi    ;Save the mbr entry ptr
   461 00001EDB E853E8FFFF          <1>     call msdDriver.updateBpb
   462 00001EE0 7208                <1>     jc .pubBad
   463 00001EE2 E8A8E8FFFF          <1>     call msdDriver.moveVolIds
   464 00001EE7 5E                  <1>     pop rsi
   465 00001EE8 F8                  <1>     clc         ;Always clean even if no ids
   466                              <1>     return
    13                              <2> %%_ret:
    14 00001EE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> .pubBad:
   468 00001EEA 5E                  <1>     pop rsi
   469 00001EEB 3C07                <1>     cmp al, 07h ;Bad Partition?
   470 00001EED F9                  <1>     stc         ;Ensure we set the CF again
   471                              <1>     return
    13                              <2> %%_ret:
    14 00001EEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> .checkEbrPtnType:
   474                              <1> ;Input: al = Partition type
   475                              <1> ;Output: ZF=ZE => Valid partition type found
   476                              <1> ;        ZF=NZ => Not a valid partition type (05h and 0Fh not valid)
   477 00001EEF E811000000          <1>     call .checkMbrPtnType
   478                              <1>     retne           ;Bubble up the not equal if not in the partition table
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001EF4 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001EF6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   479                              <1> .checkDataPtn:
   480 00001EF7 3C05                <1>     cmp al, 05h     ;Extended Partition which should use CHS for addressing
   481 00001EF9 7407                <1>     je .ceptBad
   482 00001EFB 3C0F                <1>     cmp al, 0Fh     ;Extended Partition which should use LBA for addressing
   483 00001EFD 7403                <1>     je .ceptBad
   484 00001EFF 39C0                <1>     cmp eax, eax    ;Set the Zero flag
   485                              <1>     return
    13                              <2> %%_ret:
    14 00001F01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> .ceptBad:
   487 00001F02 85C0                <1>     test eax, eax   ;Clears the Zero flag (as eax is not zero)
   488                              <1>     return
    13                              <2> %%_ret:
    14 00001F04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> .checkMbrPtnType:
   491                              <1> ;Input: al = Partition type
   492                              <1> ;Output: ZF=ZE => Valid partition type found
   493                              <1> ;        ZF=NZ => Not a valid partition type
   494 00001F05 51                  <1>     push rcx
   495 00001F06 57                  <1>     push rdi
   496 00001F07 488D3D0A000000      <1>     lea rdi, .ptnTbl
   497 00001F0E B909000000          <1>     mov ecx, .ptnTblL
   498 00001F13 F2AE                <1>     repne scasb ;Find the entry in al
   499 00001F15 5F                  <1>     pop rdi
   500 00001F16 59                  <1>     pop rcx
   501                              <1>     return
    13                              <2> %%_ret:
    14 00001F17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502                              <1> 
   503                              <1> ;Table contents:
   504                              <1> ; 01h - FAT 12 Partition. CHS addressing should be used.
   505                              <1> ; 04h - FAT 16 Partition up to 32MB. CHS addressing should be used.
   506                              <1> ; 05h - Extended Partition in MBR found. CHS addressing should be used.
   507                              <1> ; 06h - FAT 16 Partition over 32MB. CHS addressing should be used.
   508                              <1> ; 0Bh - FAT 32 Partition. CHS addressing should be used.
   509                              <1> ; 0Ch - FAT 32 Partition. LBA addressing should be used.
   510                              <1> ; 0Eh - FAT 16 Partition. LBA addressing should be used.
   511                              <1> ; 0Fh - Extended Partition in MBR found. LBA addressing should be used.
   512 00001F18 010405060B0C0D0E0F  <1> .ptnTbl db 01h, 04h, 05h, 06h, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh
   513                              <1> .ptnTblL    equ $ - .ptnTbl 
    26                                  
    27                                  Segment kDrvDat data private align=1
    28                                  ;---------------------------
    29                                  ;  OEM Driver data segment
    30                                  ;---------------------------
    31                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [0000000000000000]  <1>     dq commonStrat
     9 00000012 [0800000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [0000000000000000]  <1>     dq commonStrat
    15 00000034 [0D03000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [0000000000000000]  <1>     dq commonStrat
    21 00000056 [9504000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [0000000000000000]  <1>     dq commonStrat
    27 00000078 [8301000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [0000000000000000]  <1>     dq commonStrat
    33 0000009A [BE04000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [0000000000000000]  <1>     dq commonStrat
    39 000000BC [0D03000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [0000000000000000]  <1>     dq commonStrat
    45 000000DE [1603000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [0000000000000000]  <1>     dq commonStrat
    51 00000100 [1F03000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [0000000000000000]  <1>     dq commonStrat
    57 00000122 [2803000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [0000000000000000]  <1>     dq commonStrat
    63 00000144 [9504000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [0000000000000000]  <1>     dq commonStrat
    69 00000166 [9504000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [0000000000000000]  <1>     dq commonStrat
    75 00000188 [9504000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    32                                  
    33                                  Segment kDrvBSS bss private align=1
    34                                  ;---------------------------
    35                                  ;  OEM Driver bss segment
    36                                  ;---------------------------
    37                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> bpbArray:   ;Recycle this space for the BPBptr array.
     5 00000000 ??                  <1> physVol db ?    ;Count of volumes we report to DOS
     6                              <1> fixPtn: ;Use this symbol to keep track of how many fixed partitions we have
     7 00000001 ??                  <1> fixDrv  db ?    ;Fixed disks
     8 00000002 ??                  <1> remDrv  db ?    ;Removable devices
     9 00000003 ??                  <1> biosDrv db ?    ;Current BIOS number we are playing with
    10 00000004 ??                  <1> dosDrv  db ?    ;Dos drive number we are setting up for
    11 00000005 ??                  <1> mbrEtry db ?    ;Indicates which entry we are analysing
    12 00000006 <res 40h>           <1> mbrE    db 64 dup (?)   ;We copy the MBR we are analysing here
    13 00000046 <res 20h>           <1> ebrE    db 32 dup (?)   ;We copy the EBR we are analysing here
    14 00000066 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?)
    38 00001066 <res Ah>                    alignb 10h  ;Ensure paragraph alignment
    39                                  
    40                                  ;=====================END OF OEM DRIVER MODULE=======================
    40          ------------------       info: assembly required 1+3+2 passes

