     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./inc/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rets 0
    81                              <1> cret s
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retns 0
    85                              <1> cret ns
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
     5                                  %include "./inc/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvIOCTLQ    equ 80h ;If set, IOCTL Query supported (21h/4410h, 4411h)
    69                              <1>     devDrvOpClRem   equ 800h ;If set, Open, Close and Rem media supported
    70                              <1>     devDrvNotIBM    equ 2000h ;If set, media byte is meaningful for disk comps
    71                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    72                              <1>     devDrvIOCTLCtl  equ 4000h ;If set, IOCTL control strings supported
    73                              <1>     devDrvChar      equ 8000h ;If set, Char device
    74                              <1> ;Bit 0 1=Console input
    75                              <1> ;    1 1=Console output (character devices)
    76                              <1> ;    2 1=NUL device
    77                              <1> ;    3 1=CLOCK device
    78                              <1> ;    4 1=Int 29 output (CON)
    79                              <1> ;    6 1=Generic IOCTL and GET/SET logical drive supported (13,17,18) (3.2+)
    80                              <1> ;    7 1=Query IOCTL function supported (19) (5.0+)
    81                              <1> ;   11 1=Open/close/removable media supported (3.0+)
    82                              <1> ;   13 1=Output until busy supported (character devices) (3.0+)
    83                              <1> ;      1=Media descriptor in FAT required (block devices)
    84                              <1> ;   14 1=IOCTL read and write control strings supported
    85                              <1> ;   15 0=Block device
    86                              <1> ;      1=Character device
    87                              <1> 
    88                              <1> ;Driver structures
    89                              <1> 
    90                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    91                              <1> 
    92                              <1>     .hdrlen db ?  ;Length of the request header
    93                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    94                              <1>     .cmdcde db ?  ;Command code
    95                              <1>     .status dw ?  ;Status word
    96                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    97                              <1> 
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> struc drvReqPkt
   101                              <1>     drvReqPktM
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc initReqPkt  ;Init Request Packet
   105                              <1> 
   106                              <1>     drvReqPktM   ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   107 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   108 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   109 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   110 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   111                              <1> 
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   115                              <1> 
   116                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   117 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   118 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   119 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   120                              <1> 
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   124                              <1> 
   125                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   126 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   127 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   128 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   129                              <1> 
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc ioReqPkt   ;IO Request Packet
   133                              <1> 
   134                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   135 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   136 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   137 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   138 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   139 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   144                              <1>     
   145                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   146 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   147                              <1> 
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc statusReqPkt   ;Status Request Packet
   151                              <1> 
   152                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   153                              <1> 
   154                              <1> endstruc
   155                              <1> 
   156                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   157                              <1> 
   158                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   159                              <1>      
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc openReqPkt ;Open Device Request Packet
   163                              <1> 
   164                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   165                              <1>      
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc closeReqPkt ;Close Device Request Packet
   169                              <1> 
   170                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   171                              <1>      
   172                              <1> endstruc
   173                              <1> 
   174                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   175                              <1> 
   176                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   177                              <1>      
   178                              <1> endstruc
   179                              <1> 
   180                              <1> struc outTilBusyPkt
   181                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   182 0000000D ????????????????    <1>     .pXfrBuffer dq ?    ;Pointer to the transfer buffer
   183 00000015 ????                <1>     .wXfrCount  dw ?    ;Byte count to xfr. Returns bytes xfred.
   184                              <1> endstruc
   185                              <1> 
   186                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   187                              <1> 
   188                              <1>     drvReqPktM    ;Common Driver Header Macro  
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   189 0000000D ??                  <1>     .majfun db ?  ;Major function number
   190 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   191 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   192 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   193 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   194                              <1> 
   195                              <1> endstruc
   196                              <1> 
   197                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   198                              <1>     
   199                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   200                              <1> 
   201                              <1> endstruc
   202                              <1> 
   203                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   204                              <1>     
   205                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   206                              <1> 
   207                              <1> endstruc
   208                              <1> ;IOCTL structs
   209                              <1> 
   210                              <1> struc lbaParamsBlock
   211 00000000 ??                  <1>     .bSize          db ?
   212 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   213                              <1>                             ;1 = Get current saved drive info w/o updating
   214                              <1>                             ;2 = Get physical parameters of the medium
   215                              <1>                             ;Only meaningful on get. Set must have this as 0
   216 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   217 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   218                              <1>                             ; If one, can use CHS functions with returned vals
   219 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   220 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   221 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   222                              <1> ;The below is the absolute start sector of the partition. It is the 
   223                              <1> ; partition at which to find the BPB.
   224 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   225                              <1> endstruc
   226                              <1> 
   227                              <1> %macro lbIOCmnM 0   ;IOCTL LBA request common portion macro
   228                              <1>     .size           db ?
   229                              <1>     .numSectors     db ?  ;# sectors to act on. Returns sectors acted on
   230                              <1>     .res            db 6 dup (?)
   231                              <1>     .startSector    dq ?  ;Sector to start action on
   232                              <1> %endmacro
   233                              <1> 
   234                              <1> struc lbaIOBlock
   235                              <1>     lbIOCmnM
   228 00000000 ??                  <2>  .size db ?
   229 00000001 ??                  <2>  .numSectors db ?
   230 00000002 ????????????        <2>  .res db 6 dup (?)
   231 00000008 ????????????????    <2>  .startSector dq ?
   236 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   237                              <1> endstruc
   238                              <1> 
   239                              <1> struc lbaFormatBlock
   240                              <1>     lbIOCmnM
   228 00000000 ??                  <2>  .size db ?
   229 00000001 ??                  <2>  .numSectors db ?
   230 00000002 ????????????        <2>  .res db 6 dup (?)
   231 00000008 ????????????????    <2>  .startSector dq ?
   241                              <1> endstruc
   242                              <1> 
   243                              <1> struc chsParamsBlock
   244 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   245 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   246 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   247 00000004 ????                <1>     .wNumCyl    dw ?
   248 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   249 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   250                              <1>     .TrackLayout:
   251                              <1> endstruc
   252                              <1> 
   253                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   254                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   255                              <1> ;Only used in setparams requests. Ignored for getparams 
   256                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   257                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   258                              <1> 
   259                              <1> 
   260                              <1> struc chsIOBlock
   261 00000000 ??                  <1>     .bSpecFuncs     db ?
   262 00000001 ????                <1>     .wStartHead     dw ?
   263 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   264 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   265 00000007 ????                <1>     .wNumSectors    dw ?
   266 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   267                              <1> endstruc
   268                              <1> 
   269                              <1> struc chsFormatBlock
   270 00000000 ??                  <1>     .bSpecFuncs db ?
   271 00000001 ????                <1>     .wStartHead dw ?
   272 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   273                              <1> endstruc
   274                              <1> 
   275                              <1> struc accFlgBlk
   276 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   277 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   278                              <1> endstruc
   279                              <1> 
   280                              <1> struc idParamBlk
   281 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   282 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   283 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   284 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   285                              <1> endstruc
     6                                  %include "./inc/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./inc/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./inc/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;File/path length equates.
     8                              <1> MAX_FNAME_FCB   equ 8
     9                              <1> MAX_EXT_FCB     equ 3
    10                              <1> MAX_NAME_FCB    equ MAX_FNAME_FCB + MAX_EXT_FCB
    11                              <1> MAX_NAME_FCBZ   equ MAX_NAME_FCB + 1    ;Space for a null terminator
    12                              <1> ;Values below include the null terminator.
    13                              <1> MAX_FILE    equ 13  ;Maximum length of a filename (includes dot)
    14                              <1> MAX_DRIVE   equ 3   ;Maximum length of a drive string (X:<NUL>)
    15                              <1> MAX_FSPEC   equ 64  ;Maximum length of a path to a file (filespec)
    16                              <1> MAX_PATH    equ 67  ;Maximum length of a fully qualified pathspec
    17                              <1> ;MAX_PATH is X:\<string, maxlen 63 chars>,<null> so 67 chars total.
    18                              <1> ;Use this symbol to check the length of a filename after qualification.
    19                              <1> MAX_PSPEC   equ MAX_PATH - MAX_FILE - 1 ;54 bytes
    20                              <1> ;MAX_PSPEC is the max length of a path with space for a filename!
    21                              <1> ;Remember, filenames for us are just a string of, at most, 13 characters,
    22                              <1> ; which we always resolve into FCB format. Buffers need to make space for
    23                              <1> ; both the dot and terminating null
    24                              <1> ;------------------------------------------------------------------------;
    25                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    26                              <1> ; its file system structure. This is used to locate files and structures
    27                              <1> ; on the device itself and to translate file requests to cluster chains
    28                              <1> ; to LBAs to pass to the disk driver..
    29                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    30                              <1> ; drivers Initialise routine has been called.
    31                              <1> ;------------------------------------------------------------------------;
    32                              <1> struc dpb        ;Drive Parameter Block
    33                              <1> 
    34 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    35 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    36 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    37 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    38 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    39 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    40 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    41 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    42 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    43 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    44 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    45 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    46                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    47 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    48 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    49 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    50 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    51 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    52 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    53                              <1> 
    54                              <1> endstruc
    55                              <1> 
    56                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    57                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    60                              <1> ; All disk pathing requests go via the CDS for that drive.
    61                              <1> ; The default drive is the last accessed drive, this number is stored
    62                              <1> ; in the DOS data area.
    63                              <1> ; The CDS is stored as an array with the offset into the array being 
    64                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    65                              <1> ;
    66                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    67                              <1> ;------------------------------------------------------------------------;
    68                              <1> struc cds       ;Current Directory structure
    69 00000000 <res 43h>           <1>     .sCurrentPath        db MAX_PATH dup (?)    ;Current Directory Path String
    70 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    71 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    72 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    73 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    74 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    75 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    76                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    77                              <1> ; another, we save the number of chars to skip to that deep level).
    78                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    79                              <1> ; Only affects for SUBST drives, not JOIN
    80                              <1> ; Flags: Bit 15 set = Network drive
    81                              <1> ;        Bit 14 set = Physical drive
    82                              <1> ;        Bit 13 set = JOIN'ed drive
    83                              <1> ;        Bit 12 set = SUBST'ed drive
    84                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    85                              <1> endstruc
    86                              <1> ;CDS equates
    87                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    88                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    89                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    90                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    91                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    92                              <1> ;------------------------------------------------------------------------;
    93                              <1> ; The SFT is a way to allow applications to open file handles to files 
    94                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    95                              <1> ; under the first header, and then a second header will be linked to the 
    96                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    97                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    98                              <1> ; using the FCBS= command. Default FCBS=5.
    99                              <1> ;
   100                              <1> ; A file handle describes the file, and the location within the file that
   101                              <1> ; we are reading. The file handle can be manipulated without the file
   102                              <1> ; being in memory, thus allowing the user to access data without needing 
   103                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   104                              <1> ; accessing devices, by treating them as files with their drivers 
   105                              <1> ; responding and translating the manipulations of the file handle itself.
   106                              <1> ; Neither the driver nor the application should see or use the SFT for
   107                              <1> ; the handle, as it is subject to change (and will change when file 
   108                              <1> ; sharing provisions are included). The DOS will make requests to the 
   109                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   110                              <1> ; track of the information in the SFT entry for that handle. 
   111                              <1> ;
   112                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   113                              <1> ; can point to the same file. It all depends on what the applications 
   114                              <1> ; want to do with the File.
   115                              <1> ;
   116                              <1> ; !!!!IMPORTANT!!!!
   117                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   118                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   119                              <1> ;
   120                              <1> ;Each SFT may look like this:
   121                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   122                              <1> ;            |                |
   123                              <1> ;       wNumFiles*sft    wNumFiles*sft
   124                              <1> ;
   125                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   126                              <1> ; System FCBs.
   127                              <1> ;
   128                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   129                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   130                              <1> ;
   131                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   132                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   133                              <1> ;------------------------------------------------------------------------;
   134                              <1> struc sfth   ;System file table header
   135                              <1> ; This is the SFT header.
   136                              <1> ; This structure comes before the start of the first file in the array/table.
   137 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   138 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   139                              <1> endstruc
   140                              <1> 
   141                              <1> struc sft
   142                              <1> ;This is the file struc itself
   143 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   144 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   145 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   146 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   147 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   148 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   149 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   150 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   151 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   152 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   153 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   154 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   155 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   156 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   157 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   158                              <1> ;                       Share Vars
   159 0000003B ????????????????    <1>     .pNextSFT   dq ?    ;Ptr to the next SFT for this file in the chain
   160 00000043 ????????            <1>     .dNetID     dd ?    ;Network ID of the machine (VM) that opened this file
   161 00000047 ????????????????    <1>     .qPID       dq ?    ;Proc ID (PSP) of the program which opened this file
   162 0000004F ????????????????    <1>     .pMFT       dq ?    ;Pointer to the MFT for this file. 0 means no MFT
   163                              <1> endstruc
   164                              <1> ;Open Mode equates
   165                              <1> ;Access modes   Bits[2:0]
   166                              <1> openRdAcc   equ 0h
   167                              <1> openWrAcc   equ 1h
   168                              <1> openRWAcc   equ 2h
   169                              <1> ;Bit 3 reserved 0
   170                              <1> ;Sharing modes  Bits[6:4]
   171                              <1> openCompat      equ 0h  ;Deny all, compatibility mode
   172                              <1> openDenRWShr    equ 10h ;Deny all, explicity read/write
   173                              <1> openDenWrShr    equ 20h ;Deny writes
   174                              <1> openDenRdShr    equ 30h ;Deny reads
   175                              <1> openDenNoShr    equ 40h ;Don't deny anything!
   176                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   177                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   178                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   179                              <1> openNetFCBShr   equ 70h
   180                              <1> openNoInherit   equ 80h
   181                              <1> 
   182                              <1> ;Bits 8-12 reserved 0
   183                              <1> ;The next two are extended open mode bits! 
   184                              <1> ;Can be set
   185                              <1> openFailOnI24   equ 2000h   ;If set, automatically FAIL all Int 24h
   186                              <1> openFlushWrites equ 4000h   ;If set, commit after each write call.
   187                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   188                              <1> openSFTFCB      equ 8000h   ;If set, file is SFT-FCB.
   189                              <1> 
   190                              <1> ;Attribute Byte
   191                              <1> attrFileRO          equ 1h
   192                              <1> attrFileHidden      equ 2h
   193                              <1> attrFileSys         equ 4h
   194                              <1> attrFileVolLbl      equ 8h
   195                              <1> attrFileDir         equ 10h ;Directory entry
   196                              <1> attrFileArchive     equ 20h
   197                              <1> attrFileChar        equ 40h ;Reserved, never found in dir
   198                              <1> 
   199                              <1> ;Device Info word equates
   200                              <1> ;For a block device, bits [5:0] contain the drive number
   201                              <1> devCharConIn    equ 1h  ;If set, device is CON input
   202                              <1> devCharConOut   equ 2h  ;If set, device is CON output
   203                              <1> devCharNulDev   equ 4h  ;If set, device is NULL device
   204                              <1> devCharClkDev   equ 8h  ;If set, device is CLOCK device
   205                              <1> 
   206                              <1> devCharFastOut  equ 10h ;If set, device supports INT 29h
   207                              <1> devCharBinary   equ 20h ;If set, r/w char device in Binary mode
   208                              <1> devCharNotEOF   equ 40h ;If set, device not yet at end of file
   209                              <1> devDiskNoFlush  equ 40h ;Set if file is synchronised with hard store!
   210                              <1> devCharDev      equ 80h ;If set, it is a char device!
   211                              <1> 
   212                              <1> devDiskI24onFull    equ 100h    ;If set, Int 24h on disk full or disk EOF
   213                              <1> devCharNetSpool equ 800h    ;If set, device is a network spooler
   214                              <1> 
   215                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   216                              <1> devCharNamePipe equ 2000h   ;If set, device is a named pipe
   217                              <1> devDiskNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   218                              <1> devRedir        equ 8000h   ;If set, dev/file is redirected!
   219                              <1> 
   220                              <1> ;Extended open flags. For the var [wEOFlags]
   221                              <1> ;These are not related to the SFT but are used during an extended open
   222                              <1> ; call to keep track of whats going on and thus help build an SFT.
   223                              <1> eoInExtOpen     equ 0001h   ;Doing Extended Open
   224                              <1> eoFailI24       equ 0002h   ;If EO file hard fails, skip and fail Int 24h
   225                              <1> eoFileNoExist   equ 0004h   ;File doesnt exist
   226                              <1> 
   227                              <1> ;Can combine the third option with one of the first two options.
   228                              <1> ;The first two options cannot be combined.
   229                              <1> ; - If only create is selected, then we try to do a create new. If the 
   230                              <1> ;       file exists, this fails with a "File exists" error.
   231                              <1> ;       Acts like a normal create new call. (21/5Bh)
   232                              <1> ;
   233                              <1> ; - If only open is selected then we try to do an open. If the file doesn't
   234                              <1> ;       doesn't exist, this fails with a "File not found" error.
   235                              <1> ;       Acts like a normal open call. (21/3Dh)
   236                              <1> ;
   237                              <1> ; - If only truncate is selected then we try to do a create. If the file
   238                              <1> ;       doesn't exist, this fails a "File not found" error.
   239                              <1> ;       New behaviour.
   240                              <1> ;
   241                              <1> ; - If open and create are selected then we try and open the file. If 
   242                              <1> ;       the open fails due to the file not existing, we create a new file. 
   243                              <1> ;       New behaviour.
   244                              <1> ;
   245                              <1> ; - If truncate and create are selected then we try to truncate the file. 
   246                              <1> ;       If the file doesnt exist then we create a new file instead.
   247                              <1> ;       Acts like a normal create call. (21/3Ch)
   248                              <1> 
   249                              <1> eoActOpen       equ 01h ;Open the file. 
   250                              <1> eoActTruncate   equ 02h ;Truncate an existing file.
   251                              <1> eoActCreate     equ 10h ;Create a file if one doesnt exist.
   252                              <1> ;Extended Open Action Return 
   253                              <1> eoRetActOpen    equ 1   ;Open existing
   254                              <1> eoRetActCreate  equ 2   ;Create new and open
   255                              <1> eoRetActTruncate    equ 3    ;Recreate and open
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   258                              <1> ; to an internal buffer, and then copying it to the specified location
   259                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   260                              <1> ; another request for the same sector from the same device is made, so 
   261                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   262                              <1> ; size, selected according to the largest detected sector size during 
   263                              <1> ; the initial loadup.
   264                              <1> ;
   265                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   266                              <1> ;
   267                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   268                              <1> ;------------------------------------------------------------------------;
   269                              <1> 
   270                              <1> struc bufferHdr
   271 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   272                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   273 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   274 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   275 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   276 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   277 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   278 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   279 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   280                              <1>     .dataarea:             ;Points to the start of the data area
   281                              <1> endstruc
   282                              <1> ;Buffer Flag equates
   283                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   284                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   285                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   286                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   287                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   288                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   289                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   290                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   291                              <1> ;------------------------------------------------------------------------;
   292                              <1> ; Memory control block for each memory arena
   293                              <1> ;------------------------------------------------------------------------;
   294                              <1> struc mcb
   295 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   296 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   297 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   298                              <1>     ;The following byte is reserved outside of sysinit
   299 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   300 0000000E ????                <1>     .reserved   db 2 dup (?) 
   301                              <1>     .program:
   302                              <1> endstruc
   303                              <1> ;MCB equates
   304                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   305                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   306                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   307                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   308                              <1> mcbMarkCtn      equ "M"
   309                              <1> mcbMarkEnd      equ "Z"
   310                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   311                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   312                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   313                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   314                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   315                              <1> mcbSubIFS       equ "I" ;Unused for now
   316                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   317                              <1> mcbSubFCBS      equ "X" ;Unused for now
   318                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   319                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   320                              <1> mcbSubStacks    equ "S" ;Unused for now
   321                              <1> 
   322                              <1> 
   323                              <1> memFirstFit     equ 0   ;First free block goes to application
   324                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   325                              <1> memLastFit      equ 2   ;Last free block goes to application
   326                              <1> 
   327                              <1> ;Owner = Para aligned address => Owning application PSP
   328                              <1> ;...To consider...
   329                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   330                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   331                              <1> ;------------------------------------------------------------------------;
   332                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   333                              <1> ; following order, thus allowing for return values to be placed in the 
   334                              <1> ; registers by accessing the caller register stack frame.
   335                              <1> ;------------------------------------------------------------------------;
   336                              <1> struc callerFrame
   337 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   338 00000008 ????????????????    <1>     .rbx    dq ?    
   339 00000010 ????????????????    <1>     .rcx    dq ?
   340 00000018 ????????????????    <1>     .rdx    dq ?
   341 00000020 ????????????????    <1>     .rsi    dq ?
   342 00000028 ????????????????    <1>     .rdi    dq ?
   343 00000030 ????????????????    <1>     .rbp    dq ?
   344 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   345 00000040 ????????????????    <1>     .r9     dq ?
   346                              <1> ;Pushed by Processor when invoked via Interrupt
   347 00000048 ????????????????    <1>     .rip    dq ?
   348 00000050 ????????????????    <1>     .cs     dq ?
   349 00000058 ????????????????    <1>     .flags  dq ?
   350                              <1> endstruc
   351                              <1> 
   352                              <1> struc dpl
   353                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   354                              <1> ; server calls
   355 00000000 ????????????????    <1>     .rax    dq ?
   356 00000008 ????????????????    <1>     .rbx    dq ?
   357 00000010 ????????????????    <1>     .rcx    dq ?
   358 00000018 ????????????????    <1>     .rdx    dq ?
   359 00000020 ????????????????    <1>     .rsi    dq ?
   360 00000028 ????????????????    <1>     .rdi    dq ?
   361 00000030 ????????????????    <1>     .r8     dq ?
   362 00000038 ????????????????    <1>     .r9     dq ?
   363 00000040 ????????????????    <1>     .align  dq ?
   364 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   365 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   366                              <1> endstruc
   367                              <1> 
   368                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   369 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   370 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   371 00000010 ????????????????    <1>     .newSFTVal      dq ?
   372 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   373 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   374 00000028 ????????????????    <1>     .newLastdrive   dq ?
   375 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   376 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   377 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   378 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   379 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   380 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   381 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   382                              <1> endstruc
   383                              <1> 
   384                              <1> struc filename
   385                              <1> ;8.3 File name struct
   386 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   387 00000008 ??????              <1>     .fExt   db 3 dup (?)
   388                              <1> endstruc
   389                              <1> 
   390                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   391 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   392 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   393 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   394 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   395 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   396 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   397 00000016 ????                <1>     .fileTime   dw ?  ;File time
   398 00000018 ????                <1>     .fileDate   dw ?  ;File date
   399 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   400 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   401                              <1> endstruc
   402                              <1> 
   403                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   404                              <1> struc psp
   405 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   406 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   407 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   408 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   409 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   410 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   411 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   412                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   413                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   414                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   415                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   416                              <1> ; always used and jftSize.
   417                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   418 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   419 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   420 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   421 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   422 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   423 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   424 0000005B ??                  <1>                 db ?  ;Reserved byte
   425                              <1> ;The below are in the same place as in DOS.
   426                              <1>     .cmdLineArgPtr: ;Symbol for future use
   427 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   428 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   429                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   430 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   431 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   432                              <1> endstruc
   433                              <1> 
   434                              <1> struc clkStruc
   435 00000000 ????                <1>     .dateWord   dw ?
   436 00000002 ??                  <1>     .minutes    db ?
   437 00000003 ??                  <1>     .hours      db ?
   438 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   439 00000005 ??                  <1>     .seconds    db ?
   440                              <1> endstruc
   441                              <1> 
   442                              <1> 
   443                              <1> struc extCtryStruc
   444 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   445 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   446 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   447 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   448 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   449                              <1>                         ;0 = month day year hh:mm:ss
   450                              <1>                         ;1 = day month year hh:mm:ss
   451                              <1>                         ;2 = year month day hh:mm:ss
   452 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   453 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   454 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   455 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   456 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   457 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   458                              <1>                         ;0 = Symbol leads, without space
   459                              <1>                         ;1 = Symbol follows, without space
   460                              <1>                         ;2 = Symbol leads, one space
   461                              <1>                         ;3 = Symbol follows, one space
   462                              <1>                         ;4 = Symbol replace decimal separator
   463 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   464 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   465 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   466 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   467 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   468                              <1> endstruc
   469                              <1> 
   470                              <1> struc countryStruc
   471 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   472                              <1>                         ;0 = month day year hh:mm:ss
   473                              <1>                         ;1 = day month year hh:mm:ss
   474                              <1>                         ;2 = year month day hh:mm:ss
   475 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   476 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   477 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   478 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   479 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   480 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   481                              <1>                         ;0 = Symbol leads, without space
   482                              <1>                         ;1 = Symbol follows, without space
   483                              <1>                         ;2 = Symbol leads, one space
   484                              <1>                         ;3 = Symbol follows, one space
   485                              <1>                         ;4 = Symbol replace decimal separator
   486 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   487 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   488 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   489 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   490 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   491                              <1> endstruc
   492                              <1> 
   493                              <1> ;Critical Error AH bitfield equates
   494                              <1> critRead    equ 0h
   495                              <1> critWrite   equ 1h
   496                              <1> critDOS     equ 0h
   497                              <1> critFAT     equ 2h
   498                              <1> critDir     equ 4h
   499                              <1> critData    equ 6h
   500                              <1> critFailOK  equ 8h
   501                              <1> critRetryOK equ 10h
   502                              <1> critIgnorOK equ 20h
   503                              <1> critCharDev equ 80h
   504                              <1> 
   505                              <1> critIgnore  equ 0
   506                              <1> critRetry   equ 1
   507                              <1> critAbort   equ 2
   508                              <1> critFail    equ 3
   509                              <1> 
   510                              <1> ;MISC ASCII control chars
   511                              <1> NUL equ 00h ;^@         | ASCII Null
   512                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   513                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   514                              <1> BEL equ 07h ;^G         | ASCII Bell
   515                              <1> BSP equ 08h ;^H         | ASCII Backspace
   516                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   517                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   518                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   519                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   520                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   521                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   522                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   523                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   524                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   525                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   526                              <1> SPC equ 20h ;Printable  | ASCII Space
   527                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   528                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   529                              <1> 
   530                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   531                              <1> ;Extended Ascii Codes
   532                              <1> eF1     equ 3Bh ;F1 second byte
   533                              <1> eF2     equ 3Ch ;F2 second byte
   534                              <1> eF3     equ 3Dh ;F3 second byte
   535                              <1> eF4     equ 3Eh ;F4 second byte
   536                              <1> eF5     equ 3Fh ;F5 second byte
   537                              <1> eF6     equ 40h ;F6 second byte
   538                              <1> eF7     equ 41h ;F7 second byte
   539                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   540                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   541                              <1> eIns    equ 52h ;Insert second byte
   542                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   543                              <1> 
   544                              <1> ;Default Configuration for the system
   545                              <1> 
   546                              <1> buffersDefault  equ 30
   547                              <1> filesDefault    equ 20
   548                              <1> fcbsDefault     equ 4
   549                              <1> safeFcbsDeflt   equ 0
   550                              <1> lastDriveDeflt  equ 5   
   551                              <1> 
   552                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   553                              <1> ; then the char has this property.
   554                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   555                              <1> termChar    equ 2   ;Terminator char type
   556                              <1> sepChar     equ 4   ;Separator char type
   557                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./inc/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> ;The next two errors occur because an redir handle has the bit set to do this.
    46                              <1> ;We do not move the SFT in either case so that one can safely examine the
    47                              <1> ; state of the system before the call was made. In the second case,
    48                              <1> ; the user should do a 0 byte write at filesize before anything else to truncate
    49                              <1> ; any pre-allocated clusters.
    50                              <1> errHdlEOF   equ 38  ;Handle will EOF if read proceeds or at EOF. 
    51                              <1> errDskFul   equ 39  ;Disk will fill up if write proceeds or full. 
    52                              <1> 
    53                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    54                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    55                              <1> 
    56                              <1> errFilExist equ 80  ;File already exists
    57                              <1> errDirExist equ 82  ;Directory already exists
    58                              <1> errFI24     equ 83  ;Fail on Int 24h
    59                              <1> errRedir    equ 84  ;Too many levels of redirection
    60                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    61                              <1> errBadPass  equ 86  ;Bad password
    62                              <1> errBadParam equ 87  ;Bad parameter passed to request
    63                              <1> errNetWrite equ 88  ;Network Write Fault
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Loci
    66                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    67                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    68                              <1> eLocNet     equ 3   ;Network related issues
    69                              <1> eLocChr     equ 4   ;Serial/Character Device error
    70                              <1> eLocMem     equ 5   ;Related to RAM
    71                              <1> ;-----------------------------------------------------------------------------
    72                              <1> ;Error Actions
    73                              <1> eActRet     equ 1   ;Retry
    74                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    75                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    76                              <1> eActAbt     equ 4   ;Abort with cleanup
    77                              <1> eActKil     equ 5   ;Abort without cleanup
    78                              <1> eActIgn     equ 6   ;Ignore error
    79                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    80                              <1> ;-----------------------------------------------------------------------------
    81                              <1> ;Error Classes
    82                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    83                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    84                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    85                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    86                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    87                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    88                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    89                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    90                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    91                              <1> eClsLocked  equ 10  ;Resource Locked
    92                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    93                              <1> eClsClash   equ 12  ;Resource already exists!
    94                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./inc/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  %include "./src/Kernel/Debug/debSym.inc"    ;Always define debug symbols!
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> %define DEBUG       false
     7                              <1> %define DPBINFO     false
     8                              <1> %define REGS        false
     9                              <1> %define ENDSTATUS   false
    10                              <1> %define HEADERS     false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    12                                  
    13                                  ;========================START OF DOS MODULE=========================
    14                                  %include "./src/Kernel/dos.inc"
     1                              <1> ;DOS globals
     2                              <1> 
     3                              <1> ; DOS variables for reloc computations in sysinit
     4                              <1> GLOBAL dSegLen  ;Exported for calculations with dosSeg
     5                              <1> 
     6                              <1> ; DOS DATA AREA variables
     7                              <1> GLOBAL nulDevHdr
     8                              <1> GLOBAL anchorMcb
     9                              <1> GLOBAL dayOfMonth
    10                              <1> GLOBAL monthOfYear
    11                              <1> GLOBAL vConPtr
    12                              <1> GLOBAL clockPtr
    13                              <1> GLOBAL currentPSP
    14                              <1> GLOBAL editKeys
    15                              <1> GLOBAL shareCount
    16                              <1> GLOBAL shareDelay
    17                              <1> GLOBAL caseMapFunc
    18                              <1> GLOBAL charTableArray
    19                              <1> GLOBAL charTableArray.ucTable
    20                              <1> GLOBAL charTableArray.filenameUCTable
    21                              <1> GLOBAL charTableArray.filenameTerminatingTable
    22                              <1> GLOBAL charTableArray.collatingTable
    23                              <1> GLOBAL charTableArray.dbcsTable
    24                              <1> GLOBAL serverDispTbl
    25                              <1> GLOBAL machineName
    26                              <1> GLOBAL critPtchTbl
    27                              <1> GLOBAL dosCrit1Enter
    28                              <1> GLOBAL dosCrit1Exit
    29                              <1> GLOBAL dosCrit2Enter
    30                              <1> GLOBAL dosCrit2Exit
    31                              <1> GLOBAL dosMgrHooks
    32                              <1> GLOBAL dllHooks
    33                              <1> GLOBAL shareHooks
    34                              <1> GLOBAL goodDfltShareHook
    35                              <1> GLOBAL badDfltShareHook
    36                              <1> GLOBAL dosBIOSName
    37                              <1> GLOBAL biosVers
    38                              <1> GLOBAL biosPtr
    39                              <1> GLOBAL bootDrive
    40                              <1> GLOBAL numFiles
    41                              <1> GLOBAL lastdrvNum
    42                              <1> GLOBAL firstSftHeader
    43                              <1> GLOBAL mcbChainPtr
    44                              <1> GLOBAL vConPtr
    45                              <1> GLOBAL clockPtr
    46                              <1> GLOBAL extKeyFunc
    47                              <1> GLOBAL errorDrv
    48                              <1> GLOBAL currentNdx
    49                              <1> GLOBAL switchChar
    50                              <1> GLOBAL ctryTbl
    51                              <1> GLOBAL serverDispTblPtr
    52                              <1> GLOBAL currentDTA
    53                              <1> GLOBAL cdsHeadPtr
    54                              <1> GLOBAL dpbHeadPtr
    55                              <1> GLOBAL maxBytesSec
    56                              <1> GLOBAL bufHeadPtr
    57                              <1> GLOBAL sftHeadPtr
    58                              <1> GLOBAL numBuffers
    59                              <1> GLOBAL fcbsHeadPtr
    60                              <1> GLOBAL numPhysVol
    61                              <1> 
    62                              <1> GLOBAL i0
    63                              <1> GLOBAL i1
    64                              <1> GLOBAL i2
    65                              <1> GLOBAL i3
    66                              <1> GLOBAL i4
    67                              <1> GLOBAL i5
    68                              <1> GLOBAL i6
    69                              <1> GLOBAL i7
    70                              <1> GLOBAL i8
    71                              <1> GLOBAL i9
    72                              <1> GLOBAL i10
    73                              <1> GLOBAL i11
    74                              <1> GLOBAL i12
    75                              <1> GLOBAL i13
    76                              <1> GLOBAL i14
    77                              <1> GLOBAL i15
    78                              <1> GLOBAL i16
    79                              <1> GLOBAL i17
    80                              <1> GLOBAL i18
    81                              <1> GLOBAL i19
    82                              <1> GLOBAL i20
    83                              <1> GLOBAL i21
    84                              <1> 
    85                              <1> GLOBAL terminateProcess 
    86                              <1> GLOBAL functionDispatch 
    87                              <1> GLOBAL defaultIretq
    88                              <1> GLOBAL dosDefCritErrHdlr    
    89                              <1> GLOBAL absDiskRead      
    90                              <1> GLOBAL absDiskWrite     
    91                              <1> GLOBAL terminateRes     
    92                              <1> GLOBAL multiplexHdlr
    93                              <1> GLOBAL nulStrat
    94                              <1> GLOBAL nulIntr
    15                                  
    16                                  Segment dBSS bss private align=1
    17                                  ;---------------------------
    18                                  ;   DOS BSS data segment
    19                                  ;---------------------------
    20                                  %include "./src/Kernel/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2 00000000 <res 10h>           <1>     anchorMcb   db mcb_size dup (?) ;This is space for the anchor MCB
     3                              <1> dosDataArea:    ;The returned pointer points to the variables w/o anchor MCB
     4 00000010 ??                  <1>     bootDrive   db ?    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    dd ?    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     dq ?    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam dw ?    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  dw ?    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  dw ?    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 dq ?    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  dq ?    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr dq ?    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     dq ?    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  dq ?    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr dq ?    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  db ?    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  db ?    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   db drvHdr_size dup (?)
    33 0000009C ??                  <1>     numJoinDrv  db ?    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    db ?    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     dq ?  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   dq ?  ;
   108                              <1> 
   109                              <1>     ;Share hook functions here
   110                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   111                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   112                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   113                              <1> shareHooks:
   114 000000BF ????????????????    <1>     markerShare         dq ?  ;Marker Share hook
   115 000000C7 ????????????????    <1>     openShare           dq ?  ;Share called on open. 
   116 000000CF ????????????????    <1>     closeShare          dq ?  ;Share called on close.
   117 000000D7 ????????????????    <1>     closeCompShare      dq ?  ;Share to close all files for a machine.
   118 000000DF ????????????????    <1>     closeTaskShare      dq ?  ;Share to close all files for a task.
   119 000000E7 ????????????????    <1>     closeNameShare      dq ?  ;Share to close file by name.
   120 000000EF ????????????????    <1>     lockFileShare       dq ?  ;Share to lock file region.
   121 000000F7 ????????????????    <1>     unlockFileShare     dq ?  ;Share to unlock file region.
   122 000000FF ????????????????    <1>     checkFileLockShare  dq ?  ;Share to check file region locked.
   123 00000107 ????????????????    <1>     openFileListShare   dq ?  ;Share to get open file list entry.
   124 0000010F ????????????????    <1>     updateFCBfromSFTShr dq ?  ;Share to update FCB from the SFT.    UNUSED
   125 00000117 ????????????????    <1>     fstClstOfFCBShare   dq ?  ;Share to get first cluster of FCB.   UNUSED
   126 0000011F ????????????????    <1>     closeDupFileShare   dq ?  ;Share to close file if dup for proc.
   127 00000127 ????????????????    <1>     closeNewHdlShare    dq ?  ;Share to close hdls of rec opened file.
   128 0000012F ????????????????    <1>     updateDirShare      dq ?  ;Share to update dir info in SFT. 
   129                              <1> 
   130                              <1> ;Create SFT header and corresponding array of five default sft entries
   131 00000137 <res Ah>            <1>     firstSftHeader  db sfth_size dup (?)
   132 00000141 <res 57h>           <1>     firstSft        db sft_size dup (?)
   133 00000198 <res 57h>           <1>     secondSft       db sft_size dup (?)
   134 000001EF <res 57h>           <1>     thirdSft        db sft_size dup (?)
   135 00000246 <res 57h>           <1>     fourthSft       db sft_size dup (?)
   136 0000029D <res 57h>           <1>     fifthSft        db sft_size dup (?)
   137                              <1> 
   138                              <1> ;Virtual CONsole Buffers
   139 000002F4 ??                  <1>     vConCursPos db ?     ;Keeps track for tabs stops (and var with 7)
   140                              <1>     ;Only incremented when CON device runs vCon
   141                              <1> vConBuf:    ;Proper buffer symbol
   142 000002F5 ??                  <1>     vConCurCnt  db ?     ;Current count of chars in vConBuffer
   143 000002F6 <res 80h>           <1>     vConBuffer  db 128 dup (?)   ;General Buffer for vCon 256 bytes. 
   144                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   145 00000376 <res 80h>           <1>     vConInBuf   db 128 dup (?)   ;vConsole buffer for reads ONLY
   146 000003F6 ??                  <1>                 db ?     ;Padding Buffer!
   147                              <1> 
   148 000003F7 ??                  <1>     printEcho   db ?  ;If 0, no echo. Non-zero => Echo to PRN
   149 000003F8 ??                  <1>     verifyFlag  db ?  ;If set, writes are replaces with write/verify x
   150 000003F9 ??                  <1>     switchChar  db ?  ;Editable by 21h/37h. Set to / by default
   151 000003FA ??                  <1>     vConErr     db ?  ;Inc on each char output call
   152                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   153                              <1> 
   154 000003FB ??                  <1>     allocStrat  db ?  ;Allocation strategy. First, Best or Last fit
   155                              <1> ;Server stuff. Default to all zeros (blank)
   156 000003FC ??                  <1>     shareFlag   db ?  ;Sharing flag, set to 0 for now (future expansion)
   157                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   158 000003FD ??                  <1>     serverCnt   db ?  ;Increments on each 21h/5E01h call
   159 000003FE <res 10h>           <1>     machineName db 16 dup (?) ;Machine name (Set via 21h/5E01h) (set to SPC)    
   160                              <1> ;Swappable Data Area
   161 0000040E <res 20h>           <1>     critPtchTbl dq 4 dup (?)  ;Offsets from DosDataArea addr to the 4 funcs
   162 0000042E ??                  <1>                 db ?  ;Alignment byte
   163                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   164 0000042F ??                  <1>     critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
   165 00000430 ??                  <1>     inDOS       db ?  ;Inc on each DOS call, dec when leaving x
   166 00000431 ??                  <1>     errorDrv    db ?  ;Drive on which error occured or FFh x
   167 00000432 ??                  <1>     errorLocus  db ?  ;Where the error took place  
   168 00000433 ????                <1>     errorExCde  dw ?  ;Extended Error Code
   169 00000435 ??                  <1>     errorAction db ?  ;Suggested action for error  
   170 00000436 ??                  <1>     errorClass  db ?  ;Error Class
   171 00000437 ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   172 0000043F ????????????????    <1>     currentDTA  dq ?  ;Address of the current DTA x
   173 00000447 ????????????????    <1>     currentPSP  dq ?  ;Address of current PSP x
   174                              <1> 
   175 0000044F ????????????????    <1>     xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
   176 00000457 ????                <1>     errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
   177                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   178                              <1>     ;Lower byte: User Specified
   179 00000459 ??                  <1>     currentDrv  db ?  ;Default drive x
   180 0000045A ??                  <1>     breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
   181                              <1> ;SDA, needs to be replaced between processes
   182                              <1> sdaDOSSwap:
   183 0000045B ????????????????    <1>     oldRAX      dq ?  ;Store rax on entering Int21h or returning Int 23h
   184 00000463 ????????????????    <1>     serverPSP   dq ?  ;PSP of prog making server request, used by net & share
   185 0000046B ????????            <1>     dReqNetID   dd ?  ;Requesters' (VM) Network ID. 0 means local machine.
   186 0000046F ????????????????    <1>     firstMCB    dq ?  ;First fit MCB for request
   187 00000477 ????????????????    <1>     bestMCB     dq ?  ;Best fit MCB for request
   188 0000047F ????????????????    <1>     lastMCB     dq ?  ;Last fit MCB for request
   189 00000487 ????                <1>     dirEntryNum dw ?  ;Offset into directory of entry we are looking for
   190 00000489 ??                  <1>     volIdFlag   db ?  ;If set, we are searching for a volume ID
   191 0000048A ????????????????    <1>     xInt24hRSP  dq ?  ;RSP across an Int 24h call
   192 00000492 ??                  <1>     Int24bitfld db ?  ;Copies the bit field given to the Int 24h handler
   193 00000493 ??                  <1>     fileDirFlag db ?  ;File/Directory flag. 0 = Dir, ¬0 = File
   194 00000494 ??                  <1>     Int24Fail   db ?  ;Set if Int 24h returned fail
   195                              <1> 
   196 00000495 ????????????????    <1>     oldoldRSP   dq ?  ;RSP at prev Int 21h entry if called from within Int 21h
   197 0000049D ????????????????    <1>     dosReturn   dq ?  ;Used as a var to return when juggling stack
   198 000004A5 ????????????????    <1>     oldRSP      dq ?  ;RSP when entering Int 21h
   199 000004AD ????????????????    <1>     oldRBX      dq ?  ;Temp var to save value of rbx during an Int 21 call
   200 000004B5 ??                  <1>     dirFlag     db ?  ;Directory Flag. 0 => Search for Dir, 1 => for File
   201                              <1> ;The below flag tells DOS to print ^C in the termination function
   202 000004B6 ??                  <1>     ctrlCExit   db ?  ;-1 => CTRL+BREAK termination, 0 otherwise
   203 000004B7 ??                  <1>     fcbSpaceOk  db ?  ;If set, we allow embedded spaces in the filenames
   204                              <1> ;Time stuff
   205                              <1> ;Read the below two as a word
   206 000004B8 ??                  <1>     dayOfMonth  db ?  ;01h - 1Fh (1 - 31)
   207 000004B9 ??                  <1>     monthOfYear db ?  ;01h - 0Ch (1 - 12)
   208 000004BA ??                  <1>     years       db ?  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   209 000004BB ????                <1>     daysOffset  dw ?  ;Days since 1-1-1980
   210 000004BD ??                  <1>     dayOfWeek   db ?  ;0 = Sunday <-> 6 = Saturday
   211                              <1> 
   212 000004BE ??                  <1>     vConDrvSwp  db ?  ;Set if vCon controlled by a different driver to vConPtr
   213 000004BF ??                  <1>     int28Flag   db ?  ;If set, Int 28h should be called, if clear no
   214 000004C0 ??                  <1>     procExiting db ?  ;Set to -1 if in process termination
   215                              <1> ;A request routed through the FCB or handle uses primReqPkt for its main IO.
   216                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   217                              <1> ; without forcing to re-build the whole primary request block.
   218                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   219                              <1> ; with secondary char output going through the secondary header
   220                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   221                              <1> ; for output)
   222                              <1> ;ioReqPkt is the largest possible packet
   223 000004C1 <res 2Ah>           <1>     secdReqPkt  db ioReqPkt_size dup (?) ;Secondary, Char IO Reqhdr
   224 000004EB <res 2Ah>           <1>     primReqPkt  db ioReqPkt_size dup (?) ;Main Drv Reqhdr 
   225                              <1> altRet: ;Accessed as a qword
   226 00000515 <res 2Ah>           <1>     critReqPkt  db ioReqPkt_size dup (?)  ;Used for ^C detection!
   227 0000053F ??                  <1>     pspCopyFlg  db ?  ;Set to -1 for child process PSP, 0 for simple PSP copy
   228                              <1> ;Swappable Buffers
   229 00000540 ????????????        <1>     CLOCKrecrd  db 6 dup (?)  ;Clock driver record
   230                              <1>     ;We add an additional byte to save ah too
   231 00000546 ????                <1>     singleIObyt dw ?  ;For single IO byte buffers
   232                              <1> extErrByteBuf:  ;Used by DOS execpt hdlr to build strings. Immediate abort!
   233                              <1> exeHdrSpace:    ;This needs 112 bytes in EXEC only, buffer is free for use!
   234 00000548 <res 80h>           <1>     buffer1     db 2*MAX_FSPEC dup (?)  ;Space for max expanded MAX_FSPEC
   235                              <1> sectHdr:        ;This needs 20 bytes in EXEC only
   236 000005C8 <res 80h>           <1>     buffer2     db 2*MAX_FSPEC dup (?) ;Space for a second path
   237 00000648 ????????????????    <1>     fname1Ptr   dq ?  ;Ptr to first filename argument
   238 00000650 ????????????????    <1>     fname2Ptr   dq ?  ;Ptr to second filename argument
   239 00000658 ??                  <1>     skipDisk    db ?  ;Set => Read Disk, Clear => Skip checking on disk
   240                              <1> ;Misc bookkeeping flags and vars
   241 00000659 <res 2Bh>           <1>     dosffblock  db ffBlock_size dup (?)  ;FF block (fullsize unlike DOS)
   242 00000684 <res 20h>           <1>     curDirCopy  db fatDirEntry_size dup (?)  ;Dir copy
   243 000006A4 <res 5Fh>           <1>     tmpCDS      db cds_size dup (?)  ;For server calls that need a tmp CDS
   244                              <1> ;These two are used to expand filenames into FCB format. The extra char 
   245                              <1> ; is used to store the terminator of the portion (either a pathsep or null)
   246 00000703 <res Ch>            <1>     fcbName     db MAX_NAME_FCBZ dup (?)
   247 0000070F <res Ch>            <1>     wcdFcbName  db MAX_NAME_FCBZ dup (?)  ;Expands wildcards for rename
   248 0000071B ????????????????    <1>     fileDirSect dq ?  ;File/Directory starting sector, for each level
   249 00000723 ??                  <1>     volIncmpFCB db ?  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   250 00000724 ??                  <1>     extFCBAttr  db ?  ;Extended FCB file attribute
   251 00000725 ??                  <1>     extFCBFlag  db ?  ;Set to -1 if Extended FCB
   252 00000726 ??                  <1>     searchAttr  db ?  ;Directory Search attributes
   253                              <1> ;    fileOpenMd  db ?  ;Open mode (compat, r/w/rw?) 
   254 00000727 ??                  <1>     renFlags    db ?  ;01h = Rename in same dir, 02h = Wildcard in destination
   255 00000728 ??                  <1>     badNameRen  db ?  ;Device name or File not found for rename
   256 00000729 ??                  <1>     rwFlag      db ?  ;00h=Read, 1=Write, read/write/share error reporting
   257 0000072A ??                  <1>     spliceFlag  db ?  ;00 = Relative path, !0 = Full path
   258 0000072B ??                  <1>     dosInvoke   db ?  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   259                              <1> 
   260 0000072C ??                  <1>     vConInsert  db ?  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   261 0000072D ??                  <1>     fileExist   db ?  ;-1 if file in pathspec exists (create/open)
   262 0000072E ??                  <1>     parDirExist db ?  ;-1 if parent directory for file exists (create/open)
   263 0000072F ??                  <1>     exitType    db ?  ;Forms the upper byte of the errorlvl
   264 00000730 ??                  <1>     openCreate  db ?  ;If open, set to 0, if Create set to -1
   265                              <1> ;Set to E5h for renaming and deletion. Can be set to 0 if *.* chosen
   266                              <1> ; to speed up the deletion but we don't use this (yet).
   267 00000731 ??                  <1>     delChar     db ?
   268 00000732 ??                  <1>     workingDrv  db ?  ;Working drive number, 0 based, from DPB
   269                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   270                              <1> workingDD:  ;Create a symbol for the working device driver too
   271 00000733 ????????????????    <1>     workingDPB  dq ?  ;Ptr to the DPB of the drive being accessed
   272 0000073B ????????????????    <1>     workingCDS  dq ?  ;Ptr to the CDS of the drive being accessed
   273 00000743 ????????????????    <1>     workingFCB  dq ?  ;Ptr to the caller FCB for FCB function
   274                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   275                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   276 0000074B ????????????????    <1>     workingSFT  dq ?  ;Temporary SFT (may not be not current) ptr being used
   277 00000753 ????????????????    <1>     curHdlPtr   dq ?  ;Ptr to JFT handle entry in current PSP
   278 0000075B ????????????????    <1>     currentSFT  dq ?  ;Ptr to the SFT of the file being accessed
   279 00000763 ????                <1>     currentNdx  dw ?  ;Used to access the current SFTNdx being opened/created
   280 00000765 ????                <1>     currentHdl  dw ?  ;The current file handle is saved here
   281 00000767 ????????????????    <1>     currBuff    dq ?  ;Ptr to the Current Buffer (hdr) being accessed
   282                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   283                              <1> ; and 32 byte offset into the sector for directory
   284 0000076F ????????????????    <1>     tempSect    dq ?  ;A scratch sector number
   285                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   286 00000777 ????                <1>     entry       dw ?  ;32 byte offset into a sector or #fats sectors/fat
   287                              <1> ;***************************************************|
   288                              <1> ; Needs to be set up before any file access         |
   289                              <1> ; These vars keep track of file access properties   |
   290                              <1> ;   and must be used only for such purposes.        |
   291                              <1> ;***************************************************|
   292 00000779 ????????            <1>     currClustF  dd ?  ;Relative cluster in file being r/w to/from
   293 0000077D ????????            <1>     currClustD  dd ?  ;Current Disk Cluster being r/w to/from
   294                              <1> 
   295 00000781 ????????            <1>     currSectF   dd ?  ;Current Sector in File being r/w to/from
   296 00000785 ??                  <1>     currSectC   db ?  ;Current Sector in Cluster being r/w to/from
   297 00000786 ????????????????    <1>     currSectD   dq ?  ;Current absolute Sector number on Disk
   298                              <1> 
   299 0000078E ????                <1>     currByteS   dw ?  ;Current Byte in sector being r/w to/from
   300 00000790 ????????            <1>     currByteF   dd ?  ;Current Byte in file being r/w to/from
   301                              <1> ;***************************************************|
   302 00000794 ????????            <1>     lastClust   dd ?  ;Number of the last (rel) cluster of the file
   303 00000798 ????????            <1>     lastClustA  dd ?  ;Number of the last (abs) cluster of file on disk
   304 0000079C ????????            <1>     tfrLen      dd ?  ;Number of bytes to transfer
   305 000007A0 ????????            <1>     tfrCntr     dd ?  ;Number of bytes left to transfer
   306                              <1> ;Directory stuff
   307 000007A4 ????????            <1>     dirClustPar dd ?  ;Absolute disk cluster of the start of the parent dir
   308 000007A8 ????????            <1>     dirClustA   dd ?  ;Absolute cluster number of current directory
   309 000007AC ????                <1>     dirSect     dw ?  ;Sector of current directory cluster
   310 000007AE ????????            <1>     dirEntry    dd ?  ;32 byte offset in dir for file being searched for
   311                              <1> ;Extended Open vars
   312 000007B2 ????                <1>     wEOFlags    dw ?  ;Set if we are doing an extended open with various flags
   313 000007B4 ????                <1>     wEOActions  dw ?  ;Extended open actions (user DX)
   314 000007B6 ????                <1>     wEOOpenMode dw ?  ;Symbol to the next two bytes. (USER BX)
   315 000007B8 ????                <1>     wEOAttribs  dw ?  ;Symbol to the next two bytes (USER CX)
   316 000007BA ????????????????    <1>     pszEOfile   dq ?  ;Ptr to null terminated string to file name (USER RSI)
   317                              <1> ;Error DPB 
   318 000007C2 ????????????????    <1>     tmpDPBPtr   dq ?  ;A DPB for error/temporary situations
   319                              <1> ;No clash recycling below var as the vars in SDA are invalid if in CPU 
   320                              <1> ; exception hdlr. This var gets cleared on entry to the exception handler. 
   321                              <1> ;If it remains clear, the task will Abort. If it gets set, DOS or COMMAND.COM 
   322                              <1> ; caused CPU exception or we have an NMI. Then we freeze as we cant guarantee 
   323                              <1> ; anything anymore.
   324                              <1> haltDOS:
   325 000007CA ??                  <1>     mediaByte   db ?  ;Calls 1Bh and 1Ch return ptr to here
   326                              <1>     
   327 000007CB <res 2Bh>           <1>     renameFFBlk db ffBlock_size dup (?)  ;Source file "find first" block
   328 000007F6 <res 20h>           <1>     renameDir   db fatDirEntry_size dup (?)  ;Build new file dir entry here
   329                              <1> ;Stacks and scratch SFT
   330 00000816 ????                <1>     alignb  8
   331 00000818 <res 528h>          <1>     critStack   dq 165 dup (?)
   332 00000D40 ????????????????    <1>     critStakTop dq ?
   333                              <1> 
   334 00000D48 <res 57h>           <1>     scratchSFT  db sft_size dup (?)  ;Used in FCB calls to emulate a SFT
   335                              <1>     
   336 00000D9F ??                  <1>     alignb  8
   337 00000DA0 <res 638h>          <1>     AuxStack    dq 199 dup (?)
   338 000013D8 ????????????????    <1>     AuxStakTop  dq ?  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   339 000013E0 <res 638h>          <1>     DiskStack   dq 199 dup (?)
   340 00001A18 ????????????????    <1>     DiskStakTop dq ?
   341                              <1> 
   342 00001A20 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   343                              <1> ;Below is used in create and delete for vol lbl only. Else is -1.
   344 00001A21 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   345                              <1>     sdaLen      equ     $ - sda 
   346                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   347                              <1> 
   348                              <1> ;Additional variables NOT in the SDA
   349 00001A22 ????????????????    <1>     serverDispTblPtr    dq ?  ;DO NOT MOVE! Used to find server dispatch tbl
   350                              <1> ;A backup header to allow copying to for saving the current header when 
   351                              <1> ; quickly doing a second request
   352 00001A2A <res 2Ah>           <1>     bkupReqHdr          db ioReqPkt_size dup (?)  
   353                              <1> ;Prevent toggling print if in the middle of reading an extended ASCII char
   354                              <1> inExtASCII:
   355 00001A54 ??                  <1>     noPrintTog  db ?  ;00 = Toggle as usual, 01 = Prevent toggle
   356 00001A55 ????                <1>     keybTicks   dw ?  ;Counts the number of cycles spent in a kb loop.
   357                              <1> ;Every time this overflows, we read the clock and update the DOS internal
   358                              <1> ; copy of the date/time record
   359                              <1> ;The idt doesnt need to be in the SDA as we will halt interrupts
   360                              <1> ; until we get/set the address. Thus the IDT entry returned is the 
   361                              <1> ; correct one AT the time of calling up to "the time it takes to get
   362                              <1> ; to the read IDT routine".
   363                              <1> dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   364 00001A57 ????                <1>     .limit  dw ?    ;Overlap this with stack below as no call overlap
   365 00001A59 ????????????????    <1>     .base   dq ?
   366                              <1> ;Lseek and IOCTL return data in registers as well as on the caller's 
   367                              <1> ; stack. In Int 2Fh, this could overwrite user data if the functions
   368                              <1> ; were allowed to write to original callers register stack. 
   369                              <1> ; So we have this structure below that is used by these functions to 
   370                              <1> ; write their "return" data onto a "stack", even though when accessed 
   371                              <1> ; through the multiplexer we never will read this structure. 
   372                              <1> ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   373                              <1> labelPkt:   ;Whilst this is here, keep the thing below kinda big :)
   374 00001A61 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
    21                                  dSegLen equ ($-$$)
    22                                  
    23                                  Segment dtext code private align=1 use64
    24                                  ;---------------------------
    25                                  ;       DOS segment
    26                                  ;---------------------------
    27                                  ;DOS main data/code seg. 
    28                                  ;No separation, as this is a single binary blob.
    29                                  %include "./src/Kernel/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 99 ;.99
    10                              <1> ;Revision and version flags are a Byte at most.
    11                              <1> dosRev   equ 2  
    12                              <1> dosVerFlags equ 1   ;First proper testing of kernel (Beta)
    13                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    14                              <1> 
    15 00000000 0063                <1> dosVersion  dw dosVerMac    ;DOS version number
    16 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    16 0000000B 535953              <1>
    17 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    17 00000017 535953              <1>
    18 0000001A 4E4F204E414D452020- <1> dosDfltLbl  db "NO NAME    "    ;Default disk label
    18 00000023 2020                <1>
    19                              <1> ;-----------------------------------:
    20                              <1> ;        Static Data Tables         :
    21                              <1> ;-----------------------------------:
    22                              <1> ;IO Char table
    23                              <1> ;This table has Request header length, command code and error flags
    24                              <1> ; as a packed DWORD entry
    25                              <1> ioRqCmdErrTbl:
    26                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    27                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    28 00000025 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    29 00000029 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    30 0000002D 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    31 00000031 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    32 00000035 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    33 00000039 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    34                              <1> 
    35                              <1> 
    36                              <1> 
    37                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    38                              <1> ; wish to install their own custom logic. The table below is NOT patched
    39                              <1> ; but instead, the function below gets replaced. By default, it points to 
    40                              <1> ; the function editKeys in charFunc.asm. 
    41 0000003D 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    42 00000045 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    43 00000046 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    44                              <1> ;Extended ASCII keys with special meanings
    45 00000047 3B                  <1> extKeyTbl   db eF1
    46 00000048 702D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    47 0000004A 3C                  <1>             db eF2
    48 0000004B 622D                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    49 0000004D 3D                  <1>             db eF3
    50 0000004E 692D                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    51 00000050 3E                  <1>             db eF4
    52 00000051 9E2D                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    53 00000053 3F                  <1>             db eF5
    54 00000054 E32D                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    55 00000056 40                  <1>             db eF6
    56 00000057 F92D                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    57 00000059 41                  <1>             db eF7
    58 0000005A 002E                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    59 0000005C 4B                  <1>             db eCursL
    60 0000005D C52C                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    61 0000005F 4D                  <1>             db eCursR
    62 00000060 702D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    63 00000062 52                  <1>             db eIns
    64 00000063 0B2E                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    65 00000065 53                  <1>             db eDel
    66 00000066 122E                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    67                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    68                              <1> 
    69                              <1> ;When counting the number of days, first compute the number of years since
    70                              <1> ; 1980 and your year. 
    71                              <1> ;Then, using the table below, find the number of leap years between 1980
    72                              <1> ; and (YourYear - 1). 
    73                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    74                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    75                              <1> ;
    76                              <1> ;Use the months table to get the number of days in a normal month as leap 
    77                              <1> ; years are added using the previous comment.
    78                              <1> 
    79                              <1> ;This table is the number of days in the month
    80                              <1> ;The function which updates the days in Feb writes the number to this table
    81                              <1> monthsTbl:  
    82 00000068 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    82 00000071 1F1E1F              <1>
    83                              <1> 
    84                              <1> ;Error tables
    85                              <1> hardXlatTbl:
    86                              <1> ;Hard error xlat table. Used so that it can be patched by 
    87                              <1> ; multitaskers and network tools as opposed to having a static
    88                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    89 00000074 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    90 00000075 14                  <1>     db errUnkUnt    ;Unknown Unit
    91 00000076 15                  <1>     db errDrvNR     ;Drive not ready
    92 00000077 16                  <1>     db errUnkCmd    ;Unknown Command
    93 00000078 17                  <1>     db errCRCerr    ;Data (CRC) error
    94 00000079 18                  <1>     db errBadRLn    ;Bad request structure length
    95 0000007A 19                  <1>     db errSekErr    ;Seek error
    96 0000007B 1A                  <1>     db errUnkMed    ;Unknown media type
    97 0000007C 1B                  <1>     db errSecNF     ;Sector not Found
    98 0000007D 1C                  <1>     db errNoPap     ;Printer out of paper
    99 0000007E 1D                  <1>     db errWF        ;Write fault
   100 0000007F 1E                  <1>     db errRF        ;Read fault
   101 00000080 1F                  <1>     db errGF        ;General fault
   102                              <1>     ;The following two adjust for share errors
   103 00000081 1F                  <1>     db errGF        ;Sharing violations
   104 00000082 1F                  <1>     db errGF        ;File Lock violation
   105 00000083 22                  <1>     db errIDC       ;Invalid Disk Change
   106                              <1> hardXlatTblL equ $ - hardXlatTbl
   107                              <1> errXlatTbl:
   108                              <1> ;Each entry is n bytes long, defined as
   109                              <1> ; Byte 0      : DOS function number for which translation will occur
   110                              <1> ; Byte 1      : Length of the table entry - 2
   111                              <1> ; Bytes n - 3 : Acceptable Error codes
   112                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   113                              <1> ;The table is terminated with a single -1 byte
   114                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   115                              <1> ; only on entry to a disk function
   116 00000084 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   117 00000088 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   118 0000008D 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   119 00000093 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   120 00000097 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   121 0000009D 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   122 000000A4 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   123 000000A7 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   124 000000AB 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   125 000000AF 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   126 000000B4 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   127 000000B8 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   128 000000BE 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   129 000000C5 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   130 000000C9 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   131 000000CD 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   132 000000D0 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   133 000000D4 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   134 000000D8 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   135 000000DD 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   136 000000E5 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   137 000000E7 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   138 000000EC 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   139 000000EF 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   140 000000F5 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   141 000000F9 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   142 000000FC 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   143 00000102 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   144 00000109 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   145 0000010F 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   146 00000113 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   147 00000117 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   148 0000011C 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   149 0000011F 69040F0D0105        <1>     db 69h, 04h, errBadDrv, errInvDat, errInvFnc, errAccDen ;Get/Set Disk Serial
   150 00000125 6C0A03020C045008    <1>     db 6Ch, 0Ah, errPnf, errFnf, errAccCde, errNhl, errFilExist, errNoMem
   151 0000012D 1A0D0105            <1>     db errUnkMed, errInvDat, errInvFnc, errAccDen       ;Extended Open/Create
   152 00000131 FF                  <1>     db -1   ;End Of Table marker
   153                              <1> 
   154                              <1> 
   155                              <1> extErrTbl:
   156                              <1> ;This table contains the default values for how to respond
   157                              <1> ; to particular errors. Fields with -1 need to be filled in before
   158                              <1> ; setting variables using this table.
   159                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   160                              <1> ; Byte 0: Extended Error Code as a byte
   161                              <1> ; Byte 1: Error Class
   162                              <1> ; Byte 2: Error Suggested Action
   163                              <1> ; Byte 3: Error Locus
   164                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   165                              <1> ;
   166                              <1> ;Error 01h: Invalid function number
   167 00000132 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   168                              <1> ;Error 02h: File not found
   169 00000136 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   170                              <1> ;Error 03h: Path not found
   171 0000013A 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   172                              <1> ;Error 04h: Too many open handles, and no handles are left
   173 0000013E 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   174                              <1> ;Error 05h: Access being denied
   175 00000142 050303FF            <1>     db errAccDen, eClsAuth, eActUsr, -1
   176                              <1> ;Error 06h: Invalid File handle being provided
   177 00000146 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   178                              <1> ;Error 07h: MCB chain destroyed
   179 0000014A 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   180                              <1> ;Error 08h: No Memory remaining
   181 0000014E 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   182                              <1> ;Error 09h: Invalid MCB block Address
   183 00000152 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   184                              <1> ;Error 0Ah: Bad Environment block
   185 00000156 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   186                              <1> ;Error 0Bh: Data provided in a bad format
   187 0000015A 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   188                              <1> ;Error 0Ch: Access Code Invalid
   189 0000015E 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   190                              <1> ;Error 0Dh: Error due to Invalid Data provided
   191 00000162 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   192                              <1> ;Error 0Fh: Error due to a bad drive letter being provided
   193 00000166 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   194                              <1> ;Error 10h: Error due to attempting to delete the CWD
   195 0000016A 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   196                              <1> ;Error 11h: Error due to a unknown device being used
   197 0000016E 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   198                              <1> ;Error 12h: No more file handles available
   199 00000172 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   200                              <1> ;Error 50h: File already exits
   201 00000176 500C0302            <1>     db errFilExist, eClsClash, eActUsr, eLocDsk
   202                              <1> ;Error 20h: Share Violation, Resource cannot be shared
   203 0000017A 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   204                              <1> ;Error 21h: File Lock Violation
   205 0000017E 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   206                              <1> ;Error 54h: Too many levels of redirection error
   207 00000182 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   208                              <1> ;Error 56h: Bad resource password provided
   209 00000186 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   210                              <1> ;Error 52h: Directory already exists
   211 0000018A 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   212                              <1> ;Error 32h: Network request not supported by DOS
   213 0000018E 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   214                              <1> ;Error 55h: Trying to duplicate a redirection for a resource
   215 00000192 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   216                              <1> ;Error 57h: Bad parameter in request
   217 00000196 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   218                              <1> ;Error 53h: Fail was returned from Int 24h
   219 0000019A 530D0401            <1>     db errFI24, eClsUnk, eActAbt, eLocUnk
   220                              <1> ;Error 24h: Sharing Buffer Full
   221 0000019E 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   222                              <1> ;Error 26h: Handle reached EOF on handle that reports EOF
   223 000001A2 26010401            <1>     db errHdlEOF, eClsOoR, eActAbt, eLocUnk
   224                              <1> ;Error 27h: Handle reached a full disk condition and asked to report this
   225 000001A6 27010401            <1>     db errDskFul, eClsOoR, eActAbt, eLocUnk
   226                              <1> ;Error XXh: Catch all case
   227 000001AA FFFFFFFF            <1>     dd -1
   228                              <1> 
   229                              <1> hardErrTbl:
   230                              <1> ;Same format as above, used for translating hard errors.
   231                              <1> ; Byte 0: Extended Error Code as a byte
   232                              <1> ; Byte 1: Error Class
   233                              <1> ; Byte 2: Error Suggested Action
   234                              <1> ; Byte 3: Error Locus
   235                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   236                              <1> ;
   237                              <1> ;DOS Error 19/Driver Error 0: Write Protect Error
   238 000001AE 130B0702            <1>     db errWpd, eClsMedia, eActRetUsr, eLocDsk
   239                              <1> ;DOS Error 20/Driver Error 1: Unknown Unit
   240 000001B2 14040501            <1>     db errUnkUnt, eClsInt, eActKil, eLocUnk
   241                              <1> ;DOS Error 21/Driver Error 2: Drive not ready
   242 000001B6 150507FF            <1>     db errDrvNR, eClsHrdFlt, eActRetUsr, -1
   243                              <1> ;DOS Error 22/Driver Error 3: Unknown command
   244 000001BA 16040501            <1>     db errUnkCmd, eClsInt, eActKil, eLocUnk
   245                              <1> ;DOS Error 23/Driver Error 4: CRC (data integrity) error
   246 000001BE 170B0402            <1>     db errCRCerr, eClsMedia, eActAbt, eLocDsk
   247                              <1> ;DOS Error 24/Driver Error 5: Bad request length 
   248 000001C2 18040501            <1>     db errBadRLn, eClsInt, eActKil, eLocUnk
   249                              <1> ;DOS Error 25/Driver Error 6: Seek error
   250 000001C6 19050102            <1>     db errSekErr, eClsHrdFlt, eActRet, eLocDsk
   251                              <1> ;DOS Error 26/Driver Error 7: Unknown (non-DOS) medium
   252 000001CA 1A0B0702            <1>     db errUnkMed, eClsMedia, eActRetUsr, eLocDsk
   253                              <1> ;DOS Error 27/Driver Error 8: Sector not found
   254 000001CE 1B0B0402            <1>     db errSecNF, eClsMedia, eActAbt, eLocDsk
   255                              <1> ;DOS Error 28/Driver Error 9: Printer (or device) out of paper
   256 000001D2 1C020704            <1>     db errNoPap, eClsTS, eActRetUsr, eLocChr
   257                              <1> ;DOS Error 29/Driver Error 10: Write failure
   258 000001D6 1D0504FF            <1>     db errWF, eClsHrdFlt, eActAbt, -1
   259                              <1> ;DOS Error 30/Driver Error 11: Read failure
   260 000001DA 1E0504FF            <1>     db errRF, eClsHrdFlt, eActAbt, -1
   261                              <1> ;DOS Error 31/Driver Error 12: General failure
   262 000001DE 1F0D04FF            <1>     db errGF, eClsUnk, eActAbt, -1
   263                              <1> ;DOS Error 32: Share Violation, Resource cannot be shared
   264 000001E2 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   265                              <1> ;DOS Error 33: File Lock Violation
   266 000001E6 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   267                              <1> ;DOS Error 50: Network request not supported
   268 000001EA 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   269                              <1> ;DOS Error 35: FCB Unavailable
   270 000001EE 23070401            <1>     db errNoFCB, eClsAppFlt, eActAbt, eLocUnk
   271                              <1> ;DOS Error 36: Sharing buffer full, Can't share more files!
   272 000001F2 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   273                              <1> ;DOS Error XX: Catch all case for other hard errors
   274 000001F6 FF0D05FF            <1>     db -1, eClsUnk, eActKil, -1
   275                              <1> 
   276                              <1> 
   277                              <1> ;Nationalisation stuff
   278                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   279 000001FA 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   280 00000202 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   280 0000020B 535953000000000000- <1>
   280 00000214 000000000000000000- <1>
   280 0000021D 000000000000000000- <1>
   280 00000226 000000000000000000- <1>
   280 0000022F 000000000000000000- <1>
   280 00000238 000000000000000000- <1>
   280 00000241 00                  <1>
   281 00000242 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   282 00000244 0600                <1> ctryFunctions:  dw 6    ;Support 6 extended functions: al=01,02,04,05,06,07
   283                              <1> charTableArray: ;All the qwords need fixing up here
   284                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   285 00000246 02                  <1>     db 2
   286 00000247 [A002000000000000]  <1>     dq ucTblExt
   287                              <1> .filenameUCTable:
   288 0000024F 04                  <1>     db 4
   289 00000250 [2203000000000000]  <1>     dq fileUCTblExt
   290                              <1> .filenameTerminatingTable:
   291 00000258 05                  <1>     db 5
   292 00000259 [A403000000000000]  <1>     dq fileTermTblExt
   293                              <1> .collatingTable:
   294 00000261 06                  <1>     db 6
   295 00000262 [D403000000000000]  <1>     dq collTblExt
   296                              <1> .dbcsTable:
   297 0000026A 07                  <1>     db 7
   298 0000026B [D604000000000000]  <1>     dq dbcsTblExt
   299                              <1> ;Extended country table
   300                              <1> extCtryTbl:
   301 00000273 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   302                              <1>     ;Below: Length of structure (not including this word and above byte)
   303 00000274 2A00                <1>     dw extCtryTblL
   304                              <1> .countryCode:
   305 00000276 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   306                              <1> .activeCP:
   307 00000278 B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   308                              <1> ;Regular country table
   309                              <1> ctryTbl:
   310                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   311 0000027A 0100                <1>     dw 1    ;Date format, UK style
   312 0000027C 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   313 00000281 2C00                <1>     db ",",0    ;Thousand separator
   314 00000283 2E00                <1>     db ".",0    ;Decimal separator
   315 00000285 2D00                <1>     db "-",0    ;Date separator
   316 00000287 3A00                <1>     db ":",0    ;Time separator
   317 00000289 00                  <1>     db 0        ;Currency format, symbol leads with no space
   318 0000028A 02                  <1>     db 2        ;Number of digits after decimal point
   319 0000028B 00                  <1>     db 0        ;Time format, 12hr clock
   320 0000028C 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   321 00000294 2C00                <1>     db ",",0    ;Data list separator
   322 00000296 000000000000000000- <1>     db 10 dup (0)
   322 0000029F 00                  <1>
   323                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   324                              <1> 
   325                              <1> ucTblExt:   ;External pointer to the uppercase table
   326 000002A0 8000                <1>     dw 80h
   327                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   328 000002A2 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   329 000002AA 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   330 000002B2 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   331 000002BA 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   332 000002C2 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   333 000002CA A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   334 000002D2 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   335 000002DA B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   336 000002E2 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   337 000002EA C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   338 000002F2 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   339 000002FA D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   340 00000302 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   341 0000030A E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   342 00000312 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   343 0000031A F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   344                              <1> 
   345                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   346 00000322 8000                <1>     dw 80h
   347                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   348 00000324 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   349 0000032C 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   350 00000334 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   351 0000033C 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   352 00000344 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   353 0000034C A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   354 00000354 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   355 0000035C B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   356 00000364 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   357 0000036C C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   358 00000374 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   359 0000037C D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   360 00000384 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   361 0000038C E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   362 00000394 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   363 0000039C F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   364                              <1> 
   365                              <1> fileTermTblExt:
   366 000003A4 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   367 000003A6 01                  <1>     db 1    ;Signature byte for the table (1)
   368 000003A7 00                  <1>     db 0    ;Lowest permissible char value for filename
   369 000003A8 FF                  <1>     db -1   ;Highest permissible char value for filename
   370 000003A9 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   371                              <1> .startBadRange:
   372 000003AA 00                  <1>     db 0    ;Start of the illegal range of filename chars
   373                              <1> .endBadRange:
   374 000003AB 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   375 000003AC 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   376                              <1> fileTermTbl:
   377 000003AD 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   378 000003AE 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   379 000003B4 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   380                              <1>     fileTermTbl_len equ $ - fileTermTbl
   381                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   382                              <1>     ;Buffer space
   383 000003BC 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   383 000003C5 000000000000000000- <1>
   383 000003CE 000000000000        <1>
   384                              <1> 
   385                              <1> collTblExt:  ;Collating sequence table, for sorting
   386 000003D4 0001                <1>     dw 0100h
   387                              <1> collTbl:
   388 000003D6 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   389 000003DE 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   390 000003E6 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   391 000003EE 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   392 000003F6 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   393 000003FE 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   394 00000406 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   395 0000040E 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   396 00000416 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   397 0000041E 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   398 00000426 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   399 0000042E 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   400 00000436 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   401 0000043E 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   402 00000446 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   403 0000044E 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   404 00000456 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   405 0000045E 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   406 00000466 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   407 0000046E 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   408 00000476 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   409 0000047E 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   410 00000486 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   411 0000048E B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   412 00000496 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   413 0000049E C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   414 000004A6 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   415 000004AE D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   416 000004B6 E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   417 000004BE E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   418 000004C6 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   419 000004CE F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   420                              <1> 
   421                              <1> dbcsTblExt:
   422 000004D6 0600                <1>     dw 6    ;Length of the DBCS table. Doesn't exceed 6 bytes.
   423                              <1> dbcsTbl:
   424                              <1> ;The default DBCS table for our CP is just zeros.
   425                              <1> ;COUNTRY can change this.
   426 000004D8 000000000000        <1>     db 6 dup (0)
   427                              <1> 
   428                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   429                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   430                              <1> ;Bit[1]=Clear if the char of a terminating type.
   431                              <1> ;Bit[2]=Clear if the char is of separator type.
   432                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   433                              <1> ;Bit[4-7]=Unused.    
   434                              <1> 
   435 000004DE F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   436 000004E6 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   437 000004EE F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   438 000004F6 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   439 000004FE F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   440 00000506 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   441 0000050E FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   442 00000516 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   443 0000051E FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   444 00000526 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   445 0000052E FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   446 00000536 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   447 0000053E FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   448 00000546 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   449 0000054E FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   450 00000556 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   451 0000055E FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   451 00000567 FFFFFFFFFFFFFFFFFF- <1>
   451 00000570 FFFFFFFFFFFFFFFFFF- <1>
   451 00000579 FFFFFFFFFFFFFFFFFF- <1>
   451 00000582 FFFFFFFFFFFFFFFFFF- <1>
   451 0000058B FFFFFFFFFFFFFFFFFF- <1>
   451 00000594 FFFFFFFFFFFFFFFFFF- <1>
   451 0000059D FFFFFFFFFFFFFFFFFF- <1>
   451 000005A6 FFFFFFFFFFFFFFFFFF- <1>
   451 000005AF FFFFFFFFFFFFFFFFFF- <1>
   451 000005B8 FFFFFFFFFFFFFFFFFF- <1>
   451 000005C1 FFFFFFFFFFFFFFFFFF- <1>
   451 000005CA FFFFFFFFFFFFFFFFFF- <1>
   451 000005D3 FFFFFFFFFFFFFFFFFF- <1>
   451 000005DC FFFF                <1>
    30                                  %include "./src/Kernel/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 000005DE CE5B                <1>     dw simpleTerminate - kDispTbl       ;AH = 00H, PROCESS MANAGEMENT
     5 000005E0 9D21                <1>     dw charIn_BE - kDispTbl             ;AH = 01H, CHAR IO
     6 000005E2 AA21                <1>     dw charOut_B - kDispTbl             ;AH = 02H, CHAR IO
     7 000005E4 8022                <1>     dw auxIn_B - kDispTbl               ;AH = 03H, CHAR IO
     8 000005E6 AA22                <1>     dw auxOut_B - kDispTbl              ;AH = 04H, CHAR IO
     9 000005E8 B222                <1>     dw prnOut_B - kDispTbl              ;AH = 05H, CHAR IO
    10 000005EA CA22                <1>     dw directConIO - kDispTbl           ;AH = 06H, CHAR IO
    11 000005EC FE22                <1>     dw charIn - kDispTbl                ;AH = 07H, CHAR IO
    12 000005EE 2423                <1>     dw charIn_B - kDispTbl              ;AH = 08H, CHAR IO
    13 000005F0 8323                <1>     dw printString_B - kDispTbl         ;AH = 09H, CHAR IO
    14 000005F2 3C26                <1>     dw buffCharInput_BE - kDispTbl      ;AH = 0AH, CHAR IO
    15 000005F4 9323                <1>     dw checkStdinStatus - kDispTbl      ;AH = 0BH, CHAR IO
    16 000005F6 A023                <1>     dw clearbuffDoFunc - kDispTbl       ;AH = 0CH, CHAR IO
    17 000005F8 5D78                <1>     dw diskReset - kDispTbl             ;AH = 0DH, DISK MANAGEMENT
    18 000005FA 9178                <1>     dw selectDisk - kDispTbl            ;AH = 0EH, DISK MANAGEMENT
    19 000005FC 192E                <1>     dw openFileFCB - kDispTbl           ;AH = 0FH, FILE OPERATION       FCB
    20 000005FE 8C2E                <1>     dw closeFileFCB - kDispTbl          ;AH = 10H, FILE OPERATION       FCB
    21 00000600 B42B                <1>     dw findFirstFileFCB - kDispTbl      ;AH = 11H, FILE OPERATION       FCB
    22 00000602 702C                <1>     dw findNextFileFCB - kDispTbl       ;AH = 12H, FILE OPERATION       FCB
    23 00000604 F72C                <1>     dw deleteFileFCB - kDispTbl         ;AH = 13H, FILE OPERATION       FCB
    24 00000606 A32E                <1>     dw sequentialReadFCB - kDispTbl     ;AH = 14H, RECORD OPERATION     FCB
    25 00000608 A32E                <1>     dw sequentialWriteFCB - kDispTbl    ;AH = 15H, RECORD OPERTAION     FCB
    26 0000060A 192E                <1>     dw createFileFCB - kDispTbl         ;AH = 16H, FILE OPERATION       FCB
    27 0000060C 262D                <1>     dw renameFileFCB - kDispTbl         ;AH = 17H, FILE OPERATION       FCB
    28 0000060E 417B                <1>     dw noOp - kDispTbl                  ;AH = 18H, RESERVED
    29 00000610 AA78                <1>     dw getCurrentDisk - kDispTbl        ;AH = 19H, DISK MANAGEMENT
    30 00000612 E42D                <1>     dw setDTA - kDispTbl                ;AH = 1AH, RECORD OPERATION     F/H
    31 00000614 B178                <1>     dw FATinfoDefault - kDispTbl        ;AH = 1BH, DISK MANAGEMENT
    32 00000616 B378                <1>     dw FATinfoDevice - kDispTbl         ;AH = 1CH, DISK MANAGEMENT
    33 00000618 417B                <1>     dw noOp - kDispTbl                  ;AH = 1DH, RESERVED
    34 0000061A 417B                <1>     dw noOp - kDispTbl                  ;AH = 1EH, RESERVED
    35 0000061C 6079                <1>     dw getCurrentDPBptr - kDispTbl      ;AH = 1FH, INTERNAL, GET CURR DRIVE DPB PTR
    36 0000061E 417B                <1>     dw noOp - kDispTbl                  ;AH = 20H, RESERVED
    37 00000620 A32E                <1>     dw randomReadFCB - kDispTbl         ;AH = 21H, RECORD OPERATION     FCB
    38 00000622 A32E                <1>     dw randomWriteFCB - kDispTbl        ;AH = 22H, RECORD OPERATION     FCB
    39 00000624 912D                <1>     dw getFileSizeFCB - kDispTbl        ;AH = 23H, FILE OPERATION       FCB
    40 00000626 A32E                <1>     dw setRelRecordFCB - kDispTbl       ;AH = 24H, RECORD OPERATION     FCB
    41 00000628 FC78                <1>     dw setIntVector - kDispTbl          ;AH = 25H, MISC. SYS. FUNCTION
    42 0000062A D35A                <1>     dw copyPSP - kDispTbl               ;AH = 26H, PROCESS MANAGEMENT
    43 0000062C A32E                <1>     dw randBlockReadFCB - kDispTbl      ;AH = 27H, RECORD OPERATION     FCB
    44 0000062E A32E                <1>     dw randBlockWriteFCB - kDispTbl     ;AH = 28H, RECORD OPERATION     FCB
    45 00000630 0A2E                <1>     dw parseFilenameFCB - kDispTbl      ;AH = 29H, FILE OPERATION       FCB
    46 00000632 C228                <1>     dw getDate - kDispTbl               ;AH = 2AH, TIME AND DATE
    47 00000634 EF28                <1>     dw setDate - kDispTbl               ;AH = 2BH, TIME AND DATE
    48 00000636 FF28                <1>     dw getTime - kDispTbl               ;AH = 2CH, TIME AND DATE
    49 00000638 2029                <1>     dw setTime - kDispTbl               ;AH = 2DH, TIME AND DATE
    50 0000063A 2679                <1>     dw setResetVerify - kDispTbl        ;AH = 2EH, DISK MANAGEMENT
    51 0000063C F72D                <1>     dw getDTA - kDispTbl                ;AH = 2FH, RECORD OPERATION     F/H
    52 0000063E 3479                <1>     dw getDOSversion - kDispTbl         ;AH = 30H, MISC. SYS. FUNCTION
    53 00000640 A05B                <1>     dw terminateStayRes - kDispTbl      ;AH = 31H, PROCESS MANAGEMENT
    54 00000642 6279                <1>     dw getDeviceDPBptr - kDispTbl       ;AH = 32H, INTERNAL, GET DEVICE DPB PTR
    55 00000644 CA77                <1>     dw cbcServer - kDispTbl             ;AH = 33H, MISC. SYS. FUNCTION
    56 00000646 9A79                <1>     dw getInDOSflagPtr - kDispTbl       ;AH = 34H, GET PTR TO INDOS FLAG
    57 00000648 AB79                <1>     dw getIntVector - kDispTbl          ;AH = 35H, MISC. SYS. FUNCTION
    58 0000064A BA79                <1>     dw getDiskFreeSpace - kDispTbl      ;AH = 36H, DISK MANAGEMENT
    59 0000064C 6264                <1>     dw getsetSwitchChar - kDispTbl      ;AH = 37H, INTERNAL, CHANGE SWITCH CHAR
    60 0000064E 8B64                <1>     dw getsetCountryInfo - kDispTbl     ;AH = 38H, MISC. SYS. FUNCTION
    61 00000650 A317                <1>     dw makeDIR - kDispTbl               ;AH = 39H, DIRECTORY OPERATION
    62 00000652 241A                <1>     dw removeDIR - kDispTbl             ;AH = 3AH, DIRECTORY OPERATION
    63 00000654 1A1C                <1>     dw setCurrentDIR - kDispTbl         ;AH = 3BH, DIRECTORY OPERATION
    64 00000656 A530                <1>     dw createFileHdl - kDispTbl         ;AH = 3CH, FILE OPERATION       HANDLE
    65 00000658 B630                <1>     dw openFileHdl - kDispTbl           ;AH = 3DH, FILE OPERATION       HANDLE
    66 0000065A F931                <1>     dw closeFileHdl - kDispTbl          ;AH = 3EH, FILE OPERATION       HANDLE
    67 0000065C 3732                <1>     dw readFileHdl - kDispTbl           ;AH = 3FH, RECORD OPERATION     HANDLE
    68 0000065E 8332                <1>     dw writeFileHdl - kDispTbl          ;AH = 40H, RECORD OPERATION     HANDLE
    69 00000660 8F32                <1>     dw deleteFileHdl - kDispTbl         ;AH = 41H, FILE OPERATION       HANDLE
    70 00000662 F432                <1>     dw lseekHdl - kDispTbl              ;AH = 42H, RECORD OPERATION     HANDLE
    71 00000664 6533                <1>     dw changeFileModeHdl - kDispTbl     ;AH = 43H, FILE OPERATION       HANDLE
    72 00000666 1E50                <1>     dw ioctrl - kDispTbl                ;AH = 44H, MISC. SYS. FUNCTION  HANDLE
    73 00000668 8334                <1>     dw duplicateHandle - kDispTbl       ;AH = 45H, FILE OPERATION       HANDLE
    74 0000066A C334                <1>     dw forceDuplicateHdl - kDispTbl     ;AH = 46H, FILE OPERATION       HANDLE
    75 0000066C A21D                <1>     dw getCurrentDIR - kDispTbl         ;AH = 47H, DIRECTORY OPERATION
    76 0000066E 6055                <1>     dw allocateMemory - kDispTbl        ;AH = 48H, MEMORY MANAGEMENT
    77 00000670 6457                <1>     dw freeMemory - kDispTbl            ;AH = 49H, MEMORY MANAGEMENT
    78 00000672 6C58                <1>     dw reallocMemory - kDispTbl         ;AH = 4AH, MEMORY MANAGEMENT
    79 00000674 2C5D                <1>     dw loadExecChild - kDispTbl         ;AH = 4BH, PROCESS MANAGEMENT
    80 00000676 D05B                <1>     dw terminateClean - kDispTbl        ;AH = 4CH, PROCESS MANAGEMENT
    81 00000678 FE79                <1>     dw getRetCodeChild - kDispTbl       ;AH = 4DH, PROCESS MANAGEMENT
    82 0000067A D834                <1>     dw findFirstFileHdl - kDispTbl      ;AH = 4EH, FILE OPERATION       HANDLE
    83 0000067C 4335                <1>     dw findNextFileHdl - kDispTbl       ;AH = 4FH, FILE OPERATION       HANDLE
    84 0000067E 2878                <1>     dw scpspServer - kDispTbl           ;AH = 50H, INTERNAL, SET CURRENT PROCESS ID
    85 00000680 3778                <1>     dw gcpspServer - kDispTbl           ;AH = 51H, INTERNAL, GET CURRENT PROCESS ID
    86 00000682 0C7A                <1>     dw getSysVarsPtr - kDispTbl         ;AH = 52H, INTERNAL, GET SYSVARS POINTER
    87 00000684 1D7A                <1>     dw createDPB - kDispTbl             ;AH = 53H, INTERNAL, TRANSLATE A BPB TO DPB
    88 00000686 077B                <1>     dw getVerifySetting - kDispTbl      ;AH = 54H, DISK MANAGEMENT
    89 00000688 C05A                <1>     dw createPSP - kDispTbl             ;AH = 55H, INTERNAL, CREATE PSP
    90 0000068A 7335                <1>     dw renameFile - kDispTbl            ;AH = 56H, FILE OPERATION       HANDLE
    91 0000068C FF35                <1>     dw getSetFileDateTime - kDispTbl    ;AH = 57H, FILE OPERATION       HANDLE
    92 0000068E 145A                <1>     dw getsetMallocStrat - kDispTbl     ;AH = 58H, MEMORY MANAGEMENT
    93 00000690 0E7B                <1>     dw getExtendedError - kDispTbl      ;AH = 59H, MISC. SYS. FUNCTION
    94 00000692 6F36                <1>     dw createUniqueFile - kDispTbl      ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000694 3737                <1>     dw createNewFile - kDispTbl         ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000696 4B37                <1>     dw lockUnlockFile - kDispTbl        ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000698 F77B                <1>     dw dosServer - kDispTbl             ;AH = 5DH, INTERNAL, SERVER ACTIONS
    98 0000069A B87D                <1>     dw netServices - kDispTbl           ;AH = 5EH, NETWORK FUNCTIONS
    99 0000069C 1E7E                <1>     dw netRedir - kDispTbl              ;AH = 5FH, NETWORK FUNCTIONS
   100 0000069E 171E                <1>     dw trueName - kDispTbl              ;AH = 60H, INTERNAL, GET TRUE NAME
   101 000006A0 427B                <1>     dw systemServices - kDispTbl        ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 000006A2 3778                <1>     dw gcpspServer - kDispTbl           ;AH = 62H, PROCESS MANAGEMENT
   103 000006A4 417B                <1>     dw noOp - kDispTbl                  ;AH = 63H, RESERVED
   104 000006A6 5578                <1>     dw sdlServer - kDispTbl             ;AH = 64H, INTERNAL, DRIVER LOOKAHEAD
   105 000006A8 2465                <1>     dw getExtLocalInfo - kDispTbl       ;AH = 65H, MISC. SYS. FUNCTION
   106 000006AA 7466                <1>     dw getsetGlobalCP - kDispTbl        ;AH = 66H, MISC. SYS. FUNCTION
   107 000006AC B737                <1>     dw setHandleCount - kDispTbl        ;AH = 67H, FILE OPERAITON       F/H
   108 000006AE F538                <1>     dw commitFile - kDispTbl            ;AH = 68H, FILE OPERATION       HANDLE
   109 000006B0 C97B                <1>     dw getsetDiskSerial - kDispTbl      ;AH = 69H, INTERNAL, GET/SET DISK SER. NUM
   110 000006B2 F538                <1>     dw commitFile - kDispTbl            ;AH = 6AH, FILE OPERATION       HANDLE
   111 000006B4 417B                <1>     dw noOp - kDispTbl                  ;AH = 6BH, RESERVED
   112 000006B6 1B39                <1>     dw xOpenHdl - kDispTbl              ;AH = 6CH, FILE OPERATION       HANDLE
   113                              <1> kDispTblL  equ $ - kDispTbl 
   114                              <1> 
   115                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   116 000006B8 30                  <1>     db mDispTblL/2  ;Number of entries in table
   117 000006B9 F47D                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   118 000006BB 0844                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   119 000006BD 1E71                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   120 000006BF F77D                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   121 000006C1 6D72                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   122 000006C3 D220                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   123 000006C5 1C67                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   124 000006C7 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   125 000006C9 7A4E                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   126 000006CB 7901                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   127 000006CD 5F7F                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   128 000006CF CB7E                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   129 000006D1 3840                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   130 000006D3 C72A                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   131 000006D5 B300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   132 000006D7 CD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   133 000006D9 DB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   134 000006DB E872                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   135 000006DD C972                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   136 000006DF 7972                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   137 000006E1 0374                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   138 000006E3 4A01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   139 000006E5 A04D                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   140 000006E7 3B72                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   141 000006E9 4C71                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   142 000006EB E071                <1>     dw getCDS - mDispTbl    ;AX=1219h
   143 000006ED 710E                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   144 000006EF 5A2A                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   145 000006F1 4B7E                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   146 000006F3 587E                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   147 000006F5 0173                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   148 000006F7 8A71                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   149 000006F9 D54D                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   150 000006FB 331D                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   151 000006FD 8376                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   152 000006FF 3516                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   153 00000701 A77E                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   154 00000703 BE72                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   155                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   156 00000705 FF7D                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   157 00000707 1F31                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   158 00000709 077E                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   159 0000070B 5D31                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   160 0000070D 677A                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   161 0000070F 297E                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   162 00000711 3774                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   163 00000713 4274                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   164 00000715 677A                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   165 00000717 6F78                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   166                              <1> mDispTblL   equ     $ - mDispTbl
   167                              <1> 
   168                              <1> serverDispTbl:  ;Server Dispatch functions
   169 00000719 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   170 0000071A 027B                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   171 0000071C 547B                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   172 0000071E AB7B                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   173 00000720 BC7B                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   174 00000722 C47B                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   175 00000724 CC7B                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   176 00000726 E77B                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   177 00000728 117C                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   178 0000072A 117C                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   179 0000072C 117C                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   180 0000072E 1E7C                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   181                              <1> serverDispTblL   equ     $ - serverDispTbl
    31                                  %if DEBUG
    32                                  %include "./src/Kernel/Debug/debug.asm" ;Only include if debug symbols on!
    33                                  %endif
    34                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 00000730 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000737 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000739 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    13 0000073A 56                  <1>     push rsi
    14 0000073B 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 00000742 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 00000745 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 00000747 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 0000074A EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 0000074C 57                  <1>     push rdi
    22 0000074D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 00000750 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 00000753 5F                  <1>     pop rdi ;Get original buf back
    25 00000754 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 00000757 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 0000075E 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 00000761 5E                  <1>     pop rsi
    29                              <1>     return
    13                              <2> %%_ret:
    14 00000762 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> markBuffersAsUnreferencedWrapper:
    32                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    33                              <1> ; and preserves rdi
    34 00000763 57                  <1>     push rdi
    35 00000764 E802000000          <1>     call markBuffersAsUnreferenced
    36 00000769 5F                  <1>     pop rdi
    37                              <1>     return
    13                              <2> %%_ret:
    14 0000076A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                              <1> 
    39                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    40                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    41                              <1> ;Output: rdi = First disk buffer
    42 0000076B 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    43 00000772 57                  <1>     push rdi
    44                              <1> .lp:
    45 00000773 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    46 00000777 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    47 0000077A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    48 00000781 75F0                <1>     jne .lp
    49 00000783 5F                  <1>     pop rdi
    50                              <1>     return
    13                              <2> %%_ret:
    14 00000784 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    53                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    54                              <1> ; second buffer in the chain in rdi
    55                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    56                              <1> ;Output: rdi = Second buffer in the chain
    57 00000785 52                  <1>     push rdx
    58 00000786 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    59 00000789 E8A2FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    60 0000078E 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    61 00000791 5A                  <1>     pop rdx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00000792 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    65                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    66                              <1> ;Input: rdi = Buffer header to start searching at
    67                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    68                              <1> ;        ZF=ZE => No unreferenced buffer found
    69 00000793 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Start by checking rdi is not at the end of the list already :)
    70                              <1>     rete    ;Return preserving ZF is so
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000079A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000079C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    71 0000079D F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    72 000007A1 7405                <1>     jz .exit    ;Unreferenced buffer found!
    73 000007A3 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    74 000007A6 EBEB                <1>     jmp short findUnreferencedBuffer  ;Check next buffer
    75                              <1> .exit:
    76 000007A8 50                  <1>     push rax
    77 000007A9 0D01000000          <1>     or eax, 1   ;Clear ZF
    78 000007AE 58                  <1>     pop rax
    79                              <1>     return
    13                              <2> %%_ret:
    14 000007AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> flushAllBuffersForDPB:  ;External linkage
    82                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    83 000007B0 50                  <1>     push rax
    84 000007B1 488B05(33070000)    <1>     mov rax, qword [workingDPB]
    85 000007B8 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    86 000007BB E802000000          <1>     call flushAllBuffersForDrive
    87 000007C0 58                  <1>     pop rax
    88                              <1>     return
    13                              <2> %%_ret:
    14 000007C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    91                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    92                              <1> ; Used also to allow flushing all buffers
    93                              <1> ; Input: al = 0-based physical drive number we are xacting on
    94                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    95                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    96 000007C2 57                  <1>     push rdi
    97 000007C3 50                  <1>     push rax
    98 000007C4 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    99 000007CB B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
   100                              <1> .mainLp:
   101 000007CD 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   102 000007D4 741E                <1>     je .exit   
   103 000007D6 E827000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   104 000007DB 50                  <1>     push rax
   105 000007DC 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   106 000007E0 3A05(31040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   107 000007E6 58                  <1>     pop rax
   108 000007E7 7405                <1>     je .errDrv      ;If not, goto next buffer
   109                              <1> .nextBuffer:        ;This handles the case if the user aborts or ignores.
   110 000007E9 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   111 000007EC EBDF                <1>     jmp short .mainLp
   112                              <1> .errDrv:
   113                              <1> ;Free the buffer if it caused an error in this DOS call and was aborted
   114                              <1> ; or ignored.
   115 000007EE C64708FF            <1>     mov byte [rdi + bufferHdr.wDrvNumFlg], freeBuffer
   116 000007F2 EBF5                <1>     jmp short .nextBuffer
   117                              <1> .exit:
   118 000007F4 58                  <1>     pop rax
   119 000007F5 5F                  <1>     pop rdi
   120 000007F6 F605(94040000)FF    <1>     test byte [Int24Fail], -1   ;Did we return fail at any point?
   121                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007FD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007FF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   122 00000800 F9                  <1>     stc     ;If so, carry the CF=CY
   123                              <1>     return
    13                              <2> %%_ret:
    14 00000801 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   126                              <1> ;Flushes and cleans the dirty bit from the buffer
   127                              <1> ;Input: AH = Drives to ignore flush for
   128                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   129                              <1> ;       rdi -> Buffer in question
   130 00000802 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000805 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000807 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   132 00000808 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   133 0000080A 7407                <1>     je .takeThisBuffer
   134 0000080C 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   135 0000080F F8                  <1>     clc
   136                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000810 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000812 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   137                              <1> .takeThisBuffer:
   138 00000813 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   139                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000817 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000819 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   140 0000081A 50                  <1>     push rax    ;Save the drive number
   141 0000081B 0FB74708            <1>     movzx eax, word [rdi + bufferHdr.wDrvNumFlg]
   142 0000081F 50                  <1>     push rax    ;Save the buffer flags
   143 00000820 E80C000000          <1>     call flushAndFreeBuffer
   144 00000825 58                  <1>     pop rax     ;Get back the flags
   145 00000826 7207                <1>     jc .exit
   146 00000828 80E4BF              <1>     and ah, ~dirtyBuffer    ;Clean the dirty bit
   147 0000082B 66894708            <1>     mov word [rdi + bufferHdr.wDrvNumFlg], ax  ;And return the drv/flags!
   148                              <1> .exit:  
   149 0000082F 58                  <1>     pop rax     ;Get back the drive number
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000830 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   153                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   154                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   155                              <1> ;Exit:  CF=NC : Success
   156                              <1> ;       CF=CY : Fail, terminate the request
   157 00000831 50                  <1>     push rax
   158 00000832 53                  <1>     push rbx
   159 00000833 51                  <1>     push rcx
   160 00000834 52                  <1>     push rdx
   161 00000835 56                  <1>     push rsi
   162 00000836 55                  <1>     push rbp
   163                              <1> ;If the buffer is freed, skip flushing to avoid issues
   164 00000837 B8FF000000          <1>     mov eax, freeBuffer
   165 0000083C 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   166                              <1>     ;ah = Flags, al = Drive number
   167 00000840 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   168 00000842 7470                <1>     je .fbFreeExit  ;If it was free, exit
   169 00000844 F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   170 00000847 746B                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   171 00000849 3A05(31040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   172 0000084F 7463                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   173 00000851 C605(92040000)19    <1>     mov byte [Int24bitfld], critWrite | critRetryOK | critFailOK
   174 00000858 F6C408              <1>     test ah, dataBuffer
   175 0000085B 7407                <1>     jz .fbWriteSetup
   176 0000085D 800D(92040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   177                              <1> .fbWriteSetup:
   178 00000864 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   179 00000869 F6C402              <1>     test ah, fatBuffer
   180 0000086C 7406                <1>     jz .fbWriteNotFat
   181 0000086E 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   182                              <1> .fbWriteNotFat:
   183 00000874 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   184 00000878 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   185 0000087C 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   186 00000880 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   187                              <1> .fbWriteDisk:
   188 00000884 50                  <1>     push rax    ;Save the drive number and flags
   189 00000885 53                  <1>     push rbx    ;Has pointer to buffer data area
   190 00000886 51                  <1>     push rcx    ;# of FAT sectors
   191 00000887 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   192 00000888 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   193 00000889 55                  <1>     push rbp    ;DPB ptr for drive
   194 0000088A B901000000          <1>     mov ecx, 1  ;One sector to copy
   195 0000088F E8026E0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   196 00000894 E80D6C0000          <1>     call absDiskDriverCall    ;Make Driver Request
   197 00000899 5D                  <1>     pop rbp
   198 0000089A 5E                  <1>     pop rsi
   199 0000089B 5A                  <1>     pop rdx
   200 0000089C 59                  <1>     pop rcx
   201 0000089D 5B                  <1>     pop rbx
   202                              <1>     ;Don't pop rax here to carry the error code if error!
   203 0000089E 751C                <1>     jnz .fbFail
   204                              <1> ;Now check if the buffer was a FAT, to write additional copies
   205 000008A0 58                  <1>     pop rax ;Now pop the drive number and flags off the stack
   206 000008A1 F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   207 000008A4 740E                <1>     jz .fbFreeExit  ;If not, exit
   208 000008A6 FFC9                <1>     dec ecx
   209 000008A8 740A                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   210 000008AA 50                  <1>     push rax
   211 000008AB 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   212 000008AE 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   213 000008B1 58                  <1>     pop rax
   214 000008B2 EBD0                <1>     jmp short .fbWriteDisk ;Make another request for the other FAT copy
   215                              <1> .fbFreeExit:
   216 000008B4 F8                  <1>     clc
   217                              <1> .fbExitFail:
   218 000008B5 5D                  <1>     pop rbp
   219 000008B6 5E                  <1>     pop rsi
   220 000008B7 5A                  <1>     pop rdx
   221 000008B8 59                  <1>     pop rcx
   222 000008B9 5B                  <1>     pop rbx
   223 000008BA 58                  <1>     pop rax
   224                              <1>     return
    13                              <2> %%_ret:
    14 000008BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> .fbFail:
   226                              <1> ;Enter here only if the request failed esi times or bad change
   227 000008BC 3C0F                <1>     cmp al, drvBadDskChnge  ;If error code is bad change, prompt immediately
   228 000008BE 7407                <1>     je .fbHardError
   229 000008C0 FFCE                <1>     dec esi
   230 000008C2 7403                <1>     jz .fbHardError ;Once we have tried it a number of times, fail!
   231 000008C4 58                  <1>     pop rax     ;Else pop back the drive number and flags
   232 000008C5 EBBD                <1>     jmp short .fbWriteDisk ;Try the request again!
   233                              <1> .fbHardError:
   234                              <1> ;Request failed thrice, critical error call
   235                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   236 000008C7 E81B640000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   237 000008CC 3C01                <1>     cmp al, critRetry
   238 000008CE 58                  <1>     pop rax     ;Now pop back the drive number and flags from the stack!
   239 000008CF 7493                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   240                              <1> ;Else we fail (Ignore=Fail here)
   241 000008D1 F9                  <1>     stc ;Set error flag to indicate fail
   242 000008D2 EBE1                <1>     jmp short .fbExitFail
   243                              <1> 
   244                              <1> testDirtyBufferForDrive:    ;External linkage
   245                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   246                              <1> ;Input: al = Drive number (0 based)
   247                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   248                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   249 000008D4 53                  <1>     push rbx
   250 000008D5 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   251                              <1> .tdbfdCheckBuffer:
   252 000008DC 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   253 000008DF 7509                <1>     jne .tdbfdGotoNextBuffer
   254 000008E1 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   255 000008E5 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   256 000008E7 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   257                              <1> .tdbfdExit:
   258 000008E8 5B                  <1>     pop rbx
   259                              <1>     return
    13                              <2> %%_ret:
    14 000008E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   260                              <1> .tdbfdGotoNextBuffer:
   261 000008EA 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   262 000008ED 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   263 000008F4 74F2                <1>     je .tdbfdExit
   264 000008F6 EBE4                <1>     jmp short .tdbfdCheckBuffer
   265                              <1> 
   266                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   267                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   268                              <1> ; to have a drive number of -1, thus freeing it
   269                              <1> ;Given Drive number is in al
   270 000008F8 57                  <1>     push rdi
   271 000008F9 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   272                              <1> .i0:
   273 00000900 4881FFFFFFFFFF      <1>     cmp rdi, -1
   274 00000907 7417                <1>     je .exit
   275 00000909 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   276 0000090C 750D                <1>     jne .i1 ;If no, skip freeing
   277 0000090E 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   278 00000914 E86CFEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   279 00000919 EBE5                <1>     jmp short .i0
   280                              <1> .i1:
   281 0000091B 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   282 0000091E EBE0                <1>     jmp short .i0
   283                              <1> .exit:
   284 00000920 5F                  <1>     pop rdi
   285                              <1>     return
    13                              <2> %%_ret:
    14 00000921 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   286                              <1> 
   287                              <1> markBufferDirty:
   288 00000922 55                  <1>     push rbp
   289 00000923 9C                  <1>     pushfq
   290 00000924 488B2D(67070000)    <1>     mov rbp, qword [currBuff]
   291 0000092B 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   292 0000092F 9D                  <1>     popfq
   293 00000930 5D                  <1>     pop rbp
   294                              <1>     return
    13                              <2> %%_ret:
    14 00000931 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> getBuffer: ;Internal Linkage ONLY
   297                              <1> ;
   298                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   299                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   300                              <1> ;Flushes if not in disk change mode. 
   301                              <1> ;If in disk change mode, will check to see if the selected buffer 
   302                              <1> ; has data referring a device using the same DPB as we are changing.
   303                              <1> ; If it is, skip flushing, if not, flush first!
   304                              <1> ;
   305                              <1> ;This function will return a pointer to the desired data sector OR 
   306                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   307                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   308                              <1> ;Entry: rax = Sector to read
   309                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   310                              <1> ;       rsi = DPB to use for transaction
   311                              <1> ;Exit:  CF=NC => 
   312                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   313                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   314 00000932 51                  <1>     push rcx
   315 00000933 52                  <1>     push rdx
   316 00000934 56                  <1>     push rsi
   317 00000935 57                  <1>     push rdi
   318 00000936 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   319 00000938 E821010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   320 0000093D 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   321 00000944 741F                <1>     je .rbReadNewSector
   322 00000946 48893D(67070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   323 0000094D E8DEFDFFFF          <1>     call makeBufferMostRecentlyUsed
   324 00000952 F8                  <1>     clc
   325                              <1> .rbExit:
   326 00000953 5F                  <1>     pop rdi
   327 00000954 5E                  <1>     pop rsi
   328 00000955 5A                  <1>     pop rdx
   329 00000956 59                  <1>     pop rcx
   330 00000957 9C                  <1>     pushfq
   331 00000958 488B1D(67070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   332 0000095F 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   333 00000963 9D                  <1>     popfq
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000964 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> .rbReadNewSector:
   336 00000965 E89D000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   337 0000096A E8C2FEFFFF          <1>     call flushAndFreeBuffer
   338 0000096F 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   339                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   340                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   341                              <1>     ; is no longer owned by that File so we mark the owner as none
   342 00000971 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   343 00000974 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   344 00000977 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   345 0000097B 80F902              <1>     cmp cl, fatBuffer
   346 0000097E B201                <1>     mov dl, 1   ;Default values if not fat buffer
   347 00000980 7503                <1>     jne .rbNonFATbuffer
   348 00000982 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   349                              <1> .rbNonFATbuffer:
   350 00000985 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   351 00000988 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   352 0000098B 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   353 0000098E 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   354 00000992 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   355 00000996 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   356 0000099B EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   357                              <1> 
   358                              <1> readSectorBuffer:   ;Internal Linkage
   359                              <1> ;Reads a sector into a built sector buffer
   360                              <1> ;Entry: rdi = Pointer to buffer header
   361                              <1> ;Exit:  CF=NC : Success
   362                              <1> ;       CF=CY : Fail, terminate the request
   363                              <1> ;       rbx pointing to buffer header
   364                              <1> ;First make request to device driver
   365 0000099D 50                  <1>     push rax
   366 0000099E 53                  <1>     push rbx
   367 0000099F 51                  <1>     push rcx
   368 000009A0 52                  <1>     push rdx
   369 000009A1 56                  <1>     push rsi
   370 000009A2 55                  <1>     push rbp
   371                              <1> .rsRequest0:
   372 000009A3 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   373 000009A8 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   374 000009AC 7406                <1>     jz .rsRequest1
   375 000009AE 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   376                              <1> .rsRequest1:
   377 000009B4 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   378 000009B7 B901000000          <1>     mov ecx, 1  ;One sector to copy
   379 000009BC 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   380 000009C0 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   381 000009C4 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   382 000009C8 E8D46C0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   383 000009CD E8D46A0000          <1>     call absDiskDriverCall    ;Make Driver Request
   384 000009D2 7508                <1>     jnz .rsFail
   385                              <1> .rsExit:
   386 000009D4 F8                  <1>     clc
   387                              <1> .rsExitFail:
   388 000009D5 5D                  <1>     pop rbp
   389 000009D6 5E                  <1>     pop rsi
   390 000009D7 5A                  <1>     pop rdx
   391 000009D8 59                  <1>     pop rcx
   392 000009D9 5B                  <1>     pop rbx
   393 000009DA 58                  <1>     pop rax
   394                              <1>     return
    13                              <2> %%_ret:
    14 000009DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   395                              <1> .rsFail:
   396                              <1> ;Enter here only if the request failed. al has driver error code
   397 000009DC 3C0F                <1>     cmp al, drvBadDskChnge  ;If error code is bad change, prompt immediately
   398 000009DE 7404                <1>     je .rsBadChange
   399 000009E0 FFCE                <1>     dec esi
   400 000009E2 75D0                <1>     jnz .rsRequest1 ;Try the request again!
   401                              <1> .rsBadChange:
   402                              <1> ;Request failed thrice or bad change detected, critical error call
   403                              <1> ;First free the buffer if we failed to read data into it. 
   404                              <1> ;We free this buffer to free the resource if the user aborts.
   405                              <1> ;This function is called in a critical section so the buffer pointer
   406                              <1> ; is under no thread of being reallocated.
   407                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   408 000009E4 C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1 ;Free buffer
   409 000009E8 C605(92040000)18    <1>     mov byte [Int24bitfld], critRead | critFailOK | critRetryOK
   410 000009EF E8F3620000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   411 000009F4 3C01                <1>     cmp al, critRetry
   412 000009F6 7509                <1>     jne .fail   ;Else we fail
   413 000009F8 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   414 000009FC 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   415 000009FF EBA2                <1>     jmp short .rsRequest0
   416                              <1> .fail:
   417 00000A01 F9                  <1>     stc ;Set error flag to indicate fail
   418 00000A02 E9CEFFFFFF          <1>     jmp .rsExitFail
   419                              <1>     
   420                              <1> findLRUBuffer: ;Internal Linkage
   421                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   422                              <1> ; in rdi and the currBuff variable
   423                              <1> ;Input: Nothing
   424                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   425                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   426 00000A07 52                  <1>     push rdx
   427 00000A08 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   428 00000A0F 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   429 00000A13 7436                <1>     je .flbExit 
   430 00000A15 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   431 00000A1C 742D                <1>     je .flbExit
   432                              <1> .flbWalk:
   433 00000A1E 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   434 00000A21 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   435 00000A24 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   436 00000A28 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   437 00000A2A 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   438 00000A31 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   439 00000A33 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   440                              <1> .flbHeadLink:
   441 00000A3A 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   442 00000A41 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   443 00000A48 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   444                              <1> .flbExit:
   445 00000A4B 5A                  <1>     pop rdx
   446 00000A4C 48893D(67070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   447                              <1>     return
    13                              <2> %%_ret:
    14 00000A53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .flbFreeLink:
   449 00000A54 51                  <1>     push rcx
   450 00000A55 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   451 00000A58 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   452 00000A5B 59                  <1>     pop rcx
   453 00000A5C EBDC                <1>     jmp short .flbHeadLink
   454                              <1> 
   455                              <1> findSectorInBuffer:     ;Internal linkage
   456                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   457                              <1> ;If the sector is not in a buffer, returns with a -1
   458                              <1> ;Input: rax = Sector number
   459                              <1> ;       dl = Drive number
   460                              <1> ;Output: rdi = Buffer hdr pointer or -1
   461 00000A5E 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   462                              <1> .fsiCheckBuffer:
   463 00000A65 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   464 00000A68 7507                <1>     jne .fsiGotoNextBuffer
   465 00000A6A 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   466 00000A6E 7501                <1>     jne .fsiGotoNextBuffer
   467                              <1> .fsiExit:
   468                              <1>     return
    13                              <2> %%_ret:
    14 00000A70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> .fsiGotoNextBuffer:
   470 00000A71 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   471 00000A74 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   472 00000A7B 74F3                <1>     je .fsiExit
   473 00000A7D EBE6                <1>     jmp short .fsiCheckBuffer
   474                              <1> 
   475                              <1> ;-----------------------------------------------------------------------------
   476                              <1> ;SPECIAL BUFFER FUNCTIONS
   477                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   478                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   479                              <1> ;-----------------------------------------------------------------------------
   480                              <1> getBufForDOS:
   481                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   482                              <1> ;Input: [workingDPB] = DPB to transact on
   483                              <1> ;       rax = Sector to transfer
   484                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   485 00000A7F 51                  <1>     push rcx
   486 00000A80 B101                <1>     mov cl, dosBuffer
   487 00000A82 EB0D                <1>     jmp short getBufCommon
   488                              <1> getBufForFat:
   489                              <1> ;Returns a buffer to use for fat data in rbx
   490                              <1> ;Input: [workingDPB] = DPB to transact on
   491                              <1> ;       rax = Sector to transfer
   492                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   493 00000A84 51                  <1>     push rcx
   494 00000A85 B102                <1>     mov cl, fatBuffer
   495 00000A87 EB08                <1>     jmp short getBufCommon
   496                              <1> getBufForDir:
   497                              <1> ;Returns a buffer to use for disk directory data in rbx
   498                              <1> ;Input: [workingDPB] = File to manipulate
   499                              <1> ;       rax = Sector to transfer
   500                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   501 00000A89 51                  <1>     push rcx
   502 00000A8A B104                <1>     mov cl, dirBuffer
   503 00000A8C EB03                <1>     jmp short getBufCommon
   504                              <1> getBufForData:
   505                              <1> ;Returns a buffer to use for disk data in rbx
   506                              <1> ;Requires a File Handle.
   507                              <1> ;Input: [workingDPB] = File to manipulate
   508                              <1> ;       rax = Sector to transfer
   509                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   510 00000A8E 51                  <1>     push rcx
   511 00000A8F B108                <1>     mov cl, dataBuffer
   512                              <1> getBufCommon:
   513 00000A91 56                  <1>     push rsi
   514 00000A92 57                  <1>     push rdi
   515 00000A93 488B35(33070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   516                              <1> .makeReq:
   517 00000A9A E893FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   518 00000A9F 5F                  <1>     pop rdi
   519 00000AA0 5E                  <1>     pop rsi
   520 00000AA1 59                  <1>     pop rcx
   521                              <1>     return
    13                              <2> %%_ret:
    14 00000AA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000AA3 53                  <1>     push rbx
     9 00000AA4 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    10 00000AA7 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000AAC 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000AB2 730C                <1>     jae .exit
    13 00000AB4 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000AB6 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000ABC 7302                <1>     jae .exit
    16 00000ABE FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000AC0 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000AC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000AC2 53                  <1>     push rbx
    29 00000AC3 55                  <1>     push rbp
    30 00000AC4 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
    31 00000ACB 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    32 00000ACE 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000AD4 731E                <1>     jae .fat32
    34 00000AD6 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000ADC 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000ADE D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000AE0 6801000000          <1>     push qword 1
    39 00000AE5 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000AE7 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000AE9 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000AEB 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000AED 6800000000          <1>     push qword 0
    45 00000AF2 EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000AF4 6802000000          <1>     push qword 2
    48 00000AF9 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000AFC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000B00 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000B02 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000B04 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000B08 01D8                <1>     add eax, ebx
    56 00000B0A 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000B0B 5D                  <1>     pop rbp
    58 00000B0C 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000B0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000B0E 51                  <1>     push rcx
    68 00000B0F 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000B11 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000B13 482D02000000        <1>     sub rax, 2
    72 00000B19 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
    73 00000B1C 48D3E0              <1>     shl rax, cl
    74 00000B1F 31C9                <1>     xor ecx, ecx
    75 00000B21 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000B24 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000B27 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000B28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000B29 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000B2C E872FFFFFF          <1>     call getFATtype
    83 00000B31 81F902000000        <1>     cmp ecx, 2
    84 00000B37 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000B39 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000B3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000B3B 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B3D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B3F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97 00000B40 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000B41 89C3                <1>     mov ebx, eax
   100 00000B43 E858020000          <1>     call readFAT
   101 00000B48 7209                <1>     jc .exit
   102 00000B4A 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000B4F 75F0                <1>     jne .lp
   104 00000B51 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000B53 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000B54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000B55 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B57 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B59 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   116 00000B5A 51                  <1>     push rcx
   117 00000B5B 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000B5D FFC1                <1>     inc ecx
   120 00000B5F E83C020000          <1>     call readFAT
   121 00000B64 7209                <1>     jc .exit
   122 00000B66 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000B6B 75F0                <1>     jne .lp
   124 00000B6D 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000B6F 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000B70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000B71 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B73 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B75 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   139 00000B76 53                  <1>     push rbx
   140 00000B77 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000B7A 89C3                <1>     mov ebx, eax
   143 00000B7C E81F020000          <1>     call readFAT
   144 00000B81 7206                <1>     jc .exit
   145 00000B83 FFC9                <1>     dec ecx
   146 00000B85 75F3                <1>     jnz .lp
   147 00000B87 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000B89 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000B8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000B8B 53                  <1>     push rbx
   157 00000B8C 56                  <1>     push rsi
   158 00000B8D E874000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000B92 7223                <1>     jc .exit    ;Disk read error?
   160 00000B94 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000B99 7415                <1>     je .exit2   ;Exit synching disk full status
   162 00000B9B BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000BA0 89C3                <1>     mov ebx, eax
   164 00000BA2 E8A5020000          <1>     call writeFAT
   165 00000BA7 720E                <1>     jc .exit 
   166 00000BA9 89D8                <1>     mov eax, ebx
   167 00000BAB E87C030000          <1>     call decrementFreeClusterCount
   168                              <1> .exit2:
   169 00000BB0 50                  <1>     push rax
   170 00000BB1 E821040000          <1>     call writeFSInfoSector
   171 00000BB6 58                  <1>     pop rax
   172                              <1> .exit:
   173 00000BB7 5E                  <1>     pop rsi
   174 00000BB8 5B                  <1>     pop rbx
   175                              <1>     return
    13                              <2> %%_ret:
    14 00000BB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> allocateClusters:
   178                              <1> ;Working dpb must be set. 
   179                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   180                              <1> ;       ebx = Cluster to link to the new cluster
   181                              <1> ;Output:    
   182                              <1> ;   ecx = Number of allocated clusters
   183                              <1> ;   CF=NC => Complete.
   184                              <1> ;   If eax = -1, then no more free clusters. 
   185                              <1> ;   CF=CY => Hard error, exit
   186 00000BBA F8                  <1>     clc ;Always clear the flags before starting
   187 00000BBB 53                  <1>     push rbx
   188 00000BBC 56                  <1>     push rsi
   189 00000BBD 51                  <1>     push rcx    ;Save tfr count on stack
   190 00000BBE 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   191                              <1> .allocateLoop:
   192 00000BC1 E840000000          <1>     call findFreeCluster
   193 00000BC6 722B                <1>     jc .exit
   194 00000BC8 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   195 00000BCD 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   196                              <1>     ;eax has first free cluster value to use
   197                              <1>     ;First we link the previous cluster to this cluster
   198 00000BCF BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   199 00000BD4 50                  <1>     push rax
   200 00000BD5 E872020000          <1>     call writeFAT   ;Allocate this cluster first
   201 00000BDA 58                  <1>     pop rax
   202 00000BDB 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   203 00000BDD E84A030000          <1>     call decrementFreeClusterCount
   204                              <1>     ;eax points to this allocated cluster
   205                              <1>     ;ebx points to the previous last cluster
   206 00000BE2 89C6                <1>     mov esi, eax    ;New cluster as "value"
   207 00000BE4 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   208 00000BE6 E861020000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   209 00000BEB 7206                <1>     jc .exit
   210 00000BED 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   211 00000BEF FFC9                <1>     dec ecx ;One less cluster allocated
   212 00000BF1 75CE                <1>     jnz .allocateLoop
   213                              <1> .exit:
   214 00000BF3 5E                  <1>     pop rsi ;Pop the tfr count into esi
   215 00000BF4 9C                  <1>     pushfq
   216 00000BF5 F7D9                <1>     neg ecx
   217 00000BF7 01F1                <1>     add ecx, esi
   218 00000BF9 50                  <1>     push rax
   219 00000BFA 51                  <1>     push rcx
   220 00000BFB E8D7030000          <1>     call writeFSInfoSector
   221 00000C00 59                  <1>     pop rcx
   222 00000C01 58                  <1>     pop rax
   223 00000C02 9D                  <1>     popfq
   224 00000C03 5E                  <1>     pop rsi
   225 00000C04 5B                  <1>     pop rbx
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000C05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> findFreeCluster:
   229                              <1> ;Walks the FAT to find a free cluster and returns the 
   230                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   231                              <1> ;Starts from the pervious first free cluster and wraps around if 
   232                              <1> ; we hit the max disk size and keeps searching until we get back
   233                              <1> ; to the starting cluster value. 
   234                              <1> ;If the first free cluster is unknown, we start from 2. If we hit the 
   235                              <1> ; max disk size in that case, we fail.
   236                              <1> ;Works on the workingDPB.
   237                              <1> ;If returns with CF=CY => Fail set, return immediately to caller.
   238 00000C06 53                  <1>     push rbx
   239 00000C07 52                  <1>     push rdx
   240 00000C08 55                  <1>     push rbp
   241 00000C09 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
   242 00000C10 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   243 00000C13 3DFFFFFFFF          <1>     cmp eax, -1     ;Do we have a good starting free cluster? 
   244 00000C18 7511                <1>     jne .lp
   245                              <1>     ;Check if the count of free clusters is 0. If so, we are full!
   246 00000C1A 817D3100000000      <1>     cmp dword [rbp + dpb.dFreeClustCnt], 0
   247 00000C21 742D                <1>     je .diskFull
   248                              <1>     ;Else, we just have unreliable metadata. Start search from 2!
   249 00000C23 B802000000          <1>     mov eax, 2      ;If not, start searching from 2.
   250 00000C28 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Start searching here!
   251                              <1> .lp:
   252 00000C2B 89C3                <1>     mov ebx, eax
   253 00000C2D E86E010000          <1>     call readFAT    ;Deref the cluster value of ebx into eax
   254 00000C32 722E                <1>     jc .exitFast
   255 00000C34 85C0                <1>     test eax, eax   ;Now eax = DATA [ebx]. If 0, this is free!
   256 00000C36 7424                <1>     jz .freeFnd
   257 00000C38 678D4301            <1>     lea eax, dword [ebx + 1]    ;Else, get sequentially the next cluster
   258                              <1>     ;If these are equal, we've gone through the whole FAT. Disk full!
   259 00000C3C 3B452D              <1>     cmp eax, dword [rbp + dpb.dNextFreeClst]
   260 00000C3F 740F                <1>     je .diskFull    
   261                              <1>     ;Are we past the max cluster address?
   262 00000C41 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   263 00000C44 76E5                <1>     jbe .lp ;If not, use this next cluster value!
   264                              <1> ;Else, we are past end of the disk. Start from 2 again or disk full?
   265 00000C46 B802000000          <1>     mov eax, 2  ;Default to search from 2 again
   266                              <1>     ;If the firstfreecluster = 2, then we've searched everything. Fail.
   267 00000C4B 39452D              <1>     cmp dword [rbp + dpb.dNextFreeClst], eax    
   268 00000C4E 75DB                <1>     jne .lp
   269                              <1> .diskFull:
   270                              <1> ;Set free cluster count to 0 and first free cluster to -1
   271 00000C50 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set the free clusters
   272 00000C57 BBFFFFFFFF          <1>     mov ebx, -1     ;Set cluster value to -1
   273                              <1> .freeFnd:
   274 00000C5C 89D8                <1>     mov eax, ebx    ;Get the free cluster value into eax
   275 00000C5E 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Save first free cluster!
   276 00000C61 F8                  <1>     clc
   277                              <1> .exitFast:
   278 00000C62 5D                  <1>     pop rbp
   279 00000C63 5A                  <1>     pop rdx
   280 00000C64 5B                  <1>     pop rbx
   281                              <1>     return
    13                              <2> %%_ret:
    14 00000C65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> findFreeClusterData:
   284                              <1> ;Walks the FAT to find a free cluster and returns the 
   285                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   286                              <1> ; Also finds NumberOfFreeClusters, if it is unknown. 
   287                              <1> ; Both fields get filled in the workingDPB
   288                              <1> ;Works on the workingDPB
   289                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   290 00000C66 53                  <1>     push rbx
   291 00000C67 51                  <1>     push rcx
   292 00000C68 52                  <1>     push rdx
   293 00000C69 55                  <1>     push rbp
   294 00000C6A 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
   295 00000C71 E82DFEFFFF          <1>     call getFATtype
   296 00000C76 81F902000000        <1>     cmp ecx, 2  ;If not FAT32, always get afresh
   297 00000C7C 7512                <1>     jne .getNew
   298                              <1>     ;Else, if either entry is unknown, get both!
   299 00000C7E 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   300 00000C85 7409                <1>     je .getNew
   301 00000C87 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dNextFreeClst], -1
   302 00000C8E 7543                <1>     jne .exit
   303                              <1> .getNew:
   304                              <1>     ;Reset this data. Get first free cluster
   305 00000C90 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1
   306 00000C97 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1
   307 00000C9E E863FFFFFF          <1>     call findFreeCluster
   308 00000CA3 7237                <1>     jc .exitFail
   309 00000CA5 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set to 0 for new count
   310 00000CAC 3DFFFFFFFF          <1>     cmp eax, -1 ;First free cluster = -1 means disk full!
   311 00000CB1 7420                <1>     je .exit
   312                              <1>     ;Else, eax has the first free cluster. Keep reading FAT
   313 00000CB3 E865020000          <1>     call incrementFreeClusterCount  ;Increment the count for the first clust!
   314                              <1> .lp:
   315 00000CB8 89C3                <1>     mov ebx, eax    ;Save the cluster number
   316 00000CBA E8E1000000          <1>     call readFAT    ;Get dereferenced value in eax
   317 00000CBF 721B                <1>     jc .exitFail
   318 00000CC1 85C0                <1>     test eax, eax
   319 00000CC3 7505                <1>     jnz .notFree
   320 00000CC5 E853020000          <1>     call incrementFreeClusterCount  ;Increment the count!
   321                              <1> .notFree:
   322 00000CCA 678D4301            <1>     lea eax, dword [ebx + 1]    ;Get the next consecutive cluster
   323 00000CCE 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   324 00000CD1 76E5                <1>     jbe .lp
   325                              <1> .exit:
   326 00000CD3 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]  ;Get first free cluster in eax
   327 00000CD6 E8FC020000          <1>     call writeFSInfoSector
   328 00000CDB F8                  <1>     clc
   329                              <1> .exitFail:      ;Keep carry flag
   330 00000CDC 5D                  <1>     pop rbp
   331 00000CDD 5A                  <1>     pop rdx
   332 00000CDE 59                  <1>     pop rcx
   333 00000CDF 5B                  <1>     pop rbx
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000CE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> getNextSectorOfFile:
   337                              <1> ;This function will return the next sector of a file in rax
   338                              <1> ;If the next sector to be read lives in the next cluster, it will update
   339                              <1> ; the vars appropriately
   340                              <1> ;
   341                              <1> ;Input: rbp = dpb pointer
   342                              <1> ;Output:
   343                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   344                              <1> ;           If ZF=ZE => [currClustF] = Last Cluster of File.
   345                              <1> ;       CF=CY => Critical error occurred and was FAILed
   346                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   347                              <1> ; next cluster and read first sector 
   348                              <1>     ;Check if we need to go to next cluster
   349 00000CE1 8A05(85070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   350 00000CE7 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   351 00000CEA 741C                <1>     je .gotoNextCluster
   352                              <1>     ;Goto next sector in same cluster
   353 00000CEC FE05(85070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   354 00000CF2 48FF05(86070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   355 00000CF9 488B05(86070000)    <1>     mov rax, qword [currSectD]
   356                              <1> .exit:
   357 00000D00 50                  <1>     push rax
   358 00000D01 31C0                <1>     xor eax, eax
   359 00000D03 FFC0                <1>     inc eax ;Ensure ZF=NZ
   360 00000D05 58                  <1>     pop rax
   361 00000D06 F8                  <1>     clc     ;And CF=NC
   362                              <1>     return
    13                              <2> %%_ret:
    14 00000D07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> .gotoNextCluster:
   364 00000D08 8B05(7D070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   365 00000D0E E88D000000          <1>     call readFAT
   366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000D13 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000D15 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   367                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   368 00000D16 3DFFFFFFFF          <1>     cmp eax, -1 ;ZF=ZE and CF=NC if they are equal
   369                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000D1B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000D1D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   370                              <1> ;Update the new cluster and sector information
   371 00000D1E 8905(7D070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   372 00000D24 FF05(79070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   373 00000D2A E8DFFDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   374 00000D2F 488905(86070000)    <1>     mov qword [currSectD], rax  ;Save it
   375 00000D36 C605(85070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   376 00000D3D EBC1                <1>     jmp short .exit
   377                              <1> 
   378                              <1> 
   379                              <1> truncateFAT:
   380                              <1> ;Same as below but always sets the cluster we are unlinking at to EOC.
   381                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   382                              <1> ;       rbp = Current DPB to use for disk
   383                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   384 00000D3F 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   385 00000D40 56                  <1>     push rsi
   386 00000D41 E82B000000          <1>     call freeChainFAT   ;Preserves eax, frees the full chain.
   387 00000D46 721B                <1>     jc .exit
   388 00000D48 BEFFFFFFFF          <1>     mov esi, -1         ;Realloc the cluster we are freeing from as EOC
   389 00000D4D 50                  <1>     push rax            ;Save the cluster we are writing at
   390 00000D4E E8F9000000          <1>     call writeFAT
   391 00000D53 58                  <1>     pop rax
   392 00000D54 720D                <1>     jc .exit
   393 00000D56 E8D1010000          <1>     call decrementFreeClusterCount  ;Remove it from the free cluster count!
   394                              <1> .setFree:
   395                              <1> ;Do this stuff here, because we want to update the free count too!
   396 00000D5B 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax ;And set this to search from
   397 00000D5E E874020000          <1>     call writeFSInfoSector  ;New first free cluster values
   398                              <1> .exit:
   399 00000D63 5E                  <1>     pop rsi
   400 00000D64 58                  <1>     pop rax
   401                              <1>     return
    13                              <2> %%_ret:
    14 00000D65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> unlinkFAT:
   403                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   404                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   405                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   406                              <1> ; cluster must be set to EOC before this proc is called.
   407                              <1> ;Stops at first invalid cluster number.
   408                              <1> ;
   409                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   410                              <1> ;       rbp = Current DPB to use for disk
   411                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   412                              <1> 
   413 00000D66 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   414 00000D67 56                  <1>     push rsi
   415                              <1> ;The below call decrements the cluster count for the full chain freed including
   416                              <1> ; the starting cluster address.
   417 00000D68 E804000000          <1>     call freeChainFAT    ;Preserved eax. May set eax to first free cluster.
   418 00000D6D 73EC                <1>     jnc truncateFAT.setFree ;Set the first free sector to eax
   419 00000D6F EBF2                <1>     jmp short truncateFAT.exit  ;If an error, skip updating the FSInfo sector
   420                              <1> 
   421                              <1> freeChainFAT:
   422                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   423                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   424                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   425                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   426                              <1> ;Stops at first invalid cluster number.
   427                              <1> ;
   428                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   429                              <1> ;       rbp = Current DPB to use for disk
   430                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   431 00000D71 50                  <1>     push rax
   432 00000D72 53                  <1>     push rbx
   433 00000D73 51                  <1>     push rcx
   434 00000D74 56                  <1>     push rsi
   435 00000D75 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   436                              <1> .lp:
   437 00000D77 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   438 00000D7C 721D                <1>     jc .exit    ;Error exit
   439 00000D7E 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   440 00000D80 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   441 00000D81 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   442 00000D83 E8C4000000          <1>     call writeFAT
   443 00000D88 7211                <1>     jc .exit    ;Error exit
   444 00000D8A E88E010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   445 00000D8F 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   446 00000D95 7404                <1>     je .exit
   447 00000D97 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   448 00000D99 EBDC                <1>     jmp short .lp
   449                              <1> .exit:
   450 00000D9B 5E                  <1>     pop rsi
   451 00000D9C 59                  <1>     pop rcx
   452 00000D9D 5B                  <1>     pop rbx
   453 00000D9E 58                  <1>     pop rax
   454                              <1>     return
    13                              <2> %%_ret:
    14 00000D9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> readFAT:
   456                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   457                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   458                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   459                              <1> ;       rbp = DPB
   460                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   461                              <1> ;If carry set, getBuffer failed!
   462 00000DA0 53                  <1>     push rbx
   463 00000DA1 51                  <1>     push rcx
   464 00000DA2 52                  <1>     push rdx
   465 00000DA3 57                  <1>     push rdi
   466 00000DA4 55                  <1>     push rbp
   467 00000DA5 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   468 00000DA7 E816FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   469                              <1>     ;and FAT type in ecx
   470 00000DAC E8D3FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   471 00000DB1 7232                <1>     jc .exitFail
   472                              <1>     ;Check if FAT 12, 16, 32
   473 00000DB3 85C9                <1>     test ecx, ecx
   474 00000DB5 7434                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   475 00000DB7 F7C101000000        <1>     test ecx, 1
   476 00000DBD 740E                <1>     jz .goToNextClusterFat32
   477                              <1>     ;Here we handle FAT16
   478 00000DBF 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   479 00000DC4 3DF7FF0000          <1>     cmp eax, 0FFF7h  ;Valid cluster number?
   480 00000DC9 7219                <1>     jb .exit
   481 00000DCB EB0B                <1>     jmp short .eocExit
   482                              <1> .goToNextClusterFat32:
   483 00000DCD 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   484 00000DD1 3DF7FFFF0F          <1>     cmp eax, 0FFFFFF7h ;First reserved value. Any Reserved number = EOC
   485 00000DD6 7207                <1>     jb .validCluster32   
   486                              <1> .eocExit:
   487 00000DD8 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   488 00000DDD EB05                <1>     jmp short .exit
   489                              <1> .validCluster32:
   490 00000DDF 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   491                              <1> .exit:
   492 00000DE4 F8                  <1>     clc
   493                              <1> .exitFail:
   494 00000DE5 5D                  <1>     pop rbp
   495 00000DE6 5F                  <1>     pop rdi
   496 00000DE7 5A                  <1>     pop rdx
   497 00000DE8 59                  <1>     pop rcx
   498 00000DE9 5B                  <1>     pop rbx
   499                              <1>     return
    13                              <2> %%_ret:
    14 00000DEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .gotoNextClusterFat12:
   501                              <1> ;eax has the sector number of the FAT
   502                              <1> ;edx has byte offset into the sector
   503                              <1> ;edi has current cluster number
   504                              <1> ;rbx has ptr to buffer header
   505 00000DEB 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   506 00000DEF F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   507 00000DF5 741C                <1>     jz .gotoNextClusterFat12Even
   508                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   509 00000DF7 29D1                <1>     sub ecx, edx
   510 00000DF9 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   511 00000DFB 750C                <1>     jnz .gotoNextClusterFat12OddNoX
   512 00000DFD E833000000          <1>     call .xBndry        ;Boundary cross, build entry properly
   513 00000E02 72E1                <1>     jc .exitFail    
   514 00000E04 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   515 00000E07 EB23                <1>     jmp short .checkIfLastFAT12Cluster
   516                              <1> .gotoNextClusterFat12OddNoX:
   517 00000E09 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   518 00000E0E C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   519 00000E11 EB19                <1>     jmp short .checkIfLastFAT12Cluster
   520                              <1> .gotoNextClusterFat12Even:
   521 00000E13 29D1                <1>     sub ecx, edx
   522 00000E15 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   523 00000E17 7509                <1>     jnz .gotoNextClusterFat12EvenNoX
   524 00000E19 E817000000          <1>     call .xBndry    ;Save the lower three nybbles
   525 00000E1E 72C5                <1>     jc .exitFail
   526 00000E20 EB05                <1>     jmp short .evenCmn
   527                              <1> .gotoNextClusterFat12EvenNoX:
   528                              <1>     ;Here the cluster is even and can't cross a sector boundary
   529 00000E22 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   530                              <1> .evenCmn:
   531 00000E27 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   532                              <1> .checkIfLastFAT12Cluster:
   533 00000E2C 3DF70F0000          <1>     cmp eax, 0FF7h   ;Is it below the first invalid cluster number?
   534 00000E31 72B1                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   535 00000E33 EBA3                <1>     jmp short .eocExit
   536                              <1> .xBndry:
   537                              <1> ;Gets a word that goes across a boundary in ax. It is left to the caller it 
   538                              <1> ; do what they will with it. If CF=CY on return, something went wrong.
   539 00000E35 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   540 00000E3A FFC0                <1>     inc eax ;Get next FAT sector
   541 00000E3C 53                  <1>     push rbx
   542 00000E3D E842FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   543 00000E42 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   544                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000E43 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000E45 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   545 00000E46 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   546 00000E48 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   547                              <1>     return
    13                              <2> %%_ret:
    14 00000E4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> writeFAT:
   550                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   551                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   552                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   553                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   554                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   555 00000E4C 53                  <1>     push rbx
   556 00000E4D 51                  <1>     push rcx
   557 00000E4E 52                  <1>     push rdx
   558 00000E4F 56                  <1>     push rsi
   559 00000E50 57                  <1>     push rdi
   560 00000E51 55                  <1>     push rbp
   561 00000E52 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   562 00000E54 E869FCFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   563                              <1>     ;and FAT type in ecx
   564 00000E59 E826FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   565 00000E5E 7223                <1>     jc .exitFail
   566                              <1>     ;Check if FAT 12, 16, 32
   567 00000E60 85C9                <1>     test ecx, ecx
   568 00000E62 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   569 00000E64 F7C101000000        <1>     test ecx, 1
   570 00000E6A 7407                <1>     jz .goToNextClusterFat32
   571                              <1>     ;Here we handle FAT16
   572 00000E6C 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   573 00000E71 EB0A                <1>     jmp short .exit
   574                              <1> .goToNextClusterFat32:
   575 00000E73 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   576 00000E79 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   577                              <1> .exit:
   578 00000E7D E8A0FAFFFF          <1>     call markBufferDirty
   579 00000E82 F8                  <1>     clc
   580                              <1> .exitFail:
   581 00000E83 5D                  <1>     pop rbp
   582 00000E84 5F                  <1>     pop rdi
   583 00000E85 5E                  <1>     pop rsi
   584 00000E86 5A                  <1>     pop rdx
   585 00000E87 59                  <1>     pop rcx
   586 00000E88 5B                  <1>     pop rbx
   587                              <1>     return
    13                              <2> %%_ret:
    14 00000E89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   588                              <1> .gotoNextClusterFat12:
   589                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   590                              <1> ;eax has the sector number of the FAT
   591                              <1> ;edx has byte offset into the sector
   592                              <1> ;edi has current cluster number
   593                              <1> ;rbx has ptr to buffer header
   594 00000E8A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   595 00000E8E 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   596 00000E94 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   597 00000E9A 7432                <1>     jz .gotoNextClusterFat12Even
   598                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   599 00000E9C 29D1                <1>     sub ecx, edx
   600 00000E9E FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   601 00000EA0 7556                <1>     jnz .gotoNextClusterFat12OddNoX
   602                              <1>     ;Boundary cross, build entry properly
   603                              <1>     ;Replace the high nybble of the low byte
   604 00000EA2 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   605 00000EA7 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   606 00000EAD C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   607 00000EB0 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   608 00000EB2 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   609 00000EB5 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   610 00000EB9 E864FAFFFF          <1>     call markBufferDirty
   611 00000EBE FFC0                <1>     inc eax ;Get next FAT sector
   612 00000EC0 E8BFFBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   613 00000EC5 72BC                <1>     jc .exitFail
   614 00000EC7 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   615 00000EC9 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   616 00000ECC EBAF                <1>     jmp short .exit
   617                              <1> .gotoNextClusterFat12Even:
   618 00000ECE 29D1                <1>     sub ecx, edx
   619 00000ED0 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   620 00000ED2 7533                <1>     jnz .gotoNextClusterFat12EvenNoX
   621 00000ED4 89F1                <1>     mov ecx, esi
   622 00000ED6 80E50F              <1>     and ch, 0Fh ;Save only the lower nybble of ch
   623 00000ED9 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl   ;Store the first byte
   624 00000EDD E840FAFFFF          <1>     call markBufferDirty
   625 00000EE2 FFC0                <1>     inc eax ;Get next FAT sector
   626 00000EE4 E89BFBFFFF          <1>     call getBufForFat
   627 00000EE9 7298                <1>     jc .exitFail
   628 00000EEB 8A4B20              <1>     mov cl, byte [rbx + bufferHdr.dataarea] ;Get the first data byte from buffer
   629 00000EEE 80E1F0              <1>     and cl, 0F0h    ;Clear the lower nybble of this entry
   630 00000EF1 08E9                <1>     or cl, ch       ;Add our entry in
   631 00000EF3 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl ;Write it back
   632 00000EF6 EB85                <1>     jmp short .exit    
   633                              <1> .gotoNextClusterFat12OddNoX:
   634 00000EF8 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   635 00000EFD 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   636 00000F02 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   637 00000F05 EB0A                <1>     jmp short .fat12common
   638                              <1> .gotoNextClusterFat12EvenNoX:
   639                              <1>     ;Here the cluster is even and can't cross a sector boundary
   640 00000F07 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   641 00000F0C 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   642                              <1> .fat12common:
   643 00000F11 09F0                <1>     or eax, esi     ;Add the new entry bits
   644 00000F13 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   645 00000F18 E960FFFFFF          <1>     jmp .exit
   646                              <1> 
   647                              <1> incrementFreeClusterCount:
   648                              <1> ;Cluster Deallocated Function
   649 00000F1D 9C                  <1>     pushfq
   650 00000F1E 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   651 00000F25 7403                <1>     je .exit
   652 00000F27 FF4531              <1>     inc dword [rbp + dpb.dFreeClustCnt]
   653                              <1> .exit:
   654 00000F2A 9D                  <1>     popfq
   655                              <1>     return
    13                              <2> %%_ret:
    14 00000F2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   656                              <1> decrementFreeClusterCount:
   657                              <1> ;Cluster Allocated Function
   658 00000F2C 9C                  <1>     pushfq
   659 00000F2D 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   660 00000F34 7403                <1>     je .exit
   661 00000F36 FF4D31              <1>     dec dword [rbp + dpb.dFreeClustCnt]
   662                              <1> .exit:
   663 00000F39 9D                  <1>     popfq
   664                              <1>     return
    13                              <2> %%_ret:
    14 00000F3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> 
   666                              <1> getBytesPerCluster:
   667                              <1> ;Gets the bytes per cluster
   668                              <1> ;Input: rbp -> Current DPB
   669                              <1> ;Output: ecx = Total bytes per cluster
   670 00000F3B 50                  <1>     push rax
   671 00000F3C 52                  <1>     push rdx
   672 00000F3D 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   673 00000F41 0FB64D04            <1>     movzx ecx, byte [rbp + dpb.bMaxSectorInCluster]
   674 00000F45 FFC1                <1>     inc ecx
   675 00000F47 F7E1                <1>     mul ecx
   676 00000F49 89C1                <1>     mov ecx, eax
   677 00000F4B 5A                  <1>     pop rdx
   678 00000F4C 58                  <1>     pop rax
   679                              <1>     return
    13                              <2> %%_ret:
    14 00000F4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> readFSInfoSector:
   682                              <1> ;Given a DPB, will attempt to read the FS Info sector. Destroys all regs.
   683                              <1> ;Input: rbp -> DPB pointer for FAT32 volume. Silently returns ok
   684                              <1> ;               if the DPB is not FAT32.
   685                              <1> ;       rsi -> BPB for the FAT32 volume.
   686                              <1> ;Output: rbp -> DPB dNextFreeClst and dNumberOfFreeCluster fields
   687                              <1> ;               correctly filled in from the FSInfo sector, if appropriate.
   688 00000F4E 51                  <1>     push rcx
   689 00000F4F E84FFBFFFF          <1>     call getFATtype
   690 00000F54 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   691 00000F5A 59                  <1>     pop rcx
   692 00000F5B 7578                <1>     jne .exit
   693                              <1> ;Only read the FSinfo sector if the drive has never been accessed before!
   694 00000F5D F64524FF            <1>     test byte [rbp + dpb.bAccessFlag], -1
   695 00000F61 7472                <1>     jz .exit
   696 00000F63 0FB74625            <1>     movzx eax, word [rsi + bpb32.FSinfo]    ;Get the FSInfo sector number
   697 00000F67 85C0                <1>     test eax, eax   ;0 is an invalid value for this 
   698                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F69 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F6B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   699 00000F6C 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   700                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F71 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F73 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   701 00000F74 48892D(33070000)    <1>     mov qword [workingDPB], rbp ;Set this because it isnt set yet!
   702 00000F7B E8FFFAFFFF          <1>     call getBufForDOS   ;Now get the sector number
   703                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F80 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F82 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   704                              <1>     ;Now sanity check the sector data itself
   705 00000F83 817B2052526141      <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.leadSig], fsInfoSig1
   706 00000F8A 7549                <1>     jne .exit
   707 00000F8C 81BB04020000727241- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.strucSig], fsInfoSig2
   707 00000F95 61                  <1>
   708 00000F96 753D                <1>     jne .exit
   709 00000F98 81BB1C020000000055- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.trailSig], fsInfoSig3
   709 00000FA1 AA                  <1>
   710 00000FA2 7531                <1>     jne .exit
   711                              <1> ;Here we can assume the struct is accessible. 
   712                              <1> ;We sanity check the struct values to ensure they are possible.
   713                              <1> ;We reset with some sane defaults in the event of bad data
   714 00000FA4 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   715 00000FAB C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1  ;Unknown
   716                              <1>     ;Start with next free check
   717 00000FB2 8B830C020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.nextFree] 
   718 00000FB8 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   719 00000FBB 770A                <1>     ja .skipFirstFree
   720 00000FBD 3D02000000          <1>     cmp eax, 2
   721 00000FC2 7203                <1>     jb .skipFirstFree
   722 00000FC4 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax
   723                              <1> .skipFirstFree:
   724                              <1>     ;Now we do free count check
   725 00000FC7 8B8308020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.freeCount]
   726 00000FCD 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   727 00000FD0 7703                <1>     ja .exit
   728 00000FD2 894531              <1>     mov dword [rbp + dpb.dFreeClustCnt], eax
   729                              <1> .exit:
   730 00000FD5 F8                  <1>     clc
   731                              <1>     return
    13                              <2> %%_ret:
    14 00000FD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> writeFSInfoSector:
   734                              <1> ;Will write an FS Info sector back to the disk.
   735                              <1> ;Input: rbp -> DPB of the disk we are writing the FSInfo date for.
   736                              <1> ;Output: CF=NC: Updated FSInfo fields if FAT32. CF=CY: Error reading disk
   737                              <1> 
   738 00000FD7 51                  <1>     push rcx
   739 00000FD8 E8C6FAFFFF          <1>     call getFATtype
   740 00000FDD 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   741 00000FE3 59                  <1>     pop rcx
   742 00000FE4 F8                  <1>     clc         ;Clear the CF flag if not FAT32
   743                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000FE5 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000FE7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   744                              <1> 
   745 00000FE8 50                  <1>     push rax
   746 00000FE9 53                  <1>     push rbx
   747 00000FEA 51                  <1>     push rcx
   748 00000FEB 52                  <1>     push rdx
   749 00000FEC 56                  <1>     push rsi
   750 00000FED 57                  <1>     push rdi
   751                              <1> 
   752 00000FEE 31C0                <1>     xor eax, eax        ;Get sector 0
   753 00000FF0 E88AFAFFFF          <1>     call getBufForDOS   ;Get a buffer Sector 0 pointed to be rbx
   754 00000FF5 0F8281000000        <1>     jc .exit
   755 00000FFB 0FB74345            <1>     movzx eax, word [rbx + bufferHdr.dataarea + bpb32.FSinfo]
   756 00000FFF 85C0                <1>     test eax, eax
   757 00001001 7479                <1>     jz .exit
   758 00001003 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   759 00001008 7472                <1>     je .exit
   760                              <1> ;First compute where the backup FSInfo is
   761 0000100A 89C1                <1>     mov ecx, eax    ;(e)ax has FSInfo sector number
   762 0000100C 66034B47            <1>     add cx, word [rbx + bufferHdr.dataarea + bpb32.BkBootSec]    
   763                              <1>     ;cx now has the backup sector
   764                              <1> ;If they are equal, because backup boot sector is 0, set ecx to -1
   765 00001010 39C1                <1>     cmp ecx, eax
   766 00001012 BAFFFFFFFF          <1>     mov edx, -1
   767 00001017 0F44CA              <1>     cmove ecx, edx  ;Set ecx to -1 to avoid writing the same sector twice
   768                              <1>     
   769 0000101A 51                  <1>     push rcx            ;Save the backup FSInfo sector value
   770 0000101B E85FFAFFFF          <1>     call getBufForDOS   ;Now get the primary FSInfo sector
   771 00001020 5F                  <1>     pop rdi             ;Return the backup FSInfo sector value in rdi
   772 00001021 7259                <1>     jc .exit
   773                              <1> 
   774 00001023 31F6                <1>     xor esi, esi    ;Use as a dirty marker
   775 00001025 8B4D31              <1>     mov ecx, dword [rbp + dpb.dFreeClustCnt]
   776 00001028 398B08020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx
   777 0000102E 7408                <1>     je .checkFirst
   778                              <1>     ;Update the value
   779 00001030 898B08020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx 
   780 00001036 FFC6                <1>     inc esi
   781                              <1> .checkFirst:
   782 00001038 8B4D2D              <1>     mov ecx, dword [rbp + dpb.dNextFreeClst]
   783 0000103B 398B0C020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   784 00001041 7408                <1>     je .checkFlush
   785 00001043 898B0C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   786 00001049 FFC6                <1>     inc esi
   787                              <1> .checkFlush:
   788 0000104B 85F6                <1>     test esi, esi   ;If this is zero, we didn't write new values. Return
   789 0000104D 742D                <1>     jz .exit
   790 0000104F E8CEF8FFFF          <1>     call markBufferDirty    ;Else, the sector is dirty. Mark for flushing!
   791                              <1>     ;Now since we have a dirty sector, we need to sync the backup sector too!
   792 00001054 81FFFFFFFFFF        <1>     cmp edi, -1 ;Do we have a backup sector? If not, simply return
   793 0000105A 7420                <1>     je .exit
   794 0000105C 89F8                <1>     mov eax, edi    ;Else get the backup FSInfo sector value in eax
   795 0000105E E81CFAFFFF          <1>     call getBufForDOS   ;Now get the sector pointer   
   796 00001063 7217                <1>     jc .exit            ;Fail to sync if this fails
   797                              <1>     ;Now we know there is something to write so write it!
   798                              <1>     ;Also CF=NC here
   799 00001065 8B4531              <1>     mov eax, dword [rbp + dpb.dFreeClustCnt]
   800 00001068 898308020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], eax 
   801 0000106E 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   802 00001071 89830C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], eax
   803 00001077 E8A6F8FFFF          <1>     call markBufferDirty    ;Mark this buffer as dirty too
   804                              <1> .exit:
   805 0000107C 5F                  <1>     pop rdi
   806 0000107D 5E                  <1>     pop rsi
   807 0000107E 5A                  <1>     pop rdx
   808 0000107F 59                  <1>     pop rcx
   809 00001080 5B                  <1>     pop rbx
   810 00001081 58                  <1>     pop rax
   811                              <1>     return
    13                              <2> %%_ret:
    14 00001082 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00001083 488B3D(3F040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 0000108A F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 0000108D 7408                <1>     jz .notNet
     6 0000108F B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00001094 CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00001096 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00001097 C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk
    11 0000109E E8F46B0000          <1>     call dosCrit1Enter
    12 000010A3 488D05(A4060000)    <1>     lea rax, tmpCDS
    13 000010AA 488905(3B070000)    <1>     mov qword [workingCDS], rax ;Set the working CDS to be the tmp cds!
    14 000010B1 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]   ;Get 1 based number back!
    15 000010B3 0440                <1>     add al, "@"  ;Convert into letter
    16 000010B5 E888670000          <1>     call buildNewCDS     ;Build a new CDS bypassing the real CDS!
    17 000010BA 7235                <1>     jc .critError   ;Return error if this fails
    18 000010BC 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS] 
    19 000010C3 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr] 
    20 000010C7 E89C660000          <1>     call setWorkingDPB
    21 000010CC 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
    22 000010D0 8805(32070000)      <1>     mov byte [workingDrv], al
    23                              <1>     ;mov byte [delChar], 0E5h
    24 000010D6 C605(0E070000)00    <1>     mov byte [fcbName + 11], 0  ;Set to this being a file we are searching for
    25 000010DD C605(93040000)FF    <1>     mov byte [fileDirFlag], -1  ;Set to searching for a file!
    26 000010E4 E80F000000          <1>     call searchMoreDir  ;Now find the next one!
    27 000010E9 7206                <1>     jc .critError   ;Return error if this fails
    28                              <1> .errExit:
    29 000010EB E8B16B0000          <1>     call dosCrit1Exit
    30                              <1>     return
    13                              <2> %%_ret:
    14 000010F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> .critError:
    32 000010F1 B812000000          <1>     mov eax, errNoFil
    33 000010F6 EBF3                <1>     jmp short .errExit
    34                              <1> searchMoreDir:
    35                              <1> ;The three directory variables are set up from the ffblock. 
    36                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    37                              <1> ;Current DTA is also used to contain the ff block address
    38                              <1> ;All registers can be trashed
    39 000010F8 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
    40                              <1>     ;First copy the search template back then setup dirClustA and dirSect vars
    41 000010FF 488B3D(3F040000)    <1>     mov rdi, qword [currentDTA]
    42 00001106 57                  <1>     push rdi
    43 00001107 488D7701            <1>     lea rsi, qword [rdi + ffBlock.template]
    44 0000110B 488D3D(03070000)    <1>     lea rdi, fcbName
    45 00001112 B90B000000          <1>     mov ecx, 11
    46 00001117 F3A4                <1>     rep movsb   ;Get copy the search template!
    47 00001119 5F                  <1>     pop rdi
    48 0000111A F6471540            <1>     test byte [rdi + ffBlock.attribFnd], dirCharDev  ;Did we find a char dev?
    49 0000111E 0F85F0000000        <1>     jnz .errorExit                              ;No more files if so!!
    50 00001124 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    51 00001127 8805(26070000)      <1>     mov byte [searchAttr], al   ;... and save it!
    52 0000112D 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    53 00001130 8905(A8070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    54 00001136 8905(A4070000)      <1>     mov dword [dirClustPar], eax
    55                              <1>     ;Get number of 32 byte entries in a sector
    56 0000113C 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    57 0000113F 3DFFFFFFFF          <1>     cmp eax, -1 ;If this is an invalid value, exit error!
    58 00001144 0F84CA000000        <1>     je .errorExit
    59 0000114A 8905(AE070000)      <1>     mov dword [dirEntry], eax
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 00001150 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 00001153 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 00001155 813D(A8070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    64 0000115D 0000                <1>
    65 0000115F 0F8492000000        <1>     je .oldFat
    66 00001165 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 00001169 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
    68 0000116D D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 0000116F 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 00001171 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 00001173 31D2                <1>     xor edx, edx
    72 00001175 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 00001177 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 00001179 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 0000117D 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 0000117F 31D2                <1>     xor edx, edx
    80 00001181 F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster
    82                              <1>     ;edx has byte offset into sector 
    83 00001183 668905(AC070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 0000118A 8B05(A8070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 00001190 89D9                <1>     mov ecx, ebx
    87 00001192 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00001195 E806FCFFFF          <1>     call readFAT
    90 0000119A 3DFFFFFFFF          <1>     cmp eax, -1
    91 0000119F 7473                <1>     je .errorExit
    92 000011A1 FFC9                <1>     dec ecx
    93 000011A3 75F0                <1>     jnz .fatlp
    94 000011A5 8905(A8070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 000011AB 488D05BC000000      <1>     lea rax, searchDir.nextEp
    97 000011B2 50                  <1>     push rax    ;Push the return address onto stack
    98 000011B3 8B05(A8070000)      <1>     mov eax, dword [dirClustA]
    99 000011B9 E850F9FFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 000011BE 0FB71D(AC070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 000011C5 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 000011C8 E8BCF8FFFF          <1>     call getBufForDir
   104 000011CD 0F826B010000        <1>     jc searchDir.fnfError
   105 000011D3 E86A010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
   106                              <1>     ;Gets also in ecx the # of 32 byte entries a sector
   107 000011D8 8B05(AE070000)      <1>     mov eax, dword [dirEntry]   ;Get 32 byte offset into directory
   108                              <1>     ;Need to convert into an offset into this sector
   109 000011DE 52                  <1>     push rdx
   110 000011DF 31D2                <1>     xor edx, edx
   111 000011E1 F7F1                <1>     div ecx     ;Divide dirEntry by max entries in sector. Remainder in edx.
   112 000011E3 29D1                <1>     sub ecx, edx ;Subtract the offset to get the number of entries left
   113 000011E5 C1E205              <1>     shl edx, 5  ;Multiply by 32 to turn into bytes to add to rsi
   114 000011E8 4801D6              <1>     add rsi, rdx    ;rsi points to current entry in the sector.
   115 000011EB 5A                  <1>     pop rdx
   116                              <1>     ;We continue AS IF this entry was bad
   117                              <1>     ;Now setup al as upon normal entry 
   118 000011EC 8A05(26070000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   119 000011F2 E9C4010000          <1>     jmp findInBuffer.nextEntry ;Proceed from within to resume search properly!
   120                              <1>     ;The return address on the stack will return to the ep's pushed
   121                              <1> .oldFat:
   122                              <1> ;Old FAT 12/16 root dirs fall thru here only
   123                              <1> ;esi = byte ptr in root dir of entry
   124 000011F7 488D0509010000      <1>     lea rax, searchDir.oldNextEP
   125 000011FE 50                  <1>     push rax    ;Push return address onto the stack
   126 000011FF 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   127 00001203 31D2                <1>     xor edx, edx
   128 00001205 96                  <1>     xchg esi, eax
   129 00001206 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   130                              <1>     ;eax = Sector number 
   131                              <1>     ;edx = Byte offset within the sector
   132 00001208 668905(AC070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   133 0000120F 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   134 00001212 EBB4                <1>     jmp short .common
   135                              <1> .errorExit:
   136 00001214 F9                  <1>     stc
   137                              <1>     return
    13                              <2> %%_ret:
    14 00001215 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> searchDir:
   139                              <1> ;Called in a level 1 critical section. 
   140                              <1> ;The directory variables are set and fcbName has the pattern to match
   141                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   142                              <1> ;All registers can be trashed
   143                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   144                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   145                              <1> 
   146 00001216 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   147 0000121D 488B2D(33070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   148 00001224 F605(26070000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   149 0000122B 7509                <1>     jnz .volIdSearch
   150 0000122D F605(89040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   151 00001234 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   152                              <1> .volIdSearch:
   153                              <1> ;Here we do a volid search intervention. Always searches root dir.
   154 00001236 F605(93040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   155 0000123D 7407                <1>     jz .notVolSearch
   156 0000123F 31C0                <1>     xor eax, eax ;Search the root dir.
   157 00001241 E89A060000          <1>     call prepSetupDirSearchVars
   158                              <1> .notVolSearch:
   159 00001246 8B05(A8070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   160 0000124C 85C0                <1>     test eax, eax
   161 0000124E 0F8498000000        <1>     jz .oldRoot
   162 00001254 E8B5F8FFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   163                              <1> .sectorLoop:
   164 00001259 E82BF8FFFF          <1>     call getBufForDir
   165 0000125E 0F82DA000000        <1>     jc .fnfError
   166 00001264 E8D9000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   167                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   168 00001269 E8E0000000          <1>     call findInBuffer
   169                              <1> .nextEp:
   170                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000126E 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001270 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   171 00001271 0F84A8000000        <1>     jz .chardev    ;CF=CY AND ZF=ZE => File not found
   172                              <1>     ;If ZF=ZE then chardev (i.e. we hit an entry starting with 00)
   173                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   174                              <1>     ;IF however, the next cluster is -1, then we return fail
   175 00001277 8B05(A8070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 0000127D 8905(7D070000)      <1>     mov dword [currClustD], eax
   177 00001283 668B05(AC070000)    <1>     mov ax, word [dirSect]
   178 0000128A 8805(85070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   179 00001290 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   180 00001294 488905(86070000)    <1>     mov qword [currSectD], rax  
   181 0000129B C705(79070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   181 000012A3 0000                <1>
   182 000012A5 E837FAFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
   183 000012AA 0F828E000000        <1>     jc .fnfError
   184 000012B0 746D                <1>     jz .chardev    ;We are at the end of the directory and didnt find the file
   185 000012B2 488905(86070000)    <1>     mov qword [currSectD], rax  ;Store the sector number here
   186 000012B9 66FF05(AC070000)    <1>     inc word [dirSect]  ;Goto next sector in cluster
   187 000012C0 50                  <1>     push rax    ;Save the next sector we need to read
   188 000012C1 8B05(A8070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   189 000012C7 3B05(7D070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   190 000012CD 58                  <1>     pop rax
   191 000012CE 7489                <1>     je .sectorLoop  ;If not, we advanced sectors only
   192 000012D0 66C705(AC070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   192 000012D8 00                  <1>
   193 000012D9 50                  <1>     push rax
   194 000012DA 8B05(7D070000)      <1>     mov eax, dword [currClustD]
   195 000012E0 8905(A8070000)      <1>     mov dword [dirClustA], eax  ;Put new cluster number in var
   196 000012E6 58                  <1>     pop rax
   197 000012E7 E96DFFFFFF          <1>     jmp .sectorLoop
   198                              <1> 
   199                              <1> .oldRoot:
   200                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   201                              <1> ; one large contiguous cluster.
   202                              <1> .oldSectorLp:
   203 000012EC 0FB705(AC070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   204 000012F3 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   205 000012F6 E88EF7FFFF          <1>     call getBufForDir
   206 000012FB 7241                <1>     jc .fnfError
   207 000012FD E840000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   208 00001302 E847000000          <1>     call findInBuffer
   209                              <1> .oldNextEP:
   210                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001307 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001309 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   211 0000130A 7413                <1>     jz .chardev
   212 0000130C 66FF05(AC070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   213 00001313 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   214 00001317 3905(AE070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   215 0000131D 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   216                              <1> .chardev:
   217                              <1> ;Now check for a char device ONLY if we are checking for file or dir!
   218                              <1> ;If exclusive dir on, fail!
   219 0000131F F605(93040000)FF    <1>     test byte [fileDirFlag], -1 ;Set if file/dir. Clear if only dir!
   220 00001326 7416                <1>     jz .fnfError    
   221 00001328 E8C0090000          <1>     call checkIfCharDevice
   222 0000132D 720F                <1>     jc .fnfError    ;Not a char dev? Exit!
   223 0000132F E8F0090000          <1>     call buildCharDir
   224 00001334 31F6                <1>     xor esi, esi        ;Clear the CF flag
   225 00001336 488D35(84060000)    <1>     lea rsi, curDirCopy ;Return with rsi pointing to the dir copy!
   226                              <1>     return
    13                              <2> %%_ret:
    14 0000133D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> .fnfError:
   228 0000133E F9                  <1>     stc
   229 0000133F B012                <1>     mov al, errNoFil
   230                              <1>     return
    13                              <2> %%_ret:
    14 00001341 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> prepSectorSearch:
   232                              <1> ;Input: rbx -> Buffer with Dir sector to search
   233                              <1> ;Output: rsi -> Start of the dir data area
   234                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   235 00001342 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   236 00001346 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   237 0000134A C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   238                              <1>     return
    13                              <2> %%_ret:
    14 0000134D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> findInBuffer:
   241                              <1> ;Input:  rsi = Sector buffer data area
   242                              <1> ;        cx = Number of entries to check in the sector
   243                              <1> ;Output: CF=CY => No entries found
   244                              <1> ;        ZF=NE => Keep searching in subsequent directories
   245                              <1> ;        ZF=ZE => End of directory reached early, stop
   246                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   247                              <1> ;        rsi = Points to start of the disk buffer directory entry
   248 0000134E 8A05(26070000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   249 00001354 E8B5000000          <1>     call adjustSearchAttr   ;Adjust the search attributes, including volid
   250                              <1> .searchMainLp:
   251                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   252 00001359 8A25(31070000)      <1>     mov ah, byte [delChar]
   253 0000135F 803E00              <1>     cmp byte [rsi], 00h
   254 00001362 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   255 00001364 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   256 00001366 7510                <1>     jne .notLookingForEmpty
   257                              <1> .emptySlot:
   258                              <1> ;Here we check if we are looking for an empty directory entry or
   259                              <1> ; we have reached the end of the file (if the first byte is 00h)
   260                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   261 00001368 3A25(03070000)      <1>     cmp ah, byte [fcbName] 
   262                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000136E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001370 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   263                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   264 00001371 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   265 00001374 7545                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   266 00001376 F9                  <1>     stc
   267                              <1>     return
    13                              <2> %%_ret:
    14 00001377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .notLookingForEmpty:
   269 00001378 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   270 0000137B 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   271 0000137E F605(89040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   272 00001385 7406                <1>     jz .notVolIdExclusive
   273 00001387 F6C408              <1>     test ah, dirVolumeID   ;If we are a volid, clear CF return
   274 0000138A 742F                <1>     jz .nextEntry
   275                              <1>     return
    13                              <2> %%_ret:
    14 0000138C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .notVolIdExclusive:
   277                              <1> ;If any entry has the volid bit set, it is considered a VOL id only.
   278 0000138D 803D(93040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   279 00001394 743C                <1>     je .exclusiveDir
   280 00001396 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   281 00001398 743F                <1>     je .volFile ;If so, go here
   282 0000139A F6C408              <1>     test ah, dirVolumeID ;Is this file a vollbl that we are not looking for?
   283 0000139D 751C                <1>     jnz .nextEntry
   284 0000139F 84E4                <1>     test ah, ah ;Regular files are always accepted at this point!
   285 000013A1 7408                <1>     jz .scanName
   286 000013A3 3C16                <1>     cmp al, dirInclusive    ;Is this an inclusive search?
   287 000013A5 7404                <1>     je .scanName            ;If so, we accept this file!
   288 000013A7 38C4                <1>     cmp ah, al              ;(ah=File bits)==(al=Search bits)?
   289 000013A9 7510                <1>     jne .nextEntry          ;If bits dont match now, we ignore entry
   290                              <1> .scanName:
   291                              <1> ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   292 000013AB 56                  <1>     push rsi
   293 000013AC 488D3D(03070000)    <1>     lea rdi, fcbName ;Goto name template to search for
   294 000013B3 E83E000000          <1>     call .nameCompare
   295 000013B8 5E                  <1>     pop rsi
   296 000013B9 7424                <1>     je .searchEntryFound
   297                              <1> .nextEntry:
   298                              <1> ;Go to next entry
   299 000013BB 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   300 000013C2 FF05(AE070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   301 000013C8 FFC9                <1>     dec ecx
   302 000013CA 758D                <1>     jnz .searchMainLp
   303                              <1> .badExit:
   304 000013CC 31C0                <1>     xor eax, eax
   305 000013CE FFC0                <1>     inc eax ;Clear ZF
   306 000013D0 F9                  <1>     stc
   307                              <1>     return
    13                              <2> %%_ret:
    14 000013D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> .exclusiveDir:
   309                              <1> ;Used when going down a path, dir bit simply need be set
   310 000013D2 F6C410              <1>     test ah, dirDirectory
   311 000013D5 75D4                <1>     jnz .scanName
   312 000013D7 EBE2                <1>     jmp short .nextEntry
   313                              <1> 
   314                              <1> .volFile:
   315 000013D9 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   316 000013DB 74CE                <1>     je .scanName       ;If so, scan the name agrees
   317 000013DD EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   318                              <1> 
   319                              <1> .searchEntryFound:
   320                              <1> ;Here a good entry was found!
   321 000013DF 56                  <1>     push rsi
   322 000013E0 57                  <1>     push rdi
   323 000013E1 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   324 000013E3 488D3D(84060000)    <1>     lea rdi, curDirCopy
   325 000013EA B904000000          <1>     mov ecx, 32/8
   326 000013EF F348A5              <1>     rep movsq   ;Copy the directory to SDA
   327 000013F2 5F                  <1>     pop rdi
   328 000013F3 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   329 000013F4 F8                  <1>     clc
   330                              <1>     return
    13                              <2> %%_ret:
    14 000013F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> .nameCompare:
   333                              <1> ;Input: rsi = source string
   334                              <1> ;       rdi = string template to compare against
   335                              <1> ;Output: ZF=ZE => Strings are ok
   336                              <1> ;        ZF=NZ => Strings not ok
   337                              <1> ;Accepts wildcards. Trashes al
   338 000013F6 51                  <1>     push rcx
   339 000013F7 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   340                              <1> .ncLp:
   341 000013F9 81F90B000000        <1>     cmp ecx, 11
   342 000013FF 740B                <1>     je .ncExit
   343 00001401 FFC1                <1>     inc ecx
   344 00001403 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   345 00001404 74F3                <1>     je .ncLp    ;If equal, keep going
   346 00001406 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   347 0000140A 74ED                <1>     je .ncLp
   348                              <1> .ncExit:
   349 0000140C 59                  <1>     pop rcx
   350                              <1>     return
    13                              <2> %%_ret:
    14 0000140D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> adjustSearchAttr:
   352                              <1> ;Converts the byte to a system only if the bit is set
   353                              <1> ;Input: eax = User selected search mask
   354                              <1> ;Output: eax = Modified search mask
   355 0000140E 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   356 00001413 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001418 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000141A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   358 0000141B B808000000          <1>     mov eax, dirVolumeID
   359                              <1>     return
    13                              <2> %%_ret:
    14 00001420 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> asciiToFCB:
   362                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   363                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   364                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   365                              <1> ;Name is space padded.
   366                              <1> ;Input: rsi = ASCII string buffer
   367                              <1> ;       rdi = FCB name buffer
   368                              <1> ;Output: al = Char that terminated the source string 
   369 00001421 53                  <1>     push rbx    
   370 00001422 57                  <1>     push rdi
   371 00001423 B90B000000          <1>     mov ecx, 11
   372 00001428 B020                <1>     mov al, " "
   373 0000142A F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   374 0000142C 5F                  <1>     pop rdi
   375 0000142D 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   376                              <1> .processName:
   377 00001430 AC                  <1>     lodsb   ;Get the char in al
   378 00001431 E8FB640000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   379 00001436 84C0                <1>     test al, al
   380 00001438 742D                <1>     jz .exit
   381 0000143A 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   382 0000143C 740E                <1>     je .extSpace
   383 0000143E 3C2E                <1>     cmp al, "."
   384 00001440 7413                <1>     je .ext
   385                              <1>     ;Test if the char is valid
   386 00001442 E86C660000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   387 00001447 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   388 00001449 AA                  <1>     stosb   ;Store the char
   389 0000144A EBE4                <1>     jmp short .processName
   390                              <1> .extSpace:
   391                              <1> ;Now we scan for a period in the name
   392 0000144C AC                  <1>     lodsb   ;Get a char and increase rsi
   393 0000144D 84C0                <1>     test al, al
   394 0000144F 7416                <1>     jz .exit
   395 00001451 3C2E                <1>     cmp al, "."     ;If al is not a period...
   396 00001453 75F7                <1>     jne .extSpace   ; keep searching
   397                              <1> .ext:
   398 00001455 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   399                              <1> .processExt:
   400 00001459 AC                  <1>     lodsb
   401 0000145A 84C0                <1>     test al, al
   402 0000145C 7409                <1>     jz .exit
   403 0000145E 3C20                <1>     cmp al, " "
   404 00001460 7405                <1>     je .exit
   405 00001462 AA                  <1>     stosb
   406 00001463 EBF4                <1>     jmp short .processExt
   407                              <1> .exitBadChar:
   408 00001465 30C0                <1>     xor al, al  ;Return a null terminator
   409                              <1> .exit:
   410 00001467 5B                  <1>     pop rbx
   411                              <1>     return
    13                              <2> %%_ret:
    14 00001468 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> FCBToAsciiz:
   414                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   415                              <1> ;Name is space padded too
   416                              <1> ;Input: rsi = FCB name buffer
   417                              <1> ;       rdi = ASCIIZ string buffer
   418 00001469 B908000000          <1>     mov ecx, 8
   419 0000146E F3A4                <1>     rep movsb   ;Move the name over
   420                              <1> .scanNameSpace:
   421 00001470 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   422 00001474 750D                <1>     jne .ext
   423 00001476 48FFCF              <1>     dec rdi
   424 00001479 FFC1                <1>     inc ecx
   425 0000147B 81F908000000        <1>     cmp ecx, 8
   426 00001481 72ED                <1>     jb .scanNameSpace
   427                              <1> .ext:
   428 00001483 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   429 00001488 7506                <1>     jne .validExt
   430 0000148A 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   431 0000148E 7415                <1>     je .exit
   432                              <1> .validExt:
   433 00001490 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   434 00001492 AA                  <1>     stosb
   435 00001493 B903000000          <1>     mov ecx, 3
   436 00001498 F3A4                <1>     rep movsb   ;Move the three extension chars over
   437                              <1> .scanExtSpace:
   438 0000149A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   439 0000149E 7505                <1>     jne .exit
   440 000014A0 48FFCF              <1>     dec rdi
   441 000014A3 EBF5                <1>     jmp short .scanExtSpace
   442                              <1> .exit:
   443 000014A5 31C0                <1>     xor eax, eax
   444 000014A7 AA                  <1>     stosb   ;Store a null at the end
   445                              <1>     return
    13                              <2> %%_ret:
    14 000014A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> setupFFBlock:
   448                              <1> ;Sets up the find first block for the search
   449                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   450 000014A9 50                  <1>     push rax
   451 000014AA 53                  <1>     push rbx
   452 000014AB 56                  <1>     push rsi
   453 000014AC 57                  <1>     push rdi
   454 000014AD 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   455 000014B0 8A05(26070000)      <1>     mov al, byte [searchAttr]
   456 000014B6 243F                <1>     and al, 3Fh ;Clear upper two bits
   457 000014B8 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   458 000014BB 0FB605(32070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   459 000014C2 FEC0                <1>     inc al  ;Convert into 1 based number to agree with DOS
   460 000014C4 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   461 000014C6 488D35(03070000)    <1>     lea rsi, fcbName
   462 000014CD 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   463 000014D1 57                  <1>     push rdi
   464 000014D2 48B820202020202020- <1>     mov rax, "        "
   464 000014DB 20                  <1>
   465 000014DC 48AB                <1>     stosq
   466 000014DE 66AB                <1>     stosw
   467 000014E0 AA                  <1>     stosb
   468 000014E1 5F                  <1>     pop rdi
   469 000014E2 48A5                <1>     movsq   ;Move 8 chars
   470 000014E4 66A5                <1>     movsw   ;Move 2 chars
   471 000014E6 A4                  <1>     movsb   ;Move the final char
   472                              <1> 
   473 000014E7 8B05(AE070000)      <1>     mov eax, dword [dirEntry]
   474 000014ED 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   475 000014F0 8B05(A4070000)      <1>     mov eax, dword [dirClustPar]
   476 000014F6 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   477 000014F9 8A05(8F060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   478 000014FF 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   479 00001502 8B05(9A060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   480 00001508 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   481 0000150B 8B05(A0060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   482 00001511 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   483 00001514 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   484 00001518 488D35(84060000)    <1>     lea rsi, curDirCopy
   485 0000151F E845FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   486                              <1> 
   487 00001524 5F                  <1>     pop rdi
   488 00001525 5E                  <1>     pop rsi
   489 00001526 5B                  <1>     pop rbx
   490 00001527 58                  <1>     pop rax
   491                              <1>     return
    13                              <2> %%_ret:
    14 00001528 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   494                              <1> ;Gets the drive letter for the path in al
   495                              <1> ;Input: rsi = Buffer to process
   496                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   497                              <1> ;       ZF=ZE and al = 0 => Null path
   498                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   499                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   500                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   501 00001529 30C0                <1>     xor al, al
   502 0000152B 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   503                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000152E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001530 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   504 00001531 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   505                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001535 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001537 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   506 00001538 66AD                <1>     lodsw   ;Get first word, rsi += 2
   507                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   508 0000153A 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   509 0000153C 2C60                <1>     sub al, 60h
   510                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000153E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001540 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   511 00001541 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   512                              <1>     return
    13                              <2> %%_ret:
    14 00001543 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> getDirPath:
   515 00001544 30C0                <1>     xor al, al   ;Set to Directory
   516 00001546 EB02                <1>     jmp short getPath
   517                              <1> getFilePath:
   518 00001548 B0FF                <1>     mov al, -1  ;Set to File
   519                              <1> getPath:
   520                              <1> ;Called with:
   521                              <1> ; rdi = SDA Buffer for filename
   522                              <1> ; rsi = Potentially unqualified filename
   523                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   524 0000154A 50                  <1>     push rax
   525 0000154B 57                  <1>     push rdi
   526 0000154C E877000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   527 00001551 5F                  <1>     pop rdi
   528 00001552 58                  <1>     pop rax
   529                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001553 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001555 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   530                              <1>     ;Now our name is FQ, we can search the for it!
   531 00001556 48813D(3B070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   531 0000155E FFFFFF              <1>
   532 00001561 0F849B010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   533 00001567 8805(93040000)      <1>     mov byte [fileDirFlag], al 
   534 0000156D B0FF                <1>     mov al, -1
   535 0000156F 8805(2A070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   536 00001575 8805(58060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   537 0000157B C605(2E070000)00    <1>     mov byte [parDirExist], 0   
   538 00001582 C605(2D070000)00    <1>     mov byte [fileExist], 0     
   539 00001589 8A05(32070000)      <1>     mov al, byte [workingDrv]
   540 0000158F FEC0                <1>     inc al
   541 00001591 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   542 00001595 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   543 0000159A 7424                <1>     je .net
   544 0000159C 488B1D(48060000)    <1>     mov rbx, qword [fname1Ptr]
   545 000015A3 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   546 000015AA 488D7301            <1>     lea rsi, qword [rbx + 1]
   547 000015AE FF35(3B070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   548 000015B4 E898010000          <1>     call pathWalk
   549 000015B9 8F05(3B070000)      <1>     pop qword [workingCDS]
   550                              <1>     return
    13                              <2> %%_ret:
    14 000015BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .net:
   552 000015C0 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   553 000015C3 E994010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   554                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   555                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   556                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   557                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   558                              <1>     ; so the redir can do it's job.
   559                              <1> 
   560                              <1> canonicaliseFileName:
   561                              <1> ;Always trying to build and qualify a full pathname
   562                              <1> ;Does getPath without hitting the disk
   563 000015C8 B0FF                <1>     mov al, -1
   564 000015CA 8805(93040000)      <1>     mov byte [fileDirFlag], al  
   565 000015D0 8805(2A070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   566 000015D6 48893D(48060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   567 000015DD FEC0                <1>     inc al  ;make al = 0
   568 000015DF 8805(58060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   569 000015E5 E839000000          <1>     call getPathNoCanon.epAlt
   570                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000015EA 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000015EC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571                              <1>     ;Check the last two chars to see if we have a null terminator.
   572                              <1>     ;If neither has a null terminator, add one
   573 000015ED 31C0                <1>     xor eax, eax
   574 000015EF 3807                <1>     cmp byte [rdi], al
   575                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000015F1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000015F3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   576 000015F4 3847FF              <1>     cmp byte [rdi - 1], al 
   577                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000015F7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000015F9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   578 000015FA AA                  <1>     stosb
   579                              <1>     return
    13                              <2> %%_ret:
    14 000015FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getDirPathNoCanon:
   582                              <1> ;FCB only
   583 000015FC 31C0                <1>     xor eax, eax
   584 000015FE 4889FE              <1>     mov rsi, rdi
   585 00001601 EB05                <1>     jmp short getPathNoCanon
   586                              <1> getFilePathNoCanon:
   587                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   588                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   589 00001603 B0FF                <1>     mov al, -1
   590 00001605 4889FE              <1>     mov rsi, rdi
   591                              <1> getPathNoCanon:
   592                              <1> ;Called with:
   593                              <1> ; rdi = SDA Buffer for filename
   594                              <1> ; rsi = Potentially unqualified filename
   595                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   596 00001608 8805(93040000)      <1>     mov byte [fileDirFlag], al  
   597 0000160E B0FF                <1>     mov al, -1
   598 00001610 8805(2A070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   599 00001616 48893D(48060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   600 0000161D 8805(58060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   601                              <1> .epAlt:
   602 00001623 C605(2E070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   603 0000162A C605(2D070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   604 00001631 F605(2B070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   605 00001638 7431                <1>     jz .notServer
   606 0000163A E8EAFEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   607 0000163F E854620000          <1>     call getCDS ;Get the cds for the drive letter on the path
   608 00001644 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   609 00001646 56                  <1>     push rsi
   610 00001647 57                  <1>     push rdi
   611 00001648 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
   612 0000164F 50                  <1>     push rax
   613 00001650 E842660000          <1>     call dosCrit1Enter
   614 00001655 E8715E0000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   615 0000165A E842660000          <1>     call dosCrit1Exit
   616 0000165F 58                  <1>     pop rax
   617 00001660 5F                  <1>     pop rdi
   618 00001661 5E                  <1>     pop rsi
   619 00001662 0F83B4000000        <1>     jnc .driveOk
   620                              <1> .serverExit:
   621 00001668 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   622                              <1>     return
    13                              <2> %%_ret:
    14 0000166A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .notServer:
   624                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   625                              <1>     ; and only in truename mode
   626 0000166B F605(58060000)FF    <1>     test byte [skipDisk], -1    ;If set, we on disk hit mode
   627 00001672 7515                <1>     jnz .skipRemoteQualify      ;So skip!
   628 00001674 48C705(3B070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   628 0000167C FFFFFF              <1>
   629 0000167F B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   630 00001684 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   631                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001686 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001688 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   632                              <1> .skipRemoteQualify:
   633 00001689 E89BFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   634 0000168E 9C                  <1>     pushfq  ;Save the flag state on stack
   635 0000168F 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   636 00001690 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   637 00001693 E88D620000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   638 00001698 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   639 0000169A E886620000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   640 0000169F 756B                <1>     jnz .notNet
   641 000016A1 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   642 000016A3 7567                <1>     jne .notNet
   643 000016A5 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   644 000016A6 9D                  <1>     popfq
   645 000016A7 66AD                <1>     lodsw
   646 000016A9 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   647 000016AD 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   648                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   649                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   650                              <1> ; redirector Find First Without CDS
   651 000016AF 8A1D(58060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   652 000016B5 C605(58060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   653 000016BC 53                  <1>     push rbx
   654                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   655 000016BD AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   656 000016BE E86E620000          <1>     call uppercaseChar  ;Make char in al uppercase
   657 000016C3 84C0                <1>     test al, al
   658 000016C5 7435                <1>     jz .netEnd
   659 000016C7 E859620000          <1>     call swapPathSeparator  ;If path sep, swap it
   660 000016CC AA                  <1>     stosb
   661 000016CD 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   662                              <1>     ;Skip all following pathseps if there are any
   663                              <1> .moveNetSharePtr:
   664 000016CF AC                  <1>     lodsb
   665 000016D0 E850620000          <1>     call swapPathSeparator
   666 000016D5 74F8                <1>     jz .moveNetSharePtr
   667 000016D7 C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   668 000016DA 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   669 000016DD 84C0                <1>     test al, al ;Was this char null?
   670 000016DF 741B                <1>     jz .netEnd  ;Skip processing if so!
   671 000016E1 4889FB              <1>     mov rbx, rdi
   672 000016E4 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   673 000016E7 E870000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   674 000016EC 721C                <1>     jc .netExitBad
   675                              <1>     ;Now if we have a trailing backslash, throw it away
   676                              <1>     ;rdi points to the null char of the path
   677 000016EE 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   678 000016F1 E82F620000          <1>     call swapPathSeparator  ;Is it a pathsep?
   679 000016F6 7504                <1>     jnz .netEnd
   680 000016F8 C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   681                              <1> .netEnd:
   682 000016FC 5B                  <1>     pop rbx
   683 000016FD 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   684                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000016FF 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001701 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   685                              <1> .netFFnoCDS:
   686 00001702 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   687 00001707 CD2F                <1>     int 2Fh
   688                              <1>     return
    13                              <2> %%_ret:
    14 00001709 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .netExitBad:
   690 0000170A 5B                  <1>     pop rbx
   691                              <1>     return
    13                              <2> %%_ret:
    14 0000170B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .notNet:
   693                              <1> ;This is the normal case; paths can be relative, or absolute.
   694 0000170C 58                  <1>     pop rax ;Get the drive letter back
   695 0000170D 9D                  <1>     popfq   ;Get the flag state back
   696 0000170E 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   697                              <1> .pnfErr:
   698 00001710 B003                <1>     mov al, errPnf  ;Null path error
   699 00001712 F9                  <1>     stc
   700                              <1>     return
    13                              <2> %%_ret:
    14 00001713 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> .notNull:
   702 00001714 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   703 00001716 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   704 00001718 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   705 0000171A F9                  <1>     stc
   706                              <1>     return
    13                              <2> %%_ret:
    14 0000171B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .driveOk:
   708 0000171C 84C0                <1>     test al, al
   709 0000171E 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   710                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   711 00001720 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   712 00001723 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   713 00001725 50                  <1>     push rax    ;Save the drive letter
   714 00001726 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   715 00001727 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   716 0000172A E8F6610000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   717                              <1>     ;If al is a path separator, then this path is absolute.
   718 0000172F 58                  <1>     pop rax ;Get back the drive letter
   719 00001730 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   720                              <1> .absoPath:
   721                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   722 00001732 48FFC6              <1>     inc rsi
   723 00001735 EB1A                <1>     jmp short .commonDir
   724                              <1> .curPath:
   725                              <1> ;This is only jumped to if we are relative the current drive
   726                              <1> ;rsi points to first char in path
   727                              <1> ;If this char is \ or /, then it is an absolute path.
   728 00001737 8A05(59040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   729 0000173D FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   730 0000173F 50                  <1>     push rax    ;Save the current drive number
   731 00001740 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   732 00001742 E8DE610000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   733 00001747 58                  <1>     pop rax ;Get back the current drive number
   734 00001748 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   735                              <1> .relMain:
   736 0000174A C605(2A070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   737                              <1> .commonDir:
   738                              <1> ;rsi points to the start of the string we will be appending
   739                              <1> ;Fall through now
   740                              <1> pathWalk:
   741                              <1> ;Input: rsi must point to source buffer for path to expand
   742                              <1> ;       rdi must point to a destination buffer
   743                              <1> ;       al must contain the drive 1 based number
   744 00001751 E8E9000000          <1>     call prepareDir    ;Prepare the start of the path
   745 00001756 0F82D5000000        <1>     jc .badDriveExit 
   746                              <1> .netEp:
   747                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   748                              <1> ;For subst, resolution cannot go past backslash offset.
   749                              <1> ;For join, it is transparent.
   750 0000175C F605(58060000)FF    <1>     test byte [skipDisk], -1    ;Clear if not hitting disk!
   751 00001763 7420                <1>     jz .notNet                  ;Skip this if not hitting disk!
   752                              <1> ;Start diskhit by checking the cds here if hitting the disk. 
   753                              <1> ;If it is a network cds we make findfirst req. 
   754 00001765 57                  <1>     push rdi
   755 00001766 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   756 0000176D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   757 00001773 5F                  <1>     pop rdi
   758 00001774 740F                <1>     jz .notNet
   759 00001776 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS as in DOS, undocumented
   760 0000177D B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS!
   761 00001782 CD2F                <1>     int 2fh 
   762                              <1>     return
    13                              <2> %%_ret:
    14 00001784 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .notNet:
   764 00001785 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   765 00001788 7543                <1>     jnz .mainlp
   766                              <1> ;Setup dummy dir data for the Root directory only if we are searching for it.
   767                              <1> ;This is to help setting vars when doing other DOS calls. 
   768 0000178A 31C0                <1>     xor eax, eax
   769 0000178C 668905(98060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   770 00001793 668905(9E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   771 0000179A C605(8F060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   772                              <1>     ;Now we check if we are on a JOIN drive. If so, we swap back to the 
   773                              <1>     ; join host! Only when hitting the disk though.
   774 000017A1 F605(58060000)FF    <1>     test byte [skipDisk], -1
   775 000017A8 0F8489000000        <1>     jz .exitGood
   776 000017AE 57                  <1>     push rdi
   777 000017AF 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]     ;Get the current CDS
   778 000017B6 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive
   779 000017BC 5F                  <1>     pop rdi
   780 000017BD 7478                <1>     jz .exitGood    ;If not a join drive, exit (this never happens?)
   781 000017BF 488B35(3B070000)    <1>     mov rsi, qword [workingCDS] ;Use the join client CDS as source string!
   782 000017C6 B0FF                <1>     mov al, -1  ;Set to search for a dir as only dir can be mntpoint
   783 000017C8 E93BFEFFFF          <1>     jmp getPathNoCanon
   784                              <1> .mainlp:
   785                              <1>     ;rbx must remain constant in this portion,
   786                              <1>     ; and is used to signify the first writable byte in the path
   787 000017CD 53                  <1>     push rbx
   788 000017CE E83F010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   789 000017D3 5B                  <1>     pop rbx
   790 000017D4 7268                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   791 000017D6 84C0                <1>     test al, al
   792 000017D8 7507                <1>     jnz .notFile
   793 000017DA C605(2E070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   794                              <1> .notFile:
   795 000017E1 53                  <1>     push rbx                ;The below messes up rbx
   796 000017E2 E866040000          <1>     call checkDevPath       ;Silently intervene DEVs if in truename mode!
   797 000017E7 5B                  <1>     pop rbx
   798 000017E8 E80B020000          <1>     call searchForPathspec  ;Now search the directory
   799 000017ED 724F                <1>     jc .exit    ;If CF=CY, error exit. al has error code
   800 000017EF E880020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   801 000017F4 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   802 000017F6 84C0                <1>     test al, al ;Exit if this pathspec was a file
   803 000017F8 743D                <1>     jz .exitGood
   804                              <1>     ;Here I have to take the cluster data from the found directory entry
   805                              <1>     ; and setup the search for the next pathspec portion
   806                              <1>     ;Copy necessary data from the current directory copy
   807 000017FA 803D(58060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   808 00001801 74CA                <1>     jz .mainlp
   809 00001803 0FB705(98060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   810 0000180A C1E010              <1>     shl eax, 10h    ;Shift it high
   811 0000180D 668B05(9E060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   812                              <1>     ;eax now has the cluster number of the search
   813 00001814 8905(A8070000)      <1>     mov dword [dirClustA], eax
   814 0000181A 8905(A4070000)      <1>     mov dword [dirClustPar], eax
   815 00001820 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   816 00001822 8905(AE070000)      <1>     mov dword [dirEntry], eax
   817 00001828 668905(AC070000)    <1>     mov word [dirSect], ax
   818 0000182F EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   819                              <1> .badDriveExit:
   820 00001831 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   821                              <1>     return
    13                              <2> %%_ret:
    14 00001836 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   822                              <1> .exitGood:
   823 00001837 C605(2D070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   824                              <1> .exit:
   825                              <1>     return
    13                              <2> %%_ret:
    14 0000183E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   826                              <1> 
   827                              <1> prepareDir:
   828                              <1> ;Used to transfer the current directory if it is necessary.
   829                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   830                              <1> ; a relative path is specified.
   831                              <1> ;Input: al = 1-based drive letter
   832                              <1> ;Output: rdi = Pointing at where to place chars from source string
   833                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   834                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   835 0000183F 56                  <1>     push rsi    ;Push ptr to source string
   836 00001840 E852640000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   837 00001845 E8DE5F0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   838 0000184A 7320                <1>     jnc .notJoin ;Very valid disk
   839 0000184C F605(58060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   840 00001853 7510                <1>     jnz .okJoin                 ;If not, proceed. If so, fail.    
   841 00001855 F9                  <1>     stc
   842 00001856 EB19                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   843                              <1> .getDPB: 
   844 00001858 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS] 
   845 0000185F E8675C0000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   846                              <1>     return
    13                              <2> %%_ret:
    14 00001864 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   847                              <1> .okJoin:
   848 00001865 E8EEFFFFFF          <1>     call .getDPB
   849 0000186A EB3A                <1>     jmp short .joinEp
   850                              <1> .notJoin:
   851 0000186C E8E7FFFFFF          <1>     call .getDPB
   852                              <1>     ;rbp = DPB ptr now
   853                              <1> .critExit:
   854 00001871 E82B640000          <1>     call dosCrit1Exit
   855 00001876 7253                <1>     jc .badDriveExit 
   856 00001878 488B3D(48060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   857                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   858                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   859                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   860                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   861                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   862 0000187F 488B35(3B070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   863 00001886 4889FB              <1>     mov rbx, rdi
   864 00001889 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   865 0000188D 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   866                              <1>     ;Now check if we have a subst to handle
   867 00001890 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   868 00001896 7535                <1>     jnz .prepDirSubst
   869 00001898 F605(2A070000)FF    <1>     test byte [spliceFlag], -1
   870 0000189F 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   871                              <1>     ;Else we copy the first two chars only (X:)
   872 000018A1 66A5                <1>     movsw  
   873 000018A3 B05C                <1>     mov al, "\"
   874 000018A5 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   875                              <1> .joinEp:
   876 000018A6 31C0                <1>     xor eax, eax    ;Get cluster 0
   877 000018A8 EB1B                <1>     jmp short .prepDirExitSkip
   878                              <1> .prepLoop:
   879 000018AA AC                  <1>     lodsb
   880 000018AB 84C0                <1>     test al, al ;If al was null, then we stop
   881 000018AD 7403                <1>     jz .prepDirExit
   882 000018AF AA                  <1>     stosb
   883 000018B0 EBF8                <1>     jmp short .prepLoop
   884                              <1> .prepDirExit:
   885 000018B2 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   886 000018B6 7403                <1>     je .prepDirExitSkipPathsep
   887 000018B8 B05C                <1>     mov al, "\"
   888 000018BA AA                  <1>     stosb   ;Store the path separator and increment rdi
   889                              <1> .prepDirExitSkipPathsep:
   890 000018BB 488B35(3B070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   891 000018C2 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   892                              <1> .prepDirExitSkip:
   893 000018C5 E816000000          <1>     call prepSetupDirSearchVars
   894 000018CA F8                  <1>     clc ;Clear carry before exiting
   895                              <1> .badDriveExit:
   896 000018CB 5E                  <1>     pop rsi
   897                              <1>     return
    13                              <2> %%_ret:
    14 000018CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   898                              <1> .prepDirSubst:
   899 000018CD 51                  <1>     push rcx
   900 000018CE 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   901                              <1> .prepDirCopy1:
   902 000018D2 F3A4                <1>     rep movsb   ;Copy the string over
   903 000018D4 59                  <1>     pop rcx
   904 000018D5 F605(2A070000)FF    <1>     test byte [spliceFlag], -1
   905 000018DC 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   906 000018DE EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   907                              <1> prepSetupDirSearchVars:
   908                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   909                              <1> ;       rbp -> Working DPB
   910 000018E0 51                  <1>     push rcx
   911 000018E1 31C9                <1>     xor ecx, ecx
   912 000018E3 66890D(AC070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   913 000018EA 890D(AE070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   914 000018F0 E8AEF1FFFF          <1>     call getFATtype ;Get type of fat
   915 000018F5 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   916 000018FB 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   917                              <1>     ;FAT 32 here
   918 000018FD 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   919 000018FF 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   920 00001901 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   921                              <1> .psdsvExit:
   922 00001904 8905(A8070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   923 0000190A 8905(A4070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   924 00001910 59                  <1>     pop rcx
   925                              <1>     return 
    13                              <2> %%_ret:
    14 00001911 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   926                              <1> 
   927                              <1> copyPathspec:
   928                              <1> ;1) Copies a path portion from the source buffer to the destination
   929                              <1> ;2) Advances rsi to the next null, \ or /
   930                              <1> ;3) Expands all * to ?'s
   931                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   932                              <1> ;    next path separator and rdi pointing to the previous pathsep
   933                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   934                              <1> ;    with rsi moving to path separator
   935                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   936                              <1> ;
   937                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   938                              <1> ;           rdi = Points to where to store it
   939                              <1> ;
   940                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   941                              <1> ;           rdi = First char of next space to store next pathspec
   942                              <1> ;           al = Last char stored (either \ or NULL)
   943                              <1> ;           CF=NC = OK path
   944                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   945                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   946 00001912 57                  <1>     push rdi    ;Save the pointer into the user buffer
   947 00001913 C605(B7040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   948 0000191A 488D3D(03070000)    <1>     lea rdi, fcbName
   949 00001921 57                  <1>     push rdi
   950 00001922 B903000000          <1>     mov ecx, 3
   951 00001927 B820202020          <1>     mov eax, "    " ;Four spaces
   952 0000192C F3AB                <1>     rep stosd   ;Store 12 spaces
   953 0000192E 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   954                              <1> 
   955 0000192F 488D1D(0E070000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   956 00001936 AC                  <1>     lodsb   ;Get first char from user path in al
   957 00001937 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   958 00001939 746B                <1>     je .cpsDots
   959 0000193B 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   960                              <1> ;First char is not a dot, so now check if starts with E5h? 
   961                              <1> ;If so, store 05h in its place!
   962 0000193E 3CE5                <1>     cmp al, 0E5h
   963 00001940 7506                <1>     jne .cpsMainLoop
   964 00001942 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   965 00001945 B005                <1>     mov al, 05h
   966 00001947 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   967                              <1> .cpsMainLoop:
   968 00001948 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   969 00001949 84C0                <1>     test al, al ;Is it the null char?
   970 0000194B 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   971 00001951 E8CF5F0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   972 00001956 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   973 0000195C 3C2E                <1>     cmp al, "." ;Filename extension separator
   974 0000195E 7420                <1>     je .cpsExtension
   975                              <1>     ;If we have space in the filename, we check to see if the next char is *
   976 00001960 3C2A                <1>     cmp al, "*" ;Wildcard?
   977 00001962 7430                <1>     je .cpsWildcard
   978 00001964 3C3F                <1>     cmp al, "?" ;Good wildcard?
   979 00001966 740C                <1>     je .store
   980 00001968 E8C45F0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   981 0000196D E841610000          <1>     call checkCharValid ; and check it is a valid char
   982 00001972 7472                <1>     je .cpsExitError
   983                              <1> .store:
   984 00001974 4839DF              <1>     cmp rdi, rbx
   985 00001977 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   986 00001979 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   987 0000197A EBCC                <1>     jmp short .cpsMainLoop
   988                              <1> .cpsInvalidChar:
   989 0000197C 30C0                <1>     xor al, al
   990 0000197E EB3B                <1>     jmp short .cpsProcessName
   991                              <1> .cpsExtension:
   992                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   993 00001980 B903000000          <1>     mov ecx, 3 
   994 00001985 488D3D(0B070000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   995 0000198C 57                  <1>     push rdi
   996 0000198D B020                <1>     mov al, " "
   997 0000198F F3AA                <1>     rep stosb
   998 00001991 5F                  <1>     pop rdi
   999 00001992 EBB4                <1>     jmp short .cpsMainLoop
  1000                              <1> .cpsWildcard:
  1001                              <1> ;Fill the entire FCB filespec with ?'s.
  1002                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
  1003                              <1> ; *'s from crashing DOS :)
  1004 00001994 AC                  <1>     lodsb   ;Get char, inc rsi
  1005 00001995 3C2A                <1>     cmp al, "*"
  1006 00001997 74FB                <1>     je short .cpsWildcard
  1007 00001999 48FFCE              <1>     dec rsi ;Go back to the first non-star char
  1008 0000199C B03F                <1>     mov al, "?"
  1009                              <1> .cpsWildcardLp:
  1010 0000199E AA                  <1>     stosb
  1011 0000199F 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
  1012 000019A2 75FA                <1>     jne short .cpsWildcardLp
  1013 000019A4 EBA2                <1>     jmp short .cpsMainLoop
  1014                              <1> 
  1015                              <1> .cpsDots:
  1016 000019A6 AA                  <1>     stosb   ;Store the first dot
  1017 000019A7 8A06                <1>     mov al, byte [rsi]
  1018 000019A9 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
  1019 000019AB 752E                <1>     jne .cpsStore
  1020 000019AD A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
  1021 000019AE 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
  1022 000019B0 84C0                <1>     test al, al
  1023 000019B2 7407                <1>     jz .cpsProcessName
  1024 000019B4 E86C5F0000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
  1025 000019B9 752B                <1>     jnz .cpsExitError
  1026                              <1> .cpsProcessName:
  1027                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
  1028 000019BB 84C0                <1>     test al, al 
  1029 000019BD 741C                <1>     jz .cpsStore
  1030 000019BF E8615F0000          <1>     call swapPathSeparator
  1031 000019C4 7415                <1>     jz .cpsStore
  1032                              <1> .cpsFindTerminator:
  1033 000019C6 AC                  <1>     lodsb
  1034 000019C7 84C0                <1>     test al, al 
  1035 000019C9 7410                <1>     jz .cpsStore
  1036 000019CB E8555F0000          <1>     call swapPathSeparator
  1037 000019D0 7409                <1>     jz .cpsStore
  1038 000019D2 E8DC600000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
  1039 000019D7 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
  1040                              <1>     ;If we encounter a terminator, convert to 0
  1041 000019D9 30C0                <1>     xor al, al
  1042                              <1> .cpsStore:
  1043 000019DB 488D3D(0E070000)    <1>     lea rdi, fcbName+11
  1044 000019E2 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
  1045 000019E3 5F                  <1>     pop rdi
  1046 000019E4 F8                  <1>     clc
  1047                              <1>     return
    13                              <2> %%_ret:
    14 000019E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1048                              <1> .cpsExitError:
  1049 000019E6 5F                  <1>     pop rdi
  1050 000019E7 F9                  <1>     stc
  1051                              <1>     return
    13                              <2> %%_ret:
    14 000019E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1052                              <1> .cpsSkipPathseps:
  1053 000019E9 AC                  <1>     lodsb
  1054 000019EA E8365F0000          <1>     call swapPathSeparator
  1055 000019EF 74F8                <1>     jz .cpsSkipPathseps
  1056 000019F1 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1057 000019F4 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1058 000019F6 EBE3                <1>     jmp short .cpsStore
  1059                              <1> 
  1060                              <1> searchForPathspec:
  1061                              <1>     ;Now search the current directory for this filename
  1062                              <1>     ;Find first using SDA ffBlock
  1063                              <1>     ;If al = 0, we have final file name or directory name
  1064                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1065                              <1>     ;Output: CF=CY => Error occured, al has error code (Fnf or Pnf)
  1066                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1067                              <1>     ;                 FF block somewhat setup
  1068                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1069 000019F8 50                  <1>     push rax
  1070 000019F9 53                  <1>     push rbx
  1071 000019FA 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1072 000019FB 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1073 000019FC 0FB61D(93040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1074 00001A03 53                  <1>     push rbx    ;and push it onto the stack
  1075                              <1> ;Evaluate whether we are searching for a file for a directory
  1076 00001A04 84C0                <1>     test al, al
  1077 00001A06 741D                <1>     jz .sfpPNfile
  1078                              <1>     ;Fall if subdir
  1079 00001A08 488D3D(03070000)    <1>     lea rdi, fcbName
  1080 00001A0F B03F                <1>     mov al, "?" ;Search for wildcard
  1081 00001A11 B90B000000          <1>     mov ecx, 11
  1082 00001A16 F2AE                <1>     repne scasb
  1083 00001A18 7452                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1084 00001A1A B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1085 00001A1C C605(93040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1086 00001A23 EB07                <1>     jmp short .sfpPNMain
  1087                              <1> .sfpPNfile:
  1088                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1089 00001A25 0FB605(26070000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1090                              <1> .sfpPNMain:
  1091 00001A2C 803D(58060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1092 00001A33 7418                <1>     je .sfpPNNoDisk
  1093 00001A35 E8DCF7FFFF          <1>     call searchDir
  1094 00001A3A 7211                <1>     jc .sfpPNNoDisk
  1095 00001A3C 803D(84060000)05    <1>     cmp byte [curDirCopy], 05h 
  1096 00001A43 7507                <1>     jne .noAdjust
  1097                              <1>     ;Readjust when the start of a dir entry name is 05h
  1098 00001A45 C605(84060000)E5    <1>     mov byte [curDirCopy], 0E5h
  1099                              <1> .noAdjust:
  1100 00001A4C F8                  <1>     clc ;Ensure the carry flag is clear here!
  1101                              <1> .sfpPNNoDisk:
  1102 00001A4D 5B                  <1>     pop rbx
  1103 00001A4E 881D(93040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1104 00001A54 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1105 00001A55 5E                  <1>     pop rsi
  1106 00001A56 5B                  <1>     pop rbx
  1107 00001A57 58                  <1>     pop rax ;Get back the original al value
  1108                              <1>     retnc   ;Return if file found. Else, report what was not found correctly!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A58 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A5A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1109 00001A5B 84C0                <1>     test al, al ;If we are on the last path comp, fail pnf!
  1110 00001A5D F9                  <1>     stc         ;Dont forget to set CF again!!
  1111 00001A5E B802000000          <1>     mov eax, errFnf
  1112                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A63 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A65 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1113 00001A66 B803000000          <1>     mov eax, errPnf ;Else it is path not found!
  1114                              <1>     return
    13                              <2> %%_ret:
    14 00001A6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1115                              <1> .sfpPnf:
  1116 00001A6C B803000000          <1>     mov eax, errPnf
  1117                              <1> .sfpErrExit:
  1118 00001A71 F9                  <1>     stc ;Set carry
  1119 00001A72 EBD9                <1>     jmp short .sfpPNNoDisk
  1120                              <1> 
  1121                              <1> addPathspecToBuffer:
  1122                              <1> ;Input: fcbName = Qualified pathname portion
  1123                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1124                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1125                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1126                              <1> ;rbx points to the "head of the path"
  1127                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1128                              <1> ;Converts the special char if the filename starts with it!
  1129 00001A74 F605(58060000)FF    <1>     test byte [skipDisk], -1
  1130                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A7B 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A7D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1131 00001A7E 803D(03070000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1132 00001A85 746A                <1>     je .aptbDots
  1133                              <1>     ;Copy filename over to internal buffer
  1134                              <1> .aptbAddNull:
  1135 00001A87 56                  <1>     push rsi    ;Save source pointer position
  1136 00001A88 488D35(03070000)    <1>     lea rsi, fcbName
  1137 00001A8F 803E05              <1>     cmp byte [rsi], 05h
  1138 00001A92 7503                <1>     jne .notSpecialChar
  1139 00001A94 C606E5              <1>     mov byte [rsi], 0E5h
  1140                              <1> .notSpecialChar:
  1141 00001A97 E8CDF9FFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1142 00001A9C 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1143 00001A9F 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1144 00001AA0 E8C6000000          <1>     call .aptbInterveneEnterJoin
  1145                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001AA5 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001AA7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1146                              <1> .aptbHandleTerminator:
  1147 00001AA8 8A05(0E070000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1148 00001AAE 84C0                <1>     test al, al
  1149 00001AB0 741A                <1>     jz .aptbHandleNull
  1150 00001AB2 E86E5E0000          <1>     call swapPathSeparator
  1151 00001AB7 0F85C7000000        <1>     jnz .aptbErrorExit
  1152                              <1> ;Handle path separator here directly
  1153 00001ABD 50                  <1>     push rax    ;Preserve the terminator char
  1154 00001ABE 8A47FF              <1>     mov al, byte [rdi - 1]
  1155 00001AC1 E85F5E0000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1156 00001AC6 58                  <1>     pop rax
  1157 00001AC7 7426                <1>     jz .aptbExitOk 
  1158 00001AC9 AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1159 00001ACA EB23                <1>     jmp short .aptbExitOk
  1160                              <1> .aptbHandleNull:
  1161 00001ACC E85B000000          <1>     call .aptbAtHeadOfPath
  1162 00001AD1 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1163 00001AD3 50                  <1>     push rax
  1164 00001AD4 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1165 00001AD7 E8495E0000          <1>     call swapPathSeparator
  1166 00001ADC 58                  <1>     pop rax
  1167 00001ADD 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1168 00001ADF 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1169 00001AE2 EB0B                <1>     jmp short .aptbExitOk
  1170                              <1> .aptbHandleNullNoOverwritePrim:
  1171 00001AE4 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1172 00001AE8 7403                <1>     je short .aptbHandleNullNoOverwrite
  1173                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1174 00001AEA 48FFCF              <1>     dec rdi
  1175                              <1> .aptbHandleNullNoOverwrite:
  1176 00001AED 8807                <1>     mov byte [rdi], al  ;Write in a null
  1177                              <1> .aptbExitOk:
  1178 00001AEF F8                  <1>     clc
  1179                              <1>     return
    13                              <2> %%_ret:
    14 00001AF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1180                              <1> .aptbDots:
  1181                              <1> ;For one dot, we pull the terminating null to rdi
  1182                              <1> ;For two dots, we search backwards for the previous "\"
  1183 00001AF1 803D(04070000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1184 00001AF8 7409                <1>     je .aptbMoreDots
  1185 00001AFA C605(03070000)20    <1>     mov byte [fcbName], " "
  1186 00001B01 EB84                <1>     jmp short .aptbAddNull
  1187                              <1> .aptbMoreDots:
  1188                              <1> ;Here we have two dots
  1189 00001B03 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1190 00001B08 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1191                              <1> ;Else, we are able to decrement.
  1192 00001B0A 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1193                              <1> .aptbDotsLp:
  1194 00001B11 E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1195 00001B16 7490                <1>     je .aptbHandleTerminator
  1196 00001B18 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1197 00001B1B 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1198 00001B1D E8035E0000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1199 00001B22 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1200 00001B24 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1201 00001B27 E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1202                              <1> .aptbAtHeadOfPath:
  1203                              <1> ;Returns ZF=ZE if at head of path.
  1204 00001B2C 57                  <1>     push rdi
  1205 00001B2D 48FFCF              <1>     dec rdi
  1206 00001B30 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1207 00001B33 5F                  <1>     pop rdi
  1208                              <1>     return
    13                              <2> %%_ret:
    14 00001B34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1209                              <1> .aptbInterveneExitJoin:
  1210                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1211 00001B35 488B2D(3B070000)    <1>     mov rbp, qword [workingCDS]
  1212 00001B3C 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1213 00001B42 7540                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1214                              <1>     ;Now we change the drive letter and return
  1215 00001B44 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1216 00001B47 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1217 00001B4A 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1218 00001B4C E8D75C0000          <1>     call getCDSNotJoin
  1219                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001B51 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001B53 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1220 00001B54 56                  <1>     push rsi
  1221 00001B55 57                  <1>     push rdi
  1222 00001B56 53                  <1>     push rbx
  1223 00001B57 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
  1224 00001B5E E868590000          <1>     call getDiskDPB 
  1225 00001B63 5B                  <1>     pop rbx
  1226 00001B64 5F                  <1>     pop rdi
  1227 00001B65 5E                  <1>     pop rsi
  1228 00001B66 E93DFFFFFF          <1>     jmp .aptbHandleTerminator
  1229                              <1> .aptbInterveneEnterJoin:
  1230                              <1> ;Handles join paths.
  1231 00001B6B F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1232                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001B72 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001B74 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1233 00001B75 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1234 00001B76 488B35(48060000)    <1>     mov rsi, qword [fname1Ptr]
  1235 00001B7D E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1236 00001B82 5E                  <1>     pop rsi
  1237                              <1>     return
    13                              <2> %%_ret:
    14 00001B83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1238                              <1> .aptbErrorExit:
  1239 00001B84 B002                <1>     mov al, errFnf
  1240 00001B86 C605(35040000)03    <1>     mov byte [errorAction], eActUsr
  1241 00001B8D C605(36040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1242 00001B94 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
  1243 00001B9B F9                  <1>     stc
  1244                              <1>     return
    13                              <2> %%_ret:
    14 00001B9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1245                              <1> 
  1246                              <1> handleJoin:
  1247                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1248                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1249                              <1> ;Input:
  1250                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1251                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1252                              <1> ; rax = 0
  1253                              <1> ;Output:
  1254                              <1> ;If no match, no effect.
  1255                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1256                              <1> ; join drive. rsi is advanced to the next path componant.
  1257                              <1> ;If CF=CY => Disk detection error
  1258 00001B9D 51                  <1>     push rcx
  1259 00001B9E 55                  <1>     push rbp
  1260 00001B9F 488B2D(3B070000)    <1>     mov rbp, qword [workingCDS]
  1261 00001BA6 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1262 00001BAA F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1263 00001BB0 740C                <1>     jz .okToGo
  1264 00001BB2 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1265 00001BB8 0F848C000000        <1>     jz .exitNoCrit
  1266                              <1> .okToGo:
  1267 00001BBE E8D4600000          <1>     call dosCrit1Enter
  1268 00001BC3 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1269 00001BCA 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1270                              <1> .checkCDS:
  1271 00001BCC 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1272 00001BD2 7560                <1>     jne .gotoNextCDS
  1273                              <1> .scanCDSName:
  1274                              <1> ;Get the length of the CDS path componant to check
  1275 00001BD4 51                  <1>     push rcx
  1276 00001BD5 57                  <1>     push rdi
  1277 00001BD6 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1278 00001BD7 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1279 00001BDA E8A25D0000          <1>     call strlen     ;Get length of the path componant in ecx
  1280 00001BDF FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1281 00001BE1 F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1282 00001BE3 754C                <1>     jnz .notString
  1283                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1284 00001BE5 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1285 00001BE6 E83A5D0000          <1>     call swapPathSeparator
  1286 00001BEB 7407                <1>     jz .goodString
  1287 00001BED 84C0                <1>     test al, al
  1288 00001BEF 7540                <1>     jnz .notString
  1289 00001BF1 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1290                              <1> .goodString:
  1291                              <1>     ;Here we know we have the right string.
  1292 00001BF4 59                  <1>     pop rcx ;Trash original rsi
  1293 00001BF5 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1294 00001BF6 59                  <1>     pop rcx 
  1295                              <1>     ;Now store the path in the original CDS before intervening
  1296                              <1>     ; in the path
  1297 00001BF7 48892D(3B070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1298 00001BFE 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1299 00001BFF 57                  <1>     push rdi
  1300 00001C00 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1301 00001C03 53                  <1>     push rbx    ;Preserve the head of the path
  1302 00001C04 E8C2580000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1303 00001C09 5B                  <1>     pop rbx
  1304 00001C0A 5F                  <1>     pop rdi
  1305 00001C0B 5E                  <1>     pop rsi
  1306 00001C0C 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1307 00001C0E 8A05(32070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1308 00001C14 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1309 00001C16 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1310 00001C1A 7403                <1>     je .notNet
  1311 00001C1C F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1312 00001C1D EB26                <1>     jmp short .exit
  1313                              <1> .notNet:
  1314                              <1> ; Join entry intervention occurs here.
  1315 00001C1F 8843FE              <1>     mov byte [rbx - 2], al
  1316 00001C22 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1317                              <1> .pullLp:
  1318 00001C26 AC                  <1>     lodsb
  1319 00001C27 AA                  <1>     stosb
  1320 00001C28 84C0                <1>     test al, al
  1321 00001C2A 75FA                <1>     jnz .pullLp
  1322 00001C2C 48FFCF              <1>     dec rdi
  1323 00001C2F EB14                <1>     jmp short .exit
  1324                              <1> .notString:
  1325 00001C31 5E                  <1>     pop rsi
  1326 00001C32 5F                  <1>     pop rdi
  1327 00001C33 59                  <1>     pop rcx
  1328                              <1> .gotoNextCDS:
  1329 00001C34 4881C55F000000      <1>     add rbp, cds_size
  1330 00001C3B FFC1                <1>     inc ecx 
  1331 00001C3D 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1332 00001C43 7587                <1>     jnz .checkCDS
  1333                              <1> .exit:
  1334 00001C45 E857600000          <1>     call dosCrit1Exit
  1335                              <1> .exitNoCrit:
  1336 00001C4A 5D                  <1>     pop rbp
  1337 00001C4B 59                  <1>     pop rcx
  1338                              <1>     return
    13                              <2> %%_ret:
    14 00001C4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1339                              <1> 
  1340                              <1> checkDevPath:
  1341                              <1> ;Only works in truename and in the root dir of a disk. If the search pattern
  1342                              <1> ; is a char device, replace the root pathsep with a UNIX pathsep.
  1343                              <1> ;Else if we are searching for the DEV folder in the root of a disk
  1344                              <1> ; and the next componant we are searching for is a char device, we 
  1345                              <1> ; only copy over the char device to the destination buffer with a UNIX
  1346                              <1> ; pathsep. Else, we do nothing. Clobbers rbx!
  1347                              <1> ;Input: rsi = Pointer to the next path spec
  1348                              <1> ;       rdi = Buffer where to add it
  1349                              <1> ;Output: If \DEV\devicename then copy /devicename to buffer.
  1350                              <1> ;        If devicename in the root dir, then replace pathsep
  1351 00001C4D F605(58060000)FF    <1>     test byte [skipDisk], -1    ;If set, return!
  1352                              <1>     retnz             
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C54 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C56 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1353                              <1> ;First check we are searching in the root dir!
  1354 00001C57 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" 
  1355                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C5D 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C5F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1356                              <1> ;Now check to see if fcbname is DEV
  1357 00001C60 50                  <1>     push rax
  1358 00001C61 48B844455620202020- <1>     mov rax, "DEV     "
  1358 00001C6A 20                  <1>
  1359 00001C6B 483905(03070000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1360 00001C72 58                  <1>     pop rax
  1361 00001C73 7566                <1>     jne .checkDevice   ;Maybe this is a device if not DEV
  1362 00001C75 813D(0B070000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1362 00001C7D 205C                <1>
  1363 00001C7F 755A                <1>     jne .checkDevice    ;Was not \DEV\, check if it was \CON or something
  1364                              <1>     ;So here we are in the DEV dir. Check if \DEV or just DEV
  1365 00001C81 F605(2A070000)FF    <1>     test byte [spliceFlag], -1
  1366                              <1>     retz    ;Exit if relative!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C88 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C8A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1367                              <1>     ;Else, don't add DEV to the name, replace "\" with a "/", move rsi past it
  1368 00001C8B 56                  <1>     push rsi    ;Save if not followed by dev!
  1369 00001C8C 57                  <1>     push rdi    ;If followed by dev, not a problem, we end the pathbuild!
  1370 00001C8D 488D3D(03070000)    <1>     lea rdi, fcbName
  1371 00001C94 E888F7FFFF          <1>     call asciiToFCB    ;Advances rsi
  1372                              <1>     ;Returns in al the terminating char of the source string
  1373 00001C99 5F                  <1>     pop rdi
  1374 00001C9A 5E                  <1>     pop rsi
  1375                              <1>     ;If al is a pathsep, fail 
  1376 00001C9B E8855C0000          <1>     call swapPathSeparator  ;Device names cannot be terminated with a "\" or "/"
  1377 00001CA0 7409                <1>     jz .repDev   ;Thus this is not a device, normal search!
  1378                              <1>     ;mov byte [fcbName + 11], 0 ;Store terminator in fcbName field
  1379 00001CA2 53                  <1>     push rbx
  1380 00001CA3 E845000000          <1>     call checkIfCharDevice
  1381 00001CA8 5B                  <1>     pop rbx ;Don't need bh yet
  1382 00001CA9 7322                <1>     jnc .pathSepExit    ;If this is a char dev, jump down
  1383                              <1> .repDev:
  1384                              <1> ;Componant after DEV was not a char dev, replace DEV back in the count!
  1385 00001CAB C705(03070000)4445- <1>     mov dword [fcbName], "DEV "
  1385 00001CB3 5620                <1>
  1386 00001CB5 C705(07070000)2020- <1>     mov dword [fcbName + 4], "    "
  1386 00001CBD 2020                <1>
  1387 00001CBF C705(0B070000)2020- <1>     mov dword [fcbName + 8], "   \" 
  1387 00001CC7 205C                <1>
  1388 00001CC9 B05C                <1>     mov al, "\" ;\DEV\ was a dir, report it was so!
  1389 00001CCB EB0C                <1>     jmp short .exit
  1390                              <1> .pathSepExit:
  1391                              <1> ;Here only if the device was determined to be a char device.
  1392 00001CCD 30C0                <1>     xor al, al
  1393 00001CCF 8805(0E070000)      <1>     mov byte [fcbName + 11], al ;Store null pathsep here!
  1394 00001CD5 C647FF2F            <1>     mov byte [rdi - 1], "/" ;Store reverse pathsep here!
  1395                              <1> .exit:
  1396 00001CD9 F8                  <1>     clc
  1397                              <1>     return
    13                              <2> %%_ret:
    14 00001CDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1398                              <1> .checkDevice:
  1399 00001CDB E80D000000          <1>     call checkIfCharDevice  ;Check if what we already have is a chardev?
  1400 00001CE0 72F7                <1>     jc .exit                ;If not a device, silently return
  1401 00001CE2 803D(0E070000)00    <1>     cmp byte [fcbName + 11], 0  ;If null, its a char dev in the root!
  1402 00001CE9 74E2                <1>     je .pathSepExit
  1403 00001CEB EBEC                <1>     jmp short .exit         ;Else its gonna fail! Char dev as path comp... eek!
  1404                              <1> 
  1405                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1406                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1407                              <1> ; device driver chain. 
  1408                              <1> ;Output: CF=CY if not found
  1409                              <1> ;        CF=NC if found
  1410                              <1> ;           BH = Low byte of the device attribute word
  1411 00001CED 50                  <1>     push rax
  1412 00001CEE 57                  <1>     push rdi
  1413 00001CEF 488B05(03070000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1414 00001CF6 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1415                              <1> .checkName:
  1416 00001CFD 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1417 00001D01 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1418 00001D03 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1419 00001D06 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1420 00001D08 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1421 00001D0B 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1422 00001D0E 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1423 00001D12 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1424                              <1> .walkList:
  1425 00001D14 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1426 00001D17 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1427 00001D1E 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1428 00001D20 F9                  <1>     stc
  1429                              <1> .exit:
  1430 00001D21 5F                  <1>     pop rdi
  1431 00001D22 58                  <1>     pop rax
  1432                              <1>     return
    13                              <2> %%_ret:
    14 00001D23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1433                              <1> 
  1434                              <1> buildCharDir:
  1435                              <1> ;Build a dummy directory entry for the char device in FCBName
  1436                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1437 00001D24 50                  <1>     push rax
  1438 00001D25 57                  <1>     push rdi
  1439 00001D26 C605(0E070000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1440 00001D2D 488D3D(84060000)    <1>     lea rdi, curDirCopy
  1441                              <1>     ;Zero the directory copy (32 bytes)
  1442 00001D34 50                  <1>     push rax
  1443 00001D35 51                  <1>     push rcx
  1444 00001D36 57                  <1>     push rdi
  1445 00001D37 31C0                <1>     xor eax, eax    ;Zero rax
  1446 00001D39 B904000000          <1>     mov ecx, 4
  1447 00001D3E F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1448 00001D41 5F                  <1>     pop rdi
  1449 00001D42 59                  <1>     pop rcx
  1450 00001D43 58                  <1>     pop rax
  1451 00001D44 C705(AE070000)FFFF- <1>     mov dword [dirEntry], -1    ;Indicate invalid offset into dir
  1451 00001D4C FFFF                <1>
  1452 00001D4E 488B05(03070000)    <1>     mov rax, qword [fcbName]
  1453 00001D55 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1454 00001D58 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1455 00001D5D 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1456 00001D60 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1457                              <1>     ;Get date and time and set the write time in the directory entry
  1458 00001D64 E8E1120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1459 00001D69 E8C7130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1460 00001D6E 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1461 00001D71 31C0                <1>     xor eax, eax
  1462 00001D73 5F                  <1>     pop rdi
  1463 00001D74 58                  <1>     pop rax
  1464                              <1>     return
    13                              <2> %%_ret:
    14 00001D75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1465                              <1> 
  1466                              <1> checkFailingComp:
  1467                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1468                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1469                              <1> ;Returns: ZF=ZE => Last path componant
  1470                              <1> ;         ZF=NZ => Not last path componant
  1471 00001D76 50                  <1>     push rax
  1472 00001D77 8A05(0E070000)      <1>     mov al, byte [fcbName + 11]
  1473 00001D7D 84C0                <1>     test al, al
  1474 00001D7F 58                  <1>     pop rax
  1475                              <1>     return
    13                              <2> %%_ret:
    14 00001D80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001D81 4889D7              <1>     mov rdi, rdx
     8 00001D84 E8F85B0000          <1>     call strlen
     9 00001D89 81F940000000        <1>     cmp ecx, MAX_FSPEC
    10 00001D8F 761E                <1>     jbe .okLength
    11                              <1> .badLen:
    12 00001D91 B805000000          <1>     mov eax, errAccDen
    13 00001D96 E9475F0000          <1>     jmp extErrExit
    14                              <1> .badFile:
    15 00001D9B B802000000          <1>     mov eax, errFnf
    16 00001DA0 E93D5F0000          <1>     jmp extErrExit
    17                              <1> .badPath:
    18 00001DA5 B803000000          <1>     mov eax, errPnf
    19 00001DAA E9335F0000          <1>     jmp extErrExit
    20                              <1> .okLength:
    21 00001DAF 4889D6              <1>     mov rsi, rdx
    22 00001DB2 E82E5C0000          <1>     call checkPathspecOK
    23 00001DB7 72D8                <1>     jc .badLen  ;Don't allow any malformed chars, exit Acc den
    24                              <1> .pathOk:
    25 00001DB9 E8E25C0000          <1>     call scanPathWC
    26 00001DBE 72E5                <1>     jc .badPath ;Dont allow wildcards
    27                              <1>     ;Path is ok, now proceed
    28 00001DC0 C605(26070000)16    <1>     mov byte [searchAttr], dirInclusive
    29 00001DC7 488D3D(48050000)    <1>     lea rdi, buffer1    ;Build the full path here
    30 00001DCE E875F7FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    31                              <1>     ;If the path exists, exit error
    32 00001DD3 0F83095F0000        <1>     jnc extErrExit
    33 00001DD9 E8A35B0000          <1>     call strlen ;Get the length again
    34 00001DDE 81F943000000        <1>     cmp ecx, MAX_PATH
    35 00001DE4 77AB                <1>     ja .badLen
    36                              <1>     ;Handle resolved null paths here!!!
    37 00001DE6 8B05(48050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    38 00001DEC 30C0                <1>     xor al, al
    39 00001DEE 3D003A5C00          <1>     cmp eax, 005C3A00h
    40 00001DF3 74A6                <1>     je .badFile
    41                              <1>     ;-----------------------------
    42                              <1>     ;TEST THAT THE DRIVE IS VALID
    43                              <1>     ;This is clearly unnecessary
    44                              <1>     ;    Keep it for now...
    45                              <1>     ;-----------------------------
    46 00001DF5 57                  <1>     push rdi
    47 00001DF6 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
    48 00001DFD 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    49 00001E03 5F                  <1>     pop rdi
    50 00001E04 0F84D85E0000        <1>     jz extErrExit  ;Exit access denied
    51                              <1>     ;-------------------------------------------
    52                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    53 00001E0A E867FFFFFF          <1>     call checkFailingComp
    54 00001E0F 0F85CD5E0000        <1>     jnz extErrExit
    55                              <1>     ;So all is well, the new subdirectories name is in fcbName
    56                              <1>     ;The parent dir's directory entry is in the curDirCopy
    57 00001E15 E856590000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    58                              <1>     ;returns in rdi the working cds ptr
    59 00001E1A 7312                <1>     jnc .notNet
    60 00001E1C B803110000          <1>     mov eax, 1103h
    61 00001E21 CD2F                <1>     int 2fh
    62 00001E23 0F82B95E0000        <1>     jc extErrExit
    63 00001E29 E9A65E0000          <1>     jmp extGoodExit
    64                              <1> .notNet:
    65 00001E2E E8645E0000          <1>     call dosCrit1Enter
    66                              <1>     ;Current dpb ptr is already set
    67                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    68                              <1>     ;First we make a dummy dir in curDirCopy
    69                              <1>     ;mov byte [delChar], 0E5h    ;Setup delchar
    70 00001E33 C605(30070000)FF    <1>     mov byte [openCreate], -1   ;Creating special file!
    71 00001E3A 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
    72 00001E41 488D35(03070000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    73 00001E48 488D3D(84060000)    <1>     lea rdi, curDirCopy
    74 00001E4F 48A5                <1>     movsq   ;Copy the name over
    75 00001E51 A5                  <1>     movsd
    76 00001E52 E8F3110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    77 00001E57 E8D9120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    78 00001E5C 8905(92060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    79 00001E62 8905(9A060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    80 00001E68 31C0                <1>     xor eax, eax
    81 00001E6A 8905(A0060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    82 00001E70 C605(8F060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    83 00001E77 8B05(A4070000)      <1>     mov eax, dword [dirClustPar]
    84                              <1> .searchForDirSpace:
    85 00001E7D 8905(A8070000)      <1>     mov dword [dirClustA], eax
    86 00001E83 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    87 00001E85 668905(AC070000)    <1>     mov word [dirSect], ax
    88 00001E8C 8905(AE070000)      <1>     mov dword [dirEntry], eax
    89 00001E92 E898050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    90 00001E97 7328                <1>     jnc .dirEntryFnd
    91 00001E99 813D(A4070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    91 00001EA1 0000                <1>
    92 00001EA3 0F844A010000        <1>     je .bad ;Set CF and exit
    93 00001EA9 E86E060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    94 00001EAE 0F823F010000        <1>     jc .bad
    95 00001EB4 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    96 00001EB9 0F8434010000        <1>     je .bad
    97                              <1>     ;Else eax = Newly allocated cluster
    98 00001EBF EBBC                <1>     jmp short .searchForDirSpace
    99                              <1> .dirEntryFnd:
   100                              <1> ;rdi points to current directory copy
   101                              <1> ;rsi now points to offset in the buffer to write the entry to
   102                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   103 00001EC1 488B1D(67070000)    <1>     mov rbx, qword [currBuff]
   104 00001EC8 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   105                              <1>      
   106 00001ECC 488905(6F070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   107 00001ED3 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   108 00001EDA 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   109 00001EDD 668935(77070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   110                              <1> ;Must now request a cluster and sanitise it
   111 00001EE4 E8A2ECFFFF          <1>     call startNewChain      ;Get cluster number in eax
   112 00001EE9 0F8209010000        <1>     jc .badExit
   113 00001EEF E864060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   114 00001EF4 0F82FE000000        <1>     jc .badExit
   115                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   116 00001EFA 668905(9E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   117 00001F01 C1E810              <1>     shr eax, 10h    ;Get high word low
   118 00001F04 668905(98060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   119 00001F0B 488B05(6F070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   120 00001F12 E872EBFFFF          <1>     call getBufForDir
   121 00001F17 0F82DB000000        <1>     jc .badExit
   122 00001F1D 0FB705(77070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   123 00001F24 488D35(84060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   124 00001F2B 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   125 00001F30 B904000000          <1>     mov ecx, 4
   126 00001F35 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   127 00001F38 E8E5E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   128                              <1>     ;Now need to read in data sector and make two entries . and ..
   129 00001F3D 57                  <1>     push rdi
   130 00001F3E 51                  <1>     push rcx
   131 00001F3F B90B000000          <1>     mov ecx, 11
   132 00001F44 488D3D(84060000)    <1>     lea rdi, curDirCopy
   133 00001F4B B020                <1>     mov al, " "
   134 00001F4D F3AA                <1>     rep stosb
   135 00001F4F 59                  <1>     pop rcx
   136 00001F50 5F                  <1>     pop rdi
   137 00001F51 48B82E000000000000- <1>     mov rax, "."
   137 00001F5A 00                  <1>
   138 00001F5B 8805(84060000)      <1>     mov byte [curDirCopy], al
   139 00001F61 0FB705(9E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   140 00001F68 0FB715(98060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   141 00001F6F C605(8F060000)30    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirArchive 
   142 00001F76 C1E210              <1>     shl edx, 10h
   143 00001F79 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   144 00001F7B E88EEBFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   145 00001F80 E804EBFFFF          <1>     call getBufForDir
   146 00001F85 7271                <1>     jc .badExit
   147                              <1>     ;rbx has buffer pointer now
   148 00001F87 488D35(84060000)    <1>     lea rsi, curDirCopy
   149 00001F8E 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   150 00001F92 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   151 00001F97 F348A5              <1>     rep movsq
   152                              <1>     ;Now create .. entry
   153 00001F9A C605(85060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   154 00001FA1 8B05(A4070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   155 00001FA7 E8F7EAFFFF          <1>     call getFATtype
   156 00001FAC 81F902000000        <1>     cmp ecx, 2
   157 00001FB2 7207                <1>     jb .notFAT32
   158 00001FB4 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   159 00001FB7 7502                <1>     jne .notFAT32
   160 00001FB9 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   161                              <1> .notFAT32:
   162 00001FBB 668905(9E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   163 00001FC2 C1E810              <1>     shr eax, 10h
   164 00001FC5 668905(98060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   165 00001FCC 488D35(84060000)    <1>     lea rsi, curDirCopy
   166 00001FD3 B904000000          <1>     mov ecx, 4
   167 00001FD8 F348A5              <1>     rep movsq
   168 00001FDB E842E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   169 00001FE0 E8CBE7FFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   170 00001FE5 7211                <1>     jc .badExit
   171                              <1> .okExit:
   172                              <1>     ;AND WE ARE DONE!
   173 00001FE7 E8B55C0000          <1>     call dosCrit1Exit
   174 00001FEC 31C0                <1>     xor eax, eax
   175 00001FEE E9E15C0000          <1>     jmp extGoodExit
   176                              <1> .bad:
   177 00001FF3 B805000000          <1>     mov eax, errAccDen
   178                              <1> .badExit:
   179 00001FF8 E8A45C0000          <1>     call dosCrit1Exit
   180 00001FFD E9E05C0000          <1>     jmp extErrExit
   181                              <1> 
   182                              <1> removeDIR:         ;ah = 3Ah
   183 00002002 4889D7              <1>     mov rdi, rdx
   184 00002005 E877590000          <1>     call strlen
   185 0000200A 81F940000000        <1>     cmp ecx, MAX_FSPEC
   186 00002010 7613                <1>     jbe .okLength
   187                              <1> .badPath:
   188 00002012 B005                <1>     mov al, errAccDen
   189 00002014 E9C95C0000          <1>     jmp extErrExit
   190                              <1> .pnf:
   191 00002019 E8835C0000          <1>     call dosCrit1Exit   ;Only jumped to in a critical section
   192 0000201E B003                <1>     mov al, errPnf
   193 00002020 E9BD5C0000          <1>     jmp extErrExit
   194                              <1> .okLength:
   195 00002025 4889D6              <1>     mov rsi, rdx
   196 00002028 E8B8590000          <1>     call checkPathspecOK
   197 0000202D 72E3                <1>     jc .badPath  ;Don't allow any malformed chars
   198                              <1> .pathOk:
   199 0000202F E86C5A0000          <1>     call scanPathWC
   200 00002034 72DC                <1>     jc .badPath ;Dont allow wildcards
   201                              <1>     ;Path is ok, now proceed
   202 00002036 E85C5C0000          <1>     call dosCrit1Enter  ;Don't let another DOS task interrupt us!
   203 0000203B C605(26070000)10    <1>     mov byte [searchAttr], dirDirectory
   204 00002042 488D3D(48050000)    <1>     lea rdi, buffer1    ;Build the full path here
   205 00002049 E8F6F4FFFF          <1>     call getDirPath     ;Get a Directory path in buffer1, hitting the disk
   206 0000204E 72C9                <1>     jc .pnf             ;Path Doesn't exist
   207 00002050 E81B570000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   208 00002055 7312                <1>     jnc .notNet
   209 00002057 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   210 0000205C CD2F                <1>     int 2fh
   211 0000205E 0F827E5C0000        <1>     jc extErrExit
   212 00002064 E96B5C0000          <1>     jmp extGoodExit
   213                              <1> .notNet:
   214 00002069 488D3D(48050000)    <1>     lea rdi, buffer1
   215 00002070 E80C590000          <1>     call strlen ;Get the length of the full qualified name in ecx
   216 00002075 66890D(77070000)    <1>     mov word [pathLen], cx
   217 0000207C 6681F90400          <1>     cmp cx, 4   ;Only way to get this after truename is if root dir (i.e. join)
   218 00002081 7614                <1>     jbe .cantDelCD
   219                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   220 00002083 31C0                <1>     xor eax, eax
   221                              <1> .scanLoop:
   222 00002085 E869580000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   223 0000208A 721A                <1>     jc .notCurrent
   224 0000208C E828590000          <1>     call compareFileNames
   225 00002091 7404                <1>     jz .cantDelCD
   226 00002093 FFC0                <1>     inc eax
   227 00002095 EBEE                <1>     jmp short .scanLoop
   228                              <1> .cantDelCD:
   229 00002097 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   230 0000209C E8005C0000          <1>     call dosCrit1Exit
   231 000020A1 E93C5C0000          <1>     jmp extErrExit
   232                              <1> .notCurrent:
   233                              <1>     ;mov byte [delChar], 0E5h    ;Setup delchar
   234 000020A6 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
   235                              <1>     ;Now let use check that our directory is not the CDS currentdir
   236 000020AD 488B35(3B070000)    <1>     mov rsi, qword [workingCDS]
   237 000020B4 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   238                              <1>     ;If the given path length is one more than the backslash offset
   239                              <1>     ; due to the terminating null, then the user is trying to delete the 
   240                              <1>     ; root dir. Fail this.
   241 000020B7 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   242 000020BB FFC1                <1>     inc ecx
   243 000020BD 663B0D(77070000)    <1>     cmp cx, word [pathLen]
   244 000020C4 0F841E010000        <1>     je .accessDenied
   245 000020CA E874030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   246                              <1>     ;for the entry in the sector we are hoping to delete
   247 000020CF 0FB705(98060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   248 000020D6 C1E010              <1>     shl eax, 10h
   249 000020D9 0FB71D(9E060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   250 000020E0 09D8                <1>     or eax, ebx
   251 000020E2 8905(A4070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   252 000020E8 E821EAFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   253 000020ED E897E9FFFF          <1>     call getBufForDir
   254 000020F2 0F82F5000000        <1>     jc .exitBad
   255                              <1>     ;rbx points to buffer
   256 000020F8 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 000020FC 48B82E202020202020- <1>     mov rax, ".       "
   257 00002105 20                  <1>
   258 00002106 483906              <1>     cmp qword [rsi], rax
   259 00002109 0F85D9000000        <1>     jne .accessDenied
   260 0000210F B42E                <1>     mov ah, "." ;Screw the partial stall
   261 00002111 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   262 00002115 0F85CD000000        <1>     jne .accessDenied
   263 0000211B 4881C620000000      <1>     add rsi, fatDirEntry_size
   264 00002122 488D3D(84060000)    <1>     lea rdi, curDirCopy
   265 00002129 B904000000          <1>     mov ecx, 4
   266 0000212E F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   267                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   268                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   269 00002131 488D3D(03070000)    <1>     lea rdi, fcbName
   270 00002138 B03F                <1>     mov al, "?"
   271 0000213A B90B000000          <1>     mov ecx, 11
   272 0000213F F3AA                <1>     rep stosb   ;Store the pattern to search for
   273 00002141 30C0                <1>     xor al, al  ;Store a terminating zero
   274 00002143 AA                  <1>     stosb
   275 00002144 8B05(A4070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   276 0000214A 50                  <1>     push rax    ;Save on stack temporarily
   277 0000214B 8905(A8070000)      <1>     mov dword [dirClustA], eax
   278 00002151 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   279 00002153 668905(AC070000)    <1>     mov word [dirSect], ax
   280 0000215A C705(AE070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   280 00002162 0000                <1>
   281 00002164 C605(26070000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   282 0000216B 58                  <1>     pop rax
   283 0000216C E89DE9FFFF          <1>     call getStartSectorOfCluster
   284 00002171 E813E9FFFF          <1>     call getBufForDir   
   285 00002176 7275                <1>     jc .exitBad
   286 00002178 E8C5F1FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   287 0000217D 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   288 00002184 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   289 0000218A C605(93040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   290 00002191 E8D3F0FFFF          <1>     call searchDir.rmdirEP
   291 00002196 7350                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   292                              <1>     ;Else, this is a empty dir, we can remove it
   293                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   294 00002198 488B05(6F070000)    <1>     mov rax, qword [tempSect]
   295 0000219F E8E5E8FFFF          <1>     call getBufForDir
   296 000021A4 7247                <1>     jc .exitBad
   297 000021A6 E897F1FFFF          <1>     call prepSectorSearch
   298 000021AB 0FB705(77070000)    <1>     movzx eax, word [entry]
   299 000021B2 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   300 000021B6 4801C6              <1>     add rsi, rax    
   301 000021B9 C606E5              <1>     mov byte [rsi], 0E5h  ;Store delchar now to remove the entry
   302 000021BC 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   303 000021C0 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   304 000021C4 E859E7FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   305 000021C9 C1E210              <1>     shl edx, 10h
   306 000021CC 09D0                <1>     or eax, edx
   307                              <1> ;Now remove the FAT chain
   308 000021CE E893EBFFFF          <1>     call unlinkFAT
   309 000021D3 7218                <1>     jc .exitBad
   310 000021D5 E8D6E5FFFF          <1>     call flushAllBuffersForDPB
   311 000021DA 7211                <1>     jc .exitBad
   312 000021DC E8C05A0000          <1>     call dosCrit1Exit
   313 000021E1 31C0                <1>     xor eax, eax
   314 000021E3 E9EC5A0000          <1>     jmp extGoodExit
   315                              <1> .accessDenied:
   316 000021E8 B805000000          <1>     mov eax, errAccDen
   317                              <1> .exitBad:
   318 000021ED F9                  <1>     stc
   319 000021EE E8AE5A0000          <1>     call dosCrit1Exit
   320 000021F3 E9EA5A0000          <1>     jmp extErrExit
   321                              <1> 
   322                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   323                              <1> ;Input: rdx = Pointer to ASCIIZ string
   324 000021F8 4889D7              <1>     mov rdi, rdx
   325 000021FB E881570000          <1>     call strlen
   326 00002200 81F940000000        <1>     cmp ecx, MAX_FSPEC
   327 00002206 7618                <1>     jbe .okLength
   328                              <1> .badPath:
   329 00002208 B003                <1>     mov al, errPnf
   330 0000220A E9D35A0000          <1>     jmp extErrExit
   331                              <1> .badPathCrit:
   332 0000220F E88D5A0000          <1>     call dosCrit1Exit
   333 00002214 EBF2                <1>     jmp short .badPath
   334                              <1> .badCrit:
   335 00002216 E8865A0000          <1>     call dosCrit1Exit
   336 0000221B E9C25A0000          <1>     jmp extErrExit
   337                              <1> .okLength:
   338 00002220 4889D6              <1>     mov rsi, rdx
   339 00002223 E8BD570000          <1>     call checkPathspecOK
   340 00002228 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   341 0000222A 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   342                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   343                              <1> .notBad:
   344 0000222C E88E580000          <1>     call checkPathNet   ;Never allow network paths
   345 00002231 74D5                <1>     jz .badPath ;Or Net paths
   346                              <1>     ;Path is ok, now proceed
   347 00002233 E85F5A0000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   348 00002238 C605(26070000)10    <1>     mov byte [searchAttr], dirDirectory
   349 0000223F 488D3D(48050000)    <1>     lea rdi, buffer1    ;Build the full path here
   350 00002246 E8F9F2FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   351 0000224B 72C9                <1>     jc .badCrit   ;Exit with error code in eax
   352                              <1>     ;Now we check to make sure the path provided is not past the maximum
   353                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   354                              <1>     ; moved the path past the end.
   355 0000224D 488D3D(48050000)    <1>     lea rdi, buffer1
   356 00002254 E828570000          <1>     call strlen ;Get the length of this path
   357 00002259 81F943000000        <1>     cmp ecx, MAX_PATH
   358 0000225F 77AE                <1>     ja .badPathCrit
   359                              <1>     ;The path must've been ok, so now copy the path into the CDS
   360                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   361                              <1>     ;Copy the workingCDS to the tmpCDS
   362 00002261 488B35(3B070000)    <1>     mov rsi, qword [workingCDS]
   363 00002268 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   364 0000226E 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   365 00002274 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   366 0000227A 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   367                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   368 00002280 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   369 00002283 E8E4000000          <1>     call .getFatCluster
   370 00002288 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   371                              <1>     ;ecx has the length of the path in the buffer
   372 0000228B 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   373 0000228D 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   374 00002292 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   375 00002295 E8E7560000          <1>     call strlen
   376 0000229A 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   377 0000229C 3D43000000          <1>     cmp eax, MAX_PATH
   378 000022A1 0F8768FFFFFF        <1>     ja .badPathCrit
   379 000022A7 51                  <1>     push rcx
   380 000022A8 488D3D(A4060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   381 000022AF B95F000000          <1>     mov ecx, cds_size
   382 000022B4 F3A4                <1>     rep movsb   
   383 000022B6 59                  <1>     pop rcx
   384 000022B7 FFC9                <1>     dec ecx ;Remove the trailing null from the count
   385 000022B9 488D3D(A4060000)    <1>     lea rdi, tmpCDS
   386 000022C0 57                  <1>     push rdi
   387 000022C1 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   388 000022C4 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   389 000022C8 F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   390 000022CA 5F                  <1>     pop rdi
   391 000022CB 4889FE              <1>     mov rsi, rdi
   392 000022CE 31C0                <1>     xor eax, eax
   393 000022D0 31C9                <1>     xor ecx, ecx
   394 000022D2 FFC9                <1>     dec ecx
   395 000022D4 F2AE                <1>     repne scasb   ;Search for the terminating null
   396 000022D6 4881EF02000000      <1>     sub rdi, 2
   397 000022DD 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   398 000022DF E841560000          <1>     call swapPathSeparator
   399 000022E4 7503                <1>     jnz .notSlash
   400 000022E6 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   401                              <1> .notSlash:
   402 000022E9 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   403 000022EC 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   404 000022EE E800560000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   405 000022F3 488D3D(A4060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   406 000022FA 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   407 000022FD C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   408                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   409                              <1>     ;Backslash offset must always be 2 on a join host
   410 00002304 B943000000          <1>     mov ecx, MAX_PATH
   411 00002309 F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   412 0000230B EB41                <1>     jmp short .exitGood
   413                              <1> .notJoin:
   414                              <1> ;rsi -> workingCDS
   415                              <1> ;Lets first copy the working CDS into tmpCDS
   416 0000230D 488D3D(A4060000)    <1>     lea rdi, tmpCDS
   417 00002314 B95F000000          <1>     mov ecx, cds_size
   418 00002319 F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   419 0000231B E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   420 00002320 8905(F1060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   421 00002326 488D3D(A4060000)    <1>     lea rdi, tmpCDS
   422 0000232D 488D35(48050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   423 00002334 E857560000          <1>     call strcpy
   424 00002339 488D35(A4060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   425 00002340 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
   426 00002347 B95F000000          <1>     mov ecx, cds_size
   427 0000234C F3A4                <1>     rep movsb
   428                              <1> .exitGood:
   429 0000234E E84E590000          <1>     call dosCrit1Exit
   430 00002353 31C0                <1>     xor eax, eax
   431 00002355 E97A590000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   432                              <1> .net:
   433                              <1> ;SDA Vars are setup for this request
   434 0000235A B805110000          <1>     mov eax, 1105h
   435 0000235F CD2F                <1>     int 2fh
   436 00002361 0F827B590000        <1>     jc extErrExit
   437 00002367 E968590000          <1>     jmp extGoodExit
   438                              <1> .getFatCluster:
   439 0000236C 0FB715(9E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   440 00002373 0FB705(98060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   441 0000237A C1E010              <1>     shl eax, 10h
   442 0000237D 09D0                <1>     or eax, edx ;Add low bits to eax
   443                              <1>     return
    13                              <2> %%_ret:
    14 0000237F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> getCurrentDIR:     ;ah = 47h
   446                              <1> ;Returns the path for a drive with no X:\.
   447                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   448                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   449 00002380 88D0                <1>     mov al, dl  ;Move drive number into al
   450 00002382 E810590000          <1>     call dosCrit1Enter
   451 00002387 E89C540000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   452 0000238C 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   453                              <1> .badDrvExit:
   454 0000238E E80E590000          <1>     call dosCrit1Exit
   455 00002393 B80F000000          <1>     mov eax, errBadDrv
   456 00002398 E945590000          <1>     jmp extErrExit
   457                              <1> .okDrive:
   458                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   459 0000239D 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   460 0000239E 488B35(3B070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   461 000023A5 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   462 000023A6 C605(26070000)10    <1>     mov byte [searchAttr], dirDirectory
   463 000023AD 488D3D(48050000)    <1>     lea rdi, buffer1
   464 000023B4 E88BF1FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   465 000023B9 5E                  <1>     pop rsi ;Get back the original workingCDS
   466 000023BA 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   467 000023BB 72D1                <1>     jc .badDrvExit
   468                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   469                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   470                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   471 000023BD 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   472 000023C1 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   473 000023C4 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   474 000023C7 7503                <1>     jne .dontSkipChar
   475 000023C9 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   476                              <1> .dontSkipChar:
   477 000023CC AC                  <1>     lodsb   ;Get char
   478 000023CD 84C0                <1>     test al, al
   479 000023CF 7406                <1>     jz .notSpecialChar
   480 000023D1 3C05                <1>     cmp al, 05h     ;Special char case?
   481 000023D3 7502                <1>     jne .notSpecialChar
   482 000023D5 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   483                              <1> .notSpecialChar:
   484 000023D7 AA                  <1>     stosb
   485 000023D8 84C0                <1>     test al, al ;Did we store a terminator char?
   486 000023DA 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   487 000023DC E8C0580000          <1>     call dosCrit1Exit
   488 000023E1 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   489 000023E6 E9E9580000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   490                              <1> 
   491                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   492 000023EB 50                  <1>     push rax
   493 000023EC B800600000          <1>     mov eax, 6000h
   494 000023F1 CD21                <1>     int 21h
   495 000023F3 58                  <1>     pop rax
   496                              <1>     return
    13                              <2> %%_ret:
    14 000023F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1>     
   498                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   499                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   500 000023F5 E8EB550000          <1>     call checkPathspecOK    ;This preserves rsi
   501 000023FA 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   502 000023FC 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   503                              <1> .badPath:
   504 000023FE B805000000          <1>     mov eax, errAccDen
   505 00002403 E9DA580000          <1>     jmp extErrExit
   506                              <1> .pathspecOk:
   507 00002408 57                  <1>     push rdi    ;Save the destination
   508 00002409 488D3D(48050000)    <1>     lea rdi, buffer1    ;Build the full path here
   509 00002410 E8B3F1FFFF          <1>     call canonicaliseFileName
   510 00002415 5F                  <1>     pop rdi
   511 00002416 0F82C6580000        <1>     jc extErrExit
   512 0000241C 488D35(48050000)    <1>     lea rsi, buffer1
   513 00002423 E868550000          <1>     call strcpy
   514 00002428 31C0                <1>     xor eax, eax
   515 0000242A E9A5580000          <1>     jmp extGoodExit
   516                              <1> 
   517                              <1> ;-----------------------------------
   518                              <1> ;    General Directory Routines    :
   519                              <1> ;-----------------------------------
   520                              <1> 
   521                              <1> 
   522                              <1> findFreeDiskDirEntry:
   523                              <1> ;Find a space in the directory we are searching for a directory entry
   524                              <1> ;Accept first entry starting with a 0E5h or 00h
   525                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   526                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   527                              <1> ; be called for CDS's that are NOT net CDS's).
   528                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   529                              <1> ;       Directory vars must be set up for the directory we are searching in
   530                              <1> ;Output: CF=CY => Error, eax has error code
   531                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   532 0000242F 8A05(31070000)      <1>     mov al, byte [delChar]
   533 00002435 8805(03070000)      <1>     mov byte [fcbName], al
   534 0000243B E8D6EDFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   535                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002440 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002442 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   536                              <1> ;Free entry found, dir variables are set for the free entry. 
   537                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   538                              <1> getDiskDirectoryEntry:
   539                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   540                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   541                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   542                              <1> ;        qword [tempSect] = Disk sector number of directory
   543                              <1> ;        word [entry] = 32 byte offset into sector
   544                              <1> ;        CF=CY => Error, exit 
   545 00002443 53                  <1>     push rbx
   546 00002444 8B05(A8070000)      <1>     mov eax, dword [dirClustA]  
   547                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   548                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   549 0000244A 0FB71D(AC070000)    <1>     movzx ebx, word [dirSect]
   550 00002451 85C0                <1>     test eax, eax
   551 00002453 7407                <1>     jz .skipCluster
   552 00002455 E8B4E6FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   553 0000245A EB1B                <1>     jmp short .skipOldFat
   554                              <1> .skipCluster:
   555 0000245C 55                  <1>     push rbp
   556 0000245D 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
   557 00002464 0FB705(AC070000)    <1>     movzx eax, word [dirSect]
   558 0000246B 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   559                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   560 0000246E 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   561 00002472 5D                  <1>     pop rbp
   562 00002473 7202                <1>     jb .skipOldFat
   563 00002475 F9                  <1>     stc
   564                              <1>     return
    13                              <2> %%_ret:
    14 00002476 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> .skipOldFat:
   566 00002477 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   567 0000247A 488905(6F070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   568 00002481 E803E6FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   569 00002486 5B                  <1>     pop rbx
   570                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002487 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002489 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571 0000248A 53                  <1>     push rbx
   572 0000248B 488B1D(67070000)    <1>     mov rbx, qword [currBuff]
   573 00002492 E8ABEEFFFF          <1>     call prepSectorSearch
   574                              <1>     ;Above function gets data buffer ptr in rsi
   575 00002497 31D2                <1>     xor edx, edx
   576 00002499 8B05(AE070000)      <1>     mov eax, dword [dirEntry]   ;Get offset into dir file cluster
   577 0000249F C1E005              <1>     shl eax, 5  ;Multiply by 32 to get byte offset
   578                              <1>     ;Make the amount we add to rsi modulo size of bytes per sector
   579 000024A2 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   580 000024A6 F7F3                <1>     div ebx ;Divide eax by ebx. Get remainer in dx
   581 000024A8 4801D6              <1>     add rsi, rdx    ;rsi now points to the entry
   582 000024AB 668915(77070000)    <1>     mov word [entry], dx
   583 000024B2 5B                  <1>     pop rbx
   584                              <1>     return
    13                              <2> %%_ret:
    14 000024B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> updateSFTDateTimeFields:    
   587                              <1> ;Updates the SFT time/date entries for disk files
   588                              <1> ;Called with:
   589                              <1> ;   [workingDPB] = DPB pointer for the disk device
   590                              <1> ;   [currentSFT] = Current SFT pointer
   591                              <1> ;   bx = attribute byte from the SFT
   592 000024B4 66F7C3C000          <1>     test bx, devDiskNoFlush | devCharDev
   593                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000024B9 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000024BB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   594 000024BC 66F7C30040          <1>     test bx, devDiskNoDTonClose
   595                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000024C1 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000024C3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   596 000024C4 50                  <1>     push rax
   597 000024C5 53                  <1>     push rbx
   598 000024C6 E87F0B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   599                              <1>     ;Build date and time words
   600 000024CB E8650C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   601                              <1>     ;Update SFT fields
   602 000024D0 66894713            <1>     mov word [rdi + sft.wTime], ax
   603 000024D4 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   604 000024D7 66894715            <1>     mov word [rdi + sft.wDate], ax
   605 000024DB 31C0                <1>     xor eax, eax
   606 000024DD FF15(2F010000)      <1>     call qword [updateDirShare]
   607 000024E3 5B                  <1>     pop rbx
   608 000024E4 58                  <1>     pop rax
   609                              <1>     return
    13                              <2> %%_ret:
    14 000024E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   610                              <1> 
   611                              <1> getAndUpdateDirSectorForFile:
   612                              <1> ;Must be called with currentSFT pointing to the file we operate on!
   613                              <1> ;Input: rdi -> SFT
   614                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   615                              <1> ;               rdi -> SFT
   616 000024E6 E884300000          <1>     call setDPBfromSFT
   617                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000024EB 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000024ED C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   618 000024EE 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   619 000024F2 C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk
   620 000024F9 C605(92040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   621 00002500 E884E5FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   622                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002505 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002507 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   623 00002508 E8302E0000          <1>     call getCurrentSFT ;Reobtain the SFT ptr in rdi
   624 0000250D 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   625 00002511 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   626 00002515 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   627 00002518 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   628                              <1>     return
    13                              <2> %%_ret:
    14 0000251B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> growDirectory:
   631                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   632                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   633                              <1> ;                 eax = New Cluster number
   634                              <1> ;               TWO NON CF ERROR CASES.
   635                              <1> ;               If eax = -1 => disk full!
   636                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   637                              <1> ;        CF=CY => Something went wrong. Rip. 
   638 0000251C 53                  <1>     push rbx
   639 0000251D 51                  <1>     push rcx
   640 0000251E 57                  <1>     push rdi
   641 0000251F 8B05(A4070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   642 00002525 85C0                <1>     test eax, eax
   643 00002527 742B                <1>     jz .exit
   644 00002529 E80DE6FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   645 0000252E 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   646 00002530 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   647 00002535 E880E6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   648 0000253A 7218                <1>     jc .exit
   649 0000253C 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   650 00002541 7411                <1>     je .exit
   651 00002543 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   652 00002545 E856E8FFFF          <1>     call readFAT
   653 0000254A 7208                <1>     jc .exit
   654 0000254C E807000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   655 00002551 7201                <1>     jc .exit
   656 00002553 F8                  <1>     clc
   657                              <1> .exit:
   658 00002554 5F                  <1>     pop rdi
   659 00002555 59                  <1>     pop rcx
   660 00002556 5B                  <1>     pop rbx
   661                              <1>     return   
    13                              <2> %%_ret:
    14 00002557 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   662                              <1> sanitiseCluster:
   663                              <1> ;Sanitises the cluster in eax to all zeros
   664                              <1> ;Does not move file pointers
   665                              <1> ;Currently, is only called to sanitise subdirectory clusters
   666                              <1> ;Input: eax = Cluster number
   667                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   668                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   669                              <1> ;        If CF=CY => Error, exit
   670 00002558 50                  <1>     push rax
   671 00002559 53                  <1>     push rbx
   672 0000255A 51                  <1>     push rcx
   673 0000255B 52                  <1>     push rdx
   674 0000255C 56                  <1>     push rsi
   675 0000255D 55                  <1>     push rbp
   676 0000255E 488B2D(33070000)    <1>     mov rbp, qword [workingDPB]
   677 00002565 E8A4E5FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   678 0000256A 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   679 0000256E FFC2                <1>     inc edx ;Make it a count of sectors
   680                              <1> .getSectorInCluster:
   681 00002570 E814E5FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   682 00002575 721E                <1>     jc .exitBad
   683 00002577 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   684 0000257B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   685 0000257F 31C0                <1>     xor eax, eax
   686 00002581 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   687 00002583 E89AE3FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   688                              <1> 
   689 00002588 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   690 0000258A 740A                <1>     jz .exit    ;Jump if we done
   691 0000258C 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   692 00002590 48FFC0              <1>     inc rax ;Goto next sector in cluster
   693 00002593 EBDB                <1>     jmp short .getSectorInCluster
   694                              <1> .exitBad:
   695 00002595 F9                  <1>     stc
   696                              <1> .exit:
   697 00002596 5D                  <1>     pop rbp
   698 00002597 5E                  <1>     pop rsi
   699 00002598 5A                  <1>     pop rdx
   700 00002599 59                  <1>     pop rcx
   701 0000259A 5B                  <1>     pop rbx
   702 0000259B 58                  <1>     pop rax
   703                              <1>     return
    13                              <2> %%_ret:
    14 0000259C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqPkt and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 0000259D 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 0000259E 488D1D(46050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 000025A5 48891D(CF040000)    <1>     mov qword [secdReqPkt + ioReqPkt.bufptr], rbx
    59 000025AC 5B                  <1>     pop rbx
    60 000025AD C705(D7040000)0100- <1>     mov dword [secdReqPkt + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 000025B5 0000                <1>
    61 000025B7 668905(46050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 000025BE 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedir
    63 000025C4 0F85A1000000        <1>     jnz .notChar
    64 000025CA 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 000025D0 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 000025D6 E8A5560000          <1>     call dosPushRegs    ;Save context here
    68 000025DB 488D1D43DAFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 000025E2 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 000025E5 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 000025E8 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 000025EB 890D(C1040000)      <1>     mov dword [secdReqPkt], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 000025F1 31C9                <1>     xor ecx, ecx
    75 000025F3 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 000025F6 7506                <1>     jne .skipBsySet
    77 000025F8 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 000025FE 66870D(C4040000)    <1>     xchg cx, word [secdReqPkt + drvReqPkt.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00002605 488D1D(C1040000)    <1>     lea rbx, secdReqPkt
    82 0000260C E8444D0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00002611 668B3D(C4040000)    <1>     mov di, word [secdReqPkt + drvReqPkt.status]    ;Get status
    84 00002618 F7C700800000        <1>     test edi, drvErrStatus
    85 0000261E 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00002620 803D(C3040000)05    <1>     cmp byte [secdReqPkt + drvReqPkt.cmdcde], drvNONDESTREAD
    88 00002627 750C                <1>     jne .notNDRead
    89 00002629 8A05(CE040000)      <1>     mov al, byte [secdReqPkt + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 0000262F 8805(46050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00002635 8A25(C5040000)      <1>     mov ah, byte [secdReqPkt + drvReqPkt.status + 1]  ;Get hibyte of status word
    93 0000263B F6D4                <1>     not ah
    94 0000263D 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00002640 E824560000          <1>     call dosPopRegs ;Get back the context
    96 00002645 668B05(46050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 0000264C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 0000264D 88CC                <1>     mov ah, cl
   101 0000264F E8D9460000          <1>     call charDevErr
   102 00002654 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 00002656 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 00002658 E80C560000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 0000265D E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 00002662 8025(C5040000)FD    <1>     and byte [secdReqPkt + drvReqPkt.status + 1], ~(drvBsyStatus >> 8)
   110 00002669 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 0000266B 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 0000266D 7409                <1>     jz .makeDiskNetReadReq
   115 0000266F FECC                <1>     dec ah
   116 00002671 7422                <1>     jz .makeDiskNetNonDestReq
   117 00002673 FECC                <1>     dec ah
   118 00002675 742A                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00002677 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00002678 E834000000          <1>     call .prepDiskNetIO
   123 0000267D E809250000          <1>     call readBytes
   124 00002682 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00002684 E858000000          <1>     call .cleanDiskNetIO
   126 00002689 8A05(46050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000268F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002691 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   128 00002692 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00002694 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00002695 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00002698 E8DBFFFFFF          <1>     call .makeDiskNetReadReq
   134 0000269D 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 000026A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 000026A1 E80B000000          <1>     call .prepDiskNetIO
   138 000026A6 E837280000          <1>     call writeBytes
   139 000026AB E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 000026B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 000026B1 8F05(15050000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 000026B7 E8C4550000          <1>     call dosPushRegs
   146 000026BC FF35(3F040000)      <1>     push qword [currentDTA]
   147 000026C2 488D0D(46050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 000026C9 48890D(3F040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 000026D0 488935(5B070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 000026D7 31C9                <1>     xor ecx, ecx
   151 000026D9 FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 000026DB FF25(15050000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 000026E1 8F05(15050000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 000026E7 8F05(3F040000)      <1>     pop qword [currentDTA]
   157 000026ED E877550000          <1>     call dosPopRegs
   158 000026F2 EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 000026F4 E887550000          <1>     call dosPushRegs
   164 000026F9 B40D                <1>     mov ah, drvOPEN
   165 000026FB EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 000026FD E87E550000          <1>     call dosPushRegs
   169 00002702 B40E                <1>     mov ah, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 00002704 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;We a network device?
   173 0000270A 7569                <1>     jnz .exit    ;Exit if so
   174 0000270C F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 00002710 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 00002714 7512                <1>     jnz .charDev
   177                              <1> ;Here a disk drive, rdi is a DPB ptr
   178 00002716 F605(FC030000)FF    <1>     test byte [shareFlag], -1    ;Is SHARE loaded?
   179 0000271D 7456                <1>     jz .exit   ;Exit if share flag is zero (Share not loaded)
   180 0000271F 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 00002722 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 00002724 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 00002728 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvOpClRem   ;Can we open/close?
   185 0000272E 7445                <1>     jz .exit    ;No, exit!
   186 00002730 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 00002733 488D1D(EB040000)    <1>     lea rbx, primReqPkt ;Get the primary request header space in rbx
   188 0000273A 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 0000273D 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 00002740 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 00002743 50                  <1>     push rax    ;Save the dword
   193 00002744 E8104C0000          <1>     call goDriver
   194 00002749 0FB73D(EE040000)    <1>     movzx edi, word [primReqPkt + drvReqPkt.status] ;Get the status
   195 00002750 F7C700800000        <1>     test edi, drvErrStatus
   196 00002756 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 00002758 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 0000275E 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 00002760 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 00002762 EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 00002764 88C8                <1>     mov al, cl  ;Move drive number into al
   205 00002766 B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 00002768 E8C0450000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 0000276D 3C01                <1>     cmp al, critRetry   ;al returns user response
   210 0000276F 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 00002771 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 00002772 EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 00002774 58                  <1>     pop rax    
   215                              <1> .exit:
   216 00002775 E8EF540000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 0000277A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 0000277B E882010000          <1>     call charIn_B
    17 00002780 50                  <1>     push rax
    18 00002781 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00002786 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 00002787 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 00002788 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 0000278A 3C20                <1>     cmp al, asciiCaret
    27 0000278C 0F8287000000        <1>     jb .control
    28 00002792 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00002794 7406                <1>     je .skipCurs
    30 00002796 FE05(F4020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 0000279C FE05(FA030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 000027A2 8025(FA030000)03    <1>     and byte [vConErr], 3
    34 000027A9 56                  <1>     push rsi
    35 000027AA 7507                <1>     jnz .skipErrorCheck
    36 000027AC 50                  <1>     push rax
    37 000027AD E89F020000          <1>     call vConCtrlCheck
    38 000027B2 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 000027B3 E826020000          <1>     call outputOnStdout
    41 000027B8 5E                  <1>     pop rsi
    42 000027B9 F605(F7030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000027C0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000027C2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    44 000027C3 53                  <1>     push rbx
    45 000027C4 56                  <1>     push rsi
    46 000027C5 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 000027CA E84D030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 000027CF 0F82D0000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 000027D5 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 000027D9 F7C300800000        <1>     test ebx, devRedir
    52 000027DF 0F85C0000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 000027E5 F7C380000000        <1>     test ebx, devCharDev
    54 000027EB 0F84B4000000        <1>     jz auxOutCmn.exit
    55 000027F1 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 000027F6 E821030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 000027FB 0F82A4000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00002801 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], devCharNetSpool  ;Network printer?
    59 00002807 0F8493000000        <1>     jz auxOutCmn.diskFileEP
    60 0000280D C605(F7030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00002814 E98C000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 00002819 3C0D                <1>     cmp al, CR
    64 0000281B 742A                <1>     je .newline
    65 0000281D 3C08                <1>     cmp al, BSP
    66 0000281F 7432                <1>     je .back
    67 00002821 3C09                <1>     cmp al, TAB
    68 00002823 0F8573FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70 00002829 8A05(F4020000)      <1>     mov al, byte [vConCursPos]
    71 0000282F 0CF8                <1>     or al, ~7
    72 00002831 F6D8                <1>     neg al
    73                              <1> .outputATab:   ;Called with al = Number of chars into the tabstop we are!
    74 00002833 51                  <1>     push rcx
    75 00002834 0FB6C8              <1>     movzx ecx, al
    76 00002837 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    77                              <1> .tabloop:
    78 0000283A B020                <1>     mov al, SPC
    79 0000283C E849FFFFFF          <1>     call charOut_B.in   ;Output the char
    80 00002841 FEC9                <1>     dec cl
    81 00002843 75F5                <1>     jnz .tabloop
    82                              <1> .stopTab:
    83 00002845 59                  <1>     pop rcx
    84                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 00002846 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> .newline:
    86 00002847 C605(F4020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    87 0000284E E949FFFFFF          <1>     jmp .skipCurs   ;And echo 
    88                              <1> .back:
    89 00002853 FE0D(F4020000)      <1>     dec byte [vConCursPos]
    90 00002859 E93EFFFFFF          <1>     jmp .skipCurs   ;And echo
    91                              <1> 
    92                              <1> auxIn_B:        ;ah = 03h
    93 0000285E E8EE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    94 00002863 BB03000000          <1>     mov ebx, 3
    95 00002868 E8AF020000          <1>     call getCharDevSFT
    96                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000286D 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000286F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97                              <1> .auxloop:
    98 00002870 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    99 00002872 E826FDFFFF          <1>     call mainCharIO
   100 00002877 7408                <1>     jz .signalLoop
   101 00002879 30E4                <1>     xor ah, ah  ;Read the char in
   102 0000287B E81DFDFFFF          <1>     call mainCharIO
   103                              <1>     return
    13                              <2> %%_ret:
    14 00002880 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> .signalLoop:
   105 00002881 E8A8010000          <1>     call callInt28h
   106 00002886 EBE8                <1>     jmp short .auxloop
   107                              <1> 
   108                              <1> auxOut_B:       ;ah = 04h
   109 00002888 53                  <1>     push rbx
   110 00002889 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   111 0000288E EB06                <1>     jmp short auxOutCmn
   112                              <1> prnOut_B:       ;ah = 05h
   113 00002890 53                  <1>     push rbx
   114 00002891 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   115                              <1> auxOutCmn: ;Auxilliary output device common 
   116 00002896 88D0                <1>     mov al, dl  ;Get the char into al
   117 00002898 50                  <1>     push rax
   118 00002899 E8B3010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   119 0000289E 58                  <1>     pop rax
   120 0000289F 56                  <1>     push rsi
   121                              <1> .diskFileEP:
   122 000028A0 E866010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   123                              <1> .netFileEP:
   124                              <1> .exit:
   125 000028A5 5E                  <1>     pop rsi
   126 000028A6 5B                  <1>     pop rbx
   127                              <1>     return
    13                              <2> %%_ret:
    14 000028A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> directConIO:    ;ah = 06h
   130 000028A8 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   131 000028AA 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   132 000028AC 0F852C010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   133                              <1> ;Here is the read char direct function
   134 000028B2 31DB                <1>     xor ebx, ebx    
   135 000028B4 E863020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   136                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028B9 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028BB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   137 000028BC 488B2D(A5040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   138 000028C3 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   139 000028C5 E8D3FCFFFF          <1>     call mainCharIO
   140 000028CA E85F010000          <1>     call callInt28h ;This preserves flags so call here!
   141 000028CF 7507                <1>     jnz .readChar
   142 000028D1 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   143 000028D5 30C0                <1>     xor al, al  ;Set caller return code to 0
   144                              <1>     return
    13                              <2> %%_ret:
    14 000028D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> .readChar:
   146 000028D8 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   147                              <1>     ;Fallthrough here to get the char at STDIN
   148                              <1> charIn:         ;ah = 07h
   149                              <1> ;Return char in al from STDIN without waiting
   150 000028DC 31DB                <1>     xor ebx, ebx
   151 000028DE E839020000          <1>     call getCharDevSFT
   152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028E3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028E5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   153 000028E6 B401                <1>     mov ah, 01  ;ND read for char
   154 000028E8 E8B0FCFFFF          <1>     call mainCharIO
   155 000028ED 750B                <1>     jnz .getChar
   156 000028EF B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   157 000028F1 CD2A                <1>     int 2Ah
   158 000028F3 E836010000          <1>     call callInt28h
   159 000028F8 EBE2                <1>     jmp short charIn    ;Loop again awaiting the char
   160                              <1> .getChar:
   161                              <1>     ;Get the char in al and exit
   162 000028FA 30E4                <1>     xor ah, ah
   163 000028FC E89CFCFFFF          <1>     call mainCharIO
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002901 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> charIn_B:       ;ah = 08h
   166                              <1> ;Return char in al from STDIN
   167 00002902 56                  <1>     push rsi
   168                              <1> .readAgain:
   169 00002903 E849010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   170                              <1>     ;Also sets rsi to point to the device SFT for 
   171 00002908 7543                <1>     jnz .pullChar
   172 0000290A 803D(201A0000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   173 00002911 7507                <1>     jne .skiplookahead
   174 00002913 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   175 00002915 E883FCFFFF          <1>     call mainCharIO
   176                              <1> .skiplookahead:
   177 0000291A B484                <1>     mov ah, 84h
   178 0000291C CD2A                <1>     int 2ah ;Multitasking keyboard loop
   179 0000291E 66813D(551A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   179 00002926 FF                  <1>
   180 00002927 751B                <1>     jne .skipClockRead
   181 00002929 E852530000          <1>     call dosPushRegs
   182 0000292E F8                  <1>     clc ;Clear CF, write primary header to backup
   183 0000292F E884000000          <1>     call swapPrimaryHeader
   184 00002934 E811070000          <1>     call readDateTimeRecord
   185 00002939 F9                  <1>     stc ;Set CF, write backup to primary header
   186 0000293A E879000000          <1>     call swapPrimaryHeader
   187 0000293F E825530000          <1>     call dosPopRegs
   188                              <1> .skipClockRead:
   189 00002944 66FF05(551A0000)    <1>     inc word [keybTicks]
   190 0000294B EBB6                <1>     jmp short .readAgain
   191                              <1> .pullChar:
   192 0000294D 30E4                <1>     xor ah, ah
   193 0000294F E849FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   194 00002954 5E                  <1>     pop rsi
   195 00002955 3C00                <1>     cmp al, NUL ;Is this the null char?
   196 00002957 7507                <1>     jne .exit
   197                              <1>     ;We are mid extended ascii, prevent printer toggling
   198 00002959 C605(541A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   199                              <1> .exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 00002960 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> printString_B:      ;ah = 09h
   203 00002961 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   204                              <1> .ps0:
   205 00002964 AC                  <1>     lodsb   ;Get char in al and inc rsi
   206 00002965 3C24                <1>     cmp al, "$" ;End of string char?
   207                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002967 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002969 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   208 0000296A E81BFEFFFF          <1>     call charOut_B.in
   209 0000296F EBF3                <1>     jmp short .ps0
   210                              <1> 
   211                              <1> checkStdinStatus:  ;ah = 0Bh
   212                              <1> ;Returns the status of the driver controlling vCon
   213 00002971 E8DB000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   214 00002976 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   215                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002978 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000297A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   216 0000297B FEC8                <1>     dec al  ;Set al to -1 if char available
   217                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 0000297D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> clearbuffDoFunc:   ;ah = 0Ch
   219                              <1> ;Clears any buffers and issues a console read command (the command in al)
   220                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   221 0000297E 50                  <1>     push rax
   222 0000297F 52                  <1>     push rdx
   223 00002980 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   224 00002982 E895010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   225 00002987 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   226 00002989 B404                <1>     mov ah, 04h ;Flush input buffers
   227 0000298B E80DFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   228                              <1> .skipFlush:
   229 00002990 5A                  <1>     pop rdx
   230 00002991 58                  <1>     pop rax
   231 00002992 88C4                <1>     mov ah, al  ;Move function number into ah
   232 00002994 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   233 00002996 7507                <1>     jne .others
   234 00002998 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   235 0000299B 7412                <1>     jz .bad ;Yes, exit
   236 0000299D EB13                <1>     jmp short .callFunction ;Else, call function in ah
   237                              <1> .others:
   238 0000299F 3C01                <1>     cmp al, 01h
   239 000029A1 740F                <1>     je .callFunction
   240 000029A3 3C07                <1>     cmp al, 07h
   241 000029A5 740B                <1>     je .callFunction
   242 000029A7 3C08                <1>     cmp al, 08h
   243 000029A9 7407                <1>     je .callFunction
   244 000029AB 3C0A                <1>     cmp al, 0Ah
   245 000029AD 7403                <1>     je .callFunction
   246                              <1> .bad:
   247 000029AF 30C0                <1>     xor al, al
   248                              <1>     return
    13                              <2> %%_ret:
    14 000029B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> .callFunction:
   250 000029B2 FA                  <1>     cli ;Prepare to swap stack pointer
   251                              <1>     ;The below address avoids "properly" reentering DOS
   252                              <1>     ;We simply reuse the function dispatch aspect. 
   253                              <1>     ;this means we dont trash the caller's register frame 
   254 000029B3 E9CB510000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   255                              <1> ;------------------------
   256                              <1> ;  Primitive functions  :
   257                              <1> ;------------------------
   258                              <1> swapPrimaryHeader:
   259                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   260                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   261 000029B8 56                  <1>     push rsi
   262 000029B9 57                  <1>     push rdi
   263 000029BA 51                  <1>     push rcx
   264 000029BB 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   264 000029C4 00                  <1>
   265 000029C5 488D35(EB040000)    <1>     lea rsi, primReqPkt
   266 000029CC 488D3D(2A1A0000)    <1>     lea rdi, bkupReqHdr
   267 000029D3 7303                <1>     jnc .read
   268 000029D5 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   269                              <1> .read:
   270 000029D8 F3A4                <1>     rep movsb   ;Swap
   271 000029DA 59                  <1>     pop rcx
   272 000029DB 5F                  <1>     pop rdi
   273 000029DC 5E                  <1>     pop rsi
   274                              <1>     return
    13                              <2> %%_ret:
    14 000029DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 000029DE 53                  <1>     push rbx
   279 000029DF BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 000029E4 E833010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 000029E9 7217                <1>     jc .exit
   282 000029EB 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 000029F1 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 000029F3 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 000029F7 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   286 000029FD 7405                <1>     jz .notCharDevOrFast
   287 000029FF CD29                <1>     int 29h ;Fast output
   288                              <1> .exitOk:
   289 00002A01 F8                  <1>     clc
   290                              <1> .exit:
   291 00002A02 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 00002A03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 00002A04 E80A000000          <1>     call outputOnSFT
   295 00002A09 5B                  <1>     pop rbx
   296                              <1>     return
    13                              <2> %%_ret:
    14 00002A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 00002A0B E80C010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A10 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A12 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 28h if device busy
   306 00002A13 50                  <1>     push rax
   307 00002A14 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 00002A16 E882FBFFFF          <1>     call mainCharIO
   309 00002A1B 58                  <1>     pop rax
   310 00002A1C 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 00002A1E B402                <1>     mov ah, 02h ;Output char in al
   312 00002A20 E878FBFFFF          <1>     call mainCharIO
   313 00002A25 F8                  <1>     clc
   314                              <1>     return
    13                              <2> %%_ret:
    14 00002A26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 00002A27 E802000000          <1>     call callInt28h
   317 00002A2C EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt28h:
   320                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   321 00002A2E 9C                  <1>     pushfq
   322 00002A2F F605(BF040000)FF    <1>     test byte [int28Flag], -1
   323 00002A36 7417                <1>     jz .exit    ;If zero, not safe
   324 00002A38 F605(2F040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 00002A3F 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   327 00002A41 FF35(BF040000)      <1>     push qword [int28Flag] 
   328 00002A47 CD28                <1>     int 28h
   329 00002A49 8F05(BF040000)      <1>     pop qword [int28Flag]    ;Return original value
   330                              <1> .exit:
   331 00002A4F 9D                  <1>     popfq
   332                              <1>     return
    13                              <2> %%_ret:
    14 00002A50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 00002A51 E829010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 00002A56 53                  <1>     push rbx
   355 00002A57 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 00002A59 E8BE000000          <1>     call getCharDevSFT
   357 00002A5E 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A5F 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A61 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   359 00002A62 B401                <1>     mov ah, 01  ;Non destructively read CON
   360 00002A64 E834FBFFFF          <1>     call mainCharIO
   361 00002A69 74C3                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 00002A6B 3C13                <1>     cmp al, DC3 ;^S ?
   364 00002A6D 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 00002A6F 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 00002A71 E827FBFFFF          <1>     call mainCharIO
   367 00002A76 E963000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 00002A7B 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 00002A7D 7468                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 00002A7F 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 00002A81 7464                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    13                              <2> %%_ret:
    14 00002A83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 00002A84 F615(F7030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 00002A8A 53                  <1>     push rbx
   378 00002A8B BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 00002A90 E887000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 00002A95 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A96 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A98 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   382 00002A99 57                  <1>     push rdi
   383 00002A9A 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 00002A9D 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], devCharNetSpool  ;Check if net spooler
   385 00002AA3 741D                <1>     jz .notNet
   386 00002AA5 50                  <1>     push rax
   387 00002AA6 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 00002AAB CD2F                <1>     int 2Fh
   389 00002AAD 58                  <1>     pop rax
   390 00002AAE 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 00002AB0 C605(F7030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 00002AB7 50                  <1>     push rax
   394 00002AB8 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 00002ABD CD2F                <1>     int 2Fh
   396 00002ABF 58                  <1>     pop rax
   397 00002AC0 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 00002AC2 803D(F7030000)00    <1>     cmp byte [printEcho], 00
   402 00002AC9 7507                <1>     jnz .echoOn
   403 00002ACB E82DFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   404 00002AD0 EB05                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406 00002AD2 E81DFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   407                              <1> .printExit:
   408 00002AD7 5F                  <1>     pop rdi
   409                              <1>     return
    13                              <2> %%_ret:
    14 00002AD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   411 00002AD9 E850FFFFFF          <1>     call callInt28h
   412                              <1> .waitNextChar:   ;Here get next char
   413 00002ADE B401                <1>     mov ah, 01h ;ND read
   414 00002AE0 E8B8FAFFFF          <1>     call mainCharIO
   415 00002AE5 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00002AE7 53                  <1>     push rbx
   418 00002AE8 31DB                <1>     xor ebx, ebx
   419 00002AEA E82D000000          <1>     call getCharDevSFT
   420 00002AEF 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002AF0 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002AF2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   422 00002AF3 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 00002AF5 E8A3FAFFFF          <1>     call mainCharIO
   424 00002AFA 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00002AFC 7514                <1>     jnz .checkBreak2
   426 00002AFE 803D(541A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 00002B05 0F8479FFFFFF        <1>     jz .printToggle ;If 0, toggle!
   428 00002B0B C605(541A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 00002B12 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002B14 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002B16 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   432 00002B17 E9C6430000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 00002B1C F605(BE040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 00002B23 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 00002B25 57                  <1>     push rdi
   444 00002B26 E8C8290000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 00002B2B 4889FE              <1>     mov rsi, rdi
   446 00002B2E 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002B2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 00002B30 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 00002B36 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 00002B38 488B35(4B070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 00002B3F F8                  <1>     clc
   454                              <1>     return
    13                              <2> %%_ret:
    14 00002B40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 00002B41 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 00002B43 0F8341FCFFFF        <1>     jae charOut_B.in
   465 00002B49 3C09                <1>     cmp al, TAB
   466 00002B4B 0F8439FCFFFF        <1>     je charOut_B.in
   467 00002B51 3C15                <1>     cmp al, NAK
   468 00002B53 0F8431FCFFFF        <1>     je charOut_B.in
   469 00002B59 3C14                <1>     cmp al, DC4
   470 00002B5B 0F8429FCFFFF        <1>     je charOut_B.in
   471 00002B61 50                  <1>     push rax
   472 00002B62 B05E                <1>     mov al, "^" ;Get caret in place
   473 00002B64 E821FCFFFF          <1>     call charOut_B.in
   474 00002B69 58                  <1>     pop rax
   475 00002B6A 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 00002B6C E919FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 00002B71 B00D                <1>     mov al, CR
   479 00002B73 E812FCFFFF          <1>     call charOut_B.in
   480 00002B78 B00A                <1>     mov al, LF
   481 00002B7A E90BFCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   486 00002B7F 803D(30040000)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002B86 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002B88 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 00002B89 53                  <1>     push rbx
   491 00002B8A 56                  <1>     push rsi
   492 00002B8B 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 00002B92 C705(17050000)0500- <1>     mov dword [critReqPkt + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 00002B9A 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 00002B9C C605(15050000)0E    <1>     mov byte [critReqPkt + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 00002BA3 488D1D(15050000)    <1>     lea rbx, critReqPkt
   498 00002BAA E8AA470000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 00002BAF 66F705(18050000)00- <1>     test word [critReqPkt + ndInNoWaitPkt.status], drvBsyStatus
   500 00002BB7 02                  <1>
   501 00002BB8 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 00002BBA 30C0                <1>     xor al, al
   504 00002BBC 5E                  <1>     pop rsi
   505 00002BBD 5B                  <1>     pop rbx
   506                              <1>     return
    13                              <2> %%_ret:
    14 00002BBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 00002BBF 8A05(22050000)      <1>     mov al, byte [critReqPkt + ndInNoWaitPkt.retbyt]    ;Get char
   510 00002BC5 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 00002BC7 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 00002BC9 C705(17050000)0400- <1>     mov dword [critReqPkt + ioReqPkt.cmdcde], drvREAD ;Read command
   513 00002BD1 0000                <1>
   514 00002BD3 C605(15050000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 00002BDA C705(2B050000)0100- <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], 1 ;One char to be read
   516 00002BE2 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 00002BE4 488D05(22050000)    <1>     lea rax, qword [critReqPkt + ioReqPkt.medesc]
   519 00002BEB 488905(23050000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rax
   520 00002BF2 E862470000          <1>     call goDriver   ;RSI and RBX as before
   521 00002BF7 E9E6420000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 00002BFC 57                  <1>     push rdi
   526 00002BFD C605(BE040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 00002C04 E834270000          <1>     call getCurrentSFT ;Get current SFT pointer
   528 00002C09 48893D(4B070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 00002C10 5F                  <1>     pop rdi
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002C11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> vConRetDriver:
   533                              <1> ;Returns the original driver (sets flag down)
   534 00002C12 C605(BE040000)00    <1>     mov byte [vConDrvSwp], 0
   535                              <1>     return
    13                              <2> %%_ret:
    14 00002C19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> ;--------------------------------------------------
   538                              <1> ;      Main Keyboard Buffered Input Function      :
   539                              <1> ;--------------------------------------------------
   540                              <1> buffCharInput_BE:  ;ah = 0Ah
   541                              <1> ;Buffer pointer in rdx
   542                              <1> ; byte [rdx + 0], buffer length
   543                              <1> ; byte [rdx + 1], number of chars in buffer
   544                              <1> ; byte [rdx + 2], buffer start
   545                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   546                              <1> ;Register use
   547                              <1> ; dh = Char offset in internal buffer
   548                              <1> ; dl = Buffer length
   549                              <1> ; bh = Char offset in user buffer
   550                              <1> ; bl = Number of chars already in the buffer
   551                              <1> ; rdi = Internal buffer
   552                              <1> ; rsi = User buffer
   553 00002C1A 4889D6              <1>     mov rsi, rdx
   554 00002C1D 66AD                <1>     lodsw   ;Get buffer metadata in ax
   555 00002C1F 84C0                <1>     test al, al
   556                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002C21 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002C23 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   557 00002C24 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   558 00002C27 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   559 00002C29 7606                <1>     jbe .avoidcheck
   560 00002C2B 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   561 00002C2F 7402                <1>     je .functionKeyOk
   562                              <1> .avoidcheck:
   563 00002C31 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   564                              <1> .functionKeyOk:
   565 00002C33 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   566 00002C36 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   567                              <1> .breakEP:
   568 00002C38 8A05(F4020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   569 00002C3E 8805(F5020000)      <1>     mov byte [vConCurCnt], al
   570 00002C44 56                  <1>     push rsi    ;Push user buffer address
   571 00002C45 488D3D(F6020000)    <1>     lea rdi, vConBuffer
   572 00002C4C C605(2C070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   573 00002C53 30F6                <1>     xor dh, dh  ;Ensure these are 0 when coming back from break!
   574 00002C55 30FF                <1>     xor bh, bh  ;They should be... earmark
   575 00002C57 E8A6FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   576 00002C5C 3C0A                <1>     cmp al, LF
   577 00002C5E 7505                <1>     jne .checkControlChars
   578                              <1> .mainLoop:
   579 00002C60 E89DFCFFFF          <1>     call charIn_B
   580                              <1> .checkControlChars:
   581 00002C65 3C06                <1>     cmp al, ACK
   582 00002C67 74F7                <1>     je .mainLoop   ;Get another char
   583 00002C69 3A05D6D3FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   584 00002C6F 0F842E010000        <1>     je .escape
   585 00002C75 3C7F                <1>     cmp al, DEL
   586 00002C77 0F848F000000        <1>     je .delete
   587 00002C7D 3C08                <1>     cmp al, BSP
   588 00002C7F 0F8487000000        <1>     je .delete
   589 00002C85 3C17                <1>     cmp al, ETB
   590                              <1>     ;Add space for patched jump instructions
   591 00002C87 9090909090          <1>     db 5 dup (90h)  ;NOP
   592 00002C8C 3C15                <1>     cmp al, NAK
   593 00002C8E 9090909090          <1>     db 5 dup (90h)
   594 00002C93 3C0D                <1>     cmp al, CR
   595 00002C95 7452                <1>     je .carriageReturn
   596 00002C97 3C0A                <1>     cmp al, LF
   597 00002C99 7467                <1>     je .lineFeed
   598 00002C9B 3A05A5D3FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   599 00002CA1 7429                <1>     je .break
   600                              <1> .checkIfCanInsert:
   601 00002CA3 38D6                <1>     cmp dh, dl
   602 00002CA5 731C                <1>     jae .bufOflw
   603 00002CA7 AA                  <1>     stosb   ;Store the byte and increment rdi!
   604 00002CA8 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   605 00002CAA E892FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   606 00002CAF 803D(2C070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   607 00002CB6 75A8                <1>     jne .mainLoop
   608                              <1>     ;IF not in insert mode, we fall here
   609                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   610                              <1>     ; or insert chars if needed.
   611 00002CB8 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   612 00002CBA 73A4                <1>     jae .mainLoop  ;If geq dont follow in user buffer
   613 00002CBC 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   614 00002CBF FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   615 00002CC1 EB9D                <1>     jmp short .mainLoop
   616                              <1> .bufOflw:
   617                              <1> ;Buffer overflow
   618 00002CC3 B007                <1>     mov al, BEL ;Sound the bell
   619 00002CC5 E8C0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   620 00002CCA EB94                <1>     jmp short .mainLoop
   621                              <1> .break:
   622                              <1> ;Break, Place a "\", and do a CRLF
   623 00002CCC B05C                <1>     mov al, "\"
   624 00002CCE E8B7FAFFFF          <1>     call charOut_B.in
   625 00002CD3 5E                  <1>     pop rsi ;Realign stack
   626                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   627 00002CD4 E898FEFFFF          <1>     call printCRLF
   628                              <1>     ;Align to next tabstop
   629 00002CD9 8A05(F5020000)      <1>     mov al, byte [vConCurCnt]  ;Get without rounding!!
   630 00002CDF E84FFBFFFF          <1>     call charOut_B.outputATab
   631 00002CE4 E94FFFFFFF          <1>     jmp .breakEP
   632                              <1> .carriageReturn:
   633 00002CE9 AA                  <1>     stosb
   634 00002CEA E89BFAFFFF          <1>     call charOut_B.in
   635 00002CEF 5F                  <1>     pop rdi ;User buffer address was pushed 
   636 00002CF0 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   637 00002CF3 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   638                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   639 00002CF5 488D35(F6020000)    <1>     lea rsi, vConBuffer
   640 00002CFC 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   641 00002CFF F3A4                <1>     rep movsb  ;If the inc dh cause an overflow, dont copy! 
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002D01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .lineFeed:
   644 00002D02 E86AFEFFFF          <1>     call printCRLF
   645 00002D07 E954FFFFFF          <1>     jmp .mainLoop
   646                              <1> .delete:
   647 00002D0C E805000000          <1>     call .removeChar
   648 00002D11 E94AFFFFFF          <1>     jmp .mainLoop
   649                              <1> .removeChar:
   650 00002D16 84F6                <1>     test dh, dh ;Is char count 0?
   651 00002D18 741C                <1>     jz .normalChar   ;If so, skip going back!
   652 00002D1A E86A000000          <1>     call .vConErase
   653 00002D1F 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   654 00002D21 3C20                <1>     cmp al, SPC
   655 00002D23 7311                <1>     jae .normalChar
   656 00002D25 3C09                <1>     cmp al, TAB
   657 00002D27 7422                <1>     je .eraTab
   658 00002D29 3C15                <1>     cmp al, NAK
   659 00002D2B 7409                <1>     je .normalChar
   660 00002D2D 3C14                <1>     cmp al, DC4
   661 00002D2F 7405                <1>     je .normalChar
   662 00002D31 E858000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   663                              <1> .normalChar:
   664 00002D36 803D(2C070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   665                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002D3D 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002D3F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   666 00002D40 84FF                <1>     test bh, bh ;Beginning of user buffer?
   667                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002D42 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002D44 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   668 00002D45 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   669 00002D48 FECF                <1>     dec bh
   670                              <1>     return
    13                              <2> %%_ret:
    14 00002D4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> .eraTab:
   672                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   673                              <1> ; up to a tab stop worth of space chars printed
   674 00002D4B 57                  <1>     push rdi
   675 00002D4C 48FFCF              <1>     dec rdi
   676 00002D4F FD                  <1>     std ;Go backwards
   677 00002D50 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   678 00002D53 B020                <1>     mov al, SPC
   679 00002D55 53                  <1>     push rbx
   680 00002D56 BB07000000          <1>     mov ebx, 7
   681 00002D5B 67E30D              <1>     jecxz .onTabstop
   682                              <1> .scanString:
   683 00002D5E AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   684 00002D5F 7608                <1>     jbe .notChar    ;No, skip handling
   685 00002D61 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   686 00002D65 740A                <1>     je .tabChar
   687 00002D67 FECB                <1>     dec bl
   688                              <1> .notChar:
   689 00002D69 E2F3                <1>     loop .scanString
   690                              <1> .onTabstop:
   691 00002D6B 2A1D(F5020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   692                              <1> .tabChar:
   693 00002D71 28F3                <1>     sub bl, dh  ;Same on tabstop
   694 00002D73 00D9                <1>     add cl, bl
   695 00002D75 80E107              <1>     and cl, 7
   696 00002D78 5B                  <1>     pop rbx
   697 00002D79 5F                  <1>     pop rdi
   698 00002D7A FC                  <1>     cld
   699 00002D7B 74B9                <1>     jz .normalChar
   700                              <1>     ;Now erase all the spaces placed on the vCon
   701                              <1> .vConDelTab:
   702 00002D7D E80C000000          <1>     call .vConEraseNoDec
   703 00002D82 E2F9                <1>     loop .vConDelTab
   704 00002D84 E9ADFFFFFF          <1>     jmp .normalChar
   705                              <1> .vConErase:
   706                              <1> ;Erase the char on the vCon
   707                              <1> ;Return through the output function
   708 00002D89 48FFCF              <1>     dec rdi ;Go back a space in the 
   709 00002D8C FECE                <1>     dec dh  ;Decrement char count in the buffer
   710                              <1> .vConEraseNoDec:
   711 00002D8E B008                <1>     mov al, BSP ;Move cursor back
   712 00002D90 E8F5F9FFFF          <1>     call charOut_B.in
   713 00002D95 B020                <1>     mov al, SPC ;Replace with a space
   714 00002D97 E8EEF9FFFF          <1>     call charOut_B.in
   715 00002D9C B008                <1>     mov al, BSP ;Move cursor back again
   716 00002D9E E9E7F9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   717                              <1> .escape:
   718                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   719                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   720                              <1> ; including the function keys.
   721 00002DA3 FF2594D2FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   722                              <1> .f2:
   723 00002DA9 E846000000          <1>     call .fCommon2
   724 00002DAE EB0C                <1>     jmp short .fCommon
   725                              <1> .f3:
   726 00002DB0 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   727 00002DB3 28F9                <1>     sub cl, bh  ;Sub our current position
   728 00002DB5 EB05                <1>     jmp short .fCommon
   729                              <1> .f1:
   730 00002DB7 B901000000          <1>     mov ecx, 1  ;Get one char
   731                              <1> .fCommon:
   732 00002DBC C605(2C070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   733 00002DC3 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   734 00002DC5 0F8495FEFFFF        <1>     je .mainLoop
   735 00002DCB 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   736 00002DCD 0F848DFEFFFF        <1>     je .mainLoop
   737                              <1>     ;Else, copy byte by byte, and retain char in al
   738 00002DD3 AC                  <1>     lodsb
   739 00002DD4 AA                  <1>     stosb
   740 00002DD5 E867FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   741 00002DDA FEC7                <1>     inc bh
   742 00002DDC FEC6                <1>     inc dh
   743 00002DDE E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   744 00002DE0 E97BFEFFFF          <1>     jmp .mainLoop
   745                              <1> .f4:
   746 00002DE5 E80A000000          <1>     call .fCommon2
   747 00002DEA 4801CE              <1>     add rsi, rcx
   748 00002DED 00CF                <1>     add bh, cl
   749 00002DEF E96CFEFFFF          <1>     jmp .mainLoop
   750                              <1> .fCommon2:
   751 00002DF4 E809FBFFFF          <1>     call charIn_B   ;Get a char in al
   752 00002DF9 3A0546D2FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   753 00002DFF 750B                <1>     jne .fnotEscape
   754                              <1>     ;Get another char if they typed escape and force it in the buffer
   755                              <1>     ; Do not return to caller
   756 00002E01 E8FCFAFFFF          <1>     call charIn_B
   757                              <1> .fforceExit:
   758 00002E06 59                  <1>     pop rcx ;Get original return address from stack
   759 00002E07 E954FEFFFF          <1>     jmp .mainLoop
   760                              <1> .fnotEscape:
   761 00002E0C 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   762 00002E0F 28F9                <1>     sub cl, bh
   763 00002E11 74F3                <1>     jz .fforceExit
   764 00002E13 FFC9                <1>     dec ecx
   765 00002E15 74EF                <1>     jz .fforceExit
   766 00002E17 57                  <1>     push rdi
   767 00002E18 4889F7              <1>     mov rdi, rsi
   768 00002E1B 48FFC7              <1>     inc rdi
   769 00002E1E F2AE                <1>     repne scasb ;Search for the char to start printing from
   770 00002E20 5F                  <1>     pop rdi
   771 00002E21 75E3                <1>     jne .fforceExit ;If char not found, return
   772 00002E23 F6D1                <1>     not cl
   773 00002E25 00D9                <1>     add cl, bl
   774 00002E27 28F9                <1>     sub cl, bh
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002E29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .f5:
   777 00002E2A B040                <1>     mov al, "@"
   778 00002E2C E859F9FFFF          <1>     call charOut_B.in   ;Print the char
   779 00002E31 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   780 00002E32 57                  <1>     push rdi
   781 00002E33 E8BDFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   782 00002E38 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   783 00002E39 88F3                <1>     mov bl, dh
   784 00002E3B E994FEFFFF          <1>     jmp .breakAlt
   785                              <1> .f6:
   786                              <1> ;If the user wants to insert a EOF, they can use F6
   787 00002E40 B01A                <1>     mov al, EOF
   788 00002E42 E95CFEFFFF          <1>     jmp .checkIfCanInsert
   789                              <1> .f7:
   790                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   791 00002E47 8A05F8D1FFFF        <1>     mov al, byte [extESC]
   792 00002E4D E951FEFFFF          <1>     jmp .checkIfCanInsert
   793                              <1> .toggleIns:
   794 00002E52 F615(2C070000)      <1>     not byte [vConInsert]   ;Toggle
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002E58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .eDel:
   797 00002E59 38DF                <1>     cmp bh, bl
   798 00002E5B 0F84FFFDFFFF        <1>     je .mainLoop
   799 00002E61 FEC7                <1>     inc bh
   800 00002E63 48FFC6              <1>     inc rsi
   801 00002E66 E9F5FDFFFF          <1>     jmp .mainLoop
   802                              <1> 
   803                              <1> editKeys:
   804                              <1> ;Our Default Extended keys handler
   805 00002E6B E892FAFFFF          <1>     call charIn_B   ;Get the next char in al
   806 00002E70 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   807 00002E75 57                  <1>     push rdi    ;Preserve rdi
   808 00002E76 488D3DCAD1FFFF      <1>     lea rdi, extKeyTbl
   809 00002E7D 57                  <1>     push rdi
   810                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   811                              <1>     ; offset of function from extKeyTbl
   812                              <1> .lp:
   813 00002E7E AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   814 00002E7F 740D                <1>     je .charFound
   815 00002E81 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   816 00002E83 7414                <1>     jz .notInTable
   817 00002E85 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   818 00002E8C EBF0                <1>     jmp short .lp
   819                              <1> .charFound:
   820 00002E8E 59                  <1>     pop rcx ;Pop back the effective address of the table
   821 00002E8F 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   822 00002E93 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   823 00002E96 5F                  <1>     pop rdi
   824 00002E97 FFE1                <1>     jmp rcx
   825                              <1> .notInTable:
   826 00002E99 59                  <1>     pop rcx ;Realign stack
   827 00002E9A 59                  <1>     pop rcx
   828 00002E9B E9C0FDFFFF          <1>     jmp buffCharInput_BE.mainLoop
    40                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002EA0 E8A5010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002EA5 E85A490000          <1>     call getUserRegs
     6 00002EAA 668B15(B8040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002EB1 0FB60D(BA040000)    <1>     movzx ecx, byte [years]
     9 00002EB8 81C1BC070000        <1>     add ecx, 1980   ;Turn into the year from offset since 1980
    10 00002EBE 8A05(BD040000)      <1>     mov al, byte [dayOfWeek]
    11 00002EC4 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    12 00002EC8 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    13                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002ECC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    14                              <1> setDate:           ;ah = 2Bh
    15                              <1> ;	CX = year (1980-2099)
    16                              <1> ;   DH = month (1-12)
    17                              <1> ;	DL = day (1-31)
    18 00002ECD B0FF                <1>     mov al, -1      ;Default to fail
    19 00002ECF 6681E9BC07          <1>     sub cx, 1980    ;Turn into years since 1980
    20                              <1>     retc            ;Return with -1 if cx is below 1980. Avoids going into below.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002ED4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002ED6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    21 00002ED7 E873000000          <1>     call writeDate  ;Sets ax to 0 or -1, cx needs to be offset since 1980
    22                              <1>     return
    13                              <2> %%_ret:
    14 00002EDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> getTime:           ;ah = 2Ch
    24 00002EDD E868010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    25 00002EE2 E81D490000          <1>     call getUserRegs
    26 00002EE7 668B0D(42050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    27 00002EEE 668B15(44050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    28 00002EF5 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    29 00002EF9 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    30                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002EFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> setTime:           ;ah = 2Dh
    32                              <1> ;   CH = hour (0-23)
    33                              <1> ;	CL = minutes (0-59)
    34                              <1> ;	DH = seconds (0-59)
    35                              <1> ;	DL = hundredths (0-99)
    36 00002EFE 80FD17              <1>     cmp ch, 23
    37 00002F01 7749                <1>     ja .exitBad
    38 00002F03 80F93B              <1>     cmp cl, 59
    39 00002F06 7744                <1>     ja .exitBad
    40 00002F08 80FE3B              <1>     cmp dh, 59
    41 00002F0B 773F                <1>     ja .exitBad
    42 00002F0D 80FA63              <1>     cmp dl, 99
    43 00002F10 773A                <1>     ja .exitBad
    44                              <1> ;Now we read date (updating internal count if necessary)
    45 00002F12 E833010000          <1>     call readDateTimeRecord
    46 00002F17 488D1D(40050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    47 00002F1E 0FB705(BB040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    48 00002F25 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    49 00002F28 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    50 00002F2C 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    51 00002F30 B906000000          <1>     mov ecx, 6
    52 00002F35 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    53 00002F38 E859470000          <1>     call primReqWriteSetup   ;rbx now points to request header
    54 00002F3D 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    55 00002F44 E810440000          <1>     call goDriver
    56 00002F49 30C0                <1>     xor al, al
    57                              <1>     return
    13                              <2> %%_ret:
    14 00002F4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                              <1> .exitBad:
    59 00002F4C B0FF                <1>     mov al, -1
    60                              <1>     return
    13                              <2> %%_ret:
    14 00002F4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> ;------------------------
    62                              <1> ;   Utility functions   :
    63                              <1> ;------------------------
    64                              <1> writeDate:
    65                              <1> ;Input: cx = 00-120 (1980-2099)
    66                              <1> ;       dl = Day    (01-31)
    67                              <1> ;       dh = Month  (01-12)
    68 00002F4F 6681F97800          <1>     cmp cx, 120
    69 00002F54 0F83ED000000        <1>     jae .exitBad
    70 00002F5A 84F6                <1>     test dh, dh
    71 00002F5C 0F84E5000000        <1>     jz .exitBad
    72 00002F62 80FE0C              <1>     cmp dh, 12
    73 00002F65 0F87DC000000        <1>     ja .exitBad
    74 00002F6B 84D2                <1>     test dl, dl
    75 00002F6D 0F84D4000000        <1>     jz .exitBad
    76 00002F73 80FA1F              <1>     cmp dl, 31
    77 00002F76 0F87CB000000        <1>     ja .exitBad
    78 00002F7C 668915(B8040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    79                              <1>     ;mov byte [monthOfYear], dh
    80 00002F83 880D(BA040000)      <1>     mov byte [years], cl    ;Save the years count
    81 00002F89 E884010000          <1>     call setDaysInFeb   ;Set days in february this year
    82 00002F8E 80FE02              <1>     cmp dh, 2   ;Are we in Feb?
    83 00002F91 750C                <1>     jne .notFeb
    84 00002F93 3A15D0D0FFFF        <1>     cmp dl, byte [monthsTbl + 1] ;Compare if we are a bad date?
    85 00002F99 0F87A8000000        <1>     ja .exitBad ;If 29-28 (for example), error!
    86                              <1> .notFeb:
    87 00002F9F 88CD                <1>     mov ch, cl ;Get years count in ch
    88 00002FA1 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    89 00002FA4 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    90 00002FA7 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    91 00002FAA BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    92 00002FAF F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    93                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    94 00002FB1 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    95 00002FB4 67E311              <1>     jecxz .addDay    ;Skip adding years
    96 00002FB7 056E010000          <1>     add eax, 366    ;First add for a leap year
    97                              <1> .addYears:
    98 00002FBC FFC9                <1>     dec ecx
    99 00002FBE 67E307              <1>     jecxz .addDay    ;Jump if in year after leap year
   100 00002FC1 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   101 00002FC6 EBF4                <1>     jmp short .addYears
   102                              <1> .addDay:
   103 00002FC8 89C2                <1>     mov edx, eax    ;Save this number in edx
   104                              <1>     ;Now to add day offset
   105 00002FCA 0FB60D(B9040000)    <1>     movzx ecx, byte [monthOfYear]
   106 00002FD1 488D3590D0FFFF      <1>     lea rsi, monthsTbl
   107                              <1> .addDaysInMonth:
   108 00002FD8 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   109 00002FDA 67E308              <1>     jecxz .addMonthOffset
   110 00002FDD AC                  <1>     lodsb   ;Get the number of days in the month in al
   111 00002FDE 0FB6C0              <1>     movzx eax, al
   112 00002FE1 01C2                <1>     add edx, eax
   113 00002FE3 EBF3                <1>     jmp short .addDaysInMonth
   114                              <1> .addMonthOffset:
   115 00002FE5 0FB60D(B8040000)    <1>     movzx ecx, byte [dayOfMonth]
   116 00002FEC FFC9                <1>     dec ecx
   117 00002FEE 01CA                <1>     add edx, ecx    ;Add month offset
   118                              <1>     ;edx has the number of days since 01/01/1980
   119 00002FF0 668915(BB040000)    <1>     mov word [daysOffset], dx   ;Store!
   120                              <1> ;Now read and then write CLOCKrecrd
   121 00002FF7 488D1D(40050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   122 00002FFE B906000000          <1>     mov ecx, 6
   123 00003003 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   124 00003006 E896460000          <1>     call primReqReadSetup   ;rbx now points to request header
   125 0000300B 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   126 00003012 E842430000          <1>     call goDriver
   127                              <1> ;Now we change daycount and write it back
   128 00003017 0FB705(BB040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   129 0000301E 488D1D(40050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   130 00003025 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   131 00003028 B906000000          <1>     mov ecx, 6
   132 0000302D 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   133 00003030 E861460000          <1>     call primReqWriteSetup   ;rbx now points to request header
   134 00003035 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   135 0000303C E818430000          <1>     call goDriver
   136 00003041 E8AE000000          <1>     call setDayofWeek
   137                              <1>     return
    13                              <2> %%_ret:
    14 00003046 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> .exitBad:
   139 00003047 B0FF                <1>     mov al, -1
   140                              <1>     return
    13                              <2> %%_ret:
    14 00003049 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> readDateTimeRecord:
   143                              <1> ;Will read the clock using the primary request header
   144                              <1> ;Preserves all regs except eax and flags
   145 0000304A 53                  <1>     push rbx
   146 0000304B 51                  <1>     push rcx
   147 0000304C 52                  <1>     push rdx
   148 0000304D 56                  <1>     push rsi
   149 0000304E 55                  <1>     push rbp
   150                              <1> 
   151 0000304F 66C705(551A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   151 00003057 00                  <1>
   152 00003058 488D1D(40050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   153 0000305F B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   154 00003064 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   155                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   156                              <1> ; rbx = Data storage buffer ptr
   157                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   158                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   159 00003067 E835460000          <1>     call primReqReadSetup   ;rbx now points to request header
   160 0000306C 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   161 00003073 E8E1420000          <1>     call goDriver
   162 00003078 0FB705(40050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   163                              <1> ;Here we have:  ax = Days since 1/1/1980
   164                              <1> ;Updates the internal date fields
   165                              <1> ;Internal time fields are in the clock record
   166                              <1> ;So now we check if the number of days since 1980 are the same.
   167                              <1> ;If so, we can skip updating.
   168 0000307F 663B05(BB040000)    <1>     cmp ax, word [daysOffset]
   169 00003086 7466                <1>     je .exit    ;Return if equal
   170 00003088 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   171 0000308D 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   172 0000308F 668905(BB040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   173                              <1>     ;Now want to update years, month and day fields
   174                              <1>     ;ax has the number of days since 01/01/1980
   175                              <1>     ;Get days in a 4 year period
   176 00003096 BBB5050000          <1>     mov ebx, 365*4 + 1
   177 0000309B 31D2                <1>     xor edx, edx
   178 0000309D 89D1                <1>     mov ecx, edx  ;Zero ecx
   179 0000309F F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   180                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   181                              <1>     ;edx has offset into current 4 year bunch
   182 000030A1 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   183 000030A6 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   184 000030A8 7210                <1>     jb .foundBunch
   185 000030AA 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   186 000030AC FFC1                <1>     inc ecx
   187 000030AE FFCB                <1>     dec ebx ;Number of days in a normal year
   188                              <1> .findBunch:
   189 000030B0 39DA                <1>     cmp edx, ebx
   190 000030B2 7206                <1>     jb .foundBunch
   191 000030B4 29DA                <1>     sub edx, ebx
   192 000030B6 FFC1                <1>     inc ecx
   193 000030B8 EBF6                <1>     jmp short .findBunch
   194                              <1> .foundBunch:
   195                              <1>     ;If ecx = 0, february has 29 days!
   196                              <1>     ;eax has number of four year bunches elapsed since 1980
   197 000030BA C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   198 000030BD 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   199                              <1>     ;ecx now has the number of years since 1980
   200 000030BF E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   201                              <1> ;edx has number of days into the year we are in
   202                              <1> ;eax has number of days in Feb for this year
   203 000030C4 488D359DCFFFFF      <1>     lea rsi, monthsTbl
   204 000030CB 31C9                <1>     xor ecx, ecx    ;Use as month counter
   205                              <1> .monthSearch:
   206 000030CD FFC1                <1>     inc ecx ;Start from 1
   207 000030CF AC                  <1>     lodsb   ;Get value in al and inc rsi
   208 000030D0 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   209 000030D3 39C2                <1>     cmp edx, eax
   210 000030D5 7204                <1>     jb .monthFound
   211 000030D7 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   212 000030D9 EBF2                <1>     jmp short .monthSearch
   213                              <1> .monthFound:
   214                              <1>     ;cl has the month (01h-0Ch)
   215                              <1>     ;dl has the day of the month - 1
   216 000030DB FFC2                <1>     inc edx
   217 000030DD 880D(B9040000)      <1>     mov byte [monthOfYear], cl
   218 000030E3 8815(B8040000)      <1>     mov byte [dayOfMonth], dl
   219 000030E9 E806000000          <1>     call setDayofWeek
   220                              <1> .exit:
   221 000030EE 5D                  <1>     pop rbp
   222 000030EF 5E                  <1>     pop rsi
   223 000030F0 5A                  <1>     pop rdx
   224 000030F1 59                  <1>     pop rcx
   225 000030F2 5B                  <1>     pop rbx
   226                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 000030F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> setDayofWeek:
   229                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   230 000030F4 0FB705(BB040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   231 000030FB 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   232                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   233 00003100 31D2                <1>     xor edx, edx
   234 00003102 B907000000          <1>     mov ecx, 7   
   235 00003107 F7F1                <1>     div ecx  ;Get remainder in dl
   236 00003109 8815(BD040000)      <1>     mov byte [dayOfWeek], dl
   237                              <1> ;Set ZF to indicate all ok
   238 0000310F 31C0                <1>     xor eax, eax
   239                              <1>     return
    13                              <2> %%_ret:
    14 00003111 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   242                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   243                              <1> ;Input: cl = Year - 1980
   244                              <1> ;Output: al = Number of days in February
   245 00003112 880D(BA040000)      <1>     mov byte [years], cl    ;Save this figure
   246 00003118 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   247 0000311B 51                  <1>     push rcx
   248 0000311C 57                  <1>     push rdi
   249 0000311D B81C000000          <1>     mov eax, 28  ;Usual days in february
   250 00003122 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   251 00003127 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   252 0000312A 488D3D38CFFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   253 00003131 AA                  <1>     stosb   ;Store the word in rdi
   254 00003132 5F                  <1>     pop rdi
   255 00003133 59                  <1>     pop rcx
   256                              <1>     return
    13                              <2> %%_ret:
    14 00003134 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getDirDTwords:
   259                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   260                              <1> ; High word of eax = Date
   261                              <1> ; Low word of eax = Time
   262                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   263                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   264                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   265                              <1> 
   266                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   267                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   268                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   269                              <1> ;Preserves all registers except eax
   270 00003135 53                  <1>     push rbx
   271 00003136 0FB61D(45050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   272 0000313D D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   273 0000313F 89D8                <1>     mov eax, ebx
   274 00003141 0FB61D(42050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   275 00003148 C1E305              <1>     shl ebx, 5
   276 0000314B 09D8                <1>     or eax, ebx
   277 0000314D 0FB61D(43050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   278 00003154 C1E30B              <1>     shl ebx, 11
   279 00003157 09D8                <1>     or eax, ebx
   280 00003159 0FB61D(B8040000)    <1>     movzx ebx, byte [dayOfMonth]
   281 00003160 C1E310              <1>     shl ebx, 16
   282 00003163 09D8                <1>     or eax, ebx
   283 00003165 0FB61D(B9040000)    <1>     movzx ebx, byte [monthOfYear]
   284 0000316C C1E315              <1>     shl ebx, 21
   285 0000316F 09D8                <1>     or eax, ebx
   286 00003171 0FB61D(BA040000)    <1>     movzx ebx, byte [years]
   287 00003178 C1E319              <1>     shl ebx, 25
   288 0000317B 09D8                <1>     or eax, ebx
   289 0000317D 5B                  <1>     pop rbx
   290                              <1>     return
    13                              <2> %%_ret:
    14 0000317E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> getDateAndTimeOld:  ;Int 2Fh AX=120Dh
   292                              <1> ;Returns edx = time
   293                              <1> ;        eax = date
   294                              <1> ; Formally ax and dx but we clear the upper words
   295 0000317F E8C6FEFFFF          <1>     call readDateTimeRecord
   296 00003184 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   297 00003189 31D2                <1>     xor edx, edx
   298 0000318B 6689C2              <1>     mov dx, ax  ;Save time
   299 0000318E C1E810              <1>     shr eax, 10h    ;Get date into rax
   300                              <1>     return
    13                              <2> %%_ret:
    14 00003191 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB -> Except for closing a volume label.
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 00003192 488915(43070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 00003199 4889D6              <1>     mov rsi, rdx
    30 0000319C 803EFF              <1>     cmp byte [rsi], -1
    31 0000319F 7507                <1>     jne .notExt1
    32 000031A1 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 000031A8 0FB606              <1>     movzx eax, byte [rsi]
    35 000031AB 50                  <1>     push rax    ;Push on stack the drive number
    36 000031AC 488D3D(48050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 000031B3 E837030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 000031B8 7306                <1>     jnc .fcbOk
    39 000031BA 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 000031BB E9024B0000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 000031C0 488D3D(48050000)    <1>     lea rdi, buffer1
    43 000031C7 E837E4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 000031CC 7306                <1>     jnc .fileFound
    45 000031CE 5B                  <1>     pop rbx
    46 000031CF E9EE4A0000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 000031D4 488D3D(59060000)    <1>     lea rdi, dosffblock
    50 000031DB 57                  <1>     push rdi
    51 000031DC E8C8E2FFFF          <1>     call setupFFBlock
    52 000031E1 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 000031E2 488B3D(43070000)    <1>     mov rdi, qword [workingFCB]
    55 000031E9 F605(25070000)FF    <1>     test byte [extFCBFlag], -1
    56 000031F0 7407                <1>     jz .notExt2
    57 000031F2 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 000031F9 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 000031FA 85DB                <1>     test ebx, ebx
    61 000031FC 7509                <1>     jnz .notCurrentDrive
    62 000031FE 0FB61D(59040000)    <1>     movzx ebx, byte [currentDrv]
    63 00003205 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 00003207 AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 00003208 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 0000320B B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 00003210 F3A5                <1>     rep movsd
    69 00003212 89D8                <1>     mov eax, ebx
    70 00003214 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 00003215 488B3D(3F040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 0000321C 488D35(84060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 00003223 F605(25070000)FF    <1>     test byte [extFCBFlag], -1
    74 0000322A 7412                <1>     jz .notExt3
    75 0000322C B8FFFFFFFF          <1>     mov eax, -1
    76 00003231 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 00003232 FFC0                <1>     inc eax ;Make it zero
    78 00003234 AB                  <1>     stosd
    79 00003235 AA                  <1>     stosb   ;Store 5 bytes of zero
    80 00003236 0FB605(26070000)    <1>     movzx eax, byte [searchAttr]
    81 0000323D AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 0000323E 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 00003240 AA                  <1>     stosb
    85 00003241 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 00003246 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 00003249 E9714A0000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 0000324E 488915(43070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 00003255 C605(25070000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 0000325C C605(26070000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 00003263 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 00003266 803EFF              <1>     cmp byte [rsi], -1
    96 00003269 7514                <1>     jne .notExt
    97 0000326B FE0D(25070000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 00003271 4881C606000000      <1>     add rsi, exFcb.attribute
    99 00003278 AC                  <1>     lodsb   ;Get search attr in al
   100 00003279 8805(26070000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 0000327F 488D3D(59060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 00003286 31C0                <1>     xor eax, eax
   105 00003288 AC                  <1>     lodsb   ;Get the FCB drive letter
   106 00003289 50                  <1>     push rax    ;Push drive letter on the stack
   107 0000328A 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 0000328D AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 0000328E B905000000          <1>     mov ecx, 5
   110 00003293 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 00003295 FF35(3F040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 0000329B 488D3D(59060000)    <1>     lea rdi, dosffblock
   113 000032A2 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 000032A3 8F05(3F040000)      <1>     pop qword [currentDTA]
   115 000032A9 E8D5DDFFFF          <1>     call findNextMain
   116 000032AE 8F05(3F040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 000032B4 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 000032BA 488B3D(43070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 000032C1 F607FF              <1>     test byte [rdi], -1
   120 000032C4 7407                <1>     jz .notExt2
   121 000032C6 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 000032CD 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 000032CE 881F                <1>     mov byte [rdi], bl
   125 000032D0 E9ED490000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 000032D5 488D3D(48050000)    <1>     lea rdi, buffer1
   129 000032DC 57                  <1>     push rdi
   130 000032DD E80D020000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 000032E2 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 000032E3 0F82D9490000        <1>     jc fcbErrExit
   133 000032E9 E815E3FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 000032EE 0F82CE490000        <1>     jc fcbErrExit
   135 000032F4 E832120000          <1>     call outerDeleteMain
   136 000032F9 0F82C3490000        <1>     jc fcbErrExit
   137 000032FF E9BB490000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 00003304 488915(43070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 0000330B 4889D6              <1>     mov rsi, rdx
   144 0000330E 803EFF              <1>     cmp byte [rsi], -1
   145 00003311 7507                <1>     jne .notExt
   146 00003313 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 0000331A 31C0                <1>     xor eax, eax
   149 0000331C AC                  <1>     lodsb
   150 0000331D 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 0000331E 488D3D(48050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 00003325 E8C5010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 0000332A 723D                <1>     jc .badPop
   154 0000332C FF35(48060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 00003332 8F05(50060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 00003338 58                  <1>     pop rax ;Get drive letter back
   157 00003339 488D3D(C8050000)    <1>     lea rdi, buffer2
   158 00003340 E87E010000          <1>     call fcbInitName2
   159 00003345 7223                <1>     jc short .bad
   160 00003347 488B05(50060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 0000334E 488705(48060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 00003355 488905(50060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 0000335C E8160D0000          <1>     call outerRenameMain
   164 00003361 0F8358490000        <1>     jnc fcbGoodExit
   165 00003367 EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 00003369 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 0000336A E953490000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 0000336F 488915(43070000)    <1>     mov qword [workingFCB], rdx
   175 00003376 488D3D(48050000)    <1>     lea rdi, buffer1
   176 0000337D 57                  <1>     push rdi
   177 0000337E E86C010000          <1>     call fcbInitRoutine
   178 00003383 5F                  <1>     pop rdi
   179 00003384 0F8238490000        <1>     jc fcbErrExit
   180 0000338A E874E2FFFF          <1>     call getFilePathNoCanon
   181 0000338F 0F822D490000        <1>     jc fcbErrExit
   182 00003395 8B05(A0060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 0000339B 488B35(43070000)    <1>     mov rsi, qword [workingFCB]
   185 000033A2 803EFF              <1>     cmp byte [rsi], -1
   186 000033A5 7507                <1>     jne .notExtended
   187 000033A7 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 000033AE 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 000033B2 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 000033B4 85D2                <1>     test edx, edx
   193 000033B6 7402                <1>     jz .noRemainder
   194 000033B8 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 000033BA 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 000033BD E9FD480000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 000033C2 488B1D(A5040000)    <1>     mov rbx, qword [oldRSP]
   203 000033C9 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 000033CD 488915(3F040000)    <1>     mov qword [currentDTA], rdx
   205 000033D4 C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 000033D5 488B15(A5040000)    <1>     mov rdx, qword [oldRSP]
   209 000033DC 488B1D(3F040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 000033E3 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 000033E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 000033E8 E8A2010000          <1>     call parseNameToFCB
   229 000033ED 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 000033EE E811440000          <1>     call getUserRegs
   231 000033F3 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 000033F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 000033F7 488915(43070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 000033FE 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 00003401 755D                <1>     jne .exitErr
   251 00003403 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 00003407 7557                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 00003409 488D3D(48050000)    <1>     lea rdi, buffer1
   255 00003410 57                  <1>     push rdi
   256 00003411 E8D9000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 00003416 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 00003417 0F82A5480000        <1>     jc fcbErrExit
   259 0000341D 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 00003420 E8C0450000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 00003425 7239                <1>     jc .exitErr
   262 00003427 E8D7E1FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 0000342C 8B05(48050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 00003432 30C0                <1>     xor al, al
   265 00003434 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 00003439 7425                <1>     je .exitErr
   267 0000343B 488D3D(480D0000)    <1>     lea rdi, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 00003442 E8EE1E0000          <1>     call setCurrentSFT
   269 00003447 0FB605(26070000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 0000344E E808130000          <1>     call createMain
   271 00003453 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 00003455 E866160000          <1>     call closeMain
   275 0000345A 0F835F480000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 00003460 B805000000          <1>     mov eax, errAccDen
   278 00003465 E958480000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> closeFileFCB:      ;ah = 10h
   281                              <1> ;This is a minimal function stub which is necessary to "pseudo"-close
   282                              <1> ; opens/creates of volume labels via the open/createFCB function.
   283                              <1> ; Though those functions close by themselves, I won't document that
   284                              <1> ; for future compatibility. Thus, if this function encounters a 
   285                              <1> ; open/create volume label FCB, it returns OK. Else it fails.
   286 0000346A 488915(43070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   287 00003471 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   288 00003474 75EA                <1>     jne openFileFCB.exitErr
   289 00003476 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   290 0000347A 75E4                <1>     jne openFileFCB.exitErr
   291 0000347C E93E480000          <1>     jmp fcbGoodExit
   292                              <1> 
   293                              <1> ;=================================================================
   294                              <1> ;=================================================================
   295                              <1> ;These functions are marked as reserved for future expansion.
   296                              <1> ;=================================================================
   297                              <1> ;=================================================================
   298                              <1> sequentialReadFCB: ;ah = 14h
   299                              <1> sequentialWriteFCB:;ah = 15h
   300                              <1> randomReadFCB:     ;ah = 21h
   301                              <1> randomWriteFCB:    ;ah = 22h
   302                              <1> setRelRecordFCB:   ;ah = 24h
   303                              <1> randBlockReadFCB:  ;ah = 27h
   304                              <1> randBlockWriteFCB: ;ah = 28h
   305 00003481 B805000000          <1>     mov eax, errAccDen
   306 00003486 E937480000          <1>     jmp fcbErrExit
   307                              <1> 
   308                              <1> 
   309                              <1> ;--------------------------------
   310                              <1> ;  Common FCB related Routines  :
   311                              <1> ;--------------------------------
   312                              <1> fcbCheckDriveType:
   313                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   314                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   315                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   316                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   317                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   318                              <1> ;If a net CDS, automatic fail (for now).
   319 0000348B C605(23070000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   320 00003492 51                  <1>     push rcx
   321 00003493 57                  <1>     push rdi
   322 00003494 55                  <1>     push rbp
   323 00003495 9C                  <1>     pushfq
   324 00003496 F605(8F060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   325 0000349D 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   326 0000349F E8CC420000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   327 000034A4 7218                <1>     jc .exit
   328                              <1>     ;rdi has cds ptr now
   329 000034A6 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   330 000034AA E8F4D5FFFF          <1>     call getFATtype
   331 000034AF 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   332 000034B5 7707                <1>     ja .exit
   333                              <1> .okToGo:
   334 000034B7 C605(23070000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   335                              <1> .exit:
   336 000034BE 9D                  <1>     popfq
   337 000034BF 5D                  <1>     pop rbp
   338 000034C0 5F                  <1>     pop rdi
   339 000034C1 59                  <1>     pop rcx
   340                              <1>     return
    13                              <2> %%_ret:
    14 000034C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> fcbInitName2:
   342                              <1> ;Must be called after fcbInitRoutine has been run once
   343                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   344                              <1> ;       rdx -> UserFCB
   345                              <1> ;       eax[0] = Drive number (0 based)
   346 000034C3 55                  <1>     push rbp
   347 000034C4 4889E5              <1>     mov rbp, rsp
   348 000034C7 4881EC0F000000      <1>     sub rsp, 15
   349 000034CE 57                  <1>     push rdi
   350 000034CF 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   351 000034D3 4889D6              <1>     mov rsi, rdx
   352 000034D6 F605(25070000)FF    <1>     test byte [extFCBFlag], -1
   353 000034DD 7407                <1>     jz .notExtended
   354 000034DF 4881C607000000      <1>     add rsi, exFcb.driveNum
   355                              <1> .notExtended:
   356                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   357 000034E6 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   358 000034ED EB36                <1>     jmp short fcbInitRoutine.rename2EP
   359                              <1> fcbInitRoutine:
   360                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   361                              <1> ;Input: rdx -> User FCB
   362                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   363 000034EF 55                  <1>     push rbp
   364 000034F0 4889E5              <1>     mov rbp, rsp
   365 000034F3 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   366                              <1>     ;This space is used to store X:FILENAME.EXT,0
   367 000034FA 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   368 000034FB 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   369 000034FF C605(25070000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   370 00003506 C605(26070000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   371 0000350D E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   372 00003512 7410                <1>     jz .notExtended
   373 00003514 C605(25070000)FF    <1>     mov byte [extFCBFlag], -1
   374 0000351B 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   375 0000351E 8805(26070000)      <1>     mov byte [searchAttr], al
   376                              <1> .notExtended:
   377 00003524 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   378                              <1> .rename2EP:
   379                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   380 00003525 E8FE420000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   381 0000352A 723F                <1>     jc .badDisk
   382 0000352C E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   383 00003531 488D1DA6CFFFFF      <1>     lea rbx, asciiCharProperties
   384 00003538 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   385 0000353D 56                  <1>     push rsi    ;rsi -> fcb.filename
   386                              <1> .nameCharCheck:
   387 0000353E AC                  <1>     lodsb   ;Get the char in al
   388 0000353F D7                  <1>     xlatb   ;Get the char signature in al
   389 00003540 A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   390 00003542 7427                <1>     jz .badDisk
   391 00003544 FFC9                <1>     dec ecx
   392 00003546 75F6                <1>     jnz .nameCharCheck
   393 00003548 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   394 00003549 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   395 0000354C E818DFFFFF          <1>     call FCBToAsciiz
   396 00003551 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   397 00003552 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   398 00003555 7414                <1>     je .badDisk
   399 00003557 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   400 0000355B 55                  <1>     push rbp
   401 0000355C E867E0FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   402 00003561 5D                  <1>     pop rbp
   403 00003562 7207                <1>     jc .badDisk
   404 00003564 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   405 00003569 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   406                              <1> .badDisk:
   407 0000356B B003                <1>     mov al, errPnf  ;DOS does this... so will I
   408 0000356D F9                  <1>     stc
   409                              <1> .jiggleStack:
   410 0000356E 4889EC              <1>     mov rsp, rbp
   411 00003571 5D                  <1>     pop rbp
   412                              <1> .exit:
   413                              <1>     return
    13                              <2> %%_ret:
    14 00003572 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> storeZeroBasedDriveNumber:
   416                              <1> ;Input: al => 0 based drive letter
   417                              <1> ;       rdi -> Points to buffer to store the X: in
   418 00003573 FEC0                <1>     inc al
   419                              <1> storeOneBasedDriveNumber:
   420                              <1> ;Input: al => 1 based drive letter
   421                              <1> ;       rdi -> Points to buffer to store the X: in
   422 00003575 0440                <1>     add al, "@"
   423 00003577 B43A                <1>     mov ah, ":"
   424 00003579 66AB                <1>     stosw
   425                              <1>     return
    13                              <2> %%_ret:
    14 0000357B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> isFCBExtended:
   428                              <1> ;Input: rdx = FCB ptr
   429                              <1> ;Output: rsi -> Drive letter of FCB
   430                              <1> ;        rdx -> FCB first byte
   431                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   432 0000357C 4889D6              <1>     mov rsi, rdx
   433 0000357F 803EFF              <1>     cmp byte [rsi], -1
   434 00003582 7507                <1>     jne .notExtended
   435 00003584 4881C607000000      <1>     add rsi, exFcb.driveNum
   436                              <1> .notExtended:
   437 0000358B 4839F2              <1>     cmp rdx, rsi
   438                              <1>     return
    13                              <2> %%_ret:
    14 0000358E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> parseNameToFCB:
   441                              <1> ;rsi points to a command line to parse
   442                              <1> ;rdi points to a future unopened FCB
   443                              <1> ;al = parsing control bits. 
   444                              <1> ; al[0] = If set, leading filename separators are scanned off
   445                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   446                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   447                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   448                              <1> ;
   449                              <1> ;Separators include : . ; , = + TAB SPACE
   450                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   451 0000358F C605(B7040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   452 00003596 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   453 00003598 A802                <1>     test al, 2  ;Set drive letter
   454 0000359A 7402                <1>     jz .skipDriveLetter
   455 0000359C 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   456                              <1> .skipDriveLetter:
   457 0000359E 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   458 000035A1 B908000000          <1>     mov ecx, 8  ;Copy Filename
   459 000035A6 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   460 000035A8 93                  <1>     xchg eax, ebx
   461 000035A9 B020                <1>     mov al, " " ;Clear the field
   462 000035AB 7405                <1>     jz .clearFilenameField
   463 000035AD 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   464 000035B0 31C9                <1>     xor ecx, ecx
   465                              <1> .clearFilenameField:
   466 000035B2 F3AA                <1>     rep stosb
   467 000035B4 B903000000          <1>     mov ecx, 3
   468 000035B9 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   469 000035BC 7405                <1>     jz .clearExtensionField
   470 000035BE 4801CF              <1>     add rdi, rcx
   471 000035C1 31C9                <1>     xor ecx, ecx
   472                              <1> .clearExtensionField:
   473 000035C3 F3AA                <1>     rep stosb
   474 000035C5 91                  <1>     xchg eax, ecx
   475 000035C6 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   476 000035C7 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   477 000035CE F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   478 000035D1 740F                <1>     jz .dontScanOffTerm
   479 000035D3 E89F000000          <1>     call skipSeparators ;Skip leading separators
   480 000035D8 E87B430000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   481 000035DD 7508                <1>     jnz .skipIfNotTerminator
   482 000035DF 48FFC6              <1>     inc rsi
   483                              <1> .dontScanOffTerm:
   484 000035E2 E890000000          <1>     call skipSeparators  ;Skip separators
   485                              <1> .skipIfNotTerminator:
   486 000035E7 E844430000          <1>     call uppercaseCharAtPtr 
   487 000035EC 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   488 000035EE 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   489 000035F1 7519                <1>     jne .skipSettingDriveLetter
   490 000035F3 48FFC6              <1>     inc rsi ;Goto next char
   491 000035F6 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   492 000035F8 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   493 000035FA 50                  <1>     push rax    ;Save the 1 based drive letter
   494 000035FB E828420000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   495 00003600 58                  <1>     pop rax
   496 00003601 7302                <1>     jnc .validDriveLetter
   497                              <1> .invalidDriveLetter:
   498 00003603 B2FF                <1>     mov dl, -1
   499                              <1> .validDriveLetter:
   500 00003605 AA                  <1>     stosb
   501 00003606 48FFC6              <1>     inc rsi ;Align pointers...
   502 00003609 48FFCF              <1>     dec rdi 
   503                              <1> .skipSettingDriveLetter:
   504 0000360C 48FFCE              <1>     dec rsi
   505 0000360F 48FFC7              <1>     inc rdi
   506                              <1> getFCBFilename:
   507                              <1> ;Input: rsi points to first char of filename
   508                              <1> ;       rdi points to storage buffer for filename
   509                              <1> ;       dl contains the signature if drive invalid
   510                              <1> ;Output:
   511                              <1> ;       Fields filled
   512                              <1> ;       al = Return signature
   513 00003612 B908000000          <1>     mov ecx, 8
   514 00003617 E815000000          <1>     call getFCBNameField
   515 0000361C 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   516 0000361F 750D                <1>     jne .noExt
   517 00003621 B903000000          <1>     mov ecx, 3
   518 00003626 48FFC6              <1>     inc rsi ;Skip this char
   519 00003629 E814000000          <1>     call forceFCBNameField
   520                              <1> .noExt:
   521 0000362E 88D0                <1>     mov al, dl  ;Store the return signature
   522                              <1>     return
    13                              <2> %%_ret:
    14 00003630 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> getFCBNameField:
   525                              <1> ;Checks if the field is appropriate before copying it
   526 00003631 E8FA420000          <1>     call uppercaseCharAtPtr
   527 00003636 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   528 00003638 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   529 0000363B 48FFCE              <1>     dec rsi ;Point to previous char
   530                              <1>     return
    13                              <2> %%_ret:
    14 0000363E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> .okName:
   532 0000363F 48FFCE              <1>     dec rsi ;Go back now a char
   533                              <1> forceFCBNameField:
   534                              <1> ;Forcefully copies the name from rsi to rdi
   535 00003642 E8E9420000          <1>     call uppercaseCharAtPtr
   536 00003647 7226                <1>     jc .terminatingSpace
   537 00003649 750D                <1>     jnz .notSep
   538 0000364B F605(B7040000)FF    <1>     test byte [fcbSpaceOk], -1
   539 00003652 741B                <1>     jz .terminatingSpace
   540 00003654 3C20                <1>     cmp al, " "
   541 00003656 7517                <1>     jne .terminatingSpace
   542                              <1> .notSep:
   543 00003658 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   544 0000365B FFC9                <1>     dec ecx
   545 0000365D 3C2A                <1>     cmp al, "*" ;Big wildcard?
   546 0000365F 7504                <1>     jne .notBigWildcard
   547 00003661 B03F                <1>     mov al, "?"
   548 00003663 F3AA                <1>     rep stosb
   549                              <1> .notBigWildcard:
   550 00003665 AA                  <1>     stosb   ;Stores the uppercased char
   551 00003666 3C3F                <1>     cmp al, "?"
   552 00003668 75D8                <1>     jne forceFCBNameField
   553 0000366A 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   554 0000366D EBD3                <1>     jmp short forceFCBNameField
   555                              <1> .terminatingSpace:
   556 0000366F B020                <1>     mov al, " "
   557 00003671 F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   558 00003673 48FFCE              <1>     dec rsi     ;Point back to terminating char
   559                              <1>     return
    13                              <2> %%_ret:
    14 00003676 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> skipSeparators:
   562                              <1> ;Input: rsi -> String 
   563                              <1> ;Output: rsi -> First non separator type char
   564 00003677 AC                  <1>     lodsb
   565 00003678 E8EA420000          <1>     call isCharSeparator
   566 0000367D 74F8                <1>     jz skipSeparators
   567 0000367F 48FFCE              <1>     dec rsi
   568                              <1>     return
    13                              <2> %%_ret:
    14 00003682 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00003683 51                  <1>     push rcx    ;Save file attributes on stack
    11 00003684 488D0DD0100000      <1>     lea rcx, createMain
    12 0000368B C605(26070000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 00003692 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003694 BB16000000          <1>     mov ebx, dirInclusive
    21 00003699 F605(2B070000)FF    <1>     test byte [dosInvoke], -1
    22 000036A0 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 000036A3 880D(26070000)      <1>     mov byte [searchAttr], cl
    24 000036A9 488D0D6B0F0000      <1>     lea rcx, openMain  
    25 000036B0 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 000036B1 4889D6              <1>     mov rsi, rdx
    28 000036B4 E82C430000          <1>     call checkPathspecOK
    29 000036B9 7311                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> ;We cant have wildcards when creating or opening a file!
    31 000036BB 58                  <1>     pop rax
    32 000036BC B805000000          <1>     mov eax, errAccDen
    33 000036C1 E91C460000          <1>     jmp extErrExit
    34                              <1> .errNoHandles:
    35 000036C6 5B                  <1>     pop rbx             ;Pop the word from the stack
    36 000036C7 E916460000          <1>     jmp extErrExit      ;Return in eax the error code
    37                              <1> .pathOk:
    38 000036CC E8C6450000          <1>     call dosCrit1Enter
    39 000036D1 E8271D0000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    40 000036D6 E8C6450000          <1>     call dosCrit1Exit
    41 000036DB 72E9                <1>     jc .errNoHandles
    42                              <1> ;Now save DOS state. 
    43 000036DD E8531C0000          <1>     call setCurrentSFT          ;Set rdi as the current SFT
    44 000036E2 66891D(63070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    45 000036E9 E8D41D0000          <1>     call findFreeJFTEntry       ;Get a ptr to a free JFT entry in rdi
    46 000036EE 0F82C8000000        <1>     jc .errNoJFTentries         ;Free the current SFT entry and exit
    47 000036F4 66891D(65070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    48 000036FB 48893D(53070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    49 00003702 0FB71D(63070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    50 00003709 881F                <1>     mov byte [rdi], bl  ;And open the file
    51                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    52 0000370B 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    53 0000370E 488D3D(48050000)    <1>     lea rdi, buffer1    ;Build the full path here
    54 00003715 51                  <1>     push rcx    ;Save the procedure to call on stack
    55 00003716 E82DDEFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    56 0000371B 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    57 0000371C 488D05F80E0000      <1>     lea rax, openMain   ;Get EA for open procedure
    58 00003723 488B35(5B070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    59 0000372A 7334                <1>     jnc .proceedCall
    60                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    61                              <1> ;                              For Create New, Bad but handled later.
    62                              <1> ;If CF=CY => Path doesnt all exist:
    63                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    64                              <1> ;Now we check if we are creating or opening.
    65 0000372C 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    66 0000372F 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    67 00003731 F605(2E070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    68 00003738 741B                <1>     jz .badPathspec ;If not then exit bad path
    69                              <1>     ;Now check the path is not X:\<NUL>
    70 0000373A 8B0D(48050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    71 00003740 30C9                <1>     xor cl, cl
    72 00003742 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    73 00003748 7516                <1>     jnz .proceedCall    ;Else, proceed.
    74                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    75 0000374A 58                  <1>     pop rax
    76 0000374B B802000000          <1>     mov eax, errFnf 
    77 00003750 E95D000000          <1>     jmp .errBadDeallocate   ;Need to deallocate the SFT before returning
    78                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    79 00003755 58                  <1>     pop rax
    80 00003756 B803000000          <1>     mov eax, errPnf
    81 0000375B E952000000          <1>     jmp .errBadDeallocate   ;Need to deallocate the SFT before returning
    82                              <1> .proceedCall:
    83                              <1> ;If the pathspec exists, recall that for create, we truncate.
    84 00003760 31C9                <1>     xor ecx, ecx    ;Default to empty device info word
    85 00003762 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    86 00003765 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    87 00003766 750B                <1>     jne .callProc   ;Jump if we are creating
    88                              <1> ;al has the openmode here
    89 00003768 A880                <1>     test al, openNoInherit      ;No Inherit bit set?
    90 0000376A 7407                <1>     jz .callProc
    91 0000376C 247F                <1>     and al, ~openNoInherit      ;Clear this bit
    92 0000376E B900100000          <1>     mov ecx, devNoInherit       ;Set the corresponding the device info bit 
    93                              <1> .callProc:
    94 00003773 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    95 00003779 48C7464F00000000    <1>     mov qword [rsi + sft.pMFT], 0       ;Clear mft pointer details
    96 00003781 51                  <1>     push rcx    ;Save the device word 
    97 00003782 FFD3                <1>     call rbx    ;Enter with open mode in ax if an open call.
    98 00003784 59                  <1>     pop rcx
    99 00003785 488B35(5B070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   100 0000378C 7224                <1>     jc .errBadDeallocate
   101 0000378E 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   102 00003793 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   103 00003797 0FB705(65070000)    <1>     movzx eax, word [currentHdl]
   104 0000379E FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   105 000037A4 66C705(63070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   105 000037AC FF                  <1>
   106 000037AD E922450000          <1>     jmp extGoodExit ;Save ax and return OK
   107                              <1> .errBadDeallocate:
   108                              <1> ;Now we deallocate the SFT entry in the JFT and SFT block
   109 000037B2 488B35(53070000)    <1>     mov rsi, qword [curHdlPtr]
   110 000037B9 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   111                              <1> .errNoJFTentries:
   112 000037BC FA                  <1>     cli     ;Enter critical section! No multitasking to free the SFT
   113 000037BD E87B1B0000          <1>     call getCurrentSFT  ;Get the current SFT ptr in rdi
   114 000037C2 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0   ;Mark as free! 
   115 000037C7 F9                  <1>     stc ;Debug to show that we are here
   116 000037C8 66C705(63070000)FF- <1>     mov word [currentNdx], -1
   116 000037D0 FF                  <1>
   117 000037D1 FB                  <1>     sti
   118 000037D2 E90B450000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   119                              <1> 
   120                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   121                              <1> ;Input: bx = file handle to close
   122 000037D7 E8FD1C0000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   123 000037DC 0F8200450000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   124 000037E2 E84E1B0000          <1>     call setCurrentSFT  ;Set this as the current SFT
   125 000037E7 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1 ;If this is last reference to sft
   126 000037EC 740A                <1>     je .killHdl ;always kill the handle!
   127                              <1>     ;Else if network file opened as FCB, avoid nuking JFT!
   128 000037EE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   129 000037F2 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   130 000037F4 3C70                <1>     cmp al, openNetFCBShr
   131 000037F6 7408                <1>     je .notNetFCB
   132                              <1> .killHdl:
   133 000037F8 E8901C0000          <1>     call getJFTPtr  ;Remember, bx has handle number
   134 000037FD C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   135                              <1> .notNetFCB:
   136 00003800 E8BB120000          <1>     call closeMain  ;Call close main!
   137 00003805 0F82D7440000        <1>     jc extErrExit   ;If an error, exit through error exit
   138 0000380B B8003E0000          <1>     mov eax, 3E00h    ;Return value
   139 00003810 E9BF440000          <1>     jmp extGoodExit
   140                              <1> 
   141                              <1> readFileHdl:       ;ah = 3Fh, handle function
   142 00003815 488D356F130000      <1>     lea rsi, readBytes
   143                              <1> .common:
   144 0000381C E8B81C0000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   145 00003821 0F82BB440000        <1>     jc extErrExit   ;Error code in al and exit
   146 00003827 E8091B0000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   147 0000382C 66F747020020        <1>     test word [rdi + sft.wOpenMode], openFailOnI24  ;Do we force hard Fail?
   148 00003832 7409                <1>     jz .goIO
   149 00003834 66810D(B2070000)02- <1>     or word [wEOFlags], eoFailI24 ;Make sure CTRL+C is aware we fail!!
   149 0000383C 00                  <1>
   150                              <1> .goIO:
   151 0000383D 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   152 0000383F FF35(3F040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   153 00003845 488915(3F040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   154 0000384C FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   155 0000384E 8F05(3F040000)      <1>     pop qword [currentDTA]
   156 00003854 0F8288440000        <1>     jc extErrExit   ;Error code in al and exit
   157 0000385A 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   158 0000385C E96A440000          <1>     jmp extGoodExit2    ;and exit!
   159                              <1> 
   160                              <1> writeFileHdl:      ;ah = 40h, handle function
   161 00003861 488D357A160000      <1>     lea rsi, writeBytes
   162 00003868 E9AFFFFFFF          <1>     jmp readFileHdl.common
   163                              <1> 
   164                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   165                              <1> ;Here don't allow malformed chars unless it is a network CDS
   166                              <1> ;Allows deleting volume labels.
   167 0000386D BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   168 00003872 F605(2B070000)FF    <1>     test byte [dosInvoke], -1
   169 00003879 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   170 0000387C 880D(26070000)      <1>     mov byte [searchAttr], cl
   171 00003882 4889D6              <1>     mov rsi, rdx
   172 00003885 E85B410000          <1>     call checkPathspecOK
   173 0000388A 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   174 0000388C 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   175                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   176 0000388E F605(2B070000)FF    <1>     test byte [dosInvoke], -1
   177 00003895 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   178                              <1> .badPath:
   179 00003897 B805000000          <1>     mov eax, errAccDen
   180 0000389C E941440000          <1>     jmp extErrExit
   181                              <1> .pathOk:
   182 000038A1 488D3D(48050000)    <1>     lea rdi, buffer1
   183 000038A8 52                  <1>     push rdx
   184 000038A9 E89ADCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   185 000038AE 5A                  <1>     pop rdx
   186 000038AF 0F822D440000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   187                              <1>     ;In the case of a wildcard, recall this will return the first file
   188 000038B5 803D(2D070000)FF    <1>     cmp byte [fileExist], -1
   189 000038BC 0F8520440000        <1>     jnz extErrExit
   190 000038C2 E8640C0000          <1>     call outerDeleteMain
   191 000038C7 0F8215440000        <1>     jc extErrExit
   192 000038CD E902440000          <1>     jmp extGoodExit
   193                              <1> 
   194                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   195                              <1> ;Input: ecx=0, edx=Position to seek to
   196                              <1> ;ecx may be non-zero for 64-bit IFS but currently DOS does not natively
   197                              <1> ; support them. INT 2Fh filesystems may have a tough time if they wish to
   198                              <1> ; use a 64 bit file pointer... They can try though!
   199                              <1> ;Output: If CF=NC: edx=0, eax=New position of file handle
   200                              <1> ;           Again, if network file, edx = Upper bytes of file hdl!
   201 000038D2 E8021C0000          <1>     call getSFTPtr
   202 000038D7 0F8205440000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   203 000038DD 3C03                <1>     cmp al, 3
   204 000038DF 720A                <1>     jb .validFunction
   205 000038E1 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   206 000038E6 E9F7430000          <1>     jmp extErrExit
   207                              <1> .validFunction:
   208 000038EB 3C01                <1>     cmp al, 1
   209 000038ED 771A                <1>     ja .seekend
   210 000038EF 7203                <1>     jb .seekset
   211                              <1> ;Here we are at seekcur, seek from current (signed)
   212 000038F1 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   213                              <1> .seekset:
   214                              <1> ;Seek from the start (unsigned)
   215 000038F4 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   216 000038F7 31D2                <1>     xor edx, edx    ;All FAT files have 0 upper 32 bits! Set to 0!
   217                              <1>     ;We return the file position in eax anyway!
   218                              <1> .seekExit:
   219 000038F9 E8063F0000          <1>     call getUserRegs    ;Get user regs in rsi
   220 000038FE 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   221 00003901 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   222 00003904 E9C2430000          <1>     jmp extGoodExit2    ;Return OK in eax 
   223                              <1> .seekend:
   224                              <1> ;Here we are at seekend, seek from end (signed)
   225 00003909 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   226 0000390F 7505                <1>     jnz .netCheck
   227                              <1> .proceedDisk:
   228 00003911 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   229 00003914 EBDE                <1>     jmp short .seekset
   230                              <1> .netCheck:
   231 00003916 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB  ;Is this a FCB opened file?
   232 0000391C 75F3                <1>     jnz .proceedDisk
   233 0000391E 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   234                              <1>     ;Check its share mode
   235 00003922 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   236 00003927 3D40000000          <1>     cmp eax, openDenNoShr  ;Don't deny? Proceed
   237 0000392C 7407                <1>     je .netSeek
   238 0000392E 3D30000000          <1>     cmp eax, openDenRdShr
   239 00003933 75DC                <1>     jne .proceedDisk
   240                              <1> .netSeek:
   241 00003935 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   242 0000393A CD2F                <1>     int 2Fh
   243 0000393C 73BB                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   244 0000393E E99F430000          <1>     jmp extErrExit
   245                              <1> 
   246                              <1> 
   247                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   248 00003943 3C01                <1>     cmp al, 1
   249 00003945 761F                <1>     jbe .subFuncOk
   250 00003947 B801000000          <1>     mov eax, errInvFnc
   251                              <1> .chmodError:
   252                              <1> ;Call with ax = errorcode
   253 0000394C C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   254 00003953 C605(36040000)07    <1>     mov byte [errorClass], eClsAppFlt
   255 0000395A C605(35040000)07    <1>     mov byte [errorAction], eActRetUsr
   256 00003961 E97C430000          <1>     jmp extErrExit
   257                              <1> .subFuncOk:
   258 00003966 4889D6              <1>     mov rsi, rdx
   259 00003969 89C3                <1>     mov ebx, eax    ;Store function code in bl
   260 0000396B 53                  <1>     push rbx
   261 0000396C 51                  <1>     push rcx
   262 0000396D E873400000          <1>     call checkPathspecOK
   263 00003972 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   264                              <1> .badPath:
   265 00003974 59                  <1>     pop rcx
   266 00003975 5B                  <1>     pop rbx
   267 00003976 B805000000          <1>     mov eax, errAccDen
   268 0000397B EBCF                <1>     jmp short .chmodError
   269                              <1> .pathOk:
   270 0000397D E83D410000          <1>     call checkPathNet 
   271 00003982 74F0                <1>     jz .badPath ;Or Net paths
   272 00003984 E817410000          <1>     call scanPathWC
   273 00003989 72E9                <1>     jc .badPath ;Dont allow wildcards
   274 0000398B 488D3D(48050000)    <1>     lea rdi, buffer1
   275 00003992 52                  <1>     push rdx
   276 00003993 C605(26070000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   277 0000399A E8A9DBFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   278 0000399F 5A                  <1>     pop rdx
   279 000039A0 59                  <1>     pop rcx
   280 000039A1 5B                  <1>     pop rbx
   281 000039A2 0F823A430000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   282                              <1>     ;In the case of a wildcard, recall this will return the first file
   283 000039A8 803D(2D070000)FF    <1>     cmp byte [fileExist], -1
   284 000039AF 759B                <1>     jnz .chmodError
   285                              <1> 
   286 000039B1 E8BA3D0000          <1>     call testCDSNet
   287 000039B6 730C                <1>     jnc .notNet
   288 000039B8 750A                <1>     jnz .notNet ;This type of net ok
   289 000039BA B805000000          <1>     mov eax, errAccDen
   290 000039BF E91E430000          <1>     jmp extErrExit
   291                              <1> .notNet:
   292 000039C4 84DB                <1>     test bl, bl
   293 000039C6 7526                <1>     jnz .setAttribs
   294                              <1>     ;Get attribs here
   295 000039C8 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   296 000039CE 7412                <1>     jz .getDiskAttribs
   297 000039D0 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   298 000039D5 CD2F                <1>     int 2Fh
   299 000039D7 0F8205430000        <1>     jc extErrExit
   300 000039DD E9F2420000          <1>     jmp extGoodExit
   301                              <1> .getDiskAttribs:
   302 000039E2 0FB605(8F060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   303 000039E9 E9E6420000          <1>     jmp extGoodExit
   304                              <1> 
   305                              <1> .setAttribs:
   306                              <1>     ;Set attribs here
   307 000039EE 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   308 000039F4 7417                <1>     jz .setDiskAttribs
   309 000039F6 0FB7C9              <1>     movzx ecx, cx
   310 000039F9 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   311 000039FA B80E110000          <1>     mov eax, 110Eh
   312 000039FF CD2F                <1>     int 2Fh
   313 00003A01 59                  <1>     pop rcx
   314 00003A02 0F82DA420000        <1>     jc extErrExit
   315 00003A08 E9C7420000          <1>     jmp extGoodExit
   316                              <1> .setDiskAttribs:
   317 00003A0D E8C30A0000          <1>     call checkExclusiveOwnFile
   318 00003A12 730A                <1>     jnc .okToSet
   319 00003A14 B820000000          <1>     mov eax, errShrVio
   320 00003A19 E9C4420000          <1>     jmp extErrExit
   321                              <1> .okToSet:
   322 00003A1E E874420000          <1>     call dosCrit1Enter
   323 00003A23 E81BEAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   324 00003A28 722D                <1>     jc .setErrorNoFlush
   325 00003A2A F6C118              <1>     test cl, attrFileVolLbl | attrFileDir
   326 00003A2D 740A                <1>     jz .set
   327 00003A2F B805000000          <1>     mov eax, errAccDen
   328 00003A34 E91E000000          <1>     jmp .setErrorNoFlush
   329                              <1> .set:
   330 00003A39 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   331 00003A3C 80E518              <1>     and ch, (attrFileVolLbl | attrFileDir)    ;Keep these two bits
   332 00003A3F 08E9                <1>     or cl, ch
   333 00003A41 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   334 00003A44 E867CDFFFF          <1>     call flushAllBuffersForDPB
   335 00003A49 720C                <1>     jc .setError
   336 00003A4B E851420000          <1>     call dosCrit1Exit
   337 00003A50 31C0                <1>     xor eax, eax
   338 00003A52 E97D420000          <1>     jmp extGoodExit
   339                              <1> .setError:
   340                              <1> 
   341                              <1> .setErrorNoFlush:
   342 00003A57 E845420000          <1>     call dosCrit1Exit
   343 00003A5C E981420000          <1>     jmp extErrExit
   344                              <1> 
   345                              <1> duplicateHandle:   ;ah = 45h, handle function
   346                              <1> ;Input: bx = Handle to duplicate
   347                              <1> ;Output: If ok then ax = New handle
   348 00003A61 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   349 00003A64 E8591A0000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   350                              <1> .duplicateCommon:
   351 00003A69 0F8273420000        <1>     jc extErrExit   ;Exit if no space
   352 00003A6F 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   353 00003A72 93                  <1>     xchg eax, ebx
   354 00003A73 E8611A0000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   355 00003A78 0F8264420000        <1>     jc extErrExit
   356 00003A7E 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   357 00003A81 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   358 00003A87 750A                <1>     jnz .netFile
   359 00003A89 E8A7180000          <1>     call setCurrentSFT  ;Set rdi to the current SFT
   360 00003A8E E85D0C0000          <1>     call openDriverMux
   361                              <1> .netFile:
   362 00003A93 E8F5190000          <1>     call getJFTPtr
   363 00003A98 8A1F                <1>     mov bl, byte [rdi]
   364 00003A9A 881E                <1>     mov byte [rsi], bl
   365 00003A9C E933420000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   366                              <1> 
   367                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   368                              <1> ;Input: bx = Handle to duplicate
   369                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   370                              <1>     ;First we close cx if it exists
   371 00003AA1 0FB7C9              <1>     movzx ecx, cx
   372 00003AA4 53                  <1>     push rbx
   373 00003AA5 51                  <1>     push rcx
   374 00003AA6 89CB                <1>     mov ebx, ecx
   375 00003AA8 E82AFDFFFF          <1>     call closeFileHdl   ;Close handle 
   376 00003AAD 5B                  <1>     pop rbx
   377 00003AAE 58                  <1>     pop rax
   378 00003AAF E8D9190000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   379 00003AB4 EBB3                <1>     jmp short duplicateHandle.duplicateCommon
   380                              <1> 
   381                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   382                              <1> ;Input: cx = Search Attributes, cl only used
   383                              <1> ;       rdx = Ptr to path to file to look for
   384                              <1> ;       al = Document as needing to be 0 for now
   385                              <1> ;Return:
   386                              <1> ;Data in the DTA or error through AX with CF=CY
   387                              <1> ;CAVEATS!
   388                              <1> ;DTA:attribFnd = 40h => Char dev
   389                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   390 00003AB6 880D(26070000)      <1>     mov byte [searchAttr], cl
   391 00003ABC 4889D6              <1>     mov rsi, rdx
   392 00003ABF E8213F0000          <1>     call checkPathspecOK
   393 00003AC4 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   394 00003AC6 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   395                              <1> .badPath:
   396 00003AC8 B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   397 00003ACD E910420000          <1>     jmp extErrExit
   398                              <1> .pathspecOk:
   399 00003AD2 FF35(3F040000)      <1>     push qword [currentDTA]
   400 00003AD8 488D3D(59060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   401 00003ADF 48893D(3F040000)    <1>     mov qword [currentDTA], rdi
   402 00003AE6 488D3D(48050000)    <1>     lea rdi, buffer1    ;Build the full path here
   403 00003AED E856DAFFFF          <1>     call getFilePath
   404                              <1> .findfileExit:
   405 00003AF2 8F05(3F040000)      <1>     pop qword [currentDTA]
   406 00003AF8 0F82E4410000        <1>     jc extErrExit
   407 00003AFE 488D3D(59060000)    <1>     lea rdi, dosffblock
   408 00003B05 57                  <1>     push rdi
   409 00003B06 E89ED9FFFF          <1>     call setupFFBlock
   410 00003B0B 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   411 00003B0C 488B3D(3F040000)    <1>     mov rdi, qword [currentDTA]
   412 00003B13 B92B000000          <1>     mov ecx, ffBlock_size
   413 00003B18 F3A4                <1>     rep movsb   ;Copy the whole block. 
   414                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   415 00003B1A 31C0                <1>     xor eax, eax    ;Return value
   416 00003B1C E9B3410000          <1>     jmp extGoodExit ;Exit well
   417                              <1> 
   418                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   419                              <1> ;Input: DTA has the find first block from the previous search
   420 00003B21 488B35(3F040000)    <1>     mov rsi, qword [currentDTA]
   421 00003B28 488D3D(59060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   422 00003B2F B92B000000          <1>     mov ecx, ffBlock_size
   423 00003B34 F3A4                <1>     rep movsb
   424 00003B36 FF35(3F040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   425 00003B3C 488D3D(59060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   426 00003B43 48893D(3F040000)    <1>     mov qword [currentDTA], rdi
   427 00003B4A E834D5FFFF          <1>     call findNextMain
   428 00003B4F EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   429                              <1> 
   430                              <1> renameFile:        ;ah = 56h
   431                              <1> ;Input: rdx -> Filespec to rename
   432                              <1> ;       rdi -> New filespec
   433                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   434 00003B51 4889D6              <1>     mov rsi, rdx
   435 00003B54 BB16000000          <1>     mov ebx, dirInclusive
   436 00003B59 F605(2B070000)FF    <1>     test byte [dosInvoke], -1
   437 00003B60 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   438 00003B63 880D(26070000)      <1>     mov byte [searchAttr], cl
   439                              <1>     ;Step 0, verify both paths provided are valid
   440 00003B69 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   441 00003B6E 7249                <1>     jc .accDenError
   442 00003B70 56                  <1>     push rsi
   443 00003B71 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   444 00003B74 E84A000000          <1>     call .renamePathCheck
   445 00003B79 5E                  <1>     pop rsi
   446 00003B7A 723D                <1>     jc .accDenError
   447                              <1>     ;Now we canonicalise the filenames to make life easy
   448 00003B7C 56                  <1>     push rsi
   449 00003B7D 4889FE              <1>     mov rsi, rdi
   450 00003B80 488D3D(C8050000)    <1>     lea rdi, buffer2
   451 00003B87 E83CDAFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   452 00003B8C 5E                  <1>     pop rsi
   453 00003B8D 722A                <1>     jc .accDenError
   454                              <1>     ;Now test if first file exists.
   455 00003B8F FF35(48060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   456 00003B95 8F05(50060000)      <1>     pop qword [fname2Ptr]
   457 00003B9B 488D3D(48050000)    <1>     lea rdi, buffer1
   458 00003BA2 E821DAFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   459 00003BA7 7210                <1>     jc .accDenError 
   460 00003BA9 E8C9040000          <1>     call outerRenameMain ;Both pathnames made good and copied internally, lets go!!
   461 00003BAE 0F822E410000        <1>     jc extErrExit
   462 00003BB4 E91B410000          <1>     jmp extGoodExit
   463                              <1> .accDenError:
   464 00003BB9 B805000000          <1>     mov eax, errAccDen
   465 00003BBE E91F410000          <1>     jmp extErrExit
   466                              <1> .renamePathCheck:
   467                              <1> ;Checks if the pathspec in rsi is OK
   468 00003BC3 56                  <1>     push rsi
   469 00003BC4 57                  <1>     push rdi
   470 00003BC5 E81B3E0000          <1>     call checkPathspecOK
   471 00003BCA 5F                  <1>     pop rdi
   472 00003BCB 5E                  <1>     pop rsi
   473 00003BCC 730D                <1>     jnc .pathOk     ;Path ok 
   474 00003BCE 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   475                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   476 00003BD0 F605(2B070000)FF    <1>     test byte [dosInvoke], -1
   477 00003BD7 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   478                              <1> .badPath:
   479 00003BD9 F9                  <1>     stc
   480                              <1>     return
    13                              <2> %%_ret:
    14 00003BDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> .pathOk:
   482 00003BDB F8                  <1>     clc
   483                              <1>     return
    13                              <2> %%_ret:
    14 00003BDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> getSetFileDateTime: ;ah = 57h
   486 00003BDD 3C01                <1>     cmp al, 1
   487 00003BDF 760A                <1>     jbe .oksubfun
   488 00003BE1 B801000000          <1>     mov eax, errInvFnc
   489 00003BE6 E9F7400000          <1>     jmp extErrExit
   490                              <1> .oksubfun:
   491 00003BEB E8E9180000          <1>     call getSFTPtr  ;Preserves al unless error returned
   492 00003BF0 0F82EC400000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   493 00003BF6 3C01                <1>     cmp al, 1
   494 00003BF8 7426                <1>     je .setTimeDate
   495                              <1>     ;Here we get the Time/Date
   496 00003BFA E898400000          <1>     call dosCrit1Enter
   497 00003BFF 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   498 00003C03 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   499 00003C07 E895400000          <1>     call dosCrit1Exit
   500 00003C0C E8F33B0000          <1>     call getUserRegs
   501 00003C11 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   502 00003C15 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   503 00003C19 31C0                <1>     xor eax, eax
   504 00003C1B E9B4400000          <1>     jmp extGoodExit
   505                              <1> .setTimeDate:
   506                              <1>     ;Here we set the Time/Date
   507 00003C20 E872400000          <1>     call dosCrit1Enter
   508 00003C25 66894F13            <1>     mov word [rdi + sft.wTime], cx
   509 00003C29 66895715            <1>     mov word [rdi + sft.wDate], dx
   510 00003C2D 31C0                <1>     xor eax, eax
   511 00003C2F FF15(2F010000)      <1>     call qword [updateDirShare]
   512                              <1>     ;Clear the flag to indicate that the dir needs to be updated and dont 
   513                              <1>     ; further change the file time since we have manually overridden it 
   514                              <1>     ; with the time specified
   515 00003C35 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~devDiskNoFlush  ;Clear flag to sync
   516 00003C3B 66814F050040        <1>     or word [rdi + sft.wDeviceInfo], devDiskNoDTonClose    ;Force it to this time
   517 00003C41 E85B400000          <1>     call dosCrit1Exit
   518 00003C46 31C0                <1>     xor eax, eax
   519 00003C48 E987400000          <1>     jmp extGoodExit
   520                              <1> 
   521                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   522                              <1> ;Uses the clock to do it's bidding
   523                              <1> ;cx = file attribute 
   524                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   525                              <1> ;       filename
   526 00003C4D 66F7C1D8FF          <1>     test cx, ~(attrFileArchive | attrFileSys | attrFileHidden | attrFileRO)
   527 00003C52 740A                <1>     jz .validAttribs
   528 00003C54 B805000000          <1>     mov eax, errAccDen
   529 00003C59 E984400000          <1>     jmp extErrExit
   530                              <1> .validAttribs:
   531 00003C5E 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   532 00003C62 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   533 00003C65 B935000000          <1>     mov ecx, MAX_PSPEC
   534 00003C6A 31C0                <1>     xor eax, eax
   535 00003C6C 4889D7              <1>     mov rdi, rdx
   536 00003C6F F2AE                <1>     repne scasb
   537 00003C71 85C9                <1>     test ecx, ecx
   538 00003C73 750A                <1>     jnz .nullFnd
   539                              <1>     ;Bad path
   540 00003C75 B803000000          <1>     mov eax, errPnf
   541 00003C7A E963400000          <1>     jmp extErrExit
   542                              <1> .nullFnd:
   543 00003C7F 48FFCF              <1>     dec rdi
   544 00003C82 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   545 00003C86 E89A3C0000          <1>     call swapPathSeparator
   546 00003C8B 7403                <1>     jz .pathsepFnd
   547                              <1>     ;If no pathsep found, force one at rdi
   548 00003C8D B05C                <1>     mov al, "\"
   549 00003C8F AA                  <1>     stosb
   550                              <1> .pathsepFnd:
   551 00003C90 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   552                              <1> .fileCreateLoop:
   553 00003C93 55                  <1>     push rbp
   554 00003C94 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   555 00003C99 5D                  <1>     pop rbp
   556 00003C9A 0FB7C1              <1>     movzx eax, cx
   557 00003C9D 0FB7D2              <1>     movzx edx, dx
   558 00003CA0 C1E010              <1>     shl eax, 10h
   559 00003CA3 09D0                <1>     or eax, edx  ;Add the bits of dx too
   560 00003CA5 E831000000          <1>     call .writeNybbles
   561 00003CAA 31C0                <1>     xor eax, eax
   562 00003CAC AA                  <1>     stosb   ;Store terminating null
   563 00003CAD 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   564 00003CB0 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   565 00003CB3 55                  <1>     push rbp
   566 00003CB4 E85C000000          <1>     call createNewFile
   567 00003CB9 5D                  <1>     pop rbp
   568 00003CBA 0F8314400000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   569 00003CC0 0FB705(33040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   570 00003CC7 3D05000000          <1>     cmp eax, errAccDen
   571 00003CCC 74C5                <1>     je .fileCreateLoop
   572 00003CCE 3D50000000          <1>     cmp eax, errFilExist
   573 00003CD3 74BE                <1>     je .fileCreateLoop
   574 00003CD5 F9                  <1>     stc
   575 00003CD6 E907400000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   576                              <1> .writeNybbles:
   577                              <1> ;Write the nybbles of eax at rdi
   578 00003CDB B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   579                              <1> .wnLp:
   580 00003CE0 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   581 00003CE3 50                  <1>     push rax
   582 00003CE4 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   583 00003CE9 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   584 00003CEE 3D39000000          <1>     cmp eax, '9'
   585 00003CF3 7605                <1>     jbe .notExtDigit
   586 00003CF5 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   587                              <1> .notExtDigit:
   588 00003CFA AA                  <1>     stosb   ;Store the digit
   589 00003CFB 58                  <1>     pop rax
   590 00003CFC FFC9                <1>     dec ecx
   591 00003CFE 75E0                <1>     jnz .wnLp
   592                              <1>     return
    13                              <2> %%_ret:
    14 00003D00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> .uniqueTimeGet:
   595 00003D01 E844F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   596 00003D06 668B0D(42050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   597 00003D0D 668B15(44050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   598                              <1>     return
    13                              <2> %%_ret:
    14 00003D14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> createNewFile:     ;ah = 5Bh
   601 00003D15 51                  <1>     push rcx    ;Save file attributes on stack
   602 00003D16 488D0D290A0000      <1>     lea rcx, createNewMain
   603 00003D1D C605(26070000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   604 00003D24 E988F9FFFF          <1>     jmp openFileHdl.openCommon
   605                              <1> 
   606                              <1> lockUnlockFile:    ;ah = 5Ch
   607                              <1> ;ah = 5Ch
   608                              <1> ;al = subfunction
   609                              <1> ;       00h lock region of file
   610                              <1> ;       01h unlock region of file
   611                              <1> ;ebx = file handle
   612                              <1> ;ecx = start offset of region within file
   613                              <1> ;edi = length of region in bytes
   614 00003D29 3C01                <1>     cmp al, 1
   615 00003D2B 7757                <1>     ja .badFunction
   616 00003D2D 57                  <1>     push rdi
   617 00003D2E E8C0170000          <1>     call derefSFTPtr
   618 00003D33 730B                <1>     jnc .validHdl
   619 00003D35 58                  <1>     pop rax ;Discard the qword on the stack
   620 00003D36 B806000000          <1>     mov eax, errBadHdl
   621 00003D3B E9A23F0000          <1>     jmp extErrExit
   622                              <1> .validHdl:
   623 00003D40 84C0                <1>     test al, al ;Check if al = 0
   624 00003D42 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   625 00003D43 7424                <1>     jz .lockFileRegion
   626 00003D45 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   627 00003D4B 740B                <1>     jz .unlockShare ;Jump if a local file only
   628 00003D4D 50                  <1>     push rax
   629 00003D4E B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   630 00003D53 CD2F                <1>     int 2Fh
   631 00003D55 5B                  <1>     pop rbx
   632 00003D56 EB06                <1>     jmp short .exitSelect
   633                              <1> .unlockShare:
   634 00003D58 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   635                              <1> .exitSelect:
   636 00003D5E 0F827E3F0000        <1>     jc extErrExit
   637 00003D64 E96B3F0000          <1>     jmp extGoodExit
   638                              <1> .lockFileRegion:
   639 00003D69 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   640 00003D6F 740B                <1>     jz .lockShare   ;Jump if a local file only
   641 00003D71 50                  <1>     push rax
   642 00003D72 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   643 00003D77 CD2F                <1>     int 2Fh
   644 00003D79 5B                  <1>     pop rbx
   645 00003D7A EBE2                <1>     jmp short .exitSelect
   646                              <1> .lockShare:
   647 00003D7C FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   648 00003D82 EBDA                <1>     jmp short .exitSelect
   649                              <1> .badFunction:
   650 00003D84 B801000000          <1>     mov eax, errInvFnc
   651 00003D89 668905(33040000)    <1>     mov word [errorExCde], ax
   652 00003D90 E94D3F0000          <1>     jmp extErrExit
   653                              <1> 
   654                              <1> setHandleCount:    ;ah = 67h
   655                              <1> ;Input: bx = Size of new file handle table for process
   656                              <1> ;Output: CF=NC -> Ok to make more handles
   657                              <1> ;        CF=CY -> ax = Error code
   658                              <1> ;Five cases to consider:
   659                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   660                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   661                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   662                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   663                              <1> ;   Special case below, cannot be enacted directly by caller.
   664                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   665 00003D95 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   666 00003D98 488B2D(47040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   667 00003D9F 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   668 00003DA3 7765                <1>     ja short .moreHdlsReq
   669 00003DA5 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   670 00003DAA 771A                <1>     ja short .reduceExternal
   671                              <1>     ;Here if 20 handles or less requested
   672 00003DAC 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   673 00003DB2 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   674 00003DB4 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   675 00003DB6 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   676                              <1> .exitGood:
   677 00003DBC E9133F0000          <1>     jmp extGoodExit
   678                              <1> .exitBad:
   679 00003DC1 E91C3F0000          <1>     jmp extErrExit
   680                              <1> .reduceExternal:
   681                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   682                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   683                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   684                              <1> ; and failing that, it will free it and then allocate a new block.
   685 00003DC6 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   686 00003DCA E8E9000000          <1>     call .checkOpenHandles
   687 00003DCF 72F0                <1>     jc short .exitBad
   688                              <1>     ;Recall ebx has the numebr of handles here
   689 00003DD1 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   690 00003DD6 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   691 00003DDA EBE0                <1>     jmp short .exitGood
   692                              <1> .reduceFree:
   693                              <1> ;Entered once we know that we have an external block
   694                              <1> ;Now we close all handles above JFT size
   695 00003DDC 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   696 00003DE0 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   697 00003DE3 E8D0000000          <1>     call .checkOpenHandles
   698 00003DE8 72D7                <1>     jc short .exitBad
   699 00003DEA BB14000000          <1>     mov ebx, dfltJFTsize
   700 00003DEF 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   701                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   702 00003DF1 E8B9000000          <1>     call .copyBlock
   703                              <1>     ;Now we can free the old block
   704 00003DF6 4989F0              <1>     mov r8, rsi
   705 00003DF9 53                  <1>     push rbx
   706 00003DFA E8431F0000          <1>     call freeMemory
   707 00003DFF 5B                  <1>     pop rbx
   708 00003E00 72BF                <1>     jc short .exitBad
   709 00003E02 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   710 00003E06 31C0                <1>     xor eax, eax
   711                              <1> .exitGood2:
   712 00003E08 EBB2                <1>     jmp short .exitGood
   713                              <1> .moreHdlsReq:
   714 00003E0A 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   715 00003E10 7507                <1>     jne short .okToExpand
   716 00003E12 B801000000          <1>     mov eax, errInvFnc
   717                              <1> .exitBad2:
   718 00003E17 EBA8                <1>     jmp short .exitBad
   719                              <1> .okToExpand:
   720                              <1> ;Need to check if we are external and reallocating. 
   721                              <1> ;   If we are, can we realloc or do we need to free and save?
   722 00003E19 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   723 00003E1F 762E                <1>     jbe short .moreFromJFT
   724 00003E21 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   725 00003E25 E83C000000          <1>     call .reallocBlock
   726 00003E2A 7390                <1>     jnc short .exitGood
   727 00003E2C E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   728 00003E31 728E                <1>     jc short .exitBad
   729 00003E33 4989F0              <1>     mov r8, rsi ;Free the source block
   730 00003E36 53                  <1>     push rbx
   731 00003E37 57                  <1>     push rdi    ;Save the new pointer here
   732 00003E38 55                  <1>     push rbp
   733 00003E39 E8041F0000          <1>     call freeMemory
   734 00003E3E 5D                  <1>     pop rbp
   735 00003E3F 5F                  <1>     pop rdi
   736 00003E40 5B                  <1>     pop rbx
   737 00003E41 7317                <1>     jnc short .freeOk ;Free'd the original block
   738 00003E43 50                  <1>     push rax    ;Save error code on stack
   739 00003E44 4989F8              <1>     mov r8, rdi ;Free the new block
   740 00003E47 E8F61E0000          <1>     call freeMemory
   741 00003E4C 58                  <1>     pop rax
   742 00003E4D EBC8                <1>     jmp short .exitBad2
   743                              <1> .moreFromJFT:
   744 00003E4F 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   745 00003E53 E826000000          <1>     call .getBlock
   746 00003E58 72BD                <1>     jc short .exitBad2
   747                              <1> .freeOk:
   748 00003E5A 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   749 00003E5E 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   750 00003E62 31C0                <1>     xor eax, eax
   751 00003E64 EBA2                <1>     jmp short .exitGood2
   752                              <1> .reallocBlock:
   753                              <1> ;Input:
   754                              <1> ;   rsi -> Source block to reallocate
   755                              <1> ;   ebx = Number of handles
   756                              <1> ;   rbp -> Current PSP
   757                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   758                              <1> ;                 ebx = Number of handles
   759                              <1> ;        CF=CY => Error, EAX has error code
   760 00003E66 56                  <1>     push rsi ;Save external pointer on stack
   761 00003E67 53                  <1>     push rbx    ;Save number of handles on stack
   762 00003E68 55                  <1>     push rbp
   763 00003E69 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   764 00003E6F C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   765 00003E72 4989F0              <1>     mov r8, rsi
   766 00003E75 E8D01F0000          <1>     call reallocMemory
   767 00003E7A 5D                  <1>     pop rbp
   768 00003E7B 5B                  <1>     pop rbx
   769 00003E7C 5E                  <1>     pop rsi ;Get external pointer back in rsi
   770                              <1>     return
    13                              <2> %%_ret:
    14 00003E7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   771                              <1> .getBlock:
   772                              <1> ;rsi -> Source block for copy 
   773                              <1> ;ebx = Number of new handles
   774                              <1> ;Output: rsi and ebx as before
   775                              <1> ;        rdi -> New block
   776                              <1> ;IF CF=CY, bad exit
   777 00003E7E 53                  <1>     push rbx    ;bx has the number of handles we want
   778 00003E7F 56                  <1>     push rsi
   779 00003E80 55                  <1>     push rbp
   780 00003E81 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   781 00003E87 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   782 00003E8A 89D9                <1>     mov ecx, ebx
   783 00003E8C C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   784 00003E8F 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   785 00003E90 E8A91C0000          <1>     call allocateMemory ;Allocate memory 
   786 00003E95 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   787 00003E96 5D                  <1>     pop rbp ;Get the PSP pointer back
   788 00003E97 5E                  <1>     pop rsi ;Get the source pointer back
   789 00003E98 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   790                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003E99 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003E9B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   791 00003E9C 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   792 00003E9F 57                  <1>     push rdi
   793 00003EA0 31C0                <1>     xor eax, eax
   794 00003EA2 FFC8                <1>     dec eax
   795 00003EA4 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   796 00003EA6 5F                  <1>     pop rdi
   797 00003EA7 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   798 00003EA9 E801000000          <1>     call .copyBlock ;Copy all the handles over
   799                              <1>     return
    13                              <2> %%_ret:
    14 00003EAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   800                              <1> .copyBlock:
   801                              <1> ;Input: rsi -> Source block
   802                              <1> ;       rdi -> Destination block
   803                              <1> ;       ecx = Number of handles to copy
   804 00003EAF 56                  <1>     push rsi
   805 00003EB0 57                  <1>     push rdi
   806 00003EB1 51                  <1>     push rcx
   807 00003EB2 F3A4                <1>     rep movsb
   808 00003EB4 59                  <1>     pop rcx
   809 00003EB5 5F                  <1>     pop rdi
   810 00003EB6 5E                  <1>     pop rsi
   811                              <1>     return
    13                              <2> %%_ret:
    14 00003EB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   812                              <1> .checkOpenHandles:
   813                              <1> ;Checks for open handles in the range that is to be freed.
   814                              <1> ;If any found, error exit
   815                              <1> ;Input: rsi -> Where to start searching
   816 00003EB8 56                  <1>     push rsi
   817 00003EB9 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   818                              <1> .cohLoop:
   819 00003EBD 803EFF              <1>     cmp byte [rsi], -1
   820 00003EC0 7509                <1>     jne .checkOpenHandlesBadExit
   821 00003EC2 48FFC6              <1>     inc rsi
   822 00003EC5 FFC9                <1>     dec ecx
   823 00003EC7 75F4                <1>     jnz .cohLoop
   824 00003EC9 5E                  <1>     pop rsi
   825                              <1>     return
    13                              <2> %%_ret:
    14 00003ECA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   826                              <1> .checkOpenHandlesBadExit:
   827 00003ECB B804000000          <1>     mov eax, errNhl
   828 00003ED0 F9                  <1>     stc
   829 00003ED1 5E                  <1>     pop rsi
   830                              <1>     return
    13                              <2> %%_ret:
    14 00003ED2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> 
   832                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   833                              <1>     ;Input: bx = File to flush
   834 00003ED3 E801160000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   835 00003ED8 0F82043E0000        <1>     jc extErrExit
   836 00003EDE E852140000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   837                              <1>     ;Now we check if the device is a char, disk or net file and commit
   838 00003EE3 E847010000          <1>     call commitMain
   839 00003EE8 0F82F43D0000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   840                              <1> .exitOk:
   841 00003EEE 30C0                <1>     xor al, al
   842 00003EF0 E80F390000          <1>     call getUserRegs
   843 00003EF5 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   844                              <1>     return
    13                              <2> %%_ret:
    14 00003EF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   845                              <1> 
   846                              <1> xOpenHdl:    ;EAX = 6C00h, Extended open/create file
   847                              <1> ;Input: AL=0 (checked)
   848                              <1> ;       BL = Open mode (like AL for normal Open call)
   849                              <1> ;           BL[7] = Set if inherit file handle allowed
   850                              <1> ;           BL[4-6] = SHARE mode
   851                              <1> ;           BL[3] = Reserved, 0 
   852                              <1> ;           BL[0-2] = Access mode
   853                              <1> ;       BH = Extended Open Flags
   854                              <1> ;           BH[0-4] = Reserved, 0
   855                              <1> ;           BH[5] = Set means Fail all Int 24h calls by default
   856                              <1> ;           BH[6] = Set means Commit after each write operation
   857                              <1> ;           BH[7] = Reserved, 0 
   858                              <1> ;       CL = Create Attributes if creating
   859                              <1> ;           CL[0] = Sets Read-Only Bit in Directory Entry
   860                              <1> ;           CL[1] = Sets Hidden Bit in Directory Entry
   861                              <1> ;           CL[2] = Sets System Bit in Directory Entry
   862                              <1> ;           CL[3] = Sets Volume label in Directory Entry (becomes exclusive)
   863                              <1> ;           CL[4] = Reserved, 0
   864                              <1> ;           CL[5] = Sets Archive Bit in Directory Entry
   865                              <1> ;           CL[6-7] = Reserved, 0
   866                              <1> ;       CH = [SERVER CALL ONLY] Search attribute for file
   867                              <1> ;       DL = Actions if file exist or not during create/open
   868                              <1> ;           DL[4-7]: Action if file does not exist
   869                              <1> ;               0000b = Fail the call, file not found.
   870                              <1> ;               0001b = Create the file specified.
   871                              <1> ;           DL[0-3]: Action if file does exist
   872                              <1> ;               0000b = Fail the call, access denied.
   873                              <1> ;               0001b = Open the file if it exists
   874                              <1> ;               0010b = Truncate and Create file
   875                              <1> ;       Note, DL cannot be 0 as this is a fail if exist and doesnt exist
   876                              <1> ;       DH = 0
   877                              <1> ;       RSI -> ASCIIZ name of path to operate on
   878                              <1> ;Output: CF=NC: Call succeeded
   879                              <1> ;           EAX = File handle for filespec specified
   880                              <1> ;           ECX = Action undertaken by call
   881                              <1> ;               01h = File opened
   882                              <1> ;               02h = File created
   883                              <1> ;               03h = File truncated and created
   884                              <1> ;       CF=CY: Call failed.
   885                              <1> ;           AX = Error code
   886                              <1> ;Start by saving the input vars
   887 00003EF9 66891D(B6070000)    <1>     mov word [wEOOpenMode], bx  ;Save the open flags
   888 00003F00 66890D(B8070000)    <1>     mov word [wEOAttribs], cx   ;Save attribute bytes
   889 00003F07 668915(B4070000)    <1>     mov word [wEOActions], dx   ;Save these bit for later
   890 00003F0E 488935(BA070000)    <1>     mov qword [pszEOfile], rsi  ;Save filename ptr
   891                              <1> ;Now we sanity check that what we have is meaningful
   892 00003F15 84C0                <1>     test al, al
   893 00003F17 740A                <1>     jz .okStart
   894                              <1> .badParmExit:
   895 00003F19 B857000000          <1>     mov eax, errBadParam
   896 00003F1E E9BF3D0000          <1>     jmp extErrExit
   897                              <1> .okStart:
   898 00003F23 84D2                <1>     test dl, dl                 ;Are we a fail if exist and dont exist?
   899 00003F25 74F2                <1>     jz .badParmExit
   900 00003F27 66F7C2ECFF          <1>     test dx, ~(eoActCreate | eoActOpen | eoActTruncate)
   901 00003F2C 75EB                <1>     jnz .badParmExit    ;If set any bits we are not allowed to set, fail!
   902 00003F2E 80E203              <1>     and dl, eoActOpen | eoActTruncate   ;Isolate the file exist bits
   903 00003F31 80FA03              <1>     cmp dl, eoActOpen | eoActTruncate   ;They cannot both be set
   904 00003F34 74E3                <1>     je .badParmExit     
   905                              <1> ;Test to check if the force fail bit is set
   906 00003F36 66F7C30020          <1>     test bx, openFailOnI24  ;Is the Int 24h Force Fail bit set?
   907 00003F3B 7509                <1>     jnz .noFailI24
   908 00003F3D 66810D(B2070000)02- <1>     or word [wEOFlags], eoFailI24   ;Set corresponding bit in EO flags
   908 00003F45 00                  <1>
   909                              <1> .noFailI24:
   910 00003F46 66810D(B2070000)01- <1>     or word [wEOFlags], eoInExtOpen ;Entering Extended Open
   910 00003F4E 00                  <1>
   911 00003F4F 4889F2              <1>     mov rdx, rsi    ;Move the pointer into rdx as required
   912 00003F52 66813D(B4070000)10- <1>     cmp word [wEOActions], eoActCreate  ;Do we create if one doesnt exist?
   912 00003F5A 00                  <1>
   913 00003F5B 7524                <1>     jne .notCreateNew
   914                              <1> ;----DO NEW CREATE HERE----
   915                              <1> ;cx = File attributes (same as search attributes for find first)
   916                              <1> ;rdx = Ptr to ASCIZ filename to create
   917 00003F5D E8B3FDFFFF          <1>     call createNewFile
   918 00003F62 0F827A3D0000        <1>     jc extErrExit
   919 00003F68 66813D(B2070000)00- <1>     cmp word [wEOFlags], 0  ;Cleared by Network drives
   919 00003F70 00                  <1>
   920 00003F71 0F845D3D0000        <1>     jz extGoodExit  ;Exit immediately, vars set by Network drive
   921 00003F77 B902000000          <1>     mov ecx, eoRetActCreate
   922 00003F7C E99D000000          <1>     jmp .localGoodExit
   923                              <1> .notCreateNew:
   924 00003F81 66F705(B4070000)01- <1>     test word [wEOActions], eoActOpen   ;If open bit set, open
   924 00003F89 00                  <1>
   925 00003F8A 7531                <1>     jnz .openFile
   926                              <1> ;----DO TRUNCATE CREATE HERE----
   927                              <1> ;cx = File attributes (same as search attributes for find first)
   928                              <1> ;rdx = Ptr to ASCIZ filename to create
   929 00003F8C E8F2F6FFFF          <1>     call createFileHdl
   930 00003F91 0F824B3D0000        <1>     jc extErrExit
   931 00003F97 66813D(B2070000)00- <1>     cmp word [wEOFlags], 0  ;Cleared by Network drives
   931 00003F9F 00                  <1>
   932 00003FA0 0F842E3D0000        <1>     jz extGoodExit  ;Exit immediately, vars set by Network drive
   933                              <1> ;Now check if we created a new file or an existing file.
   934 00003FA6 B902000000          <1>     mov ecx, eoRetActCreate ;Anticipate new create
   935 00003FAB 66F705(B2070000)04- <1>     test word [wEOFlags], eoFileNoExist   ;Set if file was newly created
   935 00003FB3 00                  <1>
   936 00003FB4 7568                <1>     jnz .localGoodExit
   937 00003FB6 B903000000          <1>     mov ecx, eoRetActTruncate   ;Instead we truncated!
   938 00003FBB EB61                <1>     jmp short .localGoodExit
   939                              <1> .openFile:
   940                              <1> ;----DO OPEN HERE----
   941                              <1> ;al = Open mode, to open file with
   942                              <1> ;cl = Server call only, search mode for file to search for
   943                              <1> ;rdx = Ptr to ASCIZ filename to open if it exists
   944 00003FBD 89D8                <1>     mov eax, ebx    ;Move the normal open flags to al for opening
   945                              <1> ;CH has server search attribs if this is a server call.
   946                              <1> ;Else this is a harmless mov
   947 00003FBF 88E9                <1>     mov cl, ch
   948 00003FC1 E8CEF6FFFF          <1>     call openFileHdl
   949 00003FC6 7342                <1>     jnc .fileOpened
   950                              <1> ;Check if the file doesnt exist and if we are allowed to create one.
   951                              <1> ;Since we errored, CF is set on caller stack so we can just return
   952                              <1> ; if we dont create a file
   953 00003FC8 66813D(B2070000)00- <1>     cmp word [wEOFlags], 0  ;Cleared by Network drives.
   953 00003FD0 00                  <1>
   954                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003FD1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003FD3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   955 00003FD4 663D0200            <1>     cmp ax, errFnf  ;Any error other than file not found errors here
   956                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003FD8 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003FDA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   957                              <1> ;Here we know that the file doesn't exist
   958 00003FDB 66F705(B4070000)10- <1>     test word [wEOActions], eoActCreate   ;Do we now create file?
   958 00003FE3 00                  <1>
   959 00003FE4 0F84F83C0000        <1>     jz extErrExit   ;Bubble FNF error
   960                              <1> ;Else setup the create here.
   961                              <1> ;cx = File attributes (same as search attributes for find first)
   962                              <1> ;rdx = Ptr to ASCIZ filename to create
   963 00003FEA 488B15(BA070000)    <1>     mov rdx, qword [pszEOfile]
   964 00003FF1 0FB70D(B8070000)    <1>     movzx ecx, word [wEOAttribs]
   965 00003FF8 E886F6FFFF          <1>     call createFileHdl
   966 00003FFD 0F82DF3C0000        <1>     jc extErrExit
   967 00004003 B902000000          <1>     mov ecx, eoRetActCreate
   968 00004008 EB14                <1>     jmp short .localGoodExit
   969                              <1> .fileOpened:
   970 0000400A 66813D(B2070000)00- <1>     cmp word [wEOFlags], 0  ;Cleared by Network drives
   970 00004012 00                  <1>
   971 00004013 0F84BB3C0000        <1>     jz extGoodExit  ;Exit immediately, vars set by Network drive
   972 00004019 B901000000          <1>     mov ecx, eoRetActOpen
   973                              <1> .localGoodExit:
   974                              <1> ;Entry: ax = File Handle
   975                              <1> ;       cx = What happened (Action type)
   976 0000401E E8E1370000          <1>     call getUserRegs
   977 00004023 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx  ;Save action type 
   978 00004027 668906              <1>     mov word [rsi + callerFrame.rax], ax  ;Explicitly save handle
   979 0000402A E9A53C0000          <1>     jmp extGoodExit
   980                              <1> ;-----------------------------------:
   981                              <1> ;       Main File IO Routines       :
   982                              <1> ;-----------------------------------:
   983                              <1> commitMain:
   984                              <1> ;Commits the current SFT 
   985 0000402F E809130000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   986 00004034 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   987 00004038 F7C3C0000000        <1>     test ebx, devCharDev | devDiskNoFlush
   988                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000403E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004040 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   989 00004041 F7C300800000        <1>     test ebx, devRedir
   990 00004047 7408                <1>     jz .notNet
   991                              <1> ;Commit file net redir call and exit
   992 00004049 B807110000          <1>     mov eax, 1107h
   993 0000404E CD2F                <1>     int 2Fh
   994                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00004050 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   995                              <1> .notNet:
   996 00004051 E8413C0000          <1>     call dosCrit1Enter  ;Enter to own the disk
   997 00004056 E83C3C0000          <1>     call dosCrit1Enter  ;Enter for the flush file
   998 0000405B E854E4FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   999 00004060 B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
  1000 00004065 E8870A0000          <1>     call flushFile      ;Now file gets flushed and exit critical section
  1001 0000406A 9C                  <1>     pushfq
  1002 0000406B E884E6FFFF          <1>     call openSFT        ;Now, reopen the file in the driver 
  1003 00004070 9D                  <1>     popfq
  1004 00004071 E82B3C0000          <1>     call dosCrit1Exit   ;Release the disk
  1005                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00004076 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1006                              <1>     
  1007                              <1> outerRenameMain:
  1008                              <1> ;Wildcards in the source filename match anything.
  1009                              <1> ;Wildcards in the destination filename indicate that we retain the
  1010                              <1> ; char in the source filename.
  1011                              <1> ;All * wildcards are expanded to ? at this point
  1012                              <1> ;
  1013                              <1> ;Input:
  1014                              <1> ; filenamePtr1 -> Source path + filename pattern
  1015                              <1> ; filenamePtr2 -> New path + filename pattern
  1016                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
  1017                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
  1018 00004077 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
  1019 0000407E E8ED360000          <1>     call testCDSNet ;CF=NC => Not net
  1020 00004083 7308                <1>     jnc .notNet
  1021 00004085 B811110000          <1>     mov eax, 1111h
  1022 0000408A CD2F                <1>     int 2Fh
  1023                              <1>     return
    13                              <2> %%_ret:
    14 0000408C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1024                              <1> .notNet:
  1025                              <1> ;First check if both drives are on the same disk.
  1026 0000408D C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Errors in the disk subsystem
  1027 00004094 8A05(48050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
  1028 0000409A 8A25(C8050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
  1029 000040A0 38E0                <1>     cmp al, ah
  1030 000040A2 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
  1031 000040A4 B811000000          <1>     mov eax, errDevUnk
  1032 000040A9 F9                  <1>     stc
  1033                              <1>     return
    13                              <2> %%_ret:
    14 000040AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> .sameDrive:
  1035 000040AB E8E73B0000          <1>     call dosCrit1Enter
  1036                              <1>     ;mov byte [delChar], 0E5h    ;Set the delchar to 0E5h
  1037 000040B0 C605(30070000)FF    <1>     mov byte [openCreate], -1   ;We are creating a new file! 
  1038                              <1> ;Check if either pathsepc is simply X:\,0
  1039                              <1> ; If they are, return fail as we cannot rename the root dir
  1040 000040B7 8B05(48050000)      <1>     mov eax, dword [buffer1]
  1041 000040BD 30C0                <1>     xor al, al
  1042 000040BF 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
  1043 000040C4 0F840F010000        <1>     je .renAccDen
  1044 000040CA 8B05(C8050000)      <1>     mov eax, dword [buffer2]
  1045 000040D0 30C0                <1>     xor al, al
  1046 000040D2 3D003A5C00          <1>     cmp eax, 005C3A00h
  1047 000040D7 0F84FC000000        <1>     je .renAccDen  ;If this is the root, exit access denied
  1048                              <1> ;Find the filename portion in both buffers.
  1049 000040DD 488D3D(48050000)    <1>     lea rdi, buffer1
  1050 000040E4 E8F8000000          <1>     call .findNameInPath
  1051 000040E9 48893D(48060000)    <1>     mov qword [fname1Ptr], rdi  ;Repurpose these vars to hold ptr to filename
  1052 000040F0 488D3D(C8050000)    <1>     lea rdi, buffer2
  1053 000040F7 E8E5000000          <1>     call .findNameInPath
  1054 000040FC 48893D(50060000)    <1>     mov qword [fname2Ptr], rdi
  1055                              <1> ;Move the destination filename for wc expansion to wcd fcb name field
  1056 00004103 488D35(0F070000)    <1>     lea rsi, wcdFcbName
  1057 0000410A 4887F7              <1>     xchg rsi, rdi
  1058 0000410D E80FD3FFFF          <1>     call asciiToFCB     ;Copy the ASCIIZ filename to the FCB field
  1059                              <1> ;Now check if both destination and source directories are the same.
  1060 00004112 C605(27070000)00    <1>     mov byte [renFlags], 0 
  1061 00004119 488B35(48060000)    <1>     mov rsi, qword [fname1Ptr]
  1062 00004120 C646FF00            <1>     mov byte [rsi - 1], 0
  1063 00004124 488B3D(50060000)    <1>     mov rdi, qword [fname2Ptr]
  1064 0000412B C647FF00            <1>     mov byte [rdi - 1], 0
  1065 0000412F 488D35(48050000)    <1>     lea rsi, buffer1
  1066 00004136 488D3D(C8050000)    <1>     lea rdi, buffer2
  1067 0000413D E877380000          <1>     call compareFileNames
  1068 00004142 488B35(48060000)    <1>     mov rsi, qword [fname1Ptr]
  1069 00004149 C646FF5C            <1>     mov byte [rsi - 1], "\"
  1070 0000414D 488B3D(50060000)    <1>     mov rdi, qword [fname2Ptr]
  1071 00004154 C647FF5C            <1>     mov byte [rdi - 1], "\"
  1072 00004158 7507                <1>     jnz .renMakeFF
  1073 0000415A 800D(27070000)01    <1>     or byte [renFlags], 1 ;Set to indicate same parent directory
  1074                              <1> .renMakeFF:
  1075                              <1> ;Find First the source file with given attributes!
  1076 00004161 488D3D(48050000)    <1>     lea rdi, buffer1
  1077 00004168 FF35(48060000)      <1>     push qword [fname1Ptr]
  1078 0000416E E890D4FFFF          <1>     call getFilePathNoCanon ;We are searching for the file
  1079 00004173 8F05(48060000)      <1>     pop qword [fname1Ptr]
  1080 00004179 7263                <1>     jc .renErrExit  ;If there is no file or an error, fail it!
  1081                              <1> ;Now check the source FCB name for wildcards. Setup by the getFilePath call.
  1082                              <1> ;If a WC found, set the bit!
  1083 0000417B 488D3D(03070000)    <1>     lea rdi, fcbName
  1084 00004182 B03F                <1>     mov al, "?"
  1085 00004184 B90B000000          <1>     mov ecx, 11
  1086 00004189 F2AE                <1>     repne scasb
  1087 0000418B 7507                <1>     jne .renGo
  1088 0000418D 800D(27070000)02    <1>     or byte [renFlags], 02h ;Set that we have wildcards in source
  1089                              <1> .renGo:
  1090 00004194 E862000000          <1>     call innerRenameMain        ;Rename for the curdir file
  1091 00004199 7209                <1>     jc .renExit                 ;If fail, exit
  1092 0000419B F605(27070000)02    <1>     test byte [renFlags], 02h   ;Any Wildcards?
  1093 000041A2 7506                <1>     jnz .renWcLp                ;If wildcards, find next!
  1094                              <1> .renExit:   
  1095                              <1> ;Normal Exit!
  1096 000041A4 E8F83A0000          <1>     call dosCrit1Exit
  1097                              <1>     return
    13                              <2> %%_ret:
    14 000041A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1098                              <1> .renWcLp:
  1099 000041AA FF35(3F040000)      <1>     push qword [currentDTA] ;Save the original DTA address
  1100 000041B0 488D3D(CB070000)    <1>     lea rdi, renameFFBlk ;Use dosffblk to preserve original search template
  1101 000041B7 48893D(3F040000)    <1>     mov qword [currentDTA], rdi
  1102 000041BE E8C0CEFFFF          <1>     call findNextMain
  1103 000041C3 488B3D(3F040000)    <1>     mov rdi, qword [currentDTA]
  1104 000041CA 8F05(3F040000)      <1>     pop qword [currentDTA]  ;Get back original DTA
  1105 000041D0 73C2                <1>     jnc .renGo
  1106                              <1> ;Here error! If no more files, then we return the error code in al
  1107                              <1> ; but with CF=NC.
  1108 000041D2 3C12                <1>     cmp al, errNoFil    ;If we have a no file error, exit oki, with error code
  1109 000041D4 74CE                <1>     je .renExit
  1110 000041D6 F9                  <1>     stc                 ;Else return an actual error
  1111 000041D7 EBCB                <1>     jmp short .renExit
  1112                              <1> .renAccDen:
  1113 000041D9 B805000000          <1>     mov eax, errAccDen
  1114                              <1> .renErrExit:
  1115 000041DE F9                  <1>     stc
  1116 000041DF EBC3                <1>     jmp short .renExit
  1117                              <1> 
  1118                              <1> .findNameInPath:
  1119                              <1> ;Finds the name portion of the pathspec. Preserves all registers except rdi.
  1120                              <1> ;Input: rdi -> Filename to find the first char of the filename portion of
  1121                              <1> ;Output: rdi -> First char of the filename in path
  1122 000041E1 50                  <1>     push rax
  1123 000041E2 51                  <1>     push rcx
  1124 000041E3 E899370000          <1>     call strlen ;Get in ecx the 
  1125 000041E8 4801CF              <1>     add rdi, rcx    ;Point rdi past the terminating null
  1126 000041EB FD                  <1>     std ;Go backwards now, to find the path sep
  1127 000041EC B05C                <1>     mov al, "\"
  1128 000041EE F2AE                <1>     repne scasb   ;Now rsi points one before
  1129 000041F0 FC                  <1>     cld ;Go normal ways now
  1130 000041F1 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
  1131 000041F8 59                  <1>     pop rcx
  1132 000041F9 58                  <1>     pop rax
  1133                              <1>     return
    13                              <2> %%_ret:
    14 000041FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1134                              <1> 
  1135                              <1> innerRenameMain:
  1136                              <1> ;Entered with the current directory set for the file we will rename
  1137                              <1> ;Start by building the rename FFBlock.
  1138 000041FB 488D3D(CB070000)    <1>     lea rdi, renameFFBlk
  1139 00004202 E8A2D2FFFF          <1>     call setupFFBlock
  1140                              <1> ;Copy the found dir to rename dir
  1141 00004207 488D35(84060000)    <1>     lea rsi, curDirCopy
  1142 0000420E 488D3D(F6070000)    <1>     lea rdi, renameDir  ;Setup with a copy of the source file dir entry
  1143 00004215 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1144 0000421A F348A5              <1>     rep movsq
  1145                              <1> ;Copy the found filename to the filename portion of the source path.
  1146 0000421D 488B3D(48060000)    <1>     mov rdi, qword [fname1Ptr]
  1147 00004224 488D35(84060000)    <1>     lea rsi, qword [curDirCopy + fatDirEntry.name]
  1148 0000422B E839D2FFFF          <1>     call FCBToAsciiz
  1149                              <1> ;Check the file is not a char dev, a read-only file or a CDS directory
  1150 00004230 F605(8F060000)41    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirReadOnly
  1151 00004237 0F85AD010000        <1>     jnz .rimAccDen ;Cant rename a char file or read-only files!
  1152 0000423D F605(8F060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1153 00004244 7432                <1>     jz .srcNotDir
  1154 00004246 488D3D(48050000)    <1>     lea rdi, buffer1  ;Check this path isn't a CDS
  1155 0000424D E8F2010000          <1>     call .checkPathCDS
  1156 00004252 0F8297010000        <1>     jc .rimErrExit  ;Bubble the error code up if there is an error!
  1157                              <1> ;Since this is a dir that was found, ensure it is not a . or .. entry
  1158 00004258 8B05(E9070000)      <1>     mov eax, dword [renameFFBlk + ffBlock.asciizName]
  1159 0000425E 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Drop the upper byte
  1160 00004263 3D2E2E0000          <1>     cmp eax, ".."       ;Did we read ..<NUL> ?
  1161 00004268 0F847C010000        <1>     je .rimAccDen
  1162 0000426E 663D2E00            <1>     cmp ax, "."         ;Did we read .<NUL> ?
  1163 00004272 0F8472010000        <1>     je .rimAccDen
  1164                              <1> .srcNotDir:
  1165                              <1> ;Finally, make sure this found file has no share locks
  1166 00004278 FF35(48060000)      <1>     push qword [fname1Ptr]
  1167 0000427E 488D35(48050000)    <1>     lea rsi, buffer1
  1168 00004285 488935(48060000)    <1>     mov qword [fname1Ptr], rsi
  1169 0000428C E844020000          <1>     call checkExclusiveOwnFile   ;Now do this, saving ptrs
  1170 00004291 8F05(48060000)      <1>     pop qword [fname1Ptr]
  1171 00004297 0F8246010000        <1>     jc .rimShareErr   ;Propagate the share error code
  1172                              <1> ;Build the destination filename now in the rename dir copy directly.
  1173                              <1> ;This is because the source filename needs to be preloaded for the 
  1174                              <1> ; build routine to correctly build the filename because of the 
  1175                              <1> ; possibility of wc in destination. Also, it makes the new 
  1176                              <1> ; directory entry immediately.
  1177 0000429D 488D35(0F070000)    <1>     lea rsi, wcdFcbName
  1178 000042A4 488D3D(F6070000)    <1>     lea rdi, renameDir + fatDirEntry.name
  1179 000042AB E876010000          <1>     call .buildFilename ;Preserves pointers, and creates the new dir entry
  1180 000042B0 488B35(50060000)    <1>     mov rsi, qword [fname2Ptr]  ;Now we store the filename to the pathspec
  1181 000042B7 4887F7              <1>     xchg rsi, rdi
  1182 000042BA E8AAD1FFFF          <1>     call FCBToAsciiz
  1183                              <1> ;Ensure the two filenames are NOT the same
  1184 000042BF 488D35(48050000)    <1>     lea rsi, buffer1
  1185 000042C6 488D3D(C8050000)    <1>     lea rdi, buffer2
  1186 000042CD E8E7360000          <1>     call compareFileNames
  1187 000042D2 0F8412010000        <1>     jz .rimAccDen   ;If the names are equal, Access Denied!
  1188 000042D8 F605(27070000)01    <1>     test byte [renFlags], 1    ;If clear, different parent directories
  1189 000042DF 7433                <1>     jz .rimDiffDirs
  1190                              <1> ;Here we are in the same parent directory. Check the destination
  1191                              <1> ; file doesnt exist at all.
  1192 000042E1 E80B010000          <1>     call .checkDestNonExistant
  1193                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000042E6 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000042E8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1194                              <1> ;Point the curDir back to the source directory entry.
  1195 000042E9 488D3D(48050000)    <1>     lea rdi, buffer1    ;Search for this file again to get curdir
  1196 000042F0 E80ED3FFFF          <1>     call getFilePathNoCanon
  1197                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000042F5 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000042F7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1198                              <1> ;Now we recycle the directory entry directly.
  1199 000042F8 E846E1FFFF          <1>     call getDiskDirectoryEntry  ;So get pointer to this entry in rsi
  1200 000042FD 488D3D(F6070000)    <1>     lea rdi, renameDir  ;Get ptr to the src of the new dir entry
  1201 00004304 4887F7              <1>     xchg rsi, rdi   ;Swap the pointers
  1202 00004307 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1203 0000430C F348A5              <1>     rep movsq   ;Move it over
  1204 0000430F E97C000000          <1>     jmp .rimDone  ;Mark buffer dirty, flush and exit!
  1205                              <1> .rimDiffDirs:
  1206                              <1> ;Else check the parent directory of the destination exists. For this, we
  1207                              <1> ; replace the pathsep before the filename with a null and do a dir search.
  1208                              <1> ;We also do this to setup the vars to point to the parent directory.
  1209 00004314 488B3D(50060000)    <1>     mov rdi, qword [fname2Ptr]
  1210 0000431B 48FFCF              <1>     dec rdi ;Point to the pathsep char
  1211 0000431E 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;If we are in the root directory, skip check!
  1212 00004322 7426                <1>     je .skipParCheck
  1213 00004324 C60700              <1>     mov byte [rdi], 0   ;Place null terminator here
  1214 00004327 57                  <1>     push rdi            ;Save ptr to the null terminator on stack
  1215 00004328 FF35(48060000)      <1>     push qword [fname1Ptr]
  1216 0000432E 488D3D(C8050000)    <1>     lea rdi, buffer2
  1217 00004335 E8C2D2FFFF          <1>     call getDirPathNoCanon  ;Search for the parent directory!
  1218 0000433A 8F05(48060000)      <1>     pop qword [fname1Ptr]
  1219 00004340 5F                  <1>     pop rdi             ;Get ptr to terminator to replace back
  1220 00004341 C6075C              <1>     mov byte [rdi], "\" ;Now replace the null terminator with the pathsep
  1221 00004344 0F82A5000000        <1>     jc .rimErrExit  ;If the parent doesnt exist, exit, bubbling error code
  1222                              <1> .skipParCheck:
  1223                              <1> ;Check the destination file doesnt exist at all. Do inclusive search!
  1224 0000434A E8A2000000          <1>     call .checkDestNonExistant
  1225                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000434F 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004351 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1226                              <1> ;Destination file not found in any form, proceed finding directory space!
  1227                              <1> ;CurDirCopy and dir search vars point to the parent directory of the file
  1228                              <1> ; we were searching for. Root dir has this entry set to 0. If the file is
  1229                              <1> ; a dir, we take the parent cluster.
  1230                              <1> ;
  1231                              <1> ;To prevent file loss, we create the new directory entry first and mark 
  1232                              <1> ; the buffer dirty before deleting the original. Unless something happens
  1233                              <1> ; midway through these two operations, we should be oki
  1234 00004352 E82B010000          <1>     call .renFindDirSpace ;Returns rsi -> space for dir entry if CF=NC
  1235 00004357 0F828D000000        <1>     jc .rimAccDen
  1236 0000435D 488D3D(F6070000)    <1>     lea rdi, renameDir  ;Get ptr to the src of the new dir entry
  1237 00004364 4887F7              <1>     xchg rsi, rdi
  1238 00004367 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1239 0000436C F348A5              <1>     rep movsq
  1240 0000436F E8AEC5FFFF          <1>     call markBufferDirty    ;Written to a disk buffer, mark it dirty!
  1241                              <1> ;Now we delete the old directory entry. If this fails we end up with
  1242                              <1> ; a cross linked file. The most recent is taken to be correct.
  1243                              <1> ;Use something like CHKDSK to clean this up.
  1244 00004374 488D3D(48050000)    <1>     lea rdi, buffer1    ;Search for this file again to get curdir
  1245 0000437B E883D2FFFF          <1>     call getFilePathNoCanon
  1246                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004380 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004382 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1247 00004383 E8BBE0FFFF          <1>     call getDiskDirectoryEntry  ;Vars were setup in getFilePathNoCanon call
  1248                              <1> ;rsi points to the file entry
  1249 00004388 8A05(31070000)      <1>     mov al, byte [delChar]
  1250 0000438E 8806                <1>     mov byte [rsi], al      ;Delete the file!
  1251                              <1> .rimDone:
  1252 00004390 E88DC5FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
  1253                              <1> ;Now check if we renamed a volume label. If so, do special stuff
  1254 00004395 66F705(8F060000)08- <1>     test word [curDirCopy + fatDirEntry.attribute], dirVolumeID
  1254 0000439D 00                  <1>
  1255 0000439E 743D                <1>     jz .rimNotVolId
  1256                              <1> ;A hack, but since we should never have more than one volid in a root dir
  1257                              <1> ; we only consider the first one as valid. As a result, we copy the renamedir 
  1258                              <1> ; name into fcbName to make the function below work. We then turn off
  1259                              <1> ; WC search if it is turned on. This will prevent the WC loop from being
  1260                              <1> ; entered. WC rename will terminate as if it was not a WC rename.
  1261                              <1> ; This is harmless in the context of FCB and WC server rename :)
  1262 000043A0 50                  <1>     push rax
  1263 000043A1 56                  <1>     push rsi
  1264 000043A2 57                  <1>     push rdi
  1265 000043A3 488D35(F6070000)    <1>     lea rsi, renameDir + fatDirEntry.name
  1266 000043AA 488D3D(03070000)    <1>     lea rdi, fcbName
  1267 000043B1 B90B000000          <1>     mov ecx, 11
  1268 000043B6 F3A4                <1>     rep movsb
  1269 000043B8 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1270 000043BF 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1271 000043C1 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1272 000043C3 8805(211A0000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1273 000043C9 E8CD110000          <1>     call makVolLabel    ;Force the BPB reset
  1274 000043CE E8F8300000          <1>     call getDiskDPB     ;Force driver sync, ignore fails
  1275 000043D3 C605(27070000)00    <1>     mov byte [renFlags], 0  ;Reset the WC flags to terminate rename
  1276                              <1> .rimVolExit:
  1277 000043DA 5F                  <1>     pop rdi
  1278 000043DB 5E                  <1>     pop rsi
  1279 000043DC 58                  <1>     pop rax
  1280                              <1> .rimNotVolId:
  1281 000043DD E8CEC3FFFF          <1>     call flushAllBuffersForDPB  ;Now flush the modified buffers
  1282                              <1>     return                  ;Return CF from flush 
    13                              <2> %%_ret:
    14 000043E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1283                              <1> ;Error exits :)
  1284                              <1> .rimShareErr:
  1285 000043E3 B820000000          <1>     mov eax, errShrVio      ;Share issue so return failed with share
  1286 000043E8 EB05                <1>     jmp short .rimErrExit
  1287                              <1> .rimAccDen:
  1288 000043EA B805000000          <1>     mov eax, errAccDen
  1289                              <1> .rimErrExit:
  1290 000043EF F9                  <1>     stc
  1291                              <1>     return
    13                              <2> %%_ret:
    14 000043F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1292                              <1> ;------------------------
  1293                              <1> ;Inner rename subroutines
  1294                              <1> ;------------------------
  1295                              <1> .checkDestNonExistant:
  1296                              <1> ;Checks the destination file doesnt exist.
  1297                              <1> ;Output: CF=CY: Exit
  1298                              <1> ;        CF=NC: Ok to proceed
  1299 000043F1 0FB615(26070000)    <1>     movzx edx, byte [searchAttr]
  1300 000043F8 52                  <1>     push rdx
  1301 000043F9 C605(26070000)16    <1>     mov byte [searchAttr], dirInclusive
  1302 00004400 FF35(48060000)      <1>     push qword [fname1Ptr]
  1303 00004406 488D3D(C8050000)    <1>     lea rdi, buffer2    ;Now check that this file doesnt exist!
  1304 0000440D E8F1D1FFFF          <1>     call getFilePathNoCanon
  1305 00004412 8F05(48060000)      <1>     pop qword [fname1Ptr]
  1306 00004418 5A                  <1>     pop rdx
  1307 00004419 8815(26070000)      <1>     mov byte [searchAttr], dl
  1308 0000441F 73C9                <1>     jnc .rimAccDen  ;If file found, error!
  1309 00004421 3C02                <1>     cmp al, errFnf  ;If error not "file not found", error!
  1310 00004423 75CA                <1>     jne .rimErrExit ;Else, the file specified not found. Proceed
  1311                              <1>     return
    13                              <2> %%_ret:
    14 00004425 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1312                              <1> 
  1313                              <1> .buildFilename:
  1314                              <1> ;Preserves all registers. Builds a name in the destination buffer.
  1315                              <1> ;This buffer MUST be initialised with the original filename before
  1316                              <1> ; we run this in the event that the source buffer has any wildcards
  1317                              <1> ;Input: rsi -> Buffer to source chars from
  1318                              <1> ;       rdi -> Buffer to store chars in
  1319                              <1> ;   If a wildcard is encountered in the source, we goto next char
  1320 00004426 50                  <1>     push rax
  1321 00004427 51                  <1>     push rcx
  1322 00004428 56                  <1>     push rsi
  1323 00004429 57                  <1>     push rdi
  1324 0000442A B90B000000          <1>     mov ecx, 11 ;11 chars in an fcb name
  1325                              <1> .bflp:
  1326 0000442F AC                  <1>     lodsb   ;Get a char from the source
  1327 00004430 3C3F                <1>     cmp al, "?"
  1328 00004432 7404                <1>     je .bfNextChar
  1329 00004434 AA                  <1>     stosb   ;Store the char and advance the storage pointer
  1330 00004435 48FFCF              <1>     dec rdi ;Go back
  1331                              <1> .bfNextChar:
  1332 00004438 48FFC7              <1>     inc rdi ;Go to next space
  1333 0000443B FFC9                <1>     dec ecx
  1334 0000443D 75F0                <1>     jnz .bflp
  1335 0000443F 5F                  <1>     pop rdi
  1336 00004440 5E                  <1>     pop rsi
  1337 00004441 59                  <1>     pop rcx
  1338 00004442 58                  <1>     pop rax
  1339                              <1>     return
    13                              <2> %%_ret:
    14 00004443 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1340                              <1> 
  1341                              <1> .checkPathCDS:
  1342                              <1> ;Checks a path in rdi is not in the CDS of any drive.
  1343                              <1> ;Trashes everything.
  1344                              <1> ;Input: rdi -> Path to check isnt the CDS for any drives
  1345                              <1> ;Output:    CF=NC: Path not CDS
  1346                              <1> ;           CF=CY: Path found in CDS of some drive
  1347 00004444 57                  <1>     push rdi
  1348 00004445 E837350000          <1>     call strlen ;Get asciiz length in ecx
  1349 0000444A 5B                  <1>     pop rbx
  1350 0000444B FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
  1351 0000444D 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
  1352 00004454 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
  1353                              <1> .cpcdsDirCheck:
  1354 0000445B 4889DF              <1>     mov rdi, rbx
  1355 0000445E 51                  <1>     push rcx    ;Save the char count to check!
  1356 0000445F 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
  1357 00004460 F3A6                <1>     repe cmpsb  ;Compare while they are equal
  1358 00004462 AC                  <1>     lodsb   ;Get the last char to check in al
  1359 00004463 5E                  <1>     pop rsi ;Put rsi back to the start of the string
  1360 00004464 59                  <1>     pop rcx
  1361 00004465 750F                <1>     jne .cpcdsNeqDir
  1362                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
  1363 00004467 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
  1364 00004469 7404                <1>     je .cpcdsFound
  1365 0000446B 84C0                <1>     test al, al
  1366 0000446D 7507                <1>     jne .cpcdsNeqDir ;Proceed as normal if not null
  1367                              <1> .cpcdsFound:
  1368                              <1>     ;Here we are trying to change a current directory. Fail it!
  1369                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
  1370                              <1>     ; we initially had programmed in (with access denied error instead).
  1371 0000446F B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
  1372 00004474 F9                  <1>     stc
  1373                              <1>     return    
    13                              <2> %%_ret:
    14 00004475 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1374                              <1> .cpcdsNeqDir:
  1375 00004476 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
  1376 0000447D FFCA                <1>     dec edx
  1377 0000447F 75DA                <1>     jnz .cpcdsDirCheck
  1378                              <1>     return
    13                              <2> %%_ret:
    14 00004481 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1379                              <1> 
  1380                              <1> .renFindDirSpace:
  1381                              <1> ;Searches for directory space based on the data in the current dir copy.
  1382                              <1> ; If the file is a dir then start searching in the parent cluster 
  1383 00004482 8B05(A4070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent cluster
  1384                              <1> ;Check if the parent cluster is null. If it is, we are in the root directory 
  1385                              <1> ; and the curr dir contains the directory copy of the previously successfully 
  1386                              <1> ; searched for file, which is bogus for us here since find file doesnt set up 
  1387                              <1> ; the curDirCopy for the root dir unless we are explicitly searching for it.
  1388 00004488 85C0                <1>     test eax, eax   ;If the parent dir is null, proceed
  1389 0000448A 740D                <1>     jz .sfdsDirSkip
  1390                              <1> ;Here, the current directory copy contains valid data, which is the
  1391                              <1> ; directory entry of the parent directory we are writing in. Double check
  1392                              <1> ; this actually is a directory.
  1393 0000448C F605(8F060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1394 00004493 0F8451FFFFFF        <1>     jz .rimAccDen
  1395                              <1> .sfdsDirSkip:
  1396 00004499 8905(A8070000)      <1>     mov dword [dirClustA], eax
  1397 0000449F 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1398 000044A1 668905(AC070000)    <1>     mov word [dirSect], ax
  1399 000044A8 8905(AE070000)      <1>     mov dword [dirEntry], eax
  1400                              <1> ;Needs delchar setup. Already done in the prologue of rename!
  1401 000044AE E87CDFFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1402 000044B3 731C                <1>     jnc .dirEntryFnd
  1403 000044B5 813D(A4070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1403 000044BD 0000                <1>
  1404 000044BF 7412                <1>     je .searchBad ;Set CF and exit
  1405 000044C1 E856E0FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1406 000044C6 720B                <1>     jc .searchBad
  1407 000044C8 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1408 000044CD 7404                <1>     je .searchBad
  1409                              <1>     ;Else eax = Newly allocated cluster
  1410 000044CF EBB1                <1>     jmp short .renFindDirSpace
  1411                              <1> .dirEntryFnd:
  1412 000044D1 F8                  <1>     clc
  1413                              <1>     return
    13                              <2> %%_ret:
    14 000044D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1414                              <1> .searchBad:
  1415 000044D3 F9                  <1>     stc
  1416                              <1>     return
    13                              <2> %%_ret:
    14 000044D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1417                              <1> 
  1418                              <1> checkExclusiveOwnFile:
  1419                              <1> ;We check that the program carrying out this action owns the file exclusively. 
  1420                              <1> ; This function will fail IF there are handles open, and thus makes it an 
  1421                              <1> ; ideal candidate for checking in RENAME, for both filenames, DELETE and 
  1422                              <1> ; SETFILEATTRIBS if we have any open files. If we do, then we should get 
  1423                              <1> ; a Share error and thus it would prevent us from proceeding.
  1424                              <1> ;
  1425                              <1> ;If SHARE not loaded, ALL handles should be closed manually before 
  1426                              <1> ; Rename or Delete.
  1427                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1428                              <1> ;       currDirCopy = Directory entry for the file
  1429                              <1> ;Output: Clobbers rcx, rdx.
  1430 000044D5 50                  <1>     push rax
  1431 000044D6 53                  <1>     push rbx
  1432 000044D7 56                  <1>     push rsi
  1433 000044D8 57                  <1>     push rdi
  1434                              <1> 
  1435                              <1>     ;The below in DOS is passed in by the caller, here we preserve the 
  1436                              <1>     ; caller's regs and proceed to set the ptrs ourselves.
  1437 000044D9 488D1D(84060000)    <1>     lea rbx, curDirCopy
  1438 000044E0 488D731A            <1>     lea rsi, qword [rbx + fatDirEntry.fstClusLo]
  1439                              <1>     ;At this point, the filename is fully normalised due to the 
  1440                              <1>     ; way we do path parsing. Thus, we can proceed safely.
  1441                              <1> 
  1442                              <1>     ;The following closes most recent shared handles referencing it
  1443                              <1>     ;Only if sharePSP, Requester NetID are equal and openMode not Compat
  1444                              <1>     ; mode and if there is precisely 1  
  1445 000044E4 FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1446                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1447 000044EA 488D3D(480D0000)    <1>     lea rdi, scratchSFT
  1448 000044F1 E83F0E0000          <1>     call setCurrentSFT
  1449 000044F6 B802000000          <1>     mov eax, openRWAcc  ;Set open mode
  1450 000044FB C605(30070000)00    <1>     mov byte [openCreate], 0    ;We test by opening.
  1451 00004502 57                  <1>     push rdi    ;Save the scratch SFT ptr
  1452 00004503 E838030000          <1>     call buildSFTEntry  ;This will never fail. If it does, shareFile will catch
  1453 00004508 5F                  <1>     pop rdi
  1454 00004509 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1455 0000450E 66C747021000        <1>     mov word [rdi + sft.wOpenMode], openDenRWShr ;Prevent everything temporarily
  1456 00004514 E88E400000          <1>     call shareFile  ;Puts an sft handle in rdi
  1457 00004519 720B                <1>     jc .exit
  1458 0000451B 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0 ;Now free it and close it
  1459 00004520 E816400000          <1>     call closeShareCallWrapper 
  1460 00004525 F8                  <1>     clc
  1461                              <1> .exit:
  1462 00004526 5F                  <1>     pop rdi
  1463 00004527 5E                  <1>     pop rsi
  1464 00004528 5B                  <1>     pop rbx
  1465 00004529 58                  <1>     pop rax
  1466                              <1>     ;mov rbp, qword [workingDPB] ;This seems always set so no need for it.
  1467                              <1>     return
    13                              <2> %%_ret:
    14 0000452A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1468                              <1> 
  1469                              <1> outerDeleteMain:
  1470                              <1> ;Internal current dir must be populated with dir entry
  1471                              <1> ; and internal DOS directory variables now point to this entry.
  1472                              <1> ;Checks if the file is a char device or read only.
  1473                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1474                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1475                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1476                              <1> ;         CF=NC => File deleted
  1477                              <1> 
  1478                              <1> ;Hardcode delChar for now. *.* dels may be considered for optimisation later
  1479                              <1>     ;mov byte [delChar], 0E5h
  1480 0000452B 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
  1481 00004532 E839320000          <1>     call testCDSNet ;CF=NC => Not net
  1482 00004537 7308                <1>     jnc .notNet
  1483 00004539 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1484 0000453E CD2F                <1>     int 2Fh
  1485                              <1>     return
    13                              <2> %%_ret:
    14 00004540 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1486                              <1> .notNet:
  1487 00004541 B805000000          <1>     mov eax, errAccDen  
  1488 00004546 F605(8F060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1489 0000454D 754E                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1490 0000454F E84B000000          <1>     call deleteMain
  1491 00004554 7247                <1>     jc .exitBad
  1492                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1493 00004556 B03F                <1>     mov al, "?"
  1494 00004558 488D3D(03070000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1495 0000455F B90B000000          <1>     mov ecx, 11
  1496 00004564 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1497 00004566 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1498 00004568 F8                  <1>     clc
  1499                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00004569 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1500                              <1> .serverWCloop:
  1501 0000456A FF35(3F040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1502 00004570 488D3D(59060000)    <1>     lea rdi, dosffblock
  1503 00004577 57                  <1>     push rdi    ;Push this address onto the stack
  1504 00004578 E82CCFFFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1505 0000457D 8F05(3F040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1506 00004583 E8FBCAFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1507 00004588 8F05(3F040000)      <1>     pop qword [currentDTA]
  1508                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000458E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004590 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1509 00004591 E809000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1510 00004596 73D2                <1>     jnc .serverWCloop     
  1511                              <1> ;Stop as soon as an error occurs
  1512 00004598 3C12                <1>     cmp al, errNoFil    ;Was the error no more files?
  1513                              <1>     rete    ;If it was, return with CF=NC and error code in al
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000459A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000459C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1514                              <1> ;Else let the error propagate with CF=CY again
  1515                              <1> .exitBad:
  1516 0000459D F9                  <1>     stc
  1517                              <1>     return
    13                              <2> %%_ret:
    14 0000459E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1518                              <1> 
  1519                              <1> deleteMain:
  1520                              <1> ;Now unlink FAT chain and then clear directory entry
  1521                              <1> ;Get the start cluster of this file
  1522                              <1> ;Input:
  1523                              <1> ; The file must have NOT be read-only.
  1524                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1525                              <1> ;     - curDirCopy must be filled with the file directory information
  1526                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1527                              <1> ;Output: CF=NC => Success, 
  1528                              <1> ; If not net CDS:
  1529                              <1> ;   rsi keeps pointing to directory entry.
  1530                              <1> ;   al = First char of the file that was deleted.
  1531                              <1> ;        CF=CY => Error
  1532                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1533 0000459F E831FFFFFF          <1>     call checkExclusiveOwnFile   ;Also cannot delete if open handle
  1534                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000045A4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000045A6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1535 000045A7 55                  <1>     push rbp
  1536 000045A8 488B2D(33070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1537 000045AF 52                  <1>     push rdx
  1538 000045B0 0FB715(9E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1539 000045B7 0FB705(98060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1540 000045BE C1E010              <1>     shl eax, 10h
  1541 000045C1 09D0                <1>     or eax, edx ;Add low bits to eax
  1542 000045C3 5A                  <1>     pop rdx
  1543 000045C4 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1544 000045C6 7407                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1545 000045C8 E899C7FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1546 000045CD 7249                <1>     jc .exitBad
  1547                              <1> .skipUnlink:
  1548                              <1>     ;Now replace the first char of the directory to 0E5h
  1549                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1550 000045CF E86FDEFFFF          <1>     call getDiskDirectoryEntry
  1551 000045D4 7242                <1>     jc .exitBad
  1552 000045D6 8A05(31070000)      <1>     mov al, byte [delChar]
  1553 000045DC 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1554 000045DE E83FC3FFFF          <1>     call markBufferDirty
  1555                              <1> ;Now check if this was a volume label. If so, do special stuff
  1556 000045E3 66F705(8F060000)08- <1>     test word [curDirCopy + fatDirEntry.attribute], dirVolumeID
  1556 000045EB 00                  <1>
  1557 000045EC 7421                <1>     jz .notVolId
  1558                              <1> ;al and rsi are used for buildSFT!
  1559 000045EE 50                  <1>     push rax    ;Preserve first char of file name
  1560 000045EF 56                  <1>     push rsi    ;Preserve pointer to the first char in dir entry
  1561 000045F0 57                  <1>     push rdi
  1562 000045F1 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1563 000045F8 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1564 000045FA 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1565 000045FC 8805(211A0000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1566 00004602 E88C0F0000          <1>     call delVolLabel    ;Force the BPB reset
  1567 00004607 E8BF2E0000          <1>     call getDiskDPB     ;Force the driver sync
  1568 0000460C 5F                  <1>     pop rdi
  1569 0000460D 5E                  <1>     pop rsi
  1570 0000460E 58                  <1>     pop rax
  1571                              <1> .notVolId:
  1572                              <1> ;CF is clear here
  1573 0000460F E89CC1FFFF          <1>     call flushAllBuffersForDPB
  1574 00004614 5D                  <1>     pop rbp
  1575                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004615 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004617 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1576                              <1> .exitBad:
  1577 00004618 5D                  <1>     pop rbp
  1578 00004619 F9                  <1>     stc
  1579                              <1>     return
    13                              <2> %%_ret:
    14 0000461A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1580                              <1> 
  1581                              <1> openMain:
  1582                              <1> ;Input: ax = Open mode
  1583                              <1> ;       [currentSFT] = SFT we are building
  1584                              <1> ;       [workingCDS] = CDS of drive to access
  1585                              <1> ;       [workingDPB] = DPB of drive to access
  1586                              <1> ;Ouput: CF=CY => Error, eax has error code
  1587 0000461B E8EF000000          <1>     call setOpenMode    ;AX preserved
  1588                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004620 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004622 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1589 00004623 E8150D0000          <1>     call getCurrentSFT
  1590 00004628 884702              <1>     mov byte [rdi + sft.wOpenMode], al  ;Set low byte, preserve high byte
  1591 0000462B E8480F0000          <1>     call setExtOpenMode ;Set high open mode bits too if an extended open call
  1592 00004630 488B35(3B070000)    <1>     mov rsi, qword [workingCDS]
  1593 00004637 30E4                <1>     xor ah, ah      ;al has the access and share modes
  1594 00004639 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1595 00004640 7528                <1>     jne .notNet
  1596                              <1> .redirOpen:
  1597 00004642 66F705(B2070000)01- <1>     test word [wEOFlags], eoInExtOpen
  1597 0000464A 00                  <1>
  1598 0000464B 750A                <1>     jnz .redirExtOpen   
  1599 0000464D 50                  <1>     push rax    ;Push open mode onto stack
  1600 0000464E B816110000          <1>     mov eax, 1116h  ;Open remote file on all net drives
  1601 00004653 CD2F                <1>     int 2Fh
  1602 00004655 58                  <1>     pop rax
  1603                              <1>     return
    13                              <2> %%_ret:
    14 00004656 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1604                              <1> .redirExtOpen:
  1605 00004657 50                  <1>     push rax
  1606 00004658 B82E110000          <1>     mov eax, 112Eh  ;Extended open redir call
  1607 0000465D CD2F                <1>     int 2Fh
  1608 0000465F 5B                  <1>     pop rbx
  1609 00004660 66C705(B2070000)00- <1>     mov word [wEOFlags], 0
  1609 00004668 00                  <1>
  1610                              <1>     return
    13                              <2> %%_ret:
    14 00004669 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1611                              <1> .notNet:
  1612 0000466A 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1613 00004670 75D0                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1614 00004672 E820360000          <1>     call dosCrit1Enter
  1615                              <1> ;Ensure our disk attributes permit opening
  1616 00004677 8A15(8F060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1617 0000467D F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1618 00004680 752C                <1>     jnz .accDenExit
  1619 00004682 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1620 00004685 7439                <1>     jz short .openFile      ;If not, proceed.
  1621                              <1> ;Else, we check if we are permitted to open this file.
  1622 00004687 0FB74F02            <1>     movzx ecx, word [rdi + sft.wOpenMode]   ;Get the user-set open mode
  1623 0000468B F7C100800000        <1>     test ecx, openSFTFCB  ;We consider FCBs here for future net use 
  1624 00004691 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1625 00004693 89CA                <1>     mov edx, ecx
  1626 00004695 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1627 0000469B 81FA70000000        <1>     cmp edx, openNetFCBShr ;Is this a net server FCB open?
  1628 000046A1 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1629 000046A3 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1630 000046A9 80F900              <1>     cmp cl, openRdAcc  ;Are we asking for more than read on ro file?
  1631 000046AC 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1632                              <1> .accDenExit:
  1633 000046AE B805000000          <1>     mov eax, errAccDen
  1634 000046B3 EB20                <1>     jmp short .errorExit
  1635                              <1> .fcbOpen:
  1636 000046B5 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set RO access only. Preserve share/inhrt/upper bits
  1637 000046BA 66894F02            <1>     mov word [rdi + sft.wOpenMode], cx
  1638 000046BE 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1639                              <1> .openFile:
  1640 000046C0 C605(30070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1641                              <1>     ;mov byte [delChar], 0E5h
  1642 000046C7 E874010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1643 000046CC 7207                <1>     jc .errorExit
  1644 000046CE E8D43E0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1645 000046D3 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1646                              <1> .errorExit:
  1647 000046D5 E8C7350000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1648                              <1>     return
    13                              <2> %%_ret:
    14 000046DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1649                              <1> .fileSharedOk:
  1650 000046DB B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1651 000046E0 E8580C0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1652 000046E5 FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1653 000046EB E8B1350000          <1>     call dosCrit1Exit
  1654                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1655                              <1> ;CurrentSFT ***must*** be set before entering here
  1656 000046F0 E8480C0000          <1>     call getCurrentSFT
  1657 000046F5 E8FADFFFFF          <1>     call openSFT    ;This takes input rdi-> currentSFT. Preserves it too
  1658 000046FA 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
  1659 00004700 7501                <1>     jnz .netOpen
  1660                              <1>     return
    13                              <2> %%_ret:
    14 00004702 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1661                              <1> .netOpen:
  1662 00004703 488B05(47040000)    <1>     mov rax, qword [currentPSP]
  1663 0000470A 48894747            <1>     mov qword [rdi + sft.qPID], rax
  1664                              <1>     return
    13                              <2> %%_ret:
    14 0000470E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1665                              <1> 
  1666                              <1> setOpenMode:
  1667                              <1> ;Checks that the open mode is ok for us viz. share bits
  1668                              <1> ;Preserves al
  1669                              <1> ;Input: al = Open mode for the file open.
  1670 0000470F 53                  <1>     push rbx
  1671                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1672 00004710 F605(8F060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1673 00004717 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1674 00004719 88C3                <1>     mov bl, al
  1675 0000471B 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1676 0000471E 803D(2B070000)FF    <1>     cmp byte [dosInvoke], -1    
  1677 00004725 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1678 00004727 80FB70              <1>     cmp bl, openNetFCBShr ;Test share mode for netFCB
  1679 0000472A 7405                <1>     je .s2
  1680                              <1> .s1:
  1681 0000472C 80FB40              <1>     cmp bl, openDenNoShr
  1682 0000472F 770D                <1>     ja .somBad
  1683                              <1> .s2:
  1684 00004731 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1685 00004733 80E30F              <1>     and bl, 0Fh
  1686 00004736 80FB02              <1>     cmp bl, openRWAcc
  1687 00004739 7703                <1>     ja .somBad
  1688 0000473B 5B                  <1>     pop rbx
  1689 0000473C F8                  <1>     clc
  1690                              <1>     return
    13                              <2> %%_ret:
    14 0000473D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1691                              <1> .somBad:
  1692 0000473E 5B                  <1>     pop rbx
  1693 0000473F B80C000000          <1>     mov eax, errAccCde
  1694 00004744 F9                  <1>     stc
  1695                              <1>     return
    13                              <2> %%_ret:
    14 00004745 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1696                              <1> 
  1697                              <1> createNewMain:
  1698                              <1> ;Input: ax (formally al) = File attributes
  1699                              <1> ;       [currentSFT] = SFT we are building
  1700                              <1> ;       [workingCDS] = CDS of drive to access
  1701                              <1> ;       [workingDPB] = DPB of drive to access
  1702 00004746 0FB6C0              <1>     movzx eax, al
  1703 00004749 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1704 0000474B F605(2D070000)FF    <1>     test byte [fileExist], -1
  1705 00004752 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1706 00004754 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1707 00004759 F9                  <1>     stc
  1708                              <1>     return
    13                              <2> %%_ret:
    14 0000475A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1709                              <1> createMain:
  1710                              <1> ;Input: ax (formally al) = File attributes
  1711                              <1> ;       [currentSFT] = SFT we are building
  1712                              <1> ;       [workingCDS] = CDS of drive to access
  1713                              <1> ;       [workingDPB] = DPB of drive to access
  1714 0000475B 0FB6C0              <1>     movzx eax, al
  1715                              <1> .createNewEP:
  1716 0000475E A880                <1>     test al, 80h    ; Is this invalid bit set?
  1717 00004760 750C                <1>     jnz .invalidAttrib
  1718 00004762 A808                <1>     test al, attrFileVolLbl    ;Is this a volume label?
  1719 00004764 7402                <1>     jz .notVol
  1720 00004766 B008                <1>     mov al, attrFileVolLbl ;If the vol bit is set, set the whole thing to volume only
  1721                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1722                              <1> .notVol:
  1723 00004768 0C20                <1>     or al, attrFileArchive   ;Set archive bit
  1724 0000476A A850                <1>     test al, attrFileDir | attrFileChar   ;Invalid bits?
  1725 0000476C 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1726                              <1> .invalidAttrib:
  1727 0000476E B805000000          <1>     mov eax, errAccDen
  1728 00004773 F9                  <1>     stc
  1729                              <1>     return
    13                              <2> %%_ret:
    14 00004774 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1730                              <1> .validAttr:
  1731                              <1> ;Check we are not creating a directory.
  1732 00004775 E8C30B0000          <1>     call getCurrentSFT
  1733 0000477A 488B35(3B070000)    <1>     mov rsi, qword [workingCDS]
  1734 00004781 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1735 00004788 7526                <1>     jne .diskFile
  1736 0000478A F605(B2070000)01    <1>     test byte [wEOFlags], eoInExtOpen   ;Are we doing an extended open?
  1737 00004791 750A                <1>     jnz .redirExtOpen
  1738                              <1> ;Do remote net create
  1739 00004793 50                  <1>     push rax    ;Save the new attributes
  1740 00004794 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1741 00004799 CD2F                <1>     int 2Fh
  1742 0000479B 5B                  <1>     pop rbx
  1743                              <1>     return
    13                              <2> %%_ret:
    14 0000479C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1744                              <1> .redirExtOpen:
  1745 0000479D 50                  <1>     push rax
  1746 0000479E B82E110000          <1>     mov eax, 112Eh  ;Extended open redir call
  1747 000047A3 CD2F                <1>     int 2Fh
  1748 000047A5 5B                  <1>     pop rbx
  1749 000047A6 66C705(B2070000)00- <1>     mov word [wEOFlags], 0  ;Zero to indicate we are done
  1749 000047AE 00                  <1>
  1750                              <1>     return
    13                              <2> %%_ret:
    14 000047AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1751                              <1> .diskFile:
  1752                              <1> ;Now setup the extended open mode bits in the SFT
  1753 000047B0 E8C30D0000          <1>     call setExtOpenMode ;Set the extended open mode and go!
  1754 000047B5 7206                <1>     jc .redirExtCheck
  1755 000047B7 66814F020200        <1>     or word [rdi + sft.wOpenMode], openRWAcc ;Set R/W access when creating file
  1756                              <1> .redirExtCheck:
  1757 000047BD 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1758 000047C3 7413                <1>     jz .hardFile
  1759                              <1> ;Here we do local redir file creation.
  1760 000047C5 F605(B2070000)01    <1>     test byte [wEOFlags], eoInExtOpen
  1761 000047CC 75CF                <1>     jnz .redirExtOpen
  1762 000047CE 50                  <1>     push rax    ;Save the new attributes
  1763 000047CF B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1764 000047D4 CD2F                <1>     int 2Fh
  1765 000047D6 5B                  <1>     pop rbx
  1766                              <1>     return
    13                              <2> %%_ret:
    14 000047D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1767                              <1> .hardFile:
  1768                              <1>     ;or word [rdi + sft.wOpenMode], openRWAcc ;Set R/W access when creating file
  1769 000047D8 C605(30070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1770                              <1>     ;mov byte [delChar], 0E5h
  1771 000047DF E8B3340000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1772 000047E4 57                  <1>     push rdi    ;Save the sft handle
  1773 000047E5 50                  <1>     push rax    ;Save the file attributes on stack
  1774 000047E6 B802000000          <1>     mov eax, openRWAcc  ;Set open access mode
  1775 000047EB E850000000          <1>     call buildSFTEntry
  1776 000047F0 5B                  <1>     pop rbx ;Pop the file attribute off
  1777 000047F1 5F                  <1>     pop rdi
  1778 000047F2 7246                <1>     jc .errorExit
  1779 000047F4 E8AE3D0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1780 000047F9 723F                <1>     jc .errorExit
  1781 000047FB F6C308              <1>     test bl, attrFileVolLbl    ;Was the attribute a volume label?
  1782 000047FE 7425                <1>     jz .notVolLabel    ;If not vol label, skip.
  1783                              <1> ; Treat volume label creation case here. Rebuild DPB and BPB.
  1784 00004800 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1785 00004807 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1786 00004809 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1787 0000480B 8805(211A0000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1788                              <1> ;Do a Set Media ID call 
  1789 00004811 E8850D0000          <1>     call makVolLabel    ;Enter with al = Drive to rebuild for!
  1790                              <1> ;to sync the bootsector label
  1791 00004816 E87C340000          <1>     call dosCrit1Enter
  1792 0000481B E8AB2C0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1793 00004820 E87C340000          <1>     call dosCrit1Exit
  1794                              <1> .notVolLabel:
  1795 00004825 B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1796 0000482A FF15(2F010000)      <1>     call qword [updateDirShare]
  1797 00004830 E86C340000          <1>     call dosCrit1Exit
  1798 00004835 E9B6FEFFFF          <1>     jmp openDriverMux
  1799                              <1> .errorExit:
  1800 0000483A E862340000          <1>     call dosCrit1Exit
  1801                              <1>     return
    13                              <2> %%_ret:
    14 0000483F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1802                              <1> buildSFTEntry:
  1803                              <1> ;Called in a critical section.
  1804                              <1> ;Input: al = Open mode
  1805                              <1> ;       STACK: File attributes if creating a file
  1806                              <1> ;       [currentSFT] = SFT we are building
  1807                              <1> ;       [workingCDS] = CDS of drive to access
  1808                              <1> ;       [workingDPB] = DPB of drive to access
  1809                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1810                              <1> ;       If creating, delChar must be set to 0E5h. Not needed for opening!
  1811                              <1> ;
  1812                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1813                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1814                              <1> ;        If CF=CY: - Return fail
  1815                              <1> ;
  1816                              <1> ;
  1817                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1818                              <1> ;   If not, create disk entry.
  1819                              <1> ;Check if the device was a char device by checking curDirCopy.
  1820                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1821                              <1> 
  1822                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1823                              <1> ; to start of file fields of the SFT
  1824 00004840 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1825 00004841 4889E5              <1>     mov rbp, rsp
  1826 00004844 488B35(5B070000)    <1>     mov rsi, qword [currentSFT]
  1827                              <1> ;Usually the lower byte of open mode is set. Here we add any more bits
  1828                              <1> ; and set the upper byte of the open mode bits too
  1829 0000484B 66094602            <1>     or word [rsi + sft.wOpenMode], ax
  1830                              <1> ;Get current time
  1831 0000484F E8F6E7FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1832 00004854 E8DCE8FFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1833 00004859 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1834                              <1> ;Set current Owner
  1835 0000485C 488B05(47040000)    <1>     mov rax, qword [currentPSP]
  1836 00004863 48894647            <1>     mov qword [rsi + sft.qPID], rax ;Set who opened the file
  1837                              <1> ;Set file pointer to first byte
  1838 00004867 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1839                              <1> ;Common fields set
  1840 0000486E F605(30070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1841 00004875 0F84ED010000        <1>     jz .openProc
  1842                              <1>     ;Here if Creating a file.
  1843                              <1>     ;First check if we are handling a volume label
  1844 0000487B 48F7451008000000    <1>     test qword [rbp + 10h], attrFileVolLbl  ;Are we creating a volume label?
  1845 00004883 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1846                              <1> ;If we are, the previous search wouldn't have searched for all volids. Now
  1847                              <1> ; check for any volids. 
  1848 00004885 56                  <1>     push rsi
  1849 00004886 57                  <1>     push rdi
  1850 00004887 55                  <1>     push rbp
  1851 00004888 C605(89040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1852 0000488F E882C9FFFF          <1>     call searchDir  ;Searches the root dir
  1853 00004894 C605(89040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1854 0000489B 5D                  <1>     pop rbp
  1855 0000489C 5F                  <1>     pop rdi
  1856 0000489D 5E                  <1>     pop rsi
  1857 0000489E 0F8314020000        <1>     jnc .badBuildSFTAccDen ;If CF=NC, then we have found a vollbl, fail.
  1858 000048A4 3C12                <1>     cmp al, errNoFil
  1859 000048A6 0F850C020000        <1>     jne .badBuildSFTAccDen ;If not "no file found", error out
  1860                              <1> .notVolLbl:
  1861 000048AC F605(2D070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1862 000048B3 0F84D5000000        <1>     jz .createFile
  1863 000048B9 F605(8F060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1864 000048C0 0F85AB010000        <1>     jnz .charDev    ;If its valid, just reopens it!
  1865 000048C6 F605(8F060000)11    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirReadOnly
  1866 000048CD 0F85E5010000        <1>     jnz .badBuildSFTAccDen    ;Cant recreate a dir or ro file!
  1867                              <1>     ;Here disk file exists, so recreating the file.
  1868 000048D3 55                  <1>     push rbp
  1869 000048D4 FF35(5B070000)      <1>     push qword [currentSFT]
  1870 000048DA E8C0FCFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1871 000048DF 8F05(5B070000)      <1>     pop qword [currentSFT]
  1872 000048E5 5D                  <1>     pop rbp
  1873 000048E6 0F82CC010000        <1>     jc .badBuildSFTAccDen
  1874                              <1>     ;al has the char for the filename
  1875                              <1>     ;Sets vars for the sector/offset into the sector
  1876 000048EC E84C0A0000          <1>     call getCurrentSFT
  1877 000048F1 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1878 000048F3 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1879                              <1>     ;al has file attributes.
  1880 000048F7 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1881 000048FA 31C0                <1>     xor eax, eax
  1882                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1883 000048FC 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1884 00004900 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1885 00004904 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1886 00004907 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1887 0000490A 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1888 0000490D 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1889 00004910 57                  <1>     push rdi    ;Save SFT pointer
  1890 00004911 488D3D(84060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1891 00004918 B920000000          <1>     mov ecx, fatDirEntry_size
  1892 0000491D F3A4                <1>     rep movsb
  1893 0000491F E8FEBFFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1894 00004924 5F                  <1>     pop rdi
  1895                              <1> .createCommon:  ;rdi must point to the current SFT 
  1896                              <1>     ;Now populate the remaining SFT fields 
  1897 00004925 488D35(84060000)    <1>     lea rsi, curDirCopy
  1898 0000492C 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1899 0000492F 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1900 00004932 488B05(6F070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1901 00004939 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1902 0000493D 0FB705(77070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1903 00004944 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1904 00004947 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1905 0000494A 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1906 0000494D 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1907 00004950 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1908 00004954 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1909 00004958 C1E210              <1>     shl edx, 10h
  1910 0000495B 09D0                <1>     or eax, edx
  1911 0000495D 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1912                              <1> 
  1913 00004960 31C0                <1>     xor eax, eax
  1914                              <1> ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1915 00004962 8A05(32070000)      <1>     mov al, byte [workingDrv]
  1916 00004968 0C40                <1>     or al, devDiskNoFlush  ;Dont flush until it is accessed
  1917 0000496A 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1918 0000496E 488B05(33070000)    <1>     mov rax, qword [workingDPB]
  1919 00004975 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1920                              <1>     ;Last thing, copy the filename over
  1921                              <1>     ;Now save the name
  1922                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1923 00004979 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1924 0000497D 488D35(84060000)    <1>     lea rsi, curDirCopy
  1925 00004984 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1926 00004986 66A5                <1>     movsw
  1927 00004988 A4                  <1>     movsb
  1928                              <1>     ;SFT filled
  1929 00004989 E921010000          <1>     jmp .exitBuildSFT
  1930                              <1> .createFile:
  1931                              <1> ;Here if the file doesn't exist and we want to create a new file.
  1932 0000498E 66F705(B2070000)01- <1>     test word [wEOFlags], eoInExtOpen   ;If a normal create call, skip this.
  1932 00004996 00                  <1>
  1933 00004997 741E                <1>     jz .createGo
  1934                              <1> ;This part is only entered by an ExtOpen with instructions to truncate a 
  1935                              <1> ; file and the file doesn't exist. Here we check if we are supposed to 
  1936                              <1> ; create a file if the file doesnt exist.
  1937 00004999 66810D(B2070000)04- <1>     or word [wEOFlags], eoFileNoExist   ;Note the file didn't exist
  1937 000049A1 00                  <1>
  1938 000049A2 66F705(B4070000)10- <1>     test word [wEOActions], eoActCreate ;Check if we should make new
  1938 000049AA 00                  <1>
  1939 000049AB 750A                <1>     jnz .createGo
  1940                              <1> ;If we shouldnt create a file, fail, reporting file not found.
  1941 000049AD B802000000          <1>     mov eax, errFnf
  1942 000049B2 E906010000          <1>     jmp .badBuildSFTOwnErr
  1943                              <1> .createGo:
  1944                              <1> ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1945                              <1> ;rsi points to current sft entry
  1946 000049B7 488D3D(84060000)    <1>     lea rdi, curDirCopy
  1947                              <1>     ;Clear out the dir entry
  1948 000049BE 57                  <1>     push rdi
  1949 000049BF B904000000          <1>     mov ecx, 4
  1950 000049C4 31C0                <1>     xor eax, eax
  1951 000049C6 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1952 000049C9 5F                  <1>     pop rdi
  1953                              <1>     ;Copy the FCB name over    
  1954 000049CA 56                  <1>     push rsi
  1955 000049CB 57                  <1>     push rdi
  1956 000049CC B90B000000          <1>     mov ecx, 11
  1957 000049D1 488D35(03070000)    <1>     lea rsi, fcbName
  1958 000049D8 F3A4                <1>     rep movsb   ;Move over the FCB name
  1959 000049DA 5F                  <1>     pop rdi
  1960 000049DB 5E                  <1>     pop rsi
  1961                              <1> 
  1962 000049DC 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1963                              <1>     ;al has file attributes.
  1964 000049E0 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1965 000049E3 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1966 000049E6 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1967 000049E9 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1968 000049EC 8B05(A4070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1969                              <1> .searchForDirSpace:
  1970 000049F2 8905(A8070000)      <1>     mov dword [dirClustA], eax
  1971 000049F8 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1972 000049FA 668905(AC070000)    <1>     mov word [dirSect], ax
  1973 00004A01 8905(AE070000)      <1>     mov dword [dirEntry], eax
  1974 00004A07 57                  <1>     push rdi
  1975                              <1> ;Needs delChar setup. We only come here for creates so already setup!
  1976 00004A08 E822DAFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1977 00004A0D 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1978 00004A0E 7328                <1>     jnc .dirEntryFnd
  1979 00004A10 813D(A4070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1979 00004A18 0000                <1>
  1980 00004A1A 0F8498000000        <1>     je .badBuildSFTAccDen ;Set CF and exit
  1981 00004A20 E8F7DAFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1982 00004A25 0F8292000000        <1>     jc .badBuildSFTOwnErr
  1983 00004A2B 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1984 00004A30 0F8482000000        <1>     je .badBuildSFTAccDen
  1985                              <1>     ;Else eax = Newly allocated cluster
  1986 00004A36 EBBA                <1>     jmp short .searchForDirSpace
  1987                              <1> .dirEntryFnd:
  1988 00004A38 4887FE              <1>     xchg rdi, rsi
  1989 00004A3B B904000000          <1>     mov ecx, 4
  1990 00004A40 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1991 00004A43 E8DABEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1992 00004A48 E8F0080000          <1>     call getCurrentSFT
  1993 00004A4D E9D3FEFFFF          <1>     jmp .createCommon
  1994                              <1> .open:
  1995                              <1> ;curdircopy has a copy of the disk file directory
  1996                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1997 00004A52 E8E6080000          <1>     call getCurrentSFT
  1998 00004A57 488B2D(33070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1999                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  2000 00004A5E E8E0D9FFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  2001 00004A63 E9BDFEFFFF          <1>     jmp .createCommon
  2002                              <1> .openProc:
  2003                              <1>     ;Here if Opening a file. 
  2004                              <1>     ;Dirs cannot be opened through open, only for renaming.
  2005                              <1>     ;This is taken care of by openMain.
  2006 00004A68 F605(8F060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  2007 00004A6F 74E1                <1>     jz .open
  2008                              <1> .charDev:
  2009 00004A71 488B05(84060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  2010 00004A78 E856300000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  2011 00004A7D 7239                <1>     jc .badBuildSFTAccDen
  2012 00004A7F 488B35(5B070000)    <1>     mov rsi, qword [currentSFT]
  2013 00004A86 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  2014 00004A8A 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  2015 00004A8E 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  2016 00004A91 80CBC0              <1>     or bl, devCharDev | devCharNotEOF ;Set charDev & noEOF on read
  2017 00004A94 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  2018 00004A98 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  2019 00004A9F 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  2020 00004AA3 B820202020          <1>     mov eax, "    "
  2021 00004AA8 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  2022 00004AAC 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  2023                              <1> .exitBuildSFT:
  2024 00004AAF E88D0A0000          <1>     call writeThroughBuffersForHandle
  2025 00004AB4 7207                <1>     jc .badBuildSFTOwnErr
  2026 00004AB6 5D                  <1>     pop rbp
  2027                              <1>     return
    13                              <2> %%_ret:
    14 00004AB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2028                              <1> .badBuildSFTAccDen:   ;Set Access Denied
  2029 00004AB8 B805000000          <1>     mov eax, errAccDen
  2030                              <1> .badBuildSFTOwnErr:  ;Error propagating error code
  2031 00004ABD F9                  <1>     stc
  2032 00004ABE 5D                  <1>     pop rbp
  2033                              <1>     return
    13                              <2> %%_ret:
    14 00004ABF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2034                              <1> closeMain: ;Int 2Fh AX=1201h
  2035                              <1> ;Gets the directory entry for a file
  2036                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  2037                              <1> ;If CF=CY on return: Error, return error with al = error code
  2038                              <1> ;Preserve all regs except eax and rdi
  2039                              <1> ; If CF=NC on return: eax = Unknown
  2040                              <1> ;                     rdi = current SFT ptr
  2041 00004AC0 E878080000          <1>     call getCurrentSFT ;Get the sft pointer
  2042 00004AC5 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2043 00004AC9 F7C300800000        <1>     test ebx, devRedir ;Is this a network drive?
  2044 00004ACF 7408                <1>     jz .physical
  2045                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  2046 00004AD1 B806110000          <1>     mov eax, 1106h  ;Make request
  2047 00004AD6 CD2F                <1>     int 2Fh ;Beep!
  2048                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004AD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2049                              <1> .physical:  
  2050                              <1> ; We make a request to the dev dir to close the device
  2051                              <1> ; If the device is disk, we then update the directory entry for the disk file
  2052 00004AD9 E8B9310000          <1>     call dosCrit1Enter  ;Enter critical section 1
  2053 00004ADE E8D1D9FFFF          <1>     call updateSFTDateTimeFields
  2054 00004AE3 E84A0A0000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  2055 00004AE8 50                  <1>     push rax
  2056 00004AE9 53                  <1>     push rbx
  2057 00004AEA E84C3A0000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  2058 00004AEF 5B                  <1>     pop rbx
  2059 00004AF0 58                  <1>     pop rax
  2060                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  2061                              <1> ;Updates the Dir entry with info from SFT and flushes.
  2062                              <1> ;Closes the handle properly if only one reference to file remains.
  2063                              <1> ;Input: ax = Initial open handle count
  2064                              <1> ;       bx = device info from the SFT
  2065                              <1> ;       rdi -> Current SFT
  2066 00004AF1 50                  <1>     push rax    ;Save the handle count for later
  2067 00004AF2 66F7C3C000          <1>     test bx, devDiskNoFlush | devCharDev
  2068 00004AF7 7577                <1>     jnz .notDiskBitsSet
  2069 00004AF9 E8E8D9FFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  2070 00004AFE B805000000          <1>     mov eax, errAccDen
  2071 00004B03 726C                <1>     jc .accDenExit
  2072 00004B05 56                  <1>     push rsi    ; -> Buffer dir entry
  2073 00004B06 57                  <1>     push rdi    ; -> SFT ptr
  2074 00004B07 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  2075 00004B0B E8E6C8FFFF          <1>     call findInBuffer.nameCompare
  2076 00004B10 5F                  <1>     pop rdi     ; -> SFT ptr
  2077 00004B11 5E                  <1>     pop rsi     ; -> Buffer dir entry
  2078 00004B12 7408                <1>     jz .dirEntryForUs
  2079                              <1> .badFileFound:
  2080 00004B14 B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  2081 00004B19 F9                  <1>     stc
  2082 00004B1A EB55                <1>     jmp short .accDenExit
  2083                              <1> .dirEntryForUs:
  2084 00004B1C 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  2085 00004B20 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  2086 00004B24 F6D0                <1>     not al  ;Reverse the bits
  2087 00004B26 20C8                <1>     and al, cl  ;These should be equal
  2088 00004B28 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  2089 00004B2A 75E8                <1>     jnz .badFileFound
  2090                              <1>     
  2091 00004B2C 804E0B20            <1>     or byte [rsi + fatDirEntry.attribute], dirArchive   ;File changed!
  2092 00004B30 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  2093 00004B33 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  2094 00004B36 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  2095 00004B3A 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  2096 00004B3E 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  2097 00004B42 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  2098 00004B46 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax ;Partialy implemented
  2099 00004B4A 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  2100 00004B4D 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  2101 00004B51 C1E810              <1>     shr eax, 10h
  2102 00004B54 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  2103 00004B58 E8C5BDFFFF          <1>     call markBufferDirty
  2104 00004B5D 0FB605(32070000)    <1>     movzx eax, byte [workingDrv]
  2105 00004B64 E859BCFFFF          <1>     call flushAllBuffersForDrive
  2106 00004B69 B805000000          <1>     mov eax, errAccDen
  2107 00004B6E 7201                <1>     jc .accDenExit
  2108                              <1> .notDiskBitsSet:
  2109 00004B70 F8                  <1>     clc
  2110                              <1> .accDenExit:
  2111 00004B71 9C                  <1>     pushfq
  2112 00004B72 E886DBFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  2113 00004B77 9D                  <1>     popfq
  2114 00004B78 59                  <1>     pop rcx ;Get back the initial open handle count
  2115 00004B79 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  2116 00004B7C 9C                  <1>     pushfq
  2117 00004B7D FFC9                <1>     dec ecx ;Decrement count
  2118 00004B7F 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  2119 00004B81 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  2120                              <1> .exit:
  2121 00004B84 9D                  <1>     popfq
  2122 00004B85 E817310000          <1>     call dosCrit1Exit
  2123                              <1>     return
    13                              <2> %%_ret:
    14 00004B8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2124                              <1> 
  2125                              <1> readBytes:
  2126                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  2127                              <1> ;Input: ecx = Number of bytes to read
  2128                              <1> ;Output: ecx = Number of bytes read
  2129                              <1> ;Number of bytes read 
  2130                              <1> ;If CF=CY, return with error code in ax
  2131 00004B8B E8AD070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2132 00004B90 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2133 00004B94 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2134 00004B96 3C01                <1>     cmp al, openWrAcc
  2135 00004B98 7509                <1>     jne .readable
  2136 00004B9A B805000000          <1>     mov eax, errAccDen
  2137 00004B9F 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  2138 00004BA1 F9                  <1>     stc
  2139                              <1>     return
    13                              <2> %%_ret:
    14 00004BA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2140                              <1> .readable:
  2141 00004BA3 E8D9070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  2142 00004BA8 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  2143 00004BAB 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
  2144 00004BB1 740A                <1>     jz .notRedir
  2145 00004BB3 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  2146 00004BB8 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  2147                              <1>     return 
    13                              <2> %%_ret:
    14 00004BBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2148                              <1> .exitOk:
  2149 00004BBB F8                  <1>     clc
  2150                              <1>     return 
    13                              <2> %%_ret:
    14 00004BBC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2151                              <1> .notRedir:
  2152 00004BBD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2153 00004BC3 7510                <1>     jnz readCharDev
  2154 00004BC5 E8CD300000          <1>     call dosCrit1Enter
  2155 00004BCA E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  2156 00004BCF E8CD300000          <1>     call dosCrit1Exit
  2157                              <1>     return 
    13                              <2> %%_ret:
    14 00004BD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2158                              <1> readCharDev:
  2159                              <1> ;rdi points to sft for char dev to read
  2160                              <1> ;ecx has the number of bytes to transfer
  2161                              <1> ;Vars have been set up and DTA has the transfer address
  2162                              <1> ;Returns in ecx, the actual bytes transferred
  2163                              <1> ;If CF=CY, return with error code in ax
  2164 00004BD5 C605(32040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  2165 00004BDC 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  2166 00004BE0 488B3D(3F040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  2167 00004BE7 F6C340              <1>     test bl, devCharNotEOF     ;Does our device generate EOF's on reads?
  2168 00004BEA 0F84C5020000        <1>     jz charReadExitOk       ;If it does, jump to exit as if EOF has been hit
  2169 00004BF0 F6C304              <1>     test bl, devCharNulDev  ;Is our device the NUL device?
  2170 00004BF3 7407                <1>     jz .notNul
  2171                              <1>     ;If it is a new NUL device hdl, we can simply return!
  2172                              <1>     ;NUL never transfers bytes and now clears this bit to indicate EOF
  2173 00004BF5 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  2174 00004BF7 E9B9020000          <1>     jmp charReadExitOk    ;Goto exit
  2175                              <1> .notNul:
  2176 00004BFC F6C320              <1>     test bl, devCharBinary
  2177 00004BFF 0F857F000000        <1>     jnz .binary
  2178                              <1>     ;Here if the device is in ASCII mode
  2179 00004C05 F6C301              <1>     test bl, devCharConIn   ;Is this device STDIN?
  2180 00004C08 0F84D6000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  2181                              <1> .consoleInput:
  2182                              <1>     ;Console input here
  2183 00004C0E E8E9DFFFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  2184                              <1>     ;Get current offset into buffer (if one exists)
  2185 00004C13 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  2186 00004C1A 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  2187 00004C1D 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  2188 00004C1F 803D(76030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  2189 00004C26 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  2190                              <1>     ;Else, reset the buffer
  2191 00004C28 66C705(76030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  2191 00004C30 FF                  <1>
  2192                              <1> .oldBuf:
  2193                              <1> ;Preserve the dta and number of chars to tfr
  2194 00004C31 51                  <1>     push rcx
  2195 00004C32 57                  <1>     push rdi
  2196 00004C33 488D15(76030000)    <1>     lea rdx, vConInBuf
  2197 00004C3A E8DBDFFFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  2198 00004C3F 5F                  <1>     pop rdi
  2199 00004C40 59                  <1>     pop rcx
  2200 00004C41 488D35(78030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  2201 00004C48 803E1A              <1>     cmp byte [rsi], EOF
  2202 00004C4B 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  2203 00004C4D C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  2204 00004C50 B00A                <1>     mov al, LF
  2205 00004C52 E833DBFFFF          <1>     call charOut_B.in   ;Echo CRLF
  2206 00004C57 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  2207 00004C59 EB18                <1>     jmp short .exit
  2208                              <1> .tfrBuf:
  2209 00004C5B AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  2210 00004C5C AA                  <1>     stosb
  2211 00004C5D 3C0D                <1>     cmp al, CR 
  2212 00004C5F 7503                <1>     jne .noCRLF
  2213 00004C61 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  2214                              <1> .noCRLF:
  2215 00004C64 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  2216 00004C66 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  2217 00004C68 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  2218                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  2219 00004C6A E81BDBFFFF          <1>     call charOut_B.in   ;Echo CRLF
  2220 00004C6F 31F6                <1>     xor esi, esi
  2221 00004C71 0C01                <1>     or al, 1    ;Set ZF = NZ
  2222                              <1> .exit:
  2223 00004C73 E89ADFFFFF          <1>     call vConRetDriver
  2224 00004C78 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  2225                              <1>     ;Only return with ZF=ZE if first char in buffer was EOF
  2226 00004C7F E931020000          <1>     jmp charReadExitOk    ;Exit ok! ecx has # chars tfred
  2227                              <1> 
  2228                              <1> .binary:
  2229                              <1>     ;Setup registers for transfer
  2230 00004C84 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  2231 00004C87 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  2232                              <1>     ;ecx has the number of bytes to transfer directly
  2233 00004C8A E8122A0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  2234 00004C8F 488B35(33070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  2235 00004C96 E8BE260000          <1>     call goDriver   ;Make the request
  2236 00004C9B 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  2237 00004C9E 0FB73D(EE040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  2238 00004CA5 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  2239 00004CAB 7420                <1>     jz .binNoError
  2240                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  2241 00004CAD B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  2242 00004CAF E879200000          <1>     call charDevErr   ;ah = has part of the error 
  2243                              <1>     ;al now has the response
  2244 00004CB4 3C00                <1>     cmp al, critIgnore
  2245 00004CB6 7415                <1>     je .binNoError ;Simply proceed as normal
  2246 00004CB8 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  2247 00004CBB 3C03                <1>     cmp al, critFail
  2248 00004CBD 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  2249                              <1>     ;Fallthrough here for fail!
  2250                              <1> .failExit:
  2251 00004CBF E879060000          <1>     call getCurrentSFT
  2252 00004CC4 31C9                <1>     xor ecx, ecx
  2253 00004CC6 B805000000          <1>     mov eax, errAccDen
  2254 00004CCB F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  2255                              <1>     return
    13                              <2> %%_ret:
    14 00004CCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2256                              <1> .binNoError:
  2257                              <1>     ;Get number of bytes transferred into 
  2258 00004CCD 8B05(01050000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get bytes transferred
  2259 00004CD3 F7D8                <1>     neg eax ;make it into -eax
  2260 00004CD5 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  2261                              <1>     ;ecx now has bytes left to transfer
  2262 00004CD9 50                  <1>     push rax    ;Save value on stack
  2263 00004CDA 31C0                <1>     xor eax, eax ;Set ZF
  2264 00004CDC FFC0                <1>     inc eax ;Clear ZF
  2265 00004CDE 58                  <1>     pop rax ;Get back the original value
  2266 00004CDF E9D1010000          <1>     jmp charReadExitOk    ;GoExit with ecx=Bytes left to read. ZF=NZ always
  2267                              <1> .generalASCII:
  2268                              <1>     ;ecx has bytes to transfer here
  2269                              <1>     ;Setup registers for transfer
  2270 00004CE4 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  2271 00004CE7 51                  <1>     push rcx
  2272 00004CE8 B901000000          <1>     mov ecx, 1  ;Get one char
  2273 00004CED 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2274 00004CF0 E8AC290000          <1>     call primReqReadSetup   ;Setup request
  2275 00004CF5 59                  <1>     pop rcx
  2276                              <1>     ;rbx now has request header ptr
  2277 00004CF6 488B35(33070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  2278                              <1> .asciiReadChar:
  2279 00004CFD 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  2280 00004D00 E87ADEFFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  2281 00004D05 E84F260000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  2282 00004D0A 0FB73D(EE040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  2283 00004D11 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  2284 00004D17 7420                <1>     jz .asciiNoError
  2285 00004D19 B486                <1>     mov ah, critCharDev | critData
  2286 00004D1B E80D200000          <1>     call charDevErr    ;Call Int 24h, ecx preserved
  2287                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  2288 00004D20 C705(01050000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1
  2288 00004D28 0000                <1>
  2289 00004D2A 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2290 00004D2D 3C03                <1>     cmp al, critFail
  2291 00004D2F 748E                <1>     je .failExit
  2292 00004D31 3C01                <1>     cmp al, critRetry
  2293 00004D33 74C8                <1>     je .asciiReadChar
  2294                              <1>     ;Ignore here, pretend NULL CHAR was read
  2295 00004D35 30C0                <1>     xor al, al
  2296 00004D37 EB15                <1>     jmp short .asciiIgnoreEP
  2297                              <1> .asciiNoError:
  2298                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  2299                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  2300                              <1> ;Preserve RBX, RSI
  2301                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  2302 00004D39 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2303 00004D3C 813D(01050000)0100- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 1
  2303 00004D44 0000                <1>
  2304 00004D46 0F8569010000        <1>     jne charReadExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  2305 00004D4C 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  2306                              <1> .asciiIgnoreEP:
  2307 00004D4E 48FF05(F9040000)    <1>     inc qword [primReqPkt + ioReqPkt.bufptr]   ;Goto next char position
  2308 00004D55 48FFC7              <1>     inc rdi ;Also advance register pointer
  2309 00004D58 3C1A                <1>     cmp al, EOF ;Was the char just read EOF?
  2310 00004D5A 0F8455010000        <1>     je charReadExitOk   ;Exit if so!
  2311 00004D60 3C0D                <1>     cmp al, CR  ;Was this char CR?
  2312 00004D62 E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  2313                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  2314 00004D64 FEC0                <1>     inc al  ;make ZF=NZ
  2315 00004D66 E94A010000          <1>     jmp charReadExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  2316                              <1> 
  2317                              <1> readDiskFile:
  2318                              <1> ;We have the following vars setup:
  2319                              <1> ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  2320                              <1> ;currClustF
  2321                              <1> ;Input:
  2322                              <1> ;rdi -> Current SFT
  2323                              <1> ;rbp -> WorkingDPB
  2324                              <1> ;ecx = Bytes to transfer
  2325 00004D6B C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  2326 00004D72 C605(29070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  2327                              <1> ;Checks to make sure we dont start reading past the end of the file. 
  2328                              <1> ;Check the starting position isn't equal to or past the filesize.
  2329 00004D79 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2330 00004D7C 2B05(90070000)      <1>     sub eax, dword [currByteF]
  2331 00004D82 0F821E010000        <1>     jb diskReadNoBytes 
  2332                              <1> ;Now convert currSectC to disk sector by using currClustF
  2333                              <1> ;Using currClustF as a counter, we walk the fat from startingCluster
  2334 00004D88 8B15(79070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2335 00004D8E 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2336 00004D91 8905(7D070000)      <1>     mov dword [currClustD], eax
  2337 00004D97 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit EOF
  2338 00004D99 0F8407010000        <1>     jz diskReadNoBytes
  2339 00004D9F 8B0D(9C070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2340                              <1>     ;Check if we have opened a volume label (should never happen)
  2341 00004DA5 F6470408            <1>     test byte [rdi + sft.bFileAttrib], attrFileVolLbl    ;If we try read from vollbl
  2342 00004DA9 7407                <1>     jz .shareCheck
  2343 00004DAB B805000000          <1>     mov eax, errAccDen
  2344 00004DB0 F9                  <1>     stc
  2345                              <1>     return
    13                              <2> %%_ret:
    14 00004DB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2346                              <1> .shareCheck:
  2347                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2348 00004DB2 E88B370000          <1>     call retryShareIODelay
  2349 00004DB7 7308                <1>     jnc .shareOk
  2350 00004DB9 E824380000          <1>     call shareCheckReadLockViolation
  2351 00004DBE 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2352                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004DC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2353                              <1> .shareOk:
  2354 00004DC1 E89DB9FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2355 00004DC6 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2356 00004DC8 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2357 00004DCA 7426                <1>     jz .skipWalk
  2358                              <1> .goToCurrentCluster:
  2359 00004DCC E8CFBFFFFF          <1>     call readFAT    ;Get in eax the next cluster
  2360 00004DD1 0F82CB000000        <1>     jc .readBadExit   ;This can only return Fail
  2361 00004DD7 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2362 00004DDC 0F84C4000000        <1>     je diskReadNoBytes ;Exit with no bytes transferred
  2363 00004DE2 8905(7D070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2364 00004DE8 FFCA                <1>     dec edx ;Decrement counter
  2365 00004DEA 75E0                <1>     jnz .goToCurrentCluster
  2366 00004DEC 8B05(7D070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2367                              <1> .skipWalk:
  2368 00004DF2 E817BDFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2369                              <1>     ;Now we add the offset to this
  2370 00004DF7 0FB61D(85070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2371 00004DFE 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2372 00004E01 488905(86070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2373                              <1> ;Main
  2374                              <1> .mainRead:
  2375 00004E08 E8BF000000          <1>     call diskIOGetBuffer
  2376 00004E0D 0F828F000000        <1>     jc .readBadExit
  2377 00004E13 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2378 00004E17 0FB71D(8E070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2379 00004E1E 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2380                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2381                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2382                              <1>     ; 3) Bytes left to read from Request
  2383                              <1> ;This guarantees that we can read UP TO EOF (but not cause an EOF condition)
  2384 00004E21 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2385 00004E24 2B0D(90070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2386 00004E2A 8B1D(A0070000)      <1>     mov ebx, dword [tfrCntr]
  2387 00004E30 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2388 00004E32 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2389 00004E35 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2390 00004E39 662B1D(8E070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2391 00004E40 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2392 00004E42 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2393                              <1>     
  2394 00004E45 57                  <1>     push rdi
  2395 00004E46 488B3D(3F040000)    <1>     mov rdi, qword [currentDTA]
  2396 00004E4D 51                  <1>     push rcx
  2397 00004E4E F3A4                <1>     rep movsb
  2398 00004E50 59                  <1>     pop rcx
  2399 00004E51 010D(90070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2400 00004E57 290D(A0070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2401 00004E5D 48893D(3F040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2402 00004E64 8B05(90070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2403 00004E6A 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2404 00004E6E 31D2                <1>     xor edx, edx    ;Zero rdx
  2405 00004E70 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2406 00004E72 668915(8E070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2407 00004E79 5F                  <1>     pop rdi
  2408 00004E7A 8B0D(A0070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2409 00004E80 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2410 00004E82 743C                <1>     jz readExitOk ;Exit if so!
  2411 00004E84 E858BEFFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2412 00004E89 7217                <1>     jc .readBadExit
  2413                              <1>     ;If ZF=ZE then currClustF has last cluster. 
  2414 00004E8B 7433                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2415                              <1>     ;Else repeat
  2416                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2417 00004E8D 66C705(8E070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2417 00004E95 00                  <1>
  2418 00004E96 488B05(86070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2419 00004E9D E966FFFFFF          <1>     jmp .mainRead
  2420                              <1> .readBadExit:
  2421                              <1> ;If an error occurs, we acts as if no bytes read.
  2422                              <1> ;SFT pointer remains unmoved.
  2423 00004EA2 31C9                <1>     xor ecx, ecx    
  2424 00004EA4 F9                  <1>     stc ;All calls which end up here return Fail!
  2425                              <1>     return
    13                              <2> %%_ret:
    14 00004EA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2426                              <1> diskReadNoBytes:
  2427                              <1> ;Come through here with rdi -> SFT
  2428                              <1> ;No bytes to transfer comes through here. If the handle specifies it
  2429                              <1> ; all exits through here will trigger an Int 24h for the EOF condition.
  2430 00004EA6 31C9                <1>     xor ecx, ecx    ;Set that we read 0 bytes if we dont trigger I24 on EOF
  2431 00004EA8 66F747050001        <1>     test word [rdi + sft.wDeviceInfo], devDiskI24onFull
  2432 00004EAE 0F85C8030000        <1>     jnz hardEOFexit ;Jump through here if so. Returns CF=CY and ecx = 0
  2433                              <1> ;Else ret CF=NC and ecx = 0. SFT is left alone at its position as 
  2434                              <1> ; it hasnt moved (or if we read, we pretend we didn't)
  2435                              <1>     return  
    13                              <2> %%_ret:
    14 00004EB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2436                              <1> charReadExitOk:
  2437                              <1> ;Input: ecx = Number of bytes left to transfer!
  2438                              <1> ;       ZF=ZE => Ensure we reach "EOF" on char device!
  2439                              <1> ;       ZF=NZ => preserve bit 6
  2440 00004EB5 7509                <1>     jnz readExitOk
  2441 00004EB7 E881040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  2442 00004EBC 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~devCharNotEOF ;Set that we at End of file!
  2443                              <1> readExitOk: ;Disk xfrs always go here. Binary char too but by bouncing!
  2444                              <1> ;Input: ecx = Number of bytes left to transfer! 
  2445 00004EC0 890D(A0070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2446 00004EC6 E87A040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2447                              <1>     return 
    13                              <2> %%_ret:
    14 00004ECB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2448                              <1> 
  2449                              <1> diskIOGetBuffer:
  2450                              <1> ;If appropriate, checks if the user has typed a ^C at the console.
  2451                              <1> ; Then reads the specified sector into a buffer and returns a ptr to 
  2452                              <1> ; the buffer.
  2453                              <1> ;Input: rax = Sector to get buffer for. 
  2454                              <1> ;Output:  If CF=NC: rbx -> bufHdrptr with buffer filled with sector data
  2455                              <1> ;         Else: Error
  2456 00004ECC F605(5A040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set
  2457 00004ED3 7407                <1>     jz .skipBreak
  2458 00004ED5 50                  <1>     push rax
  2459 00004ED6 E8A4DCFFFF          <1>     call checkBreak
  2460 00004EDB 58                  <1>     pop rax
  2461                              <1> .skipBreak:
  2462 00004EDC E8ADBBFFFF          <1>     call getBufForData
  2463                              <1>     return
    13                              <2> %%_ret:
    14 00004EE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2464                              <1> 
  2465                              <1> writeBytes:
  2466                              <1> ;Writes the bytes from the user buffer
  2467                              <1> ;Input: ecx = Bytes to xfr
  2468                              <1> ;Returns number of bytes written in ecx if CF=NC
  2469 00004EE2 E856040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2470 00004EE7 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2471 00004EEB 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2472 00004EED 3C00                <1>     cmp al, openRdAcc
  2473 00004EEF 7509                <1>     jne .writeable
  2474                              <1> .noWrite:
  2475 00004EF1 B805000000          <1>     mov eax, errAccDen
  2476 00004EF6 31C9                <1>     xor ecx, ecx
  2477 00004EF8 F9                  <1>     stc
  2478 00004EF9 C3                  <1>     ret
  2479                              <1> .writeable:
  2480                              <1> ;FCB check file attributes since we can create an RO flag and write to it directly
  2481                              <1> ; but cannot open a read only file. This is redundant whilst we don't allow for 
  2482                              <1> ; FCB IO
  2483 00004EFA 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
  2484 00004F00 7406                <1>     jz .skipAttribCheck
  2485 00004F02 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], attrFileRO
  2486 00004F06 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2487                              <1> .skipAttribCheck:
  2488 00004F08 E874040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2489 00004F0D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
  2490 00004F13 7408                <1>     jz .notRedir
  2491 00004F15 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2492 00004F1A CD2F                <1>     int 2Fh
  2493                              <1>     return
    13                              <2> %%_ret:
    14 00004F1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2494                              <1> .notRedir:
  2495 00004F1D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2496 00004F23 7510                <1>     jnz writeCharDev
  2497 00004F25 E86D2D0000          <1>     call dosCrit1Enter
  2498 00004F2A E84E010000          <1>     call writeDiskFile
  2499 00004F2F E86D2D0000          <1>     call dosCrit1Exit
  2500                              <1>     return
    13                              <2> %%_ret:
    14 00004F34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2501                              <1> writeCharDev:
  2502 00004F35 C605(32040000)04    <1>     mov byte [errorLocus], eLocChr
  2503                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2504 00004F3C 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], devCharNotEOF
  2505 00004F42 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2506                              <1>     ;If ecx = 0, we exit
  2507 00004F46 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2508 00004F48 85C9                <1>     test ecx, ecx
  2509 00004F4A 0F84D5030000        <1>     jz writeExitChar
  2510 00004F50 88D8                <1>     mov al, bl  ;Move the flags over
  2511 00004F52 488B1D(3F040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2512 00004F59 4889DF              <1>     mov rdi, rbx
  2513 00004F5C 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2514 00004F5E A820                <1>     test al, devCharBinary
  2515 00004F60 744A                <1>     jz .asciiDev
  2516                              <1> ;Write binary transfer here
  2517                              <1> .binaryLp:
  2518 00004F62 31C0                <1>     xor eax, eax
  2519 00004F64 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2520 00004F67 E82A270000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2521 00004F6C 488B35(5B070000)    <1>     mov rsi, qword [currentSFT]
  2522 00004F73 E8DD230000          <1>     call goDriverChar
  2523 00004F78 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2524 00004F7B B487                <1>     mov ah, critCharDev | critData | critWrite
  2525 00004F7D 0FB73D(EE040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2526 00004F84 F7C700800000        <1>     test edi, drvErrStatus
  2527 00004F8A 7415                <1>     jz .binXfrOk
  2528 00004F8C E89C1D0000          <1>     call charDevErr ;Invoke Int 24h
  2529 00004F91 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2530 00004F94 3C00                <1>     cmp al, critIgnore
  2531 00004F96 7409                <1>     je .binXfrOk
  2532 00004F98 3C01                <1>     cmp al, critRetry
  2533 00004F9A 74C6                <1>     je .binaryLp
  2534 00004F9C E9D5000000          <1>     jmp .exitFail
  2535                              <1> .binXfrOk:
  2536 00004FA1 8B05(01050000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]
  2537 00004FA7 E979030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2538                              <1> .asciiDev:
  2539 00004FAC A802                <1>     test al, devCharConOut
  2540 00004FAE 0F859E000000        <1>     jnz .conDev
  2541 00004FB4 A804                <1>     test al, devCharNulDev
  2542 00004FB6 0F858F000000        <1>     jnz .nulDev
  2543                              <1>     ;Here we transfer for a generic character device in ascii mode
  2544 00004FBC 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2545 00004FBE 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2546 00004FC1 0F845E030000        <1>     je writeExitChar
  2547 00004FC7 51                  <1>     push rcx
  2548 00004FC8 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2549 00004FCD 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2550 00004FD0 E8C1260000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2551 00004FD5 59                  <1>     pop rcx
  2552 00004FD6 488B35(5B070000)    <1>     mov rsi, qword [currentSFT]
  2553 00004FDD 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2554                              <1> .asciiLp:
  2555 00004FE1 E899DBFFFF          <1>     call checkBreak
  2556 00004FE6 E86E230000          <1>     call goDriver
  2557 00004FEB 57                  <1>     push rdi
  2558 00004FEC B487                <1>     mov ah, critCharDev | critData | critWrite
  2559 00004FEE 0FB73D(EE040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2560 00004FF5 F7C700800000        <1>     test edi, drvErrStatus
  2561 00004FFB 741D                <1>     jz .asciiNoError
  2562 00004FFD E82B1D0000          <1>     call charDevErr ;Invoke Int 24h
  2563 00005002 5F                  <1>     pop rdi
  2564 00005003 C705(01050000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2564 0000500B 0000                <1>
  2565 0000500D 3C01                <1>     cmp al, critRetry
  2566 0000500F 74D0                <1>     je .asciiLp
  2567 00005011 3C00                <1>     cmp al, critIgnore
  2568 00005013 7412                <1>     je .ignoreEp
  2569 00005015 E95C000000          <1>     jmp .exitFail
  2570                              <1> .asciiNoError:
  2571 0000501A 5F                  <1>     pop rdi
  2572 0000501B 813D(01050000)0000- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 0
  2572 00005023 0000                <1>
  2573 00005025 741D                <1>     je .bytesXfrdOk
  2574                              <1> .ignoreEp:
  2575 00005027 FFC2                <1>     inc edx ;One more char has been xfrd
  2576 00005029 FF05(F9040000)      <1>     inc dword [primReqPkt + ioReqPkt.bufptr]    ;Increment buffer ptr
  2577 0000502F 48FFC7              <1>     inc rdi ;And our copy... 
  2578 00005032 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2579 00005035 740D                <1>     je .bytesXfrdOk
  2580 00005037 66C705(EE040000)00- <1>     mov word [primReqPkt + ioReqPkt.status], 0
  2580 0000503F 00                  <1>
  2581 00005040 FFC9                <1>     dec ecx
  2582 00005042 759D                <1>     jnz .asciiLp
  2583                              <1> .bytesXfrdOk:
  2584 00005044 89D0                <1>     mov eax, edx
  2585 00005046 E9DA020000          <1>     jmp writeExitChar
  2586                              <1> .nulDev:
  2587 0000504B 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2588 0000504D E9D3020000          <1>     jmp writeExitChar
  2589                              <1> .conDev:
  2590 00005052 E8A5DBFFFF          <1>     call vConSwapDriver
  2591 00005057 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2592 0000505A 51                  <1>     push rcx
  2593                              <1> .conDevLp:
  2594 0000505B AC                  <1>     lodsb
  2595 0000505C 3C1A                <1>     cmp al, EOF
  2596 0000505E 7409                <1>     je .conDevExit
  2597 00005060 E825D7FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2598 00005065 FFC9                <1>     dec ecx
  2599 00005067 75F2                <1>     jnz .conDevLp
  2600                              <1> .conDevExit:
  2601 00005069 58                  <1>     pop rax ;Get initial ecx back into eax
  2602 0000506A 29C8                <1>     sub eax, ecx
  2603 0000506C E8A1DBFFFF          <1>     call vConRetDriver
  2604 00005071 E9AF020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2605                              <1> .exitFail:
  2606 00005076 B805000000          <1>     mov eax, errAccDen
  2607 0000507B F9                  <1>     stc
  2608                              <1>     return
    13                              <2> %%_ret:
    14 0000507C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2609                              <1> writeDiskFile:
  2610                              <1>     ;rdi has SFT ptr
  2611 0000507D 8B0D(9C070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2612 00005083 C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2613 0000508A C605(29070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2614 00005091 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2615 00005097 0F853B020000        <1>     jnz writeBadExit
  2616 0000509D 85C9                <1>     test ecx, ecx
  2617 0000509F 7505                <1>     jnz .nonZeroWrite
  2618 000050A1 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0, check for no locks
  2619                              <1> .nonZeroWrite:
  2620                              <1>     ;Now do share check here
  2621 000050A6 E897340000          <1>     call retryShareIODelay
  2622 000050AB 730C                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2623 000050AD E827350000          <1>     call shareCheckWriteLockViolation
  2624 000050B2 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2625 000050B4 E91F020000          <1>     jmp writeBadExit
  2626                              <1> .proceedWithWrite:
  2627                              <1> ;Ensure that we update the directory entry after this write
  2628 000050B9 66816705BFBF        <1>     and word [rdi + sft.wDeviceInfo], ~(devCharNotEOF|devDiskNoDTonClose)
  2629                              <1> ;Ensure that all buffers are now unreferenced
  2630 000050BF E89FB6FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2631 000050C4 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2632                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2633 000050C7 85C0                <1>     test eax, eax
  2634 000050C9 7519                <1>     jnz .notStart
  2635 000050CB E8BBBAFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2636 000050D0 0F8202020000        <1>     jc writeBadExit
  2637 000050D6 3DFFFFFFFF          <1>     cmp eax, -1         ;Disk full?
  2638 000050DB 0F8481010000        <1>     je writeDiskFullExit
  2639                              <1>     ;Now eax has the first cluster of chain
  2640 000050E1 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2641                              <1> .notStart:
  2642                              <1> ;eax has the start cluster of the file
  2643                              <1> ;Now we go to CurntOff
  2644 000050E4 8905(7D070000)      <1>     mov dword [currClustD], eax ;Store in var
  2645 000050EA 8B15(79070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2646 000050F0 85D2                <1>     test edx, edx   ;If the fileptr is in the first cluster, already there
  2647 000050F2 744B                <1>     jz .atCluster
  2648 000050F4 E89A000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2649 000050F9 0F82D9010000        <1>     jc writeBadExit
  2650 000050FF 3DFFFFFFFF          <1>     cmp eax, -1     ;Not EOC, eax = the cluster we need to be at
  2651 00005104 7539                <1>     jne .atCluster
  2652 00005106 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
  2653 0000510D 7505                <1>     jne .haveFreeClustCnt
  2654 0000510F E852BBFFFF          <1>     call findFreeClusterData
  2655                              <1> .haveFreeClustCnt:
  2656 00005114 395531              <1>     cmp dword [rbp + dpb.dFreeClustCnt], edx
  2657 00005117 0F8245010000        <1>     jb writeDiskFullExit
  2658                              <1>     ;Here we know we have enough clusters to allocate to the file,
  2659                              <1>     ; so just roll with it. 
  2660 0000511D 8B05(7D070000)      <1>     mov eax, dword [currClustD] ;Get the current disk cluster 
  2661 00005123 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2662 00005125 89D1                <1>     mov ecx, edx    ;Allocate the remainder of clusters!
  2663 00005127 E88EBAFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2664 0000512C 0F82A6010000        <1>     jc writeBadExit
  2665 00005132 89D8                <1>     mov eax, ebx    ;Move the start sector for the walk back
  2666 00005134 E85A000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2667 00005139 0F8299010000        <1>     jc writeBadExit    
  2668                              <1> .atCluster:
  2669                              <1> ;Fall here with the sector number in eax
  2670 0000513F E8CAB9FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2671                              <1>     ;Now we add the offset to this
  2672 00005144 0FB61D(85070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2673 0000514B 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2674 0000514E 488905(86070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2675 00005155 8B0D(9C070000)      <1>     mov ecx, dword [tfrLen]
  2676 0000515B 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2677 0000515D 754F                <1>     jnz .mainWrite  
  2678                              <1> ;Here we have a zero byte write, so either truncate or have an extend.
  2679                              <1> ;Zero byte writes do not sanitise! Filesize=Filepointer in this case
  2680                              <1> ;CurrentOffset < Filesize means truncate. Else, we extend.
  2681 0000515F 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2682 00005162 3B4717              <1>     cmp eax, dword [rdi + sft.dFileSize]
  2683 00005165 7314                <1>     jae .extend
  2684                              <1> ;Here we truncate!
  2685 00005167 8B05(7D070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2686 0000516D E8CDBBFFFF          <1>     call truncateFAT    ;Truncate from current cluster setting it to EOC
  2687 00005172 0F8260010000        <1>     jc writeBadExit
  2688 00005178 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2689                              <1> .extend:
  2690 0000517B 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2691                              <1> ;writeExitNoByte
  2692 0000517E E8C2010000          <1>     call updateCurrentSFT   ;Update the cluster information in the SFT
  2693 00005183 B802000000          <1>     mov eax, 2  ;Update all SFTs with the shrinking of the file
  2694 00005188 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2695 0000518E E981010000          <1>     jmp writeDoCommit   ;Now check if we should do a commit, or just return
  2696                              <1> .walkFAT:
  2697                              <1> ;Subroutine used by WRITE
  2698                              <1> ;Input: eax = Cluster to start walking from
  2699                              <1> ;Output: If eax = -1: currClustD is the cluster we just read
  2700                              <1> ;        Else: currClustD = eax is the cluster value we are at
  2701                              <1> ;       edx = Number of clusters left (0 or #toAllocate)
  2702                              <1> ;If CF=CY, hard error, fail!
  2703 00005193 E808BCFFFF          <1>     call readFAT
  2704                              <1>     retc    ;DO NOT REPLACE WITH JUMP TO ERROR HANDLER!!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005198 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000519A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2705 0000519B 3DFFFFFFFF          <1>     cmp eax, -1 ;Is the next cluster an EOC?
  2706 000051A0 740A                <1>     je .wFatExit    ;Return if so
  2707 000051A2 8905(7D070000)      <1>     mov dword [currClustD], eax     ;Else, save eax as current cluster
  2708 000051A8 FFCA                <1>     dec edx                         ;Decrement counter
  2709 000051AA 75E7                <1>     jnz .walkFAT                    ;If we still have to walk, do it again!
  2710                              <1> .wFatExit:
  2711 000051AC F8                  <1>     clc ;Dont remove, need this because of the compare above!!
  2712                              <1>     return
    13                              <2> %%_ret:
    14 000051AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2713                              <1> .mainWrite:
  2714 000051AE E819FDFFFF          <1>     call diskIOGetBuffer
  2715 000051B3 0F821F010000        <1>     jc writeBadExit
  2716 000051B9 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2717 000051BD 0FB71D(8E070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2718 000051C4 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2719                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2720                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2721                              <1>     ; 3) Number of bytes left free in the sector
  2722 000051C7 31C0                <1>     xor eax, eax
  2723 000051C9 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2724 000051CD 89D8                <1>     mov eax, ebx
  2725 000051CF 662B05(8E070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2726 000051D6 8B0D(A0070000)      <1>     mov ecx, dword [tfrCntr]
  2727                              <1> 
  2728 000051DC 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2729 000051DE 0F47CB              <1>     cmova ecx, ebx
  2730 000051E1 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2731 000051E3 0F47C8              <1>     cmova ecx, eax
  2732                              <1> 
  2733 000051E6 56                  <1>     push rsi
  2734 000051E7 488B35(3F040000)    <1>     mov rsi, qword [currentDTA]
  2735 000051EE 51                  <1>     push rcx
  2736 000051EF F3A4                <1>     rep movsb
  2737 000051F1 59                  <1>     pop rcx
  2738 000051F2 E82BB7FFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2739                              <1> 
  2740 000051F7 010D(90070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2741 000051FD 290D(A0070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2742 00005203 488935(3F040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2743 0000520A 5E                  <1>     pop rsi
  2744                              <1> 
  2745 0000520B 8B05(9C070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2746 00005211 8B0D(A0070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2747 00005217 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2748 00005219 0F84C2000000        <1>     jz writeExit
  2749 0000521F 66C705(8E070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2749 00005227 00                  <1>
  2750 00005228 E8B4BAFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2751 0000522D 0F82A5000000        <1>     jc writeBadExit
  2752 00005233 0F8575FFFFFF        <1>     jnz .mainWrite   ;Else, rax = Next sector to write to
  2753                              <1>     ;Here we need to extend by a cluster since we are at the end of the 
  2754                              <1>     ; current allocation chain
  2755 00005239 8B1D(7D070000)      <1>     mov ebx, dword [currClustD] ;Setup last cluster value in ebx
  2756 0000523F B901000000          <1>     mov ecx, 1  ;Append one more cluster to it!
  2757 00005244 E871B9FFFF          <1>     call allocateClusters
  2758 00005249 0F8289000000        <1>     jc writeBadExit
  2759 0000524F 3DFFFFFFFF          <1>     cmp eax, -1 ;If we cannot allocate any more clusters, disk full!
  2760 00005254 740C                <1>     je writeDiskFullExit  ;End write in this case!
  2761                              <1> ;Else we just allocated a new cluster to the chain, so we have a sector to 
  2762                              <1> ; write to! 
  2763                              <1> ;The cluster state has not changed due to the allocate clusters call.
  2764 00005256 E886BAFFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2765 0000525B 727B                <1>     jc writeBadExit
  2766 0000525D E94CFFFFFF          <1>     jmp .mainWrite    ;rax = Next sector to write to
  2767                              <1> writeDiskFullExit:
  2768 00005262 E8D6000000          <1>     call getCurrentSFT  ;Get SFT pointer into rdi
  2769 00005267 66F747050001        <1>     test word [rdi + sft.wDeviceInfo], devDiskI24onFull
  2770 0000526D 7477                <1>     jz writeExit.altEp  ;If no trigger Int 24h, return success. rdi -> SFT
  2771                              <1> ;Else trigger Int 24h.
  2772                              <1> ;Start by setting the allowed actions.
  2773                              <1> ;Due to the disk being full, we ONLY allow the user to Fail.
  2774 0000526F 66C705(33040000)27- <1>     mov word [errorExCde], errDskFul    ;Mark Disk full
  2774 00005277 00                  <1>
  2775 00005278 B40F                <1>     mov ah, critWrite | critData | critFailOK   ;Move flags to ah
  2776 0000527A EB0B                <1>     jmp short hardEOFexit.cmn
  2777                              <1> hardEOFexit:
  2778                              <1> ;Jumped to from read file! rdi -> SFT
  2779 0000527C 66C705(33040000)26- <1>     mov word [errorExCde], errHdlEOF    ;Mark EOF for file
  2779 00005284 00                  <1>
  2780 00005285 B40E                <1>     mov ah, critRead | critData | critFailOK    ;Move to ah
  2781                              <1> .cmn:
  2782 00005287 8825(92040000)      <1>     mov byte [Int24bitfld], ah  ;Store the bitfield var
  2783 0000528D 8A05(32070000)      <1>     mov al, byte [workingDrv]   ;Get drive number in al
  2784 00005293 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
  2785 0000529A C605(35040000)04    <1>     mov byte [errorAction], eActAbt
  2786 000052A1 C605(36040000)01    <1>     mov byte [errorClass], eClsOoR
  2787 000052A8 48892D(C2070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB pointer here (if a disk file)
  2788 000052AF 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2789 000052B5 750A                <1>     jnz .i24CharDev
  2790 000052B7 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the DPB pointer from the SFT
  2791 000052BB 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get Driver pointer
  2792 000052BF EB04                <1>     jmp short .i24Go
  2793                              <1> .i24CharDev:
  2794 000052C1 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the char drive pointer
  2795                              <1> .i24Go:
  2796 000052C5 BF0C000000          <1>     mov edi, drvGenFault    ;Report general fault to driver
  2797 000052CA E8051B0000          <1>     call criticalDOSError   ;Trigger i24...
  2798 000052CF 0FB705(33040000)    <1>     movzx eax, word [errorExCde]    ;... and return error code to caller
  2799 000052D6 EB05                <1>     jmp short writeBadExit.diskFull
  2800                              <1> writeBadExit:
  2801 000052D8 B805000000          <1>     mov eax, errAccDen      ;Normally return Access denied
  2802                              <1> .diskFull:
  2803                              <1> ;If we hard error in write we should return WITHOUT modifying the file
  2804                              <1> ; size information. Users should always follow a hard error on write with 
  2805                              <1> ; a zero byte write to ensure that any newly allocated FAT sectors are 
  2806                              <1> ; freed.
  2807 000052DD 31C9                <1>     xor ecx, ecx
  2808 000052DF F9                  <1>     stc             
  2809                              <1>     return          ;Return CF=CY and eax = Original Error code
    13                              <2> %%_ret:
    14 000052E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2810                              <1> 
  2811                              <1> writeExit:
  2812                              <1> ;Advances the bytes on the file pointer and commits file if opened to do so!
  2813                              <1> ;Return: ecx = Number of bytes transferred if CF=NC. Else, eax = Error code
  2814 000052E1 E857000000          <1>     call getCurrentSFT  ;Get SFT in rdi
  2815                              <1> .altEp: ;Exits skipping getting the SFT
  2816 000052E6 E85A000000          <1>     call updateCurrentSFT   ;Updates CurntOff in the SFT. Get xfr cnt in ecx
  2817 000052EB 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2818                              <1>     retnz           ;Return if char dev. No commit possible here.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000052F1 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000052F3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2819 000052F4 85C9                <1>     test ecx, ecx   ;If no bytes transferred, no growth to report!
  2820 000052F6 741C                <1>     jz writeDoCommit    ;But still commit any dirty buffers (ie for FAT growth)
  2821 000052F8 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~devDiskNoFlush ;File has been accessed
  2822                              <1> ;Now replace the filesize with the currentoffset if it is greater
  2823 000052FE 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2824 00005301 394717              <1>     cmp dword [rdi + sft.dFileSize], eax    
  2825 00005304 730E                <1>     jae writeDoCommit   ;If past the end of the file, update the file size!
  2826 00005306 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2827 00005309 B801000000          <1>     mov eax, 1  ;Update all SFTs with the growth of the file!
  2828 0000530E FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2829                              <1> writeDoCommit:
  2830                              <1> ;Common good exit routine for write
  2831 00005314 66F747020040        <1>     test word [rdi + sft.wOpenMode], openFlushWrites
  2832                              <1>     retz    ;If we don't flush on each write call, return here!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000531A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000531C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2833 0000531D 51                  <1>     push rcx
  2834 0000531E E80CEDFFFF          <1>     call commitMain ;If this fails, return CF=CY and eax = Error code
  2835 00005323 59                  <1>     pop rcx ;Else, ecx is preserved so return ecx = # bytes xfred
  2836                              <1>     return
    13                              <2> %%_ret:
    14 00005324 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2837                              <1> writeExitChar:
  2838                              <1> ;Input: eax = Number of chars transferred
  2839 00005325 8B0D(9C070000)      <1>     mov ecx, dword [tfrLen]
  2840 0000532B 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2841 0000532D 890D(A0070000)      <1>     mov dword [tfrCntr], ecx
  2842 00005333 EBAC                <1>     jmp short writeExit
  2843                              <1> ;-----------------------------------:
  2844                              <1> ;        File Handle routines       :
  2845                              <1> ;-----------------------------------:
  2846                              <1> 
  2847                              <1> setCurrentSFT:
  2848                              <1> ;Set the pointer in rdi as current SFT 
  2849 00005335 48893D(5B070000)    <1>     mov qword [currentSFT], rdi
  2850                              <1>     return 
    13                              <2> %%_ret:
    14 0000533C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2851                              <1> getCurrentSFT:
  2852                              <1> ;Get the current SFT pointer in rdi
  2853 0000533D 488B3D(5B070000)    <1>     mov rdi, qword [currentSFT]
  2854                              <1>     return 
    13                              <2> %%_ret:
    14 00005344 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2855                              <1> updateCurrentSFT:
  2856                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2857                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2858 00005345 57                  <1>     push rdi
  2859 00005346 E8F2FFFFFF          <1>     call getCurrentSFT
  2860                              <1> ;Get in ecx the number of bytes we xferred
  2861 0000534B 8B0D(A0070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2862 00005351 F7D9                <1>     neg ecx ;Multiply by -1
  2863 00005353 030D(9C070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2864                              <1> ;ecx has bytes transferred
  2865 00005359 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2866 0000535F 751D                <1>     jnz .exit
  2867                              <1> ;Down here for disk files only!
  2868 00005361 50                  <1>     push rax
  2869 00005362 8B05(7D070000)      <1>     mov eax, dword [currClustD]
  2870 00005368 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2871 0000536B 8B05(79070000)      <1>     mov eax, dword [currClustF]
  2872 00005371 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2873 00005374 8B05(90070000)      <1>     mov eax, dword [currByteF]
  2874 0000537A 89471B              <1>     mov dword [rdi + sft.dCurntOff], eax
  2875 0000537D 58                  <1>     pop rax
  2876                              <1> .exit:
  2877 0000537E 5F                  <1>     pop rdi
  2878 0000537F F8                  <1>     clc
  2879                              <1>     return 
    13                              <2> %%_ret:
    14 00005380 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2880                              <1> 
  2881                              <1> setupVarsForTransfer:
  2882                              <1> ;Computes the actual bytes to be transferred and 
  2883                              <1> ; sets up internal variables for the transfer. 
  2884                              <1> ;Works for both reading and writing
  2885                              <1> ;Input: ecx = User desired Bytes to transfer
  2886                              <1> ;       rdi = SFT pointer for the file
  2887                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2888                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2889                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2890                              <1> ;
  2891                              <1> ;Note: Does not account for a FULL disk. When writing,
  2892                              <1> ; if the disk will get full as a result of the write,
  2893                              <1> ; stop at the last byte before the transfer. If the 
  2894                              <1> ; file pointer is past the last free byte, write 0
  2895 00005381 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2896 00005385 488935(33070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2897 0000538C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2898 0000538F 8905(90070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2899 00005395 890D(9C070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2900 0000539B 890D(A0070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2901 000053A1 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedir | devCharDev
  2902                              <1>     retnz   ;Redir and char devices leave here
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000053A7 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000053A9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2903                              <1> ;Disk files...
  2904 000053AA 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2905 000053AD 8905(90070000)      <1>     mov dword [currByteF], eax
  2906 000053B3 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2907                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2908 000053B7 48892D(33070000)    <1>     mov qword [workingDPB], rbp
  2909 000053BE 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2910 000053C1 881D(32070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2911 000053C7 8B05(90070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2912 000053CD 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2913 000053D1 31D2                <1>     xor edx, edx    ;Zero rdx
  2914 000053D3 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2915                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2916                              <1>     ;edx has the offset into that sector
  2917 000053D5 8905(81070000)      <1>     mov dword [currSectF], eax
  2918 000053DB 668915(8E070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2919 000053E2 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2920 000053E4 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2921 000053E7 8805(85070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2922 000053ED 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2923 000053EF 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
  2924 000053F2 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2925 000053F4 8915(79070000)      <1>     mov dword [currClustF], edx ;Save in var
  2926 000053FA 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2927                              <1>     return 
    13                              <2> %%_ret:
    14 000053FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2928                              <1> 
  2929                              <1> findFreeSFT:
  2930                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2931                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2932                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2933                              <1> ;        CF=CY => eax = errNhl, error exit
  2934 000053FD 31DB                <1>     xor ebx, ebx
  2935                              <1> .mainLp:
  2936 000053FF 53                  <1>     push rbx    ;Save the sft ndx
  2937 00005400 E853000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2938 00005405 5B                  <1>     pop rbx
  2939 00005406 7307                <1>     jnc .sftExists
  2940 00005408 B804000000          <1>     mov eax, errNhl
  2941 0000540D F9                  <1>     stc
  2942                              <1>     return
    13                              <2> %%_ret:
    14 0000540E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2943                              <1> .sftExists:
  2944 0000540F 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2945 00005414 7425                <1>     je .sftFound
  2946 00005416 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2947 0000541B 751A                <1>     jne .gotoNextNdx
  2948                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2949 0000541D 53                  <1>     push rbx
  2950 0000541E 488B1D(63040000)    <1>     mov rbx, qword [serverPSP]
  2951 00005425 48395F47            <1>     cmp qword [rdi + sft.qPID], rbx
  2952 00005429 7509                <1>     jne .netGoToNextNdx
  2953 0000542B 8B1D(6B040000)      <1>     mov ebx, dword [dReqNetID]
  2954 00005431 395F43              <1>     cmp dword [rdi + sft.dNetID], ebx
  2955                              <1> .netGoToNextNdx:
  2956 00005434 5B                  <1>     pop rbx
  2957 00005435 7404                <1>     je .sftFound
  2958                              <1> .gotoNextNdx:
  2959 00005437 FFC3                <1>     inc ebx
  2960 00005439 EBC4                <1>     jmp short .mainLp
  2961                              <1> .sftFound:
  2962 0000543B 53                  <1>     push rbx
  2963 0000543C 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2964 00005441 488B1D(63040000)    <1>     mov rbx, qword [serverPSP]
  2965 00005448 48895F47            <1>     mov qword [rdi + sft.qPID], rbx
  2966 0000544C 8B1D(6B040000)      <1>     mov ebx, dword [dReqNetID]
  2967 00005452 895F43              <1>     mov dword [rdi + sft.dNetID], ebx
  2968 00005455 5B                  <1>     pop rbx
  2969 00005456 F8                  <1>     clc
  2970                              <1>     return
    13                              <2> %%_ret:
    14 00005457 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2971                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2972                              <1> ;Return a pointer to the SFT entry in rdi
  2973                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2974                              <1> ;Output: rdi = SFT pointer
  2975 00005458 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2976                              <1> .walk:
  2977 0000545F 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2978 00005463 7212                <1>     jb .thisTable
  2979 00005465 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2980 00005469 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2981 0000546C 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2982 00005473 75EA                <1>     jne .walk
  2983 00005475 F9                  <1>     stc
  2984                              <1>     return
    13                              <2> %%_ret:
    14 00005476 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2985                              <1> .thisTable:
  2986 00005477 50                  <1>     push rax
  2987 00005478 52                  <1>     push rdx
  2988 00005479 B857000000          <1>     mov eax, sft_size
  2989 0000547E F7E3                <1>     mul ebx
  2990 00005480 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2991 00005483 5A                  <1>     pop rdx
  2992 00005484 58                  <1>     pop rax
  2993 00005485 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2994                              <1>     return
    13                              <2> %%_ret:
    14 0000548C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2995                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2996                              <1> ;Return a zero extended value in rdi for the SFT entry
  2997                              <1> ;Input: bx = JFT handle (we zero extend)
  2998                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2999                              <1> ;        CF=CY => al = Error code, Fail
  3000 0000548D 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  3001 00005490 488B3D(47040000)    <1>     mov rdi, qword [currentPSP]
  3002 00005497 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  3003 0000549B 7204                <1>     jb .ok
  3004 0000549D B006                <1>     mov al, errBadHdl
  3005 0000549F F9                  <1>     stc
  3006                              <1>     return
    13                              <2> %%_ret:
    14 000054A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3007                              <1> .ok:
  3008 000054A1 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  3009 000054A7 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  3010 000054A9 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  3011 000054AB 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  3012 000054AF 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  3013 000054B3 EB0B                <1>     jmp short .pspOkExit
  3014                              <1> .pspJftBelow:
  3015 000054B5 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  3016                              <1> .pspJftOk:
  3017 000054BB 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  3018                              <1> .pspOkExit:
  3019 000054C0 F8                  <1>     clc
  3020                              <1>     return
    13                              <2> %%_ret:
    14 000054C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3021                              <1> findFreeJFTEntry:
  3022                              <1> ;Finds a free JFT entry in the currentPSP.
  3023                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  3024                              <1> ;        CF=CY => al=errNhl
  3025 000054C2 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  3026                              <1> .searchLp:
  3027 000054C4 E8C4FFFFFF          <1>     call getJFTPtr
  3028 000054C9 720A                <1>     jc .ffJFTbadExit
  3029 000054CB 803FFF              <1>     cmp byte [rdi], -1
  3030                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000054CE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000054D0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  3031 000054D1 FFC3                <1>     inc ebx
  3032 000054D3 EBEF                <1>     jmp short .searchLp
  3033                              <1> .ffJFTbadExit:
  3034 000054D5 B004                <1>     mov al, errNhl
  3035 000054D7 F9                  <1>     stc
  3036                              <1>     return
    13                              <2> %%_ret:
    14 000054D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3037                              <1> getSFTPtr:
  3038                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  3039                              <1> ;Input: bx = JFT handle
  3040                              <1> ;Output: CF=NC: rdi = SFT pointer
  3041                              <1> ;        CF=CY: Error, ax=Error code
  3042 000054D9 E815000000          <1>     call derefSFTPtr
  3043                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000054DE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000054E0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  3044 000054E1 50                  <1>     push rax
  3045 000054E2 8B05(6B040000)      <1>     mov eax, dword [dReqNetID]
  3046 000054E8 3B4743              <1>     cmp eax, dword [rdi + sft.dNetID]
  3047 000054EB 58                  <1>     pop rax
  3048                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000054EC 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000054EE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  3049 000054EF B006                <1>     mov al, errBadHdl   ;Error code
  3050 000054F1 F9                  <1>     stc         ;Reset CF
  3051                              <1>     return
    13                              <2> %%_ret:
    14 000054F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3052                              <1> 
  3053                              <1> derefSFTPtr:
  3054                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  3055                              <1> ;Input: bx = File handle (gets zero extended)
  3056                              <1> ;Output: CF=NC: rdi = SFT pointer
  3057                              <1> ;        CF=CY: Error, ax=Error code
  3058 000054F3 E895FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  3059 000054F8 7205                <1>     jb .fail
  3060 000054FA 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  3061 000054FD 7504                <1>     jne .ok
  3062                              <1> .fail:
  3063 000054FF B006                <1>     mov al, errBadHdl
  3064 00005501 F9                  <1>     stc
  3065                              <1>     return
    13                              <2> %%_ret:
    14 00005502 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3066                              <1> .ok:
  3067 00005503 53                  <1>     push rbx    ;Preserve the JFT handle
  3068 00005504 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  3069 00005507 E84CFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  3070 0000550C 5B                  <1>     pop rbx 
  3071                              <1>     return
    13                              <2> %%_ret:
    14 0000550D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3072                              <1> 
  3073                              <1> getSFTndxInheritable:
  3074                              <1> ;Given a SFTndx this function will verify if it is inheritable
  3075                              <1> ;Input: ebx = SFTndx (word)
  3076                              <1> ;Output: 
  3077                              <1> ;   ZF=ZE => Inheritable
  3078                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  3079 0000550E 57                  <1>     push rdi
  3080 0000550F E844FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  3081 00005514 7208                <1>     jc .badNdx
  3082 00005516 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  3083 0000551C 5F                  <1>     pop rdi
  3084                              <1>     return
    13                              <2> %%_ret:
    14 0000551D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3085                              <1> .badNdx:
  3086 0000551E 31FF                <1>     xor edi, edi
  3087 00005520 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  3088 00005522 F8                  <1>     clc
  3089 00005523 5F                  <1>     pop rdi
  3090                              <1>     return
    13                              <2> %%_ret:
    14 00005524 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3091                              <1> 
  3092                              <1> incrementOpenCount:
  3093                              <1> ;Given a SFTndx, this function will increment it's open count
  3094                              <1> ;Output:
  3095                              <1> ;   CF=NC => sftndx ok, count incremented
  3096                              <1> ;   CF=CY => Bad ndx
  3097 00005525 57                  <1>     push rdi
  3098 00005526 E82DFFFFFF          <1>     call getSFTPtrfromSFTNdx
  3099 0000552B 7203                <1>     jc .exit
  3100 0000552D 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  3101                              <1> .exit:
  3102 00005530 5F                  <1>     pop rdi
  3103                              <1>     return
    13                              <2> %%_ret:
    14 00005531 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3104                              <1> 
  3105                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  3106                              <1> ;Input: rdi = SFT pointer
  3107                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  3108 00005532 9C                  <1>     pushfq
  3109 00005533 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  3110 00005536 FFC8                <1>     dec eax     ;Decrement count
  3111 00005538 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  3112 0000553A FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  3113                              <1> .exit:
  3114 0000553C 9D                  <1>     popfq
  3115 0000553D 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  3116                              <1>     return
    13                              <2> %%_ret:
    14 00005540 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3117                              <1> 
  3118                              <1> ;Buffer Wrapper
  3119                              <1> writeThroughBuffersForHandle:
  3120                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  3121 00005541 57                  <1>     push rdi
  3122 00005542 55                  <1>     push rbp
  3123 00005543 E8F5FDFFFF          <1>     call getCurrentSFT
  3124 00005548 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedir | devCharDev
  3125 0000554E 751C                <1>     jnz .exit
  3126 00005550 FF35(33070000)      <1>     push qword [workingDPB]
  3127 00005556 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  3128 0000555A 48892D(33070000)    <1>     mov qword [workingDPB], rbp
  3129 00005561 E84AB2FFFF          <1>     call flushAllBuffersForDPB
  3130 00005566 8F05(33070000)      <1>     pop qword [workingDPB]
  3131                              <1> .exit:
  3132 0000556C 5D                  <1>     pop rbp
  3133 0000556D 5F                  <1>     pop rdi
  3134                              <1>     return
    13                              <2> %%_ret:
    14 0000556E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3135                              <1> 
  3136                              <1> setDPBfromSFT:
  3137                              <1> ;Sets and updates the DPB from an SFT ptr
  3138                              <1> ;Input: rdi -> sft
  3139                              <1> ;Output: CF=NC: workingDPB set
  3140                              <1> ;        CF=CY: Error fail, exit
  3141 0000556F 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  3142 00005573 E9571F0000          <1>     jmp getDiskDPB.sftEp  ;Doing this will nullify CDS paths on disk swaps!
  3143                              <1> 
  3144                              <1> setExtOpenMode:
  3145                              <1> ;Sets the open mode of the sft if this is an extended open call.
  3146                              <1> ;Input: word [wEOFlags] set to indicate extended open call
  3147                              <1> ;       word [wEOOpenMode] set with open flags
  3148                              <1> ;       rdi -> Current SFT
  3149                              <1> ;Output: CF=NC: No an extended open call. Nothing touched.
  3150                              <1> ;        CF=CY: Extended open call. Setup SFT open mode bits
  3151 00005578 66F705(B2070000)01- <1>     test word [wEOFlags], eoInExtOpen
  3151 00005580 00                  <1>
  3152                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005581 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00005583 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  3153 00005584 53                  <1>     push rbx
  3154 00005585 0FB71D(B6070000)    <1>     movzx ebx, word [wEOOpenMode]
  3155 0000558C 66095F02            <1>     or word [rdi + sft.wOpenMode], bx
  3156 00005590 5B                  <1>     pop rbx
  3157 00005591 F9                  <1>     stc
  3158                              <1>     return
    13                              <2> %%_ret:
    14 00005592 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3159                              <1> 
  3160                              <1> delVolLabel:
  3161 00005593 53                  <1>     push rbx
  3162 00005594 BB01000000          <1>     mov ebx, 1
  3163 00005599 EB03                <1>     jmp short makVolLabel.goVolLab
  3164                              <1> makVolLabel:
  3165 0000559B 53                  <1>     push rbx
  3166 0000559C 31DB                <1>     xor ebx, ebx
  3167                              <1> .goVolLab:
  3168 0000559E E802000000          <1>     call syncVolLabel
  3169 000055A3 5B                  <1>     pop rbx
  3170                              <1>     return
    13                              <2> %%_ret:
    14 000055A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  3171                              <1> syncVolLabel:
  3172                              <1> ;Used to sync volume labels when a new vol label made in DOS.
  3173                              <1> ;If the device doesn't support this function we just ignore it.
  3174                              <1> ;Fails therefore are ignored.
  3175                              <1> ;Input: fcbName = Volume Label name in FCB format
  3176                              <1> ;       bl = 0 : Create label
  3177                              <1> ;       bl = 1 : Delete label (reset to NO NAME and 0 time)
  3178                              <1> ;       al = 0 based drive to work on
  3179                              <1> ;Preserves all registers except rax and rbx (rbx saved externally)
  3180 000055A5 51                  <1>     push rcx
  3181 000055A6 52                  <1>     push rdx
  3182 000055A7 56                  <1>     push rsi
  3183 000055A8 57                  <1>     push rdi
  3184                              <1> 
  3185 000055A9 53                  <1>     push rbx    ;Save subfunction code
  3186 000055AA 88C3                <1>     mov bl, al  ;Save drive number
  3187 000055AC FFC3                <1>     inc ebx     ;Turn into a 1 based drive number
  3188 000055AE B80D000000          <1>     mov eax, 0Dh
  3189 000055B3 B966080000          <1>     mov ecx, 0866h   ;IOCTL GET LABEL PACKET
  3190 000055B8 488D15(611A0000)    <1>     lea rdx, labelPkt
  3191 000055BF E838000000          <1>     call ioctrl ;This call sets the working drive again to drive in bx
  3192 000055C4 5B                  <1>     pop rbx     ;Get subfunction back
  3193 000055C5 7230                <1>     jc .exit
  3194 000055C7 85DB                <1>     test ebx, ebx
  3195 000055C9 7509                <1>     jnz .defaultLbl
  3196 000055CB 488D35(03070000)    <1>     lea rsi, fcbName
  3197 000055D2 EB07                <1>     jmp short .makePkt
  3198                              <1> .defaultLbl:
  3199 000055D4 488D353FAAFFFF      <1>     lea rsi, dosDfltLbl
  3200                              <1> .makePkt:
  3201                              <1> ;rsi -> Source of 11 chars to copy over
  3202 000055DB 488D7A06            <1>     lea rdi, qword [rdx + idParamBlk.volLab]    ;Point rdi here
  3203 000055DF B90B000000          <1>     mov ecx, 11
  3204 000055E4 F3A4                <1>     rep movsb
  3205 000055E6 B946080000          <1>     mov ecx, 0846h  ;IOCTL SET LABEL PACKET
  3206 000055EB B80D000000          <1>     mov eax, 0Dh
  3207 000055F0 31DB                <1>     xor ebx, ebx    ;Use default drive now (set in previous ioctl call)
  3208 000055F2 E805000000          <1>     call ioctrl
  3209                              <1> .exit:
  3210 000055F7 5F                  <1>     pop rdi
  3211 000055F8 5E                  <1>     pop rsi
  3212 000055F9 5A                  <1>     pop rdx
  3213 000055FA 59                  <1>     pop rcx
  3214                              <1>     return
    13                              <2> %%_ret:
    14 000055FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35                              <1> ;Query IOCTL capacity (optionally implemented)
    36                              <1> ;al = 10h => Query IOCTL Handle
    37                              <1> ;al = 11h => Quety IOCTL block Device
    38                              <1> ;======================================================
    39 000055FC 3C11                <1>     cmp al, 17
    40 000055FE 775F                <1>     ja .invalidFunction
    41 00005600 84C0                <1>     test al, al
    42 00005602 747A                <1>     jz .getDevWord
    43 00005604 3C01                <1>     cmp al, 1
    44 00005606 0F849B000000        <1>     je .setDevWord
    45 0000560C 2C02                <1>     sub al, 2
    46 0000560E 3C03                <1>     cmp al, 3
    47 00005610 0F86C3000000        <1>     jbe .ioctlStringFunctions
    48 00005616 2C04                <1>     sub al, 4
    49 00005618 3C01                <1>     cmp al, 1
    50 0000561A 0F8698010000        <1>     jbe .ioStatusFunctions
    51 00005620 2C02                <1>     sub al, 2
    52 00005622 3C02                <1>     cmp al, 2
    53 00005624 0F8621020000        <1>     jbe .devControl
    54 0000562A 2C03                <1>     sub al, 3
    55 0000562C 0F84EC020000        <1>     jz .setSharingCount
    56 00005632 FEC8                <1>     dec al
    57 00005634 0F8402030000        <1>     jz .genericCharDevIOCTL
    58 0000563A FEC8                <1>     dec al
    59 0000563C 0F8401030000        <1>     jz .genericBlokDevIOCTL
    60 00005642 FEC8                <1>     dec al
    61 00005644 0F84E6030000        <1>     jz .getDrvLogicalDevice
    62 0000564A FEC8                <1>     dec al
    63 0000564C 0F843E040000        <1>     jz .setDrvLogicalDevice
    64 00005652 3C01                <1>     cmp al, 1
    65 00005654 0F8490040000        <1>     jz .queryIOCTLHdl
    66 0000565A E992040000          <1>     jmp .queryIOCTLDev
    67                              <1> .invalidFunction:
    68 0000565F B801000000          <1>     mov eax, errInvFnc
    69                              <1> .ifExit:
    70 00005664 E979260000          <1>     jmp extErrExit
    71                              <1> .accessDeniedError:
    72 00005669 B805000000          <1>     mov eax, errAccDen
    73 0000566E EBF4                <1>     jmp short .ifExit
    74                              <1> .badHandle:
    75 00005670 B806000000          <1>     mov eax, errBadHdl
    76 00005675 EBED                <1>     jmp short .ifExit
    77                              <1> .badData:
    78 00005677 B80D000000          <1>     mov eax, errInvDat
    79 0000567C EBE6                <1>     jmp short .ifExit
    80                              <1> ;...Functions...
    81                              <1> .getDevWord:
    82                              <1> ;Input: bx = File Handle
    83                              <1> ;Ouput: dl = Low byte of device info word
    84                              <1> ;       dh = If char dev, upper byte of driver attribute word
    85                              <1> ;            Else, upper byte of device info word
    86 0000567E E870FEFFFF          <1>     call derefSFTPtr
    87 00005683 72EB                <1>     jc .badHandle
    88 00005685 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    89 00005689 66F7C28000          <1>     test dx, devCharDev
    90 0000568E 7407                <1>     jz .gdwExit
    91 00005690 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr]         ;Get driver pointer
    92 00005694 8A7709              <1>     mov dh, byte [rdi + drvHdr.attrib + 1]  ;Get the header 
    93                              <1> .gdwExit:
    94 00005697 30C0                <1>     xor al, al
    95 00005699 E866210000          <1>     call getUserRegs
    96 0000569E 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    97 000056A2 E92D260000          <1>     jmp extGoodExit
    98                              <1> .setDevWord:
    99                              <1> ;Input: bx = File Handle
   100                              <1> ;       dl = Low byte of Device information word (if char dev)
   101                              <1> ;       dh = Upper byte of dev info for disk devs (undocumented). 
   102                              <1> ;            Must be 0 for char devs.
   103 000056A7 E847FEFFFF          <1>     call derefSFTPtr
   104 000056AC 72C2                <1>     jc .badHandle 
   105 000056AE 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   106 000056B4 7416                <1>     jz .sdwDisk
   107 000056B6 C605(32040000)04    <1>     mov byte [errorLocus], eLocChr
   108 000056BD 84F6                <1>     test dh, dh ;If dh is not 0 for a char dev, complain!
   109 000056BF 75B6                <1>     jnz .badData
   110 000056C1 80CA80              <1>     or dl, devCharDev   ;Ensure we remain a char dev if we are one
   111 000056C4 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl    ;And store these bits here
   112 000056C7 E908260000          <1>     jmp extGoodExit
   113                              <1> .sdwDisk:
   114                              <1> ;Set high bits here for disk devices only.
   115                              <1> ;Can only set/clear bit 1 for EOF and disk full special handling. 
   116                              <1> ; Fail if any other bits are set in dh.
   117 000056CC F6C6FE              <1>     test dh, ~1
   118 000056CF 75A6                <1>     jnz .badData
   119 000056D1 887706              <1>     mov byte [rdi + sft.wDeviceInfo + 1], dh
   120 000056D4 E9FB250000          <1>     jmp extGoodExit
   121                              <1> .ioctlStringFunctions:
   122                              <1> ;al = 0 -> ReadCharDev
   123                              <1> ;al = 1 -> WriteCharDev
   124                              <1> ;al = 2 -> ReadDiskDev
   125                              <1> ;al = 3 -> WriteDiskDev
   126                              <1> ;Input: bx = File handle/drive number
   127                              <1> ;       ecx = Bytes to transfer
   128                              <1> ;       rdx = Ptr to string to transfer
   129 000056D9 0FB6F3              <1>     movzx esi, bl
   130 000056DC 488D1D(EB040000)    <1>     lea rbx, primReqPkt
   131 000056E3 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   132 000056EA C605(92040000)00    <1>     mov byte [Int24bitfld], 0
   133                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   134                              <1> ;Setup the common ioReqPkt fields and the read/write 
   135 000056F1 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   136 000056F4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   137 000056F7 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   138 000056FB 51                  <1>     push rcx
   139 000056FC 52                  <1>     push rdx
   140 000056FD B903000000          <1>     mov ecx, drvIOCTLREAD
   141 00005702 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   142 00005707 A801                <1>     test al, 1  ;If set, this is a write operation
   143 00005709 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   144 0000570C 7507                <1>     jnz .notWrite
   145 0000570E 800D(92040000)01    <1>     or byte [Int24bitfld], critWrite
   146                              <1> .notWrite:
   147 00005715 5A                  <1>     pop rdx
   148 00005716 59                  <1>     pop rcx
   149 00005717 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   150 0000571A 3C01                <1>     cmp al, 1
   151 0000571C 7733                <1>     ja .ioctlStringBlockDevice
   152                              <1>     ;Here we are for char devices only
   153 0000571E 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   154 00005721 E8CDFDFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   155 00005726 0F8244FFFFFF        <1>     jc .badHandle 
   156 0000572C C605(32040000)04    <1>     mov byte [errorLocus], eLocChr
   157 00005733 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   158 00005739 0F8420FFFFFF        <1>     jz .invalidFunction
   159                              <1> 
   160 0000573F 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   161 00005743 800D(92040000)80    <1>     or byte [Int24bitfld], critCharDev
   162 0000574A 4887DE              <1>     xchg rbx, rsi   ;Swap back
   163 0000574D 31C0                <1>     xor eax, eax
   164 0000574F EB38                <1>     jmp short .ioctlStringCommon
   165                              <1> .ioctlStringBlockDevice:
   166                              <1>     ;Here we are for block devices only
   167                              <1>     ;esi has the drive number
   168 00005751 C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk
   169 00005758 89F0                <1>     mov eax, esi
   170 0000575A 53                  <1>     push rbx
   171 0000575B E838210000          <1>     call getCDS ;Returns in al the unit number of the drive
   172 00005760 5B                  <1>     pop rbx
   173 00005761 730A                <1>     jnc .okDrive
   174 00005763 B80F000000          <1>     mov eax, errBadDrv
   175 00005768 E975250000          <1>     jmp extErrExit
   176                              <1> .okDrive:
   177 0000576D 488B35(3B070000)    <1>     mov rsi, qword [workingCDS]
   178 00005774 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   179 00005778 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   180 0000577B 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   181 0000577E 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   182 00005782 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   183 00005785 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   184                              <1> .ioctlStringCommon:
   185                              <1>     ;rsi -> Device Driver header
   186                              <1>     ;rbx -> Request Header
   187                              <1>     ;al = Media descriptor
   188 00005789 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   189 0000578C 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLCtl
   190 00005792 0F84C7FEFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   191                              <1>     ;Make request now
   192 00005798 51                  <1>     push rcx    ;Push xfrctr
   193 00005799 52                  <1>     push rdx    ;Buffer Ptr
   194 0000579A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   195 000057A0 E8B41B0000          <1>     call goDriver
   196 000057A5 5A                  <1>     pop rdx
   197 000057A6 59                  <1>     pop rcx
   198                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   199 000057A7 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   200 000057AD 0F8421250000        <1>     jz extGoodExit
   201 000057B3 E96B030000          <1>     jmp failIOCTLCall
   202                              <1> 
   203                              <1> .ioStatusFunctions:
   204                              <1> ;al = 0 -> Get input status 
   205                              <1> ;al = 1 -> Get output status
   206 000057B8 E836FDFFFF          <1>     call derefSFTPtr
   207 000057BD 0F82ADFEFFFF        <1>     jc .badHandle 
   208 000057C3 488D1D(EB040000)    <1>     lea rbx, primReqPkt
   209 000057CA C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   210 000057CD C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   211 000057D4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;File cannot be redir!
   212 000057DA 0F857FFEFFFF        <1>     jnz .invalidFunction
   213 000057E0 C605(92040000)00    <1>     mov byte [Int24bitfld], 0
   214 000057E7 B906000000          <1>     mov ecx, drvINSTATUS
   215 000057EC BA0A000000          <1>     mov edx, drvOUTSTATUS
   216 000057F1 84C0                <1>     test al, al
   217 000057F3 0F45CA              <1>     cmovnz ecx, edx
   218 000057F6 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   219 000057F9 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   220 000057FF 7416                <1>     jz .ioStatDisk
   221 00005801 C605(32040000)04    <1>     mov byte [errorLocus], eLocChr
   222 00005808 800D(92040000)80    <1>     or byte [Int24bitfld], critCharDev
   223 0000580F 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   224 00005813 30C0                <1>     xor al, al
   225 00005815 EB15                <1>     jmp short .ioStatCommon
   226                              <1> .ioStatDisk:
   227 00005817 C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk
   228 0000581E 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   229 00005822 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   230 00005825 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   231 00005828 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   232                              <1> .ioStatCommon:
   233 0000582C E8281B0000          <1>     call goDriver
   234 00005831 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   235 00005837 0F85E6020000        <1>     jnz failIOCTLCall
   236 0000583D 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   237 00005843 7403                <1>     jz .notBusyExit
   238 00005845 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   239                              <1>     return 
    13                              <2> %%_ret:
    14 00005847 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> .notBusyExit:
   241                              <1> ;Device ready/NotEOF
   242 00005848 31C0                <1>     xor eax, eax
   243                              <1>     return
    13                              <2> %%_ret:
    14 0000584A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> 
   245                              <1> .devControl:
   246                              <1> ;al = 0 -> Is media removable?
   247                              <1> ;al = 1 -> Is device local or remote?
   248                              <1> ;al = 2 -> Is handle local or remote?
   249 0000584B 84C0                <1>     test al, al
   250 0000584D 746D                <1>     jz .remTest
   251 0000584F A801                <1>     test al, 1
   252 00005851 751B                <1>     jnz .deviceTest
   253                              <1> ;Handle Local or Remote
   254 00005853 E89BFCFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   255 00005858 0F8212FEFFFF        <1>     jc .badHandle 
   256 0000585E 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   257                              <1> .devControlExit:
   258 00005862 E89D1F0000          <1>     call getUserRegs
   259 00005867 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   260 0000586B 31C0                <1>     xor eax, eax
   261                              <1>     return 
    13                              <2> %%_ret:
    14 0000586D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   262                              <1> .deviceTest:
   263                              <1> ;Drive Local or Remote
   264                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   265                              <1> ;Else, just get the CDS word and swap subst and net
   266 0000586E 88D8                <1>     mov al, bl
   267 00005870 E823200000          <1>     call getCDS
   268 00005875 730A                <1>     jnc .devTestOkDrive
   269 00005877 B80F000000          <1>     mov eax, errBadDrv
   270 0000587C E961240000          <1>     jmp extErrExit
   271                              <1> .devTestOkDrive:
   272 00005881 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
   273 00005888 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   274 0000588C 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   275 00005891 7513                <1>     jnz .remoteDrive
   276 00005893 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   277 00005897 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   278 0000589B 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   279 0000589F 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   280 000058A4 EBBC                <1>     jmp short .devControlExit
   281                              <1> .remoteDrive:
   282 000058A6 6689D3              <1>     mov bx, dx
   283 000058A9 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   284 000058AE 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   285 000058B3 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   286 000058B5 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   287 000058BA EBA6                <1>     jmp short .devControlExit   ;Store it
   288                              <1> 
   289                              <1> .remTest:
   290                              <1> ;Drive letter in bl
   291 000058BC 88D8                <1>     mov al, bl
   292 000058BE E8D51F0000          <1>     call getCDS
   293 000058C3 730A                <1>     jnc .remTestOkDrive
   294                              <1> .remTestBadDrv:
   295 000058C5 B80F000000          <1>     mov eax, errBadDrv
   296 000058CA E913240000          <1>     jmp extErrExit
   297                              <1> .remTestOkDrive:
   298 000058CF 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   299 000058D6 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   300 000058DC 75E7                <1>     jnz .remTestBadDrv
   301 000058DE 488D1D(EB040000)    <1>     lea rbx, primReqPkt
   302 000058E5 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   303 000058E9 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   304 000058EC 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   305 000058F0 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvOpClRem
   306 000058F6 0F8463FDFFFF        <1>     jz .invalidFunction
   307 000058FC C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   308 000058FF C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   309 00005903 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   310 00005909 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   311 0000590C E8481A0000          <1>     call goDriver
   312 00005911 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   313 00005915 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   314 0000591A C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   315                              <1>     return
    13                              <2> %%_ret:
    14 0000591D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> 
   317                              <1> .setSharingCount:
   318                              <1> ;Input: cx = Share Count
   319                              <1> ;       dx = Share Retry
   320 0000591E 66890D(1F000000)    <1>     mov word [shareCount], cx
   321 00005925 6685D2              <1>     test dx, dx
   322 00005928 0F8431FDFFFF        <1>     jz .invalidFunction
   323 0000592E 668915(21000000)    <1>     mov word [shareDelay], dx
   324 00005935 31C0                <1>     xor eax, eax
   325 00005937 E998230000          <1>     jmp extGoodExit
   326                              <1> 
   327                              <1> .genericCharDevIOCTL:
   328 0000593C E830000000          <1>     call .getHandleInfo
   329 00005941 EB05                <1>     jmp short .ioctlReqMake
   330                              <1> .genericBlokDevIOCTL:
   331 00005943 E857000000          <1>     call .getBlkDevInfo
   332                              <1> .ioctlReqMake:
   333                              <1> ;rsi must point to the driver header here
   334 00005948 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   335 0000594E 7511                <1>     jnz .supportsIOCTL
   336                              <1> .badFunction:
   337 00005950 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   338 00005957 B801000000          <1>     mov eax, errInvFnc
   339 0000595C E981230000          <1>     jmp extErrExit
   340                              <1> .supportsIOCTL:
   341                              <1>     ;Setup the request header
   342 00005961 E884000000          <1>     call .doIOCTLrequest
   343 00005966 0F8468230000        <1>     jz extGoodExit
   344 0000596C E9B2010000          <1>     jmp failIOCTLCall
   345                              <1> 
   346                              <1> .getHandleInfo:
   347                              <1> ;Returns in rsi a pointer to the driver for the handle device
   348 00005971 E863FBFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   349 00005976 7312                <1>     jnc .ghiOkHdl
   350                              <1> .ghiBadHdl:
   351 00005978 C605(32040000)04    <1>     mov byte [errorLocus], eLocChr
   352 0000597F 58                  <1>     pop rax ;Pop the return addr, return through DOS immediately
   353 00005980 B806000000          <1>     mov eax, errBadHdl
   354 00005985 E958230000          <1>     jmp extErrExit  ;Exit as if in line with main routine body
   355                              <1> .ghiOkHdl:
   356 0000598A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   357 00005990 75E6                <1>     jnz .ghiBadHdl
   358 00005992 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   359 00005998 74DE                <1>     jz .ghiBadHdl
   360 0000599A 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   361                              <1>     return
    13                              <2> %%_ret:
    14 0000599E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> .getBlkDevInfo:
   364                              <1> ;Returns in rsi a ptr to the block device driver
   365 0000599F 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   366 000059A1 51                  <1>     push rcx
   367 000059A2 52                  <1>     push rdx
   368 000059A3 E8F01E0000          <1>     call getCDS ;Sets the current CDS
   369 000059A8 5A                  <1>     pop rdx
   370 000059A9 59                  <1>     pop rcx
   371 000059AA 7217                <1>     jc .gbdiBadDrv
   372                              <1>     ;Check the CDS not net, subst or join
   373 000059AC 488B35(3B070000)    <1>     mov rsi, qword [workingCDS]
   374 000059B3 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   375 000059B7 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   376 000059BB 7406                <1>     jz .gbdiBadDrv
   377 000059BD 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   378 000059C1 7412                <1>     jz .gbdiOk
   379                              <1> .gbdiBadDrv:
   380 000059C3 C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk
   381 000059CA 58                  <1>     pop rax ;Pop the return addr, return through DOS immediately
   382 000059CB B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   383 000059D0 E90D230000          <1>     jmp extErrExit
   384                              <1> .gbdiOk:
   385                              <1>     ;CDS is good,now get the DPB
   386 000059D5 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   387 000059D9 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   388 000059DD 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   389 000059E0 8805(EC040000)      <1>     mov byte [primReqPkt + ioctlReqPkt.unitnm], al
   390 000059E6 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi
   391                              <1>     return
    13                              <2> %%_ret:
    14 000059E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   392                              <1> 
   393                              <1> 
   394                              <1> .doIOCTLrequest:
   395                              <1> ;Does IOCTL request
   396                              <1> ;Input: cx = Major/Minor bytes packed in cx
   397                              <1> ;       rdx -> Ptr to control packet
   398                              <1> ;Output: ZF=ZE: No error.
   399                              <1> ;        ZF=NZ: Error. Get error code.
   400                              <1> ;       rbx -> Left pointing to the request packet
   401                              <1> ;       eax = Status word
   402 000059EA 488D1D(EB040000)    <1>     lea rbx, primReqPkt
   403 000059F1 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   404 000059F4 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   405 000059F8 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   406 000059FE 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   407 00005A02 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   408 00005A06 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   409 00005A09 E8F61D0000          <1>     call getUserRegs
   410 00005A0E 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   411 00005A12 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   412 00005A16 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   413 00005A1A 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   414 00005A1E 4889FE              <1>     mov rsi, rdi
   415 00005A21 E833190000          <1>     call goDriver
   416 00005A26 0FB74303            <1>     movzx eax, word [rbx + ioctlReqPkt.status]
   417 00005A2A A900800000          <1>     test eax, drvErrStatus
   418                              <1>     return
    13                              <2> %%_ret:
    14 00005A2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> .getDrvLogicalDevice:
   421 00005A30 88D8                <1>     mov al, bl
   422 00005A32 488D1D(EB040000)    <1>     lea rbx, primReqPkt
   423 00005A39 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   424 00005A3D C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   425 00005A40 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   426 00005A46 53                  <1>     push rbx
   427 00005A47 E84C1E0000          <1>     call getCDS
   428 00005A4C 8805(32070000)      <1>     mov byte [workingDrv], al
   429 00005A52 5B                  <1>     pop rbx
   430 00005A53 0F826CFEFFFF        <1>     jc .remTestBadDrv
   431 00005A59 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
   432 00005A60 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   433 00005A64 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   434 00005A68 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   435 00005A6B 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   436                              <1> 
   437 00005A6E 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   438 00005A74 0F84E5FBFFFF        <1>     jz .invalidFunction
   439 00005A7A E8DA180000          <1>     call goDriver
   440 00005A7F 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   441 00005A85 7405                <1>     jz .getDrvOk
   442 00005A87 E997000000          <1>     jmp failIOCTLCall
   443                              <1> .getDrvOk:
   444 00005A8C 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   445                              <1>     return
    13                              <2> %%_ret:
    14 00005A8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> .setDrvLogicalDevice:
   447 00005A90 88D8                <1>     mov al, bl
   448 00005A92 488D1D(EB040000)    <1>     lea rbx, primReqPkt
   449 00005A99 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   450 00005A9D C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   451 00005AA0 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   452 00005AA6 53                  <1>     push rbx
   453 00005AA7 E8EC1D0000          <1>     call getCDS
   454 00005AAC 8805(32070000)      <1>     mov byte [workingDrv], al
   455 00005AB2 5B                  <1>     pop rbx
   456 00005AB3 0F820CFEFFFF        <1>     jc .remTestBadDrv
   457 00005AB9 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
   458 00005AC0 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   459 00005AC4 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   460 00005AC8 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   461 00005ACB 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   462 00005ACE 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   463 00005AD4 0F8485FBFFFF        <1>     jz .invalidFunction
   464 00005ADA E87A180000          <1>     call goDriver
   465 00005ADF 30C0                <1>     xor al, al
   466 00005AE1 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   467                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005AE7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00005AE9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   468                              <1> 
   469                              <1> .queryIOCTLHdl:
   470 00005AEA E882FEFFFF          <1>     call .getHandleInfo
   471 00005AEF EB05                <1>     jmp short .queryCmn
   472                              <1> .queryIOCTLDev:
   473 00005AF1 E8A9FEFFFF          <1>     call .getBlkDevInfo
   474                              <1> .queryCmn:
   475                              <1> ;If Query is set, then we should be able to make the IOCTL Query request
   476 00005AF6 66F746088000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLQ
   477 00005AFC 0F844EFEFFFF        <1>     jz .badFunction
   478 00005B02 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   479 00005B08 0F8442FEFFFF        <1>     jz .badFunction
   480 00005B0E E8D7FEFFFF          <1>     call .doIOCTLrequest
   481 00005B13 0F84BB210000        <1>     jz extGoodExit
   482                              <1> ;Else, the driver reports it doesn't recognise the command function!
   483 00005B19 B805000000          <1>     mov eax, errAccDen
   484 00005B1E E9BF210000          <1>     jmp extErrExit
   485                              <1> 
   486                              <1> failIOCTLCall:
   487                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   488                              <1> ;rbx -> Driver request packet
   489 00005B23 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   490 00005B27 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   491 00005B2D E8CF110000          <1>     call xlatHardError
   492 00005B32 0FB705(33040000)    <1>     movzx eax, word [errorExCde] 
   493 00005B39 E9A4210000          <1>     jmp extErrExit
   494                              <1> 
    44                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 00005B3E E854210000          <1>     call dosCrit1Enter
    15 00005B43 B806000000          <1>     mov eax, 6
    16 00005B48 39C3                <1>     cmp ebx, eax
    17 00005B4A 0F42D8              <1>     cmovb ebx, eax
    18 00005B4D 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 00005B4F 488915(6F040000)    <1>     mov qword [firstMCB], rdx
    21 00005B56 488915(77040000)    <1>     mov qword [bestMCB], rdx
    22 00005B5D 488915(7F040000)    <1>     mov qword [lastMCB], rdx
    23 00005B64 31ED                <1>     xor ebp, ebp    
    24 00005B66 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00005B68 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 00005B6F 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00005B72 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00005B75 7409                <1>     je .walk1
    30 00005B77 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00005B7A 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 00005B80 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00005B88 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 00005B8E 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00005B91 744A                <1>     je .det0    ;Determine if this block is useful
    41 00005B93 31C9                <1>     xor ecx, ecx
    42 00005B95 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 00005B98 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 00005B9F 48C1E104            <1>     shl rcx, 4
    46 00005BA3 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 00005BA6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 00005BA9 7409                <1>     je .cons1
    49 00005BAB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 00005BAE 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 00005BB4 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 00005BBC 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 00005BBE 31C9                <1>     xor ecx, ecx
    56 00005BC0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 00005BC3 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 00005BC9 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 00005BCC 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 00005BCE 31D2                <1>     xor edx, edx
    61 00005BD0 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 00005BD3 48895608            <1>     mov qword [rsi + 8], rdx
    63 00005BD7 3C5A                <1>     cmp al, mcbMarkEnd
    64 00005BD9 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 00005BDB 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 00005BDD 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 00005BE0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 00005BE3 39D9                <1>     cmp ecx, ebx
    72 00005BE5 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 00005BE7 488935(7F040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 00005BEE 488B05(6F040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 00005BF5 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 00005BF8 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00005BFA 488935(6F040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 00005C01 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 00005C03 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 00005C05 7209                <1>     jb .walk2
    83 00005C07 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00005C09 488935(77040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 00005C10 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 00005C13 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 00005C15 31C9                <1>     xor ecx, ecx
    89 00005C17 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005C1A 48C1E104            <1>     shl rcx, 4
    91 00005C1E 4881C610000000      <1>     add rsi, mcb.program
    92 00005C25 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00005C28 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 00005C2D 803D(FB030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005C34 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005C36 488B35(7F040000)    <1>     mov rsi, qword [lastMCB]
   100 00005C3D 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 00005C40 0F84A8000000        <1>     jz .allocFail
   102 00005C46 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00005C48 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00005C4B 31C9                <1>     xor ecx, ecx
   105 00005C4D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 00005C50 29D9                <1>     sub ecx, ebx
   107 00005C52 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00005C58 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00005C5B 48C1E104            <1>     shl rcx, 4
   110 00005C5F 4881C610000000      <1>     add rsi, mcb.program
   111 00005C66 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005C69 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005C6B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 00005C6E EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 00005C70 488B35(6F040000)    <1>     mov rsi, qword [firstMCB]
   117 00005C77 803D(FB030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 00005C7E 480F4435(77040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005C86 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005C89 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005C8B 31C9                <1>     xor ecx, ecx
   123 00005C8D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 00005C90 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00005C92 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00005C94 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00005C9A 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 00005C9D 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 00005C9F C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 00005CA2 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 00005CA5 4881C710000000      <1>     add rdi, mcb.program
   133 00005CAC 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 00005CB2 48C1E304            <1>     shl rbx, 4
   135 00005CB6 4801DF              <1>     add rdi, rbx
   136 00005CB9 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 00005CBB 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 00005CC3 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 00005CC6 488B15(47040000)    <1>     mov rdx, qword [currentPSP]
   142 00005CCD 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 00005CD1 488B15(A5040000)    <1>     mov rdx, qword [oldRSP]
   144 00005CD8 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 00005CDC 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 00005CDF 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 00005CE3 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 00005CE8 E8B41F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 00005CED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 00005CEE 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 00005CF5 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 00005CF7 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 00005CFA 7409                <1>     je .af1
   157 00005CFC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 00005CFF 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 00005D05 31C9                <1>     xor ecx, ecx
   161 00005D07 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005D0A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00005D12 7505                <1>     jne .af2
   164 00005D14 39D9                <1>     cmp ecx, ebx
   165 00005D16 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00005D19 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 00005D1C 7410                <1>     je .afExit
   169 00005D1E 48C1E104            <1>     shl rcx, 4
   170 00005D22 4881C610000000      <1>     add rsi, mcb.program
   171 00005D29 4801CE              <1>     add rsi, rcx
   172 00005D2C EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 00005D2E B808000000          <1>     mov eax, errNoMem
   175 00005D33 488B15(A5040000)    <1>     mov rdx, qword [oldRSP]
   176 00005D3A 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 00005D3D E931030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005D42 E8501F0000          <1>     call dosCrit1Enter
   183 00005D47 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 00005D4E 31C9                <1>     xor ecx, ecx
   185 00005D50 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005D57 4889F7              <1>     mov rdi, rsi
   187 00005D5A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 00005D5D 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 00005D61 4881C610000000      <1>     add rsi, mcb.program
   190 00005D68 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005D6B 31C9                <1>     xor ecx, ecx
   193 00005D6D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 00005D70 7409                <1>     je .valid
   195 00005D72 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005D75 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005D7B 4939F0              <1>     cmp r8, rsi
   199 00005D7E 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 00005D80 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00005D83 0F84A5000000        <1>     je .blockError
   203 00005D89 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00005D8C 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 00005D90 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00005D97 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005D9A EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 00005D9C 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 00005DA4 0F8484000000        <1>     je .blockError
   213 00005DAA 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 00005DB2 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 00005DBA 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 00005DBC 31C9                <1>     xor ecx, ecx
   218 00005DBE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 00005DC1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 00005DC7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 00005DCA 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 00005DCC 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 00005DCE 31C9                <1>     xor ecx, ecx
   225 00005DD0 48890E              <1>     mov qword [rsi], rcx
   226 00005DD3 48894E08            <1>     mov qword [rsi + 8], rcx
   227 00005DD7 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 00005DDA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 00005DDD 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 00005DDF 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 00005DE2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00005DE5 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00005DE9 4881C110000000      <1>     add rcx, mcb.program
   236 00005DF0 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00005DF3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 00005DFB 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 00005DFD 31C9                <1>     xor ecx, ecx
   241 00005DFF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00005E02 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005E08 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005E0B 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005E0D 8807                <1>     mov byte [rdi + mcb.marker], al
   247 00005E0F 31C9                <1>     xor ecx, ecx
   248 00005E11 48890E              <1>     mov qword [rsi], rcx
   249 00005E14 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005E18 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005E1D E87F1E0000          <1>     call dosCrit1Exit
   253 00005E22 488B1D(A5040000)    <1>     mov rbx, qword [oldRSP]
   254 00005E29 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 00005E2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 00005E2E C605(31040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005E35 B809000000          <1>     mov eax, errMemAddr
   259 00005E3A E8A31E0000          <1>     call extErrExit ;Error thru the unified error handler
   260 00005E3F E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005E44 E8581E0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005E49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005E4A E8481E0000          <1>     call dosCrit1Enter
   268 00005E4F 85DB                <1>     test ebx, ebx
   269 00005E51 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005E57 B806000000          <1>     mov eax, 6
   271 00005E5C 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 00005E5E 0F42D8              <1>     cmovb ebx, eax
   273 00005E61 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005E68 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005E6B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 00005E6E 7409                <1>     je .ctn
   277 00005E70 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005E73 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005E79 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 00005E81 74AB                <1>     je freeMemory.blockError
   284 00005E83 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005E86 31C9                <1>     xor ecx, ecx
   286 00005E88 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005E8B 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005E8D 0F8791000000        <1>     ja .growth
   289 00005E93 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005E99 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005E9B 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 00005EA1 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 00005EA4 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 00005EAA 48C1E304            <1>     shl rbx, 4
   296 00005EAE 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 00005EB5 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 00005EB8 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 00005EBA C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 00005EBD 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 00005EBF 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 00005EC7 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 00005ECA 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 00005ECC 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 00005ED2 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 00005ED5 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 00005ED9 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 00005EE0 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 00005EE3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 00005EE6 7409                <1>     je .shrinkAbsorb
   312 00005EE8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 00005EEB 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 00005EF1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 00005EF9 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 00005EFF 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 00005F01 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 00005F03 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005F06 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005F09 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005F0C 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005F0F 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005F13 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005F16 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005F18 48890E              <1>     mov qword [rsi], rcx
   329 00005F1B 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005F1F E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005F24 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005F27 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005F2D 31C9                <1>     xor ecx, ecx
   337 00005F2F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005F32 48C1E104            <1>     shl rcx, 4
   339 00005F36 4889F7              <1>     mov rdi, rsi    
   340 00005F39 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 00005F40 4801CE              <1>     add rsi, rcx
   342 00005F43 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005F46 7409                <1>     je .growthOK
   344 00005F48 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005F4B 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005F51 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005F59 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005F5B 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005F5D 31C9                <1>     xor ecx, ecx
   353 00005F5F 31D2                <1>     xor edx, edx
   354 00005F61 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005F64 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005F6A 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005F6D 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005F6F 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 00005F71 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005F74 775E                <1>     ja .notEnuffMem1
   361 00005F76 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005F78 81FA01000000        <1>     cmp edx, 1
   363 00005F7E 744E                <1>     je .notEnuffMem2
   364 00005F80 31C9                <1>     xor ecx, ecx
   365 00005F82 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005F85 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005F89 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005F8C 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005F8F 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005F96 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005F9A 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005F9D 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 00005FA1 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005FA3 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 00005FA5 7411                <1>     jz .exit
   378 00005FA7 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 00005FAD 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 00005FB0 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 00005FB8 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 00005FBD E8DF1C0000          <1>     call dosCrit1Exit
   384 00005FC2 488B1D(A5040000)    <1>     mov rbx, qword [oldRSP]
   385 00005FC9 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 00005FCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 00005FCE FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 00005FD0 EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 00005FD2 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 00005FD4 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 00005FD9 488B15(A5040000)    <1>     mov rdx, qword [oldRSP]
   395 00005FE0 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005FE3 E98B000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 00005FE8 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 00005FED E981000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 00005FF2 84C0                <1>     test al, al
   402 00005FF4 741F                <1>     jz .get
   403 00005FF6 3C02                <1>     cmp al, 2
   404 00005FF8 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005FFA 488B1D(A5040000)    <1>     mov rbx, qword [oldRSP]
   407 00006001 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00006005 8805(FB030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 0000600B 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 0000600F E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00006014 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00006015 488B1D(A5040000)    <1>     mov rbx, qword [oldRSP]
   414 0000601C 31C0                <1>     xor eax, eax
   415 0000601E 8A05(FB030000)      <1>     mov al, byte [allocStrat]
   416 00006024 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00006027 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 0000602B E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 00006030 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00006031 B801000000          <1>     mov eax, errInvFnc
   422 00006036 EB3B                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00006038 50                  <1>     push rax
   428 00006039 53                  <1>     push rbx
   429 0000603A 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00006041 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00006044 7408                <1>     je .ok1
   433 00006046 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00006049 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 0000604B 5B                  <1>     pop rbx
   437 0000604C 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 0000604D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 0000604E 31C0                <1>     xor eax, eax
   441 00006050 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00006053 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00006057 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 0000605E 4801C3              <1>     add rbx, rax
   445 00006061 EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00006063 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00006064 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00006065 B007                <1>     mov al, errMCBbad   ;Yikes!
   451 00006067 C605(31040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 0000606E E96F1C0000          <1>     jmp extErrExit
   453                              <1> mcbErrHdlr:
   454                              <1>     ;Jumped to with eax = error code
   455 00006073 C605(31040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 0000607A E8B9FFFFFF          <1>     call verifyIntegrityOfMCBChain  ;Replaces error code if mcb chain bad
   457 0000607F E95E1C0000          <1>     jmp extErrExit  ;Else, error thru the unified error handler
    45                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 00006084 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00006086 E9771A0000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 0000608B 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00006091 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00006094 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00006099 E9641A0000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 0000609E C605(3F050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 000060A5 4C8B05(47040000)    <1>     mov r8, qword [currentPSP]
    34 000060AC 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 000060AE 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 000060AF EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000060B1 4C8B05(47040000)    <1>     mov r8, qword [currentPSP]
    43 000060B8 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000060BC 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000060BD 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000060C4 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000060C8 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000060CC 4C89C6              <1>     mov rsi, r8
    52 000060CF 4889D7              <1>     mov rdi, rdx
    53 000060D2 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000060D7 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000060DA 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 000060E2 F605(3F050000)FF    <1>     test byte [pspCopyFlg], -1
    57 000060E9 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 000060EB 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 000060F3 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 000060F7 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 000060FB 31C9                <1>     xor ecx, ecx
    64 000060FD B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00006102 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00006106 B0FF                <1>     mov al, -1
    67 00006108 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 0000610A 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 0000610C E87CF3FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00006111 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00006114 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00006118 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 0000611C 67E31C              <1>     jecxz .copy
    77 0000611F FFC9                <1>     dec ecx
    78 00006121 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00006122 0FB6D8              <1>     movzx ebx, al
    80 00006125 53                  <1>     push rbx
    81 00006126 E8E3F3FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 0000612B 58                  <1>     pop rax
    83 0000612C 7508                <1>     jnz .badJFT
    84 0000612E AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 0000612F E8F1F3FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00006134 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00006136 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00006139 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 0000613B C605(3F050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00006142 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00006143 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00006146 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 0000614A B022                <1>     mov al, 22h
    97 0000614C E885160000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00006151 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00006154 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00006156 B023                <1>     mov al, 23h
   101 00006158 E879160000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 0000615D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00006160 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00006162 B024                <1>     mov al, 24h
   105 00006164 E86D160000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00006169 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 0000616C 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 0000616E 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00006173 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00006179 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 0000617D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 0000617E C605(2F070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00006185 81FA06000000        <1>     cmp edx, 6
   120 0000618B 7305                <1>     jae .aboveMinimum
   121 0000618D BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00006192 4C8B05(47040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00006199 89D3                <1>     mov ebx, edx
   129 0000619B 50                  <1>     push rax    ;Preserve errorlevel across call
   130 0000619C 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 0000619D E8A8FCFFFF          <1>     call reallocMemory
   132 000061A2 5B                  <1>     pop rbx
   133 000061A3 58                  <1>     pop rax
   134 000061A4 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 000061A6 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 000061AA EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 000061AC 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;For now, adjust error level in var
   143 000061AE 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   144 000061B0 8625(2F070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   145 000061B6 F605(B6040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   146 000061BD 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   147 000061BF 8625(B6040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   148 000061C5 C605(2F070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   149                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   150 000061CC 8A25(2F070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   151                              <1> .storeELvl:
   152 000061D2 668905(57040000)    <1>     mov word [errorLevel], ax   ;Store word
   153                              <1> ;rbx points to current PSP
   154                              <1> ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   155 000061D9 488B1D(47040000)    <1>     mov rbx, qword [currentPSP]
   156 000061E0 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   157 000061E4 B024                <1>     mov al, 24h
   158 000061E6 E8EF1C0000          <1>     call setIntVector
   159 000061EB 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   160 000061EF B023                <1>     mov al, 23h
   161 000061F1 E8E41C0000          <1>     call setIntVector
   162 000061F6 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   163 000061FA B022                <1>     mov al, 22h
   164 000061FC E8D91C0000          <1>     call setIntVector
   165                              <1> 
   166 00006201 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   167 00006203 CD2A                <1>     int 2Ah
   168 00006205 C605(C0040000)FF    <1>     mov byte [procExiting], -1  ;Critical errors now just return!
   169 0000620C B822110000          <1>     mov eax, 1122h              ;Net redir, Process Termination Hook
   170 00006211 4C8B05(47040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   171 00006218 CD2F                <1>     int 2Fh
   172                              <1> 
   173 0000621A 488B3D(47040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   174 00006221 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   175 00006224 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   176 00006228 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   177 0000622B 0F848B000000        <1>     je .ownParent   ;No resource freeing if it is its own parent!
   178 00006231 803D(2F070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   179 00006238 7471                <1>     je .freeOk   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   180                              <1> 
   181                              <1> ;Now close file handles
   182                              <1> ;Close handles in reverse to preserve std handles for if an error again
   183                              <1> ; happens.
   184 0000623A 488B3D(47040000)    <1>     mov rdi, qword [currentPSP]
   185 00006241 0FB75F4E            <1>     movzx ebx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   186 00006245 85DB                <1>     test ebx, ebx   ;If its zero, close nothing
   187 00006247 741A                <1>     jz .hdlEnd
   188                              <1> .hdlLp:
   189 00006249 FFCB                <1>     dec ebx
   190 0000624B 53                  <1>     push rbx
   191 0000624C E886D5FFFF          <1>     call closeFileHdl
   192 00006251 5B                  <1>     pop rbx
   193 00006252 85DB                <1>     test ebx, ebx   ;If we're not yet zero, keep closing
   194 00006254 75F3                <1>     jnz .hdlLp
   195                              <1> ;Now close all network files.
   196 00006256 B81D110000          <1>     mov eax, 111Dh  ;Signal termination of process! Kill all net files!
   197 0000625B CD2F                <1>     int 2Fh
   198                              <1> ;Now free share resources for this process
   199 0000625D FF15(DF000000)      <1>     call qword [closeTaskShare] ;Free all share resources for this process
   200                              <1> .hdlEnd:
   201                              <1> ;Now remove routines exported by this task from internal tables 
   202                              <1> ; (or pause exit until all programs referencing importing the routines
   203                              <1> ;  provided by this DLL have also terminated.)
   204 00006263 FF15(B7000000)      <1>     call qword [unloadDLLHook]  
   205                              <1>     
   206                              <1> ;Now free MCB's owned by task
   207 00006269 488B1D(47040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   208                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   209                              <1>     ; with the currentPSP signature and free them.
   210 00006270 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   211                              <1> .wlkMcb:  ;And walk the chain
   212                              <1> ;First verify the address in rsi is a valid mcb
   213 00006277 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   214 00006279 80F94D              <1>     cmp cl, mcbMarkCtn
   215 0000627C 7405                <1>     je .checkToFree
   216 0000627E 80F95A              <1>     cmp cl, mcbMarkEnd
   217 00006281 7528                <1>     jne .freeOk  ;Something wrong so stop freeing
   218                              <1> .checkToFree:
   219 00006283 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   220 00006287 750F                <1>     jne .noFree
   221 00006289 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   222 0000628D 53                  <1>     push rbx
   223 0000628E 51                  <1>     push rcx
   224 0000628F 56                  <1>     push rsi
   225 00006290 E8ADFAFFFF          <1>     call freeMemory ;Free this memory block
   226 00006295 5E                  <1>     pop rsi
   227 00006296 59                  <1>     pop rcx
   228 00006297 5B                  <1>     pop rbx
   229                              <1>     ;If an error occured, the internal vars will be set.
   230                              <1> .noFree:
   231 00006298 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   232 0000629B 740E                <1>     je .freeOk          ;Skip if we are
   233 0000629D 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   234 000062A0 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   235 000062A4 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   236 000062A9 EBCC                <1>     jmp short .wlkMcb
   237                              <1> .freeOk:
   238 000062AB FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   239 000062B1 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   240 000062B5 488905(47040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   241                              <1> .ownParent:
   242 000062BC B0FF                <1>     mov al, -1  ;Flush all drive buffers
   243 000062BE E8D4190000          <1>     call dosCrit1Enter
   244 000062C3 E8FAA4FFFF          <1>     call flushAllBuffersForDrive
   245 000062C8 E8D4190000          <1>     call dosCrit1Exit
   246 000062CD FA                  <1>     cli
   247 000062CE C605(C0040000)00    <1>     mov byte [procExiting], 0    ;We have exited now!
   248 000062D5 C605(30040000)00    <1>     mov byte [inDOS], 0     ;Exiting DOS now
   249 000062DC C605(31040000)FF    <1>     mov byte [errorDrv], -1 ;Reset error drive
   250 000062E3 488B1D(47040000)    <1>     mov rbx, qword [currentPSP]
   251 000062EA 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]   ;Point rsp to the rsp on entry to DOS call
   252                              <1>     ;Dont touch the previous stack pointer thats left on the stack, only
   253                              <1>     ; the ret ptr and the flags
   254 000062EE B022                <1>     mov al, 22h
   255 000062F0 E8E1140000          <1>     call muxGetIntVector    ;Get return vector in rbx
   256 000062F5 48895C2448          <1>     mov qword [rsp + callerFrame.rip], rbx
   257 000062FA 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h  ;Mimic safely DOS's ret flags
   258 00006303 E861190000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   259 00006308 48CF                <1>     iretq   ;rsp ends up on the stack of the last entry into DOS
    46                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM file. 
    16                              <1> ; If not EXE, we read the filename extension.
    17                              <1> 
    18                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    19                              <1> ;            Load Child Program and Xfr control to it
    20                              <1> ; rbx ------>   |-------------------------------|
    21                              <1> ;               |   Ptr to Environment Block    |
    22                              <1> ;               |                               |
    23                              <1> ;               | Can be 0 => Get pointer to    |
    24                              <1> ;               | parent Environment Block      |
    25                              <1> ;               |-------------------------------|
    26                              <1> ;               |   Ptr to Command Line to be   |
    27                              <1> ;               |   placed at PSP + 80h         |
    28                              <1> ;               |-------------------------------|
    29                              <1> ;               |   Ptr to first default FCB    |
    30                              <1> ;               |      to copy to PSP.fcb1      |
    31                              <1> ;               |                               |
    32                              <1> ;               | Should be used to parse the   |
    33                              <1> ;               |  first two command line args  |
    34                              <1> ;               |-------------------------------|
    35                              <1> ;               |   Ptr to second default FCB   |
    36                              <1> ;               |      to copy to PSP.fcb2      |
    37                              <1> ;               |-------------------------------|
    38                              <1> ;
    39                              <1> ;If AL = 1 :
    40                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    41                              <1> ; rbx ------>   |-------------------------------|
    42                              <1> ;               |         AS IN AL=00H          |
    43                              <1> ;               |-------------------------------|
    44                              <1> ;               |     Initial Value of RSP      |
    45                              <1> ;               |       on program launch       |
    46                              <1> ;               |                               |
    47                              <1> ;               |     This is returned to the   |
    48                              <1> ;               |         caller by DOS         |
    49                              <1> ;               |-------------------------------|
    50                              <1> ;               |     Initial Value of RIP      |
    51                              <1> ;               |       on program launch       |
    52                              <1> ;               |                               |
    53                              <1> ;               |     This is returned to the   |
    54                              <1> ;               |         caller by DOS         |
    55                              <1> ;               |-------------------------------|
    56                              <1> ;
    57                              <1> ;                      !!Important Note!!
    58                              <1> ;   The block pointed to by rbx must reserve the space for 
    59                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    60                              <1> ;
    61                              <1> ;If AL = 3 :
    62                              <1> ;                      Load program overlay
    63                              <1> ; rbx ------>   |-------------------------------|
    64                              <1> ;               |  Pointer to the byte in the   |
    65                              <1> ;               |  prog space to start writing  |
    66                              <1> ;               |        the overlay at.        |
    67                              <1> ;               |-------------------------------|
    68                              <1> ;               | QWORD value used as the base  |
    69                              <1> ;               |   address for relocation      |
    70                              <1> ;               |   computations. In most cases |
    71                              <1> ;               |   should be the same as the   |
    72                              <1> ;               |   load pointer. The desired   |
    73                              <1> ;               |   load address is subtracted  |
    74                              <1> ;               |   from this value to generate |
    75                              <1> ;               |   a valid relocation factor,  |
    76                              <1> ;               |   much like for normal load   |
    77                              <1> ;               |   but here we are controlling |
    78                              <1> ;               |    precisely the factor by    |
    79                              <1> ;               |     which we relocate the     |
    80                              <1> ;               |           symbols.            |
    81                              <1> ;               |  (Called a Relocation Factor) |
    82                              <1> ;               |     Only FOR EXE Overlays.    |
    83                              <1> ;               |    For COM, 0 is sufficient.  |
    84                              <1> ;               |-------------------------------|
    85                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    86                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    87                              <1> ;   section alignment for the file being loaded. 
    88                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    89                              <1> ; block is the first byte of the first section of the executable. No header
    90                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    91                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    92                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    93                              <1> ;
    94                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    95                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    96                              <1> ;
    97                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    98 0000630A 55                  <1>     push rbp
    99 0000630B 4889E5              <1>     mov rbp, rsp
   100 0000630E 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   101                              <1>     ;Clear up the pointers on the stack frame
   102 00006315 31C9                <1>     xor ecx, ecx
   103 00006317 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   104 0000631B 48894DD0            <1>     mov qword [rbp - execFrame.pEnvBase], rcx
   105 0000631F 48894DC0            <1>     mov qword [rbp - execFrame.pProgBase], rcx
   106 00006323 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   107 00006327 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   108                              <1> 
   109 0000632B B403                <1>     mov ah, execOverlay
   110 0000632D F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   111 00006334 7402                <1>     jz short .noMulti
   112 00006336 B404                <1>     mov ah, execBkgrnd
   113                              <1> .noMulti:
   114 00006338 38E0                <1>     cmp al, ah
   115 0000633A 7615                <1>     jbe .validSubfunction
   116                              <1> .badSubFunction:
   117 0000633C B801000000          <1>     mov eax, errInvFnc
   118 00006341 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   119                              <1> .badExit:
   120 00006348 4889EC              <1>     mov rsp, rbp
   121 0000634B 5D                  <1>     pop rbp
   122 0000634C E991190000          <1>     jmp extErrExit
   123                              <1> 
   124                              <1> .validSubfunction:
   125 00006351 3C02                <1>     cmp al, execInvld
   126 00006353 74E7                <1>     je .badSubFunction
   127                              <1>     ;Save registers for each function call
   128 00006355 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   129 00006359 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   130 0000635D 0FB6C0              <1>     movzx eax, al
   131 00006360 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   132 00006364 4889D7              <1>     mov rdi, rdx
   133 00006367 E815160000          <1>     call strlen ;Get string length in cx
   134 0000636C 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   135                              <1> ;Now open the file we wanna launch
   136 00006370 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   137 00006372 55                  <1>     push rbp    ;Preserve local frame ptr
   138 00006373 B923000000          <1>     mov ecx, 23h    ;Tell server to open for exec. No writing or sharing!
   139 00006378 E817D3FFFF          <1>     call openFileHdl
   140 0000637D 5D                  <1>     pop rbp
   141 0000637E 72C8                <1>     jc .badExit ;Exit preserving error code in al
   142                              <1>     ;Now ax has the file handle
   143 00006380 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   144 00006384 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   145 00006387 E867F1FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   146 0000638C 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   147 00006390 F7C280000000        <1>     test edx, devCharDev
   148 00006396 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   149 00006398 B002                <1>     mov al, errFnf
   150 0000639A E922060000          <1>     jmp .cleanAndFail
   151                              <1> .validDiskFile:
   152 0000639F 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   153 000063A7 0F8489000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   154                              <1> ;If we get an instruction to copy parent env, we do that. If the 
   155                              <1> ; parent ptr is a special NULL value, then we leave the NULL value
   156                              <1> ; in place in the execFrame envPtr var. Else, we use the parent
   157                              <1> ; env pointer as the source of our copy.
   158 000063AD 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 000063B1 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 000063B4 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. copy parent env)
   161 000063B7 7510                <1>     jnz short .copyEnvironmentBlock
   162 000063B9 488B35(47040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 000063C0 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get ptr to env src from parent env
   164 000063C4 4885C0              <1>     test rax, rax   ;Was parent ptr 0? If so, skip allocing new env.
   165 000063C7 746D                <1>     jz short .loadProgram ;This is used by the boot process!!
   166                              <1> .copyEnvironmentBlock:
   167 000063C9 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   168                              <1> ;Get the length of the environment
   169 000063CC B9FF7F0000          <1>     mov ecx, 7fffh  ;32kb limit for env size
   170 000063D1 31C0                <1>     xor eax, eax
   171 000063D3 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   172                              <1> .envVerifyLp:
   173 000063D6 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   174 000063D8 7531                <1>     jnz short .invalidEnvironmentError
   175 000063DA 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   176 000063DD FFC9                <1>     dec ecx
   177 000063DF AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   178 000063E0 75F4                <1>     jnz short .envVerifyLp
   179                              <1> 
   180 000063E2 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   181 000063E5 57                  <1>     push rdi     ;Save the length of the environment block
   182 000063E6 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   183 000063EC 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   184 000063F0 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   185 000063F2 89FB                <1>     mov ebx, edi
   186 000063F4 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   187 000063F7 55                  <1>     push rbp
   188 000063F8 E841F7FFFF          <1>     call allocateMemory
   189 000063FD 5D                  <1>     pop rbp
   190 000063FE 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   191 000063FF 7314                <1>     jnc short .copyEnvironment
   192                              <1>     ;Fall thru if not enuff memory
   193                              <1> .insufficientMemory:
   194 00006401 B808000000          <1>     mov eax, errNoMem
   195 00006406 E9B6050000          <1>     jmp .cleanAndFail
   196                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   197 0000640B B80A000000          <1>     mov eax, errBadEnv
   198 00006410 E9AC050000          <1>     jmp .cleanAndFail
   199                              <1> 
   200                              <1> .copyEnvironment:
   201                              <1>     ;rax has the ptr to allocated memory block
   202                              <1>     ;rcx has the number of chars to copy from the source env block
   203 00006415 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   204 00006418 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   205 0000641C 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   206 00006420 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   207 00006423 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   208 00006425 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   209 0000642A 66AB                <1>     stosw       ;Away you go!
   210 0000642C 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   211 00006430 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   212 00006434 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   213                              <1> ;Done with the environment... more or less
   214                              <1> .loadProgram:
   215 00006436 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   216 0000643B 488D15(48050000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   217 00006442 E896050000          <1>     call .readDataFromHdl
   218 00006447 0F826F050000        <1>     jc .badFmtErr
   219 0000644D 85C0                <1>     test eax, eax   ;Were zero bytes read?
   220 0000644F 0F8467050000        <1>     jz .badFmtErr
   221 00006455 3D40000000          <1>     cmp eax, imageDosHdr_size
   222 0000645A 0F826F030000        <1>     jb .loadCom
   223                              <1> 
   224 00006460 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   225 00006465 740B                <1>     je .proceedEXE
   226 00006467 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   227 0000646C 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   228                              <1> .proceedEXE:
   229                              <1>     ;Now we need to read e_lfanew
   230 00006472 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   231 00006473 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   232 00006476 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   233 00006479 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   234 0000647B 30C0                <1>     xor al, al  ;Set file pointer from start of file
   235 0000647D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   236 00006481 E84CD4FFFF          <1>     call lseekHdl   ;Move to that position in the file
   237 00006486 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   238 00006487 B918000000          <1>     mov ecx, imageFileHeader_size
   239 0000648C E84C050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   240 00006491 85C0                <1>     test eax, eax   ;Were zero bytes read?
   241 00006493 0F8423050000        <1>     jz .badFmtErr
   242 00006499 3D18000000          <1>     cmp eax, imageFileHeader_size
   243 0000649E 0F8218050000        <1>     jb .badFmtErr
   244                              <1>     ;So now rdx points to the imageFileHeader
   245 000064A4 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   246 000064AA 0F850C050000        <1>     jne .badFmtErr
   247 000064B0 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   248 000064B6 0F8500050000        <1>     jne .badFmtErr
   249                              <1>     ;Check the binary is executable
   250 000064BC 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   251 000064C0 66A90200            <1>     test ax, imageFileExecutable
   252 000064C4 0F84F2040000        <1>     jz .badFmtErr
   253 000064CA 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   254                              <1> 
   255 000064CE 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   256 000064D4 0F82E2040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   257                              <1>     ;Now save the number of sections in the the file
   258 000064DA 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   259 000064DE 85C0                <1>     test eax, eax   ;If this is 0, what?
   260 000064E0 0F84D6040000        <1>     jz .badFmtErr
   261 000064E6 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   262                              <1>     ;Now load Optional header, file ptr points to it so all good!
   263 000064EA B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   264                              <1>     ;rdx points to exeHdrSpace
   265 000064EF E8E9040000          <1>     call .readDataFromHdl
   266 000064F4 85C0                <1>     test eax, eax   ;Were zero bytes read?
   267 000064F6 0F84C0040000        <1>     jz .badFmtErr
   268 000064FC 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   269 00006501 0F82B5040000        <1>     jb .badFmtErr
   270                              <1>     ;Now File Ptr points to data dirs, not an issue
   271 00006507 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   272                              <1>     ;We load the program in, one section at a time, reading section headers in
   273                              <1>     ; one at a time to the section header internal buffer.
   274 0000650E 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   275 00006516 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   276 00006518 8B1D(80050000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   277 0000651E 488B05(98050000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackCommit]
   278 00006525 4885C0              <1>     test rax, rax
   279 00006528 750A                <1>     jnz .notDefaultStackAlloc
   280 0000652A 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   280 00006533 00                  <1>
   281                              <1> .notDefaultStackAlloc:
   282 00006534 01C3                <1>     add ebx, eax    ;Add stack allocation
   283 00006536 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   284                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   285                              <1>     ; section aligned and so we will need to align before reading, to 
   286                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   287 0000653C 031D(68050000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   288 00006542 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   289 00006545 81C311000000        <1>     add ebx, 11h
   290 0000654B C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   291 0000654E 55                  <1>     push rbp
   292 0000654F E8EAF5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   293 00006554 5D                  <1>     pop rbp
   294 00006555 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   295 0000655B 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   296 0000655F 480500010000        <1>     add rax, psp_size
   297 00006565 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   298                              <1>     ;Finally, just check that we have some code to execute. 
   299                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   300 00006569 813D(4C050000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   300 00006571 0000                <1>
   301 00006573 0F8443040000        <1>     je .badFmtErr   ;If no bytes, exit error
   302 00006579 EB0B                <1>     jmp short .exeProceed1
   303                              <1> .exeOvlySkipAlloc:
   304 0000657B 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   305 0000657F 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   306 00006582 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   307                              <1> .exeProceed1:
   308                              <1> ;===========================================================================
   309                              <1>     ;The below blocks are being kept because they can be turned on later
   310                              <1>     ; to change this exe loader to force section alignment of the 
   311                              <1>     ; base load address. It appears there is no need to enforce that the 
   312                              <1>     ; base load address be section aligned, but individual sections need
   313                              <1>     ; to adhere to the section alignment requirements thereafter. 
   314                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   315                              <1>     ; first section gets places at the load address and not at some
   316                              <1>     ; offset from it (as is usually the case, offset 1000h).
   317                              <1> ;===========================================================================
   318                              <1>     ;=======================================================================
   319                              <1>     ;Now we align the progBase to full header size aligned to the next page
   320                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   321                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   322                              <1>     ;=======================================================================
   323                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   324                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   325                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   326                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   327                              <1>     ;push rax
   328                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   329                              <1>     ;dec ecx ;Turn into a mask
   330                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   331                              <1>     ;inc ecx
   332                              <1>     ;sub rcx, rax
   333                              <1>     ;pop rdi
   334                              <1>     ;xor eax, eax
   335                              <1>     ;rep stosb
   336                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   337                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   338                              <1> 
   339                              <1>     ;So now copy one section at a time, read section header in
   340                              <1>     ;File pointer points to the directory table, so skip that
   341 00006586 8B15(B4050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   342                              <1>     ;Load however many directories we have into place
   343                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   344 0000658C C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   345 0000658F 31C9                <1>     xor ecx, ecx
   346 00006591 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   347 00006595 B001                <1>     mov al, 1   ;Move handle forwards from current position
   348 00006597 E836D3FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   349                              <1>     ;eax has pointer location after adjustment
   350 0000659C 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   351                              <1>     ;File now points to start of Section headers. Read first header in.
   352                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   353 0000659F 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   354 000065A3 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   355 000065A7 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   356 000065A9 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   357                              <1> .loadLp:
   358 000065AD 51                  <1>     push rcx    ;Save # of segments left on stack
   359 000065AE 57                  <1>     push rdi    ;Save the current buffer ptr here
   360 000065AF B928000000          <1>     mov ecx, imageSectionHdr_size
   361 000065B4 488D15(C8050000)    <1>     lea rdx, sectHdr    ;Read section headers here
   362 000065BB E81D040000          <1>     call .readDataFromHdl
   363 000065C0 5F                  <1>     pop rdi
   364 000065C1 59                  <1>     pop rcx
   365 000065C2 85C0                <1>     test eax, eax
   366 000065C4 0F84F2030000        <1>     jz .badFmtErr
   367 000065CA 3D28000000          <1>     cmp eax, imageSectionHdr_size
   368 000065CF 0F85E7030000        <1>     jne .badFmtErr
   369                              <1>     ;File ptr moved forwards to next section header
   370 000065D5 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   371                              <1>     ;Section header read, now we load section into memory
   372                              <1>     ;Move file ptr to data location
   373 000065DC 8B15(DC050000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   374 000065E2 85D2                <1>     test edx, edx
   375 000065E4 744B                <1>     jz short .skipRawPtrMove
   376 000065E6 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   377 000065EA 31C0                <1>     xor eax, eax    ;Seek from start of file
   378 000065EC 51                  <1>     push rcx
   379 000065ED 57                  <1>     push rdi
   380 000065EE E8DFD2FFFF          <1>     call lseekHdl
   381 000065F3 5F                  <1>     pop rdi
   382 000065F4 59                  <1>     pop rcx
   383                              <1>     ;Is this a overlay load?
   384 000065F5 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   385 000065FD 7532                <1>     jne short .skipRawPtrMove
   386                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   387                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   388                              <1>     ;Is this is the first segment with data being read into memory?
   389 000065FF 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   390 00006603 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   391 0000660B 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   392                              <1>     ;Now rebase the program to point the first byte of the first
   393                              <1>     ; section at the ProgBase.
   394 0000660D 51                  <1>     push rcx
   395 0000660E 57                  <1>     push rdi
   396 0000660F 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   397 00006613 8B0D(D4050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   398 00006619 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   399 0000661C 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   400 00006620 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   401 00006624 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   402 00006628 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   403 0000662B 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   404 0000662F 5F                  <1>     pop rdi
   405 00006630 59                  <1>     pop rcx
   406                              <1> .skipRawPtrMove:
   407 00006631 51                  <1>     push rcx
   408 00006632 31FF                <1>     xor edi, edi
   409 00006634 8B3D(D4050000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   410 0000663A 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   411                              <1>     ;If a section has a virtual address outside of the allocation arena
   412                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   413                              <1>     ; next section.
   414 0000663E 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   415 00006642 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   416 00006645 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   417 00006647 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   418 0000664E 31C9                <1>     xor ecx, ecx
   419 00006650 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   420 00006653 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   421 00006657 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   422 0000665E 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   423 00006661 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   424 00006664 7713                <1>     ja short .okToLoad
   425                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   426                              <1> 
   427                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   428 00006666 F705(EC050000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   428 0000666E 0000                <1>
   429 00006670 0F8546030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   430                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   431                              <1> 
   432                              <1>     ;Else, just skip this section, goto next section
   433 00006676 59                  <1>     pop rcx
   434 00006677 EB3F                <1>     jmp short .gotoNextSection
   435                              <1> .okToLoad:
   436 00006679 8B0D(D0050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   437 0000667F 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   438 00006682 57                  <1>     push rdi    ;Save section in memory locally
   439 00006683 E855030000          <1>     call .readDataFromHdl
   440 00006688 5F                  <1>     pop rdi
   441 00006689 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   442 0000668A 0F822C030000        <1>     jc .badFmtErr
   443                              <1>     ;Don't check for a zero section read as empty sections may be present!
   444 00006690 3B05(D0050000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   445 00006696 0F8520030000        <1>     jne .badFmtErr
   446                              <1>     ;Data read ok, now fill in any zeros needed
   447 0000669C 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   448                              <1> 
   449 0000669F 51                  <1>     push rcx
   450                              <1>     ;Here do section padding
   451 000066A0 4889F8              <1>     mov rax, rdi    ;Get the current address
   452 000066A3 8B0D(68050000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   453 000066A9 FFC9                <1>     dec ecx ;Turn into a mask
   454 000066AB 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   455 000066AE FFC1                <1>     inc ecx
   456 000066B0 4829C1              <1>     sub rcx, rax
   457 000066B3 31C0                <1>     xor eax, eax
   458 000066B5 F3AA                <1>     rep stosb
   459 000066B7 59                  <1>     pop rcx
   460                              <1> .gotoNextSection:
   461 000066B8 FFC9                <1>     dec ecx ;Decrement our section counter
   462 000066BA 7419                <1>     jz short .doExeFixups
   463                              <1>     ;Read next section header in here
   464 000066BC 51                  <1>     push rcx
   465 000066BD 57                  <1>     push rdi
   466 000066BE 30C0                <1>     xor al, al  ;Move rel start of file
   467 000066C0 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   468 000066C3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   469 000066C7 31C9                <1>     xor ecx, ecx
   470 000066C9 E804D2FFFF          <1>     call lseekHdl
   471 000066CE 5F                  <1>     pop rdi
   472 000066CF 59                  <1>     pop rcx
   473 000066D0 E9D8FEFFFF          <1>     jmp .loadLp
   474                              <1> .doExeFixups:
   475                              <1> ;Here we fixup addresses if needed
   476                              <1> ;If the program is loaded at its desired location never need to relocate.
   477                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   478                              <1> ;   If the program has had it's .reloc section stripped by the linker
   479                              <1> ;       or has no .reloc directory, we fail
   480                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   481                              <1> ;       relocations anyway.
   482                              <1> 
   483                              <1> ;If program base = desired load, skip relocs
   484 000066D5 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   485 000066D9 483B15(60050000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   486 000066E0 0F84CA000000        <1>     je .exeComplete
   487                              <1> ;If program has had relocs stripped, fail
   488 000066E6 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   489 000066EA 66A90100            <1>     test ax, imageFileRelocsStripped
   490 000066EE 0F85C8020000        <1>     jnz .badFmtErr
   491                              <1> ;If program has no .reloc section, fail
   492 000066F4 8B15(B4050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   493 000066FA 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   494 00006700 0F82B6020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   495                              <1> ;Now we get the reloc section
   496 00006706 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   497 00006709 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   498                              <1>     ;eax now points to position in file of directory entry for reloc
   499 0000670F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   500 00006713 31C0                <1>     xor eax, eax
   501 00006715 E8B8D1FFFF          <1>     call lseekHdl   ;Move handle there in file
   502 0000671A 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   503 0000671D B908000000          <1>     mov ecx, imageDataDirectory_size
   504                              <1>     ;Read 8 bytes into sectHdr space
   505 00006722 488D15(C8050000)    <1>     lea rdx, sectHdr
   506 00006729 E8AF020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   507 0000672E 85C0                <1>     test eax, eax
   508 00006730 0F8486020000        <1>     jz .badFmtErr
   509 00006736 39C8                <1>     cmp eax, ecx
   510 00006738 0F857E020000        <1>     jne .badFmtErr
   511                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   512 0000673E 8B35(C8050000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   513 00006744 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   514 00006746 7468                <1>     jz .exeComplete   ;... including if overlay
   515 00006748 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   516                              <1>     ;Now rsi points to where in memory the relocation data table is
   517                              <1>     ;Now compute the relocation factor =
   518                              <1>     ;   Difference from the load address and prefered
   519 0000674C 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   520 00006750 482B05(60050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   521 00006757 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   522 0000675F 750F                <1>     jne short .notOverlayReloc
   523                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   524                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   525                              <1>     ;This should be the same as ProgBase anyway for overlays.
   526 00006761 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   527 00006765 482B05(60050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   528                              <1>     ;Store this as the overlay program base
   529 0000676C 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   530                              <1> .notOverlayReloc:
   531 00006770 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   532                              <1>     ;rsi points to relocation data table in memory
   533 00006773 8B0D(CC050000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   534 00006779 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   535 0000677B 7433                <1>     jz .exeComplete
   536                              <1>     ;rsi points to the first base relocation block. The relocations begin
   537                              <1>     ; after the first block
   538                              <1>     ;ecx has the number of base relocation blocks to process.
   539                              <1> .nextBlock:
   540 0000677D 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   541 0000677E 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   542 00006780 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   543 00006784 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   544 00006787 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   545 0000678A 67E31E              <1>     jecxz .blockDone    
   546 0000678D 81E908000000        <1>     sub ecx, 8
   547 00006793 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   548 0000679A D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   549                              <1> .blockNotDone:
   550 0000679C 66AD                <1>     lodsw   ;Get the next page offset word
   551 0000679E 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   552                              <1>     ;rdi points to base, rax give offset into 4Kb page
   553 000067A3 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   554 000067A7 FFC9                <1>     dec ecx
   555 000067A9 75F1                <1>     jnz .blockNotDone
   556                              <1> .blockDone:
   557 000067AB 59                  <1>     pop rcx
   558 000067AC FFC9                <1>     dec ecx
   559 000067AE 75CD                <1>     jnz .nextBlock
   560                              <1> .exeComplete:
   561 000067B0 8B05(58050000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   562                              <1>     ;Now get EP relative to the (rescaled) load address.
   563 000067B6 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   564 000067BA 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   565 000067BE FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   566 000067C4 0F82F2010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   567 000067CA E9CC000000          <1>     jmp .buildChildPSP
   568                              <1> .loadCom:
   569                              <1>     ;File is open here, so just read the file into memory. 
   570                              <1>     ;The file cannot exceed 64Kb in size.
   571                              <1>     ;Allocate 64Kb of memory, or as much as we can
   572 000067CF 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   573 000067D7 745C                <1>     je .comOverlay
   574 000067D9 BBF0FF0000          <1>     mov ebx, 0FFF0h ;64Kb - 16 bytes, give me FFF0h bytes
   575 000067DE 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   576 000067E1 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   577 000067E4 55                  <1>     push rbp
   578 000067E5 E854F3FFFF          <1>     call allocateMemory
   579 000067EA 5D                  <1>     pop rbp
   580 000067EB 7355                <1>     jnc .comallocOk
   581 000067ED 3C08                <1>     cmp al, errNoMem
   582 000067EF 0F85CC010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available in paragraphs
   584 000067F5 09DB                <1>     or ebx, ebx ;Clear the upper dword
   585 000067F7 48C1E304            <1>     shl rbx, 4
   586                              <1>     ;We check if this value is psp_size more than filesize
   587 000067FB 53                  <1>     push rbx    ;Save new minimum size
   588 000067FC B802000000          <1>     mov eax, 2    ;Reposition to end of file
   589 00006801 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   590 00006805 31D2                <1>     xor edx, edx    ;Go to end of file
   591 00006807 E8C6D0FFFF          <1>     call lseekHdl
   592                              <1>     ;eax has file size
   593 0000680C 5B                  <1>     pop rbx ;Get back max alloc size
   594 0000680D 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   595 0000680F 29C2                <1>     sub edx, eax
   596 00006811 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   597 00006817 0F82E4FBFFFF        <1>     jb .insufficientMemory   ;Fail
   598 0000681D 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   599 00006820 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   600 00006823 55                  <1>     push rbp
   601 00006824 E815F3FFFF          <1>     call allocateMemory
   602 00006829 5D                  <1>     pop rbp
   603 0000682A 0F8291010000        <1>     jc .cleanAndFail
   604 00006830 E90D000000          <1>     jmp .comallocOk
   605                              <1> .comOverlay:
   606                              <1>     ;Here we simply read the file into the buffer provided
   607 00006835 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   608 00006839 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   609 0000683C 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   610 00006840 EB0A                <1>     jmp short .comRead
   611                              <1> .comallocOk:
   612                              <1>     ;rax should point to the first byte
   613 00006842 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   614 00006846 480500010000        <1>     add rax, psp_size
   615                              <1> .comRead:
   616 0000684C 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   617                              <1> 
   618 00006850 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   619 00006855 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   620 00006859 31D2                <1>     xor edx, edx    ;Go to end of file
   621 0000685B E872D0FFFF          <1>     call lseekHdl
   622                              <1>     ;eax has filesize now
   623 00006860 50                  <1>     push rax    ;Save filesize
   624 00006861 31C0                <1>     xor eax, eax    ;Reposition to start of file
   625 00006863 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   626 00006867 31D2                <1>     xor edx, edx    ;Go to start of file
   627 00006869 E864D0FFFF          <1>     call lseekHdl
   628 0000686E 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   629 0000686F 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   630 00006877 7411                <1>     je .comOverlay2
   631                              <1>     ;Now we check if the space we have available is sufficient to load
   632                              <1>     ; the program. Skipped if an overlay being loaded
   633                              <1>     ;ecx = # File size
   634 00006879 8B55B8              <1>     mov edx, dword [rbp - execFrame.dProgSize]  ;Get the alloc space size
   635 0000687C 81EA00010000        <1>     sub edx, psp_size
   636 00006882 39CA                <1>     cmp edx, ecx    ;Do we have space for the PSP and program?
   637 00006884 0F8277FBFFFF        <1>     jb .insufficientMemory
   638                              <1> .comOverlay2:
   639 0000688A 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   640 0000688E E84A010000          <1>     call .readDataFromHdl   ;Read from the file handle
   641 00006893 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   642 00006897 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   643                              <1> .buildChildPSP:
   644                              <1>     ;We can close handle now
   645 0000689B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   646 0000689F 55                  <1>     push rbp
   647 000068A0 E832CFFFFF          <1>     call closeFileHdl   ;Close the file
   648 000068A5 5D                  <1>     pop rbp
   649                              <1> 
   650                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   651 000068A6 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   652 000068AE 0F84E5000000        <1>     je .overlayExit
   653                              <1>     ;Now build the PSP
   654 000068B4 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   655 000068B7 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   656 000068BB 52                  <1>     push rdx
   657 000068BC 55                  <1>     push rbp
   658 000068BD E8DCF7FFFF          <1>     call createPSP
   659 000068C2 5D                  <1>     pop rbp
   660 000068C3 5A                  <1>     pop rdx
   661                              <1> 
   662                              <1> ;Now copy the environment block ptr over. 
   663                              <1> ;Stores the null ptr that is our pointer (special init case)
   664 000068C4 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   665                              <1> ;    test rbx, rbx
   666                              <1> ;    jz short .skipEnvCopy
   667 000068C8 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   668                              <1> ;.skipEnvCopy:
   669                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   670 000068CC 488915(47040000)    <1>     mov qword [currentPSP], rdx
   671 000068D3 E8BF130000          <1>     call dosCrit1Enter
   672 000068D8 E827010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   673                              <1> 
   674 000068DD 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   675 000068E4 48893D(3F040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   676                              <1> 
   677                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   678                              <1>     ; and set FS to point to the PSP
   679 000068EB 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   680                              <1> 
   681 000068EF 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   682 000068F3 B925000000          <1>     mov ecx, fcb_size
   683 000068F8 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   684 000068FC 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   685 000068FE F3A4                <1>     rep movsb   ;Copy fcb 1 over
   686 00006900 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   687 00006904 B925000000          <1>     mov ecx, fcb_size
   688 00006909 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   689 0000690D 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   690 0000690F F3A4                <1>     rep movsb   ;Copy fcb 2 over
   691 00006911 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   692 00006915 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   693 0000691C B980000000          <1>     mov ecx, 80h
   694 00006921 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   695                              <1> 
   696 00006923 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   697 00006925 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   698                              <1> 
   699                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   700 00006928 88D8                <1>     mov al, bl
   701 0000692A 30DB                <1>     xor bl, bl
   702 0000692C E8F70E0000          <1>     call getCDSNotJoin
   703 00006931 7302                <1>     jnc .drive1Ok
   704 00006933 B3FF                <1>     mov bl, -1
   705                              <1> .drive1Ok:
   706 00006935 88F8                <1>     mov al, bh
   707 00006937 30FF                <1>     xor bh, bh
   708 00006939 E8EA0E0000          <1>     call getCDSNotJoin
   709 0000693E 7302                <1>     jnc .drive2Ok
   710 00006940 B7FF                <1>     mov bh, -1
   711                              <1> .drive2Ok:
   712                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   713                              <1>     ;rdi has pointer to psp
   714 00006942 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   715                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   716 00006945 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   717 0000694A 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   717 00006953 FF                  <1>
   718 00006954 4821C6              <1>     and rsi, rax    ;To align downwards
   719                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   720                              <1>     ;That is the job of the runtime to handle.
   721                              <1> ;Registers carrying data at this point:
   722                              <1> ;bx = FCB drive statuses
   723                              <1> ;rsi = Stack Base
   724                              <1> ;rbp = execFrame
   725 00006957 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   726 0000695B 750B                <1>     jne short .noBg
   727                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   728 0000695D 56                  <1>     push rsi
   729 0000695E E8A10E0000          <1>     call getUserRegs
   730 00006963 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   731 00006967 5E                  <1>     pop rsi
   732                              <1> .noBg:
   733 00006968 FF15(9F000000)      <1>     call qword [launchTask]
   734 0000696E 7251                <1>     jc short .cleanAndFail
   735                              <1> ;Final step: Transfer control
   736 00006970 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   737 00006974 742C                <1>     je .xfrProgram
   738 00006976 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   739 0000697A 741D                <1>     je .overlayExit ;Skip the below for background tasks
   740 0000697C 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   741 00006980 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   742 00006984 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   743 00006988 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   744 0000698B 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 00006992 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   746 00006995 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   747                              <1> .overlayExit:
   748 00006999 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   749 0000699C 5D                  <1>     pop rbp ;Point rsp to the return address
   750 0000699D E932130000          <1>     jmp extGoodExit ;And return!
   751                              <1> .xfrProgram:
   752 000069A2 FA                  <1>     cli
   753 000069A3 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   754 000069A6 C605(30040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   755 000069AD FB                  <1>     sti
   756                              <1> 
   757 000069AE 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   758 000069AF FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   759 000069B2 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   760 000069B5 4989F9              <1>     mov r9, rdi
   761 000069B8 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   762                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000069BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> ;r8 is guaranteed to have a copy of the PSP.
   764                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   765                              <1> ;Everything else is optional and potentially changable at a later stage
   766                              <1> 
   767                              <1> .badFmtErr:
   768 000069BC B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   769                              <1> .cleanAndFail:
   770                              <1> ;Close the open file and any open resources and fail
   771 000069C1 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   772 000069C6 E8D6120000          <1>     call dosCrit1Exit
   773 000069CB 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   774 000069CF 50                  <1>     push rax    ;Save error code
   775 000069D0 55                  <1>     push rbp
   776 000069D1 E801CEFFFF          <1>     call closeFileHdl
   777 000069D6 5D                  <1>     pop rbp
   778 000069D7 58                  <1>     pop rax
   779 000069D8 E96BF9FFFF          <1>     jmp .badExit
   780                              <1> 
   781                              <1> .readDataFromHdl:
   782                              <1> ;Input: ecx = Number of bytes to transfer
   783                              <1> ;       rdx = Ptr to the buffer to use
   784 000069DD 52                  <1>     push rdx
   785 000069DE E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   786 000069E3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   787 000069E7 55                  <1>     push rbp
   788 000069E8 E828CEFFFF          <1>     call readFileHdl
   789 000069ED 5D                  <1>     pop rbp
   790 000069EE E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   791 000069F3 5A                  <1>     pop rdx
   792                              <1>     return
    13                              <2> %%_ret:
    14 000069F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .clearArenaOwner:
   794 000069F5 53                  <1>     push rbx
   795 000069F6 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   796 000069F8 E89A120000          <1>     call dosCrit1Enter
   797 000069FD E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   798 00006A02 5B                  <1>     pop rbx
   799                              <1>     return
    13                              <2> %%_ret:
    14 00006A03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   800                              <1> .setPSPArenaOwner:
   801                              <1> ;Sets the current PSP as the arena owner
   802 00006A04 53                  <1>     push rbx
   803 00006A05 488B1D(47040000)    <1>     mov rbx, qword [currentPSP]
   804 00006A0C E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   805 00006A11 E88B120000          <1>     call dosCrit1Exit
   806 00006A16 5B                  <1>     pop rbx
   807                              <1>     return
    13                              <2> %%_ret:
    14 00006A17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> .setProgOrEnvArenaOwnerToRBX:
   809                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   810 00006A18 9C                  <1>     pushfq
   811 00006A19 50                  <1>     push rax
   812                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   813                              <1>     ;This is because they are set up at separate points in the routine!
   814 00006A1A 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   815 00006A1E E80C000000          <1>     call .writeArenaHeaderOwner
   816 00006A23 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   817 00006A27 E803000000          <1>     call .writeArenaHeaderOwner
   818 00006A2C 58                  <1>     pop rax
   819 00006A2D 9D                  <1>     popfq
   820                              <1>     return
    13                              <2> %%_ret:
    14 00006A2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .writeArenaHeaderOwner:
   822                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   823                              <1> ;       rbx = Owner ID
   824 00006A2F 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   825                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006A32 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006A34 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   826 00006A35 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   827 00006A3B 48895801            <1>     mov qword [rax + 1], rbx
   828                              <1>     return
    13                              <2> %%_ret:
    14 00006A3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    47                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00006A40 3C01                <1>     cmp al, 01
    12 00006A42 740B                <1>     je .setSC
    13 00006A44 7210                <1>     jb .getSC
    14 00006A46 3C03                <1>     cmp al, 03
    15 00006A48 7214                <1>     jb .getDev
    16 00006A4A 741C                <1>     je .setDev
    17 00006A4C B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00006A4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00006A4F 8815(F9030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00006A55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00006A56 8A15(F9030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00006A5C EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00006A5E B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00006A60 E89F0D0000          <1>     call getUserRegs
    29 00006A65 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00006A68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 00006A69 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00006A6C 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 00006A6F 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 00006A71 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006A74 31ED                <1>     xor ebp, ebp    ;Get country table
    57 00006A76 B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006A7B 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 00006A82 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006A84 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 00006A86 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 00006A88 488D35EB97FFFF      <1>     lea rsi, ctryTbl
    65 00006A8F B926000000          <1>     mov ecx, countryStruc_size
    66 00006A94 F3A4                <1>     rep movsb
    67 00006A96 0FB71DD997FFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 00006A9D E8620D0000          <1>     call getUserRegs
    70 00006AA2 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 00006AA6 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 00006AA8 E927120000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 00006AAD 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 00006AAF E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 00006AB4 0F8228120000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 00006ABA 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 00006ABC 75E8                <1>     jnz .exitNoCountryCode 
    81 00006ABE 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 00006AC0 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 00006AC2 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 00006AC4 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 00006AC6 663B1DA997FFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006ACD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006ACF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   101 00006AD0 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 00006AD2 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 00006AD4 B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 00006AD9 CD2F                <1>     int 2fh
   105 00006ADB 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 00006ADD 751F                <1>     jne .errNotInstalled
   107 00006ADF 488D351497FFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 00006AE6 B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 00006AEB B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 00006AF0 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 00006AF2 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 00006AF5 CD2F                <1>     int 2fh
   113 00006AF7 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006AF9 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006AFB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 00006AFC F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 00006AFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 00006AFE B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 00006B00 EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID or subfunction value
   125                              <1> ;al >= 20h:
   126                              <1> ;   If al[7] set, use filename table. Else, use normal table
   127                              <1> ;   al = 20h/A0h  country dependant character capitalisation
   128                              <1> ;       dl = Char to UC
   129                              <1> ;       dh = Reserved for second byte if DCBS
   130                              <1> ;   Returns:
   131                              <1> ;       dl = UC char
   132                              <1> ;       dh = Reserved for second byte if DCBS
   133                              <1> ;   al = 21h/A1h  country dependant string capitalisation
   134                              <1> ;       rdx -> Ptr to string of ecx characters to capitalise
   135                              <1> ;       ecx = String length
   136                              <1> ;   Returns: 
   137                              <1> ;       rdx -> Capitalised string
   138                              <1> ;   al = 22h/A2h  country dependant ASCIIZ string capitalisation
   139                              <1> ;       rdx -> Ptr to ASCIIZ string to capitalise
   140                              <1> ;   Returns:
   141                              <1> ;       rdx -> Capitalised ASCIIZ string
   142                              <1> ;   al = 23h/A3h  determine if character represents country relative
   143                              <1> ;                   Yes or No response 
   144                              <1> ;       dl = Char to test Y/N on
   145                              <1> ;       dh = Reserved for second byte if DCBS
   146                              <1> ;   Returns:
   147                              <1> ;       ax = 0 : (N)O
   148                              <1> ;       ax = 1 : (Y)ES 
   149                              <1> ;       ax = 2 : NEITHER
   150                              <1> ;al < 20h:
   151                              <1> ;   al = 01h get general internationalization info
   152                              <1> ;   al = 02h get pointer to uppercase table
   153                              <1> ;   xxx No 03h. Fails unknown function in this case xxx
   154                              <1> ;   al = 04h get pointer to filename uppercase table
   155                              <1> ;   al = 05h get pointer to filename terminator table
   156                              <1> ;   al = 06h get pointer to collating sequence table
   157                              <1> ;   al = 07h get pointer to DCBS table
   158                              <1> ;bx = code page (FFFFh=global code page)
   159                              <1> ;dx = country ID (FFFFh=current country)
   160                              <1> ;rdi -> country information buffer
   161                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   162                              <1> ;Return:
   163                              <1> ;CF=CY if error
   164                              <1> ;ax = error code
   165                              <1> ;CF=NC if successful
   166                              <1> ;ecx = size of country information returned
   167                              <1> ;rdi -> country information filled in
   168                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   169 00006B02 3C20                <1>     cmp al, 20h
   170 00006B04 0F827D000000        <1>     jb .getInterInfo
   171                              <1> ;Do string manipulation here
   172                              <1> ;Start by getting the correct table to use for translation
   173 00006B0A 488D1D9197FFFF      <1>     lea rbx, ucTbl
   174 00006B11 488D350C98FFFF      <1>     lea rsi, fileUCTbl
   175 00006B18 A880                <1>     test al, 80h    ;Check bit 7.
   176 00006B1A 480F45DE            <1>     cmovnz rbx, rsi ;If set, use fileUC table
   177 00006B1E 247F                <1>     and al, ~80h    ;Now clear the checking bit
   178 00006B20 3C24                <1>     cmp al, 24h     ;Check the function number is valid
   179 00006B22 0F83B7000000        <1>     jae .invFuncExit
   180 00006B28 3C23                <1>     cmp al, 23h     ;Does the user want a Y/N check?
   181 00006B2A 7422                <1>     je .doYn
   182 00006B2C 3C20                <1>     cmp al, 20h     ;Does the user want a char conversion?
   183 00006B2E 7438                <1>     je .doOne
   184                              <1> ;String functions here
   185 00006B30 4889D6              <1>     mov rsi, rdx    ;Move source string ptr to rsi
   186 00006B33 4889D7              <1>     mov rdi, rdx    ;Move destination ptr to rdi too
   187 00006B36 3C21                <1>     cmp al, 21h     ;Do we have the count in ecx?
   188 00006B38 7507                <1>     jne .doString   ;Yes, go straight to conversion
   189 00006B3A E8420E0000          <1>     call strlen     ;Else, get length of string to convert 
   190 00006B3F FFC9                <1>     dec ecx         ;Drop the terminating null from conversion
   191                              <1> .doString:
   192                              <1> ;rsi -> Next char to convert
   193                              <1> ;rdi -> Position to store the converted char
   194                              <1> ;ecx = Number of chars to convert
   195 00006B41 AC                  <1>     lodsb
   196 00006B42 E83A000000          <1>     call .doChar    ;Converts the char in al
   197 00006B47 AA                  <1>     stosb
   198 00006B48 FFC9                <1>     dec ecx         ;One less char to convert
   199 00006B4A 75F5                <1>     jnz .doString
   200 00006B4C EB15                <1>     jmp short .ynExit
   201                              <1> .doYn:
   202 00006B4E E824000000          <1>     call .convChar  ;Uppercase char in dl.
   203 00006B53 31C0                <1>     xor eax, eax    ;Else in Y/N check. Setup retcode in al
   204 00006B55 80FA4E              <1>     cmp dl, "N"
   205 00006B58 7409                <1>     je .ynExit
   206 00006B5A FFC0                <1>     inc eax         ;Inc for yes
   207 00006B5C 80FA59              <1>     cmp dl, "Y"
   208 00006B5F 7402                <1>     je .ynExit
   209 00006B61 FFC0                <1>     inc eax         ;Inc for unknown
   210                              <1> .ynExit:
   211 00006B63 E96C110000          <1>     jmp extGoodExit ;Return value in ax
   212                              <1> .doOne:
   213 00006B68 E80A000000          <1>     call .convChar  ;Get converted char in dl
   214 00006B6D E8920C0000          <1>     call getUserRegs
   215 00006B72 885618              <1>     mov byte [rsi + callerFrame.rdx], dl    ;Put dl into its place
   216 00006B75 EBEC                <1>     jmp short .ynExit
   217                              <1> .convChar:
   218                              <1> ;Input: dl = Char to uppercase
   219                              <1> ;       rbx -> Table to use for conversion
   220                              <1> ;Output: dl = Uppercased char
   221 00006B77 88D0                <1>     mov al, dl  ;Move the char into al to uppercase
   222 00006B79 E803000000          <1>     call .doChar
   223 00006B7E 88C2                <1>     mov dl, al
   224                              <1>     return
    13                              <2> %%_ret:
    14 00006B80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> .doChar:
   226                              <1> ;Input: rbx -> Table to use for uppercasing the string
   227                              <1> ;       al = Char to uppercase
   228                              <1> ;Output: al = Uppercased char
   229 00006B81 53                  <1>     push rbx
   230 00006B82 E9B20D0000          <1>     jmp uppercaseCharWithTable
   231                              <1> 
   232                              <1> .getInterInfo:
   233 00006B87 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   234 00006B8D 7250                <1>     jb .invFuncExit
   235 00006B8F 488D356496FFFF      <1>     lea rsi, dosNLSPtr
   236 00006B96 6681FAFFFF          <1>     cmp dx, -1
   237 00006B9B 660F4415D396FFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   238 00006BA3 6681FBFFFF          <1>     cmp bx, -1
   239 00006BA8 660F441DC896FFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   240 00006BB0 663B15BF96FFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   241 00006BB7 7570                <1>     jne .nlsReq
   242 00006BB9 663B1DB896FFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   243 00006BC0 7567                <1>     jne .nlsReq
   244                              <1>     ;We access our local DOS nationalisation tables to 
   245                              <1>     ; avoid hitting NLS.
   246 00006BC2 488D357D96FFFF      <1>     lea rsi, charTableArray
   247 00006BC9 0FB72D7496FFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   248                              <1> .loopTableSearch:
   249 00006BD0 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   250 00006BD2 751C                <1>     jne .tblFound
   251 00006BD4 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   252 00006BDB FFCD                <1>     dec ebp
   253 00006BDD 75F1                <1>     jnz .loopTableSearch
   254                              <1>     ;Fallthrough to error if no match
   255                              <1> .invFuncExit:
   256 00006BDF C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk  
   257 00006BE6 B801000000          <1>     mov eax, errInvFnc  ;Bad info ID byte or subfunction
   258 00006BEB E9F2100000          <1>     jmp extErrExit
   259                              <1> .tblFound:
   260 00006BF0 A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   261 00006BF1 3C01                <1>     cmp al, 1
   262 00006BF3 741B                <1>     je .getExtCtryTbl
   263                              <1>     ;Here we simply copy over a qword
   264 00006BF5 B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   265 00006BFA B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   266                              <1> .copyTable:
   267                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   268 00006BFF F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   269 00006C01 E8FE0B0000          <1>     call getUserRegs
   270 00006C06 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   271                              <1>     ;Undocumented, if success, ax contains the requested codepage
   272                              <1>     ; value. This is undocumented and should not be relied upon.
   273 00006C09 89D8                <1>     mov eax, ebx    
   274 00006C0B E9C4100000          <1>     jmp extGoodExit
   275                              <1> .getExtCtryTbl:
   276                              <1> ;ecx has length of caller buffer
   277 00006C10 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   278 00006C16 31C0                <1>     xor eax, eax    ;Clear eax
   279 00006C18 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   280 00006C1A 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   281 00006C1C 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   282 00006C1F 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   283 00006C21 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   284 00006C23 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   285 00006C27 EBD6                <1>     jmp short .copyTable
   286                              <1>     
   287                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   288                              <1> ;As before, now rsi -> DOSNLS structure
   289                              <1> ; and bpl has the function code (1,2,4,5,6)
   290 00006C29 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   291 00006C2C B800140000          <1>     mov eax, 1400h  ;Install check!
   292 00006C31 CD2F                <1>     int 2fh
   293 00006C33 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   294 00006C35 75A8                <1>     jne .invFuncExit    
   295 00006C37 B802140000          <1>     mov eax, 1402h      ;Get codepage info
   296 00006C3C CD2F                <1>     int 2fh
   297 00006C3E 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   298 00006C40 0F859C100000        <1>     jne extErrExit      ; al has error code
   299                              <1>     ;Undocumented, if success, ax contains the default codepage
   300                              <1>     ; value. This is undocumented and should not be relied upon.
   301                              <1>     ;This value never changes, not even by NLSFUNC.
   302 00006C46 0FB705F595FFFF      <1>     movzx eax, word [defaultCP]
   303 00006C4D E982100000          <1>     jmp extGoodExit
   304                              <1> 
   305                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   306                              <1> ;If al = 01h -> Get Global Codepage
   307                              <1> ;Return:    ebx = Active (current) codepage
   308                              <1> ;           edx = System (default) codepage
   309                              <1> ;If al = 02h -> Set Global Codepage
   310                              <1> ;   bx = Active (current) codepage
   311                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   312 00006C52 3C01                <1>     cmp al, 1
   313 00006C54 7528                <1>     jne .setCodepage
   314                              <1> ;Here we get the codepage
   315 00006C56 E8A90B0000          <1>     call getUserRegs
   316 00006C5B 0FB71D1696FFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   317 00006C62 0FB715D995FFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   318 00006C69 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   319 00006C6C 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   320 00006C6F E960100000          <1>     jmp extGoodExit
   321                              <1> .exitBadFunc:
   322 00006C74 B801000000          <1>     mov eax, errInvFnc
   323 00006C79 E964100000          <1>     jmp extErrExit
   324                              <1> .setCodepage:
   325 00006C7E 3C02                <1>     cmp al, 2
   326 00006C80 75F2                <1>     jne .exitBadFunc
   327 00006C82 0FB7157995FFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   328 00006C89 B800140000          <1>     mov eax, 1400h
   329 00006C8E CD2F                <1>     int 2Fh
   330 00006C90 3CFF                <1>     cmp al, -1
   331 00006C92 75E0                <1>     jne .exitBadFunc
   332 00006C94 488D355F95FFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   333 00006C9B B801140000          <1>     mov eax, 1401h      ;Set global codepage
   334 00006CA0 CD2F                <1>     int 2Fh
   335 00006CA2 84C0                <1>     test al, al
   336 00006CA4 0F842A100000        <1>     jz extGoodExit
   337 00006CAA 3C41                <1>     cmp al, errNLSAcDen
   338 00006CAC 0F8530100000        <1>     jne extErrExit
   339 00006CB2 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   340 00006CB4 668905(33040000)    <1>     mov word [errorExCde], ax
   341 00006CBB C605(35040000)06    <1>     mov byte [errorAction], eActIgn
   342 00006CC2 C605(32040000)04    <1>     mov byte [errorLocus], eLocChr
   343 00006CC9 C605(36040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   344 00006CD0 E91A100000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   345                              <1> 
   346                              <1> 
   347                              <1> caseMapFunc:
   348                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   349 00006CD5 3C80                <1>     cmp al, 80h
   350                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006CD7 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006CD9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   351 00006CDA 53                  <1>     push rbx
   352 00006CDB 488D1DC095FFFF      <1>     lea rbx, ucTbl
   353 00006CE2 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   354 00006CE4 D7                  <1>     xlatb
   355 00006CE5 5B                  <1>     pop rbx
   356                              <1>     return
    13                              <2> %%_ret:
    14 00006CE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  %include "./src/Kernel/Error/harderr.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> buffer pointer
     7                              <1> ;       rbp -> DPB ptr
     8 00006CE7 3C0F                <1>     cmp al, drvBadDskChnge
     9 00006CE9 7510                <1>     jne .doReq
    10 00006CEB 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 00006CEC 488B05(0D050000)    <1>     mov rax, qword [primReqPkt + ioReqPkt.desptr]   ;Get volume label ptr
    12 00006CF3 488905(37040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 00006CFA 58                  <1>     pop rax
    15                              <1> .doReq:
    16 00006CFB E849000000          <1>     call diskDevErr ;Preserves rdi on stack and rbp in tmpDPBPtr
    17                              <1>     return
    13                              <2> %%_ret:
    14 00006D00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 00006D01 50                  <1>     push rax    ;Wanna preserve ax
    24 00006D02 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 00006D07 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 00006D0A 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 00006D0C 53                  <1>     push rbx
    28 00006D0D 488D1D6093FFFF      <1>     lea rbx, hardXlatTbl
    29 00006D14 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 00006D15 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 00006D16 668905(33040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 00006D1D 58                  <1>     pop rax
    34 00006D1E 56                  <1>     push rsi
    35 00006D1F 488D358894FFFF      <1>     lea rsi, hardErrTbl
    36 00006D26 E810100000          <1>     call setErrorVars
    37 00006D2B 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 00006D2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 00006D2D 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 00006D30 8825(92040000)      <1>     mov byte [Int24bitfld], ah
    48 00006D36 48892D(C2070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 00006D3D 56                  <1>     push rsi
    50 00006D3E 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 00006D42 E87C000000          <1>     call hardErrorCommon
    52 00006D47 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00006D48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 00006D49 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 00006D4B 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 00006D4E 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 00006D50 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 00006D53 57                  <1>     push rdi        ;Save the disk buffer pointer
    68 00006D54 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 00006D57 81FF00000000        <1>     cmp edi, drvWPErr
    70 00006D5D 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 00006D5F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 00006D62 8805(31040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 00006D68 8A25(92040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 00006D6E 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 00006D71 F6C301              <1>     test bl, dosBuffer
    79 00006D74 7505                <1>     jnz .df0
    80 00006D76 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 00006D79 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 00006D7B F6C302              <1>     test bl, fatBuffer
    84 00006D7E 750C                <1>     jnz .df1
    85 00006D80 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 00006D83 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Invalidate the count!
    87 00006D8A EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 00006D8C F6C304              <1>     test bl, dirBuffer
    90 00006D8F 7505                <1>     jnz .df2
    91 00006D91 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 00006D94 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 00006D96 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 00006D99 8025(29070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 00006DA0 0A25(29070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 00006DA6 0A25(92040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 00006DAC E802000000          <1>     call diskDevErrBitfield
   101 00006DB1 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 00006DB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 00006DB3 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 00006DB6 48892D(C2070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 00006DBD 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 00006DC1 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 00006DC3 E839FFFFFF          <1>     call xlatHardError
   117 00006DC8 50                  <1>     push rax
   118 00006DC9 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 00006DCE 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 00006DD0 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 00006DD3 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 00006DD4 F605(2F040000)FF    <1>     test byte [critErrFlag], -1   ;If not zero, already in error. Auto FAIL
   152 00006DDB 7570                <1>     jnz .setFail
   153 00006DDD 488925(8A040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack pointer
   154 00006DE4 66813D(63070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   154 00006DEC FF                  <1>
   155 00006DED 740C                <1>     je .notOpeningFile
   156 00006DEF 57                  <1>     push rdi
   157 00006DF0 488B3D(53070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   158 00006DF7 C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   159 00006DFA 5F                  <1>     pop rdi
   160                              <1> .notOpeningFile:
   161 00006DFB 66F705(B2070000)02- <1>     test word [wEOFlags], eoFailI24 ;If we should skip I24, return fail!
   161 00006E03 00                  <1>
   162 00006E04 7547                <1>     jnz .setFail
   163 00006E06 FA                  <1>     cli                         
   164 00006E07 FE05(2F040000)      <1>     inc byte [critErrFlag]      ;Set flag for critical error
   165 00006E0D FE0D(30040000)      <1>     dec byte [inDOS]            ;Exiting DOS
   166 00006E13 488B25(A5040000)    <1>     mov rsp, qword [oldRSP]     ;Get the stack ptr after regs were pushed
   167 00006E1A 31ED                <1>     xor ebp, ebp                ;Always zeroed for DOS portability!
   168 00006E1C CD24                <1>     int 24h                     ;Call crit. err. hdlr. Ints reset on
   169 00006E1E 488925(A5040000)    <1>     mov qword [oldRSP], rsp     ;Allows user to change reg vals on fail!
   170 00006E25 488B25(8A040000)    <1>     mov rsp, qword [xInt24hRSP] ;Ret to DOS stack for failing device
   171 00006E2C C605(2F040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   172 00006E33 FE05(30040000)      <1>     inc byte [inDOS]            ;Reenter DOS
   173 00006E39 488B2D(C2070000)    <1>     mov rbp, qword [tmpDPBPtr]
   174 00006E40 FB                  <1>     sti                         
   175                              <1>     ;Now we check that the response given was allowed, and translate if needed
   176 00006E41 3C00                <1>     cmp al, critIgnore
   177 00006E43 744A                <1>     je .checkIgnore
   178 00006E45 3C01                <1>     cmp al, critRetry
   179 00006E47 7451                <1>     je .checkRetry
   180 00006E49 3C03                <1>     cmp al, critFail
   181 00006E4B 7558                <1>     jne .abort   ;Must be abort
   182                              <1> .setFail:   ;Here is for fail
   183 00006E4D B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   184 00006E4F 66F705(B2070000)02- <1>     test word [wEOFlags], eoFailI24   ;If hdl tells us to fail, skip fail ctr!
   184 00006E57 00                  <1>
   185 00006E58 7506                <1>     jnz .skipFailInc
   186 00006E5A FE05(94040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   187                              <1> .skipFailInc:
   188 00006E60 F605(92040000)08    <1>     test byte [Int24bitfld], critFailOK
   189 00006E67 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   190                              <1> .exit:
   191 00006E69 C605(31040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   192 00006E70 803D(63070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   193                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006E77 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006E79 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   194                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   195 00006E7A 50                  <1>     push rax
   196 00006E7B 57                  <1>     push rdi
   197 00006E7C 0FB705(63070000)    <1>     movzx eax, word [currentNdx]
   198 00006E83 488B3D(53070000)    <1>     mov rdi, qword [curHdlPtr]
   199 00006E8A 8807                <1>     mov byte [rdi], al
   200 00006E8C 5F                  <1>     pop rdi
   201 00006E8D 58                  <1>     pop rax
   202                              <1>     return
    13                              <2> %%_ret:
    14 00006E8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> .checkIgnore:
   204 00006E8F F605(92040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   205 00006E96 75D1                <1>     jnz .exit
   206 00006E98 EBB3                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   207                              <1> .checkRetry:
   208 00006E9A F605(92040000)10    <1>     test byte [Int24bitfld], critRetryOK
   209 00006EA1 75C6                <1>     jnz .exit   
   210 00006EA3 EBA8                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   211                              <1> .abort:
   212                              <1> ;Prepare to abort. We abort from within!
   213 00006EA5 E868BDFFFF          <1>     call vConRetDriver  ;Always reset the driver flag on abort
   214                              <1> ;If a network request requests abort, translate to fail
   215 00006EAA 803D(2B070000)FF    <1>     cmp byte [dosInvoke], -1
   216 00006EB1 74B6                <1>     je .exit
   217                              <1> ;If already terminating, dont start terminating again!
   218 00006EB3 F605(C0040000)FF    <1>     test byte [procExiting], -1
   219 00006EBA 75AD                <1>     jnz .exit
   220 00006EBC 31C0                <1>     xor eax, eax    ;Default return code to 0. Abort flag will be set later
   221 00006EBE C605(2F070000)02    <1>     mov byte [exitType], 2      ;We are returning from Abort, ret type 2!
   222 00006EC5 8805(89040000)      <1>     mov byte [volIdFlag], al     ;Clear special vol search byte if set
   223                              <1>     ;Before returning, we need to set the aborting psp.rspPtr back to 
   224                              <1>     ; the oldRSP as a syscall during Int 24h would change this value.
   225                              <1>     ;This only affects programs which are their own parents as when aborting
   226                              <1>     ; we swap to the parentPSP. This prevents a bug from arising as the 
   227                              <1>     ; stack ptr in psp.rspPtr may have changed since initially entering DOS
   228                              <1>     ; as the Int 24h handler may have made an Int 21h call, meaning if 
   229                              <1>     ; the Int 24h handler plays with the stack too much, the value in 
   230                              <1>     ; psp.rspPtr is no longer pointing at a "valid" stack frame (i.e. 
   231                              <1>     ; with valid SS:RSP). The only sane thing to do is to reset this 
   232                              <1>     ; pointer to the value it had on entry to the initial DOS call which
   233                              <1>     ; triggered the Int 24h (or the equivalent stack frame that was 
   234                              <1>     ; replaced by the Int 24h handler). If the task being aborted is not 
   235                              <1>     ; its own parent the following is a NOP. If it is its own parent, we
   236                              <1>     ; the following prevents a GP. Fault.
   237 00006ECB 488B3D(47040000)    <1>     mov rdi, qword [currentPSP]
   238 00006ED2 488B1D(A5040000)    <1>     mov rbx, qword [oldRSP]
   239 00006ED9 48895F46            <1>     mov qword [rdi + psp.rspPtr], rbx
   240 00006EDD E9EAF2FFFF          <1>     jmp terminateClean.altEP
    49                                  %include "./src/Kernel/Error/ctrlc.asm"
     1                              <1> ctrlBreakHdlr:
     2 00006EE2 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
     3 00006EE4 E858BCFFFF          <1>     call printCaretASCII
     4 00006EE9 E883BCFFFF          <1>     call printCRLF
     5                              <1>     ;Reset the console back to 0
     6 00006EEE E81FBDFFFF          <1>     call vConRetDriver
     7                              <1> ;Handles a control break, juggles stacks and enters int 21h 
     8                              <1> .exceptEP:
     9                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
    10                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
    11                              <1> ;   interrupted DOS call is restarted
    12 00006EF3 FA                  <1> 	cli
    13 00006EF4 488B25(A5040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
    14 00006EFB E8690D0000          <1> 	call dosPopRegs ;Get user state back
    15 00006F00 C605(30040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
    16 00006F07 C605(2F040000)00    <1>     mov byte [critErrFlag], 0
    17 00006F0E 488925(4F040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp. This is the og psp rsp.
    18 00006F15 F8                  <1>     clc
    19 00006F16 CD23                <1>     int 23h ;Call critical error handler
    20 00006F18 FA                  <1>     cli ;Clear interrupts again
    21 00006F19 488905(5B040000)    <1>     mov qword [oldRAX], rax     ;Save eax (has DOS fn to do if not terminate)
    22 00006F20 9C                  <1>     pushfq                      ;Get returned flags in rax
    23 00006F21 58                  <1>     pop rax 
    24 00006F22 483B25(4F040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret/ret 8?
    25 00006F29 750C                <1>     jne .checkCF                ;If yes, check the returned CF flag.
    26                              <1> .returnToDOS:                   ;Else, execute the DOS function in eax.
    27 00006F2B 488B05(5B040000)    <1>     mov rax, qword [oldRAX]     ;Get the function number to execute
    28 00006F32 E9CB0B0000          <1>     jmp functionDispatch        ;Goto int 21h
    29                              <1> .checkCF:
    30 00006F37 488B25(4F040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Reset the stack pointer to pre int 23h
    31 00006F3E A801                <1>     test al, 1      ;Was CF=CY returned?
    32 00006F40 74E9                <1>     jz .returnToDOS ;If CF=NC, DOS function in eax
    33 00006F42 B8004C0000          <1>     mov eax, 4c00h  ;Else, exit with default error code (00h)
    34 00006F47 C605(B6040000)FF    <1>     mov byte [ctrlCExit], -1  ;Signal CTRL+BREAK termination
    35 00006F4E E9AF0B0000          <1>     jmp functionDispatch ;When jumping now, rsp will go back into psp.rsp!
    50                                  %include "./src/Kernel/Error/execpt.asm"
     1                              <1> ;CPU Exception handlers
     2                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
     3                              <1> ; CTRL+C exit.
     4                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
     5                              <1> ; system.
     6                              <1> ; Also halt if the application is it's own parent.
     7                              <1> ;An application should hook these interupts if they wish to not 
     8                              <1> ; CTRL+C exit, and instead return to DOS.
     9                              <1> i0:
    10 00006F53 31C0                <1>     xor eax, eax
    11 00006F55 E9AB000000          <1>     jmp cpu_2args
    12                              <1> i1:
    13 00006F5A B801000000          <1>     mov eax, 1
    14 00006F5F E9A1000000          <1>     jmp cpu_2args
    15                              <1> i2:
    16 00006F64 B802000000          <1>     mov eax, 2
    17 00006F69 E997000000          <1>     jmp cpu_2args
    18                              <1> i3:
    19 00006F6E B803000000          <1>     mov eax, 3
    20 00006F73 E98D000000          <1>     jmp cpu_2args
    21                              <1> i4:
    22 00006F78 B804000000          <1>     mov eax, 4
    23 00006F7D E983000000          <1>     jmp cpu_2args
    24                              <1> i5:
    25 00006F82 B805000000          <1>     mov eax, 5
    26 00006F87 EB7C                <1>     jmp short cpu_2args
    27                              <1> i6:
    28 00006F89 B806000000          <1>     mov eax, 6
    29 00006F8E EB75                <1>     jmp short cpu_2args
    30                              <1> i7:
    31 00006F90 B807000000          <1>     mov eax, 7
    32 00006F95 EB6E                <1>     jmp short cpu_2args
    33                              <1> i8:
    34 00006F97 B808000000          <1>     mov eax, 8
    35 00006F9C EB60                <1>     jmp short cpu_3args
    36                              <1> i9:
    37 00006F9E B809000000          <1>     mov eax, 9
    38 00006FA3 EB60                <1>     jmp short cpu_2args
    39                              <1> i10:
    40 00006FA5 B80A000000          <1>     mov eax, 0Ah
    41 00006FAA EB52                <1>     jmp short cpu_3args
    42                              <1> i11:
    43 00006FAC B80B000000          <1>     mov eax, 0Bh
    44 00006FB1 EB4B                <1>     jmp short cpu_3args
    45                              <1> i12:
    46 00006FB3 B80C000000          <1>     mov eax, 0Ch
    47 00006FB8 EB44                <1>     jmp short cpu_3args
    48                              <1> i13:
    49 00006FBA B80D000000          <1>     mov eax, 0Dh
    50 00006FBF EB3D                <1>     jmp short cpu_3args
    51                              <1> i14:
    52 00006FC1 B80E000000          <1>     mov eax, 0Eh
    53 00006FC6 EB2F                <1>     jmp short cpu_4args
    54                              <1> i15:
    55 00006FC8 B80F000000          <1>     mov eax, 0Fh
    56 00006FCD EB36                <1>     jmp short cpu_2args
    57                              <1> i16:
    58 00006FCF B810000000          <1>     mov eax, 10h
    59 00006FD4 EB2F                <1>     jmp short cpu_2args
    60                              <1> i17:
    61 00006FD6 B811000000          <1>     mov eax, 11h
    62 00006FDB EB21                <1>     jmp short cpu_3args
    63                              <1> i18:
    64 00006FDD B812000000          <1>     mov eax, 12h
    65 00006FE2 EB21                <1>     jmp short cpu_2args
    66                              <1> i19:
    67 00006FE4 B813000000          <1>     mov eax, 13h
    68 00006FE9 EB1A                <1>     jmp short cpu_2args
    69                              <1> i20:
    70 00006FEB B814000000          <1>     mov eax, 14h
    71 00006FF0 EB13                <1>     jmp short cpu_2args
    72                              <1> i21:
    73 00006FF2 B815000000          <1>     mov eax, 15h
    74                              <1> cpu_4args:
    75 00006FF7 B903000000          <1>     mov ecx, 3
    76 00006FFC EB0C                <1>     jmp short cpu_exception
    77                              <1> cpu_3args:
    78 00006FFE B902000000          <1>     mov ecx, 2
    79 00007003 EB05                <1>     jmp short cpu_exception
    80                              <1> cpu_2args:
    81 00007005 B901000000          <1>     mov ecx, 1
    82                              <1> cpu_exception:
    83                              <1> ;Enter with:
    84                              <1> ; eax = Exception number in binary
    85                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
    86 0000700A 488D3537020000      <1>     lea rsi, .fatalt0   ;Get the ptr
    87 00007011 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
    88 00007016 E8E5010000          <1>     call .writeExceptionMessage
    89                              <1> 
    90 0000701B C605(CA070000)00    <1>     mov byte [haltDOS], 0   ;Clear first as we are recycling this byte in SDA
    91 00007022 803D(30040000)01    <1>     cmp byte [inDOS], 1     ;Are we in DOS? 
    92 00007029 7327                <1>     jae .introStop          ;Crap out, cant guarantee DOS is stable anymore
    93 0000702B 3D02000000          <1>     cmp eax, 2              ;NMI?
    94 00007030 7420                <1>     je .introStop           ;Freeze the PC to stop it from hurting itself...
    95                              <1> 
    96 00007032 488B1D(47040000)    <1>     mov rbx, qword [currentPSP] ;If self-parent craps out... 
    97 00007039 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr] ;Who do we call? COMSPEC?
    98 0000703D 7413                <1>     je .introStop   ;Nah, for now, just hard stop like if DOS is bad.
    99                              <1> 
   100 0000703F 488D352B020000      <1>     lea rsi, .fatal1
   101 00007046 BBC1000000          <1>     mov ebx, fatal1L
   102 0000704B E8B0010000          <1>     call .writeExceptionMessage
   103 00007050 EB18                <1>     jmp short .introEnd
   104                              <1> .introStop:
   105 00007052 C605(CA070000)FF    <1>     mov byte [haltDOS], -1  ;Set crap out byte...
   106 00007059 488D35D5020000      <1>     lea rsi, .fatalHalt     ;Get the ptr
   107 00007060 BB19000000          <1>     mov ebx, fatalHaltL     ;Get the length
   108 00007065 E896010000          <1>     call .writeExceptionMessage
   109                              <1> .introEnd:
   110 0000706A 488D3D(48050000)    <1>     lea rdi, extErrByteBuf
   111 00007071 E858010000          <1>     call .printbyte ;Store the error code in the byte buffer
   112 00007076 488D35(48050000)    <1>     lea rsi, extErrByteBuf
   113 0000707D BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   114 00007082 E879010000          <1>     call .writeExceptionMessage
   115                              <1> 
   116 00007087 488D35A4020000      <1>     lea rsi, .fatal2
   117 0000708E BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   118 00007093 E868010000          <1>     call .writeExceptionMessage
   119                              <1> 
   120 00007098 80F901              <1>     cmp cl, 1
   121 0000709B 0F8793000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   122                              <1> .cpurollprint:
   123 000070A1 488D3D(48050000)    <1>     lea rdi, extErrByteBuf
   124 000070A8 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   125                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   126 000070AC B108                <1>     mov cl, 8    ;8 bytes
   127                              <1> .cpurollprint1:
   128 000070AE 48C1C208            <1>     rol rdx, 8
   129 000070B2 88D0                <1>     mov al, dl
   130 000070B4 52                  <1>     push rdx
   131 000070B5 E814010000          <1>     call .printbyte
   132 000070BA 5A                  <1>     pop rdx
   133 000070BB FEC9                <1>     dec cl
   134 000070BD 75EF                <1>     jnz .cpurollprint1
   135                              <1> 
   136 000070BF BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   137 000070C4 488D35(48050000)    <1>     lea rsi, extErrByteBuf
   138 000070CB E830010000          <1>     call .writeExceptionMessage
   139                              <1> 
   140 000070D0 BB03000000          <1>     mov ebx, crlfL
   141 000070D5 488D3572020000      <1>     lea rsi, .crlf
   142 000070DC E81F010000          <1>     call .writeExceptionMessage    
   143                              <1> 
   144 000070E1 F605(CA070000)FF    <1>     test byte [haltDOS], -1
   145 000070E8 7534                <1>     jnz .fatalStop
   146 000070EA E8FC000000          <1>     call .readInputChar
   147                              <1>     ;Set error code to General Failure
   148 000070EF 66C705(33040000)1F- <1>     mov word [errorExCde], errGF
   148 000070F7 00                  <1>
   149 000070F8 C605(35040000)04    <1>     mov byte [errorAction], eActAbt
   150 000070FF C605(36040000)07    <1>     mov byte [errorClass], eClsAppFlt
   151 00007106 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   152 0000710D B8FF4C0000          <1>     mov eax, 4cFFh
   153 00007112 C605(B6040000)FF    <1>     mov byte [ctrlCExit], -1
   154                              <1>     ;If a errGF error code and ctrlC exit and the extended error
   155                              <1>     ; setup as above, chances are it was a CPU error
   156 00007119 E9E4090000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   157                              <1> .fatalStop:
   158                              <1> ;This is called if inDOS > 1 or NMI occured
   159                              <1> ;Freezes the machine
   160 0000711E B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   161 00007123 CD2A                <1>     int 2Ah
   162 00007125 E86D0B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   163 0000712A E87C0B0000          <1>     call dosCrit2Enter  ;Get the lock to drivers
   164 0000712F FA                  <1>     cli                 ;Halt all interrupts
   165                              <1> .fatalLp:
   166 00007130 F390                <1>     pause
   167 00007132 EBFC                <1>     jmp short .fatalLp  ;Stay here forever, we cant guarantee anything anymore!
   168                              <1> .cpuextendederror:
   169 00007134 5A                  <1>     pop rdx
   170 00007135 48FFC9              <1>     dec rcx
   171 00007138 51                  <1>     push rcx
   172 00007139 488D3D(48050000)    <1>     lea rdi, extErrByteBuf
   173 00007140 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   174 00007142 86D6                <1>     xchg dl, dh   
   175                              <1> .pr1:
   176 00007144 88D0                <1>     mov al, dl
   177 00007146 52                  <1>     push rdx
   178 00007147 E882000000          <1>     call .printbyte
   179 0000714C 5A                  <1>     pop rdx
   180 0000714D C1CA08              <1>     ror edx, 8    ;Print just dx for now
   181 00007150 FEC9                <1>     dec cl
   182 00007152 75F0                <1>     jnz .pr1
   183                              <1> 
   184 00007154 488D35(48050000)    <1>     lea rsi, extErrByteBuf
   185 0000715B BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   186 00007160 E89B000000          <1>     call .writeExceptionMessage
   187                              <1> 
   188 00007165 488D35C6010000      <1>     lea rsi, .fatal2
   189 0000716C BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   190 00007171 E88A000000          <1>     call .writeExceptionMessage
   191                              <1> 
   192 00007176 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   193 00007177 48FFC9              <1>     dec rcx
   194 0000717A 0F8421FFFFFF        <1>     jz .cpurollprint
   195                              <1> 
   196 00007180 B108                <1>     mov cl, 8   ;16 nybbles
   197 00007182 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   198 00007185 488D3D(48050000)    <1>     lea rdi, extErrByteBuf
   199                              <1> .pr2:
   200 0000718C 48C1C208            <1>     rol rdx, 8    ;Print rdx
   201 00007190 88D0                <1>     mov al, dl
   202 00007192 52                  <1>     push rdx
   203 00007193 E836000000          <1>     call .printbyte
   204 00007198 5A                  <1>     pop rdx
   205 00007199 FEC9                <1>     dec cl
   206 0000719B 75EF                <1>     jnz .pr2
   207                              <1> 
   208 0000719D 488D35(48050000)    <1>     lea rsi, extErrByteBuf
   209 000071A4 BB10000000          <1>     mov ebx, 16
   210 000071A9 E852000000          <1>     call .writeExceptionMessage
   211                              <1> 
   212 000071AE 488D357D010000      <1>     lea rsi, .fatal2
   213 000071B5 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   214 000071BA E841000000          <1>     call .writeExceptionMessage
   215                              <1> 
   216 000071BF E9DDFEFFFF          <1>     jmp .cpurollprint
   217                              <1> 
   218                              <1> 
   219                              <1> .char:    ;Print a single character
   220 000071C4 488D1D6D000000      <1>     lea rbx, .ascii
   221 000071CB D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   222 000071CC AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   223 000071CD C3                  <1>     ret
   224                              <1> .printbyte:
   225 000071CE 88C2                <1>     mov dl, al            ;save byte in dl
   226 000071D0 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   227 000071D4 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   228 000071D9 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   229 000071DD E8E2FFFFFF          <1>     call .char
   230 000071E2 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   231 000071E5 E8DAFFFFFF          <1>     call .char
   232 000071EA C3                  <1>     ret        
   233                              <1> 
   234                              <1> 
   235                              <1> .readInputChar:
   236 000071EB C605(17050000)04    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   237 000071F2 488D35(46050000)    <1>     lea rsi, singleIObyt
   238 000071F9 BB01000000          <1>     mov ebx, 1  ;Read one char
   239 000071FE EB07                <1>     jmp short .ioException
   240                              <1> .writeExceptionMessage:
   241                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   242 00007200 C605(17050000)08    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvWRITE
   243                              <1> .ioException:
   244 00007207 C605(15050000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   245 0000720E 66C705(18050000)00- <1>     mov word [critReqPkt + ioReqPkt.status], 0
   245 00007216 00                  <1>
   246 00007217 891D(2B050000)      <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], ebx
   247 0000721D 488D1D(15050000)    <1>     lea rbx, critReqPkt
   248 00007224 488935(23050000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rsi
   249 0000722B 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   250 00007232 E822010000          <1>     call goDriver
   251                              <1>     return
    13                              <2> %%_ret:
    14 00007237 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> 
   254                              <1> ;Error messages
   255 00007238 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   255 00007241 39414243444546      <1>
   256 00007248 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   256 00007251 20205343502F444F53- <1>
   256 0000725A 20455843455054494F- <1>
   256 00007263 4E2044455445435445- <1>
   256 0000726C 44210D0A0A          <1>
   257                              <1> fatalt0L   equ $ - .fatalt0
   258                              <1> 
   259                              <1> .fatal1:   
   260 00007271 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   260 0000727A 656E7469616C6C7920- <1>
   260 00007283 666174616C20657272- <1>
   260 0000728C 6F7220686173206265- <1>
   260 00007295 656E20646574656374- <1>
   260 0000729E 65640D0A            <1>
   261 000072A2 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   261 000072AB 68652063757272656E- <1>
   261 000072B4 74206170706C696361- <1>
   261 000072BD 74696F6E206D757374- <1>
   261 000072C6 206265207465726D69- <1>
   261 000072CF 6E617465642E0D0A0A  <1>
   262 000072D8 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   262 000072E1 20616E79206B657920- <1>
   262 000072EA 746F20636F6E74696E- <1>
   262 000072F3 7565206F7220435452- <1>
   262 000072FC 4C2B414C542B44454C- <1>
   262 00007305 20746F207265737461- <1>
   262 0000730E 727420746865206D61- <1>
   262 00007317 6368696E652E        <1>
   263 0000731D 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   263 00007326 5354454D204552524F- <1>
   263 0000732F 523A20              <1>
   264                              <1> fatal1L equ $ - .fatal1
   265                              <1> 
   266 00007332 203A20              <1> .fatal2:   db " : "
   267                              <1> fatal2L    equ $ - .fatal2
   268                              <1> 
   269                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   270 00007335 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   270 0000733E 4F532053595354454D- <1>
   270 00007347 2053544F503A20      <1>
   271                              <1> fatalHaltL equ $ - .fatalHalt
   272 0000734E 0D0A0A              <1> .crlf:  db CR,LF,LF
   273                              <1> crlfL  equ $ - .crlf
    51                                  %include "./src/Kernel/Core/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00007351 B003                <1>     mov al, critFail
     7 00007353 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00007355 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00007359 E84D090000          <1>     call dosCrit2Enter
    16 0000735E FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00007361 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00007364 E84C090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007369 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 0000736A 66C743030001        <1>     mov word [rbx + drvReqPkt.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00007370 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00007371 84C0                <1>     test al, al
    33 00007373 723F                <1>     jc .diskError
    34 00007375 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 0000737B 7337                <1>     jae .diskError
    36 0000737D 50                  <1>     push rax
    37 0000737E FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00007380 E813050000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00007385 58                  <1>     pop rax
    40 00007386 7235                <1>     jc .error
    41 00007388 8805(32070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 0000738E 488B2D(3B070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00007395 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 0000739D 750A                <1>     jnz .netError
    45 0000739F 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 000073A3 E8C0030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 000073A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 000073A9 66C705(33040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 000073B1 00                  <1>
    50 000073B2 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 000073B4 66C705(33040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 000073BC 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 000073BD C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 000073C4 C605(35040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 000073CB C605(36040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 000073D2 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 000073D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 000073D4 FE05(30040000)      <1>     inc byte [inDOS]
    63 000073DA FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 000073DB FC                  <1>     cld ;Set string ops in the right direction
    65 000073DC E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000073E1 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000073E3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    67 000073E4 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;We prob. will invalidate
    68 000073EB 56                  <1>     push rsi
    69 000073EC 50                  <1>     push rax
    70 000073ED 488D35(48050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 000073F4 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 000073F6 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 000073F9 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 000073FF F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00007400 B800030000          <1>     mov eax, 0300h  
    79 00007405 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00007407 58                  <1>     pop rax
    82 00007408 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00007409 729E                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 0000740B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 0000740C FA                  <1>     cli
    93 0000740D 488925(A5040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00007414 488D25(181A0000)    <1>     lea rsp, DiskStakTop
    95 0000741B 55                  <1>     push rbp
    96 0000741C 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 0000741D E8B2FFFFFF          <1>     call setupAbsDiskEntry
    98 00007422 7252                <1>     jc absDiskExit
    99 00007424 E86D020000          <1>     call primReqWriteSetup
   100 00007429 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 0000742B FA                  <1>     cli 
   107 0000742C 488925(A5040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00007433 488D25(181A0000)    <1>     lea rsp, DiskStakTop
   109 0000743A 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 0000743B 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 0000743C E893FFFFFF          <1>     call setupAbsDiskEntry
   112 00007441 7233                <1>     jc absDiskExit
   113 00007443 E859020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00007448 E859000000          <1>     call absDiskDriverCall
   118 0000744D 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 0000744F 8A05(EE040000)      <1>     mov al, byte [primReqPkt + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00007455 B480                <1>     mov ah, 80h ;Attachment failure
   123 00007457 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00007459 741A                <1>     je .absExit
   125 0000745B B440                <1>     mov ah, 40h ;Seek error
   126 0000745D 3C06                <1>     cmp al, 06h
   127 0000745F 7414                <1>     je .absExit
   128 00007461 B408                <1>     mov ah, 08h ;Bad CRC
   129 00007463 3C04                <1>     cmp al, 04h
   130 00007465 740E                <1>     je .absExit
   131 00007467 B404                <1>     mov ah, 04h ;Sector not found
   132 00007469 3C08                <1>     cmp al, 08h
   133 0000746B 7408                <1>     je .absExit
   134 0000746D 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 0000746F 84C0                <1>     test al, al
   136 00007471 7402                <1>     je .absExit
   137 00007473 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00007475 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00007476 5B                  <1>     pop rbx
   142 00007477 5D                  <1>     pop rbp
   143 00007478 FA                  <1>     cli
   144 00007479 488B25(A5040000)    <1>     mov rsp, qword [oldRSP]
   145 00007480 FB                  <1>     sti ;Reenable interrupts
   146 00007481 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00007488 9C                  <1>     pushfq
   148 00007489 5A                  <1>     pop rdx ;Get the current flags
   149 0000748A 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 0000748E 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00007493 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00007495 FA                  <1>     cli
   154 00007496 52                  <1>     push rdx    ;Push the flags on the stack
   155 00007497 51                  <1>     push rcx    ;Push the return address on the stack
   156 00007498 9C                  <1>     pushfq
   157 00007499 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 0000749B 89CA                <1>     mov edx, ecx
   159 0000749D FE0D(30040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 000074A3 9D                  <1>     popfq
   161 000074A4 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 000074A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 000074A6 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 000074A7 8B0D(01050000)      <1>     mov ecx, dword [primReqPkt + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 000074AD 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 000074B1 E8A3FEFFFF          <1>     call goDriver   ;Make request
   176 000074B6 5E                  <1>     pop rsi
   177 000074B7 8B05(01050000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 000074BD 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 000074BF 0FB705(EE040000)    <1>     movzx eax, word [primReqPkt + ioReqPkt.status]
   180 000074C6 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 000074CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;Output:
   188                              <1> ;   CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   189 000074CB 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   190                              <1> .sftEp:   ;Entry point if updating DPB for an SFT entry!
   191 000074CF 57                  <1>     push rdi    ;Save the CDS/SFT ptr
   192 000074D0 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   193 000074D4 8805(32070000)      <1>     mov byte [workingDrv], al
   194 000074DA E889020000          <1>     call setWorkingDPB
   195 000074DF E848000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   196 000074E4 488B2D(33070000)    <1>     mov rbp, qword [workingDPB] ;If a driver didn't save rbp, get it back!
   197 000074EB 723D                <1>     jc .exit
   198 000074ED 753B                <1>     jnz .exit   ;If we jump, CF=NC!
   199                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched.
   200 000074EF 51                  <1>     push rcx
   201 000074F0 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   202 000074F7 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 000074FE 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00007504 7517                <1>     jnz .next
   207 00007506 48396F45            <1>     cmp qword [rdi + cds.qDPBPtr], rbp  ;If the dpb ptr matches, reset
   208 0000750A 7511                <1>     jne .next   ;Else, goto next
   209 0000750C C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0     ;Reset start cluster!
   210 00007513 C6470300            <1>     mov byte [rdi + cds.sCurrentPath + 3], 0    ;Reset the path too :)
   211 00007517 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2
   212                              <1> .next:
   213 0000751D 4881C75F000000      <1>     add rdi, cds_size
   214 00007524 FFC9                <1>     dec ecx
   215 00007526 75D6                <1>     jnz .checkCDS
   216 00007528 59                  <1>     pop rcx
   217 00007529 F8                  <1>     clc     ;Clear CF (rare but the cmp + add combo might set CF)
   218                              <1> .exit:
   219 0000752A 5F                  <1>     pop rdi     ;Get back the CDS/SFT ptr
   220                              <1>     return
    13                              <2> %%_ret:
    14 0000752B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   221                              <1> 
   222                              <1> ensureDiskValid:
   223                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   224                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   225                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   226                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   227                              <1> ;   rbp preserved!
   228 0000752C E8B9010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   229                              <1> ;Return in rbx the req hdr address
   230 00007531 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   231 00007535 E81FFEFFFF          <1>     call goDriver   ;Request!
   232 0000753A 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   233 0000753E F7C700800000        <1>     test edi, drvErrStatus
   234 00007544 0F85DB000000        <1>     jnz .diskDrvCritErr
   235 0000754A 0FB605(32070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   236 00007551 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   237 00007554 3805(211A0000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   238 0000755A 750C                <1>     jne .notForce
   239                              <1> ;Here we are forced to rebuild the DPB. In principle, the medium has
   240                              <1> ; not changed but the volume label must be updated. 
   241                              <1> ;The driver can use this opportunity to synchronise its BPB with the 
   242                              <1> ; new label.
   243                              <1> ;We jump directly to skip buffer checking as the rebuilding of the BPB is not
   244                              <1> ; such that we invalidate the buffers.
   245 0000755C C605(211A0000)FF    <1>     mov byte [rebuildDrv], -1   ;Reset this flag as we are doing our job.
   246 00007563 E959000000          <1>     jmp .resetDPB
   247                              <1> .notForce:
   248                              <1> ;Note dpb access flag is either 1 or 0.
   249                              <1> ;If either the check media byte or the dpb access flag is -1, rebuild bpb.
   250                              <1> ;Else assume here access flag is 0. If medret is neq 0, return. Else, 
   251                              <1> ; check buffers.
   252 00007568 0A630E              <1>     or ah, byte [rbx + mediaCheckReqPkt.medret] ;Carry flag always cleared!
   253 0000756B 7823                <1>     js .mediaChanged      ;If either byte is -1, media changed
   254                              <1>     retnz                       ;If not zero, we return. Media not changed!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000756D 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000756F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   255                              <1> ;Here we check for any dirty buffers. If dirty buffer found, dont get new BPB.
   256 00007570 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   257                              <1> .findDirtyBuffer:
   258 00007577 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;Is buffer for us?
   259 0000757A 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   260 0000757C F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is buffer dirty?
   261 00007580 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   262 00007582 F8                  <1>     clc 
   263                              <1>     return
    13                              <2> %%_ret:
    14 00007583 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   264                              <1> .gotoNextBuffer:
   265 00007584 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   266 00007587 4881FFFFFFFFFF      <1>     cmp rdi, -1
   267 0000758E 75E7                <1>     jne .findDirtyBuffer        ;Now check the next buffer
   268                              <1> ;If we found no dirty buffers for this drive we assume the media has changed.
   269                              <1> ;Don't skip the below as it will put a "clean" buffer at the head
   270                              <1> ; of the chain for us.
   271                              <1> .mediaChanged:
   272                              <1> ;If we have changed media, check for dirty buffers. If we have any
   273                              <1> ; we must throw an error to tell the user to replace the media back.
   274                              <1> ;Now use the reference bit to keep track of which buffers we've gone through.
   275 00007590 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset number of free to unknown
   276 00007597 E8CF91FFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   277                              <1> .dirtyLoop:
   278 0000759C 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   279 000075A0 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   280 000075A3 7515                <1>     jne .skipDirtyCheck
   281 000075A5 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   282 000075A9 0F85A6000000        <1>     jnz .dirtyBufferError   ;Signal bad disk change if so!
   283                              <1> ;Set reference bit and drive to free
   284 000075AF 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   285 000075B5 E8CB91FFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   286                              <1> .skipDirtyCheck:
   287 000075BA E8D491FFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   288 000075BF 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   289                              <1> .resetDPB:
   290                              <1> ;Start by checking if the MSD is ``IBM" style or normal
   291 000075C1 488B7D1B            <1>     mov rdi, qword [rbp + dpb.qDriverHeaderPtr]
   292 000075C5 66F747080020        <1>     test word [rdi + drvHdr.attrib], devDrvNotIBM
   293 000075CB 7512                <1>     jnz .dpbNotIbm
   294                              <1> ;Read the FAT into buffer
   295 000075CD B801000000          <1>     mov eax, 1              ;Read sector 1 into a buffer
   296 000075D2 E8AD94FFFF          <1>     call getBufForFat       ;Point rbx to the buffer
   297                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000075D7 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000075D9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   298 000075DA 4889DF              <1>     mov rdi, rbx
   299 000075DD EB0F                <1>     jmp short .buildGetBPB              
   300                              <1> .dpbNotIbm:
   301                              <1> ;Get a buffer for the driver to use as scratch space
   302 000075DF 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   303 000075E6 E84692FFFF          <1>     call flushAndFreeBuffer
   304                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000075EB 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000075ED C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   305                              <1> .buildGetBPB:
   306 000075EE E823010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   307 000075F3 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   308 000075F7 E85DFDFFFF          <1>     call goDriver   ;Request!
   309 000075FC 0FB77B03            <1>     movzx edi, word [rbx + bpbBuildReqPkt.status]
   310 00007600 F7C700800000        <1>     test edi, drvErrStatus
   311 00007606 751D                <1>     jnz .diskDrvCritErr
   312                              <1>     ;Now rebuild the dpb fields for this drive
   313 00007608 488B7316            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bpbptr]    ;Get ptr to BPB
   314 0000760C 53                  <1>     push rbx
   315 0000760D E8E9090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   316 00007612 5B                  <1>     pop rbx
   317                              <1>     ;Adjust the buffer header information
   318 00007613 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   319 00007616 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   320 00007619 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   321 0000761C 884312              <1>     mov byte [rbx + bufferHdr.bufFATcopy], al
   322 0000761F 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   323 00007621 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   324                              <1>     return
    13                              <2> %%_ret:
    14 00007624 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> .diskDrvCritErr:
   326                              <1> ;Critical Errors fall through here
   327                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   328 00007625 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset freecluster count
   329 0000762C 48892D(C2070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   330                              <1>     ;mov ah, critRead | critFAT | critFailOK | critRetryOK
   331 00007633 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK
   332 00007635 8825(92040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   333 0000763B 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   334 0000763F E86FF7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   335 00007644 488B2D(C2070000)    <1>     mov rbp, qword [tmpDPBPtr]
   336 0000764B 3C01                <1>     cmp al, critRetry
   337 0000764D 0F84D9FEFFFF        <1>     je ensureDiskValid
   338                              <1> .errorExitBad:
   339 00007653 F9                  <1>     stc     ;Set error flag to indicate fail
   340                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 00007654 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> .dirtyBufferError:
   343                              <1> ;We can only enter this error if we returned media changed.
   344                              <1> ;We will never enter here if we returned media unknown.
   345 00007655 55                  <1>     push rbp
   346 00007656 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   347 0000765A 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvOpClRem
   348 00007660 5D                  <1>     pop rbp
   349 00007661 7429                <1>     jz .dbeExit     ;Just return Invalid Disk Swap if bit not set
   350                              <1> ;rbp points to the dpb still
   351 00007663 57                  <1>     push rdi
   352 00007664 488B3D(FA040000)    <1>     mov rdi, qword [primReqPkt + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   353 0000766B 48893D(37040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   354 00007672 5F                  <1>     pop rdi ;Get back the buffer pointer
   355 00007673 C605(92040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   356                              <1> ;Do not touch the read/write flag as this is set by the read/write operation.
   357                              <1> ;It is meaningless in the error here, but may affect the message
   358                              <1> ; that comes up on the handler (not a big deal). Since we report a bad
   359                              <1> ; media change here, it should be obvious not to include the read/write 
   360                              <1> ; string.
   361 0000767A B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   362 0000767F E8C5F6FFFF          <1>     call diskDevErr
   363 00007684 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   364 00007686 0F85A0FEFFFF        <1>     jne ensureDiskValid  ;If not, try again!
   365                              <1> .dbeExit:
   366 0000768C B822000000          <1>     mov eax, errIDC     ;Else, report an invalid disk swap error!
   367 00007691 E9BDFFFFFF          <1>     jmp .errorExitBad    ;and exit with CF set (often gets xlat to accden)
   368                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   369                              <1> ;           Primitive Driver Requests
   370                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   371                              <1> ;First are Disk requests, then Char device requests
   372                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   373                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   374                              <1> 
   375                              <1> primReqWriteSetup:
   376 00007696 50                  <1>     push rax
   377 00007697 B408                <1>     mov ah, drvWRITE    ;Command code
   378 00007699 0225(F8030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   379 0000769F EB03                <1>     jmp short primReqRWCommon
   380                              <1> primReqReadSetup:
   381 000076A1 50                  <1>     push rax
   382 000076A2 B404                <1>     mov ah, drvREAD
   383                              <1> primReqRWCommon:
   384                              <1> ;Sets up the IO request packet with:
   385                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   386                              <1> ; rbx = Data storage buffer ptr
   387                              <1> ; ecx = Number of sectors to transfer
   388                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   389                              <1> ; ~~~~ Set by entry function ~~~~ 
   390                              <1> ; ah = Command code
   391                              <1> ; All regs preserved EXCEPT rbx.
   392                              <1> ; Return: rbx = Transfer Address
   393 000076A4 48891D(F9040000)    <1>     mov qword [primReqPkt + ioReqPkt.bufptr], rbx   ;Buffer
   394 000076AB 890D(01050000)      <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   395 000076B1 C605(EB040000)2A    <1>     mov byte [primReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   396 000076B8 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   397 000076BD 8905(EC040000)      <1>     mov dword [primReqPkt + ioReqPkt.unitnm], eax   ;Clear unit number field
   398 000076C3 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   399 000076C6 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   400                              <1>     ;Disk operations only here!
   401 000076C8 488915(05050000)    <1>     mov qword [primReqPkt + ioReqPkt.strtsc], rdx   ;Start sector
   402 000076CF 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   403 000076D2 8805(F8040000)      <1>     mov byte [primReqPkt + ioReqPkt.medesc], al ;Store medesc!
   404 000076D8 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   405 000076DB 8805(EC040000)      <1>     mov byte [primReqPkt + ioReqPkt.unitnm], al ;Store the unit number
   406                              <1> primReqCommonExit:
   407                              <1> ;Returns in rbx the primary request header as these functions
   408                              <1> ; setup the request in the primary request header space
   409 000076E1 58                  <1>     pop rax
   410 000076E2 488D1D(EB040000)    <1>     lea rbx, primReqPkt ;Put in rbx the primary request header
   411                              <1>     return
    13                              <2> %%_ret:
    14 000076E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> primReqMedCheckSetup:
   414                              <1> ;Prepare the diskIO packet for mediacheck
   415                              <1> ;rbp has DPB pointer for device to check media on
   416 000076EA 50                  <1>     push rax
   417 000076EB C605(EB040000)17    <1>     mov byte [primReqPkt + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   418 000076F2 C605(ED040000)01    <1>     mov byte [primReqPkt + mediaCheckReqPkt.cmdcde], drvMEDCHK
   419                              <1> .cmn:
   420 000076F9 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   421 000076FC 8805(F8040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.medesc], al
   422 00007702 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   423 00007705 8805(EC040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.unitnm], al
   424 0000770B 66C705(EE040000)00- <1>     mov word [primReqPkt + mediaCheckReqPkt.status], 0
   424 00007713 00                  <1>
   425 00007714 EBCB                <1>     jmp short primReqCommonExit
   426                              <1> 
   427                              <1> primReqGetBPBSetup:
   428                              <1> ;rbp has DPB pointer for device
   429                              <1> ;rdi has sector buffer header pointer for transfer
   430 00007716 50                  <1>     push rax
   431 00007717 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   432 0000771B 488905(F9040000)    <1>     mov qword [primReqPkt + bpbBuildReqPkt.bufptr], rax
   433 00007722 C605(EB040000)1E    <1>     mov byte [primReqPkt + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   434 00007729 C605(ED040000)02    <1>     mov byte [primReqPkt + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   435 00007730 EBC7                <1>     jmp short primReqMedCheckSetup.cmn
   436                              <1> 
   437                              <1> primReqOpenSetup:
   438                              <1> ;al = unit number if a disk device. Undefined otherwise
   439 00007732 50                  <1>     push rax
   440 00007733 B40D                <1>     mov ah, drvOPEN
   441 00007735 EB03                <1>     jmp short primReqOCcommon
   442                              <1> primReqCloseSetup:
   443                              <1> ;al = unit number if a disk device. Undefined otherwise
   444 00007737 50                  <1>     push rax
   445 00007738 B40E                <1>     mov ah, drvCLOSE
   446                              <1> primReqOCcommon:
   447 0000773A C605(EB040000)0D    <1>     mov byte [primReqPkt + openReqPkt.hdrlen], openReqPkt_size
   448 00007741 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   449 00007742 8905(EC040000)      <1>     mov dword [primReqPkt + openReqPkt.unitnm], eax
   450                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   451 00007748 E994FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   452                              <1> 
   453                              <1> secdReqCharIOReq:
   454                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   455                              <1> ;Input:
   456                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   457                              <1> ; ecx = Length of buffer
   458                              <1> ; rdi = Buffer pointer
   459                              <1> ;Output: 
   460                              <1> ; rbx = Transfer Address 
   461 0000774D 488D1D(C1040000)    <1>     lea rbx, secdReqPkt
   462 00007754 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   463 00007757 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   464 0000775A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   465 00007760 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   466 00007764 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   467                              <1>     return
    13                              <2> %%_ret:
    14 00007767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> ;If the device which will process this request is a disk device
   469                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   470                              <1> ;Then we will read the appropriate byte from that buffer to the 
   471                              <1> ; singleIOByt buffer.
   472                              <1> ;Such a request will require additional setup with the following fields:
   473                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    52                                  %include "./src/Kernel/Core/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00007768 48892D(33070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 0000776F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00007770 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]
    21 00007777 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 0000777E 7409                <1>     je .net
    23 00007780 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00007786 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00007788 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00007789 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 0000778A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 0000778B E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00007790 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00007792 B80C110000          <1>     mov eax, 110Ch 
    43 00007797 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00007799 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 0000779A C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 000077A1 E8F1040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 000077A6 E820FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 000077AB 7223                <1>     jc .exit
    51 000077AD E8B494FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 000077B2 721C                <1>     jc .exit
    53 000077B4 55                  <1>     push rbp
    54 000077B5 E8F68FFFFF          <1>     call flushAllBuffersForDPB  ;To ensure FAT32 FSInfo sectors synced
    55 000077BA 5D                  <1>     pop rbp
    56 000077BB 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    57 000077BE FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    58 000077C0 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    59 000077C3 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr] ;This is the max cluster address
    60 000077C6 FFCB                <1>     dec ebx ;Get the number of clusters
    61 000077C8 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    62 000077CC 8B5531              <1>     mov edx, dword [rbp + dpb.dFreeClustCnt]    ;Get # free clusters
    63 000077CF F8                  <1>     clc
    64                              <1> .exit:
    65 000077D0 E8CC040000          <1>     call dosCrit1Exit
    66                              <1>     return
    13                              <2> %%_ret:
    14 000077D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    69                              <1> ;Input: al = Interrupt number
    70                              <1> ;Output: rbx = Interrupt Vector
    71 000077D6 50                  <1>     push rax    ;Preserve rax
    72 000077D7 FA                  <1>     cli ;Halt interrupts
    73 000077D8 0F010D(571A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    74 000077DF 0FB6C0              <1>     movzx eax, al
    75 000077E2 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    76 000077E6 480305(591A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    77 000077ED 31DB                <1>     xor ebx, ebx
    78 000077EF 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    79 000077F2 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    80 000077F6 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    81 000077FA 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    82 000077FE 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    83 00007801 FB                  <1>     sti
    84 00007802 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 00007803 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    88                              <1> ;Returns ptr to user regs in rsi
    89 00007804 488B35(A5040000)    <1>     mov rsi, qword [oldRSP]
    90                              <1>     return
    13                              <2> %%_ret:
    14 0000780B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> walkDPBchain:
    93                              <1> ;Called with al = 0 based drive number
    94                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    95 0000780C 488B35(3B000000)    <1>     mov rsi, qword [dpbHeadPtr]  ;Get variable pointing to first DPB
    96                              <1> .walk:
    97 00007813 4881FEFFFFFFFF      <1>     cmp rsi, -1
    98 0000781A 740A                <1>     je .exitBad
    99 0000781C 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   100 0000781E 7407                <1>     je .exit    ;Drive found
   101 00007820 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   102 00007824 EBED                <1>     jmp short .walk
   103                              <1> .exitBad:
   104 00007826 F9                  <1>     stc
   105                              <1> .exit:
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007827 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> getCDSNotJoin:   
   108                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   109                              <1> ;Input: al = 1-based drive number
   110                              <1> ;Output: al = 0-based drive number
   111                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   112                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   113                              <1> ;            set.
   114 00007828 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   115 0000782D 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   116 0000782F 56                  <1>     push rsi
   117 00007830 488B35(3B070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   118 00007837 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   119 0000783D 5E                  <1>     pop rsi
   120 0000783E 7401                <1>     jz .exit
   121 00007840 F9                  <1>     stc
   122                              <1> .exit:
   123                              <1>     return
    13                              <2> %%_ret:
    14 00007841 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   126                              <1> ;If used with SDA CDS allows for direct disk access without needing to 
   127                              <1> ; actually use the real CDS. This prevents troubles when findnext on a 
   128                              <1> ; drive occurs the real CDS itself may have completely changed, i.e. 
   129                              <1> ; become unavailable. The SDA CDS becomes like the protoCDS of DOS 2 
   130                              <1> ; that was just an appendix of the DPB. Otherwise, can be used to init
   131                              <1> ; a new CDS or even a new complete CDS array!
   132                              <1> ;Input: al = Drive Letter for drive
   133                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   134                              <1> ;Output: rdi = newly filled in workingCDS
   135                              <1> ;CF=NC => CDS valid and has a DPB
   136                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   137 00007842 50                  <1>     push rax
   138 00007843 2C40                <1>     sub al, "A"-1
   139 00007845 3805(77000000)      <1>     cmp byte [numPhysVol], al    ;al must be bigger than # of block drives
   140 0000784B 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   141 00007852 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   142 00007858 58                  <1>     pop rax
   143 00007859 723C                <1>     jb .exit    ;Exit with CF=CY
   144 0000785B 50                  <1>     push rax
   145 0000785C 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   146 00007861 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   147 00007863 58                  <1>     pop rax
   148 00007864 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   149 0000786A C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   150 00007871 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   151 00007879 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   152 00007880 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   153                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   154 00007886 50                  <1>     push rax
   155 00007887 56                  <1>     push rsi
   156 00007888 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   157 0000788A E87DFFFFFF          <1>     call walkDPBchain
   158 0000788F 7204                <1>     jb .skipSettingDPB
   159 00007891 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   160                              <1> .skipSettingDPB:
   161 00007895 5E                  <1>     pop rsi
   162 00007896 58                  <1>     pop rax
   163                              <1> .exit:
   164                              <1>     return
    13                              <2> %%_ret:
    14 00007897 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> getCDS:     ;Int 2Fh AX=1219h
   167                              <1> ;Gets the device DPB and saves it in the DOS variable
   168                              <1> ;This can be called to get CDS for network drives too!
   169                              <1> ;Input: al = 1 based drive number
   170                              <1> ;Sets workingCDS var with the CDS for the device. 
   171                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   172 00007898 84C0                <1>     test al, al
   173 0000789A 7508                <1>     jnz .skip
   174 0000789C 8A05(59040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   175 000078A2 FEC0                <1>     inc al
   176                              <1> .skip:
   177 000078A4 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   178 000078A6 56                  <1>     push rsi
   179 000078A7 C605(32040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   180 000078AE F605(2B070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   181 000078B5 7423                <1>     jz .localCall
   182                              <1>     ;Invokation via 21/5D00
   183 000078B7 50                  <1>     push rax
   184 000078B8 57                  <1>     push rdi
   185 000078B9 488D3D(A4060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   186 000078C0 48893D(3B070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   187 000078C7 0441                <1>     add al, "A" ;Convert to a drive letter
   188 000078C9 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   189 000078CE 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   190 000078D4 5F                  <1>     pop rdi
   191 000078D5 58                  <1>     pop rax
   192 000078D6 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   193 000078D8 EB17                <1>     jmp short .exitOk   ;All oki
   194                              <1> .localCall:
   195 000078DA E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   196 000078DF 7208                <1>     jc .exitBad
   197 000078E1 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   198 000078E7 7508                <1>     jnz .exitOk ;Exit with flag cleared
   199                              <1>     ;Else Return to unknown error locus
   200                              <1> .exitBad:
   201 000078E9 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   202                              <1> .exitBad1:
   203 000078F0 F9                  <1>     stc
   204                              <1> .exitOk:
   205 000078F1 5E                  <1>     pop rsi
   206                              <1>     return
    13                              <2> %%_ret:
    14 000078F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   209                              <1>     ;Gets the CDS for the current drive in al
   210                              <1>     ;Input: al = Drive number, 0 = A ...
   211                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   212                              <1>     ;        CF=CY => al not valid
   213 000078F3 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   214 000078F9 7202                <1>     jb .ctn
   215 000078FB F9                  <1>     stc 
   216                              <1>     return
    13                              <2> %%_ret:
    14 000078FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> .ctn:
   218 000078FD 50                  <1>     push rax
   219 000078FE 52                  <1>     push rdx
   220 000078FF 0FB6C0              <1>     movzx eax, al
   221 00007902 48BE5F000000000000- <1>     mov rsi, cds_size
   221 0000790B 00                  <1>
   222 0000790C 31D2                <1>     xor edx, edx
   223 0000790E F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   224 00007910 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   225 00007917 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   226 0000791A 488935(3B070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   227 00007921 5A                  <1>     pop rdx
   228 00007922 58                  <1>     pop rax
   229 00007923 F8                  <1>     clc
   230                              <1>     return
    13                              <2> %%_ret:
    14 00007924 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> 
   233                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   234                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   235                              <1> ;Input: AL = Char to normalise.
   236                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   237                              <1> ;If path separator, set ZF=ZE
   238 00007925 3C5C                <1>     cmp al, "\"
   239 00007927 7406                <1>     je .exit
   240 00007929 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   241 0000792B 7502                <1>     jne .exit
   242 0000792D B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 0000792F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> uppercaseCharAtPtr:
   247                              <1> ;Get the char pointed to by rsi and then fall
   248 00007930 AC                  <1>     lodsb
   249                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   250                              <1> ;Convert a lowercase char to uppercase using file UC table
   251                              <1> ; Leave alone uppercase chars and invalid chars
   252                              <1> ;Input: al = Char to convert to uppercase
   253                              <1> ;Output: al = Processed char
   254 00007931 53                  <1>     push rbx
   255 00007932 488D1DEB89FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   256                              <1> uppercaseCharWithTable:
   257                              <1> ;Convert a lowercase char to uppercase char using a table as provided
   258                              <1> ;Input: al = Char to convert to uppercase
   259                              <1> ;       rbx -> Table to use for translation
   260                              <1> ;Output: al = Processed char
   261                              <1> ;WARNING: 
   262                              <1> ;   RBX MUST BE PUSHED ONTO THE STACK BEFORE ENTERING THIS PROCEDURE!
   263 00007939 3C61                <1>     cmp al, "a"
   264 0000793B 720D                <1>     jb .exit
   265 0000793D 3C7A                <1>     cmp al, "z"
   266 0000793F 7702                <1>     ja .checkExt
   267 00007941 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   268                              <1> .checkExt:
   269 00007943 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   270 00007945 7203                <1>     jb .exit
   271 00007947 2C80                <1>     sub al, 80h ;Turn into table offset
   272 00007949 D7                  <1>     xlatb   ;Get translated extended byte into al
   273                              <1> .exit:
   274 0000794A 50                  <1>     push rax    ;Save al temporarily
   275 0000794B 488D1D8C8BFFFF      <1>     lea rbx, asciiCharProperties
   276 00007952 D7                  <1>     xlatb   ;Get the signature in al
   277 00007953 A801                <1>     test al, badChar
   278 00007955 58                  <1>     pop rax
   279 00007956 5B                  <1>     pop rbx
   280                              <1>     return
    13                              <2> %%_ret:
    14 00007957 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> isCharTerminator:
   283                              <1> ;Input: al = Char to check properties of
   284                              <1> ;Output:    ZF=NZ => Char not name terminator
   285                              <1> ;           ZF=ZE => Char terminator
   286 00007958 50                  <1>     push rax
   287 00007959 53                  <1>     push rbx
   288 0000795A 488D1D7D8BFFFF      <1>     lea rbx, asciiCharProperties
   289 00007961 D7                  <1>     xlatb
   290 00007962 A802                <1>     test al, termChar
   291 00007964 5B                  <1>     pop rbx
   292 00007965 58                  <1>     pop rax
   293                              <1>     return
    13                              <2> %%_ret:
    14 00007966 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> isCharSeparator:
   296                              <1> ;Input: al = Char to check properties of
   297                              <1> ;Output:    ZF=NZ => Char not separator
   298                              <1> ;           ZF=ZE => Char separator
   299 00007967 50                  <1>     push rax
   300 00007968 53                  <1>     push rbx
   301 00007969 488D1D6E8BFFFF      <1>     lea rbx, asciiCharProperties
   302 00007970 D7                  <1>     xlatb
   303 00007971 A804                <1>     test al, sepChar
   304 00007973 5B                  <1>     pop rbx
   305 00007974 58                  <1>     pop rax
   306                              <1>     return
    13                              <2> %%_ret:
    14 00007975 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   307                              <1> 
   308                              <1> strlen2:    ;Int 2Fh, AX=1212h
   309                              <1> ;Entry point for Multiplex
   310 00007976 57                  <1>     push rdi
   311 00007977 4889F7              <1>     mov rdi, rsi
   312 0000797A E802000000          <1>     call strlen
   313 0000797F 5F                  <1>     pop rdi
   314                              <1>     return
    13                              <2> %%_ret:
    14 00007980 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> strlen: 
   316                              <1> ;Gets the length of a ASCIIZ string
   317                              <1> ;Input: rdi = Source buffer
   318                              <1> ;Output: ecx = Length of string
   319 00007981 50                  <1>     push rax
   320 00007982 57                  <1>     push rdi
   321 00007983 30C0                <1>     xor al, al
   322 00007985 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   323 00007987 FFC9                <1>     dec ecx ;rcx = -1
   324 00007989 F2AE                <1>     repne scasb
   325 0000798B F7D1                <1>     not ecx
   326 0000798D 5F                  <1>     pop rdi
   327 0000798E 58                  <1>     pop rax
   328                              <1>     return
    13                              <2> %%_ret:
    14 0000798F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> strcpy:
   331                              <1> ;Copies a null terminated string from rsi to rdi
   332 00007990 AC                  <1>     lodsb
   333 00007991 AA                  <1>     stosb
   334 00007992 84C0                <1>     test al, al
   335                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007994 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007996 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   336 00007997 EBF7                <1>     jmp short strcpy
   337                              <1> 
   338                              <1> strcmp:
   339                              <1> ;Compares two ASCIIZ strings for equality.
   340                              <1> ;Input: rsi = First string
   341                              <1> ;       rdi = Second string
   342                              <1> ;       ecx = Number of bytes to compare
   343                              <1> ;Output: ZF=ZE => Equal
   344                              <1> ;        ZF=NZ => Not equal
   345 00007999 56                  <1>     push rsi
   346 0000799A 57                  <1>     push rdi
   347 0000799B F3A6                <1>     repe cmpsb
   348 0000799D 5F                  <1>     pop rdi
   349 0000799E 5E                  <1>     pop rsi
   350                              <1>     return
    13                              <2> %%_ret:
    14 0000799F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> 
   353                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   354                              <1> ;Converts lowercase to uppercase and / to "\"
   355                              <1> ;Input: rsi = Source buffer
   356                              <1> ;       rdi = Buffer to place normalised path
   357 000079A0 50                  <1>     push rax
   358 000079A1 56                  <1>     push rsi
   359 000079A2 57                  <1>     push rdi
   360                              <1> .scan:
   361 000079A3 AC                  <1>     lodsb
   362 000079A4 84C0                <1>     test al, al
   363 000079A6 740D                <1>     jz .exit
   364 000079A8 E878FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   365 000079AD E87FFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   366 000079B2 AA                  <1>     stosb
   367 000079B3 EBEE                <1>     jmp short .scan
   368                              <1> .exit:
   369 000079B5 5F                  <1>     pop rdi
   370 000079B6 5E                  <1>     pop rsi
   371 000079B7 58                  <1>     pop rax
   372                              <1>     return
    13                              <2> %%_ret:
    14 000079B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   375                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   376                              <1> ;Input: rsi = One ASCIIZ pathname
   377                              <1> ;       rdi = Second ASCIIZ pathname
   378                              <1> ;Return:
   379                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   380 000079B9 50                  <1>     push rax
   381 000079BA 56                  <1>     push rsi
   382 000079BB 57                  <1>     push rdi
   383                              <1> .scan:
   384 000079BC AC                  <1>     lodsb
   385 000079BD E818000000          <1>     call .normaliseChar
   386 000079C2 88C4                <1>     mov ah, al  ;Save normalised char in ah
   387 000079C4 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   388 000079C6 48FFC7              <1>     inc rdi ;And goto next char
   389 000079C9 E80C000000          <1>     call .normaliseChar
   390 000079CE 38E0                <1>     cmp al, ah  ;Are they equal?
   391 000079D0 7504                <1>     jne .exit   ;If not equal, exit
   392 000079D2 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   393 000079D4 75E6                <1>     jnz .scan
   394                              <1> .exit:
   395 000079D6 5F                  <1>     pop rdi
   396 000079D7 5E                  <1>     pop rsi
   397 000079D8 58                  <1>     pop rax
   398                              <1>     return
    13                              <2> %%_ret:
    14 000079D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> .normaliseChar:
   400 000079DA E852FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   401 000079DF E841FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   402                              <1>     return
    13                              <2> %%_ret:
    14 000079E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   403                              <1> checkPathspecOK:
   404                              <1> ;Input:
   405                              <1> ;rsi -> points to a path to verify if it is ok.
   406                              <1> ;Output:
   407                              <1> ;CF=NC => The path is totally clean and ok to use.
   408                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   409                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   410                              <1> ; and depending on method of invokation and caller, may be permissable.
   411                              <1> ;We accept lc and uc characters in this check function.
   412 000079E5 50                  <1>     push rax
   413 000079E6 53                  <1>     push rbx    ;Use rbx as the return flag status
   414 000079E7 56                  <1>     push rsi
   415 000079E8 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   416                              <1>     ;Start by getting the length of the ASCIIZ string.
   417 000079EA 51                  <1>     push rcx
   418 000079EB 57                  <1>     push rdi
   419 000079EC 4889F7              <1>     mov rdi, rsi
   420 000079EF E88DFFFFFF          <1>     call strlen
   421 000079F4 89C8                <1>     mov eax, ecx    ;Save the length in eax
   422 000079F6 5F                  <1>     pop rdi
   423 000079F7 59                  <1>     pop rcx
   424 000079F8 3D40000000          <1>     cmp eax, MAX_FSPEC    ;Check
   425 000079FD 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   426 00007A03 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   427 00007A05 0F848A000000        <1>     jz .badExit
   428                              <1>     ;First we verify if our path is relative or canonical (absolute)
   429 00007A0B 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   430 00007A0E 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   431 00007A12 7416                <1>     je .netName
   432 00007A14 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   433 00007A18 7410                <1>     je .netName
   434 00007A1A 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   435 00007A1D 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   436                              <1>     ;Here if relative
   437 00007A1F F605(2B070000)FF    <1>     test byte [dosInvoke], -1
   438 00007A26 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   439 00007A28 EB3B                <1>     jmp short .okToScan
   440                              <1> .netName:
   441 00007A2A 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   442 00007A31 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   443 00007A34 745F                <1>     je .badExit
   444 00007A36 EB2D                <1>     jmp short .okToScan
   445                              <1> .diskPath:
   446 00007A38 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   447 00007A3F 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   448 00007A42 7451                <1>     je .badExit
   449 00007A44 F605(2B070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   450 00007A4B 740F                <1>     jz .localAbsCheck
   451                              <1> .absMain:
   452 00007A4D AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   453 00007A4E E8D2FEFFFF          <1>     call swapPathSeparator
   454 00007A53 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   455 00007A55 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   456 00007A58 743B                <1>     je .badExit ;Error if so!
   457 00007A5A EB09                <1>     jmp short .okToScan
   458                              <1> .localAbsCheck:
   459 00007A5C 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   460 00007A5E E8C2FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   461 00007A63 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   462                              <1>     ;Else we are relative and begin wildcard search
   463                              <1> .okToScan:
   464 00007A65 AC                  <1>     lodsb   
   465 00007A66 84C0                <1>     test al, al ;End of path char?
   466 00007A68 7430                <1>     jz .exit
   467 00007A6A E8B6FEFFFF          <1>     call swapPathSeparator
   468 00007A6F 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   469 00007A71 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   470 00007A73 7411                <1>     je .wcFound
   471 00007A75 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   472 00007A77 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   473                              <1>     ;Else we check that the char in al is an acceptable char
   474 00007A79 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   475 00007A7B 74E8                <1>     je .okToScan
   476 00007A7D E831000000          <1>     call checkCharValid
   477 00007A82 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   478 00007A84 EBDF                <1>     jmp short .okToScan
   479                              <1> .wcFound:
   480 00007A86 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   481 00007A8B EBD8                <1>     jmp short .okToScan
   482                              <1> .wcCheck:
   483                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   484 00007A8D F7C340000000        <1>     test ebx, 40h
   485 00007A93 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   486                              <1>     ;Else fall through in error
   487                              <1> .badExit:
   488 00007A95 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   489                              <1> .exit:
   490 00007A9A 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   491 00007A9B 9D                  <1>     popfq
   492 00007A9C 5E                  <1>     pop rsi
   493 00007A9D 5B                  <1>     pop rbx
   494 00007A9E 58                  <1>     pop rax
   495                              <1>     return
    13                              <2> %%_ret:
    14 00007A9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> scanPathWC:
   498                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   499                              <1> ; even in the final path componant.
   500                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   501                              <1> ;Output: CF=NC => No wildcards present
   502                              <1> ;        CF=CY => Wildcards found
   503 00007AA0 50                  <1>     push rax
   504 00007AA1 56                  <1>     push rsi
   505                              <1> .scan:
   506 00007AA2 AC                  <1>     lodsb
   507 00007AA3 84C0                <1>     test al, al
   508 00007AA5 7409                <1>     jz .exit
   509 00007AA7 3C3F                <1>     cmp al, "?"
   510 00007AA9 7404                <1>     je .wcFnd
   511 00007AAB 3C2A                <1>     cmp al, "*"
   512 00007AAD 75F3                <1>     jne .scan
   513                              <1> .wcFnd:
   514 00007AAF F9                  <1>     stc
   515                              <1> .exit:
   516 00007AB0 5E                  <1>     pop rsi
   517 00007AB1 58                  <1>     pop rax
   518                              <1>     return
    13                              <2> %%_ret:
    14 00007AB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> checkCharValid:
   521                              <1> ;If ZF=ZE => Invalid Char
   522                              <1> ;If ZF=NZ => Valid Char
   523 00007AB3 50                  <1>     push rax
   524 00007AB4 E878FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   525 00007AB9 58                  <1>     pop rax
   526                              <1>     return
    13                              <2> %%_ret:
    14 00007ABA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> 
   529                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   530                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   531                              <1> ;Input: rsi = One pointer
   532                              <1> ;       rdi = Second pointer
   533                              <1> ;Output: ZF=ZE if equal
   534                              <1> ;        ZF=NZ if not
   535 00007ABB 4839FE              <1>     cmp rsi, rdi
   536                              <1>     return
    13                              <2> %%_ret:
    14 00007ABE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> checkPathNet:
   539                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   540                              <1> ;Output: ZF=ZE => Path is a net path
   541                              <1> ;        ZF=NZ => Path is not a net path
   542 00007ABF 50                  <1>     push rax
   543 00007AC0 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   544 00007AC3 E85DFEFFFF          <1>     call swapPathSeparator
   545 00007AC8 7507                <1>     jnz .exit
   546 00007ACA 88E0                <1>     mov al, ah  ;Get the second char
   547 00007ACC E854FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   548                              <1> .exit:
   549 00007AD1 58                  <1>     pop rax
   550                              <1>     return
    13                              <2> %%_ret:
    14 00007AD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> getCharDevDriverPtr:
   553                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   554                              <1> ;Input: rax = Device Driver name (space padded)
   555                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   556 00007AD3 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   557                              <1> .lp:
   558 00007ADA 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   559                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007ADE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007AE0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   560 00007AE1 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   561 00007AE4 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   562 00007AEB 75ED                <1>     jne .lp ;If not loop
   563 00007AED F9                  <1>     stc ;Else bad exit
   564                              <1>     return
    13                              <2> %%_ret:
    14 00007AEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   567                              <1> ;Pointer to the first non-null device driver in the chain.
   568                              <1> ;Returns the value in rax only
   569 00007AEF 488D05(7A000000)    <1>     lea rax, nulDevHdr
   570 00007AF6 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   571                              <1>     return
    13                              <2> %%_ret:
    14 00007AF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   574                              <1> ;Gets the extended error code in ax and returns
   575 00007AFA 668B05(33040000)    <1>     mov ax, word [errorExCde]
   576                              <1>     return
    13                              <2> %%_ret:
    14 00007B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  %include "./src/Kernel/Core/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1> %if DEBUG && HEADERS
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1> %endif
    18 00007B02 FA                  <1>     cli ;Halt external interrupts
    19 00007B03 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 00007B04 80FC6D              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 00007B07 0F8358010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1> ;Cherry pick quick functions
    23 00007B0D 80FC33              <1>     cmp ah, 33h
    24 00007B10 0F848B020000        <1>     je cbcQuick
    25 00007B16 7226                <1>     jb .fsbegin
    26 00007B18 80FC64              <1>     cmp ah, 64h
    27 00007B1B 0F840B030000        <1>     je sdlQuick  
    28 00007B21 771B                <1>     ja .fsbegin             ;If above, do usual Int21 entry
    29 00007B23 80FC51              <1>     cmp ah, 51h
    30 00007B26 0F84E2020000        <1>     je gcpspQuick           ;This and below are exactly the same
    31 00007B2C 80FC62              <1>     cmp ah, 62h
    32 00007B2F 0F84D9020000        <1>     je gcpspQuick           ;Calls the above function
    33 00007B35 80FC50              <1>     cmp ah, 50h
    34 00007B38 0F84C1020000        <1>     je scpspQuick
    35                              <1> .fsbegin:
    36 00007B3E E83D010000          <1>     call dosPushRegs ;Push the usual prologue registers
    37 00007B43 48891D(AD040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    38 00007B4A C705(6B040000)0000- <1>     mov dword [dReqNetID], 0 ;Identify this as a local operation!
    38 00007B52 0000                <1>
    39 00007B54 488B05(A5040000)    <1>     mov rax, qword [oldRSP]
    40 00007B5B 488905(95040000)    <1>     mov qword [oldoldRSP], rax
    41 00007B62 FE05(30040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    42 00007B68 488925(A5040000)    <1>     mov qword [oldRSP], rsp
    43                              <1> ;Network related variable resetting
    44 00007B6F C605(2B070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    45                              <1> ;Here, we want to save oldRSP in the callers PSP
    46 00007B76 488B05(47040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    47 00007B7D 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    48 00007B81 58                  <1>     pop rax     ;Get old rax back
    49 00007B82 50                  <1>     push rax    ;and push it back onto the stack
    50                              <1> .charFun0CEP:
    51                              <1> .serverEP:
    52 00007B83 488D25(400D0000)    <1>     lea rsp, critStakTop
    53 00007B8A FB                  <1>     sti         ;Reenable interrupts
    54                              <1> 
    55 00007B8B 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    56 00007B8D 881D(BE040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    57 00007B93 C605(BF040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    58 00007B9A 881D(94040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    59 00007BA0 881D(B5040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    60 00007BA6 66891D(B2070000)    <1>     mov word [wEOFlags], bx ;Reset every entry. Sets to skip reentry in i24h
    61                              <1> 
    62 00007BAD 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    63 00007BAE 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    64 00007BB0 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    65 00007BB2 488D05258AFFFF      <1>     lea rax, kDispTbl
    66 00007BB9 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    67 00007BBC 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    68 00007BC0 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    69 00007BC3 58                  <1>     pop rax
    70                              <1> 
    71 00007BC4 84E4                <1>     test ah, ah     ;Simple Terminate function?
    72 00007BC6 741C                <1>     jz .fddiskOp
    73 00007BC8 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    74 00007BCB 7465                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    75 00007BCD 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    76 00007BD0 7712                <1>     ja .fddiskOp
    77                              <1> ;Char operations here
    78 00007BD2 F605(2F040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    79 00007BD9 7557                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    80 00007BDB 488D25(D8130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    81 00007BE2 EB4E                <1>     jmp short .fdGoToFunction
    82                              <1> .fddiskOp:
    83                              <1>     ;Disk operations go here
    84                              <1>     ;Save rax on entry to a disk funciton
    85 00007BE4 488905(5B040000)    <1>     mov qword [oldRAX], rax
    86                              <1>     ;Clear up error info
    87 00007BEB C605(32040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    88 00007BF2 C605(2F040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    89 00007BF9 C605(31040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    90                              <1> ;Default delchar UNLESS a function changes it. Placed here since delete/rename
    91                              <1> ; is a disk op. If a critical error occurs midway through a delete and the I24h
    92                              <1> ; handler needs to call DOS for char funcs, we dont want to reset this value as 
    93                              <1> ; the delete/rename operation might have set it to 0 (we dont do this yet).
    94 00007C00 C605(31070000)E5    <1>     mov byte [delChar], 0E5h
    95                              <1> ;Similar for volIdFlag. Find file et al are disk ops. 
    96 00007C07 C605(89040000)00    <1>     mov byte [volIdFlag], 0    ;Force bit clear (else, forces volid search)
    97                              <1>     
    98                              <1> ;Need to clear the currentSFT field on all disk stack operations in the 
    99                              <1> ; event of a hard error. In this case, checkDoInt24OnHandle is called and 
   100                              <1> ; checks the currentSFT, which might have bogus data from an old call (e.g.
   101                              <1> ; create a file, then rename, and on path search, rename hard errors. In 
   102                              <1> ; this case, the create pointer would still be present.). 
   103                              <1> ;xxxxxxxxxx NOT IN USE RIGHT NOW xxxxxxxxxx
   104                              <1>     ;mov qword [currentSFT], 0  
   105                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   106                              <1> 
   107 00007C0E 50                  <1>     push rax
   108 00007C0F B482                <1>     mov ah, 82h ;Cancel all critical section!
   109 00007C11 CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
   110 00007C13 58                  <1>     pop rax
   111                              <1> 
   112 00007C14 C605(BF040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
   113 00007C1B 488D25(181A0000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   114 00007C22 F605(5A040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   115 00007C29 7407                <1>     jz .fdGoToFunction
   116                              <1> ; HANDLE CTRL+BREAK HERE!
   117 00007C2B 50                  <1>     push rax
   118 00007C2C E84EAFFFFF          <1>     call checkBreak   ; Check for a ^C
   119 00007C31 58                  <1>     pop rax
   120                              <1> .fdGoToFunction:
   121 00007C32 48871D(AD040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   122                              <1> %if DEBUG && REGS
   123                              <1>     ;Print stack if necessary function
   124                              <1>     debugEnterM
   125                              <1>     call debPrintDOSStack
   126                              <1>     debugExitM
   127                              <1> %endif
   128 00007C39 FF15(AD040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   129                              <1> %if DEBUG && HEADERS
   130                              <1>     ;Entry function
   131                              <1>     debugEnterM
   132                              <1>     lea rbp, .l0002
   133                              <1>     call debPrintNullString
   134                              <1>     jmp short .l0003
   135                              <1> .l0002 db "Exiting Int 21h",0Ah,0Dh,0
   136                              <1> .l0003:    
   137                              <1>     debugExitM
   138                              <1> %endif
   139                              <1> %if DEBUG && REGS
   140                              <1>     ;Exit function
   141                              <1>     debugEnterM
   142                              <1>     call debPrintDOSStack
   143                              <1>     debugExitM
   144                              <1> %endif
   145                              <1> .fdExit:
   146 00007C3F FA                  <1>     cli     ;Redisable interrupts
   147 00007C40 FE0D(30040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   148 00007C46 488B25(A5040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   149 00007C4D 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   150 00007C50 488B05(95040000)    <1>     mov rax, qword [oldoldRSP]
   151 00007C57 488905(A5040000)    <1>     mov qword [oldRSP], rax
   152 00007C5E E806000000          <1>     call dosPopRegs  ;Pop the frame
   153 00007C63 48CF                <1>     iretq
   154                              <1> .fdExitBad:
   155 00007C65 30C0                <1>     xor al, al
   156                              <1> defaultIretq:
   157 00007C67 48CF                <1>     iretq
   158                              <1> dosPopRegs:
   159 00007C69 8F05(9D040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   160 00007C6F 58                  <1>     pop rax
   161 00007C70 5B                  <1>     pop rbx
   162 00007C71 59                  <1>     pop rcx
   163 00007C72 5A                  <1>     pop rdx
   164 00007C73 5E                  <1>     pop rsi
   165 00007C74 5F                  <1>     pop rdi
   166 00007C75 5D                  <1>     pop rbp
   167 00007C76 4158                <1>     pop r8
   168 00007C78 4159                <1>     pop r9
   169 00007C7A FF25(9D040000)      <1>     jmp qword [dosReturn]
   170                              <1> dosPushRegs:
   171 00007C80 8F05(9D040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   172 00007C86 4151                <1>     push r9
   173 00007C88 4150                <1>     push r8
   174 00007C8A 55                  <1>     push rbp
   175 00007C8B 57                  <1>     push rdi
   176 00007C8C 56                  <1>     push rsi
   177 00007C8D 52                  <1>     push rdx
   178 00007C8E 51                  <1>     push rcx
   179 00007C8F 53                  <1>     push rbx
   180 00007C90 50                  <1>     push rax
   181 00007C91 FF25(9D040000)      <1>     jmp qword [dosReturn]
   182                              <1> dosCrit1Enter:
   183                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 00007C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   184 00007C98 B801800000          <1>     mov eax, 8001h
   185 00007C9D CD2A                <1>     int 2ah
   186 00007C9F 58                  <1>     pop rax
   187                              <1>     return
    13                              <2> %%_ret:
    14 00007CA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> dosCrit1Exit:
   189                              <1>     return
    13                              <2> %%_ret:
    14 00007CA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   190 00007CA2 B801810000          <1>     mov eax, 8101h
   191 00007CA7 CD2A                <1>     int 2ah
   192 00007CA9 58                  <1>     pop rax
   193                              <1>     return
    13                              <2> %%_ret:
    14 00007CAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   194                              <1> dosCrit2Enter:
   195                              <1>     return
    13                              <2> %%_ret:
    14 00007CAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196 00007CAC B802800000          <1>     mov eax, 8002h
   197 00007CB1 CD2A                <1>     int 2ah
   198 00007CB3 58                  <1>     pop rax
   199                              <1>     return
    13                              <2> %%_ret:
    14 00007CB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> dosCrit2Exit:
   201                              <1>     return
    13                              <2> %%_ret:
    14 00007CB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202 00007CB6 B802810000          <1>     mov eax, 8102h
   203 00007CBB CD2A                <1>     int 2ah
   204 00007CBD 58                  <1>     pop rax
   205                              <1>     return
    13                              <2> %%_ret:
    14 00007CBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> ;FCB specific returns
   208                              <1> fcbGoodExit:
   209                              <1> ;Preserve the carry flag on entry to DOS
   210 00007CBF 30C0                <1>     xor al, al ;Set return code al = 0
   211                              <1>     return
    13                              <2> %%_ret:
    14 00007CC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1> fcbErrExit:
   213                              <1> ;Preserve the carry flag on entry to DOS
   214                              <1> ;Input: eax = Extended error code to store in SDA 
   215 00007CC2 E836000000          <1>     call xLatError
   216 00007CC7 B0FF                <1>     mov al, -1  ;Set return code al = -1
   217 00007CC9 F9                  <1>     stc
   218                              <1>     return
    13                              <2> %%_ret:
    14 00007CCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   219                              <1> 
   220                              <1> ;Handle and General DOS Returns
   221                              <1> ;All good exits destroy AT LEAST ax 
   222                              <1> extGoodExit2:
   223                              <1> ;Good exit with an extended return code in eax
   224 00007CCB E834FBFFFF          <1>     call getUserRegs
   225 00007CD0 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   226 00007CD2 EB08                <1>     jmp short extGoodExit.extGoodCommon
   227                              <1> extGoodExit:
   228                              <1> ;Good exit
   229                              <1> ;Return code in ax
   230 00007CD4 E82BFBFFFF          <1>     call getUserRegs
   231 00007CD9 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   232                              <1> .extGoodCommon:
   233 00007CDC 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   234 00007CE0 F8                  <1>     clc
   235                              <1>     return
    13                              <2> %%_ret:
    14 00007CE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> extErrExit:
   237                              <1> ;The extended error exit from DOS
   238                              <1> ;Jumped to with AL=Extended error code
   239                              <1> ;Can be called too.
   240                              <1> ;Input: al = Extended error code
   241                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   242                              <1> ;   Returns with: eax = xLat Error
   243                              <1> ;                 rsi = callerFrame
   244 00007CE2 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   245 00007CE5 E813000000          <1>     call xLatError
   246 00007CEA E891000000          <1>     call checkFail
   247                              <1> .noXlat:
   248 00007CEF E810FBFFFF          <1>     call getUserRegs
   249 00007CF4 668906              <1>     mov word [rsi + callerFrame.rax], ax
   250 00007CF7 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   251 00007CFB F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   252                              <1>     return
    13                              <2> %%_ret:
    14 00007CFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> xLatError:
   254                              <1> ;Translates the error code given in ax and sets error code in the var
   255                              <1> ; Input: ax = Extended Error Code
   256                              <1> ; Output: ax = Potentially translated Error Code
   257                              <1> ;         [errorExCde] = Original Error Code
   258                              <1> ;Preserves all registers except ax
   259                              <1> ;AH is always returned as 0
   260 00007CFD 53                  <1>     push rbx
   261 00007CFE 51                  <1>     push rcx
   262 00007CFF 56                  <1>     push rsi
   263 00007D00 668905(33040000)    <1>     mov word [errorExCde], ax
   264 00007D07 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   265 00007D09 488D357483FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   266                              <1> .readEntry:
   267 00007D10 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   268 00007D12 3CFF                <1>     cmp al, -1
   269 00007D14 741F                <1>     je .skipXlat
   270 00007D16 3A05(5C040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   271 00007D1C 7408                <1>     je .found
   272                              <1>     ;Here, entry not found, goto next entry
   273 00007D1E 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   274 00007D21 4801C6              <1>     add rsi, rax    ;Goto next entry
   275 00007D24 EBEA                <1>     jmp short .readEntry
   276                              <1> .found:
   277                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   278 00007D26 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   279                              <1> .mainSearch:
   280 00007D29 AC                  <1>     lodsb   ;Get one byte into al
   281 00007D2A 38C3                <1>     cmp bl, al  ;Check against the error code
   282 00007D2C 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   283 00007D2E FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   284 00007D30 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   285                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   286 00007D32 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   287                              <1> .skipXlat:
   288 00007D35 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   289 00007D37 5E                  <1>     pop rsi
   290 00007D38 59                  <1>     pop rcx
   291 00007D39 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 00007D3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   294                              <1> ;Looks up the error code in the variable and sets the other error vars
   295                              <1> ;Called with the lookup table in rsi
   296                              <1> ;All regs preserved
   297 00007D3B 50                  <1>     push rax
   298 00007D3C 53                  <1>     push rbx
   299 00007D3D 51                  <1>     push rcx
   300 00007D3E 56                  <1>     push rsi
   301 00007D3F 0FB71D(33040000)    <1>     movzx ebx, word [errorExCde]
   302 00007D46 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   303                              <1> .readEntry:
   304 00007D4B AD                  <1>     lodsd   ;Read the dword table entry into eax
   305 00007D4C 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   306 00007D51 7428                <1>     je .exit    
   307 00007D53 38D8                <1>     cmp al, bl  ;Compare the error codes
   308 00007D55 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   309 00007D57 D3E8                <1>     shr eax, cl
   310 00007D59 3CFF                <1>     cmp al, -1
   311 00007D5B 7406                <1>     je .skipClass
   312 00007D5D 8805(36040000)      <1>     mov byte [errorClass], al
   313                              <1> .skipClass:
   314 00007D63 D3E8                <1>     shr eax, cl
   315 00007D65 3CFF                <1>     cmp al, -1
   316 00007D67 7406                <1>     je .skipAct
   317 00007D69 8805(35040000)      <1>     mov byte [errorAction], al
   318                              <1> .skipAct:
   319 00007D6F D3E8                <1>     shr eax, cl
   320 00007D71 3CFF                <1>     cmp al, -1
   321 00007D73 7406                <1>     je .exit
   322 00007D75 8805(32040000)      <1>     mov byte [errorLocus], al
   323                              <1> .exit:
   324 00007D7B 5E                  <1>     pop rsi
   325 00007D7C 59                  <1>     pop rcx
   326 00007D7D 5B                  <1>     pop rbx
   327 00007D7E 58                  <1>     pop rax
   328                              <1>     return
    13                              <2> %%_ret:
    14 00007D7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> checkFail:
   330                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   331                              <1> ; and swaps the var error code if so
   332 00007D80 F605(94040000)FF    <1>     test byte [Int24Fail], -1   ;If zero, skip!
   333 00007D87 7409                <1>     jz .skipFail
   334 00007D89 66C705(33040000)53- <1>     mov word [errorExCde], errFI24  ;Set error to "Fail on Int 24h"
   334 00007D91 00                  <1>
   335                              <1> .skipFail:
   336 00007D92 56                  <1>     push rsi
   337 00007D93 488D359883FFFF      <1>     lea rsi, extErrTbl
   338 00007D9A E89CFFFFFF          <1>     call setErrorVars
   339 00007D9F 5E                  <1>     pop rsi
   340                              <1>     return
    13                              <2> %%_ret:
    14 00007DA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> ;========================================:
   342                              <1> ;      Reentrant Kernel Functions        :
   343                              <1> ;========================================:
   344                              <1> ;ah = 33h, Control Break related functions + some undocumented stuff
   345                              <1> cbcQuick:
   346                              <1> ;The entry point for this function if entered through a normal DOS call
   347 00007DA1 E815000000          <1>     call ctrlBreakCheck
   348 00007DA6 48CF                <1>     iretq
   349                              <1> cbcServer:
   350                              <1> ;The entry point for this function if entered through a Server Call (5D00h)
   351 00007DA8 E80E000000          <1>     call ctrlBreakCheck
   352 00007DAD E852FAFFFF          <1>     call getUserRegs
   353                              <1> ;Calls which dont modify the regs, preserve them themselves so this so 
   354                              <1> ; replacing them back on the stack is a small price to pay
   355 00007DB2 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   356 00007DB6 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   357                              <1> ;DO NOT WRITE AN ERROR CODE AS THIS WOULD OVERWRITE AN ERROR CODE 
   358                              <1> ; THAT MAY BE DEPENDED ON. RETURN WITH THE VALUE IN AL AS RETCODE.
   359                              <1>     return 
    13                              <2> %%_ret:
    14 00007DBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> ctrlBreakCheck:
   361                              <1> ;Can handle subfunctions:
   362                              <1> ; al = 0: Get state for the break flag in dl
   363                              <1> ; al = 1: Set the state of the break flag to dl
   364                              <1> ; al = 2: Exchange the value of the break flag with dl
   365                              <1> ; al = 3: Error, returns al = -1
   366                              <1> ; al = 4: Error, returns al = -1
   367                              <1> ;Undocumented subfunctions:
   368                              <1> ; al = 5: Get the boot drive in dl
   369                              <1> ; al = 6: Get the true DOS version number in bx with subversion flags in dl
   370 00007DBB 3C06                <1>     cmp al, 6
   371 00007DBD 7437                <1>     je .trueVer
   372 00007DBF 3C05                <1>     cmp al, 5
   373 00007DC1 742A                <1>     je .getBtDrv    ;Peel off btdrv req.
   374 00007DC3 84C0                <1>     test al, al
   375 00007DC5 7507                <1>     jnz .cbcget     ;Get the state or other functions
   376 00007DC7 8A15(5A040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   377                              <1>     return
    13                              <2> %%_ret:
    14 00007DCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   378                              <1> .cbcget:
   379 00007DCE 3C02                <1>     cmp al, 02h
   380 00007DD0 7718                <1>     ja .cbcBad
   381 00007DD2 740C                <1>     jz .cbcxchg ;Function 2
   382 00007DD4 52                  <1>     push rdx
   383 00007DD5 80E201              <1>     and dl, 1   ;Get only the bottom bit
   384 00007DD8 8815(5A040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   385 00007DDE 5A                  <1>     pop rdx
   386                              <1>     return
    13                              <2> %%_ret:
    14 00007DDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .cbcxchg:
   388 00007DE0 80E201              <1>     and dl, 1
   389 00007DE3 8615(5A040000)      <1>     xchg byte [breakFlag], dl
   390                              <1>     return
    13                              <2> %%_ret:
    14 00007DE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   391                              <1> .cbcBad:
   392 00007DEA B0FF                <1>     mov al, -1
   393                              <1>     return
    13                              <2> %%_ret:
    14 00007DEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   394                              <1> .getBtDrv:
   395                              <1> ;Undocumented.
   396                              <1> ;Might be unreliable so dont document yet.
   397                              <1> ;Return 1 based boot drive in dl
   398 00007DED 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   399 00007DF3 FEC2                <1>     inc dl  ;Return a 1 based drive number
   400                              <1>     return
    13                              <2> %%_ret:
    14 00007DF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   401                              <1> .trueVer:
   402                              <1> ;Undocumented.
   403                              <1> ;bx returns true DOS number.
   404                              <1> ;dl has "revision" number in bits 0-2. 
   405                              <1> ;dh has various flags. All reserved for future use.
   406 00007DF6 66BB0063            <1>     mov bx, dosVerMac
   407 00007DFA 66BA0201            <1>     mov dx, (dosVerFlags << 8) | dosRev
   408                              <1>     return
    13                              <2> %%_ret:
    14 00007DFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> ;ah = 50h, set current PSP
   411                              <1> scpspQuick:
   412 00007DFF E802000000          <1>     call setCurrPSP
   413 00007E04 48CF                <1>     iretq
   414                              <1> scpspServer:
   415                              <1> setCurrPSP:
   416 00007E06 48891D(47040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   417                              <1>     return
    13                              <2> %%_ret:
    14 00007E0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> ;ah = 51h/62h, gives PSP addr/Process ID
   420                              <1> gcpspQuick:
   421 00007E0E E811000000          <1>     call getCurrPSP
   422 00007E13 48CF                <1>     iretq
   423                              <1> gcpspServer:
   424 00007E15 E80A000000          <1>     call getCurrPSP
   425 00007E1A E8E5F9FFFF          <1>     call getUserRegs
   426 00007E1F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   427                              <1>     return
    13                              <2> %%_ret:
    14 00007E23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   428                              <1> getCurrPSP:     
   429 00007E24 488B1D(47040000)    <1>     mov rbx, qword [currentPSP]
   430                              <1>     return
    13                              <2> %%_ret:
    14 00007E2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> ;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   433                              <1> sdlQuick:
   434 00007E2C E802000000          <1>     call setDriverLookahead
   435 00007E31 48CF                <1>     iretq
   436                              <1> sdlServer:
   437                              <1> setDriverLookahead:
   438 00007E33 8805(201A0000)      <1>     mov byte [lookahead], al    
   439 00007E39 48CF                <1>     iretq
   440                              <1> 
   441                              <1> ;========================================:
   442                              <1> ;            Kernel Functions            :
   443                              <1> ;========================================:
   444                              <1> diskReset:         ;ah = 0Dh
   445                              <1> ;Flush all dirty buffers to disk
   446 00007E3B E857FEFFFF          <1>     call dosCrit1Enter
   447 00007E40 B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   448 00007E42 E87B89FFFF          <1>     call flushAllBuffersForDrive  
   449                              <1>     ;Now we free all buffers and set their referenced bit
   450 00007E47 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   451                              <1> .drBufferLp:
   452 00007E4E 4881FFFFFFFFFF      <1>     cmp rdi, -1
   453 00007E55 740B                <1>     je .drExit
   454 00007E57 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   455 00007E5D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   456 00007E60 EBEC                <1>     jmp short .drBufferLp
   457                              <1> .drExit:
   458 00007E62 E83AFEFFFF          <1>     call dosCrit1Exit
   459 00007E67 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   460 00007E6C CD2F                <1>     int 2fh
   461                              <1>     return
    13                              <2> %%_ret:
    14 00007E6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> 
   463                              <1> selectDisk:        ;ah = 0Eh
   464                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   465 00007E6F 88D0                <1>     mov al, dl
   466 00007E71 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   467 00007E73 E8B0F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   468 00007E78 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   469 00007E7A 8805(59040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   470                              <1> .skipSettingCurrent:
   471 00007E80 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   472                              <1>     return
    13                              <2> %%_ret:
    14 00007E87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   475 00007E88 8A05(59040000)      <1>     mov al, byte [currentDrv]
   476                              <1>     return
    13                              <2> %%_ret:
    14 00007E8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> 
   478                              <1> FATinfoDefault:    ;ah = 1Bh
   479 00007E8F 30D2                <1>     xor dl, dl
   480                              <1> FATinfoDevice:     ;ah = 1Ch
   481                              <1> ;Input: dl = 1 based drive number
   482                              <1> ;Output:
   483                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   484                              <1> ;cx = bytes per sector
   485                              <1> ;edx = total number of clusters
   486                              <1> ;rbx = Ptr to media ID byte
   487 00007E91 88D0                <1>     mov al, dl  ;Move drive number into al
   488 00007E93 E800FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   489 00007E98 7307                <1>     jnc .fidCDSFound
   490 00007E9A B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   491 00007E9F EB2E                <1>     jmp short .error 
   492                              <1> .fidCDSFound:
   493 00007EA1 E8E5F8FFFF          <1>     call getDiskData
   494 00007EA6 7227                <1>     jc .error
   495                              <1> ;Now we have that:
   496                              <1> ;al = sectors per cluster
   497                              <1> ;ah = media ID byte
   498                              <1> ;ebx = total clusters
   499                              <1> ;cx = bytes per sector
   500                              <1> ;edx = number of available clusters
   501 00007EA8 E857F9FFFF          <1>     call getUserRegs
   502 00007EAD 8825(CA070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   503 00007EB3 30E4                <1>     xor ah, ah
   504 00007EB5 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   505 00007EB8 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   506 00007EBC 488D1D(CA070000)    <1>     lea rbx, mediaByte
   507 00007EC3 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   508 00007EC7 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   509                              <1> .badExit:
   510 00007ECB 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   511                              <1>     return
    13                              <2> %%_ret:
    14 00007ECE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> .error:
   513 00007ECF E80EFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   514 00007ED4 66B8FFFF            <1>     mov ax, -1
   515 00007ED8 EBF1                <1>     jmp short .badExit
   516                              <1> 
   517                              <1> setIntVector:      ;ah = 25h
   518                              <1> ;Called with:
   519                              <1> ;   rdx = Pointer to interrupt handler
   520                              <1> ;   al = Interrupt number
   521 00007EDA FA                  <1>     cli ;Halt interrupts
   522 00007EDB 0F010D(571A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   523 00007EE2 0FB6C0              <1>     movzx eax, al
   524 00007EE5 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   525 00007EE9 480305(591A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   526 00007EF0 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   527 00007EF3 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   528 00007EF7 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   529 00007EFB 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   530 00007EFF 895008              <1>     mov dword [rax + 8], edx
   531 00007F02 FB                  <1>     sti
   532                              <1>     return
    13                              <2> %%_ret:
    14 00007F03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   535 00007F04 8805(F8030000)      <1>     mov byte [verifyFlag], al
   536 00007F0A 8025(F8030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   537                              <1>     return
    13                              <2> %%_ret:
    14 00007F11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   538                              <1> getDOSversion:     ;ah = 30h
   539 00007F12 E8EDF8FFFF          <1>     call getUserRegs
   540 00007F17 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   541 00007F19 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   542 00007F1C 668B05DD80FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   543 00007F23 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   544                              <1>     return
    13                              <2> %%_ret:
    14 00007F26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   547                              <1> ;Input: dx = Version number. Value of 0 means true value.
   548 00007F27 6685D2              <1>     test dx, dx
   549 00007F2A 750A                <1>     jnz .newVal
   550 00007F2C 66C705CB80FFFF0063  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   551                              <1>     return
    13                              <2> %%_ret:
    14 00007F35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> .newVal:
   553 00007F36 668915C380FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   554                              <1>     return
    13                              <2> %%_ret:
    14 00007F3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   557                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   558 00007F3E 30D2                <1>     xor dl, dl
   559                              <1> getDeviceDPBptr:   ;ah = 32h
   560                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   561                              <1> ;On exit: rbx = DPB pointer
   562 00007F40 88D0                <1>     mov al, dl
   563 00007F42 E851F9FFFF          <1>     call getCDS
   564 00007F47 722C                <1>     jc .bad
   565 00007F49 488B3D(3B070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   566 00007F50 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   567 00007F56 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   568                              <1>     ;Here ONLY if accessing critical Disk data structures
   569 00007F58 E83AFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   570 00007F5D E869F5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   571 00007F62 E83AFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   572 00007F67 720C                <1>     jc .bad
   573 00007F69 E896F8FFFF          <1>     call getUserRegs
   574 00007F6E 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   575 00007F72 30C0                <1>     xor al, al
   576                              <1>     return
    13                              <2> %%_ret:
    14 00007F74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> .bad:
   578 00007F75 B0FF                <1>     mov al, -1
   579                              <1>     return
    13                              <2> %%_ret:
    14 00007F77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getInDOSflagPtr:   ;ah = 34h
   582 00007F78 488D15(30040000)    <1>     lea rdx, inDOS
   583 00007F7F E880F8FFFF          <1>     call getUserRegs
   584 00007F84 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   585                              <1>     return
    13                              <2> %%_ret:
    14 00007F88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> getIntVector:      ;ah = 35h
   588                              <1> ;Called with:
   589                              <1> ;   al = Interrupt Number
   590                              <1> ;Returns:
   591                              <1> ;   rbx = Pointer to interrupt handler
   592 00007F89 E848F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   593 00007F8E E871F8FFFF          <1>     call getUserRegs
   594 00007F93 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   595                              <1>     return
    13                              <2> %%_ret:
    14 00007F97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> getDiskFreeSpace:  ;ah = 36h
   598                              <1> ;Input: Drive number in dl (0 = Current)
   599                              <1> ;Output:    ax = sectors per cluster
   600                              <1> ;           ebx = number of free clusters
   601                              <1> ;           cx = bytes per sector
   602                              <1> ;           edx = total clusters on drive
   603 00007F98 88D0                <1>     mov al, dl
   604 00007F9A E8F9F8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   605 00007F9F 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   606                              <1> ;Else, we at an error.
   607                              <1> ;Simply return with CY set and error code in al with extended error info
   608 00007FA1 B80F000000          <1>     mov eax, errBadDrv
   609 00007FA6 E837FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   610                              <1>     ;extErrExit sets rsi to caller regs
   611 00007FAB 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   612                              <1>     return
    13                              <2> %%_ret:
    14 00007FB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> .gdfsCDSFound:
   614 00007FB1 E8D5F7FFFF          <1>     call getDiskData
   615 00007FB6 7219                <1>     jc .error
   616                              <1> ;Now we have that:
   617                              <1> ;al = sectors per cluster
   618                              <1> ;ah = media ID byte
   619                              <1> ;ebx = total clusters
   620                              <1> ;cx = bytes per sector
   621                              <1> ;edx = number of available clusters
   622 00007FB8 E847F8FFFF          <1>     call getUserRegs
   623 00007FBD 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   624 00007FBF 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   625 00007FC2 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   626 00007FC6 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   627 00007FC9 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   628                              <1> .badExit:
   629 00007FCD 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   630                              <1>     return
    13                              <2> %%_ret:
    14 00007FD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   631                              <1> .error:
   632 00007FD1 E80CFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   633 00007FD6 66B8FFFF            <1>     mov ax, -1
   634 00007FDA EBF1                <1>     jmp short .badExit
   635                              <1> 
   636                              <1> 
   637                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   638 00007FDC 31C0                <1>     xor eax, eax
   639 00007FDE 668705(57040000)    <1>     xchg ax, word [errorLevel]
   640 00007FE5 E9EAFCFFFF          <1>     jmp extGoodExit
   641                              <1> 
   642                              <1> getSysVarsPtr:     ;ah = 52h
   643 00007FEA 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   644 00007FF1 E80EF8FFFF          <1>     call getUserRegs
   645 00007FF6 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   646                              <1>     return
    13                              <2> %%_ret:
    14 00007FFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> 
   648                              <1> 
   649                              <1> ;AH = 53h - CREATE DPB
   650                              <1> createDPB:         ;generates a DPB from a given BPB
   651                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   652                              <1> ;This is done so that the other fields of the DPB can be recycled
   653                              <1> ;Input: rsi = ptr to the BPB
   654                              <1> ;       rbp = ptr to the DPB
   655                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   656                              <1> ;bMediaDescriptor
   657 00007FFB 8A460A              <1>     mov al, byte [rsi + bpb.media]
   658 00007FFE 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   659                              <1> ;dNextFreeClst
   660 00008001 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   661                              <1> ;dFreeClustCnt
   662 00008008 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Start with unknown
   663                              <1> ;wBytesPerSector
   664 0000800F 0FB706              <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   665 00008012 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   666                              <1> ;bMaxSectorInCluster
   667 00008016 8A4602              <1>     mov al, byte [rsi + bpb.secPerClus]
   668 00008019 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   669 0000801B 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   670                              <1> ;bSecPerClustShift
   671 0000801E FEC0                <1>     inc al
   672 00008020 31C9                <1>     xor ecx, ecx
   673                              <1> .cd2:
   674 00008022 D0E8                <1>     shr al, 1
   675 00008024 7404                <1>     jz .cd3
   676 00008026 FFC1                <1>     inc ecx
   677 00008028 EBF8                <1>     jmp short .cd2
   678                              <1> .cd3:
   679 0000802A 884D05              <1>     mov byte [rbp + dpb.bSecPerClustShift], cl
   680                              <1> ;wFAToffset, number of reserved sectors in partition
   681 0000802D 668B4603            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   682 00008031 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   683                              <1> ;bNumberOfFATs
   684 00008035 8A4605              <1>     mov al, byte [rsi + bpb.numFATs]
   685 00008038 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   686                              <1> ;wNumberRootDirEntries
   687                              <1> ;Gets the number of 32 byte entries in the root directory
   688                              <1> ;Only valid for FAT 12/16
   689 0000803B 0FB74606            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   690 0000803F 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   691                              <1> ;dFATlength, get the FAT length
   692 00008043 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   693 00008047 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   694 0000804A 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   695 0000804C 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   696 0000804F 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   697                              <1> ;Complex cases below...
   698                              <1> ;dClusterHeapOffset, start sector of the data area
   699 00008052 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   700 00008056 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   701 00008059 85C0                <1>     test eax, eax
   702 0000805B 0F44C3              <1>     cmovz eax, ebx
   703                              <1> ;eax = FATsz
   704 0000805E 0FB75E08            <1>     movzx ebx, word [rsi + bpb.totSec16]
   705 00008062 8B4E15              <1>     mov ecx, dword [rsi + bpb.totSec32]
   706 00008065 85DB                <1>     test ebx, ebx
   707 00008067 0F44D9              <1>     cmovz ebx, ecx 
   708                              <1> ;ebx = TotSec
   709 0000806A 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   710 0000806C 0FB64E05            <1>     movzx ecx, byte [rsi + bpb.numFATs]
   711 00008070 67E306              <1>     jecxz .cd41
   712                              <1> .cd4:
   713 00008073 01C2                <1>     add edx, eax
   714 00008075 FFC9                <1>     dec ecx
   715 00008077 75FA                <1>     jnz .cd4
   716                              <1> .cd41:
   717 00008079 89D0                <1>     mov eax, edx    ;Store product in eax
   718 0000807B 0FB75603            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   719 0000807F 01D0                <1>     add eax, edx
   720                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   721 00008081 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   722 00008085 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   723 00008088 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   724 0000808C 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   725 0000808D 89D0                <1>     mov eax, edx
   726 0000808F 31D2                <1>     xor edx, edx
   727 00008091 F7F1                <1>     div ecx
   728 00008093 89C2                <1>     mov edx, eax
   729 00008095 58                  <1>     pop rax
   730 00008096 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   731                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   732                              <1>     ;aka eax = Start sector of the data area in volume
   733 00008098 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   734                              <1> ;dClusterCount
   735 0000809B 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   736 0000809D 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   737 0000809F 31D2                <1>     xor edx, edx
   738 000080A1 BB01000000          <1>     mov ebx, 1
   739 000080A6 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
   740 000080AA D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   741 000080AC F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   742 000080AE FFC0                <1>     inc eax ;Maximum valid cluster address is cluster count + 1
   743 000080B0 89450F              <1>     mov dword [rbp + dpb.dMaxClusterAddr], eax    ;eax = Max cluster address
   744                              <1> ;dFirstUnitOfRootDir
   745 000080B3 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   746 000080B8 8B4621              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   747 000080BB 7712                <1>     ja .cd5
   748                              <1>     ;Else, we need to find the first sector of the root directory
   749                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   750 000080BD 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   751 000080C1 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   752 000080C5 67E307              <1>     jecxz .cd5
   753                              <1> .cd51:
   754 000080C8 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   755 000080CB FFC9                <1>     dec ecx
   756 000080CD 75F9                <1>     jnz .cd51
   757                              <1> .cd5:
   758 000080CF 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   759 000080D2 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   760 000080D6 E8738EFFFF          <1>     call readFSInfoSector   ;If FAT32, updates free cluster data with FSinfo
   761                              <1> ;Exit epilogue
   762                              <1> .exit:
   763 000080DB 488B1D(A5040000)    <1>     mov rbx, qword [oldRSP]
   764 000080E2 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   765                              <1>     %if DEBUG && DPBINFO
   766                              <1>     ;Print DPB 
   767                              <1>     debugEnterM
   768                              <1>     push rbp
   769                              <1>     lea rbp, .l0000
   770                              <1>     call debPrintNullString
   771                              <1>     pop rbp
   772                              <1>     call debDPBBPBptr
   773                              <1>     ;call debMakeDebuggerRespond
   774                              <1>     jmp short .l0001
   775                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   776                              <1> .l0001:
   777                              <1>     debugExitM
   778                              <1>     %endif
   779                              <1>     return
    13                              <2> %%_ret:
    14 000080E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   780                              <1> 
   781                              <1> getVerifySetting:  ;ah = 54h
   782 000080E5 8A05(F8030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   783                              <1>     return
    13                              <2> %%_ret:
    14 000080EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   784                              <1> 
   785                              <1> getExtendedError:  ;ah = 59h
   786 000080EC E813F7FFFF          <1>     call getUserRegs
   787 000080F1 668B05(33040000)    <1>     mov ax, word [errorExCde]
   788 000080F8 8A2D(32040000)      <1>     mov ch, byte [errorLocus]
   789 000080FE 8A3D(36040000)      <1>     mov bh, byte [errorClass]
   790 00008104 8A1D(35040000)      <1>     mov bl, byte [errorAction]
   791 0000810A 488B3D(37040000)    <1>     mov rdi, qword [errorVolLbl]
   792 00008111 668906              <1>     mov word [rsi + callerFrame.rax], ax
   793 00008114 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   794 00008118 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   795 0000811B 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   796                              <1> noOp:
   797                              <1>     return
    13                              <2> %%_ret:
    14 0000811F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> 
   799                              <1> systemServices: ;ah = 61h
   800                              <1> ;al = 0 -> Get Environment pointer in rdx
   801                              <1> ;   Output: rdx -> Environment Pointer. May be a null pointer. Caller checks!
   802                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   803                              <1> ;   Output: rdx -> Pointer to whatever was passed as a CR terminated 
   804                              <1> ;                   command line.
   805                              <1> ;al = 2 -> Get ptr to ASCIIZ name for program in rdx. Might not be FQ.
   806                              <1> ;   Output: CF=NC: rdx -> Filename 
   807                              <1> ;           CF=CY: eax = Error code (errAccDen) if no filename ptr.
   808                              <1> ;                   The error case should only happen for special
   809                              <1> ;                   programs that are launched without an environment
   810                              <1> ;                   as DOS has nowhere to put the filename string.
   811                              <1> ;al > 2: Returns CF=CY and eax = Error code (errInvFnc).
   812 00008120 3C01                <1>     cmp al, 1
   813 00008122 7415                <1>     je .getCmdLineArgs
   814 00008124 3C02                <1>     cmp al, 2
   815 00008126 761E                <1>     jbe .getEnvPtr
   816 00008128 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk  
   817 0000812F B801000000          <1>     mov eax, errInvFnc  ;Error, with invalid function number error
   818                              <1> .exitBad:
   819 00008134 E9A9FBFFFF          <1>     jmp extErrExit
   820                              <1> .getCmdLineArgs:
   821 00008139 488B15(47040000)    <1>     mov rdx, qword [currentPSP]
   822 00008140 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   823 00008144 EB53                <1>     jmp short .gepExitOk
   824                              <1> .getEnvPtr:
   825                              <1> ;Gets the environment pointer in rdx
   826 00008146 488B15(47040000)    <1>     mov rdx, qword [currentPSP]
   827 0000814D 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environment pointer
   828 00008151 84C0                <1>     test al, al     ;Was al=0?
   829 00008153 7444                <1>     jz .gepExitOk   ;Exit if al = 0 since we have the pointer we need!
   830 00008155 4885D2              <1>     test rdx, rdx   ;Check if the env pointer is ok to use
   831 00008158 7420                <1>     jz .gepFail
   832 0000815A 4881FAFFFFFFFF      <1>     cmp rdx, -1
   833 00008161 7417                <1>     je .gepFail
   834                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   835                              <1> ; pass the ptr to the word after.
   836 00008163 51                  <1>     push rcx
   837 00008164 31C9                <1>     xor ecx, ecx
   838 00008166 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   839                              <1> .gep0:
   840 0000816B 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   841 00008170 7411                <1>     je short .gep1
   842 00008172 48FFC2              <1>     inc rdx         ;Go to the next byte
   843 00008175 FFC9                <1>     dec ecx
   844 00008177 75F2                <1>     jnz short .gep0
   845                              <1> .gep00:
   846                              <1> ;Failure here if we haven't hit the double null by the end of 32Kb
   847 00008179 59                  <1>     pop rcx
   848                              <1> .gepFail:
   849 0000817A 31D2                <1>     xor edx, edx        ;Turn it into null pointer
   850 0000817C B805000000          <1>     mov eax, errAccDen  ;Set error code here
   851 00008181 EBB1                <1>     jmp short .exitBad  ;Return setting CF=CY and errAccDen (no pointer)
   852                              <1> .gep1:
   853 00008183 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   854 0000818A 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   855 0000818F 75E8                <1>     jne .gep00
   856 00008191 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   857 00008198 59                  <1>     pop rcx
   858                              <1> .gepExitOk:
   859 00008199 E866F6FFFF          <1>     call getUserRegs
   860 0000819E 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   861 000081A2 E92DFBFFFF          <1>     jmp extGoodExit
   862                              <1> 
   863                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   864                              <1> ;Wraps the generic disk IO call to get/set the disk serial number and
   865                              <1> ; associated information.
   866                              <1> ;Input:
   867                              <1> ;   al = 0: Get disk serial number
   868                              <1> ;   al = 1: Set disk serial number
   869                              <1> ;   ebx = 1-based drive number
   870                              <1> ;   rdx -> Pointer to an ID parameter block
   871 000081A7 0FB6C0              <1>     movzx eax, al
   872 000081AA B966080000          <1>     mov ecx, 0866h  ;Get Disk Serial Packet major/minor codes
   873 000081AF 85C0                <1>     test eax, eax
   874 000081B1 7417                <1>     jz .doIoctl
   875 000081B3 81E920000000        <1>     sub ecx, 20h    ;Turn Get major/minor codes into a Set
   876 000081B9 3D01000000          <1>     cmp eax, 1      ;Is this a set?
   877 000081BE 740A                <1>     je .doIoctl
   878 000081C0 B801000000          <1>     mov eax, errInvFnc  ;Else, return error, invalid function!
   879 000081C5 E918FBFFFF          <1>     jmp extErrExit
   880                              <1> .doIoctl:
   881 000081CA B80D000000          <1>     mov eax, 0Dh    ;Do block dev Generic IOCTL call
   882 000081CF E828D4FFFF          <1>     call ioctrl     ;Sets up the return state internally
   883                              <1>     return          ; so just return normally
    13                              <2> %%_ret:
    14 000081D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 000081D5 3C07                <1>     cmp al, 07h
     8 000081D7 7204                <1>     jb .skip
     9 000081D9 3C09                <1>     cmp al, 09h
    10 000081DB 7618                <1>     jbe .skip2
    11                              <1> .skip:
    12 000081DD 4889D6              <1>     mov rsi, rdx
    13 000081E0 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low dword only used
    14 000081E4 891D(6B040000)      <1>     mov dword [dReqNetID], ebx  ;Set the netID of the requester
    15 000081EA 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 000081EE 48891D(63040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 000081F5 488D1D23FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 000081FC 53                  <1>     push rbx
    20 000081FD 488B1D(221A0000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00008204 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00008205 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00008206 E854010000          <1>     call serverFunctionSelect
    24 0000820B B801000000          <1>     mov eax, eLocUnk
    25 00008210 8805(32040000)      <1>     mov byte [errorLocus], al
    26 00008216 E9C7FAFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 0000821B 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 0000821C 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 0000821D 5F                  <1>     pop rdi
    33 0000821E E8E1F5FFFF          <1>     call getUserRegs
    34 00008223 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00008226 56                  <1>     push rsi
    36 00008227 B906000000          <1>     mov ecx, 6
    37 0000822C F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 0000822F 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00008236 48A5                <1>     movsq   ;Transfer r8...
    40 00008238 48A5                <1>     movsq   ;... and r9
    41 0000823A 5E                  <1>     pop rsi
    42 0000823B 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 0000823E 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00008242 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00008246 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 0000824A 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 0000824E 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00008252 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00008256 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 0000825A 48891D(AD040000)    <1>     mov qword [oldRBX], rbx
    51 00008261 C605(2B070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00008268 E916F9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 0000826D 488B1D(47040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00008274 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00008279 740A                <1>     je .validTask
    62 0000827B B805000000          <1>     mov eax, errAccDen
    63 00008280 E95DFAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00008285 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00008287 E80BFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 0000828C 53                  <1>     push rbx
    70 0000828D E861D2FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00008292 7225                <1>     jc .exit
    72 00008294 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00008299 7419                <1>     je .gotoNextFile
    74 0000829B 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 000082A0 7412                <1>     je .gotoNextFile
    76 000082A2 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;Dont commit redirs
    77 000082A8 750A                <1>     jnz .gotoNextFile
    78 000082AA E886D0FFFF          <1>     call setCurrentSFT ;Set this as the current SFT
    79 000082AF E87BBDFFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 000082B4 5B                  <1>     pop rbx
    83 000082B5 FFC3                <1>     inc ebx
    84 000082B7 EBD3                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 000082B9 E8E3F9FFFF          <1>     call dosCrit1Exit
    87 000082BE 5B                  <1>     pop rbx ;Align stack
    88 000082BF E910FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 000082C4 FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 000082CA 0F8212FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 000082D0 E9FFF9FFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 000082D5 FF15(D7000000)      <1>     call qword [closeCompShare]
   100 000082DB EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 000082DD FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 000082E3 EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 000082E5 FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 000082EB 72DD                <1>     jc closeFilesByName.shareExitBad
   109 000082ED E812F5FFFF          <1>     call getUserRegs
   110 000082F2 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 000082F6 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 000082FA 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 000082FE EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00008300 488D3D(2F040000)    <1>     lea rdi, sda
   124 00008307 48B9F3150000000000- <1>     mov rcx, sdaLen
   124 00008310 00                  <1>
   125 00008311 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 0000831A 00                  <1>
   126 0000831B E8E4F4FFFF          <1>     call getUserRegs
   127 00008320 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00008324 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00008328 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 0000832A 50                  <1>     push rax
   133 0000832B B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00008330 CD2F                <1>     int 2Fh
   135 00008332 5B                  <1>     pop rbx
   136 00008333 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00008335 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00008337 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00008339 668905(33040000)    <1>     mov word [errorExCde], ax
   144 00008340 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00008344 488905(37040000)    <1>     mov qword [errorVolLbl], rax
   146 0000834B 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 0000834E 668905(35040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00008355 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00008358 8825(32040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 0000835E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 0000835F 55                  <1>     push rbp
   156 00008360 4889E5              <1>     mov rbp, rsp
   157 00008363 53                  <1>     push rbx
   158 00008364 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00008368 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 0000836B 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 0000836E 7621                <1>     jbe short .argumentTooBig
   162 00008370 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00008374 D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00008376 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00008378 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 0000837C 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 0000837F 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00008383 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00008387 5B                  <1>     pop rbx
   170 00008388 5D                  <1>     pop rbp
   171 00008389 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00008390 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00008391 5B                  <1>     pop rbx
   175 00008392 5D                  <1>     pop rbp
   176 00008393 C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00008396 3C01                <1>     cmp al, 01
   181 00008398 7214                <1>     jb .getName
   182 0000839A 7437                <1>     jz .setName
   183 0000839C 3C06                <1>     cmp al, 6
   184 0000839E 724C                <1>     jb .netRedir
   185 000083A0 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 000083A7 B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 000083A9 E934F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 000083AE 4889D7              <1>     mov rdi, rdx
   198 000083B1 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 000083B8 E847F4FFFF          <1>     call getUserRegs
   200 000083BD 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 000083C1 488D35(FE030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 000083C8 31C0                <1>     xor eax, eax
   204 000083CA 48A5                <1>     movsq
   205 000083CC A5                  <1>     movsd
   206 000083CD 66A5                <1>     movsw
   207 000083CF A4                  <1>     movsb
   208 000083D0 AA                  <1>     stosb   ;Store terminating null
   209 000083D1 EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 000083D3 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 000083DA 4889D6              <1>     mov rsi, rdx
   217 000083DD FE05(FD030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 000083E3 488D3D(FE030000)    <1>     lea rdi, machineName
   219 000083EA EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 000083EC 50                  <1>     push rax
   223 000083ED B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 000083F2 CD2F                <1>     int 2Fh
   225 000083F4 5A                  <1>     pop rdx
   226 000083F5 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 000083F7 E9D8F8FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 000083FC 80FC07              <1>     cmp ah, 07h
   233 000083FF 7419                <1>     je .driveAction
   234 00008401 80FC08              <1>     cmp ah, 08h
   235 00008404 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 00008406 50                  <1>     push rax
   238 00008407 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 0000840C CD2F                <1>     int 2Fh
   240 0000840E 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 0000840F 0F82CDF8FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 00008415 E9BAF8FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 0000841A 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 0000841C E8D2F4FFFF          <1>     call getCDSforDrive
   249 00008421 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00008423 80EA07              <1>     sub dl, 7
   252 00008426 7408                <1>     jz .enable
   253 00008428 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 0000842E EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00008430 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 00008436 EBDD                <1>     jmp short .goodExit
    55                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00008438 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 0000843B 7411                <1>     je .installCheck
    23 0000843D 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00008440 740C                <1>     je .installCheck
    25 00008442 80FC12              <1>     cmp ah, 12h
    26 00008445 741E                <1>     je .goMplx
    27 00008447 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 0000844A 7402                <1>     je .installCheck
    29 0000844C 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 0000844E 84C0                <1>     test al, al
    38 00008450 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00008452 B801000000          <1>     mov eax, errInvFnc
    41 00008457 C605(32040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 0000845E 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00008463 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00008465 3C30                <1>     cmp al, mDispTblL / 2
    48 00008467 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50                              <1> 
    51 00008469 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    52 0000846A 53                  <1>     push rbx    ;Storage for DOS function
    53 0000846B 53                  <1>     push rbx    ;Stores rbx value
    54 0000846C 488D1D2E000000      <1>     lea rbx, .retAddr
    55 00008473 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    56                              <1> 
    57 00008478 51                  <1>     push rcx
    58 00008479 488D1D3882FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    59 00008480 53                  <1>     push rbx
    60 00008481 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 00008484 D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 00008486 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00008489 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 0000848D 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 0000848E 4801CB              <1>     add rbx, rcx
    66 00008491 59                  <1>     pop rcx
    67 00008492 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 00008497 5B                  <1>     pop rbx
    69 00008498 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Get the old stack pointer from the frame
    70 0000849D 488B00              <1>     mov rax, qword [rax]        ;Get the argument we pushed on the stack
    71                              <1>     return  ;Now we have no alignement requirements :D 
    13                              <2> %%_ret:
    14 000084A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> .retAddr:
    74 000084A1 53                  <1>     push rbx
    75 000084A2 9C                  <1>     pushfq
    76 000084A3 5B                  <1>     pop rbx
    77 000084A4 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    78 000084A9 5B                  <1>     pop rbx
    79 000084AA 48CF                <1>     iretq
    80                              <1> 
    81                              <1> multiplexTest:
    82 000084AC B0FF                <1>     mov al, -1
    83 000084AE C3                  <1>     ret
    84                              <1> 
    85                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    86                              <1> ;Return: r8 = Dos Data Segment Pointer
    87 000084AF 4C8D05(10000000)    <1>     lea r8, dosDataArea
    88                              <1>     return
    13                              <2> %%_ret:
    14 000084B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    91                              <1> ;Input: cl = open mode
    92                              <1> ;       rdx -> Ptr to filename to open
    93                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    94 000084B7 88C8                <1>     mov al, cl
    95 000084B9 E8D6B1FFFF          <1>     call openFileHdl
    96                              <1>     return
    13                              <2> %%_ret:
    14 000084BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    99                              <1> ;Input:  
   100                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   101                              <1> ;   ebx = Handle to move (lower word only)
   102                              <1> ;   ecx = Number of bytes to move
   103                              <1> ;   edx = 0 (upper dword, reserved for now)
   104                              <1> ;Return:
   105                              <1> ;   eax = New pointer location
   106                              <1> ;   edx = 0
   107 000084BF FF35(A5040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   108 000084C5 488D05(611A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   109 000084CC 488905(A5040000)    <1>     mov qword [oldRSP], rax
   110 000084D3 89E8                <1>     mov eax, ebp
   111 000084D5 E8F8B3FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   112 000084DA 8F05(A5040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   113                              <1>     return
    13                              <2> %%_ret:
    14 000084E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   116                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   117                              <1> ; low byte of bp.
   118 000084E1 FF35(A5040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   119 000084E7 488D05(611A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   120 000084EE 488905(A5040000)    <1>     mov qword [oldRSP], rax
   121 000084F5 89E8                <1>     mov eax, ebp
   122 000084F7 E800D1FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   123 000084FC 8F05(A5040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   124                              <1>     return  
    13                              <2> %%_ret:
    14 00008502 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> mpxChecksum:
   127                              <1> ;Computes the checksum of a number of bytes in memory
   128                              <1> ;Input: edx = Start value for checksum
   129                              <1> ;       ecx = number of bytes to sum
   130                              <1> ;       rsi -> Ptr to byte array to perform sum on
   131 00008503 31C0                <1>     xor eax, eax
   132 00008505 67E307              <1>     jecxz .exit
   133                              <1> .lp:
   134 00008508 AC                  <1>     lodsb
   135 00008509 01C2                <1>     add edx, eax
   136 0000850B FFC9                <1>     dec ecx
   137 0000850D 75F9                <1>     jnz .lp
   138                              <1> .exit:
   139                              <1>     return
    13                              <2> %%_ret:
    14 0000850F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   141                              <1> ;Sums the values in a number of bytes in memory
   142                              <1> ;Input: rsi -> Byte array to sum values of
   143                              <1> ;       edx = Value limit (for the sum)
   144                              <1> ;       ecx = 0
   145 00008510 31C0                <1>     xor eax, eax
   146                              <1> .lp:
   147 00008512 AC                  <1>     lodsb
   148 00008513 39C2                <1>     cmp edx, eax
   149                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008515 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008517 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00008518 29C2                <1>     sub edx, eax
   151 0000851A FFC1                <1>     inc ecx
   152 0000851C EBF4                <1>     jmp short .lp
    56                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 0000851E B801000000          <1>     mov eax, errInvFnc
     6 00008523 668905(33040000)    <1>     mov word [errorExCde], ax
     7 0000852A F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 0000852B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 0000852C E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00008531 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00008532 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00008533 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00008534 FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 0000853A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 0000853B FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00008541 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00008542 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00008549 53                  <1>     push rbx
    34 0000854A FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00008550 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008551 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008553 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    37 00008554 E806000000          <1>     call shareRetryCountdown
    38 00008559 FFCB                <1>     dec ebx
    39 0000855B 75EC                <1>     jnz .mainLoop
    40 0000855D F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 0000855E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 0000855F F605(2B070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008566 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008568 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    48 00008569 51                  <1>     push rcx
    49 0000856A 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00008571 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00008574 51                  <1>     push rcx
    53 00008575 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00008577 66FFC9              <1>     dec cx
    56 0000857A 75FB                <1>     jnz .mainLoop
    57 0000857C 59                  <1>     pop rcx
    58 0000857D FFC9                <1>     dec ecx
    59 0000857F 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00008581 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00008582 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00008583 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
    67 00008589 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 0000858B 50                  <1>     push rax
    69 0000858C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00008590 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00008595 58                  <1>     pop rax
    72 00008596 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00008598 E872000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000859D 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000859F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    76                              <1> .notInCompatMode:
    77 000085A0 B820000000          <1>     mov eax, errShrVio
    78 000085A5 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 000085A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 000085A7 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 000085A8 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 000085AF E889CDFFFF          <1>     call getCurrentSFT
    93 000085B4 31C0                <1>     xor eax, eax
    94 000085B6 48C7474F00000000    <1>     mov qword [rdi + sft.pMFT], 0     ;Init to no record
    95 000085BE 51                  <1>     push rcx
    96 000085BF E870FFFFFF          <1>     call openShareCallWrapper
    97 000085C4 59                  <1>     pop rcx
    98 000085C5 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 000085C7 E893FFFFFF          <1>     call shareRetryCountdown
   100 000085CC FFC9                <1>     dec ecx
   101 000085CE 75DF                <1>     jnz .keepLooping
   102 000085D0 E842000000          <1>     call shareCriticalError
   103 000085D5 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 000085D7 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 000085D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 000085D9 C605(29070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 000085E0 EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 000085E2 C605(29070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 000085E9 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
   117 000085EF 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 000085F1 50                  <1>     push rax
   119 000085F2 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 000085F6 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 000085FB 58                  <1>     pop rax
   122 000085FC 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 000085FE E80C000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008603 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008605 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   126                              <1> .notInCompatMode:
   127 00008606 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 00008608 B821000000          <1>     mov eax, errLokVio
   129 0000860D F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 0000860E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 0000860F 57                  <1>     push rdi
   135 00008610 B821000000          <1>     mov eax, errLokVio
   136 00008615 EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 00008617 57                  <1>     push rdi
   141 00008618 C605(29070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 0000861F C605(92040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 00008626 488B2D(33070000)    <1>     mov rbp, qword [workingDPB] 
   145 0000862D 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 0000862F E815E7FFFF          <1>     call diskDevErr
   147 00008634 5F                  <1>     pop rdi
   148 00008635 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008637 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008639 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 0000863A F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 0000863B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                                  
    58                                  ;=========================END OF DOS MODULE==========================
    58          ------------------       info: assembly required 1+17+2 passes

